[{"/Users/codabae/Documents/ci work/heala/DProject/src/index.js":"1","/Users/codabae/Documents/ci work/heala/DProject/src/App.js":"2","/Users/codabae/Documents/ci work/heala/DProject/src/accessToken.js":"3","/Users/codabae/Documents/ci work/heala/DProject/src/store/index.js":"4","/Users/codabae/Documents/ci work/heala/DProject/src/components/graphQL/Mutation.js":"5","/Users/codabae/Documents/ci work/heala/DProject/src/components/muiTheme.js":"6","/Users/codabae/Documents/ci work/heala/DProject/src/components/routes/Routes.js":"7","/Users/codabae/Documents/ci work/heala/DProject/src/components/hooks/useActions.js":"8","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/index.js":"9","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/index.js":"10","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/index.js":"11","/Users/codabae/Documents/ci work/heala/DProject/src/store/store.js":"12","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HmoPlans.js":"13","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HealaPlans.js":"14","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Hospitals.js":"15","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/SubscriptionPlans.js":"16","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/SubscriptionIncome.js":"17","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/SingleHMO.js":"18","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ListManagment.js":"19","/Users/codabae/Documents/ci work/heala/DProject/src/store/action-creators/index.js":"20","/Users/codabae/Documents/ci work/heala/DProject/src/store/reducers/index.js":"21","/Users/codabae/Documents/ci work/heala/DProject/src/components/graphQL/useQuery.js":"22","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/CreateEditPlans.js":"23","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/CreateEditHMOPlans.js":"24","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/MainModal.js":"25","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/TableLayout.js":"26","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/UploadEnrolleeListForm.js":"27","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/AddEditHMOEnrolleeModal.js":"28","/Users/codabae/Documents/ci work/heala/DProject/src/components/Tables/SingleHMOTable.js":"29","/Users/codabae/Documents/ci work/heala/DProject/src/components/cards/InfoCard.js":"30","/Users/codabae/Documents/ci work/heala/DProject/src/components/Tables/HMOPlansTable.js":"31","/Users/codabae/Documents/ci work/heala/DProject/src/components/Tables/HospitalsTable.js":"32","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/ConfirmModal.js":"33","/Users/codabae/Documents/ci work/heala/DProject/src/helpers/isSelected.js":"34","/Users/codabae/Documents/ci work/heala/DProject/src/helpers/mockData.js":"35","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/tableHeaders.js":"36","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Time.js":"37","/Users/codabae/Documents/ci work/heala/DProject/src/helpers/selectedRows.js":"38","/Users/codabae/Documents/ci work/heala/DProject/src/helpers/filterHelperFunctions.js":"39","/Users/codabae/Documents/ci work/heala/DProject/src/hooks/useAlert.js":"40","/Users/codabae/Documents/ci work/heala/DProject/src/components/cards/SettingsCard.js":"41","/Users/codabae/Documents/ci work/heala/DProject/src/store/action-creators/hcp.js":"42","/Users/codabae/Documents/ci work/heala/DProject/src/store/action-creators/patient.js":"43","/Users/codabae/Documents/ci work/heala/DProject/src/store/action-creators/auth.js":"44","/Users/codabae/Documents/ci work/heala/DProject/src/store/action-creators/tablesActions.js":"45","/Users/codabae/Documents/ci work/heala/DProject/src/components/graphQL/fragment.js":"46","/Users/codabae/Documents/ci work/heala/DProject/src/helpers/func.js":"47","/Users/codabae/Documents/ci work/heala/DProject/src/helpers/validationSchemas.js":"48","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/AddEditHMOEnrolleeForm.js":"49","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/EnhancedTable.js":"50","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/CompoundSearch.js":"51","/Users/codabae/Documents/ci work/heala/DProject/src/components/Rows/HospitalRow.js":"52","/Users/codabae/Documents/ci work/heala/DProject/src/styles/hmoPageStyles.js":"53","/Users/codabae/Documents/ci work/heala/DProject/src/components/Rows/HMOPlanRow.js":"54","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/index.js":"55","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/index.js":"56","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/EnhancedTableHeader.js":"57","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/EnhancedTableToolbar.js":"58","/Users/codabae/Documents/ci work/heala/DProject/src/store/action-types/index.js":"59","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/DragAndDrop.js":"60","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Calendar.js":"61","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/FormikControl.js":"62","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Input.js":"63","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Checkboxs.js":"64","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Select.js":"65","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/IllnessModal.js":"66","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/Filters/index.js":"67","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/ProfileInfo.js":"68","/Users/codabae/Documents/ci work/heala/DProject/src/styles/hospitalPageStyles.js":"69","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/Filter.js":"70","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/ReferPatient.js":"71","/Users/codabae/Documents/ci work/heala/DProject/src/store/reducers/hcpReducer.js":"72","/Users/codabae/Documents/ci work/heala/DProject/src/store/reducers/authReducer.js":"73","/Users/codabae/Documents/ci work/heala/DProject/src/store/reducers/tablesReducer.js":"74","/Users/codabae/Documents/ci work/heala/DProject/src/store/reducers/patientReducer.js":"75","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/ProviderModal.js":"76","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/PermissionModal.js":"77","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/DeleteOrDisable.js":"78","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/RoleModal.js":"79","/Users/codabae/Documents/ci work/heala/DProject/src/components/Buttons/EditDelBtn.js":"80","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/EnrolleeProfileModal.js":"81","/Users/codabae/Documents/ci work/heala/DProject/src/components/Rows/SingleHMORow.js":"82","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/Filters/SingleHMOFilters.js":"83","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/DateTimePicker.js":"84","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/File.js":"85","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Date.js":"86","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Textarea.js":"87","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/TextError.js":"88","/Users/codabae/Documents/ci work/heala/DProject/src/components/Buttons/CloseBtn.js":"89","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/CustomButton.js":"90","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/ChervonDownIcon.js":"91","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/StatusPill.js":"92","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/deleteIcon.js":"93","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/EditIcon.js":"94","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/MessageAddIcon.js":"95","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/VerifiedIcon.js":"96","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/Calender2.js":"97","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/CallIcon.js":"98","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/SmsIcon.js":"99","/Users/codabae/Documents/ci work/heala/DProject/src/components/Typography.js":"100","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Loader.js":"101","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/WaitingList.js":"102","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/WhiteLabel.js":"103","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/PartnersProvider.js":"104","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/DoctorProvider.js":"105","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Hospital.js":"106","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Heala.js":"107","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Hm.js":"108","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/WaitingListDetails.js":"109","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ViewHCP.js":"110","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ViewReferral.js":"111","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/PatientProvider.js":"112","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/VideoCall.js":"113","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Illness.js":"114","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Subscription.js":"115","/Users/codabae/Documents/ci work/heala/DProject/src/components/Tables/PlansTable.js":"116","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/UserTypes.js":"117","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/DoctorEarning.js":"118","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/SinglePatient.js":"119","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Settings.js":"120","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/SingleHCP.js":"121","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ReferralTab.js":"122","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Permission.js":"123","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/PatientAppointment.js":"124","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Messages.js":"125","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Management.js":"126","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Hcps.js":"127","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpPatients.js":"128","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpConsultations.js":"129","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/DoctorPayout.js":"130","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Providers.js":"131","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpCaseNote.js":"132","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ViewMessage.js":"133","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpAvailability.js":"134","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpAppointments.js":"135","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Prescriptions.js":"136","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/PendingPayout.js":"137","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/PatientProfile.js":"138","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Partners.js":"139","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Financetable.js":"140","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Chat.js":"141","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Patients.js":"142","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Finance.js":"143","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Medications.js":"144","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/MedicalRecords.js":"145","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Login.js":"146","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpProfile.js":"147","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpEarnings.js":"148","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Email.js":"149","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HCPChat.js":"150","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Payout.js":"151","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HCP.js":"152","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ViewDoctorVerification.js":"153","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/DoctorVerificationProfile.js":"154","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Dashboard.js":"155","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/EditManagement.js":"156","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/CreateMessage.js":"157","/Users/codabae/Documents/ci work/heala/DProject/src/styles/doctorsPageStyles.js":"158","/Users/codabae/Documents/ci work/heala/DProject/src/styles/docVerificationPageStyles.js":"159","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Consultations.js":"160","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/PreviousButton.js":"161","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/CaseNotes.js":"162","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Administrator.js":"163","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/EmptyTable.js":"164","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/Header.js":"165","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/CircularProgress.js":"166","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/SearchInput.js":"167","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Backdrop.js":"168","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Appointments.js":"169","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/CardItem.js":"170","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/WaitingListTable.js":"171","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/DashboardChart.js":"172","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/Notifications.js":"173","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/HeaderContents.js":"174","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/HeaderProfile.js":"175","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/SideMenu.js":"176","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/EnhancedTableAction.js":"177","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Search.js":"178","/Users/codabae/Documents/ci work/heala/DProject/src/styles/patientsPageStyles.js":"179","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/NoData.js":"180","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/AvailabilityTable.js":"181","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/Filters/DoctorsFilters.js":"182","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/FilterList.js":"183","/Users/codabae/Documents/ci work/heala/DProject/src/components/Copy.js":"184","/Users/codabae/Documents/ci work/heala/DProject/src/styles/partnersPageStyles.js":"185","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/Success.js":"186","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/FormInput.js":"187","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/Filters/PatientFilters.js":"188","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/LineChart.js":"189","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Modal.js":"190","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/CircularChart.js":"191","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/LinearProgress.js":"192","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/FormSelect.js":"193","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/DisplayProfile.js":"194","/Users/codabae/Documents/ci work/heala/DProject/src/components/Rows/PlanListRow.js":"195","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/ProfileCard.js":"196","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/UserTypeModal.js":"197","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/DataGrid.js":"198","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/CheckBox.js":"199","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Card.js":"200","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Button.js":"201","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/bMI.js":"202","/Users/codabae/Documents/ci work/heala/DProject/src/styles/loginPageStyles.js":"203","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/AvailabilityCard.js":"204","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/LoginInput.js":"205","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/DataHeader.js":"206","/Users/codabae/Documents/ci work/heala/DProject/src/components/hooks/useCopy.js":"207","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/TestList.js":"208","/Users/codabae/Documents/ci work/heala/DProject/src/components/routes/PrivateRoute.js":"209","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Hmo.js":"210","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/HMOIcon.js":"211","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/LogoutIcon.js":"212","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/LabelIcon.js":"213","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/tableData.js":"214","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/SearchIcon.js":"215","/Users/codabae/Documents/ci work/heala/DProject/src/helpers/asideMenus.js":"216","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/BellIcon.js":"217","/Users/codabae/Documents/ci work/heala/DProject/src/helpers/breadcrumb.js":"218","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/UploadListModal.js":"219","/Users/codabae/Documents/ci work/heala/DProject/src/components/Rows/TestListRow.js":"220","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/EditTestForm.js":"221","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/AddTestForm.js":"222","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/AddEditHMOModal.js":"223","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/EmailIcon.js":"224","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/PartnersIcon.js":"225","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/DoctorsIcon.js":"226","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/PatientsIcon.js":"227","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/DashboardIcon.js":"228","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/MessagesIcon.js":"229","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/UploadListForm.js":"230","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/AddEditHMOForm.js":"231"},{"size":2364,"mtime":1661938689802,"results":"232","hashOfConfig":"233"},{"size":4914,"mtime":1662137626752,"results":"234","hashOfConfig":"233"},{"size":156,"mtime":1661666214000,"results":"235","hashOfConfig":"233"},{"size":37,"mtime":1661666214000,"results":"236","hashOfConfig":"233"},{"size":18375,"mtime":1661666214000,"results":"237","hashOfConfig":"233"},{"size":3714,"mtime":1661938689789,"results":"238","hashOfConfig":"233"},{"size":9129,"mtime":1662154681798,"results":"239","hashOfConfig":"233"},{"size":561,"mtime":1661938689785,"results":"240","hashOfConfig":"233"},{"size":1139,"mtime":1661666214000,"results":"241","hashOfConfig":"233"},{"size":831,"mtime":1661843891461,"results":"242","hashOfConfig":"233"},{"size":3286,"mtime":1662137626757,"results":"243","hashOfConfig":"233"},{"size":298,"mtime":1661938689803,"results":"244","hashOfConfig":"233"},{"size":2437,"mtime":1661666214000,"results":"245","hashOfConfig":"233"},{"size":2455,"mtime":1661666214000,"results":"246","hashOfConfig":"233"},{"size":425,"mtime":1661666214000,"results":"247","hashOfConfig":"233"},{"size":1812,"mtime":1661666214000,"results":"248","hashOfConfig":"233"},{"size":8598,"mtime":1661666214000,"results":"249","hashOfConfig":"233"},{"size":6193,"mtime":1662137626757,"results":"250","hashOfConfig":"233"},{"size":1429,"mtime":1661938689792,"results":"251","hashOfConfig":"233"},{"size":256,"mtime":1661666214000,"results":"252","hashOfConfig":"233"},{"size":371,"mtime":1661666214000,"results":"253","hashOfConfig":"233"},{"size":30913,"mtime":1662137626753,"results":"254","hashOfConfig":"233"},{"size":4386,"mtime":1661666214000,"results":"255","hashOfConfig":"233"},{"size":4456,"mtime":1661666214000,"results":"256","hashOfConfig":"233"},{"size":2495,"mtime":1661666214000,"results":"257","hashOfConfig":"233"},{"size":931,"mtime":1661666214000,"results":"258","hashOfConfig":"233"},{"size":3091,"mtime":1661666214000,"results":"259","hashOfConfig":"233"},{"size":2850,"mtime":1661666214000,"results":"260","hashOfConfig":"233"},{"size":8880,"mtime":1661666214000,"results":"261","hashOfConfig":"233"},{"size":5259,"mtime":1661666214000,"results":"262","hashOfConfig":"233"},{"size":7651,"mtime":1661938689781,"results":"263","hashOfConfig":"233"},{"size":3608,"mtime":1662137626752,"results":"264","hashOfConfig":"233"},{"size":4012,"mtime":1661938689787,"results":"265","hashOfConfig":"233"},{"size":81,"mtime":1661666214000,"results":"266","hashOfConfig":"233"},{"size":7387,"mtime":1661666214000,"results":"267","hashOfConfig":"233"},{"size":8050,"mtime":1662137626753,"results":"268","hashOfConfig":"233"},{"size":4309,"mtime":1662137626753,"results":"269","hashOfConfig":"233"},{"size":663,"mtime":1661938689801,"results":"270","hashOfConfig":"233"},{"size":10685,"mtime":1662137626758,"results":"271","hashOfConfig":"233"},{"size":2521,"mtime":1661938689802,"results":"272","hashOfConfig":"233"},{"size":1600,"mtime":1661938689784,"results":"273","hashOfConfig":"233"},{"size":203,"mtime":1661666214000,"results":"274","hashOfConfig":"233"},{"size":208,"mtime":1661666214000,"results":"275","hashOfConfig":"233"},{"size":857,"mtime":1661666214000,"results":"276","hashOfConfig":"233"},{"size":527,"mtime":1661666214000,"results":"277","hashOfConfig":"233"},{"size":247,"mtime":1661666214000,"results":"278","hashOfConfig":"233"},{"size":2766,"mtime":1661666214000,"results":"279","hashOfConfig":"233"},{"size":6856,"mtime":1662137626758,"results":"280","hashOfConfig":"233"},{"size":7392,"mtime":1661938689777,"results":"281","hashOfConfig":"233"},{"size":5150,"mtime":1661938689786,"results":"282","hashOfConfig":"233"},{"size":2899,"mtime":1661666214000,"results":"283","hashOfConfig":"233"},{"size":1920,"mtime":1661666214000,"results":"284","hashOfConfig":"233"},{"size":730,"mtime":1661666214000,"results":"285","hashOfConfig":"233"},{"size":4910,"mtime":1661666214000,"results":"286","hashOfConfig":"233"},{"size":255,"mtime":1661666214000,"results":"287","hashOfConfig":"233"},{"size":402,"mtime":1661666214000,"results":"288","hashOfConfig":"233"},{"size":2397,"mtime":1661666214000,"results":"289","hashOfConfig":"233"},{"size":1750,"mtime":1661938689786,"results":"290","hashOfConfig":"233"},{"size":678,"mtime":1661666214000,"results":"291","hashOfConfig":"233"},{"size":4874,"mtime":1661938689778,"results":"292","hashOfConfig":"233"},{"size":1106,"mtime":1661666214000,"results":"293","hashOfConfig":"233"},{"size":901,"mtime":1661666214000,"results":"294","hashOfConfig":"233"},{"size":1025,"mtime":1661666214000,"results":"295","hashOfConfig":"233"},{"size":808,"mtime":1661666214000,"results":"296","hashOfConfig":"233"},{"size":6118,"mtime":1662137626758,"results":"297","hashOfConfig":"233"},{"size":3683,"mtime":1661666214000,"results":"298","hashOfConfig":"233"},{"size":1153,"mtime":1661666214000,"results":"299","hashOfConfig":"233"},{"size":814,"mtime":1661666214000,"results":"300","hashOfConfig":"233"},{"size":771,"mtime":1661666214000,"results":"301","hashOfConfig":"233"},{"size":4006,"mtime":1661666214000,"results":"302","hashOfConfig":"233"},{"size":4178,"mtime":1661938689788,"results":"303","hashOfConfig":"233"},{"size":375,"mtime":1661666214000,"results":"304","hashOfConfig":"233"},{"size":2126,"mtime":1661666214000,"results":"305","hashOfConfig":"233"},{"size":770,"mtime":1661666214000,"results":"306","hashOfConfig":"233"},{"size":384,"mtime":1661666214000,"results":"307","hashOfConfig":"233"},{"size":5804,"mtime":1661938689788,"results":"308","hashOfConfig":"233"},{"size":4613,"mtime":1661938689788,"results":"309","hashOfConfig":"233"},{"size":4456,"mtime":1661938689787,"results":"310","hashOfConfig":"233"},{"size":3215,"mtime":1661938689788,"results":"311","hashOfConfig":"233"},{"size":2394,"mtime":1661666214000,"results":"312","hashOfConfig":"233"},{"size":7879,"mtime":1661666214000,"results":"313","hashOfConfig":"233"},{"size":5946,"mtime":1661666214000,"results":"314","hashOfConfig":"233"},{"size":3679,"mtime":1661938689779,"results":"315","hashOfConfig":"233"},{"size":1927,"mtime":1661666214000,"results":"316","hashOfConfig":"233"},{"size":4703,"mtime":1661666214000,"results":"317","hashOfConfig":"233"},{"size":2280,"mtime":1661666214000,"results":"318","hashOfConfig":"233"},{"size":2405,"mtime":1662137626758,"results":"319","hashOfConfig":"233"},{"size":428,"mtime":1661666214000,"results":"320","hashOfConfig":"233"},{"size":1232,"mtime":1661938689777,"results":"321","hashOfConfig":"233"},{"size":3656,"mtime":1661666214000,"results":"322","hashOfConfig":"233"},{"size":486,"mtime":1661938689780,"results":"323","hashOfConfig":"233"},{"size":1123,"mtime":1661666214000,"results":"324","hashOfConfig":"233"},{"size":2118,"mtime":1661666214000,"results":"325","hashOfConfig":"233"},{"size":1592,"mtime":1661666214000,"results":"326","hashOfConfig":"233"},{"size":982,"mtime":1661938689780,"results":"327","hashOfConfig":"233"},{"size":1975,"mtime":1661938689781,"results":"328","hashOfConfig":"233"},{"size":1683,"mtime":1661938689780,"results":"329","hashOfConfig":"233"},{"size":2030,"mtime":1661938689780,"results":"330","hashOfConfig":"233"},{"size":873,"mtime":1661938689780,"results":"331","hashOfConfig":"233"},{"size":225,"mtime":1661666214000,"results":"332","hashOfConfig":"233"},{"size":487,"mtime":1661938689783,"results":"333","hashOfConfig":"233"},{"size":736,"mtime":1661666214000,"results":"334","hashOfConfig":"233"},{"size":1945,"mtime":1661666214000,"results":"335","hashOfConfig":"233"},{"size":25958,"mtime":1662154681797,"results":"336","hashOfConfig":"233"},{"size":18045,"mtime":1662137626755,"results":"337","hashOfConfig":"233"},{"size":6570,"mtime":1662137626755,"results":"338","hashOfConfig":"233"},{"size":6499,"mtime":1662154681797,"results":"339","hashOfConfig":"233"},{"size":5452,"mtime":1662137626755,"results":"340","hashOfConfig":"233"},{"size":4534,"mtime":1661938689795,"results":"341","hashOfConfig":"233"},{"size":23812,"mtime":1661938689794,"results":"342","hashOfConfig":"233"},{"size":7696,"mtime":1661938689795,"results":"343","hashOfConfig":"233"},{"size":10180,"mtime":1662154681798,"results":"344","hashOfConfig":"233"},{"size":4351,"mtime":1661938689794,"results":"345","hashOfConfig":"233"},{"size":9181,"mtime":1661938689792,"results":"346","hashOfConfig":"233"},{"size":2468,"mtime":1661666214000,"results":"347","hashOfConfig":"233"},{"size":7705,"mtime":1661938689781,"results":"348","hashOfConfig":"233"},{"size":15600,"mtime":1662137626757,"results":"349","hashOfConfig":"233"},{"size":11006,"mtime":1661938689790,"results":"350","hashOfConfig":"233"},{"size":7355,"mtime":1661666214000,"results":"351","hashOfConfig":"233"},{"size":3215,"mtime":1661666214000,"results":"352","hashOfConfig":"233"},{"size":6934,"mtime":1661666214000,"results":"353","hashOfConfig":"233"},{"size":11358,"mtime":1661666214000,"results":"354","hashOfConfig":"233"},{"size":15984,"mtime":1661666214000,"results":"355","hashOfConfig":"233"},{"size":19640,"mtime":1661666214000,"results":"356","hashOfConfig":"233"},{"size":9824,"mtime":1661666214000,"results":"357","hashOfConfig":"233"},{"size":12640,"mtime":1661666214000,"results":"358","hashOfConfig":"233"},{"size":17976,"mtime":1661666214000,"results":"359","hashOfConfig":"233"},{"size":6854,"mtime":1661666214000,"results":"360","hashOfConfig":"233"},{"size":9091,"mtime":1661666214000,"results":"361","hashOfConfig":"233"},{"size":11439,"mtime":1661938689790,"results":"362","hashOfConfig":"233"},{"size":14702,"mtime":1662137626756,"results":"363","hashOfConfig":"233"},{"size":22512,"mtime":1661666214000,"results":"364","hashOfConfig":"233"},{"size":3070,"mtime":1661938689794,"results":"365","hashOfConfig":"233"},{"size":1562,"mtime":1661666214000,"results":"366","hashOfConfig":"233"},{"size":12267,"mtime":1661666214000,"results":"367","hashOfConfig":"233"},{"size":8212,"mtime":1661938689794,"results":"368","hashOfConfig":"233"},{"size":7543,"mtime":1661938689793,"results":"369","hashOfConfig":"233"},{"size":6084,"mtime":1661938689793,"results":"370","hashOfConfig":"233"},{"size":28027,"mtime":1662137626756,"results":"371","hashOfConfig":"233"},{"size":9626,"mtime":1661666214000,"results":"372","hashOfConfig":"233"},{"size":7876,"mtime":1661938689790,"results":"373","hashOfConfig":"233"},{"size":10459,"mtime":1661938578665,"results":"374","hashOfConfig":"233"},{"size":10222,"mtime":1661666214000,"results":"375","hashOfConfig":"233"},{"size":6560,"mtime":1661938689792,"results":"376","hashOfConfig":"233"},{"size":4282,"mtime":1661938689792,"results":"377","hashOfConfig":"233"},{"size":10775,"mtime":1661938689792,"results":"378","hashOfConfig":"233"},{"size":4330,"mtime":1661938689791,"results":"379","hashOfConfig":"233"},{"size":9770,"mtime":1661938689791,"results":"380","hashOfConfig":"233"},{"size":8447,"mtime":1661666214000,"results":"381","hashOfConfig":"233"},{"size":7545,"mtime":1661938689791,"results":"382","hashOfConfig":"233"},{"size":11481,"mtime":1661938689793,"results":"383","hashOfConfig":"233"},{"size":11123,"mtime":1661938689791,"results":"384","hashOfConfig":"233"},{"size":26518,"mtime":1661666214000,"results":"385","hashOfConfig":"233"},{"size":7419,"mtime":1661938689790,"results":"386","hashOfConfig":"233"},{"size":2196,"mtime":1661865958936,"results":"387","hashOfConfig":"233"},{"size":11431,"mtime":1661938689790,"results":"388","hashOfConfig":"233"},{"size":8548,"mtime":1661938689790,"results":"389","hashOfConfig":"233"},{"size":1593,"mtime":1661666214000,"results":"390","hashOfConfig":"233"},{"size":1253,"mtime":1661666214000,"results":"391","hashOfConfig":"233"},{"size":9171,"mtime":1661666214000,"results":"392","hashOfConfig":"233"},{"size":732,"mtime":1661666214000,"results":"393","hashOfConfig":"233"},{"size":22492,"mtime":1661666214000,"results":"394","hashOfConfig":"233"},{"size":13008,"mtime":1661666214000,"results":"395","hashOfConfig":"233"},{"size":1898,"mtime":1661666214000,"results":"396","hashOfConfig":"233"},{"size":1666,"mtime":1661666214000,"results":"397","hashOfConfig":"233"},{"size":1533,"mtime":1661843891458,"results":"398","hashOfConfig":"233"},{"size":1905,"mtime":1661666214000,"results":"399","hashOfConfig":"233"},{"size":530,"mtime":1661666214000,"results":"400","hashOfConfig":"233"},{"size":2307,"mtime":1661938689789,"results":"401","hashOfConfig":"233"},{"size":3953,"mtime":1662137626754,"results":"402","hashOfConfig":"233"},{"size":5068,"mtime":1661938689787,"results":"403","hashOfConfig":"233"},{"size":17089,"mtime":1662137626754,"results":"404","hashOfConfig":"233"},{"size":2972,"mtime":1661938689787,"results":"405","hashOfConfig":"233"},{"size":11513,"mtime":1661938578658,"results":"406","hashOfConfig":"233"},{"size":4809,"mtime":1662137626754,"results":"407","hashOfConfig":"233"},{"size":7988,"mtime":1662154681797,"results":"408","hashOfConfig":"233"},{"size":2319,"mtime":1661938689786,"results":"409","hashOfConfig":"233"},{"size":2864,"mtime":1661666214000,"results":"410","hashOfConfig":"233"},{"size":1871,"mtime":1661666214000,"results":"411","hashOfConfig":"233"},{"size":837,"mtime":1661938689787,"results":"412","hashOfConfig":"233"},{"size":14794,"mtime":1662137626754,"results":"413","hashOfConfig":"233"},{"size":7542,"mtime":1661938689779,"results":"414","hashOfConfig":"233"},{"size":1413,"mtime":1661666214000,"results":"415","hashOfConfig":"233"},{"size":510,"mtime":1661938689777,"results":"416","hashOfConfig":"233"},{"size":2773,"mtime":1662154681799,"results":"417","hashOfConfig":"233"},{"size":1979,"mtime":1661938689789,"results":"418","hashOfConfig":"233"},{"size":928,"mtime":1661666214000,"results":"419","hashOfConfig":"233"},{"size":8255,"mtime":1661938689779,"results":"420","hashOfConfig":"233"},{"size":6878,"mtime":1662154681796,"results":"421","hashOfConfig":"233"},{"size":2327,"mtime":1661938689783,"results":"422","hashOfConfig":"233"},{"size":3389,"mtime":1661666214000,"results":"423","hashOfConfig":"233"},{"size":1060,"mtime":1661938689783,"results":"424","hashOfConfig":"233"},{"size":1270,"mtime":1661938689783,"results":"425","hashOfConfig":"233"},{"size":4062,"mtime":1661938689783,"results":"426","hashOfConfig":"233"},{"size":5347,"mtime":1661666214000,"results":"427","hashOfConfig":"233"},{"size":1976,"mtime":1661938689784,"results":"428","hashOfConfig":"233"},{"size":4444,"mtime":1661666214000,"results":"429","hashOfConfig":"233"},{"size":3881,"mtime":1661938689782,"results":"430","hashOfConfig":"233"},{"size":2321,"mtime":1661938689782,"results":"431","hashOfConfig":"233"},{"size":1100,"mtime":1661666214000,"results":"432","hashOfConfig":"233"},{"size":1281,"mtime":1661666214000,"results":"433","hashOfConfig":"233"},{"size":158,"mtime":1661666214000,"results":"434","hashOfConfig":"233"},{"size":1796,"mtime":1661666214000,"results":"435","hashOfConfig":"233"},{"size":2451,"mtime":1661938689782,"results":"436","hashOfConfig":"233"},{"size":2455,"mtime":1661938689797,"results":"437","hashOfConfig":"233"},{"size":19087,"mtime":1661938689783,"results":"438","hashOfConfig":"233"},{"size":1390,"mtime":1661938689785,"results":"439","hashOfConfig":"233"},{"size":8594,"mtime":1661666214000,"results":"440","hashOfConfig":"233"},{"size":863,"mtime":1661666214000,"results":"441","hashOfConfig":"233"},{"size":4843,"mtime":1661938689792,"results":"442","hashOfConfig":"233"},{"size":913,"mtime":1661666214000,"results":"443","hashOfConfig":"233"},{"size":1010,"mtime":1661666214000,"results":"444","hashOfConfig":"233"},{"size":2492,"mtime":1661666214000,"results":"445","hashOfConfig":"233"},{"size":8035,"mtime":1661938689784,"results":"446","hashOfConfig":"233"},{"size":2013,"mtime":1661938689780,"results":"447","hashOfConfig":"233"},{"size":3177,"mtime":1662154681798,"results":"448","hashOfConfig":"233"},{"size":877,"mtime":1661938689779,"results":"449","hashOfConfig":"233"},{"size":3510,"mtime":1662154681799,"results":"450","hashOfConfig":"233"},{"size":2720,"mtime":1661666214000,"results":"451","hashOfConfig":"233"},{"size":1817,"mtime":1661666214000,"results":"452","hashOfConfig":"233"},{"size":4609,"mtime":1661666214000,"results":"453","hashOfConfig":"233"},{"size":3389,"mtime":1661938689778,"results":"454","hashOfConfig":"233"},{"size":2781,"mtime":1661666214000,"results":"455","hashOfConfig":"233"},{"size":747,"mtime":1661666214000,"results":"456","hashOfConfig":"233"},{"size":2203,"mtime":1661666214000,"results":"457","hashOfConfig":"233"},{"size":1672,"mtime":1661666214000,"results":"458","hashOfConfig":"233"},{"size":942,"mtime":1661666214000,"results":"459","hashOfConfig":"233"},{"size":1223,"mtime":1661666214000,"results":"460","hashOfConfig":"233"},{"size":715,"mtime":1661938689780,"results":"461","hashOfConfig":"233"},{"size":2181,"mtime":1661666214000,"results":"462","hashOfConfig":"233"},{"size":5414,"mtime":1661666214000,"results":"463","hashOfConfig":"233"},{"filePath":"464","messages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"179evoc",{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"468","messages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"470","messages":"471","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"472","messages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"474","messages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"476","messages":"477","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"478","messages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"480","messages":"481","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"482","messages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"486","messages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"488","messages":"489","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"490","messages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"492","messages":"493","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"494","messages":"495","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"496","messages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"498","messages":"499","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"500"},{"filePath":"501","messages":"502","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"503","messages":"504","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"507","messages":"508","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"509","messages":"510","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"511"},{"filePath":"512","messages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"514"},{"filePath":"515","messages":"516","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"517","messages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"521"},{"filePath":"522","messages":"523","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"524"},{"filePath":"525","messages":"526","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"527"},{"filePath":"528","messages":"529","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"530","messages":"531","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"532"},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"535"},{"filePath":"536","messages":"537","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"538"},{"filePath":"539","messages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"541","messages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"549","messages":"550","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"551"},{"filePath":"552","messages":"553","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"554"},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"557","messages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"559","messages":"560","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"561","messages":"562","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"563","messages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"565","messages":"566","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"567","messages":"568","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"569"},{"filePath":"570","messages":"571","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"572","messages":"573","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"574"},{"filePath":"575","messages":"576","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"577"},{"filePath":"578","messages":"579","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"580"},{"filePath":"581","messages":"582","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"583","messages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"585","messages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"587"},{"filePath":"588","messages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"590","messages":"591","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"592","messages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"594","messages":"595","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"596","messages":"597","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"598","messages":"599","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"600"},{"filePath":"601","messages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"603","messages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"605","messages":"606","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"607","messages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"609","messages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"611"},{"filePath":"612","messages":"613","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"614"},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"617","messages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"619","messages":"620","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"621"},{"filePath":"622","messages":"623","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"624"},{"filePath":"625","messages":"626","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"627","messages":"628","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"629","messages":"630","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"631","messages":"632","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"633","messages":"634","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"635","messages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"637"},{"filePath":"638","messages":"639","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"640"},{"filePath":"641","messages":"642","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"643"},{"filePath":"644","messages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"646","messages":"647","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"648","messages":"649","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"650","messages":"651","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"652"},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"655"},{"filePath":"656","messages":"657","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"658"},{"filePath":"659","messages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"661"},{"filePath":"662","messages":"663","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"664"},{"filePath":"665","messages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"667","messages":"668","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"669","messages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"671","messages":"672","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"673"},{"filePath":"674","messages":"675","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"676","messages":"677","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"678"},{"filePath":"679","messages":"680","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"681","messages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"683","messages":"684","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"685","messages":"686","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"687","messages":"688","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"689","messages":"690","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"691","messages":"692","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"693","messages":"694","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"695","messages":"696","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"697","messages":"698","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"699"},{"filePath":"700","messages":"701","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"702"},{"filePath":"703","messages":"704","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"705","messages":"706","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"707"},{"filePath":"708","messages":"709","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"710"},{"filePath":"711","messages":"712","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"713","messages":"714","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"715"},{"filePath":"716","messages":"717","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"718","messages":"719","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"720"},{"filePath":"721","messages":"722","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"723","messages":"724","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"725","messages":"726","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"727","messages":"728","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"729"},{"filePath":"730","messages":"731","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"732","messages":"733","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"734"},{"filePath":"735","messages":"736","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"737"},{"filePath":"738","messages":"739","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"740"},{"filePath":"741","messages":"742","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"743"},{"filePath":"744","messages":"745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"746","messages":"747","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"748"},{"filePath":"749","messages":"750","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"751","messages":"752","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"753"},{"filePath":"754","messages":"755","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"756"},{"filePath":"757","messages":"758","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"759"},{"filePath":"760","messages":"761","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"762","messages":"763","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"764"},{"filePath":"765","messages":"766","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"767"},{"filePath":"768","messages":"769","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"770"},{"filePath":"771","messages":"772","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"773"},{"filePath":"774","messages":"775","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"776"},{"filePath":"777","messages":"778","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"779"},{"filePath":"780","messages":"781","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"782","messages":"783","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"784"},{"filePath":"785","messages":"786","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"787"},{"filePath":"788","messages":"789","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"790","messages":"791","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"792","messages":"793","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"794"},{"filePath":"795","messages":"796","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"797"},{"filePath":"798","messages":"799","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"800","messages":"801","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"802"},{"filePath":"803","messages":"804","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"805"},{"filePath":"806","messages":"807","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"808"},{"filePath":"809","messages":"810","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"811"},{"filePath":"812","messages":"813","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"814"},{"filePath":"815","messages":"816","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"817","messages":"818","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"819","messages":"820","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"821"},{"filePath":"822","messages":"823","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"824"},{"filePath":"825","messages":"826","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"827"},{"filePath":"828","messages":"829","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"830"},{"filePath":"831","messages":"832","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"833"},{"filePath":"834","messages":"835","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"836","messages":"837","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"838","messages":"839","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"840"},{"filePath":"841","messages":"842","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"843"},{"filePath":"844","messages":"845","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"846"},{"filePath":"847","messages":"848","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"849","messages":"850","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"851","messages":"852","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"853"},{"filePath":"854","messages":"855","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"856"},{"filePath":"857","messages":"858","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"859","messages":"860","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"861"},{"filePath":"862","messages":"863","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"864","messages":"865","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"866","messages":"867","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"868","messages":"869","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"870"},{"filePath":"871","messages":"872","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"873","messages":"874","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"875","messages":"876","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"877"},{"filePath":"878","messages":"879","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"880","messages":"881","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"882"},{"filePath":"883","messages":"884","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"885","messages":"886","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"887"},{"filePath":"888","messages":"889","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"890","messages":"891","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"892","messages":"893","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"894","messages":"895","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"896"},{"filePath":"897","messages":"898","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"899","messages":"900","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"901","messages":"902","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"903"},{"filePath":"904","messages":"905","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"906"},{"filePath":"907","messages":"908","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"909","messages":"910","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"911","messages":"912","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"913","messages":"914","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"915"},{"filePath":"916","messages":"917","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"918","messages":"919","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"920"},{"filePath":"921","messages":"922","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"923","messages":"924","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"925"},{"filePath":"926","messages":"927","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"928","messages":"929","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"930"},{"filePath":"931","messages":"932","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"933"},{"filePath":"934","messages":"935","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"936"},{"filePath":"937","messages":"938","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"939"},{"filePath":"940","messages":"941","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"942"},{"filePath":"943","messages":"944","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"945"},{"filePath":"946","messages":"947","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"948","messages":"949","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"950","messages":"951","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"952"},{"filePath":"953","messages":"954","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"955"},{"filePath":"956","messages":"957","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"958","messages":"959","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"960"},{"filePath":"961","messages":"962","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"963"},{"filePath":"964","messages":"965","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"966","messages":"967","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"968"},{"filePath":"969","messages":"970","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"971"},{"filePath":"972","messages":"973","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"974"},{"filePath":"975","messages":"976","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"977","messages":"978","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"979"},{"filePath":"980","messages":"981","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"982","messages":"983","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"984","messages":"985","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"986","messages":"987","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"988","messages":"989","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"990","messages":"991","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"992","messages":"993","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"994","messages":"995","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"996","messages":"997","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"998","messages":"999","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1000","messages":"1001","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1002"},{"filePath":"1003","messages":"1004","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1005"},{"filePath":"1006","messages":"1007","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1008","messages":"1009","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1010","messages":"1011","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1012","messages":"1013","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1014","messages":"1015","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1016","messages":"1017","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1018","messages":"1019","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1020","messages":"1021","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1022"},{"filePath":"1023","messages":"1024","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1025"},"/Users/codabae/Documents/ci work/heala/DProject/src/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/App.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/accessToken.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/graphQL/Mutation.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/muiTheme.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/routes/Routes.js",["1026"],"/Users/codabae/Documents/ci work/heala/DProject/src/components/hooks/useActions.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/store.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HmoPlans.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HealaPlans.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Hospitals.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/SubscriptionPlans.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/SubscriptionIncome.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/SingleHMO.js",["1027","1028","1029"],"import React, { useEffect, useState } from \"react\";\nimport { Grid } from \"@mui/material\";\nimport useAlert from \"hooks/useAlert\";\nimport { useTheme } from \"@mui/styles\";\nimport { useParams } from \"react-router-dom\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { defaultPageInfo } from \"helpers/mockData\";\nimport MainModal from \"components/modals/MainModal\";\nimport { CustomButton } from \"components/Utilities\";\nimport ConfirmModal from \"components/modals/ConfirmModal\";\nimport { getEnrolles } from \"components/graphQL/useQuery\";\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\nimport { uploadFile } from \"helpers/filterHelperFunctions\";\nimport SingleHMOTable from \"components/Tables/SingleHMOTable\";\nimport { uploadHMOEnrollees } from \"components/graphQL/Mutation\";\nimport AddEditHMOEnrolleeModal from \"components/modals/AddEditHMOEnrolleeModal\";\nimport { UploadEnrolleeListForm } from \"components/Forms/UploadEnrolleeListForm\";\n\nconst SingleHMO = () => {\n  const theme = useTheme();\n  const { id } = useParams();\n  const { displayAlert, getErrorMsg } = useAlert();\n  const [hmoEnrollees, setHmoEnrollees] = useState([]);\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\n  const [uploadEnrollees] = useMutation(uploadHMOEnrollees);\n  const [uploadListModal, setUploadListModal] = useState(false);\n  const [addEnrolleeModal, setAddEnrolleeModal] = useState(false);\n  const [confirmUploadModal, setConfirmUploadModal] = useState(false);\n  const [\n    fetchEnrollees,\n    { error, loading, refetch, variables, networkStatus },\n  ] = useLazyQuery(getEnrolles, {\n    notifyOnNetworkStatusChange: true,\n  });\n\n  const enrolleesParams = {\n    hmoEnrollees,\n    setHmoEnrollees,\n    pageInfo,\n    setPageInfo,\n    fetchEnrollees,\n    error,\n    loading,\n    refetch,\n    variables,\n    networkStatus,\n  };\n\n  const fetchData = (fetch) => {\n    fetch({\n      variables: {\n        providerId: id,\n        first: 10,\n      },\n    })\n      .then(({ data }) => {\n        setHmoEnrollees(data?.getEnrollees?.data || []);\n        setPageInfo(data?.getEnrollees?.pageInfo || {});\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  useEffect(() => {\n    fetchData(fetchEnrollees);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [fetchEnrollees, id]);\n\n  const darkButton = {\n    background: theme.palette.primary.main,\n    hover: theme.palette.primary.light,\n    active: theme.palette.primary.dark,\n  };\n\n  const lightButton = {\n    background: \"#fff\",\n\n    hover: theme.palette.primary.light,\n    active: theme.palette.primary.dark,\n  };\n\n  return (\n    <Grid>\n      <Grid\n        container\n        spacing={3}\n        justifyContent=\"end\"\n        marginBottom=\"2rem\"\n        marginTop=\"2rem\"\n      >\n        <Grid item>\n          <CustomButton\n            startIcon={<AddIcon />}\n            title=\"Upload List\"\n            type={lightButton}\n            textColor=\"#2D2F39\"\n            textColorOnHover=\"#ffffff\"\n            onClick={() => setConfirmUploadModal(true)}\n          />\n        </Grid>\n        <Grid item>\n          <CustomButton\n            startIcon={<AddIcon />}\n            title=\"Add  Enrollee\"\n            type={darkButton}\n            onClick={() => setAddEnrolleeModal(true)}\n          />\n        </Grid>\n      </Grid>\n      <Grid>\n        <SingleHMOTable enrolleesParams={enrolleesParams} />\n      </Grid>\n\n      {/* MODALS */}\n      <Grid>\n        {/* ADD ENROLLEE MODAL */}\n        <AddEditHMOEnrolleeModal\n          isOpen={addEnrolleeModal}\n          setIsOpen={setAddEnrolleeModal}\n          refetchData={() =>\n            refetch({\n              variables: {\n                providerId: id,\n                first: 10,\n              },\n            })\n              .then(({ data }) => {\n                setHmoEnrollees(data?.getEnrollees?.data || []);\n                setPageInfo(data?.getEnrollees?.pageInfo || {});\n              })\n              .catch((error) => {\n                console.error(error);\n              })\n          }\n        />\n\n        {/* ======== CONFIRM UPLOAD ENROLLEE MODAL ========= */}\n        <ConfirmModal\n          open={confirmUploadModal}\n          setOpen={setConfirmUploadModal}\n          title=\"Confirm Upload Enrollee list\"\n          confirmationMsg=\"Uploading a new Enrollee JSON file will overwrite the current file.\"\n          onConfirm={() => {\n            setConfirmUploadModal(false);\n            setUploadListModal(true);\n          }}\n          onCancel={() => {\n            setConfirmUploadModal(false);\n          }}\n        />\n\n        {/* UPLOAD LIST MODAL */}\n        <MainModal isOpen={uploadListModal} setIsOpen={setUploadListModal}>\n          <UploadEnrolleeListForm\n            onSubmit={async (values) => {\n              const throwError = () =>\n                displayAlert(\n                  \"error\",\n                  \"Something went wrong while uploading file.\"\n                );\n              try {\n                const { file } = values;\n                const fileUrl = await uploadFile(file);\n\n                if (typeof fileUrl !== \"string\") {\n                  throwError();\n                  return;\n                }\n\n                const { data } = await uploadEnrollees({\n                  variables: {\n                    planId: values?.planId,\n                    fileUrl: fileUrl,\n                    providerId: id,\n                  },\n                });\n\n                if (!data) {\n                  throwError();\n                  return;\n                }\n\n                const enrolleesAdded =\n                  data?.uploadEnrollees?.result?.totalInserted;\n\n                displayAlert(\n                  \"success\",\n                  `${enrolleesAdded && enrolleesAdded} Tests Added.`\n                );\n                fetchData(refetch);\n                setUploadListModal(false);\n              } catch (error) {\n                console.error(\"Error from onSubmit Test JSON file\", error);\n                const errMsg = getErrorMsg(error);\n                displayAlert(\"error\", errMsg);\n              }\n            }}\n          />\n        </MainModal>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default SingleHMO;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ListManagment.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/action-creators/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/reducers/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/graphQL/useQuery.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/CreateEditPlans.js",["1030","1031","1032","1033","1034","1035"],"import React from \"react\";\nimport t from \"prop-types\";\nimport { Formik, Form } from \"formik\";\nimport { Grid } from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\n\nimport useAlert from \"hooks/useAlert\";\nimport { useMutation } from \"@apollo/client\";\nimport { CustomButton } from \"components/Utilities\";\nimport { FormikControl } from \"components/validation\";\nimport { CREATE_PLAN, UPDATE_PLAN } from \"components/graphQL/Mutation\";\nimport { addEditPlansValidationSchema } from \"helpers/validationSchemas\";\n\nconst CreateEditPlans = ({ type, initialValues, onSuccess }) => {\n  const theme = useTheme();\n  const [createPlan] = useMutation(CREATE_PLAN);\n  const [updatePlan] = useMutation(UPDATE_PLAN);\n  const { displayAlert, getErrorMsg, watchFunction } = useAlert();\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n  };\n\n  const onAddSubmit = async (values) => {\n    try {\n      const variables = {\n        ...values,\n        amount: Number(values.amount),\n      };\n      const createPlanRes = createPlan({\n        variables: variables,\n      });\n\n      return watchFunction(\n        \"Plan created successfully.\",\n        \"Couldn't create plan. Try again.\",\n        createPlanRes\n      ).then(() => {\n        onSuccess();\n      });\n    } catch (error) {\n      console.error(error);\n      const errMsg = getErrorMsg(error);\n      displayAlert(\"error\", errMsg);\n    }\n  };\n\n  const onUpdateSubmit = async (values) => {\n    try {\n      const variables = {\n        ...values,\n        amount: Number(values.amount),\n      };\n      const updatePlanRes = updatePlan({\n        variables: variables,\n      });\n\n      return watchFunction(\n        \"Plan updated successfully.\",\n        \"Couldn't update plan. Try again.\",\n        updatePlanRes\n      ).then(() => {\n        onSuccess();\n      });\n    } catch (error) {\n      console.error(error);\n      const errMsg = getErrorMsg(error);\n      displayAlert(\"error\", errMsg);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={(values) =>\n        type === \"edit\"\n          ? onUpdateSubmit({\n              ...values,\n            })\n          : onAddSubmit({ ...values })\n      }\n      validationSchema={addEditPlansValidationSchema}\n      validateOnChange={true}\n      validateOnMount={false}\n      validateOnBlur={true}\n    >\n      {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\n        return (\n          <Form style={{ marginTop: \"1rem\" }}>\n            <Grid item container direction=\"column\" gap={1}>\n              <Grid item container rowSpacing={2}>\n                <Grid item container>\n                  <FormikControl\n                    control=\"input\"\n                    name=\"name\"\n                    label=\"Name of plan\"\n                    placeholder=\"Enter Plan Name\"\n                  />\n                </Grid>\n\n                <Grid item container>\n                  <FormikControl\n                    control=\"input\"\n                    name=\"amount\"\n                    placeholder=\"Enter Amount\"\n                    label=\"Amount\"\n                  />\n                </Grid>\n\n                <Grid item container>\n                  <FormikControl\n                    control=\"input\"\n                    placeholder=\"Enter Duration\"\n                    name=\"duration\"\n                    label=\"Duration\"\n                  />\n                </Grid>\n                <Grid item container>\n                  <FormikControl\n                    control=\"input\"\n                    placeholder=\"Enter your Description\"\n                    name=\"description\"\n                    label=\"Description\"\n                  />\n                </Grid>\n\n                <Grid item xs={12}>\n                  <CustomButton\n                    title={type === \"edit\" ? \"Save Plan\" : \"Add Plan\"}\n                    width=\"100%\"\n                    isSubmitting={isSubmitting}\n                    disabled={isSubmitting}\n                    type={buttonType}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nCreateEditPlans.propTypes = {\n  onSuccess: t.func.isRequired,\n  initialValues: t.object.isRequired,\n  type: t.string.isRequired,\n};\n\nexport default CreateEditPlans;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/CreateEditHMOPlans.js",["1036","1037","1038","1039","1040","1041"],"import React from \"react\";\nimport t from \"prop-types\";\nimport { Formik, Form } from \"formik\";\nimport { Grid } from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\n\nimport useAlert from \"hooks/useAlert\";\nimport { useMutation } from \"@apollo/client\";\nimport { CustomButton } from \"components/Utilities\";\nimport { FormikControl } from \"components/validation\";\nimport { CREATE_PLAN, UPDATE_PLAN } from \"components/graphQL/Mutation\";\nimport { addEditPlansValidationSchema } from \"helpers/validationSchemas\";\n\nconst CreateEditHMOPlans = ({ type, initialValues, onSuccess }) => {\n  const theme = useTheme();\n  const [createPlan] = useMutation(CREATE_PLAN);\n  const [updatePlan] = useMutation(UPDATE_PLAN);\n  const { displayAlert, getErrorMsg, watchFunction } = useAlert();\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n  };\n\n  const onAddSubmit = async (values) => {\n    try {\n      const variables = {\n        ...values,\n        amount: Number(values.amount),\n      };\n      const createPlanRes = createPlan({\n        variables: variables,\n      });\n\n      return watchFunction(\n        \"Plan created successfully.\",\n        \"Couldn't create plan. Try again.\",\n        createPlanRes\n      ).then(() => {\n        onSuccess();\n      });\n    } catch (error) {\n      console.error(error);\n      const errMsg = getErrorMsg(error);\n      displayAlert(\"error\", errMsg);\n    }\n  };\n\n  const onUpdateSubmit = async (values) => {\n    try {\n      const variables = {\n        ...values,\n        amount: Number(values.amount),\n      };\n      const updatePlanRes = updatePlan({\n        variables: variables,\n      });\n\n      return watchFunction(\n        \"Plan updated successfully.\",\n        \"Couldn't update plan. Try again.\",\n        updatePlanRes\n      ).then(() => {\n        onSuccess();\n      });\n    } catch (error) {\n      console.error(error);\n      const errMsg = getErrorMsg(error);\n      displayAlert(\"error\", errMsg);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={(values) =>\n        type === \"edit\"\n          ? onUpdateSubmit({\n              ...values,\n            })\n          : onAddSubmit({ ...values })\n      }\n      validationSchema={addEditPlansValidationSchema}\n      validateOnChange={true}\n      validateOnMount={false}\n      validateOnBlur={true}\n    >\n      {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\n        return (\n          <Form style={{ marginTop: \"1rem\" }}>\n            <Grid item container direction=\"column\" gap={1}>\n              <Grid item container rowSpacing={2}>\n                <Grid item container>\n                  <FormikControl\n                    hidden\n                    control=\"input\"\n                    name=\"amount\"\n                    placeholder=\"Enter Amount\"\n                  />\n                </Grid>\n                <Grid item container>\n                  <FormikControl\n                    control=\"input\"\n                    name=\"name\"\n                    label=\"Name of plan\"\n                    placeholder=\"Enter Plan Name\"\n                  />\n                </Grid>\n                <Grid item container>\n                  <FormikControl\n                    disable={true}\n                    control=\"select\"\n                    options={[{ key: \"Consultation only\", value: \"\" }, ...[]]}\n                    name=\"accessType\"\n                    label=\"Access type\"\n                  />\n                </Grid>\n                <Grid item container>\n                  <FormikControl\n                    control=\"input\"\n                    placeholder=\"Enter your Description\"\n                    name=\"description\"\n                    label=\"Description\"\n                  />\n                </Grid>\n\n                <Grid item xs={12}>\n                  <CustomButton\n                    title={type === \"edit\" ? \"Save Plan\" : \"Add Plan\"}\n                    width=\"100%\"\n                    type={buttonType}\n                    isSubmitting={isSubmitting}\n                    disabled={isSubmitting}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nCreateEditHMOPlans.propTypes = {\n  onSuccess: t.func.isRequired,\n  initialValues: t.object.isRequired,\n  type: t.string.isRequired,\n};\n\nexport default CreateEditHMOPlans;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/MainModal.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/TableLayout.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/UploadEnrolleeListForm.js",["1042","1043","1044"],"import React, { useEffect, useState } from \"react\";\nimport t from \"prop-types\";\nimport { Formik, Form } from \"formik\";\nimport { Alert, Grid } from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\n\nimport DragAndDrop from \"./DragAndDrop\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { CustomButton } from \"components/Utilities\";\nimport { FormikControl } from \"components/validation\";\nimport { getPlans } from \"components/graphQL/useQuery\";\nimport { uploadEnrolleeFileValidationSchema } from \"helpers/validationSchemas\";\n\nexport const UploadEnrolleeListForm = ({ onSubmit }) => {\n  const theme = useTheme();\n  const [fetchPlans] = useLazyQuery(getPlans);\n  const [planOptions, setPlanOptions] = useState([]);\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n  };\n\n  const initialValues = {\n    planId: \"\",\n    file: null,\n  };\n\n  useEffect(() => {\n    fetchPlans({\n      variables: { type: \"hmo\" },\n    })\n      .then(({ data }) => {\n        const options = (data?.getPlans?.plan || []).map((option) => {\n          return { key: option?.name, value: option?._id };\n        });\n        setPlanOptions(options);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [fetchPlans]);\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={(values) => onSubmit(values)}\n      validationSchema={uploadEnrolleeFileValidationSchema}\n      validateOnChange={true}\n      validateOnMount={false}\n      validateOnBlur={true}\n    >\n      {({ isSubmitting, dirty, isValid, setFieldValue, setErrors }) => {\n        return (\n          <Form style={{ marginTop: \"1rem\" }}>\n            <Alert severity=\"warning\" sx={{ margin: \"1rem 0rem\" }}>\n              <strong>CAUTION - </strong> Uploading a new file may overwrite the\n              current file.\n            </Alert>\n            <Grid container direction=\"column\" spacing={3}>\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"select\"\n                  options={[{ key: \"Plan\", value: \"\" }, ...planOptions]}\n                  placeholder=\"Select Heala Plan\"\n                  name=\"planId\"\n                />\n              </Grid>\n              <Grid item>\n                <DragAndDrop\n                  name=\"file\"\n                  maxFiles={1}\n                  hasPreview={false}\n                  uploadFunc={(file) => {\n                    setErrors({});\n                    setFieldValue(\"file\", file);\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <CustomButton\n                  title=\"Upload file\"\n                  width=\"100%\"\n                  type={buttonType}\n                  isSubmitting={isSubmitting}\n                  disabled={isSubmitting}\n                />\n              </Grid>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nUploadEnrolleeListForm.propTypes = {\n  onSubmit: t.func.isRequired,\n};\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/AddEditHMOEnrolleeModal.js",["1045"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@mui/styles\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { Grid, Modal, Fade, Typography, Box, Backdrop } from \"@mui/material\";\nimport AddEditHMOEnrolleeForm from \"components/Forms/AddEditHMOEnrolleeForm\";\n\nconst useStyles = makeStyles((theme) => ({\n  closeIcon: {\n    \"&.MuiSvgIcon-root\": {\n      cursor: \"pointer\",\n\n      \"&:hover\": {\n        cursor: \"pointer\",\n        color: theme.palette.common.danger,\n      },\n    },\n  },\n}));\n\nconst AddEditHMOEnrolleeModal = ({\n  isOpen,\n  setIsOpen,\n  refetchData,\n  initialValues,\n  type,\n}) => {\n  const classes = useStyles();\n\n  const style = {\n    height: \"95vh\",\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    bgcolor: \"background.paper\",\n    boxShadow: 24,\n    borderRadius: \"1rem\",\n    overflowY: \"auto\",\n  };\n  return (\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"transition-modal-description\"\n      open={isOpen}\n      onClose={() => setIsOpen(false)}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <Fade in={isOpen}>\n        <Box\n          sx={style}\n          width={{ md: \"70vw\", sm: \"90vw\", lg: \"40vw\", xs: \"40vw\" }}\n          padding={{ sm: 2, xs: 2, md: 4 }}\n        >\n          <Grid\n            container\n            direction=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Grid\n              container\n              item\n              justifyContent=\"space-between\"\n              alignItems=\"center\"\n            >\n              <Grid item>\n                <Typography sx={{ fontSize: \"24px\", fontWeight: 500 }}>\n                  {type === \"add\" ? \"Add New Enrollee\" : \"Edit Enrollee\"}\n                </Typography>\n              </Grid>\n              <Grid item>\n                <CloseIcon\n                  color=\"primary\"\n                  fontSize=\"large\"\n                  className={classes.closeIcon}\n                  onClick={() => setIsOpen(false)}\n                />\n              </Grid>\n            </Grid>\n            <Grid item style={{ marginBottom: \"3rem\", width: \"100%\" }}>\n              <AddEditHMOEnrolleeForm\n                type={type}\n                editInitialValues={initialValues}\n                onSuccess={() => {\n                  setIsOpen(false);\n                  refetchData();\n                }}\n              />\n            </Grid>\n          </Grid>\n        </Box>\n      </Fade>\n    </Modal>\n  );\n};\n\nAddEditHMOEnrolleeModal.propTypes = {\n  isOpen: PropTypes.bool.isRequired,\n  setIsOpen: PropTypes.func.isRequired,\n  refetchData: PropTypes.func,\n  type: PropTypes.string,\n};\n\nexport default AddEditHMOEnrolleeModal;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Tables/SingleHMOTable.js",["1046","1047","1048","1049"],"import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Grid } from \"@mui/material\";\nimport useAlert from \"hooks/useAlert\";\nimport { useParams } from \"react-router-dom\";\nimport { useMutation } from \"@apollo/client\";\nimport { Loader } from \"components/Utilities\";\nimport { NetworkStatus } from \"@apollo/client\";\nimport { useStyles } from \"styles/hmoPageStyles\";\nimport { EmptyTable, NoData } from \"components/layouts\";\nimport SingleHMORow from \"components/Rows/SingleHMORow\";\n\nimport { getDynamicSearchPlaceholder } from \"helpers/func\";\nimport TableLayout from \"components/layouts/TableLayout\";\nimport { getEnrolles } from \"components/graphQL/useQuery\";\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\nimport EnhancedTable from \"components/layouts/EnhancedTable\";\nimport { deleteEnrollee } from \"components/graphQL/Mutation\";\nimport ConfirmDelete from \"components/modals/DeleteOrDisable\";\nimport SingleHMOFilters from \"components/Forms/Filters/SingleHMOFilters\";\nimport {\n  defaultPageInfo,\n  hmoSearchFilterOptions,\n  hmoSearchOptions,\n} from \"../../helpers/mockData\";\nimport { singleHmoTableHeadCells } from \"components/Utilities/tableHeaders\";\nimport AddEditHMOEnrolleeModal from \"components/modals/AddEditHMOEnrolleeModal\";\nimport {\n  changeTableLimit,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport EnrolleeProfileModal from \"components/modals/EnrolleeProfileModal\";\n\nconst SingleHMOTable = ({ enrolleesParams }) => {\n  const classes = useStyles();\n  const { hmoId } = useParams();\n  const { displayAlert, getErrorMsg } = useAlert();\n  const [editData, setEditData] = React.useState(null);\n  const [isDeleting, setIsDeleting] = React.useState({});\n  const [profileDetails, setProfileDetails] = useState({});\n  const [editEnrolleeModal, setEditEnrolleeModal] = useState(false);\n  const [profileDetailModal, setProfileDetailModal] = useState(false);\n  const [enrolleeToDelete, setEnrolleeToDelete] = React.useState(null);\n  const [confirmDeleteModal, setConfirmDeleteModal] = React.useState(false);\n  const [deleteHMOEnrollee] = useMutation(deleteEnrollee, {\n    refetchQueries: [{ query: getEnrolles }],\n  });\n  const {\n    hmoEnrollees,\n    setHmoEnrollees,\n    pageInfo,\n    setPageInfo,\n    fetchEnrollees,\n    error,\n    loading,\n    refetch,\n    variables,\n    networkStatus,\n  } = enrolleesParams;\n\n  React.useEffect(() => {\n    (hmoEnrollees || []).map((enrollee) => {\n      const newIsDeleting = isDeleting;\n      setIsDeleting({ [enrollee?._id]: false, ...newIsDeleting });\n      return null;\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [hmoEnrollees]);\n\n  const refreshData = () => {\n    refetch({\n      variables: {\n        providerId: hmoId,\n        first: 10,\n      },\n    })\n      .then(({ data }) => {\n        setHmoEnrollees(data?.getEnrollees?.data || []);\n        setPageInfo(data?.getEnrollees?.pageInfo || {});\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  const setTableData = async (response, errMsg) => {\n    response\n      .then(({ data }) => {\n        setHmoEnrollees(data?.getEnrollees?.data || []);\n        setPageInfo(data?.getEnrollees?.pageInfo || defaultPageInfo);\n      })\n      .catch((error) => {\n        console.error(error);\n        displayAlert(\"error\", errMsg);\n      });\n  };\n\n  if (error) return <NoData error={error} />;\n  return (\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\n      <Grid\n        item\n        container\n        spacing={2}\n        className={classes.searchFilterContainer}\n      >\n        <Grid item container flexWrap=\"wrap\" spacing={4}></Grid>\n      </Grid>\n      <TableLayout\n        filters={\n          <SingleHMOFilters\n            setHmoEnrollees={setHmoEnrollees}\n            setPageInfo={setPageInfo}\n            queryParams={{ variables, fetchEnrollees, refetch }}\n          />\n        }\n        search={\n          <CompoundSearch\n            queryParams={{\n              fetchData: fetchEnrollees,\n              variables,\n              loading,\n              newVariables: { providerId: hmoId },\n            }}\n            searchState={{\n              value: \"\",\n              filterBy: \"hmoId\",\n            }}\n            setPageInfo={(data) =>\n              setPageInfo(data?.getEnrollees?.pageInfo || {})\n            }\n            setProfiles={(data) =>\n              setHmoEnrollees(data?.getEnrollees?.data || [])\n            }\n            getSearchPlaceholder={(filterBy) =>\n              getDynamicSearchPlaceholder(filterBy, hmoSearchFilterOptions)\n            }\n            filterOptions={hmoSearchOptions}\n          />\n        }\n      >\n        {loading ? (\n          <Loader />\n        ) : networkStatus === NetworkStatus.refetch ? (\n          <Loader />\n        ) : hmoEnrollees.length > 0 ? (\n          /* ================= HMO TABLE ================= */\n          <Grid\n            container\n            item\n            direction=\"column\"\n            overflow=\"hidden\"\n            maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\n          >\n            <EnhancedTable\n              headCells={singleHmoTableHeadCells}\n              rows={hmoEnrollees}\n              paginationLabel=\"Enrollees per page\"\n              hasCheckbox={false}\n              dataPageInfo={pageInfo}\n              changeLimit={async (e) => {\n                const res = changeTableLimit(fetchEnrollees, {\n                  first: e,\n                });\n                await setTableData(res, \"Failed to change table limit.\");\n              }}\n              handlePagination={async (page) => {\n                const res = handlePageChange(\n                  fetchEnrollees,\n                  page,\n                  pageInfo,\n                  {}\n                );\n                await setTableData(res, \"Failed to change page.\");\n              }}\n            >\n              {hmoEnrollees.map((row, index) => {\n                const { _id } = row;\n                return (\n                  <SingleHMORow\n                    key={index}\n                    index={index}\n                    rowData={row}\n                    setEditData={setEditData}\n                    isDeleting={isDeleting[_id]}\n                    setEnrolleeIdToDelete={() => setEnrolleeToDelete(_id)}\n                    openEditModal={() => setEditEnrolleeModal(true)}\n                    openConfirmModal={() => setConfirmDeleteModal(true)}\n                    openProfileDetailsModal={() => {\n                      setProfileDetailModal(true);\n                      setProfileDetails(row);\n                    }}\n                  />\n                );\n              })}\n            </EnhancedTable>\n          </Grid>\n        ) : (\n          <EmptyTable\n            headCells={singleHmoTableHeadCells}\n            paginationLabel=\"Enrollees per page\"\n          />\n        )}\n      </TableLayout>\n\n      {/* ==== PROFILE DETAILS MODAL ===== */}\n      <EnrolleeProfileModal\n        isOpen={profileDetailModal}\n        setIsOpen={setProfileDetailModal}\n        profileData={profileDetails}\n      />\n\n      {/*  ======= CONFIRM DELETE ======== */}\n      <ConfirmDelete\n        open={confirmDeleteModal}\n        setOpen={setConfirmDeleteModal}\n        title=\"Delete Enrollee\"\n        btnValue=\"delete\"\n        onConfirm={async () => {\n          setConfirmDeleteModal(false);\n          const newIsDeleting = isDeleting;\n\n          try {\n            newIsDeleting[enrolleeToDelete] = true;\n            setIsDeleting({ ...newIsDeleting });\n            const { data } = await deleteHMOEnrollee({\n              variables: {\n                id: enrolleeToDelete,\n              },\n            });\n\n            if (!data) {\n              newIsDeleting[enrolleeToDelete] = false;\n              setIsDeleting({ ...newIsDeleting });\n              throw Error(\"Couldn't delete enrollee\");\n            }\n            displayAlert(\"success\", \"Deleted enrollee successfully.\");\n            refreshData();\n            newIsDeleting[enrolleeToDelete] = false;\n            setIsDeleting({ ...newIsDeleting });\n          } catch (error) {\n            console.error(error);\n            const errMsg = getErrorMsg(error);\n            displayAlert(\"error\", errMsg);\n            newIsDeleting[enrolleeToDelete] = false;\n            setIsDeleting({ ...newIsDeleting });\n          }\n        }}\n        confirmationMsg=\"Are you sure you want to delete\"\n        onCancel={() => {\n          setConfirmDeleteModal(false);\n        }}\n      />\n\n      {/* EDIT ENROLLEE MODAL */}\n      <AddEditHMOEnrolleeModal\n        isOpen={editEnrolleeModal}\n        setIsOpen={setEditEnrolleeModal}\n        type=\"edit\"\n        initialValues={editData}\n        refetchData={() => refreshData()}\n      />\n    </Grid>\n  );\n};\n\nSingleHMOTable.propTypes = {\n  enrolleesParams: PropTypes.object.isRequired,\n};\n\nexport default SingleHMOTable;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/cards/InfoCard.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Tables/HMOPlansTable.js",["1050","1051","1052","1053","1054","1055","1056","1057","1058","1059","1060","1061","1062","1063","1064","1065"],"import React, { useEffect, useState } from \"react\";\nimport { Grid } from \"@mui/material\";\nimport useAlert from \"hooks/useAlert\";\nimport { useSelector } from \"react-redux\";\nimport { useMutation } from \"@apollo/client\";\nimport { Loader } from \"components/Utilities\";\nimport { EmptyTable } from \"components/layouts\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { useStyles } from \"styles/hmoPageStyles\";\nimport MainModal from \"components/modals/MainModal\";\nimport { DeleteOrDisable } from \"components/modals\";\nimport { getPlans } from \"components/graphQL/useQuery\";\nimport { HMOPlanRow } from \"components/Rows/HMOPlanRow\";\nimport TableLayout from \"components/layouts/TableLayout\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { DELETE_PLAN } from \"components/graphQL/Mutation\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { getDynamicSearchPlaceholder } from \"helpers/func\";\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\nimport EnhancedTable from \"components/layouts/EnhancedTable\";\nimport { hmoPlansTableHeader } from \"components/Utilities/tableHeaders\";\nimport {\n  defaultPageInfo,\n  plansSearchFilterOptions,\n  plansSearchOptions,\n} from \"../../helpers/mockData\";\nimport {\n  changeTableLimit,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport CreateEditHMOPlans from \"components/Forms/CreateEditHMOPlans\";\n\nconst HMOPlansTable = ({ PlansQuery }) => {\n  /* const theme = useTheme(); */\n  const classes = useStyles();\n  const [id, setId] = useState(null);\n  const { watchFunction } = useAlert();\n  const [plans, setPlans] = useState([]);\n  const [deletePlan] = useMutation(DELETE_PLAN);\n  const [editModal, setEditModal] = useState(false);\n  const [editPlanData, setEditPlanData] = useState(\"\");\n  const [deleteModal, setdeleteModal] = useState(false);\n  const [isDeleting, setIsDeleting] = React.useState({});\n  const { fetchPlans, loading, data, refetch, variables, newVariables } =\n    PlansQuery;\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\n\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n\n  useEffect(() => {\n    fetchPlans({\n      variables: {\n        first: pageInfo?.limit,\n      },\n      notifyOnNetworkStatusChange: true,\n    });\n  }, [fetchPlans, pageInfo]);\n\n  useEffect(() => {\n    if (data) {\n      setPlans(data.getPlans.plan);\n      setPageInfo(data.getPlans.pageInfo);\n      (data.getPlans.plan || []).map((plan) => {\n        const newIsDeleting = isDeleting;\n        setIsDeleting({ [plan._id]: false, ...newIsDeleting });\n        return null;\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  // delete plan\n  const onConfirmDelPlan = async () => {\n    const newIsDeleting = isDeleting;\n    const stopDeleting = () => {\n      setId(null);\n      newIsDeleting[id] = false;\n      setIsDeleting({ ...newIsDeleting });\n    };\n    try {\n      newIsDeleting[id] = true;\n      setIsDeleting({ ...newIsDeleting });\n      const deletePlanRes = deletePlan({\n        variables: { id },\n        refetchQueries: [{ query: getPlans }],\n      });\n\n      watchFunction(\n        \"Plan deleted succesfully\",\n        \"Couldn't delete plan.\",\n        deletePlanRes\n      ).then(() => {\n        refetch();\n        stopDeleting();\n      });\n    } catch (error) {\n      stopDeleting();\n      console.error(error);\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid item flex={1} container direction=\"column\" rowGap={2}>\n        <Grid\n          item\n          container\n          spacing={2}\n          className={classes.searchFilterContainer}\n        >\n          <Grid item container flexWrap=\"wrap\" spacing={4}></Grid>\n        </Grid>\n        <TableLayout\n          search={\n            <CompoundSearch\n              queryParams={{\n                fetchData: fetchPlans,\n                variables,\n                loading,\n                newVariables: newVariables,\n              }}\n              searchState={{\n                value: \"\",\n                filterBy: \"name\",\n              }}\n              setPageInfo={(data) => null}\n              setProfiles={(data) => null}\n              getSearchPlaceholder={(filterBy) =>\n                getDynamicSearchPlaceholder(filterBy, plansSearchFilterOptions)\n              }\n              filterOptions={plansSearchOptions}\n            />\n          }\n        >\n          {loading ? (\n            <Loader />\n          ) : plans.length > 0 ? (\n            /* ================= HMO TABLE ================= */\n            <Grid\n              container\n              item\n              direction=\"column\"\n              overflow=\"hidden\"\n              maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\n            >\n              <EnhancedTable\n                headCells={hmoPlansTableHeader}\n                rows={plans}\n                paginationLabel=\"subscription per page\"\n                hasCheckbox={true}\n                changeLimit={async (e) => {\n                  await changeTableLimit(fetchPlans, { first: e });\n                }}\n                dataPageInfo={pageInfo}\n                handlePagination={async (page) => {\n                  await handlePageChange(fetchPlans, page, pageInfo, {});\n                }}\n              >\n                {plans.map((row, index) => {\n                  const isItemSelected = isSelected(row?._id, selectedRows);\n                  const labelId = `enhanced-table-checkbox-${index}`;\n                  const { _id, name, amount, description } = row;\n                  const editFormValues = {\n                    id: _id,\n                    name,\n                    amount,\n                    description,\n                    accessType: \"\",\n                  };\n                  return (\n                    <HMOPlanRow\n                      key={`${_id}-${index}`}\n                      plan={row}\n                      isItemSelected={isItemSelected}\n                      handleSelectedRows={handleSelectedRows}\n                      selectedRows={selectedRows}\n                      setSelectedRows={setSelectedRows}\n                      labelId={labelId}\n                      handleDeleteOpenDialog={() => {\n                        setId(row?._id);\n                        setdeleteModal(true);\n                      }}\n                      handleEditOpenDialog={() => {\n                        setEditPlanData(editFormValues);\n                        setEditModal(true);\n                      }}\n                      deleting={isDeleting[row._id]}\n                    />\n                  );\n                })}\n              </EnhancedTable>\n            </Grid>\n          ) : (\n            <EmptyTable\n              headCells={hmoPlansTableHeader}\n              paginationLabel=\"Users per page\"\n            />\n          )}\n        </TableLayout>\n      </Grid>\n      <Grid>\n        {/* EDIT PLAN MODAL */}\n        <MainModal\n          isOpen={editModal}\n          headerText=\"Edit plan\"\n          rowSpacing={5}\n          setIsOpen={() => setEditModal(false)}\n        >\n          <CreateEditHMOPlans\n            initialValues={editPlanData}\n            type=\"edit\"\n            onSuccess={() => {\n              setEditModal(false);\n              refetch();\n            }}\n          />\n        </MainModal>\n\n        {/* DELETE PLAN MODAL */}\n        <DeleteOrDisable\n          open={deleteModal}\n          setOpen={setdeleteModal}\n          title=\"Delete Plan\"\n          onConfirm={onConfirmDelPlan}\n          confirmationMsg=\"delete plan\"\n          btnValue=\"Delete\"\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default HMOPlansTable;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Tables/HospitalsTable.js",["1066"],"import React, { useEffect, useState } from \"react\";\nimport { EmptyTable, NoData } from \"components/layouts\";\nimport { Grid } from \"@mui/material\";\nimport { useStyles } from \"styles/hmoPageStyles\";\nimport TableLayout from \"components/layouts/TableLayout\";\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\nimport EnhancedTable from \"components/layouts/EnhancedTable\";\nimport { hospitalTableHeadCells } from \"components/Utilities/tableHeaders\";\nimport { defaultPageInfo } from \"helpers/mockData\";\nimport HospitalRow from \"components/Rows/HospitalRow\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { getProviders } from \"components/graphQL/useQuery\";\nimport { getDynamicSearchPlaceholder } from \"helpers/func\";\nimport { Loader } from \"components/Utilities\";\n\nconst HospitalsTable = () => {\n  const classes = useStyles();\n  const [hospitals, setHospitals] = useState([]);\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\n  const [fetchHospitals, { loading, error, variables }] = useLazyQuery(\n    getProviders,\n    {\n      variables: { userTypeId: \"61ed2354e6091400135e3d94\" },\n    }\n  );\n\n  useEffect(() => {\n    fetchHospitals()\n      .then(({ data }) => {\n        if (data) {\n          setHospitals(data?.getProviders?.provider || []);\n          setPageInfo(data?.getProviders?.pageInfo || {});\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [fetchHospitals]);\n\n  if (error) return <NoData error={error} />;\n  return (\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\n      <Grid\n        item\n        container\n        spacing={2}\n        className={classes.searchFilterContainer}\n      >\n        <Grid item container flexWrap=\"wrap\" spacing={4}></Grid>\n      </Grid>\n      <TableLayout\n        search={\n          <CompoundSearch\n            queryParams={{\n              fetchData: fetchHospitals,\n              variables,\n              loading,\n              newVariables: { provider: \"61db6f8968b248001aec4fcb\" },\n            }}\n            setPageInfo={(data) =>\n              setPageInfo(data?.getProviders?.pageInfo || {})\n            }\n            searchState={{\n              value: \"\",\n              filterBy: \"name\",\n            }}\n            setProfiles={(data) =>\n              setHospitals(data?.getProviders?.provider || [])\n            }\n            getSearchPlaceholder={(filterBy) =>\n              getDynamicSearchPlaceholder(filterBy, {\n                name: \"Search by name\",\n              })\n            }\n            filterOptions={[{ key: \"By name\", value: \"name\" }]}\n          />\n        }\n      >\n        {loading ? (\n          <Loader />\n        ) : hospitals.length > 0 ? (\n          /* ================= HMO TABLE ================= */\n          <Grid\n            container\n            item\n            direction=\"column\"\n            overflow=\"hidden\"\n            maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\n          >\n            <EnhancedTable\n              headCells={hospitalTableHeadCells}\n              rows={hospitals}\n              paginationLabel=\"Hospitals per page\"\n              hasCheckbox={false}\n              dataPageInfo={pageInfo}\n            >\n              {hospitals.map((row, index) => {\n                return <HospitalRow key={index} index={index} rowData={row} />;\n              })}\n            </EnhancedTable>\n          </Grid>\n        ) : (\n          <EmptyTable\n            headCells={hospitalTableHeadCells}\n            paginationLabel=\"Hospitals per page\"\n          />\n        )}\n      </TableLayout>\n    </Grid>\n  );\n};\n\nexport default HospitalsTable;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/ConfirmModal.js",["1067","1068","1069","1070"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Grid, Modal, Fade, Typography, Box, Backdrop } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { CustomButton } from \"components/Utilities\";\nimport { BsExclamationCircle } from \"react-icons/bs\";\n\nconst useStyles = makeStyles((theme) => ({\n  closeIcon: {\n    \"&.MuiSvgIcon-root\": {\n      cursor: \"pointer\",\n\n      \"&:hover\": {\n        color: theme.palette.common.danger,\n      },\n    },\n  },\n}));\n\nconst style = {\n  position: \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  width: \"auto\",\n  minWidth: \"40rem\",\n  height: \"auto\",\n  bgcolor: \"background.paper\",\n  boxShadow: 24,\n  borderRadius: \"1rem\",\n  padding: \"3rem\",\n};\n\nconst ConfirmModal = ({\n  open,\n  setOpen,\n  title,\n  confirmationMsg,\n  btnValue,\n  type,\n  onConfirm,\n  onCancel,\n  ...rest\n}) => {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const rejectBtn = {\n    background: theme.palette.disabled.main,\n    hover: theme.palette.common.gold,\n    active: theme.palette.info.dark,\n  };\n\n  const acceptBtn = {\n    background: theme.palette.primary.light,\n    hover: theme.palette.success.main,\n    active: theme.palette.disabled.main,\n  };\n\n  return (\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"transition-modal-description\"\n      open={open}\n      onClose={() => setOpen(false)}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <Fade in={open}>\n        <Box sx={style}>\n          <Grid\n            container\n            direction=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Grid item alignSelf=\"flex-end\">\n              <CloseIcon\n                color=\"primary\"\n                fontSize=\"medium\"\n                className={classes.closeIcon}\n                onClick={() => setOpen(false)}\n              />\n            </Grid>\n            <Grid item style={{ marginBottom: \"3rem\" }}>\n              <BsExclamationCircle\n                size=\"10rem\"\n                color={theme.palette.warning.main}\n              />\n            </Grid>\n            <Grid item style={{ marginBottom: \"2rem\" }}>\n              <Typography variant=\"h2\">{title}</Typography>\n            </Grid>\n            <Grid\n              item\n              style={{ marginBottom: \"2rem\" }}\n              sx={{ textAlign: \"center\" }}\n            >\n              <Typography variant=\"body1\">\n                {\"Are you sure you want to continue?\"}\n              </Typography>\n              <Typography variant=\"body1\">{`${confirmationMsg}`}</Typography>\n            </Grid>\n            <Grid\n              item\n              container\n              justifyContent=\"space-between\"\n              gap={3}\n              sx={{ justifyContent: \"space-between\" }}\n            >\n              <Grid item md>\n                <CustomButton\n                  title=\"Cancel\"\n                  type={rejectBtn}\n                  width=\"100%\"\n                  onClick={() => setOpen(false)}\n                />\n              </Grid>\n              <Grid item md>\n                <CustomButton\n                  title={\"Confirm\"}\n                  type={acceptBtn}\n                  width=\"100%\"\n                  onClick={() => {\n                    setOpen(false);\n                    onConfirm();\n                  }}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n        </Box>\n      </Fade>\n    </Modal>\n  );\n};\n\nConfirmModal.propTypes = {\n  open: PropTypes.bool.isRequired,\n  setOpen: PropTypes.func.isRequired,\n  title: PropTypes.string.isRequired,\n  confirmationMsg: PropTypes.string.isRequired,\n  btnValue: PropTypes.string,\n  type: PropTypes.string,\n  onConfirm: PropTypes.func,\n  onCancel: PropTypes.func,\n};\n\nexport default ConfirmModal;\n","/Users/codabae/Documents/ci work/heala/DProject/src/helpers/isSelected.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/helpers/mockData.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/tableHeaders.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Time.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/helpers/selectedRows.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/helpers/filterHelperFunctions.js",["1071","1072","1073","1074","1075","1076","1077","1078","1079","1080","1081","1082","1083"],"import axios from \"axios\";\nimport t from \"prop-types\";\nimport React from \"react\";\nimport { Typography } from \"@mui/material\";\nimport { removeEmptyStringValues } from \"./func\";\n\nexport const showErrorMsg = (enqueueSnackbar, errorMsg) => {\n  enqueueSnackbar(\n    <Typography style={{ fontSize: \"1.2rem\" }}>{`${errorMsg}`}</Typography>,\n    {\n      variant: \"error\",\n      preventDuplicate: true,\n      anchorOrigin: {\n        horizontal: \"center\",\n        vertical: \"top\",\n      },\n      autoHideDuration: 10000,\n    }\n  );\n};\n\nexport const showSuccessMsg = (enqueueSnackbar, Typography, successMsg) => {\n  enqueueSnackbar(\n    <Typography style={{ fontSize: \"1.2rem\" }}>{successMsg}</Typography>,\n    {\n      variant: \"success\",\n      preventDuplicate: true,\n      anchorOrigin: {\n        horizontal: \"right\",\n        vertical: \"top\",\n      },\n      autoHideDuration: 5000,\n    }\n  );\n};\n\nexport const getErrorMsg = (error) => {\n  try {\n    if (error?.graphQLErrors && error?.graphQLErrors?.length > 0) {\n      const errMsgs = (error?.graphQLErrors || []).map((err) => err.message);\n      return errMsgs || \"Something went wrong. Try again!!!\";\n    } else if (error?.networkError) {\n      const errMsgs = error?.networkError?.result?.errors?.map(\n        (err) => err.message\n      );\n      return errMsgs || \"Something went wrong. Try again!!!\";\n    } else if (error?.message) {\n      return error.message;\n    }\n  } catch (error) {\n    console.error(\"error from get error func.\", error);\n    return \"Something went wrong. Try again!!!\";\n  }\n};\n\nexport const handleError = (error, enqueueSnackbar) => {\n  try {\n    if (error?.graphQLErrors && error?.graphQLErrors?.length > 0) {\n      (error?.graphQLErrors || []).map((err) =>\n        showErrorMsg(enqueueSnackbar, err.message)\n      );\n    } else if (error?.networkError) {\n      error.networkError?.result?.errors?.map((err) =>\n        showErrorMsg(\n          enqueueSnackbar,\n          err.message || \"Something went wrong, try again.\"\n        )\n      );\n    } else if (error?.message) {\n      console.log(error?.message);\n      showErrorMsg(enqueueSnackbar, error.message);\n    }\n  } catch (error) {\n    showErrorMsg(enqueueSnackbar, \"Something went wrong. Try again!!!\");\n  }\n};\n\nexport const deleteVar = (variable) => {\n  try {\n    for (const key in variable) {\n      delete variable[key];\n    }\n  } catch (error) {\n    console.error(\"couldn't delete variables\", error);\n  }\n};\n\nexport const filterData = async (filterVaribles, queryParams) => {\n  try {\n    const { fetchData, refetch, variables } = queryParams;\n    const newFilterVaribles = removeEmptyStringValues(filterVaribles);\n    const getData = () => {\n      if (newFilterVaribles === {}) {\n        deleteVar(variables);\n        return refetch();\n      } else {\n        return fetchData({ variables: newFilterVaribles });\n      }\n    };\n\n    const { data } = await getData();\n\n    if (!data) {\n      throw Error(\"something went wrong while filtering by status\");\n    }\n\n    return data;\n  } catch (error) {\n    console.error(error);\n    throw error;\n  }\n};\n\n// DON'T USE ...\nexport const onFilterValueChange = async (\n  e,\n  name,\n  filterValues,\n  setFilterValues,\n  fetchData,\n  variables,\n  refetchData\n) => {\n  const value = e?.target?.value;\n  const newFilterData = { ...filterValues, [name]: value };\n  setFilterValues(newFilterData);\n  const newData = removeEmptyStringValues(newFilterData);\n  if (value !== \"\") {\n    fetchData({\n      variables: newData,\n    });\n  } else {\n    delete variables?.[name];\n    refetchData();\n  }\n};\n\nexport const resetFilters = (\n  setFilterValues,\n  values,\n  variables,\n  refetchData\n) => {\n  setFilterValues(values);\n  for (const key in variables) {\n    delete variables[key];\n  }\n  refetchData();\n};\n\nexport const changeTableLimit = async (fetchFunc, variables) => {\n  try {\n    return fetchFunc({\n      variables: variables,\n    });\n  } catch (error) {\n    console.log(\"couldn't change table limit\", error);\n  }\n};\nexport const banks = [\n  { id: \"1\", key: \"Access Bank\", value: \"044\" },\n  { id: \"2\", key: \"Citibank\", value: \"023\" },\n  { id: \"3\", key: \"Diamond Bank\", value: \"063\" },\n  { id: \"4\", key: \"Dynamic Standard Bank\", value: \"\" },\n  { id: \"5\", key: \"Ecobank Nigeria\", value: \"050\" },\n  { id: \"6\", key: \"Fidelity Bank Nigeria\", value: \"070\" },\n  { id: \"7\", key: \"First Bank of Nigeria\", value: \"011\" },\n  { id: \"8\", key: \"First City Monument Bank\", value: \"214\" },\n  { id: \"9\", key: \"Guaranty Trust Bank\", value: \"058\" },\n  { id: \"10\", key: \"Heritage Bank Plc\", value: \"030\" },\n  { id: \"11\", key: \"Jaiz Bank\", value: \"301\" },\n  { id: \"12\", key: \"Keystone Bank Limited\", value: \"082\" },\n  { id: \"13\", key: \"Providus Bank Plc\", value: \"101\" },\n  { id: \"14\", key: \"Polaris Bank\", value: \"076\" },\n  { id: \"15\", key: \"Stanbic IBTC Bank Nigeria Limited\", value: \"221\" },\n  { id: \"16\", key: \"Standard Chartered Bank\", value: \"068\" },\n  { id: \"17\", key: \"Sterling Bank\", value: \"232\" },\n  { id: \"18\", key: \"Suntrust Bank Nigeria Limited\", value: \"100\" },\n  { id: \"19\", key: \"Union Bank of Nigeria\", value: \"032\" },\n  { id: \"20\", key: \"United Bank for Africa\", value: \"033\" },\n  { id: \"21\", key: \"Unity Bank Plc\", value: \"215\" },\n  { id: \"22\", key: \"Wema Bank\", value: \"035\" },\n  { id: \"23\", key: \"Zenith Bank\", value: \"057\" },\n];\nexport const handlePageChange = (fetchDataFN, type, pageInfo, variables) => {\n  const getData = (pageNumber) => {\n    return fetchDataFN({\n      variables: {\n        page: pageNumber,\n        first: pageInfo?.limit || 10,\n        ...variables,\n      },\n    });\n  };\n  switch (type) {\n    case \"FIRSTPAGE\":\n      return getData(1);\n\n    case \"NEXTPAGE\":\n      return getData(pageInfo?.nextPage || 1);\n\n    case \"PREVPAGE\":\n      return getData(pageInfo?.prevPage || 1);\n\n    case \"LASTPAGE\":\n      return getData(pageInfo?.totalPages || 1);\n\n    default:\n      return;\n  }\n};\n\nexport const fetchMoreData = async (newPage, fetchData) => {\n  fetchData({\n    variables: {\n      page: newPage,\n    },\n  });\n};\n\nexport const trucateString = (word, length, startFrom = \"front\") => {\n  try {\n    const wordArr = word.split(\"\");\n    if (startFrom === \"front\") {\n      const newWord = `${wordArr.slice(0, length).join(\"\")}...`;\n      return newWord;\n    }\n\n    if (startFrom === \"back\") {\n      const newWord = `...${wordArr\n        .slice(wordArr.length - length, wordArr.length - 1)\n        .join(\"\")}`;\n      return newWord;\n    }\n  } catch (error) {\n    console.error(\"Error from trucateString FN\", error);\n    return word;\n  }\n};\n\ntrucateString.PropTypes = {\n  word: t.string.isRequired,\n  length: t.number.isRequired,\n};\n\nexport const trucateProfileLink = (word) => {\n  try {\n    const wordArr = word.split(\"\");\n    const start = `${wordArr.slice(0, 8).join(\"\")}`;\n    const end = `${wordArr\n      .slice(wordArr.length - 7, wordArr.length - 1)\n      .join(\"\")}`;\n    return `${start}...${end}`;\n  } catch (error) {\n    console.error(\"Error from trucateString FN\", error);\n    return word;\n  }\n};\n\nexport const compressAndUploadImage = async (\n  img,\n  uploadFunc,\n  setPreview,\n  name,\n  setFieldValue,\n  setProgress,\n  isCompressing,\n  setIsCompleted\n) => {\n  try {\n    if (!img) throw new Error(\"No file passed to upload function\");\n    const uploadRes = await uploadFunc(img, setProgress);\n    if (uploadRes === undefined) {\n      throw new Error(\"couldn't upload image\");\n    }\n    if (uploadRes) {\n      setFieldValue(name, uploadRes);\n      setIsCompleted(\"passed\");\n      setTimeout(() => {\n        setIsCompleted(null);\n      }, 1500);\n    }\n  } catch (error) {\n    console.log(\"Error while trying to upload image\", error);\n    setProgress(100);\n    setIsCompleted(\"failed\");\n    setTimeout(() => {\n      setPreview(undefined);\n      setIsCompleted(null);\n    }, 1500);\n  }\n};\n\nexport const uploadImage = async (file, setProgress) => {\n  try {\n    const form = new FormData();\n    form.append(\"file\", file);\n    const data = await axios({\n      method: \"post\",\n      url: \"https://api.heala.io/rest/media/upload/\",\n      headers: {\n        \"Content-Type\": `multipart/form-data; boundary=${form._boundary}`,\n      },\n      data: form,\n      onUploadProgress: (data) => {\n        //Set the progress value to show the progress bar\n        setProgress(Math.round((100 * data.loaded) / data.total));\n      },\n    });\n    return data.data.data.mediaUrl; //data.data.mediaUrl\n  } catch (error) {\n    console.error(error);\n    setProgress(100);\n  }\n};\n\nexport const uploadFile = async (file) => {\n  try {\n    const form = new FormData();\n    form.append(\"file\", file);\n    const data = await axios({\n      method: \"post\",\n      url: \"https://api.heala.io/rest/media/upload/\",\n      headers: {\n        \"Content-Type\": `multipart/form-data; boundary=${form._boundary}`,\n      },\n      data: form,\n    });\n    return data.data.data.mediaUrl;\n  } catch (error) {\n    console.error(error);\n  }\n};\n\nexport const deleteItem = async (\n  deleteMutation,\n  id = \"\",\n  resetId,\n  refresh,\n  Typography,\n  enqueueSnackbar,\n  setIsDeleting,\n  isDeleting\n) => {\n  const newIsDeleting = isDeleting;\n\n  try {\n    newIsDeleting[id] = true;\n    setIsDeleting({ ...newIsDeleting });\n    const { data } = await deleteMutation({\n      variables: {\n        id: id,\n      },\n    });\n\n    if (!data) {\n      resetId(null);\n      newIsDeleting[id] = false;\n      setIsDeleting({ ...newIsDeleting });\n      showErrorMsg(enqueueSnackbar, Typography, \"Couldn't delete, Try again.\");\n      return;\n    }\n\n    showSuccessMsg(\n      enqueueSnackbar,\n      Typography,\n      \"Partner deleted successfully.\"\n    );\n    resetId(null);\n    newIsDeleting[id] = false;\n    setIsDeleting({ ...newIsDeleting });\n    return refresh();\n  } catch (error) {\n    resetId(null);\n    newIsDeleting[id] = false;\n    setIsDeleting({ ...newIsDeleting });\n    console.log(\"couldn't delete partner from deletePartner FN\", error);\n    handleError(error, enqueueSnackbar);\n  }\n};\n\nexport const IsImg = (file) => {\n  const imgFormatsRegex = new RegExp(\n    /(jpeg|png|jpg|webp|jpg|jpeg|jfif|pjpeg|pjp|svg)/\n  );\n  try {\n    const fileArr = file?.name.split(\".\");\n    const lastItem = fileArr[fileArr.length - 1];\n    if (imgFormatsRegex.test(lastItem)) {\n      return true;\n    } else {\n      return false;\n    }\n  } catch (error) {\n    console.log(\"couldn't check if file is an image\", error);\n    return false;\n  }\n};\n\nexport const isFile = (file, fileType) => {\n  try {\n    const fileArr = file?.name.split(\".\");\n    const lastItem = fileArr[fileArr.length - 1];\n    if (lastItem === fileType) {\n      return true;\n    } else {\n      return false;\n    }\n  } catch (error) {\n    console.log(\"couldn't check file type\", error);\n    return false;\n  }\n};\n","/Users/codabae/Documents/ci work/heala/DProject/src/hooks/useAlert.js",["1084"],"import { useSnackbar } from \"notistack\";\nimport { Typography } from \"@mui/material\";\nimport React from \"react\";\n\nconst useAlert = () => {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const showErrorMsg = (errorMsg) => {\n    return enqueueSnackbar(\n      <Typography style={{ fontSize: \"1.2rem\" }}>{`${errorMsg}`}</Typography>,\n      {\n        variant: \"error\",\n        preventDuplicate: true,\n        anchorOrigin: {\n          horizontal: \"center\",\n          vertical: \"top\",\n        },\n        autoHideDuration: 10000,\n      }\n    );\n  };\n\n  const showSuccessMsg = (successMsg) => {\n    return enqueueSnackbar(\n      <Typography style={{ fontSize: \"1.2rem\" }}>{successMsg}</Typography>,\n      {\n        variant: \"success\",\n        preventDuplicate: true,\n        anchorOrigin: {\n          horizontal: \"right\",\n          vertical: \"top\",\n        },\n        autoHideDuration: 5000,\n      }\n    );\n  };\n\n  const getErrorMsg = (error) => {\n    try {\n      if (error?.graphQLErrors && error?.graphQLErrors?.length > 0) {\n        const errMsgs = (error?.graphQLErrors || []).map((err) => err.message);\n        return errMsgs || \"Something went wrong. Try again!!!\";\n      } else if (error?.networkError) {\n        const errMsgs = error?.networkError?.result?.errors?.map(\n          (err) => err.message\n        );\n        return errMsgs || \"Something went wrong. Try again!!!\";\n      } else if (error?.message) {\n        return error.message;\n      }\n    } catch (error) {\n      console.error(\"error from get error func.\", error);\n      return \"Something went wrong. Try again!!!\";\n    }\n  };\n\n  const displayAlert = (type, message) => {\n    switch (type) {\n      case \"success\":\n        return showSuccessMsg(message);\n\n      case \"error\":\n        if (typeof message === \"object\") {\n          return (message || []).map((msg) => showErrorMsg(msg));\n        } else {\n          return showErrorMsg(message);\n        }\n\n      default:\n        break;\n    }\n  };\n\n  const watchFunction = (successMsg, errorMsg, promise) =>\n    promise\n      .then((data) => {\n        if (!data) {\n          displayAlert(\"error\", \"Something went wrong, try again.\");\n          throw Error(\"Something went wrong in watchFunction\");\n        }\n        displayAlert(\"success\", successMsg);\n        return data;\n      })\n      .catch((error) => {\n        const msg = getErrorMsg(error);\n        displayAlert(\"error\", msg || errorMsg);\n        throw error;\n      });\n\n  return { displayAlert, watchFunction, getErrorMsg };\n};\nexport default useAlert;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/cards/SettingsCard.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/action-creators/hcp.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/action-creators/patient.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/action-creators/auth.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/action-creators/tablesActions.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/graphQL/fragment.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/helpers/func.js",["1085","1086","1087","1088"],"import { format } from \"date-fns\";\nimport moment from \"moment\";\n\nexport const arrangeItems = (array) => {\n  let finalArray = [];\n  let n = 0;\n  let arrayValues = [];\n  let arrayObject = {};\n  arrayObject.name = undefined;\n\n  // array.sort();\n  array.forEach((element) => {\n    let container = element.split(\":\");\n    if (arrayObject.name == container[0]) {\n      arrayValues.push(container[1]);\n      arrayObject.value = arrayValues;\n    } else {\n      finalArray[n] = arrayObject;\n      arrayValues = [];\n      arrayObject = {};\n      arrayObject.name = container[0];\n      arrayValues.push(container[1]);\n      arrayObject.value = arrayValues;\n      n += 1;\n    }\n  });\n  finalArray.shift();\n  return finalArray;\n};\n\nexport const removeEmptyStringValues = (obj) => {\n  try {\n    let newObj = {};\n    for (const key in obj) {\n      if (obj[key] !== \"\") {\n        newObj[key] = obj[key];\n      }\n    }\n    return newObj;\n  } catch (err) {\n    console.err(\"error from removeEmptyStringValues FN\", err);\n    return obj;\n  }\n};\n\nexport const setSideNav = (appNavData, pathname, setNav) => {\n  try {\n    const pathArr = pathname.split(\"/\");\n    if (pathArr.length < 2) {\n      setNav(0);\n      return;\n    }\n\n    appNavData.map((data) => {\n      if (data.path === `/${pathArr[1]}`) {\n        setNav(data?.id);\n      }\n    });\n  } catch (error) {\n    console.log(\"Something sent wrong with setSideNav FN\", error);\n  }\n};\n\nexport const dateMoment = (dateString) => {\n  const formatedDate = moment(dateString).utc().format(\"YYYY-MM-DD\");\n  if (formatedDate === \"Invalid date\") {\n    return null;\n  } else {\n    return formatedDate;\n  }\n};\n\nexport const getSearchPlaceholder = (filterBy) => {\n  return filterBy === \"id\"\n    ? \"Search by ID e.g 7NE6ELLO\"\n    : filterBy === \"firstName\"\n    ? \"Search by first name e.g John\"\n    : filterBy === \"lastName\"\n    ? \"Search by last name e.g Doe\"\n    : \"\";\n};\n\nexport const getDynamicSearchPlaceholder = (\n  filterBy,\n  obj = { hmoId: \"Search by HMO ID\" }\n) => {\n  let placeHolder = \"\";\n  Object.keys(obj).forEach((key) => {\n    if (key === filterBy) placeHolder = obj[key];\n  });\n  return placeHolder;\n};\n\nexport const getInitials = (name) => {\n  try {\n    const splitedNamesArr = name.split(\" \");\n\n    const initailsArr = splitedNamesArr.map((name) => {\n      const splitedNameArr = name.split(\"\");\n      return splitedNameArr[0];\n    });\n\n    return initailsArr.join(\"\");\n  } catch (error) {\n    console.error(\"error from getInitials func.\", error);\n    return \"\";\n  }\n};\n\nexport const formatDate = (date, formatType) => {\n  try {\n    const parsedDate = Date.parse(date);\n    const formatedDate = format(parsedDate, formatType);\n    return formatedDate;\n  } catch (error) {\n    console.error(error);\n    return \"No date\";\n  }\n};\n","/Users/codabae/Documents/ci work/heala/DProject/src/helpers/validationSchemas.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/AddEditHMOEnrolleeForm.js",["1089","1090","1091","1092","1093","1094"],"import React, { useEffect, useState } from \"react\";\nimport t from \"prop-types\";\nimport { Formik, Form } from \"formik\";\nimport { Grid } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { useTheme } from \"@mui/material/styles\";\n\nimport useAlert from \"hooks/useAlert\";\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\nimport { CustomButton } from \"components/Utilities\";\nimport { FormikControl } from \"components/validation\";\nimport { dateMoment, removeEmptyStringValues } from \"helpers/func\";\nimport { addHMOEnrolleInitialValues } from \"helpers/mockData\";\nimport { addHMOEnrolleeValidationSchema } from \"helpers/validationSchemas\";\nimport { createEnrollee, updateEnrollee } from \"components/graphQL/Mutation\";\nimport { getPlans } from \"components/graphQL/useQuery\";\n\nconst AddEditHMOEnrolleeForm = ({ type, editInitialValues, onSuccess }) => {\n  const theme = useTheme();\n  const { hmoId } = useParams();\n  const [date, setDate] = useState(\"\");\n  const [fetchPlans] = useLazyQuery(getPlans);\n  const { displayAlert, getErrorMsg } = useAlert();\n  const [planOptions, setPlanOptions] = useState([]);\n  const [addHMOEnrollee] = useMutation(createEnrollee);\n  const [updateHMOEnrollee] = useMutation(updateEnrollee);\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n  };\n\n  useEffect(() => {\n    fetchPlans({\n      variables: { type: \"hmo\" },\n    })\n      .then(({ data }) => {\n        const options = (data?.getPlans?.plan || []).map((option) => {\n          return { key: option?.name, value: option?._id };\n        });\n        setPlanOptions(options);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [fetchPlans]);\n\n  useEffect(() => {\n    setDate(Date.now());\n  }, []);\n\n  const onAddSubmit = async (values) => {\n    const formatedDate = dateMoment(values.expiryDate);\n    const variables = removeEmptyStringValues(values);\n    try {\n      if (!variables.providerId) {\n        throw Error(\"Provider ID not found!\");\n      }\n      const { data } = await addHMOEnrollee({\n        variables: { expiryDate: formatedDate, ...variables },\n      });\n      if (data) {\n        displayAlert(\"success\", \"Enrollee added successfully\");\n        onSuccess();\n      }\n    } catch (error) {\n      console.error(error);\n      const errMsg = getErrorMsg(error);\n      displayAlert(\"error\", errMsg);\n    }\n  };\n\n  const onUpdateSubmit = async (values) => {\n    const formatedDate = dateMoment(values.expiryDate);\n    const variables = removeEmptyStringValues(values);\n    try {\n      if (!variables?.providerId && !variables?.id) {\n        throw Error(\"Provider ID or Enrollee ID found!\");\n      }\n      const { data } = await updateHMOEnrollee({\n        variables: { expiryDate: formatedDate, ...variables },\n      });\n      if (data) {\n        displayAlert(\"success\", \"Enrollee updated successfully\");\n        onSuccess();\n      }\n    } catch (error) {\n      console.error(error);\n      const errMsg = getErrorMsg(error);\n      displayAlert(\"error\", errMsg);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={\n        type === \"edit\" ? editInitialValues : addHMOEnrolleInitialValues\n      }\n      onSubmit={(values) =>\n        type === \"edit\"\n          ? onUpdateSubmit({\n              id: editInitialValues._id,\n              providerId: hmoId,\n              ...values,\n            })\n          : onAddSubmit({ providerId: hmoId, ...values })\n      }\n      validationSchema={addHMOEnrolleeValidationSchema}\n      validateOnChange={true}\n      validateOnMount={false}\n      validateOnBlur={true}\n    >\n      {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\n        return (\n          <Form style={{ marginTop: \"1rem\" }}>\n            <Grid container direction=\"column\" gap={2}>\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"input\"\n                  label=\"First Name\"\n                  id=\"firstName\"\n                  name=\"firstName\"\n                  placeholder=\"Enter first name\"\n                />\n              </Grid>\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"input\"\n                  label=\"Last Name\"\n                  id=\"lastName\"\n                  name=\"lastName\"\n                  placeholder=\"Enter last name\"\n                />\n              </Grid>\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"input\"\n                  label=\"HMO ID\"\n                  id=\"hmoID\"\n                  name=\"hmoId\"\n                  placeholder=\"Enter HMO ID\"\n                />\n              </Grid>\n\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"input\"\n                  label=\"Email\"\n                  id=\"email\"\n                  name=\"email\"\n                  placeholder=\"Enter email address\"\n                />\n              </Grid>\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"input\"\n                  label=\"Phone number\"\n                  id=\"phone_number\"\n                  name=\"phone\"\n                  placeholder=\"Enter phone number\"\n                />\n              </Grid>\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"input\"\n                  label=\"HMO Plan\"\n                  id=\"plan\"\n                  name=\"plan\"\n                  placeholder=\"Enter HMO Plan\"\n                />\n              </Grid>\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"date\"\n                  label=\"Expiry date (for HMO plan)\"\n                  id=\"expiry\"\n                  name=\"expiryDate\"\n                  setFieldValue={setFieldValue}\n                  setValues={setValues}\n                  startDate={date}\n                />\n              </Grid>\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"select\"\n                  options={[{ key: \"Plan\", value: \"\" }, ...planOptions]}\n                  placeholder=\"Select Plan\"\n                  name=\"planId\"\n                  label=\"Access Heala Plan\"\n                />\n              </Grid>\n\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"file\"\n                  label=\"Upload photo\"\n                  id=\"photo\"\n                  name=\"photo\"\n                  setFieldValue={setFieldValue}\n                />\n              </Grid>\n\n              <Grid item container>\n                <CustomButton\n                  title={type === \"edit\" ? \"Update HMO\" : \"Add HMO\"}\n                  width=\"100%\"\n                  type={buttonType}\n                  isSubmitting={isSubmitting}\n                  disabled={isSubmitting}\n                />\n              </Grid>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nAddEditHMOEnrolleeForm.propTypes = {\n  onSuccess: t.func.isRequired,\n  editInitialValues: t.object,\n};\n\nexport default AddEditHMOEnrolleeForm;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/EnhancedTable.js",["1095"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useSelector } from \"react-redux\";\nimport { useTheme } from \"@mui/material/styles\";\nimport LastPageIcon from \"@mui/icons-material/LastPage\";\nimport FirstPageIcon from \"@mui/icons-material/FirstPage\";\nimport { KeyboardArrowLeft, KeyboardArrowRight } from \"@mui/icons-material\";\nimport {\n  Box,\n  IconButton,\n  Table,\n  TableBody,\n  TableContainer,\n  TablePagination,\n  Paper,\n} from \"@mui/material\";\nimport EnhancedTableHeader from \"./EnhancedTableHeader\";\nimport { paginationActionTypes } from \"helpers/mockData\";\nimport { useActions } from \"components/hooks/useActions\";\nimport EnhancedTableToolbar from \"./EnhancedTableToolbar\";\n//import { handlePageChange } from \"helpers/filterHelperFunctions\";\n\nconst useStyles = makeStyles((theme) => ({\n  pagination: {\n    \"& .MuiTablePagination-selectLabel\": {\n      fontSize: \"1.2rem\",\n    },\n\n    \"& .MuiTablePagination-select\": {\n      fontSize: \"1.2rem\",\n    },\n\n    \"& .MuiTablePagination-displayedRows\": {\n      fontSize: \"1.2rem\",\n    },\n  },\n\n  tableToolbar: {\n    \"&.MuiToolbar-root\": {\n      background: \"#eee\",\n    },\n  },\n}));\n\nconst EnhancedTable = ({\n  rows,\n  children,\n  headCells,\n  paginationLabel,\n  title,\n  type,\n  hasCheckbox,\n  changeLimit,\n  dataPageInfo,\n  hasPagination = true,\n  handlePagination,\n}) => {\n  const classes = useStyles();\n  const { setSelectedRows } = useActions();\n  const { selectedRows } = useSelector((state) => state.tables);\n\n  const handleSelectAllClick = (event) => {\n    if (event.target.checked) {\n      const newSelecteds = rows.map((selected) => selected.id);\n      setSelectedRows(newSelecteds);\n      return;\n    }\n    setSelectedRows([]);\n  };\n\n  return (\n    <Box sx={{ width: \"100%\" }}>\n      <Paper sx={{ width: \"100%\", mb: 2 }} elevation={0}>\n        <EnhancedTableToolbar numSelected={selectedRows.length} title={title} />\n\n        <TableContainer>\n          <Table sx={{ minWidth: 750 }} aria-labelledby=\"tableTitle\">\n            <EnhancedTableHeader\n              numSelected={selectedRows.length}\n              onSelectAllClick={handleSelectAllClick}\n              rowCount={rows.length}\n              headCells={headCells}\n              hasCheckbox={hasCheckbox}\n            />\n            <TableBody>{children}</TableBody>\n          </Table>\n        </TableContainer>\n        {hasPagination &&\n          (type !== \"editRole\" ? (\n            <TablePagination\n              rowsPerPageOptions={[5, 10, 15, 25]}\n              component=\"div\"\n              count={dataPageInfo?.totalDocs || 0}\n              rowsPerPage={dataPageInfo?.limit || 5}\n              page={dataPageInfo?.page - 1}\n              labelRowsPerPage={paginationLabel}\n              onPageChange={(e) => e}\n              onRowsPerPageChange={(e) => {\n                changeLimit(parseInt(e.target.value, 10));\n              }}\n              className={classes.pagination}\n              ActionsComponent={() => (\n                <EnhancedTableAction\n                  {...{\n                    dataPageInfo,\n                    handlePagination,\n                  }}\n                />\n              )}\n            />\n          ) : null)}\n      </Paper>\n    </Box>\n  );\n};\n\nEnhancedTable.propTypes = {\n  rows: PropTypes.array,\n  children: PropTypes.node,\n  headCells: PropTypes.array,\n  paginationLabel: PropTypes.string,\n  title: PropTypes.string,\n  type: PropTypes.string,\n  hasCheckbox: PropTypes.bool,\n  changeLimit: PropTypes.func,\n  dataPageInfo: PropTypes.object,\n  hasPagination: PropTypes.bool,\n  handlePagination: PropTypes.func,\n};\n\nconst EnhancedTableAction = ({ dataPageInfo, handlePagination }) => {\n  const theme = useTheme();\n  const { FIRSTPAGE, NEXTPAGE, PREVPAGE, LASTPAGE } = paginationActionTypes;\n\n  return (\n    <Box sx={{ flexShrink: 0, ml: 2.5 }}>\n      <IconButton\n        onClick={() => handlePagination(FIRSTPAGE)}\n        disabled={!dataPageInfo?.hasPrevPage}\n        aria-label=\"first page\"\n      >\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\n      </IconButton>\n      <IconButton\n        onClick={() => handlePagination(PREVPAGE)}\n        disabled={!dataPageInfo?.hasPrevPage}\n        aria-label=\"previous page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowRight />\n        ) : (\n          <KeyboardArrowLeft />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={() => {\n          handlePagination(NEXTPAGE);\n        }}\n        disabled={!dataPageInfo?.hasNextPage}\n        aria-label=\"next page\"\n      >\n        {theme.direction === \"rtl\" ? (\n          <KeyboardArrowLeft />\n        ) : (\n          <KeyboardArrowRight />\n        )}\n      </IconButton>\n      <IconButton\n        onClick={() => handlePagination(LASTPAGE)}\n        disabled={!dataPageInfo?.hasNextPage}\n        aria-label=\"last page\"\n      >\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\n      </IconButton>\n    </Box>\n  );\n};\n\nEnhancedTableAction.propTypes = {\n  dataPageInfo: PropTypes.object,\n  handlePagination: PropTypes.func,\n};\n\nexport default EnhancedTable;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/CompoundSearch.js",["1096"],"import React, { useState } from \"react\";\nimport t from \"prop-types\";\nimport Filter from \"./Filters\";\nimport useAlert from \"hooks/useAlert\";\nimport { Search } from \"components/Utilities\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { deleteVar } from \"helpers/filterHelperFunctions\";\n\nconst CompoundSearch = ({\n  queryParams,\n  searchState,\n  setPageInfo,\n  setProfiles,\n  getSearchPlaceholder,\n  filterOptions,\n}) => {\n  const state = searchState || {\n    value: \"\",\n    filterBy: \"id\",\n  };\n  const { displayAlert } = useAlert();\n  const { fetchData, variables, loading, newVariables } = queryParams;\n  const [searchValue, setSearchValue] = useState(state);\n\n  const search = async (searchBy, searchVal) => {\n    try {\n      deleteVar(variables);\n      let value = searchVal;\n      if (searchBy === \"id\") value = `HEALA-${searchVal}`;\n      const searchVariables =\n        value === \"\"\n          ? {\n              ...newVariables,\n            }\n          : {\n              [searchBy]: value,\n              ...newVariables,\n            };\n      fetchData({\n        variables: searchVariables,\n      }).then(({ data }) => {\n        if (!data) {\n          deleteVar(variables);\n          displayAlert(\"error\", `Couldn't search for ${searchVal}`);\n          throw Error(`Couldn't search for ${searchVal}`);\n        }\n        setProfiles(data); // set outside\n        setPageInfo(data); // set outside\n        deleteVar(variables);\n      });\n    } catch (error) {\n      deleteVar(variables);\n      console.error(error);\n      displayAlert(\"error\", `Couldn't search for ${searchVal}`);\n    }\n  };\n\n  return (\n    <Grid container spacing={2} flexWrap=\"wrap\">\n      <Grid item>\n        <Filter\n          options={filterOptions}\n          name=\"search\"\n          onHandleChange={(e) => {\n            deleteVar(variables);\n            setSearchValue({ ...searchValue, filterBy: e?.target?.value });\n          }}\n          value={searchValue.filterBy}\n          disable={loading}\n        />\n      </Grid>\n      <Grid item flex={1} width=\"100%\">\n        <Search\n          height=\"48px\"\n          hasStartIcon={false}\n          onChange={(e) => {\n            let value = e.target.value;\n            setSearchValue({ ...searchValue, value });\n          }}\n          placeholder={getSearchPlaceholder(searchValue.filterBy)}\n          startIcon={\n            searchValue.filterBy === \"id\" ? (\n              <Typography sx={{ fontSize: \"14px\" }}>HEALA-</Typography>\n            ) : null\n          }\n          onClickSearchBtn={() =>\n            search(searchValue.filterBy, searchValue.value)\n          }\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nCompoundSearch.propTypes = {\n  queryParams: t.object.isRequired,\n  searchState: t.object,\n  setPageInfo: t.func.isRequired,\n  setProfiles: t.func.isRequired,\n  getSearchPlaceholder: t.func,\n  filterOptions: t.array,\n};\n\nexport default CompoundSearch;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Rows/HospitalRow.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/styles/hmoPageStyles.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Rows/HMOPlanRow.js",["1097","1098","1099","1100","1101","1102","1103","1104","1105","1106","1107","1108","1109","1110"],"import React from \"react\";\nimport { useTheme } from \"@mui/styles\";\nimport { makeStyles } from \"@mui/styles\";\nimport { Loader } from \"components/Utilities\";\nimport { EditDelBtn } from \"components/Buttons/EditDelBtn\";\nimport { Checkbox, TableCell, TableRow } from \"@mui/material\";\n\nconst useStyles = makeStyles((theme) => ({\n  FormLabel: {\n    \"&.MuiFormLabel-root\": {\n      ...theme.typography.FormLabel,\n    },\n  },\n  button: {\n    \"&.MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"1rem\",\n      maxWidth: \"15rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.2rem\",\n      },\n\n      \"& .MuiButton-endIcon\": {\n        marginLeft: \".3rem\",\n        marginTop: \"-.2rem\",\n      },\n    },\n  },\n  btn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      width: \"100%\",\n    },\n  },\n  closeIcon: {\n    \"&.MuiSvgIcon-root\": {\n      fontSize: \"2rem \",\n      cursor: \"pointer\",\n\n      \"&:hover\": {\n        color: theme.palette.common.red,\n      },\n    },\n  },\n  tableBtn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      height: \"3rem\",\n      fontSize: \"1.25rem\",\n      borderRadius: \"2rem\",\n      boxShadow: \"none\",\n      width: \"12rem\",\n\n      \"&:hover\": {\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n          color: \"#fff\",\n        },\n      },\n\n      \"&:active\": {\n        boxShadow: \"none\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.5rem\",\n      },\n    },\n  },\n\n  redBtn: {\n    \"&.MuiButton-root\": {\n      background: theme.palette.common.lightRed,\n      color: theme.palette.common.red,\n\n      \"&:hover\": {\n        background: theme.palette.error.light,\n        color: \"#fff\",\n      },\n    },\n  },\n\n  greenBtn: {\n    \"&.MuiButton-root\": {\n      background: theme.palette.common.lightGreen,\n      color: theme.palette.common.green,\n\n      \"&:hover\": {\n        background: theme.palette.success.light,\n        color: \"#fff\",\n      },\n    },\n  },\n  tableCell: {\n    \"&.MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.6rem !important\",\n      height: \"3rem\",\n      borderRadius: \"1.3rem\",\n    },\n    modal: {\n      background: \"red !important\",\n      \"& > * \": {\n        padding: \"2rem 1rem\",\n      },\n    },\n    \".MuiGrid-root\": {\n      background: \"red\",\n    },\n  },\n}));\n\nexport const HMOPlanRow = ({\n  plan,\n  isItemSelected,\n  handleSelectedRows,\n  selectedRows,\n  setSelectedRows,\n  labelId,\n  handleDeleteOpenDialog,\n  handleEditOpenDialog,\n  deleting,\n}) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { _id, name, duration, description } = plan;\n  return (\n    <TableRow\n      hover\n      role=\"checkbox\"\n      aria-checked={isItemSelected}\n      tabIndex={-1}\n      key={_id}\n      selected={isItemSelected}\n      sx={{ cursor: \"pointer\" }}\n      onClick={() => handleEditOpenDialog()}\n    >\n      <TableCell padding=\"checkbox\">\n        <Checkbox\n          onClick={() => handleSelectedRows(_id, selectedRows, setSelectedRows)}\n          color=\"primary\"\n          checked={isItemSelected}\n          inputProps={{\n            \"aria-labelledby\": labelId,\n          }}\n        />\n      </TableCell>\n      <TableCell\n        id={labelId}\n        scope=\"row\"\n        align=\"left\"\n        className={classes.tableCell}\n        style={{ color: theme.palette.common.black }}\n      >\n        {name}\n      </TableCell>\n\n      <TableCell\n        align=\"left\"\n        className={classes.tableCell}\n        style={{\n          color: theme.palette.common.black,\n          maxWidth: \"20rem\",\n        }}\n      >\n        {description}\n      </TableCell>\n      <TableCell\n        align=\"left\"\n        className={classes.tableCell}\n        style={{\n          color: theme.palette.common.black,\n          maxWidth: \"20rem\",\n        }}\n      >\n        {duration}\n      </TableCell>\n\n      <TableCell align=\"left\" className={classes.tableCell}>\n        <div\n          style={{\n            height: \"100%\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n          }}\n        >\n          {/* <div style={{ marginRight: \"1rem\" }}>\n            <EditDelBtn\n              type=\"edit\"\n              text=\"Edit plan\"\n              onHandleClick={() => handleEditOpenDialog()}\n            />\n          </div> */}\n          {deleting ? (\n            <Loader />\n          ) : (\n            <EditDelBtn\n              type=\"delete\"\n              text=\"Delete plan\"\n              onHandleClick={() => handleDeleteOpenDialog()}\n            />\n          )}\n        </div>\n      </TableCell>\n    </TableRow>\n  );\n};\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/EnhancedTableHeader.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/EnhancedTableToolbar.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/action-types/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/DragAndDrop.js",["1111"],"import React from \"react\";\nimport t from \"prop-types\";\nimport { ErrorMessage } from \"formik\";\nimport { useDropzone } from \"react-dropzone\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { Grid, Typography } from \"@mui/material\";\n\nimport styled from \"styled-components\";\nimport { TextError } from \"components/Utilities/TextError\";\nimport { CustomButton, Loader } from \"components/Utilities\";\nimport { IsImg } from \"helpers/filterHelperFunctions\";\n\nconst getColor = (props) => {\n  if (props.isDragAccept) {\n    return \"#00e676\";\n  }\n  if (props.isDragReject) {\n    return \"#ff1744\";\n  }\n  if (props.isFocused) {\n    return \"#2196f3\";\n  }\n  return \"#eeeeee\";\n};\n\nconst Container = styled.div`\n  min-height: 250px;\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  padding: 20px;\n  border-width: 2px;\n  border-radius: 2px;\n  border-color: ${(props) => getColor(props)};\n  border-style: dashed;\n  background-color: #fafafa;\n  color: #777171;\n  outline: none;\n  transition: border 0.24s ease-in-out;\n`;\n\nconst thumb = {\n  display: \"inline-flex\",\n  borderRadius: 2,\n  backgroundColor: \"#eaeaea\",\n  border: \"1px solid #eaeaea\",\n  marginBottom: 8,\n  marginRight: 8,\n  width: 100,\n  height: 100,\n  padding: 4,\n  boxSizing: \"border-box\",\n};\n\nconst thumbInner = {\n  display: \"flex\",\n  backgroundColor: \"#eaeaea\",\n  minWidth: 0,\n  overflow: \"hidden\",\n};\n\nconst img = {\n  display: \"block\",\n  backgroundColor: \"#eaeaea\",\n  width: \"auto\",\n  height: \"100%\",\n};\n\nconst errorContainer = {\n  margin: \"1rem 0rem\",\n};\n\nconst DragAndDrop = ({ name, maxFiles, hasPreview, uploadFunc }) => {\n  const theme = useTheme();\n  const [preview, setPreview] = React.useState(\"\");\n  const [progress] = React.useState();\n  const [isCompleted] = React.useState(null);\n  const [isCompressing] = React.useState(false);\n  const [file, setFile] = React.useState(null);\n  const {\n    getRootProps,\n    getInputProps,\n    isFocused,\n    isDragAccept,\n    isDragReject,\n    open,\n  } = useDropzone({\n    accept: \"application/json\",\n    maxFiles: maxFiles,\n    autoFocus: true,\n    onDropAccepted: (acceptedFiles) => {\n      setFile(acceptedFiles[0]);\n      if (hasPreview || IsImg(acceptedFiles[0])) {\n        const reader = new FileReader();\n        reader.readAsDataURL(acceptedFiles[0]);\n        reader.onloadend = (e) => setPreview(reader.result);\n        // call the upload func\n        /* compressAndUploadImage(\n          acceptedFiles[0],\n          uploadImage,\n          setPreview,\n          name,\n          setFieldValue,\n          setProgress,\n          setIsCompressing,\n          setIsCompleted\n        ); */\n      } else {\n        uploadFunc(acceptedFiles[0]);\n      }\n    },\n  });\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n  };\n\n  return (\n    <div>\n      <div className=\"\">\n        <Container {...getRootProps({ isFocused, isDragAccept, isDragReject })}>\n          <input {...getInputProps()} />\n          <Typography>\n            Drag and drop your file(s), or click to select files or Click on the\n            button below\n          </Typography>\n          <Grid\n            item\n            container\n            justifyContent=\"center\"\n            style={{ marginTop: \"15px\" }}\n          >\n            <CustomButton\n              variant=\"contained\"\n              title=\" Select file(s)\"\n              type={buttonType}\n              onClick={(e) => {\n                e.preventDefault();\n                open();\n              }}\n            />\n          </Grid>\n        </Container>\n      </div>\n      <div style={errorContainer}>\n        <ErrorMessage name={name} component={TextError} />\n      </div>\n      <aside style={{ marginTop: \"1.5rem\" }}>\n        <Grid item>\n          {progress < 100 || isCompressing ? (\n            <Grid\n              container\n              item\n              direction=\"row\"\n              justifyContent=\"center\"\n              alignItems=\"center\"\n            >\n              <Typography display={\"inline\"}>\n                {isCompressing ? \"Compressing file\" : \"Uploading file\"}\n              </Typography>\n              <Loader />\n            </Grid>\n          ) : preview && isCompleted !== \"failed\" && IsImg(file) ? (\n            <div style={thumb}>\n              <div style={thumbInner}>\n                <img src={preview} alt=\"preview\" style={img} />\n              </div>\n            </div>\n          ) : (\n            <Typography sx={{ marginBottom: \"1rem\", color: \"green\" }}>\n              {file && file.name}\n            </Typography>\n          )}\n        </Grid>\n      </aside>\n    </div>\n  );\n};\n\nDragAndDrop.propTypes = {\n  name: t.string.isRequired,\n  maxFiles: t.number.isRequired,\n  hasPreview: t.bool.isRequired,\n  uploadFunc: t.func.isRequired,\n};\n\nexport default DragAndDrop;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Calendar.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/FormikControl.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Input.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Checkboxs.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Select.js",["1112"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@mui/styles\";\nimport { Field, ErrorMessage } from \"formik\";\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\nimport { FormControl, FormLabel, Select, MenuItem, Grid } from \"@mui/material\";\n\nimport Typography from \"@mui/material/Typography\";\nimport { TextError } from \"components/Utilities/TextError\";\nimport { CloseBtn } from \"components/Buttons/CloseBtn\";\nimport ChervonDownIcon from \"components/Icons/ChervonDownIcon\";\n\nconst useStyles = makeStyles((theme) => ({\n  FormLabel: {\n    \"&.MuiFormLabel-root\": {\n      ...theme.typography.FormLabel,\n    },\n  },\n  select: {\n    \"&.MuiOutlinedInput-root\": {\n      fontWeight: \"200 !important\",\n      color: `${theme.palette.common.grey} !important`,\n      backgroundColor: \"#FAFAFA\",\n      height: ({ height }) => `${height}`,\n      fontSize: \"14px !important\",\n      borderRadius: \"12px\",\n      border: \"1px solid #E0E0E0 !important\",\n\n      \"&:disabled\": {\n        backgroundColor: \"#E0E0E0 !important\",\n      },\n\n      \"&>fieldset\": {\n        border: 0,\n      },\n    },\n\n    \"&.MuiTypography-root\": {\n      fontWeight: \"200 !important\",\n      color: `${theme.palette.common.grey} !important`,\n      minHeight: 50,\n      fontSize: \"14px !important\",\n      borderRadius: \"12px\",\n    },\n  },\n}));\n\nexport const Formiks = ({\n  value,\n  name,\n  onChange,\n  onBlur,\n  children,\n  variant = \"small\",\n}) => {\n  const height = variant === \"small\" ? \"40px\" : \"60px\";\n  const props = {\n    height: height,\n  };\n  const classes = useStyles(props);\n  return (\n    <FormControl fullWidth>\n      <Select\n        name={name}\n        displayEmpty\n        onBlur={onBlur}\n        value={value}\n        onChange={onChange}\n        className={classes.select}\n        IconComponent={() => (\n          <KeyboardArrowDownIcon\n            fontSize=\"large\"\n            sx={{ marginRight: \"1rem\" }}\n          />\n        )}\n      >\n        {children}\n      </Select>\n    </FormControl>\n  );\n};\n\nFormiks.propTypes = {\n  value: PropTypes.string,\n  label: PropTypes.string,\n  onChange: PropTypes.func,\n  children: PropTypes.node,\n  name: PropTypes.string,\n  onBlur: PropTypes.func,\n  variant: PropTypes.oneOf([\"small\", \"medium\"]),\n};\n\nexport const FromikSelect = ({\n  value,\n  name,\n  onChange,\n  onBlur,\n  children,\n  variant = \"medium\",\n}) => {\n  const height = variant === \"small\" ? \"40px\" : \"60px\";\n  const props = {\n    height: height,\n  };\n  const classes = useStyles(props);\n  return (\n    <FormControl fullWidth>\n      <Select\n        name={name}\n        displayEmpty\n        onBlur={onBlur}\n        value={value}\n        onChange={onChange}\n        className={classes.select}\n        IconComponent={() => (\n          <KeyboardArrowDownIcon\n            fontSize=\"large\"\n            sx={{ marginRight: \"1rem\" }}\n          />\n        )}\n      >\n        {children}\n      </Select>\n    </FormControl>\n  );\n};\n\nFromikSelect.propTypes = {\n  value: PropTypes.string,\n  label: PropTypes.string,\n  onChange: PropTypes.func,\n  children: PropTypes.node,\n  name: PropTypes.string,\n  onBlur: PropTypes.func,\n  variant: PropTypes.oneOf([\"small\", \"medium\"]),\n};\n\nconst Selects = (props) => {\n  const { name, label, options, placeholder } = props;\n  const classes = useStyles();\n  return (\n    <Grid container direction=\"column\" gap={1}>\n      <FormLabel className={classes.FormLabel}>{label}</FormLabel>\n      <Field name={name} as={FromikSelect} label={label}>\n        <MenuItem value=\"\">\n          <Typography>{placeholder}</Typography>\n        </MenuItem>\n        {options.map((option) => (\n          <MenuItem key={option.key} value={option.value}>\n            {option.key}\n          </MenuItem>\n        ))}\n      </Field>\n      <ErrorMessage name={name} component={TextError} />\n    </Grid>\n  );\n};\n\nSelects.propTypes = {\n  label: PropTypes.string,\n  name: PropTypes.string,\n  options: PropTypes.array,\n  placeholder: PropTypes.string,\n  onChange: PropTypes.func,\n};\n\nexport const CustomSelect = (props) => {\n  const {\n    value,\n    options,\n    name,\n    onChange,\n    onBlur,\n    placeholder,\n    label,\n    onClickClearBtn,\n    hasClearBtn,\n    disabled = false,\n    variant = \"small\",\n  } = props;\n\n  const height = variant === \"small\" ? \"48px\" : \"60px\";\n  const styleProps = {\n    height: height,\n  };\n  const classes = useStyles(styleProps);\n  return (\n    <Grid container direction=\"column\">\n      {label && <FormLabel className={classes.FormLabel}>{label}</FormLabel>}\n      <Grid item container direction=\"column\" sx={{ position: \"relative\" }}>\n        {hasClearBtn && value !== \"\" ? (\n          <Grid\n            sx={{\n              position: \"absolute\",\n              top: \"-10px\",\n              right: \"-10px\",\n              zIndex: \"5\",\n            }}\n          >\n            <CloseBtn onHandleClick={() => onClickClearBtn()} />\n          </Grid>\n        ) : (\n          \"\"\n        )}\n        <FormControl fullWidth>\n          <Select\n            name={name}\n            displayEmpty\n            onBlur={onBlur}\n            disabled={disabled}\n            value={value}\n            onChange={onChange}\n            className={classes.select}\n            IconComponent={() => (\n              <ChervonDownIcon\n                sx={{ color: \"transparent\", marginRight: \"0.8rem\" }}\n              />\n            )}\n          >\n            <MenuItem value=\"\">\n              <Typography>{placeholder}</Typography>\n            </MenuItem>\n            {options.map((option) => (\n              <MenuItem key={option.key} value={option.value}>\n                {option.key}\n              </MenuItem>\n            ))}\n          </Select>\n        </FormControl>\n      </Grid>\n    </Grid>\n  );\n};\nCustomSelect.propTypes = {\n  value: PropTypes.string,\n  options: PropTypes.string,\n  label: PropTypes.string,\n  name: PropTypes.func,\n  children: PropTypes.node,\n  placeholder: PropTypes.string,\n  onBlur: PropTypes.func,\n  onChange: PropTypes.func,\n  onClickClearBtn: PropTypes.func,\n  hasClearBtn: PropTypes.bool,\n  variant: PropTypes.oneOf([\"small\", \"medium\"]),\n};\n\nexport default Selects;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/IllnessModal.js",["1113"],"import React from \"react\";\nimport { Formik, Form } from \"formik\";\nimport PropTypes from \"prop-types\";\nimport { illnessSchema } from \"helpers/validationSchemas\";\nimport useAlert from \"hooks/useAlert\";\nimport { Grid } from \"@mui/material\";\nimport { getIllnesses } from \"components/graphQL/useQuery\";\nimport { CustomButton, Modals } from \"components/Utilities\";\nimport { useTheme } from \"@mui/material/styles\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport { createIllness, updateIllness } from \"components/graphQL/Mutation\";\nimport { useMutation } from \"@apollo/client\";\nconst IllnessModal = ({\n  open,\n  type,\n  handleClose,\n\n  initialValues,\n}) => {\n  const { displayAlert } = useAlert();\n  const theme = useTheme();\n  const [create] = useMutation(createIllness);\n  const [update] = useMutation(updateIllness);\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n\n  const onSubmit = async (values) => {\n    const { name, description, id } = values;\n\n    try {\n      if (type === \"add\") {\n        await create({\n          variables: {\n            name,\n            description,\n          },\n          refetchQueries: [{ query: getIllnesses }],\n        });\n        displayAlert(\"success\", \"Illness successfully created\");\n      }\n\n      if (type === \"edit\") {\n        await update({\n          variables: {\n            id,\n            name,\n            description,\n          },\n          refetchQueries: [{ query: getIllnesses }],\n        });\n        displayAlert(\"success\", \"Illness successfully updated\");\n      }\n    } catch (err) {\n      displayAlert(\"error\", err);\n    }\n    handleClose();\n  };\n\n  return (\n    <Modals\n      isOpen={open}\n      title={type === \"add\" ? \"Add Illness\" : \"Update Illness\"}\n      rowSpacing={5}\n      width={{ sm: \"40vw\", xs: \"90vw\", md: \"40vw\" }}\n      handleClose={handleClose}\n    >\n      <Formik\n        initialValues={initialValues}\n        onSubmit={onSubmit}\n        validateOnBlur={false}\n        validationSchema={illnessSchema}\n        validateOnChange={false}\n        validateOnMount={false}\n        enableReinitialize\n      >\n        {({ isSubmitting, isValid, dirty, errors }) => {\n          console.log(errors);\n          return (\n            <Form style={{ marginTop: \"3rem\" }}>\n              <Grid item container direction=\"column\" gap={3}>\n                <Grid item container>\n                  <FormikControl\n                    control=\"input\"\n                    name=\"name\"\n                    label=\"Name\"\n                    placeholder=\"Select name\"\n                  />\n                </Grid>\n                <Grid item container>\n                  <FormikControl\n                    control=\"textarea\"\n                    name=\"description\"\n                    label=\"Description\"\n                    placeholder=\"Description...\"\n                  />\n                </Grid>\n                <Grid item container>\n                  <CustomButton\n                    title={type === \"add\" ? \"Add Illness\" : \"Update Illness\"}\n                    width=\"100%\"\n                    type={buttonType}\n                    isSubmitting={isSubmitting}\n                    disabled={!(dirty || isValid)}\n                  />\n                </Grid>\n              </Grid>\n            </Form>\n          );\n        }}\n      </Formik>\n    </Modals>\n  );\n};\n\nIllnessModal.propTypes = {\n  initialValues: PropTypes.object,\n  validationSchema: PropTypes.object,\n  handleClose: PropTypes.func,\n  open: PropTypes.bool,\n  type: PropTypes.string,\n};\nexport default IllnessModal;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/Filters/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/ProfileInfo.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/styles/hospitalPageStyles.js",["1114"],"import { makeStyles } from \"@mui/styles\";\n\nexport const useStyles = makeStyles((theme) => ({\n  viewBtn: {\n    \"&.MuiButton-root\": {\n      backgroundColor: \"#F8F8F8\",\n      color: \"#3E5EA9\",\n      fontSize: \"11px\",\n      borderRadius: \"8px\",\n      textTransform: \"none\",\n      padding: \"8px 15px\",\n      margin: 0,\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.2rem\",\n      },\n\n      \"& .MuiButton-endIcon\": {\n        marginLeft: \".3rem\",\n        marginTop: \"-.2rem\",\n      },\n    },\n  },\n\n  tableCell: {\n    \"&.MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n      textAlign: \"left\",\n      padding: \"16px\",\n    },\n  },\n}));\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/Filter.js",["1115"],"import React from \"react\";\nimport { Grid } from \"@mui/material\";\nimport PropTypes from \"prop-types\";\nimport { Formik, Form } from \"formik\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport CustomButton from \"components/Utilities/CustomButton\";\nimport { useTheme } from \"@mui/material/styles\";\n\nconst Filter = (props) => {\n  const checkbox2 = [\n    { key: \"create\", value: \"create\" },\n    { key: \"update\", value: \"update\" },\n    { key: \"read\", value: \"read\" },\n    { key: \"delete\", value: \"delete\" },\n  ];\n  const checkbox5 = [\n    { key: \"create\", value: \"create\" },\n    { key: \"update\", value: \"update\" },\n    { key: \"read\", value: \"read\" },\n    { key: \"delete\", value: \"delete\" },\n  ];\n  const checkbox4 = [\n    { key: \"create\", value: \"create\" },\n    { key: \"update\", value: \"update\" },\n    { key: \"read\", value: \"read\" },\n    { key: \"delete\", value: \"delete\" },\n  ];\n  const { options, validationSchema, initialValues, type } = props;\n\n  const theme = useTheme();\n  const onSubmit = (values, onSubmitProps) => {\n    onSubmitProps.setSubmitting(false);\n    console.log(values);\n    onSubmitProps.resetForm();\n  };\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validateOnBlur={false}\n      validationSchema={validationSchema}\n      validateOnChange={false}\n      validateOnMount={false}\n    >\n      {({ isSubmitting, dirty, isValid }) => {\n        return (\n          <Form style={{ marginTop: \"3rem\" }}>\n            <Grid container direction=\"column\" gap={3} marginBottom={4}>\n              <Grid item container spacing={2}>\n                <Grid item xs={6}>\n                  <FormikControl\n                    control=\"select\"\n                    options={options}\n                    name={type === \"hcp\" ? \"Name\" : \"Enter Value\"}\n                    placeholder=\"Select Name\"\n                    label=\"Name\"\n                  />\n                </Grid>\n                <Grid item xs={6}>\n                  <FormikControl\n                    control=\"select\"\n                    options={checkbox2}\n                    name={type === \"hcp\" ? \"Date\" : \"Enter Value\"}\n                    placeholder=\"Choose Date\"\n                    label={type === \"hcp\" ? \"Choose Date\" : \"Enter Value\"}\n                  />\n                </Grid>\n              </Grid>\n\n              <Grid item container spacing={2}>\n                <Grid item xs={6}>\n                  <FormikControl\n                    control=\"select\"\n                    placeholder=\"Select Status\"\n                    name=\"Status\"\n                    label={type === \"hcp\" ? \"Select Status\" : \"Enter Value\"}\n                    options={checkbox4}\n                  />\n                </Grid>\n                <Grid item xs={6}>\n                  <FormikControl\n                    control=\"select\"\n                    placeholder=\"Select Category\"\n                    name={type === \"hcp\" ? \"Specialization\" : \"Enter Value\"}\n                    label={type === \"hcp\" ? \"Select Category\" : \"Enter Value\"}\n                    options={checkbox5}\n                  />\n                </Grid>\n              </Grid>\n              <Grid item xs={12} marginTop={24}>\n                <CustomButton\n                  title={type === \"hcp\" ? \"Save changes\" : \"Add Permission\"}\n                  width=\"100%\"\n                  type={buttonType}\n                  isSubmitting={isSubmitting}\n                  disabled={!(dirty || isValid)}\n                />\n              </Grid>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nFilter.propTypes = {\n  label: PropTypes.string,\n  type: PropTypes.string,\n  name: PropTypes.string,\n  options: PropTypes.array,\n  initialValues: PropTypes.object,\n  validationSchema: PropTypes.object,\n};\nexport default Filter;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/ReferPatient.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/reducers/hcpReducer.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/reducers/authReducer.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/reducers/tablesReducer.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/reducers/patientReducer.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/ProviderModal.js",["1116"],"import React, { useEffect, useState } from \"react\";\nimport { CustomButton } from \"components/Utilities\";\nimport { Formik, Form } from \"formik\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport * as Yup from \"yup\";\nimport { Grid } from \"@mui/material\";\nimport PropTypes from \"prop-types\";\nimport { addProvider, editprovider } from \"components/graphQL/Mutation\";\nimport {\n  getProviders,\n  getCategory,\n  getUserTypes,\n} from \"components/graphQL/useQuery\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { useTheme } from \"@mui/material/styles\";\n\nconst ProviderModal = ({\n  handleDialogClose,\n  type,\n  setSingleData,\n  initialValues,\n  editId,\n  singleData,\n}) => {\n  const theme = useTheme();\n  const [createProvider] = useMutation(addProvider);\n  const [editProvider] = useMutation(editprovider);\n\n  const single = useQuery(getCategory, {\n    variables: {\n      id: editId,\n    },\n  });\n  const [dropDown, setDropDown] = useState([]);\n  const userType = useQuery(getUserTypes);\n  useEffect(() => {\n    if (userType.data) {\n      const data = userType.data.getUserTypes.userType;\n      setDropDown(\n        data &&\n          data.map((i) => {\n            return { key: i.name, value: i._id, id: i._id };\n          })\n      );\n    }\n  }, [userType.data]);\n\n  useEffect(() => {\n    if (single.data) {\n      setSingleData({\n        name: single.data.getProvider.name,\n        type: single.data.getProvider.userTypeId,\n        image: single.data.getProvider.icon,\n        id: single.data.getProvider._id,\n        iconAlt: single.data.getProvider.iconAlt,\n      });\n    }\n  }, [single.data, setSingleData]);\n\n  const validationSchema = Yup.object({\n    name: Yup.string(\"Enter your Name\").trim().required(\"Name is required\"),\n    type: Yup.string(\"Select your type\").required(\"Type is required\"),\n    image: Yup.string(\"Upload a single Image\").required(\"Image is required\"),\n    iconAlt: Yup.string(\"Upload an alternate Image\").required(\n      \"Alt. image is required\"\n    ),\n  });\n\n  // const checkbox1 = [{ key: \"61ca1a53cebadf0584e38723\", value: \"61ca1a53cebadf0584e38723\" }];\n  const onSubmit = async (values, onSubmitProps) => {\n    console.log(values);\n    if (type === \"add\") {\n      const { name, type, image, iconAlt } = values;\n      await createProvider({\n        variables: {\n          name,\n          icon: image,\n          iconAlt,\n          userTypeId: type,\n        },\n        refetchQueries: [{ query: getProviders }],\n      });\n    }\n    if (type === \"edit\") {\n      const { name, type, image, id, iconAlt } = values;\n      await editProvider({\n        variables: {\n          id,\n          name,\n          icon: image,\n          iconAlt,\n          userTypeId: type,\n        },\n        refetchQueries: [{ query: getProviders }],\n      });\n    }\n    onSubmitProps.resetForm();\n    handleDialogClose();\n  };\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n\n  return (\n    <Formik\n      onSubmit={onSubmit}\n      validateOnBlur={false}\n      validationSchema={validationSchema}\n      validateOnChange={false}\n      validateOnMount={false}\n      initialValues={type === \"edit\" ? singleData : initialValues}\n      enableReinitialize\n    >\n      {({ isSubmitting, dirty, isValid, setFieldValue }) => {\n        return (\n          <Form style={{ marginTop: \"3rem\" }}>\n            <Grid item container direction=\"column\" gap={1}>\n              <Grid item container rowSpacing={3}>\n                <Grid item container>\n                  <FormikControl\n                    control=\"input\"\n                    name=\"name\"\n                    label=\"Name of Provider\"\n                    placeholder=\"Enter Provider Name\"\n                  />\n                </Grid>\n                <div style={{ display: \"none\" }} name=\"id\" />\n                <Grid item container>\n                  <FormikControl\n                    control=\"select\"\n                    options={dropDown}\n                    placeholder=\"Select user types\"\n                    name=\"type\"\n                    label=\"User Types\"\n                  />\n                </Grid>\n\n                <Grid item container>\n                  <Grid item container md>\n                    <FormikControl\n                      control=\"file\"\n                      name=\"image\"\n                      label=\"Upload Your Logo\"\n                      setFieldValue={setFieldValue}\n                    />\n                  </Grid>\n                </Grid>\n                <Grid item container>\n                  <Grid item container md>\n                    <FormikControl\n                      control=\"file\"\n                      name=\"iconAlt\"\n                      label=\"Upload Alternate Logo\"\n                      setFieldValue={setFieldValue}\n                    />\n                  </Grid>\n                </Grid>\n\n                <Grid item xs={12}>\n                  <CustomButton\n                    title={type === \"edit\" ? \"Save Provider\" : \"Add Provider\"}\n                    width=\"100%\"\n                    isSubmitting={isSubmitting}\n                    disabled={!(dirty || isValid)}\n                    type={buttonType}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\nexport default ProviderModal;\nProviderModal.propTypes = {\n  handleDialogClose: PropTypes.func,\n  setAlert: PropTypes.func,\n  editId: PropTypes.string,\n  type: PropTypes.string,\n  edit: PropTypes.bool,\n  initialValues: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  validationSchema: PropTypes.object,\n  singleData: PropTypes.object,\n  setSingleData: PropTypes.func,\n};\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/PermissionModal.js",["1117","1118","1119"],"import React, { useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Grid } from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { CustomButton } from \"components/Utilities\";\nimport { Formik, Form } from \"formik\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport {\n  CREATE_PERMISSION,\n  UPDATE_PERMISSION,\n} from \"components/graphQL/Mutation\";\nimport { useMutation } from \"@apollo/client\";\nimport { useQuery } from \"@apollo/client\";\nimport { getSinglePermissions } from \"components/graphQL/useQuery\";\n\nconst PermissionModal = ({\n  type,\n  initialValues,\n  validationSchema,\n  setAlert,\n  handleDialogClose,\n  editId,\n  setSinglePermission,\n  singlePermission,\n}) => {\n  const theme = useTheme();\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n  const [createPermission] = useMutation(CREATE_PERMISSION);\n  const [updatePermission] = useMutation(UPDATE_PERMISSION);\n\n  const { data } = useQuery(getSinglePermissions, {\n    variables: {\n      id: editId,\n    },\n  });\n\n  useEffect(() => {\n    if (data && data.getPermission) {\n      setSinglePermission({\n        description: data.getPermission.description,\n        name: data.getPermission.name,\n      });\n    }\n  }, [data, setSinglePermission]);\n\n  const onSubmit = async (values, onSubmitProps) => {\n    const { description, name } = values;\n    if (type === \"add\") {\n      try {\n        await createPermission({ variables: { description, name } });\n\n        setAlert({\n          message: \"Permission successfully created\",\n          type: \"success\",\n        });\n        setTimeout(() => {\n          setAlert(null);\n        }, 5000);\n      } catch (error) {\n        console.log(error);\n        setAlert({\n          message: \"Permission  not successfully created\",\n          type: \"danger\",\n        });\n        setTimeout(() => {\n          setAlert(null);\n        }, 5000);\n      }\n    } else if (type === \"edit\") {\n      try {\n        await updatePermission({\n          variables: { id: editId, description, name },\n        });\n        setAlert({\n          message: \"Permission successfully updated\",\n          type: \"success\",\n        });\n        setTimeout(() => {\n          setAlert(null);\n        }, 5000);\n      } catch (error) {\n        console.log(error);\n        setAlert({\n          message: \"Permission  not successfully updated\",\n          type: \"danger\",\n        });\n        setTimeout(() => {\n          setAlert(null);\n        }, 5000);\n      }\n    }\n\n    handleDialogClose();\n\n    onSubmitProps.resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={type === \"edit\" ? singlePermission : initialValues}\n      enableReinitialize\n      onSubmit={onSubmit}\n      validateOnBlur={false}\n      validationSchema={validationSchema}\n      validateOnChange={false}\n      validateOnMount={false}\n    >\n      {({ isSubmitting, dirty, isValid }) => {\n        return (\n          <Form style={{ marginTop: \"3rem\" }}>\n            <Grid item container direction=\"column\" gap={1}>\n              <Grid item container rowSpacing={3}>\n                <Grid item container>\n                  <FormikControl\n                    control=\"input\"\n                    name=\"name\"\n                    label=\"Name of Permission\"\n                    placeholder=\"Enter Permission Name\"\n                  />\n                </Grid>\n                <Grid item container>\n                  <FormikControl\n                    control=\"input\"\n                    name=\"description\"\n                    label=\"Description\"\n                    placeholder=\"Enter Description\"\n                  />\n                </Grid>\n\n                <Grid item xs={12} marginTop={10}>\n                  <CustomButton\n                    title={type === \"edit\" ? \"Save changes\" : \"Add Permission\"}\n                    width=\"100%\"\n                    type={buttonType}\n                    isSubmitting={isSubmitting}\n                    disabled={!(dirty || isValid)}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\nexport default PermissionModal;\nPermissionModal.propTypes = {\n  handleDialogClose: PropTypes.func,\n  setSinglePermission: PropTypes.func,\n  setAlert: PropTypes.func,\n  type: PropTypes.string,\n  editId: PropTypes.string,\n  options: PropTypes.array,\n  initialValues: PropTypes.object,\n  singlePermission: PropTypes.object,\n  validationSchema: PropTypes.object,\n};\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/DeleteOrDisable.js",["1120","1121"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Grid, Modal, Fade, Typography, Box, Backdrop } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport CloseIcon from \"@mui/icons-material/Close\";\nimport { CustomButton } from \"components/Utilities\";\nimport { BsExclamationCircle } from \"react-icons/bs\";\nimport LogoutRoundedIcon from \"@mui/icons-material/LogoutRounded\";\n\nconst useStyles = makeStyles((theme) => ({\n  closeIcon: {\n    \"&.MuiSvgIcon-root\": {\n      cursor: \"pointer\",\n\n      \"&:hover\": {\n        cursor: \"pointer\",\n        color: theme.palette.common.danger,\n      },\n    },\n  },\n}));\n\nconst style = {\n  position: \"absolute\",\n  top: \"50%\",\n  left: \"50%\",\n  transform: \"translate(-50%, -50%)\",\n  height: \"auto\",\n  bgcolor: \"background.paper\",\n  boxShadow: 24,\n  borderRadius: \"1rem\",\n};\n\nconst DeleteOrDisable = ({\n  open,\n  setOpen,\n  title,\n  confirmationMsg,\n  btnValue,\n  type,\n  onConfirm,\n  onCancel,\n  ...rest\n}) => {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const discardButton = {\n    background: theme.palette.info.main,\n    hover: theme.palette.common.gold,\n    active: theme.palette.info.dark,\n  };\n\n  const disableButton = {\n    background: theme.palette.primary.main,\n    hover: theme.palette.common.danger,\n    active: theme.palette.primary.dark,\n  };\n\n  return (\n    <Modal\n      aria-labelledby=\"transition-modal-title\"\n      aria-describedby=\"transition-modal-description\"\n      open={open}\n      onClose={() => setOpen(false)}\n      closeAfterTransition\n      BackdropComponent={Backdrop}\n      BackdropProps={{\n        timeout: 500,\n      }}\n    >\n      <Fade in={open}>\n        <Box\n          sx={style}\n          width={{ md: \"30vw\", sm: \"30vw\", xs: \"80vw\" }}\n          padding={{ sm: 2, xs: 2, md: 4 }}\n        >\n          <Grid\n            container\n            direction=\"column\"\n            alignItems=\"center\"\n            justifyContent=\"center\"\n          >\n            <Grid item alignSelf=\"flex-end\">\n              <CloseIcon\n                color=\"primary\"\n                fontSize=\"large\"\n                className={classes.closeIcon}\n                onClick={() => setOpen(false)}\n              />\n            </Grid>\n            <Grid item style={{ marginBottom: \"3rem\" }}>\n              {type === \"logout\" ? (\n                <LogoutRoundedIcon\n                  sx={{ fontSize: \"10rem\", color: \"red\" }}\n                  color={theme.palette.warning.main}\n                />\n              ) : (\n                <BsExclamationCircle\n                  size=\"10rem\"\n                  color={theme.palette.warning.main}\n                />\n              )}\n            </Grid>\n            <Grid item style={{ marginBottom: \"2rem\" }}>\n              <Typography variant=\"h2\">{title}</Typography>\n            </Grid>\n            <Grid item style={{ marginBottom: \"2rem\" }}>\n              <Typography\n                textAlign=\"center\"\n                variant=\"body1\"\n              >{`Are you sure you want to ${confirmationMsg}?`}</Typography>\n            </Grid>\n            <Grid\n              item\n              container\n              justifyContent=\"space-between\"\n              rowGap={3}\n              spacing={4}\n              sx={{ justifyContent: \"space-between\" }}\n            >\n              <Grid item columms={{ lg: 6, md: 4, sm: 4, xs: 3 }} flex={1}>\n                <CustomButton\n                  title=\"Cancel\"\n                  textColor={theme.palette.common.black}\n                  type={discardButton}\n                  width=\"100%\"\n                  onClick={() => setOpen(false)}\n                />\n              </Grid>\n              <Grid item columms={{ md: 4, sm: 4, xs: 3 }} flex={1}>\n                <CustomButton\n                  title={`Yes, ${btnValue}`}\n                  type={disableButton}\n                  width=\"100%\"\n                  onClick={() => {\n                    setOpen(false);\n                    onConfirm();\n                  }}\n                />\n              </Grid>\n            </Grid>\n          </Grid>\n        </Box>\n      </Fade>\n    </Modal>\n  );\n};\n\nDeleteOrDisable.propTypes = {\n  open: PropTypes.bool,\n  setOpen: PropTypes.func,\n  title: PropTypes.string,\n  confirmationMsg: PropTypes.string,\n  btnValue: PropTypes.string,\n  type: PropTypes.string,\n  onConfirm: PropTypes.func,\n  onCancel: PropTypes.func,\n};\n\nexport default DeleteOrDisable;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/RoleModal.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Buttons/EditDelBtn.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/EnrolleeProfileModal.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Rows/SingleHMORow.js",["1122","1123","1124","1125","1126"],"import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@mui/styles\";\nimport { formatDate } from \"helpers/func\";\nimport { Loader } from \"components/Utilities\";\nimport { useTheme } from \"@mui/material/styles\";\nimport EditIcon from \"components/Icons/EditIcon\";\nimport { useStyles } from \"styles/hmoPageStyles\";\nimport DeleteIcon from \"components/Icons/deleteIcon\";\nimport StatusPill from \"components/Utilities/StatusPill\";\nimport MoreHorizIcon from \"@mui/icons-material/MoreHoriz\";\nimport {\n  ClickAwayListener,\n  Grid,\n  Paper,\n  TableCell,\n  TableRow,\n} from \"@mui/material\";\n\nconst useEditStyles = makeStyles((theme) => ({\n  btn: {\n    backgroundColor: \"transparent\",\n    border: \"none\",\n    cursor: \"pointer\",\n  },\n\n  options: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    backgroundColor: \"#ffffff\",\n    borderRadius: \"8px\",\n    position: \"absolute\",\n    top: 28,\n    right: 0,\n    zIndex: 20,\n\n    \"&>button\": {\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"1rem 2rem\",\n      fontSize: \"14px\",\n      fontWeight: 400,\n      color: \"#2D2F39\",\n      borderBottom: \"1px solid #E5E5E5\",\n      textAlign: \"left\",\n      whiteSpace: \"nowrap\",\n\n      \"&:hover\": {\n        color: \"#ffffff\",\n      },\n    },\n\n    \"&>:last-child\": {\n      borderBottom: \"none\",\n    },\n  },\n\n  editBtn: {\n    \"&:hover\": {\n      backgroundColor: theme.palette.common.blue,\n    },\n  },\n\n  delBtn: {\n    borderRadius: \"0px 0px 8px 8px\",\n    \"&:hover\": {\n      backgroundColor: theme.palette.common.danger,\n    },\n  },\n}));\n\nconst SingleHMORow = ({\n  index,\n  rowData,\n  setEditData,\n  isDeleting,\n  setEnrolleeIdToDelete,\n  openEditModal,\n  openConfirmModal,\n  openProfileDetailsModal,\n}) => {\n  const theme = useTheme();\n  const classes = useStyles();\n  const editClasses = useEditStyles();\n  const [open, setOpen] = useState(false);\n\n  const handleClickAway = () => {\n    setOpen(false);\n  };\n\n  const {\n    _id,\n    hmoId,\n    firstName,\n    lastName,\n    noc,\n    plan,\n    expiryDate,\n    status,\n    planId,\n    email,\n    phone,\n    photo,\n  } = rowData;\n  const editEnrolleeData = {\n    id: _id,\n    hmoId: hmoId || \"\",\n    firstName: firstName || \"\",\n    lastName: lastName || \"\",\n    noc: noc || \"\",\n    plan: plan || \"\",\n    planId: planId || \"\",\n    expiryDate: expiryDate || \"\",\n    email: email || \"\",\n    phone: phone || \"\",\n    photo: photo || \"\",\n  };\n  const labelId = `enhanced-table-checkbox-${index}`;\n  return (\n    <TableRow\n      hover\n      role=\"checkbox\"\n      sx={{ position: \"relative\", cursor: \"pointer\" }}\n      tabIndex={-1}\n      key={hmoId}\n      onClick={() => {\n        openProfileDetailsModal();\n      }}\n    >\n      <TableCell\n        id={labelId}\n        scope=\"row\"\n        align=\"left\"\n        className={classes.tableCell}\n        style={{\n          color: theme.palette.common.grey,\n          textAlign: \"left\",\n        }}\n      >\n        {hmoId}\n      </TableCell>\n      <TableCell align=\"left\" className={classes.tableCell}>\n        {`${firstName && firstName} ${lastName && lastName}`}\n      </TableCell>\n      <TableCell align=\"left\" className={classes.tableCell}>\n        {noc ? noc : 0}\n      </TableCell>\n      <TableCell align=\"left\" className={classes.tableCell}>\n        {plan ? plan : \"No Plan\"}\n      </TableCell>\n      <TableCell align=\"left\" className={classes.tableCell}>\n        {expiryDate ? formatDate(expiryDate, \"P\") : \"Nil\"}\n      </TableCell>\n      <TableCell align=\"left\" className={classes.tableCell}>\n        <StatusPill\n          type={status === true ? \"success\" : \"normal\"}\n          label={status === true ? \"VERIFIED\" : \"INACTIVE\"}\n        />\n      </TableCell>\n      <TableCell\n        align=\"left\"\n        sx={{ position: \"relative\" }}\n        className={classes.tableCell}\n      >\n        <Grid container>\n          <ClickAwayListener\n            onClickAway={() => {\n              handleClickAway();\n            }}\n          >\n            {isDeleting ? (\n              <Loader />\n            ) : (\n              <button\n                onClick={(e) => {\n                  e.stopPropagation();\n                  setOpen(!open);\n                }}\n                style={{\n                  display: \"flex\",\n                  justifyContent: \"center\",\n                  alignItems: \"center\",\n                  cursor: \"pointer\",\n                  backgroundColor: \"transparent\",\n                  border: \"none\",\n                }}\n              >\n                <MoreHorizIcon fontSize=\"large\" />\n              </button>\n            )}\n          </ClickAwayListener>\n        </Grid>\n      </TableCell>\n      {open ? (\n        <Paper className={editClasses.options} elavation={4}>\n          <button\n            className={`${editClasses.btn} ${editClasses.editBtn}`}\n            style={{ borderRadius: \"8px 8px 0px 0px\" }}\n            onClick={(e) => {\n              e.stopPropagation();\n              openProfileDetailsModal();\n            }}\n          >\n            View profile\n          </button>\n          <button\n            className={`${editClasses.btn} ${editClasses.editBtn}`}\n            onClick={(e) => {\n              e.stopPropagation();\n              setEditData(editEnrolleeData);\n              openEditModal();\n            }}\n          >\n            Edit <EditIcon sx={{ marginLeft: \"0.7rem\" }} />\n          </button>\n          <button\n            className={`${editClasses.btn} ${editClasses.delBtn}`}\n            onClick={(e) => {\n              e.stopPropagation();\n              setEnrolleeIdToDelete();\n              openConfirmModal();\n            }}\n          >\n            Delete <DeleteIcon sx={{ marginLeft: \"0.7rem\" }} />\n          </button>\n        </Paper>\n      ) : null}\n    </TableRow>\n  );\n};\n\nSingleHMORow.propTypes = {\n  index: PropTypes.number.isRequired,\n  rowData: PropTypes.object.isRequired,\n  openProfileDetailsModal: PropTypes.func.isRequired,\n};\n\nexport default SingleHMORow;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/Filters/SingleHMOFilters.js",["1127","1128","1129","1130","1131","1132","1133","1134","1135","1136","1137"],"import React, { useEffect, useState } from \"react\";\nimport { Grid } from \"@mui/material\";\n\nimport Filter from \".\";\nimport useAlert from \"hooks/useAlert\";\nimport { deleteVar, filterData } from \"helpers/filterHelperFunctions\";\nimport { useParams } from \"react-router-dom\";\nimport { getPlans } from \"components/graphQL/useQuery\";\nimport { useLazyQuery } from \"@apollo/client\";\n\nconst SingleHMOFilters = ({ setHmoEnrollees, setPageInfo, queryParams }) => {\n  const { hmoId } = useParams();\n  const [fetchPlans] = useLazyQuery(getPlans);\n  const { displayAlert, getErrorMsg } = useAlert();\n  const [planOptions, setPlanOptions] = useState([]);\n  const { variables, fetchEnrollees, refetch } = queryParams;\n  const [hmoEnrolleeFilterValue, setHmoEnrolleeFilterValue] = useState({\n    planId: \"\",\n  });\n\n  useEffect(() => {\n    fetchPlans({\n      variables: { type: \"hmo\" },\n    })\n      .then(({ data }) => {\n        const options = (data?.getPlans?.plan || []).map((option) => {\n          return { key: option?.name, value: option?._id };\n        });\n        setPlanOptions(options);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [fetchPlans]);\n\n  const onFilterChange = async (name, value) => {\n    try {\n      deleteVar(variables);\n      const filterValues = {\n        ...hmoEnrolleeFilterValue,\n        [name]: value,\n        providerId: hmoId,\n      };\n      console.log(filterValues);\n      setHmoEnrolleeFilterValue(filterValues);\n      filterData(filterValues, {\n        fetchData: fetchEnrollees,\n        refetch,\n        variables,\n      })\n        .then((data) => {\n          setHmoEnrollees(data?.getEnrollees?.data || []);\n          setPageInfo(data?.getEnrollees?.pageInfo || {});\n        })\n        .catch((error) => {\n          console.error(error);\n          const errMsg = getErrorMsg(error);\n          displayAlert(\"error\", errMsg);\n          refresh(setHmoEnrolleeFilterValue, { plan: \"\" });\n        });\n    } catch (error) {\n      console.error(error);\n      const errMsg = getErrorMsg(error);\n      displayAlert(\"error\", errMsg);\n      refresh(setHmoEnrolleeFilterValue, { plan: \"\" });\n    }\n  };\n\n  const refresh = async (setFilterValue, defaultVal) => {\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\n    setFilterValue(defaultVal);\n    deleteVar(variables);\n\n    refetch({ variables: { providerId: hmoId } })\n      .then(({ data }) => {\n        setHmoEnrollees(data?.getEnrollees?.data || []);\n        setPageInfo(data?.getEnrollees?.pageInfo || {});\n      })\n      .catch((error) => {\n        console.error(error);\n        displayAlert(\"error\", \"Failed to get HMO enrollees data, Try again\");\n      });\n  };\n\n  return (\n    <Grid item container flexWrap=\"wrap\" spacing={2} alignItems=\"flex-end\">\n      {/* FILTER BY PLAN */}\n      <Grid item>\n        <Filter\n          onHandleChange={(e) => onFilterChange(\"planId\", e?.target?.value)}\n          onClickClearBtn={() => onFilterChange(\"planId\", \"\")}\n          options={[{ key: \"Access Type\", value: \"\" }, ...planOptions]}\n          name=\"planId\"\n          value={hmoEnrolleeFilterValue.planId}\n          hasClearBtn={true}\n          disable={true}\n          variant=\"small\"\n        />\n      </Grid>\n      {/* <Grid item>\n        <Filter\n          onHandleChange={(e) => null}\n          onClickClearBtn={() => null}\n          options={[{ key: \"Gender\", value: \"\" }, ...genderType]}\n          name=\"gender\"\n          placeholder=\"Gender\"\n          value={profileFilterValues.gender}\n          hasClearBtn={true}\n          disable={true}\n          variant=\"small\"\n        />\n      </Grid> */}\n    </Grid>\n  );\n};\n\nexport default SingleHMOFilters;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/DateTimePicker.js",["1138"],"import React from \"react\";\nimport { Field, ErrorMessage } from \"formik\";\nimport { TextError } from \"components/Utilities/TextError\";\nimport TextField from \"@mui/material/TextField\";\nimport FormLabel from \"@mui/material/FormLabel\";\nimport PropTypes from \"prop-types\";\nimport { Grid } from \"@mui/material\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport { makeStyles } from \"@mui/styles\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport DesktopDateTimePicker from \"@mui/lab/DesktopDateTimePicker\";\nconst useStyles = makeStyles((theme) => ({\n  FormLabel: {\n    \"&.MuiFormLabel-root\": {\n      ...theme.typography.FormLabel,\n    },\n  },\n}));\n\nconst Dates = ({ name, value, setFieldValue, onBlur }) => {\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <DesktopDateTimePicker\n        name={name}\n        onChange={(value) => setFieldValue(name, value)}\n        value={value}\n        onBlur={onBlur}\n        onError={(err) => console.log(err)}\n        renderInput={(params) => (\n          <TextField {...params} sx={{ padding: \"-12px\" }} />\n        )}\n      />\n    </LocalizationProvider>\n  );\n};\n\nDates.propTypes = {\n  value: PropTypes.string,\n  label: PropTypes.string,\n  onChange: PropTypes.func,\n  setFieldValue: PropTypes.func,\n  children: PropTypes.node,\n  name: PropTypes.string,\n  onBlur: PropTypes.func,\n};\n\nconst DateTimePicker = (props) => {\n  const { name, label, ...rest } = props;\n  const classes = useStyles();\n  return (\n    <Grid container direction=\"column\" gap={1}>\n      <FormLabel className={classes.FormLabel}>{label}</FormLabel>\n      <Field name={name} as={Dates} label={label} {...rest} />\n      <ErrorMessage name={name} component={TextError} />\n    </Grid>\n  );\n};\n\nDateTimePicker.propTypes = {\n  label: PropTypes.string,\n  name: PropTypes.string,\n  options: PropTypes.array,\n  placeholder: PropTypes.string,\n};\n\nexport default DateTimePicker;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/File.js",["1139"],"import React, { useEffect, useRef, useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useSnackbar } from \"notistack\";\nimport { makeStyles } from \"@mui/styles\";\nimport { Field, ErrorMessage } from \"formik\";\nimport { TextError } from \"components/Utilities/TextError\";\nimport {\n  FormControl,\n  FormLabel,\n  Grid,\n  Avatar,\n  Button,\n  Typography,\n} from \"@mui/material\";\n\nimport { Loader } from \"components/Utilities\";\nimport { RequiredIcon } from \"components/Typography\";\nimport {\n  compressAndUploadImage,\n  showErrorMsg,\n  showSuccessMsg,\n  uploadImage,\n} from \"helpers/filterHelperFunctions\";\n\nconst useStyles = makeStyles((theme) => ({\n  FormLabel: {\n    \"&.MuiFormLabel-root\": {\n      ...theme.typography.FormLabel,\n    },\n  },\n\n  uploadBtn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      background: \"#f2f2f2\",\n      boxShadow: \"none\",\n      borderRadius: \"5px\",\n      fontSize: \"1.4rem\",\n      color: theme.palette.common.black,\n\n      \"&:hover\": {\n        background: \"#f2f3f3\",\n        boxShadow: \"none\",\n      },\n\n      \"&:active\": {\n        boxShadow: \"none\",\n      },\n    },\n  },\n}));\n\nexport const Formiks = ({ name, setFieldValue, onBlur, value }) => {\n  const fileRef = useRef(null);\n  const classes = useStyles();\n  const { enqueueSnackbar } = useSnackbar();\n  const [preview, setPreview] = useState(\"\");\n  const [isCompleted, setIsCompleted] = React.useState(null);\n  const [progress, setProgress] = useState();\n  const [isCompressing, setIsCompressing] = React.useState(false);\n\n  useEffect(() => {\n    if (value) {\n      setPreview(value);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    isCompleted === \"passed\" &&\n      showSuccessMsg(enqueueSnackbar, Typography, \"Image upload complete.\");\n    if (isCompleted === \"failed\") {\n      showErrorMsg(enqueueSnackbar, \"Image upload failed, Try again.\");\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [isCompleted]);\n\n  const onChange = async (e) => {\n    const file = e.target.files[0];\n    setProgress(1);\n    compressAndUploadImage(\n      file,\n      uploadImage,\n      setPreview,\n      name,\n      setFieldValue,\n      setProgress,\n      setIsCompressing,\n      setIsCompleted\n    );\n\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onloadend = (e) => setPreview(reader.result);\n  };\n\n  return (\n    <Grid container spacing={2} alignItems=\"center\">\n      {progress < 100 || isCompressing ? (\n        <Grid\n          container\n          item\n          direction=\"row\"\n          justifyContent=\"center\"\n          alignItems=\"center\"\n        >\n          <Typography display={\"inline\"}>\n            {isCompressing ? \"Compressing image\" : \"Uploading image\"}\n          </Typography>\n          <Loader />\n        </Grid>\n      ) : (\n        <>\n          <Grid item>\n            <FormControl fullWidth>\n              <Grid item container>\n                <input\n                  accept=\"image/*\"\n                  onChange={onChange}\n                  type=\"file\"\n                  name={name}\n                  onBlur={onBlur}\n                  hidden\n                  ref={fileRef}\n                />\n                <Button\n                  variant=\"contained\"\n                  onClick={() => fileRef.current.click()}\n                  component=\"span\"\n                  className={classes.uploadBtn}\n                >\n                  Upload Photo\n                </Button>\n              </Grid>\n            </FormControl>\n          </Grid>\n          <Grid item>\n            {preview && isCompleted !== \"failed\" ? (\n              <Avatar sx={{ backgroundColor: \"#eaeaea\" }} src={preview} />\n            ) : (\n              \"\"\n            )}\n          </Grid>\n        </>\n      )}\n    </Grid>\n  );\n};\n\nFormiks.propTypes = {\n  value: PropTypes.string,\n  label: PropTypes.string,\n  onChange: PropTypes.func,\n  children: PropTypes.node.isRequired,\n  name: PropTypes.string.isRequired,\n  onBlur: PropTypes.func,\n  setFieldValue: PropTypes.func,\n};\n\nconst Files = (props) => {\n  const { name, label, isRequired, ...rest } = props;\n  const classes = useStyles();\n  return (\n    <Grid container direction=\"column\" gap={1}>\n      <FormLabel className={classes.FormLabel}>\n        {label} {isRequired && <RequiredIcon />}\n      </FormLabel>\n      <Field name={name} as={Formiks} label={label} {...rest} />\n      <ErrorMessage name={name} component={TextError} />\n    </Grid>\n  );\n};\n\nFiles.propTypes = {\n  label: PropTypes.string,\n  name: PropTypes.string.isRequired,\n  options: PropTypes.array.isRequired,\n  placeholder: PropTypes.string,\n  isRequired: PropTypes.bool,\n};\n\nexport default Files;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Date.js",["1140","1141","1142"],"import React from \"react\";\nimport { Field, ErrorMessage } from \"formik\";\nimport { TextError } from \"components/Utilities/TextError\";\nimport TextField from \"@mui/material/TextField\";\nimport FormLabel from \"@mui/material/FormLabel\";\nimport PropTypes from \"prop-types\";\nimport { Grid } from \"@mui/material\";\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\nimport { makeStyles } from \"@mui/styles\";\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\nimport DesktopDatePicker from \"@mui/lab/DesktopDatePicker\";\n\nconst useStyles = makeStyles((theme) => ({\n  FormLabel: {\n    \"&.MuiFormLabel-root\": {\n      ...theme.typography.FormLabel,\n    },\n  },\n\n  dateInput: {\n    \"&>.MuiOutlinedInput-root\": {\n      border: \"none\",\n    },\n  },\n}));\n\nconst Dates = ({ name, value, setFieldValue, onBlur, startDate, endDate }) => {\n  const classes = useStyles();\n  return (\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\n      <DesktopDatePicker\n        className={classes.dateInput}\n        name={name}\n        onChange={(value) => setFieldValue(name, value)}\n        value={value}\n        onBlur={onBlur}\n        minDate={startDate}\n        maxDate={endDate}\n        onError={(err) => console.log(err)}\n        renderInput={(params) => (\n          <TextField\n            {...params}\n            sx={{\n              padding: \"-12px\",\n              border: \"2px solid #E0E0E0\",\n              borderRadius: \"12px\",\n            }}\n          />\n        )}\n      />\n    </LocalizationProvider>\n  );\n};\n\nDates.propTypes = {\n  value: PropTypes.string,\n  label: PropTypes.string,\n  onChange: PropTypes.func,\n  setFieldValue: PropTypes.func,\n  children: PropTypes.node,\n  name: PropTypes.string,\n  onBlur: PropTypes.func,\n};\n\nconst DateComponent = (props) => {\n  const { name, label, ...rest } = props;\n  const classes = useStyles();\n  return (\n    <Grid container direction=\"column\" gap={1}>\n      <FormLabel className={classes.FormLabel}>{label}</FormLabel>\n      <Field name={name} as={Dates} label={label} {...rest} />\n      <ErrorMessage name={name} component={TextError} />\n    </Grid>\n  );\n};\n\nDateComponent.propTypes = {\n  label: PropTypes.string,\n  name: PropTypes.string,\n  options: PropTypes.array,\n  placeholder: PropTypes.string,\n};\n\nexport default DateComponent;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Textarea.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/TextError.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Buttons/CloseBtn.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/CustomButton.js",["1143"],"import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@mui/styles\";\nimport { Link } from \"react-router-dom\";\nimport Loader from \"components/Utilities/Loader\";\nimport SearchOutlinedIcon from \"@mui/icons-material/SearchOutlined\";\n\nconst CustomButton = ({\n  title,\n  endIcon,\n  width,\n  height,\n  textColorOnHover,\n  borderRadius,\n  textColor,\n  path,\n  role,\n  fontSize,\n  startIcon,\n  type: { background, hover, active, disabled },\n  isSubmitting,\n  ...rest\n}) => {\n  const useStyles = makeStyles((theme) => ({\n    button: {\n      \"&.MuiButton-root\": {\n        ...theme.typography.btn,\n        backgroundColor: background,\n        color: textColor,\n        width: width,\n        borderRadius: borderRadius ? borderRadius : 10,\n        height: height ? height : \"5rem\",\n        display: \"flex\",\n        justifyContent: \"center\",\n        alignItems: \"center\",\n        fontSize: \"clamp(1.2rem,2vw, 1.3rem)\",\n        boxShadow: \"none\",\n\n        \"&:hover\": {\n          backgroundColor: hover,\n          color: textColorOnHover,\n\n          \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n            color: textColorOnHover,\n          },\n        },\n\n        \"&:active\": {\n          backgroundColor: active,\n          boxShadow: \"none\",\n          color: textColor,\n        },\n\n        \"&:disabled\": {\n          backgroundColor: disabled,\n          color: textColor,\n          boxShadow: \"none\",\n          cursor: \"no-drop\",\n        },\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n          fontSize: \"2rem\",\n        },\n\n        \"& .MuiButton-endIcon\": {\n          marginLeft: \".5rem\",\n          marginTop: \"-.2rem\",\n        },\n      },\n    },\n  }));\n\n  const classes = useStyles();\n\n  return (\n    <Button\n      startIcon={startIcon}\n      variant=\"contained\"\n      LinkComponent={Link}\n      to={path ? path : \"\"}\n      type={role ? \"button\" : \"submit\"}\n      endIcon={endIcon}\n      className={classes.button}\n      {...rest}\n    >\n      {!isSubmitting && title}{\" \"}\n      {isSubmitting && <Loader size={35} color=\"info\" />}\n    </Button>\n  );\n};\n\nCustomButton.defaultProps = {\n  width: \"auto\",\n  textColor: \"#fff\",\n};\n\nCustomButton.propTypes = {\n  endIcon: PropTypes.node,\n  startIcon: PropTypes.node,\n  title: PropTypes.string,\n  type: PropTypes.object,\n  textColor: PropTypes.string,\n  width: PropTypes.string,\n  height: PropTypes.string,\n  borderRadius: PropTypes.string,\n  fontSize: PropTypes.string,\n  textColorOnHover: PropTypes.string,\n  path: PropTypes.string,\n  isSubmitting: PropTypes.bool,\n  role: PropTypes.bool,\n};\n\nexport const SearchBtn = ({ isSubmitting, handleClick }) => {\n  const useStyles = makeStyles((theme) => ({\n    button: {\n      display: \"flex\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      color: \"#ffffff\",\n      border: \"none\",\n      backgroundColor: theme.palette.common.dark,\n      borderRadius: \"100%\",\n      padding: \"0.75rem\",\n      cursor: \"pointer\",\n\n      \"&:hover\": {\n        backgroundColor: theme.palette.common.gray,\n      },\n\n      \"&:disabled\": {\n        backgroundColor: theme.palette.common.disable,\n        boxShadow: \"none\",\n        cursor: \"no-drop\",\n      },\n    },\n  }));\n\n  const classes = useStyles();\n\n  return (\n    <button\n      type={\"submit\"}\n      className={classes.button}\n      onClick={() => handleClick()}\n    >\n      {!isSubmitting && <SearchOutlinedIcon fontSize=\"large\" />}{\" \"}\n      {isSubmitting && <Loader size={35} color=\"info\" />}\n    </button>\n  );\n};\n\nSearchBtn.propTypes = {\n  isSubmitting: PropTypes.bool,\n  handleClick: PropTypes.func.isRequired,\n};\n\nexport default CustomButton;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/ChervonDownIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/StatusPill.js",["1144"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Chip } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"12px !important\",\n      height: \"2.7rem\",\n      borderRadius: \"1.3rem\",\n      fontWeight: 500,\n    },\n  },\n}));\n\nconst StatusPill = ({ type, label }) => {\n  const classes = useStyles();\n  const bgColor =\n    type === \"success\"\n      ? \"rgba(62, 165, 132, 0.1)\"\n      : type === \"normal\"\n      ? \"rgba(240, 240, 240, 1)\"\n      : type === \"error\"\n      ? \"rgba(242, 24, 24, 0.1)\"\n      : \"\";\n\n  const textColor =\n    type === \"success\"\n      ? \"#3EA584\"\n      : type === \"normal\"\n      ? \"#757886\"\n      : type === \"error\"\n      ? \"#f21818\"\n      : \"\";\n\n  return (\n    <Chip\n      label={label}\n      className={classes.badge}\n      sx={{\n        backgroundColor: bgColor,\n        color: textColor,\n      }}\n    />\n  );\n};\n\nStatusPill.propTypes = {\n  type: PropTypes.oneOf([\"success\", \"normal\", \"error\"]).isRequired,\n  label: PropTypes.string.isRequired,\n};\n\nexport default StatusPill;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/deleteIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/EditIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/MessageAddIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/VerifiedIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/Calender2.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/CallIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/SmsIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Typography.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Loader.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/WaitingList.js",["1145"],"import React from \"react\";\nimport { Grid, Typography } from \"@mui/material\";\nimport WaitingListTable from \"components/layouts/WaitingListTable\";\nimport PreviousButton from \"components/Utilities/PreviousButton\";\n\nconst WaitingList = (props) => {\n  return (\n    <Grid container direction=\"column\">\n      <Grid item style={{ marginBottom: \"3rem\" }}>\n        <PreviousButton path=\"/appointments\" />\n      </Grid>\n      <Grid item>\n        <Typography variant=\"h2\">Waiting List</Typography>\n      </Grid>\n      <Grid item style={{ marginTop: \"5rem\" }}>\n        <WaitingListTable\n          path=\"/appointments/waiting-list\" /* onClick={() => setWaitingListMenu(1)} */\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default WaitingList;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/WhiteLabel.js",["1146"],"import React from \"react\";\nimport { Grid } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { ReactComponent as Administrator } from \"assets/images/administrator.svg\";\nimport { ReactComponent as ConsulationIcon } from \"assets/images/consultation.svg\";\nimport { Card } from \"components/Utilities\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  parentGrid: {\n    textDecoration: \"none\",\n    color: theme.palette.primary.main,\n\n    \"& > .MuiGrid-root.MuiGrid-container\": {\n      backgroundColor: \"#ffffff\",\n    },\n  },\n}));\n\nconst WhiteLabel = () => {\n  const theme = useTheme();\n  const classes = useStyles();\n\n  return (\n    <>\n      <Grid\n        container\n        alignItems=\"space-between\"\n        gap=\"5rem\"\n        paddingY=\"2rem\"\n        justifyContent={{ sm: \"center\", md: \"center\" }}\n      >\n        <Grid item container md={5} sm={5} xs={12}>\n          <Grid item container flexDirection=\"column\">\n            <Link to=\"/label/provider\" style={{ textDecoration: \"none\" }}>\n              <Card\n                alt=\"providers \"\n                title=\"Providers\"\n                background={theme.palette.common.lightGreen}\n              >\n                <Administrator fill={theme.palette.common.green} />\n              </Card>\n            </Link>\n          </Grid>\n        </Grid>\n        <Grid item container md={5} sm={5} xs={12}>\n          <Grid item container flexDirection=\"column\">\n            <Link to=\"/label/types\" style={{ textDecoration: \"none\" }}>\n              <Card\n                alt=\"User Types\"\n                title=\"User Types\"\n                background={theme.palette.common.lightRed}\n              >\n                <ConsulationIcon fill={theme.palette.common.red} />\n              </Card>\n            </Link>\n          </Grid>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default WhiteLabel;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/PartnersProvider.js",["1147","1148","1149","1150","1151","1152","1153","1154","1155","1156","1157"],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/DoctorProvider.js",["1158","1159","1160"],"import React, { useState, useEffect } from \"react\";\nimport { Formik, Form } from \"formik\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { NetworkStatus } from \"@apollo/client\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport {\n  Grid,\n  TableRow,\n  TableCell,\n  Button,\n  Checkbox,\n  Chip,\n  Avatar,\n} from \"@mui/material\";\nimport useAlert from \"hooks/useAlert\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { isSelected } from \"helpers/isSelected\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { timeConverter } from \"components/Utilities/Time\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { useStyles } from \"../../styles/doctorsPageStyles\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport {\n  getDoctorsProfile,\n  getDoctorsProfileByStatus,\n} from \"components/graphQL/useQuery\";\nimport { hcpsHeadCells } from \"components/Utilities/tableHeaders\";\nimport { createDOctorProfile } from \"components/graphQL/Mutation\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\nimport { addDoctorValidationSchema } from \"helpers/validationSchemas\";\nimport { Loader, Modals, CustomButton } from \"components/Utilities\";\nimport {\n  changeTableLimit,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport {\n  addDocInitialValues,\n  /* cadreFilterBy, */\n  defaultPageInfo,\n  docCadreOptions,\n  docSpecializationsOptions,\n  doctorsSearchOptions,\n  genderType,\n  /*  providerFilterBy,\n  specializationFilterBy,\n  statusFilterBy, */\n} from \"helpers/mockData\";\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\nimport DoctorFilters from \"components/Forms/Filters/DoctorsFilters\";\nimport TableLayout from \"components/layouts/TableLayout\";\n\nconst DoctorProvider = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { displayAlert } = useAlert();\n  const { id } = useParams();\n  const [profiles, setProfiles] = useState(\"\");\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\n  const [openAddHcp, setOpenAddHcp] = useState(false);\n  const [createDoc] = useMutation(createDOctorProfile);\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n  const [fetchDoctors, { error, loading, refetch, variables, networkStatus }] =\n    useLazyQuery(getDoctorsProfile);\n  const [\n    fetchDoctorsByStatus,\n    {\n      loading: byStatusLoading,\n      refetch: byStatusRefetch,\n      variables: byStatusVariables,\n    },\n  ] = useLazyQuery(getDoctorsProfileByStatus);\n\n  useEffect(() => {\n    fetchDoctors({\n      variables: {\n        first: pageInfo.limit,\n        providerId: id,\n      },\n    })\n      .then(({ data }) => {\n        if (data) {\n          setPageInfo(data.doctorProfiles.pageInfo || []);\n          setProfiles(data.doctorProfiles.profile || defaultPageInfo);\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onSubmit = async (values) => {\n    const {\n      createdAt,\n      updatedAt,\n      firstName,\n      lastName,\n      gender,\n      phone,\n      email,\n      hospital,\n      dociId,\n      specialization,\n      dob,\n      cadre,\n      image,\n    } = values;\n    const correctDOB = timeConverter(dob);\n    await createDoc({\n      variables: {\n        dociId,\n        createdAt,\n        updatedAt,\n        firstName,\n        lastName,\n        gender,\n        phoneNumber: phone,\n        email,\n        hospital,\n        specialization,\n        dob: correctDOB,\n        cadre,\n        image,\n        providerId: \"61db6f8968b248001aec4fcb\",\n      },\n      refetchQueries: [{ query: getDoctorsProfile }],\n    });\n    setOpenAddHcp(false);\n  };\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n  };\n  const getSearchPlaceholder = (filterBy) => {\n    return filterBy === \"id\"\n      ? \"Search by ID e.g 7NE6ELLO\"\n      : filterBy === \"firstName\"\n      ? \"Search by first name e.g John\"\n      : filterBy === \"lastName\"\n      ? \"Search by last name e.g Doe\"\n      : \"\";\n  };\n\n  const setTableData = async (response, errMsg) => {\n    response\n      .then(({ data }) => {\n        setPageInfo(data.doctorProfiles.pageInfo || defaultPageInfo);\n        setProfiles(data.doctorProfiles.profile || []);\n      })\n      .catch((error) => {\n        console.error(error);\n        displayAlert(\"error\", errMsg);\n      });\n  };\n\n  if (error) return <NoData error={error} />;\n  return (\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\n      <Grid\n        item\n        gap={{ md: 4, sm: 4, xs: 2 }}\n        direction={{ sm: \"row\", xs: \"column\" }}\n        container\n        justifyContent=\"flex-end\"\n      >\n        <Grid item>\n          <CustomButton\n            endIcon={<AddIcon />}\n            title=\"Add Doctor\"\n            type={buttonType}\n            onClick={() => setOpenAddHcp(true)}\n          />\n        </Grid>\n      </Grid>\n      {/* ========= FILTERS =========== */}\n\n      <TableLayout\n        filters={\n          <DoctorFilters\n            setProfiles={setProfiles}\n            setPageInfo={setPageInfo}\n            queryParams={{\n              doctorsParams: { fetchDoctors, loading, refetch, variables },\n              doctorsByStatusParams: {\n                byStatusLoading,\n                byStatusVariables,\n                byStatusRefetch,\n                fetchDoctorsByStatus,\n              },\n            }}\n          />\n        }\n        search={\n          <CompoundSearch\n            queryParams={{ fetchData: fetchDoctors, variables, loading }}\n            setPageInfo={(data) =>\n              setPageInfo(data.doctorProfiles.pageInfo || {})\n            }\n            setProfiles={(data) =>\n              setProfiles(data.doctorProfiles.profile || [])\n            }\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\n            filterOptions={doctorsSearchOptions}\n          />\n        }\n      >\n        {loading ? (\n          <Loader />\n        ) : byStatusLoading ? (\n          <Loader />\n        ) : networkStatus === NetworkStatus.refetch ? (\n          <Loader />\n        ) : profiles.length > 0 ? (\n          <Grid item container height=\"100%\" direction=\"column\">\n            <EnhancedTable\n              headCells={hcpsHeadCells}\n              rows={profiles}\n              paginationLabel=\"Doctors per page\"\n              hasCheckbox={true}\n              changeLimit={async (e) => {\n                const res = changeTableLimit(fetchDoctors, {\n                  first: e,\n                  providerId: id,\n                });\n                await setTableData(res, \"Failed to change table limit\");\n              }}\n              dataPageInfo={pageInfo}\n              handlePagination={async (page) => {\n                const res = handlePageChange(fetchDoctors, page, pageInfo, id);\n                await setTableData(res, \"Failed to change page.\");\n              }}\n            >\n              {profiles.map((row, index) => {\n                const {\n                  _id,\n                  dociId,\n                  firstName,\n                  provider,\n                  status,\n                  specialization,\n                  consultations,\n                  picture,\n                  lastName,\n                } = row;\n                const isItemSelected = isSelected(_id, selectedRows);\n                const labelId = `enhanced-table-checkbox-${index}`;\n                return (\n                  <TableRow\n                    hover\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={_id}\n                    selected={isItemSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        onClick={() =>\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\n                        }\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          \"aria-labelledby\": labelId,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell\n                      id={labelId}\n                      scope=\"row\"\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                        minWidth: \"10rem\",\n                      }}\n                    >\n                      {dociId && dociId.split(\"-\")[1]}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      <div\n                        style={{\n                          height: \"100%\",\n                          display: \"flex\",\n                          alignItems: \"left\",\n                        }}\n                      >\n                        <span style={{ marginRight: \"1rem\" }}>\n                          <Avatar\n                            alt={`Display Photo of ${firstName}`}\n                            src={picture ? picture : displayPhoto}\n                            sx={{ width: 24, height: 24 }}\n                          />\n                        </span>\n                        <span style={{ fontSize: \"1.25rem\" }}>\n                          {firstName} {lastName}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ color: theme.palette.common.grey }}\n                    >\n                      {specialization}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      {consultations ? consultations : 0}\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ color: theme.palette.common.grey }}\n                    >\n                      {provider ? provider : \"No Provider\"}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      <Chip\n                        label={\n                          status && status === \"Active\" ? \"Active\" : \"Inactive\"\n                        }\n                        className={classes.badge}\n                        style={{\n                          background:\n                            status === \"Active\"\n                              ? theme.palette.common.lightGreen\n                              : theme.palette.common.lightRed,\n                          color:\n                            status === \"Active\"\n                              ? theme.palette.common.green\n                              : theme.palette.common.red,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        variant=\"contained\"\n                        className={classes.button}\n                        component={Link}\n                        to={`hcps/${_id}`}\n                        endIcon={<ArrowForwardIosIcon />}\n                      >\n                        View Doctor\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </EnhancedTable>\n          </Grid>\n        ) : (\n          <EmptyTable\n            headCells={hcpsHeadCells}\n            paginationLabel=\"Doctors per page\"\n          />\n        )}\n      </TableLayout>\n      {/* ADD Doctor MODAL */}\n      <Modals\n        isOpen={openAddHcp}\n        title=\"Add Doctor\"\n        rowSpacing={5}\n        height=\"auto\"\n        width={{ sm: \"50vw\", xs: \"90vw\" }}\n        handleClose={() => setOpenAddHcp(false)}\n      >\n        <Formik\n          initialValues={addDocInitialValues}\n          onSubmit={onSubmit}\n          validationSchema={addDoctorValidationSchema}\n          validateOnChange={false}\n          validateOnMount={false}\n          validateOnBlur={false}\n        >\n          {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\n            return (\n              <Form style={{ marginTop: \"1rem\" }}>\n                <Grid container direction=\"column\" gap={2}>\n                  <Grid item container direction=\"column\" gap={1}>\n                    <Grid item container spacing={2}>\n                      <Grid item container xs={6}>\n                        <FormikControl\n                          control=\"input\"\n                          label=\"First Name\"\n                          id=\"firstName\"\n                          name=\"firstName\"\n                          placeholder=\"Enter first name\"\n                        />\n                      </Grid>\n                      <Grid item container xs={6}>\n                        <FormikControl\n                          control=\"input\"\n                          label=\"Last Name\"\n                          id=\"lastName\"\n                          name=\"lastName\"\n                          placeholder=\"Enter last name\"\n                        />\n                      </Grid>\n                    </Grid>\n                    <Grid item container direction=\"column\" gap={2}>\n                      <Grid item container spacing={2}>\n                        <Grid item xs={6}>\n                          <FormikControl\n                            control=\"date\"\n                            name=\"dob\"\n                            label=\"DOB\"\n                            setFieldValue={setFieldValue}\n                            setValues={setValues}\n                          />\n                        </Grid>\n                        <Grid item xs={6}>\n                          <Grid container direction=\"column\">\n                            <FormikControl\n                              control=\"select\"\n                              options={docSpecializationsOptions}\n                              name=\"specialization\"\n                              label=\"Specialization\"\n                              placeholder=\"Specialization\"\n                            />\n                          </Grid>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item container direction=\"column\" gap={2}>\n                    <Grid item container spacing={2}>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"select\"\n                          label=\"Gender\"\n                          id=\"gender\"\n                          name=\"gender\"\n                          options={genderType}\n                          placeholder=\"Gender\"\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"input\"\n                          label=\"Phone Number\"\n                          id=\"phone\"\n                          name=\"phone\"\n                          placeholder=\"Enter last Phone number\"\n                        />\n                      </Grid>\n                    </Grid>\n\n                    <Grid item container direction=\"column\" gap={2}>\n                      <Grid item container spacing={2}>\n                        <Grid item xs={6}>\n                          <FormikControl\n                            control=\"input\"\n                            label=\"Hospital\"\n                            id=\"hospital\"\n                            name=\"hospital\"\n                            placeholder=\"Enter hospital Name\"\n                          />\n                        </Grid>\n                        <Grid item xs={6} marginBottom={{ xs: 1 }}>\n                          <FormikControl\n                            control=\"select\"\n                            options={docCadreOptions}\n                            name=\"cadre\"\n                            label=\"Cadre\"\n                            placeholder=\"Select Cadre\"\n                          />\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item container spacing={2} alignItems=\"center\">\n                    <Grid item xs={6}>\n                      <FormikControl\n                        control=\"file\"\n                        name=\"image\"\n                        label=\"Profile Pics\"\n                        setFieldValue={setFieldValue}\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <FormikControl\n                        control=\"input\"\n                        label=\"Heala-ID\"\n                        id=\"dociId\"\n                        name=\"dociId\"\n                        placeholder=\"Enter Heala ID\"\n                      />\n                    </Grid>\n                  </Grid>\n                  <Grid item container>\n                    <CustomButton\n                      title=\"Add Doctor\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n    </Grid>\n  );\n};\n\nexport default DoctorProvider;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Hospital.js",["1161","1162","1163","1164","1165","1166","1167","1168","1169"],"import React, { useEffect, useState } from \"react\";\nimport { EmptyTable, NoData } from \"components/layouts\";\nimport {\n  Grid,\n  Button,\n  Typography,\n  Avatar,\n  TableCell,\n  TableRow,\n} from \"@mui/material\";\nimport { Link } from \"react-router-dom\";\nimport { useTheme } from \"@mui/material/styles\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport { EnhancedTable } from \"components/layouts\";\nimport { useStyles } from \"styles/partnersPageStyles\";\nimport Copy from \"components/Copy\";\nimport { trucateProfileLink } from \"helpers/filterHelperFunctions\";\nimport { hospitalTableHeadCells } from \"components/Utilities/tableHeaders\";\nimport { defaultPageInfo } from \"helpers/mockData\";\nimport { trucateString } from \"helpers/filterHelperFunctions\";\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\nimport { getProviders, getPartners } from \"components/graphQL/useQuery\";\nimport { Loader } from \"components/Utilities\";\nimport { regeneratePartnerProfileUrl } from \"components/graphQL/Mutation\";\n\nconst Hospital = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\n  const [hospitals, setHospitals] = useState([]);\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\n  const userTypeId = \"61ed2354e6091400135e3d94\";\n  const [fetchHospitals, { loading, error }] = useLazyQuery(getProviders, {\n    variables: { userTypeId },\n  });\n\n  useEffect(() => {\n    fetchHospitals()\n      .then(({ data }) => {\n        if (data) {\n          setHospitals(data?.getProviders?.provider || []);\n          setPageInfo(data?.getProviders?.pageInfo || {});\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [fetchHospitals]);\n\n  if (error) return <NoData error={error} />;\n  if (loading) return <Loader />;\n  return (\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\n      {hospitals.length > 0 ? (\n        <Grid\n          container\n          item\n          direction=\"column\"\n          overflow=\"hidden\"\n          maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\n        >\n          <EnhancedTable\n            headCells={hospitalTableHeadCells}\n            rows={hospitals}\n            paginationLabel=\"Hospitals per page\"\n            hasCheckbox={false}\n            dataPageInfo={pageInfo}\n          >\n            {hospitals.map((row, index) => {\n              const { _id, name, icon, profileUrl, userCount, doctorCount } =\n                row;\n\n              //   const labelId = `enhanced-table-checkbox-${index}`;\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={_id}>\n                  <TableCell\n                    align=\"left\"\n                    className={classes.tableCell}\n                    style={{ maxWidth: \"20rem\" }}\n                  >\n                    <div\n                      style={{\n                        height: \"100%\",\n                        display: \"flex\",\n                        alignItems: \"left\",\n                      }}\n                    >\n                      <span style={{ marginRight: \"1rem\" }}>\n                        <Avatar\n                          alt={`Display Photo of ${name}`}\n                          src={icon}\n                          sx={{ width: 24, height: 24 }}\n                        />\n                      </span>\n                      <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell align=\"left\" className={classes.tableCell}>\n                    <Link\n                      to={`/patients/${_id}/filter`}\n                      className={classes.link}\n                    >\n                      <Typography\n                        variant=\"h3\"\n                        classes={{ root: classes.title }}\n                      >\n                        {userCount ? userCount : \"NA\"}\n                      </Typography>\n                    </Link>\n                  </TableCell>\n                  <TableCell align=\"left\" className={classes.tableCell}>\n                    <Link to={`/hcps/${_id}/filter`} className={classes.link}>\n                      <Typography\n                        variant=\"h3\"\n                        classes={{ root: classes.title }}\n                      >\n                        {doctorCount ? doctorCount : \"NA\"}\n                      </Typography>\n                    </Link>\n                  </TableCell>\n                  <TableCell align=\"left\" className={classes.tableCell}>\n                    <Link\n                      to={`/partners/${_id}/filter`}\n                      className={classes.link}\n                    >\n                      <Typography\n                        variant=\"h3\"\n                        classes={{ root: classes.title }}\n                      >\n                        {doctorCount ? doctorCount : \"NA\"}\n                      </Typography>\n                    </Link>\n                  </TableCell>\n\n                  <TableCell\n                    align=\"left\"\n                    className={classes.tableCell}\n                    style={{\n                      color: theme.palette.common.grey,\n                      maxWidth: \"8rem\",\n                    }}\n                  >\n                    {profileUrl ? (\n                      <Typography\n                        style={{\n                          color: theme.palette.common.grey,\n                          maxWidth: \"8rem\",\n                        }}\n                        sx={{ display: \"flex\", alignItems: \"center\" }}\n                      >\n                        {trucateProfileLink(profileUrl)}\n                        <div style={{ marginLeft: \"1rem\" }}>\n                          <Copy name=\"Profile Link\" text={profileUrl} />\n                        </div>\n                      </Typography>\n                    ) : (\n                      <Button\n                        variant=\"contained\"\n                        disableRipple\n                        className={`${classes.tableBtn} ${classes.redBtn}`}\n                      >\n                        Generate Link\n                      </Button>\n                    )}\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n          </EnhancedTable>\n        </Grid>\n      ) : (\n        <EmptyTable\n          headCells={hospitalTableHeadCells}\n          paginationLabel=\"Hospitals per page\"\n        />\n      )}\n    </Grid>\n  );\n};\n\nexport default Hospital;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Heala.js",["1170","1171","1172","1173","1174","1175","1176","1177","1178","1179","1180","1181"],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Hm.js",["1182","1183","1184","1185","1186","1187","1188"],"import React, { useEffect, useState } from \"react\";\nimport { EmptyTable, NoData } from \"components/layouts\";\nimport { Grid, Avatar, Typography, TableCell, TableRow } from \"@mui/material\";\nimport { Link } from \"react-router-dom\";\nimport { useTheme } from \"@mui/material/styles\";\n// import ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport { EnhancedTable } from \"components/layouts\";\nimport { useStyles } from \"styles/partnersPageStyles\";\n// import Copy from \"components/Copy\";\n// import { trucateProfileLink } from \"helpers/filterHelperFunctions\";\nimport { hospitalTableHeadCells5 } from \"components/Utilities/tableHeaders\";\nimport { defaultPageInfo } from \"helpers/mockData\";\n// import { trucateString } from \"helpers/filterHelperFunctions\";\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\nimport { getProviders, getPartners } from \"components/graphQL/useQuery\";\nimport { Loader } from \"components/Utilities\";\nimport { regeneratePartnerProfileUrl } from \"components/graphQL/Mutation\";\n\nconst Hm = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\n  const [hospitals, setHospitals] = useState([]);\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\n  const [fetchHospitals, { loading, error }] = useLazyQuery(getProviders, {\n    variables: { userTypeId: \"61ed2354e6091400135e3d94\" },\n  });\n\n  useEffect(() => {\n    fetchHospitals()\n      .then(({ data }) => {\n        if (data) {\n          setHospitals(data?.getProviders?.provider || []);\n          setPageInfo(data?.getProviders?.pageInfo || {});\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [fetchHospitals]);\n\n  if (error) return <NoData error={error} />;\n  if (loading) return <Loader />;\n  return (\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\n      {hospitals.length > 0 ? (\n        /* ================= HMO TABLE ================= */\n        <Grid\n          container\n          item\n          direction=\"column\"\n          overflow=\"hidden\"\n          maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\n        >\n          <EnhancedTable\n            headCells={hospitalTableHeadCells5}\n            rows={hospitals}\n            paginationLabel=\"Hospitals per page\"\n            hasCheckbox={false}\n            dataPageInfo={pageInfo}\n          >\n            {hospitals.map((row, index) => {\n              const {\n                _id,\n                icon,\n                name,\n                userCount,\n                enrolleeCount,\n                partnersCount,\n              } = row;\n              // const labelId = `enhanced-table-checkbox-${index}`;\n              return (\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={_id}>\n                  <TableCell\n                    align=\"left\"\n                    className={classes.tableCell}\n                    style={{ maxWidth: \"20rem\" }}\n                  >\n                    <div\n                      style={{\n                        height: \"100%\",\n                        display: \"flex\",\n                        alignItems: \"left\",\n                      }}\n                    >\n                      <span style={{ marginRight: \"1rem\" }}>\n                        <Avatar\n                          alt={`Display Photo of ${name}`}\n                          src={icon}\n                          sx={{ width: 24, height: 24 }}\n                        />\n                      </span>\n                      <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\n                    </div>\n                  </TableCell>\n                  <TableCell align=\"left\" className={classes.tableCell}>\n                    <Link\n                      to={`/patients/${_id}/filter`}\n                      className={classes.link}\n                    >\n                      <Typography\n                        variant=\"h3\"\n                        classes={{ root: classes.title }}\n                      >\n                        {userCount ? userCount : \"NA\"}\n                      </Typography>\n                    </Link>\n                  </TableCell>\n                  <TableCell align=\"left\" className={classes.tableCell}>\n                    <Link to={`/hmo/${_id}`} className={classes.link}>\n                      <Typography\n                        variant=\"h3\"\n                        classes={{ root: classes.title }}\n                      >\n                        {enrolleeCount ? enrolleeCount : \"NA\"}\n                      </Typography>\n                    </Link>\n                  </TableCell>\n                  <TableCell align=\"left\" className={classes.tableCell}>\n                    <Link\n                      to={`/partners/${_id}/filter`}\n                      className={classes.link}\n                    >\n                      <Typography\n                        variant=\"h3\"\n                        classes={{ root: classes.title }}\n                      >\n                        {partnersCount ? partnersCount : \"NA\"}\n                      </Typography>\n                    </Link>\n                  </TableCell>\n                </TableRow>\n              );\n            })}\n          </EnhancedTable>\n        </Grid>\n      ) : (\n        <EmptyTable\n          headCells={hospitalTableHeadCells5}\n          paginationLabel=\"HMO per page\"\n        />\n      )}\n    </Grid>\n  );\n};\n\nexport default Hm;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/WaitingListDetails.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ViewHCP.js",["1189","1190","1191","1192","1193","1194","1195"],"import React, { useEffect, useState } from \"react\";\nimport { NoData } from \"components/layouts\";\nimport { useSnackbar } from \"notistack\";\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\nimport { Grid, Typography, Avatar } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useHistory } from \"react-router-dom\";\nimport { Link } from \"react-router-dom\";\nimport { dateMoment } from \"components/Utilities/Time\";\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\nimport {\n  verification,\n  getVerification,\n  getCategory,\n} from \"components/graphQL/useQuery\"; //\nimport {\n  rejectVerification,\n  updateDoctorProvider,\n} from \"components/graphQL/Mutation\";\nimport { verifyHCP } from \"components/graphQL/Mutation\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { FormikControl } from \"components/validation\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport Success from \"components/modals/Success\";\nimport { handleError, showSuccessMsg } from \"helpers/filterHelperFunctions\";\n\nconst useStyles = makeStyles((theme) => ({\n  parentGridWrapper: {\n    background: \"#fff\",\n    borderRadius: \"1rem\",\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.1)\",\n    \"&:not(:last-of-type)\": {\n      marginBottom: \"5rem\",\n    },\n  },\n\n  cardContainer: {\n    \"&.MuiGrid-root\": {\n      display: \"grid\",\n      rowGap: \"2rem\",\n      \"& > *\": {\n        flex: 1,\n        flexDirection: \"column\",\n        gap: \"10px\",\n      },\n    },\n    \"@media (max-width:1200px)\": {\n      gap: \"10px\",\n    },\n  },\n  gridsWrapper: {\n    background: \"#fff\",\n    borderRadius: \"1rem\",\n    padding: \"1rem\",\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\n  },\n\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.3rem !important\",\n      background: theme.palette.common.lightGreen,\n      color: theme.palette.common.green,\n      borderRadius: \"1.5rem\",\n    },\n  },\n\n  cardGrid: {\n    borderRadius: \"1rem\",\n    minHeight: \"14.1rem\",\n    paddingInline: \"1rem\",\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\n  },\n\n  infoBadge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.25rem\",\n      borderRadius: \"1.5rem\",\n      color: theme.palette.common.green,\n    },\n  },\n\n  link: {\n    display: \"flex\",\n    alignItems: \"center\",\n    fontSize: \"1.25rem\",\n    color: theme.palette.common.green,\n    border: `1px solid ${theme.palette.common.lightGrey}`,\n    padding: \".75rem\",\n    borderRadius: \"1.5rem\",\n    textDecoration: \"none\",\n  },\n\n  linkIcon: {\n    \"&.MuiSvgIcon-root\": {\n      fontSize: \"1.25rem\",\n      color: theme.palette.common.green,\n      marginLeft: \"1.2rem\",\n    },\n  },\n\n  buttonsGridWrapper: {\n    marginTop: \"5rem !important\",\n    height: \"16.1rem\",\n  },\n\n  title: {\n    \"&.MuiTypography-root\": {\n      color: theme.palette.common.grey,\n      // marginRight: \"2rem\",\n    },\n  },\n}));\n\nconst ViewHCP = () => {\n  const { viewId } = useParams();\n  const { enqueueSnackbar } = useSnackbar();\n  const { loading, data, error } = useQuery(verification, {\n    variables: { id: viewId },\n  });\n\n  const history = useHistory();\n  const [respondData, setRespondData] = useState([]);\n\n  const [reject] = useMutation(rejectVerification);\n  const [open, setOpen] = useState(false);\n\n  const [updateState, setUpdateState] = useState(\"Update Provider\");\n  const [update] = useMutation(updateDoctorProvider);\n  const [submit, setSubmit] = useState(false);\n  const handleDialogCloses = () => setOpen(false);\n  const handleUpdateProVider = async (value) => {\n    try {\n      setSubmit(true);\n      await update({\n        variables: {\n          dociId: respondData && respondData.doctorData.dociId,\n          providerId: value,\n        },\n      });\n      setSubmit(false);\n      setUpdateState(\"Updated\");\n    } catch (err) {\n      setSubmit(false);\n      console.log(err);\n    }\n  };\n  const [cancel, setCancel] = useState(false);\n  const handleDialogOpen = () => {\n    setCancel(true);\n  };\n  const initialValues = {\n    reason: \"\",\n  };\n  const validationSchema = Yup.object({\n    reason: Yup.string(\"Enter Reason \").required(\"Reason is required\"),\n  });\n  const onSubmit = async (values) => {\n    try {\n      const { reason } = values;\n      const trimedReason = reason.trim();\n      console.log(\"trimmed reason\", trimedReason);\n      await reject({\n        variables: {\n          reason: trimedReason,\n          id: viewId,\n        },\n        refetchQueries: [\n          {\n            query: getVerification,\n          },\n        ],\n      });\n      setCancel(false);\n      showSuccessMsg(\n        enqueueSnackbar,\n        Typography,\n        \"Reject verification successful.\"\n      );\n      setOpen(true);\n      setTimeout(() => {\n        setOpen(false);\n        history.push(\"/verification\");\n      }, 3000);\n    } catch (error) {\n      console.log(\"Error from reject verification\", error);\n      handleError(error, enqueueSnackbar);\n    }\n  };\n\n  const theme = useTheme();\n\n  const trasparentButton = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: \"#868686\",\n  };\n  const RedButton = {\n    background: \"red\",\n    hover: \"red\",\n    active: \"red\",\n    disabled: \"#FF8484\",\n  };\n  const [ref, setRef] = useState(null);\n  const [get, { data: da }] = useLazyQuery(getCategory);\n  useEffect(() => {\n    if (data) {\n      setRespondData(data.getVerification);\n      setRef(data.getVerification.reference?.reference_code);\n    }\n  }, [data, ref]);\n  const [verifyState, setVerifyState] = useState(\n    respondData.status ? \"Doctor Verified!\" : \"Verify Doctor\"\n  );\n  const [process, setProcess] = useState(undefined);\n  useEffect(() => {\n    if (ref) {\n      get({\n        variables: {\n          id: ref,\n        },\n      });\n    }\n    if (da && da.getProvider !== null) {\n      setProcess(da?.getProvider.name);\n    } else {\n      setProcess(undefined);\n    }\n  }, [ref, da, get]);\n\n  useEffect(() => {\n    if (respondData.status) {\n      setVerifyState(\"Doctor Verified!!\");\n    }\n  }, [verifyState, respondData.status]);\n  const {\n    qualification,\n    license,\n    alumni_association,\n    reference,\n    doctorData,\n    yearbook,\n    status,\n    // eslint-disable-next-line\n  } = respondData;\n\n  const [verify, { data: verifyData }] = useMutation(verifyHCP);\n  const [button, setButtonValue] = useState(respondData.status); //button\n\n  useEffect(() => {\n    if (verifyData && verifyData.verifyHCP.status) {\n      setVerifyState(\"Doctor Verified!!\");\n      setButtonValue(verifyData.verifyHCP.status);\n    }\n  }, [verify, status, button, verifyState, verifyData]);\n\n  const handleVerifyDoctor = async () => {\n    try {\n      await verify({\n        variables: {\n          id: viewId,\n        },\n        refetchQueries: [\n          {\n            query: verification,\n            variables: {\n              id: viewId,\n            },\n          },\n        ],\n      });\n    } catch (err) {\n      console.error(err);\n    }\n  };\n  const classes = useStyles();\n\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error} />;\n\n  return (\n    <>\n      <Grid container direction=\"column\" rowGap={4} sx={{ overFlow: \"hidden\" }}>\n        <Grid\n          item\n          direction={{ md: \"row\", xs: \"column\", sm: \"row\" }}\n          width=\"100%\"\n          justifyContent=\"space-between\"\n          gap={{ md: 2, sm: 2, xs: 2 }}\n          container\n          flexWrap={{ md: \"nowrap\", sm: \"wrap\" }}\n          alignItems=\"center\"\n          padding={{ sm: \"2.5rem\", xs: \"1.5rem\", md: \"3rem\" }}\n          className={`${classes.cardGrid} ${classes.firstContainer}`}\n        >\n          {/* <Grid item container sx={{ background: \"yellow\" }} justifyContent=\"center\" height=\"100%\"> */}\n          <Grid item>\n            <Avatar\n              src={doctorData ? doctorData.picture : displayPhoto}\n              sx={{\n                minWidth: \"150px\",\n                minHeight: \"150px\",\n                marginRight: \"2rem\",\n              }}\n            />\n          </Grid>\n          {/* </Grid> */}\n          <Grid\n            item\n            flex={1}\n            container\n            display=\"grid\"\n            gridTemplateColumns={{\n              md: \"repeat(4,minmax(15rem,1fr))\",\n              sm: \"repeat(3,minmax(15rem,auto))\",\n              xs: \"repeat(2,1fr)\",\n            }}\n            className={classes.cardContainer}\n          >\n            <Grid item container>\n              <Grid item>\n                <Typography variant=\"body1\">Doctor Name</Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"h4\">\n                  {doctorData\n                    ? `${doctorData.firstName} ${doctorData.lastName}`\n                    : \"No Doctor\"}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid item container>\n              <Grid item>\n                <Typography variant=\"body1\">Hospital</Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"h4\">\n                  {doctorData && doctorData.hospital !== \"\"\n                    ? doctorData.hospital\n                    : \"No Hospital\"}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid item container>\n              <Grid item>\n                <Typography variant=\"body1\">Gender:</Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"h4\">\n                  {doctorData ? `${doctorData.gender} ` : \"Not Specified\"}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid item container>\n              <Grid item>\n                <Typography variant=\"body1\">Medical ID:</Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"h4\">\n                  {doctorData ? `${doctorData.dociId.split(\"-\")[1]}` : \"No ID \"}{\" \"}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid item container>\n              <Grid item>\n                <Typography variant=\"body1\">Specialization:</Typography>\n              </Grid>\n              <Grid item width=\"100%\">\n                <Typography variant=\"h4\">\n                  {doctorData\n                    ? `${doctorData.specialization}`\n                    : \"No specialization \"}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid item container>\n              <Grid item>\n                <Typography variant=\"body1\">DOB:</Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"h4\">\n                  {doctorData ? `${dateMoment(doctorData.dob)}` : \"No DOB\"}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid item container>\n              <Grid item>\n                <Typography variant=\"body1\">Status</Typography>\n              </Grid>\n              <Grid item>\n                <Typography\n                  variant=\"h4\"\n                  style={{\n                    color:\n                      status === true\n                        ? theme.palette.common.green\n                        : theme.palette.common.red,\n                    width: \"max-content\",\n                  }}\n                >\n                  {status ? \"Verified\" : \"Not Verified\"}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid\n              item\n              container\n              className=\"btn\"\n              alignItems=\"center\"\n              gridColumnStart={{ sm: 2, xs: 2, md: 3 }}\n              sx={{ justifyContent: \"center !important\" }}\n            >\n              <CustomButton\n                title=\"View Doctor Profile\"\n                type={trasparentButton}\n                width=\"100%\"\n                component={Link}\n                to={`/hcps/${doctorData && doctorData._id}`}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n        {/* qualifications */}\n        <Grid\n          container\n          display=\"grid\"\n          gap={3}\n          gridTemplateColumns={{\n            md: \"repeat(2,1fr)\",\n            sm: \"repeat(2,1fr)\",\n            xs: \"repeat(1,1fr)\",\n          }}\n        >\n          <Grid item>\n            <Grid\n              container\n              justifyContent=\"center\"\n              alignItems=\"center\"\n              direction=\"column\"\n              gap={{ sm: 3, md: 4, xs: 3 }}\n              className={classes.cardGrid}\n            >\n              <Grid item>\n                <Typography variant=\"h4\">Qualification</Typography>\n              </Grid>\n              {qualification?.degree !== \"\" && qualification?.image !== \"\" ? (\n                <Grid\n                  item\n                  container\n                  gap={2}\n                  justifyContent={{ xs: \"left\", sm: \"center\" }}\n                >\n                  {qualification?.degree && (\n                    <Grid item>\n                      <Typography variant=\"h5\" className={classes.link}>\n                        {qualification.degree}\n                      </Typography>\n                    </Grid>\n                  )}\n                  {qualification?.year && (\n                    <Typography variant=\"h5\" item className={classes.link}>\n                      {dateMoment(qualification.year).slice(-4)}\n                    </Typography>\n                  )}\n                  {qualification?.image && (\n                    <a\n                      href={qualification.image}\n                      rel=\"noreferrer\"\n                      target=\"_blank\"\n                      className={classes.link}\n                    >\n                      <span>Qualification PNG</span>\n                    </a>\n                  )}\n                </Grid>\n              ) : (\n                <Typography variant=\"h5\" item className={classes.link}>\n                  Not Provided\n                </Typography>\n              )}\n            </Grid>\n          </Grid>\n          {/* 2 */}\n          <Grid item>\n            <Grid\n              container\n              justifyContent=\"center\"\n              alignItems=\"center\"\n              direction=\"column\"\n              gap={{ sm: 3, md: 4, xs: 3 }}\n              className={classes.cardGrid}\n            >\n              <Grid item>\n                <Typography variant=\"h5\">License</Typography>\n              </Grid>\n              {license && license.number ? (\n                <Grid\n                  item\n                  container\n                  alignItems=\"center\"\n                  flexWrap=\"wrap\"\n                  justifyContent={{\n                    md: \"center\",\n                    sm: \"center\",\n                    xs: \"flex-start\",\n                  }}\n                  gap={2}\n                >\n                  {license.number && (\n                    <Grid item className={classes.link}>\n                      {license.number}\n                    </Grid>\n                  )}\n                  {license.type && (\n                    <Grid item className={classes.link}>\n                      {license.type}\n                    </Grid>\n                  )}\n                  {license.image && (\n                    <Grid item>\n                      <a\n                        href={license.image}\n                        rel=\"noreferrer\"\n                        className={classes.link}\n                        target=\"_blank\"\n                      >\n                        <span>IMG</span>\n                      </a>\n                    </Grid>\n                  )}\n                </Grid>\n              ) : (\n                <Grid item className={classes.link}>\n                  Not Provided\n                </Grid>\n              )}\n            </Grid>\n          </Grid>\n\n          {/* 3 */}\n          <Grid\n            item\n            container\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            direction=\"column\"\n            gap={{ sm: 3, md: 4, xs: 3 }}\n            className={classes.cardGrid}\n          >\n            <Grid item>\n              <Typography variant=\"h4\">Year Book</Typography>\n            </Grid>\n            {yearbook && Object.keys(yearbook).length > 0 && yearbook.image ? (\n              <Grid\n                item\n                container\n                justifyContent={{\n                  md: \"center\",\n                  sm: \"center\",\n                  xs: \"flex-start\",\n                }}\n                gap={2}\n                alignItems=\"center\"\n                flexWrap=\"wrap\"\n              >\n                {yearbook && yearbook?.graduation_year !== \"Invalid date\" ? (\n                  <Typography className={classes.link} variant=\"h5\">\n                    {yearbook?.graduation_year?.slice(0, 4)}\n                  </Typography>\n                ) : (\n                  <Grid item>\n                    <Typography className={classes.link} variant=\"h5\">\n                      Not Provided\n                    </Typography>\n                  </Grid>\n                )}\n                {yearbook.image && (\n                  <Grid item>\n                    <a\n                      href={yearbook.image}\n                      rel=\"noreferrer\"\n                      target=\"_blank\"\n                      className={classes.link}\n                    >\n                      <span>Qualification PNG</span>\n                    </a>\n                  </Grid>\n                )}\n              </Grid>\n            ) : (\n              <Grid item>\n                <Typography className={classes.link} variant=\"h5\">\n                  Not Provided\n                </Typography>\n              </Grid>\n            )}\n          </Grid>\n\n          {/* 4 */}\n          <Grid\n            item\n            container\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            direction=\"column\"\n            gap={{ sm: 3, md: 4, xs: 3 }}\n            className={classes.cardGrid}\n          >\n            <Grid item>\n              <Typography variant=\"h4\">Alumni</Typography>\n            </Grid>\n            {alumni_association?.facebook_group_name ? (\n              <Grid\n                item\n                container\n                justifyContent={{\n                  md: \"center\",\n                  sm: \"center\",\n                  xs: \"flex-start\",\n                }}\n                gap={2}\n              >\n                {alumni_association.facebook_group_name && (\n                  <a\n                    href={alumni_association.image}\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                    className={classes.link}\n                  >\n                    <span>{alumni_association.facebook_group_name}</span>\n                  </a>\n                )}\n                {alumni_association.instagram_handle && (\n                  <a\n                    href={alumni_association.image}\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                    className={classes.link}\n                  >\n                    <span>{alumni_association.instagram_handle}</span>\n                  </a>\n                )}\n              </Grid>\n            ) : (\n              <Typography variant=\"h5\" className={classes.link}>\n                Not Provided\n              </Typography>\n            )}\n          </Grid>\n\n          <Grid\n            item\n            container\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            direction=\"column\"\n            gap={{ sm: 3, md: 4, xs: 3 }}\n            className={classes.cardGrid}\n          >\n            <Grid item>\n              <Typography variant=\"h4\">Reference ID</Typography>\n            </Grid>\n            <Grid\n              item\n              container\n              // justifyContent=\"center\"\n              justifyContent={{\n                md: \"center\",\n                sm: \"space-between\",\n                xs: \"space-around\",\n              }}\n              gap={2}\n              flexWrap=\"nowrap\"\n            >\n              {reference?.reference_code ? (\n                <Typography variant=\"h5\" className={classes.link}>\n                  {process ? process : reference?.reference_code}\n                </Typography>\n              ) : (\n                <Typography variant=\"h5\" className={classes.link}>\n                  Not Provided\n                </Typography>\n              )}\n              {reference?.reference_code && (\n                <Grid item>\n                  <CustomButton\n                    title={\n                      doctorData?.providerId === reference?.reference_code ||\n                      updateState === \"Updated\"\n                        ? \"Updated\"\n                        : \"Update Provider\"\n                    }\n                    type={trasparentButton}\n                    width=\"100%\"\n                    isSubmitting={submit}\n                    onClick={() =>\n                      handleUpdateProVider(reference?.reference_code)\n                    }\n                    disabled={\n                      doctorData?.providerId === reference?.reference_code\n                        ? true\n                        : false\n                    }\n                  />\n                </Grid>\n              )}\n            </Grid>\n          </Grid>\n        </Grid>\n\n        {/* 5 */}\n\n        <Grid\n          item\n          container\n          justifyContent=\"center\"\n          alignItems=\"center\"\n          gap={2}\n          flexWrap=\"nowrap\"\n          className={classes.cardGrid}\n        >\n          <Grid item>\n            <CustomButton\n              title=\"Reject Verification\"\n              type={RedButton}\n              onClick={handleDialogOpen}\n              width=\"100%\"\n            />\n          </Grid>\n          <Grid item>\n            <CustomButton\n              title={verifyState}\n              type={trasparentButton}\n              disabled={verifyState === \"Doctor Verified!!\"}\n              onClick={handleVerifyDoctor}\n              width=\"100%\"\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <Modals\n        isOpen={cancel}\n        width={{ sm: \"30vw\", md: \"30vw\", xs: \"90vw\" }}\n        title=\"Reject Doctor\"\n        rowSpacing={5}\n        handleClose={() => setCancel(false)}\n      >\n        <Formik\n          onSubmit={onSubmit}\n          validationSchema={validationSchema}\n          validateOnChange={false}\n          validateOnMount={false}\n          initialValues={initialValues}\n          enableReinitialize\n        >\n          {({ isSubmitting, dirty, isValid }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid container>\n                  <Grid item container>\n                    <FormikControl\n                      control=\"input\"\n                      label=\"State a Reason\"\n                      name=\"reason\"\n                      placeholder=\"Enter reason\"\n                    />\n                  </Grid>\n                  <Grid item container sx={{ flexGrow: 1, marginTop: \"10rem\" }}>\n                    <CustomButton\n                      title=\"Reject Verification\"\n                      type={trasparentButton}\n                      width=\"100%\"\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n      <Success\n        open={open}\n        handleDialogClose={handleDialogCloses}\n        title=\"\"\n        type=\"fail\"\n        confirmationMsg=\" Doctor Verification failed\"\n        btnValue=\"Continue\"\n      />\n    </>\n  );\n};\n\nexport default ViewHCP;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ViewReferral.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/PatientProvider.js",["1196","1197","1198","1199","1200"],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/VideoCall.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Illness.js",["1201","1202"],"import React, { useState, useCallback, useEffect } from \"react\";\nimport { useSelector } from \"react-redux\";\nimport { useTheme } from \"@mui/material/styles\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport { Button, Checkbox, TableCell, TableRow, Grid } from \"@mui/material\";\nimport useAlert from \"hooks/useAlert\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { defaultPageInfo } from \"helpers/mockData\";\nimport { useStyles } from \"styles/partnersPageStyles\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport {\n  changeTableLimit,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport DeleteOrDisable from \"components/modals/DeleteOrDisable\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport { illnesssHeadCells } from \"components/Utilities/tableHeaders\";\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\nimport { getIllness, getIllnesses } from \"components/graphQL/useQuery\";\nimport { deleteIllness } from \"components/graphQL/Mutation\";\nimport { CustomButton, Loader } from \"components/Utilities\";\nimport { dateMoment } from \"components/Utilities/Time\";\nimport { IllnessModal } from \"components/modals\";\n\nconst Illness = () => {\n  const theme = useTheme();\n  const classes = useStyles();\n  const { displayAlert } = useAlert();\n  const { setSelectedRows } = useActions();\n  const [partner, setPartners] = useState([]);\n  const [deleteId, setDeleteId] = useState(\"\");\n  const [illness, setIllness] = useState(\"\");\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\n  const [openEditFilter, setOpenEditFilter] = useState(false);\n  const [openDelete, setOpenDelete] = useState(false);\n  const [openFilter, setOpenFilter] = useState(false);\n  const [fetchIllness, { loading, data, error }] = useLazyQuery(getIllnesses);\n  const [getIllnes, { data: illnessData }] = useLazyQuery(getIllness);\n  const [deleteIllnes] = useMutation(deleteIllness);\n  const { selectedRows } = useSelector((state) => state.tables);\n  const handleEditClose = () => setOpenEditFilter(false);\n  const handleClose = () => setOpenFilter(false);\n\n  const confirmDelete = async () => {\n    try {\n      await deleteIllnes({\n        variables: {\n          id: deleteId,\n        },\n        refetchQueries: [{ query: getIllnesses }],\n      });\n      displayAlert(\"success\", \"Illness deleted\");\n      setDeleteId(\"\");\n    } catch (err) {\n      displayAlert(\"error\", err);\n    }\n  };\n  const darkButtonType = {\n    background: theme.palette.primary.main,\n    hover: theme.palette.primary.light,\n    active: theme.palette.primary.dark,\n  };\n  const initialValues = {\n    name: \"\",\n    description: \"\",\n  };\n\n  const setTableData = async (response, errMsg) => {\n    const data = response?.data;\n    if (data) {\n      setPartners(data?.getIllnesses?.data || []);\n      setPageInfo(data?.getIllnesses?.pageInfo || defaultPageInfo);\n    }\n  };\n\n  useEffect(() => {\n    fetchIllness({\n      variables: {\n        first: pageInfo.limit,\n      },\n    });\n    //eslint-disable-next-line\n  }, []);\n  useEffect(() => {\n    if (data) {\n      setPartners(data?.getIllnesses?.data || []);\n      setPageInfo(data?.getIllnesses?.pageInfo || defaultPageInfo);\n    }\n  }, [data]);\n  const handleEdit = useCallback(\n    async (id) => {\n      setOpenEditFilter(true);\n      console.log(id);\n      await getIllnes({\n        variables: {\n          id,\n        },\n      });\n    },\n    //eslint-disable-next-line\n    []\n  );\n\n  useEffect(() => {\n    if (illnessData) {\n      const { name, description, createdAt, _id } = illnessData?.getIllness;\n      setIllness({\n        id: _id,\n        name,\n        description,\n        createdAt,\n      });\n    }\n  }, [illnessData]);\n\n  const handleDeleteIllness = (id) => {\n    setOpenDelete(true);\n    setDeleteId(id);\n  };\n\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error} />;\n  return (\n    <>\n      <Grid\n        container\n        direction=\"column\"\n        gap={{ sm: 4, xs: 2 }}\n        flexWrap=\"nowrap\"\n        height=\"100%\"\n      >\n        <Grid\n          item\n          container\n          gap={2}\n          direction={{ md: \"row\", sm: \"row\", xs: \"column\" }}\n        >\n          <Grid\n            item\n            container\n            justifyContent=\"flex-end\"\n            alignItems=\"center\"\n            flex={{ sm: 1, xs: 1, md: 1 }}\n          >\n            <Grid item>\n              <CustomButton\n                endIcon={<PersonAddAlt1Icon />}\n                title=\"Create Illness\"\n                type={darkButtonType}\n                onClick={() => setOpenFilter(true)}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n        {partner?.length > 0 ? (\n          <Grid item container height=\"100%\" direction=\"column\">\n            <EnhancedTable\n              headCells={illnesssHeadCells}\n              rows={partner}\n              paginationLabel=\"Partner per page\"\n              hasCheckbox={true}\n              changeLimit={async (e) => {\n                const res = changeTableLimit(fetchIllness, {\n                  first: e,\n                });\n                await setTableData(res, \"Failed to change table limit.\");\n              }}\n              dataPageInfo={pageInfo}\n              handlePagination={async (page) => {\n                const res = handlePageChange(fetchIllness, page, pageInfo, {});\n                await setTableData(res, \"Failed to change page.\");\n              }}\n            >\n              {partner.map((row, index) => {\n                const isItemSelected = isSelected(row.id, selectedRows);\n                const { name, createdAt, _id, description } = row;\n                const labelId = `enhanced-table-checkbox-${index}`;\n\n                return (\n                  <TableRow\n                    hover\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={row._id}\n                    selected={isItemSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        onClick={() =>\n                          handleSelectedRows(\n                            row.id,\n                            selectedRows,\n                            setSelectedRows\n                          )\n                        }\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          \"aria-labelledby\": labelId,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ minWidth: \"15rem\" }}\n                    >\n                      {dateMoment(createdAt)}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      {name}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      {description}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      <Button\n                        variant=\"contained\"\n                        disableRipple\n                        onClick={() => handleEdit(_id)}\n                        className={`${classes.tableBtn} ${classes.greenBtn}`}\n                        endIcon={<EditIcon color=\"success\" />}\n                      >\n                        Edit\n                      </Button>\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      <Button\n                        variant=\"contained\"\n                        disableRipple\n                        className={`${classes.tableBtn} ${classes.redBtn}`}\n                        onClick={() => handleDeleteIllness(_id)}\n                        endIcon={<DeleteIcon color=\"error\" />}\n                      >\n                        Delete\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </EnhancedTable>\n          </Grid>\n        ) : (\n          <EmptyTable\n            headCells={illnesssHeadCells}\n            paginationLabel=\"Doctors per page\"\n          />\n        )}\n      </Grid>\n      <IllnessModal\n        initialValues={initialValues}\n        type=\"add\"\n        open={openFilter}\n        handleClose={handleClose}\n      />\n      <IllnessModal\n        initialValues={illness}\n        type=\"edit\"\n        open={openEditFilter}\n        handleClose={handleEditClose}\n      />\n      <DeleteOrDisable\n        open={openDelete}\n        setOpen={setOpenDelete}\n        title=\"Delete Illness\"\n        confirmationMsg=\"delete\"\n        btnValue=\"Delete\"\n        onConfirm={confirmDelete}\n      />\n    </>\n  );\n};\n\nexport default Illness;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Subscription.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Tables/PlansTable.js",["1203","1204","1205","1206","1207","1208","1209","1210","1211","1212","1213","1214","1215","1216","1217","1218"],"import React, { useEffect, useState } from \"react\";\nimport { Grid } from \"@mui/material\";\nimport useAlert from \"hooks/useAlert\";\nimport { useSelector } from \"react-redux\";\nimport { useMutation } from \"@apollo/client\";\nimport { Loader } from \"components/Utilities\";\nimport { EmptyTable } from \"components/layouts\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { useStyles } from \"styles/hmoPageStyles\";\nimport { DeleteOrDisable } from \"components/modals\";\nimport { getPlans } from \"components/graphQL/useQuery\";\nimport TableLayout from \"components/layouts/TableLayout\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { DELETE_PLAN } from \"components/graphQL/Mutation\";\nimport { PlanListRow } from \"components/Rows/PlanListRow\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\nimport EnhancedTable from \"components/layouts/EnhancedTable\";\nimport {\n  defaultPageInfo,\n  plansSearchFilterOptions,\n  plansSearchOptions,\n} from \"../../helpers/mockData\";\nimport {\n  changeTableLimit,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport { subscriptionHeader } from \"components/Utilities/tableHeaders\";\nimport MainModal from \"components/modals/MainModal\";\nimport CreateEditPlans from \"components/Forms/CreateEditPlans\";\nimport { getDynamicSearchPlaceholder } from \"helpers/func\";\n\nconst PlansTable = ({ PlansQuery }) => {\n  /* const theme = useTheme(); */\n  const classes = useStyles();\n  const [id, setId] = useState(null);\n  const { watchFunction } = useAlert();\n  const [plans, setPlans] = useState([]);\n  const [deletePlan] = useMutation(DELETE_PLAN);\n  const [editModal, setEditModal] = useState(false);\n  const [editPlanData, setEditPlanData] = useState(\"\");\n  const [deleteModal, setdeleteModal] = useState(false);\n  const [isDeleting, setIsDeleting] = React.useState({});\n  const { fetchPlans, loading, data, refetch, variables, newVariables } =\n    PlansQuery;\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\n\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n\n  useEffect(() => {\n    fetchPlans({\n      variables: {\n        first: pageInfo?.limit,\n      },\n      notifyOnNetworkStatusChange: true,\n    });\n  }, [fetchPlans, pageInfo]);\n\n  useEffect(() => {\n    if (data) {\n      setPlans(data.getPlans.plan);\n      setPageInfo(data.getPlans.pageInfo);\n      (data.getPlans.plan || []).map((plan) => {\n        const newIsDeleting = isDeleting;\n        setIsDeleting({ [plan._id]: false, ...newIsDeleting });\n        return null;\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  // delete plan\n  const onConfirmDelPlan = async () => {\n    const newIsDeleting = isDeleting;\n    const stopDeleting = () => {\n      setId(null);\n      newIsDeleting[id] = false;\n      setIsDeleting({ ...newIsDeleting });\n    };\n    try {\n      newIsDeleting[id] = true;\n      setIsDeleting({ ...newIsDeleting });\n      const deletePlanRes = deletePlan({\n        variables: { id },\n        refetchQueries: [{ query: getPlans }],\n      });\n\n      watchFunction(\n        \"Plan deleted succesfully\",\n        \"Couldn't delete plan.\",\n        deletePlanRes\n      ).then(() => {\n        refetch();\n        stopDeleting();\n      });\n    } catch (error) {\n      stopDeleting();\n      console.error(error);\n    }\n  };\n\n  return (\n    <Grid>\n      <Grid item flex={1} container direction=\"column\" rowGap={2}>\n        <Grid\n          item\n          container\n          spacing={2}\n          className={classes.searchFilterContainer}\n        >\n          <Grid item container flexWrap=\"wrap\" spacing={4}></Grid>\n        </Grid>\n        <TableLayout\n          search={\n            <CompoundSearch\n              queryParams={{\n                fetchData: fetchPlans,\n                variables,\n                loading,\n                newVariables: newVariables,\n              }}\n              searchState={{\n                value: \"\",\n                filterBy: \"name\",\n              }}\n              setPageInfo={(data) => null}\n              setProfiles={(data) => null}\n              getSearchPlaceholder={(filterBy) =>\n                getDynamicSearchPlaceholder(filterBy, plansSearchFilterOptions)\n              }\n              filterOptions={plansSearchOptions}\n            />\n          }\n        >\n          {loading ? (\n            <Loader />\n          ) : plans.length > 0 ? (\n            /* ================= HMO TABLE ================= */\n            <Grid\n              container\n              item\n              direction=\"column\"\n              overflow=\"hidden\"\n              maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\n            >\n              <EnhancedTable\n                headCells={subscriptionHeader}\n                rows={plans}\n                paginationLabel=\"subscription per page\"\n                hasCheckbox={true}\n                changeLimit={async (e) => {\n                  await changeTableLimit(fetchPlans, { first: e });\n                }}\n                dataPageInfo={pageInfo}\n                handlePagination={async (page) => {\n                  await handlePageChange(fetchPlans, page, pageInfo, {});\n                }}\n              >\n                {plans.map((row, index) => {\n                  const isItemSelected = isSelected(row?._id, selectedRows);\n                  const labelId = `enhanced-table-checkbox-${index}`;\n                  const { _id, name, provider, duration, amount, description } =\n                    row;\n                  const editFormValues = {\n                    id: _id,\n                    name,\n                    provider,\n                    duration,\n                    amount,\n                    description,\n                  };\n                  return (\n                    <PlanListRow\n                      key={`${row?._id}-${index}`}\n                      plan={row}\n                      isItemSelected={isItemSelected}\n                      handleSelectedRows={handleSelectedRows}\n                      selectedRows={selectedRows}\n                      setSelectedRows={setSelectedRows}\n                      labelId={labelId}\n                      handleDeleteOpenDialog={() => {\n                        setId(row?._id);\n                        setdeleteModal(true);\n                      }}\n                      handleEditOpenDialog={() => {\n                        setEditPlanData(editFormValues);\n                        setEditModal(true);\n                      }}\n                      deleting={isDeleting[row._id]}\n                    />\n                  );\n                })}\n              </EnhancedTable>\n            </Grid>\n          ) : (\n            <EmptyTable\n              headCells={subscriptionHeader}\n              paginationLabel=\"Users per page\"\n            />\n          )}\n        </TableLayout>\n      </Grid>\n      <Grid>\n        {/* EDIT PLAN MODAL */}\n        <MainModal\n          isOpen={editModal}\n          headerText=\"Edit plan\"\n          rowSpacing={5}\n          setIsOpen={() => setEditModal(false)}\n        >\n          <CreateEditPlans\n            initialValues={editPlanData}\n            type=\"edit\"\n            onSuccess={() => {\n              setEditModal(false);\n              refetch();\n            }}\n          />\n        </MainModal>\n\n        {/* DELETE PLAN MODAL */}\n        <DeleteOrDisable\n          open={deleteModal}\n          setOpen={setdeleteModal}\n          title=\"Delete Plan\"\n          onConfirm={onConfirmDelPlan}\n          confirmationMsg=\"delete plan\"\n          btnValue=\"Delete\"\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default PlansTable;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/UserTypes.js",["1219","1220","1221","1222","1223","1224","1225","1226","1227","1228","1229","1230"],"import React, { useState, useEffect } from \"react\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { partnersHeadCells2 } from \"components/Utilities/tableHeaders\";\n\nimport { NoData } from \"components/layouts\";\nimport { Formik, Form } from \"formik\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport * as Yup from \"yup\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport {\n  Grid,\n  TableRow,\n  Button,\n  Avatar,\n  Typography,\n  TableCell,\n  Checkbox,\n} from \"@mui/material\";\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\nimport { EnhancedTable, EmptyTable } from \"components/layouts\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useSelector } from \"react-redux\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { isSelected } from \"helpers/isSelected\";\nimport EditIcon from \"@mui/icons-material/Edit\";\n// import AddIcon from \"@mui/icons-material/Add\";\nimport { UserTypeModal } from \"components/modals/UserTypeModal\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport DeleteOrDisable from \"components/modals/DeleteOrDisable\";\nimport { getUserTypes } from \"components/graphQL/useQuery\";\nimport { deleteUserType } from \"components/graphQL/Mutation\";\nimport { defaultPageInfo } from \"helpers/mockData\";\nimport {\n  changeTableLimit,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport TableLayout from \"components/layouts/TableLayout\";\nimport { Link } from \"react-router-dom\";\nconst useStyles = makeStyles((theme) => ({\n  FormLabel: {\n    fontSize: \"1.6rem\",\n    color: theme.palette.common.dark,\n  },\n  link: {\n    textDecoration: \"none\",\n  },\n  title: {\n    fontSize: \"clamp(1rem, 2vw, 1.2rem)\",\n    color: theme.palette.common.black,\n    \"&:hover\": {\n      textDecoration: \"underline\",\n    },\n  },\n  btn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      width: \"100%\",\n    },\n  },\n  button: {\n    \"&.MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"1rem\",\n      maxWidth: \"10rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.2rem\",\n      },\n\n      \"& .MuiButton-endIcon\": {\n        marginLeft: \".3rem\",\n        marginTop: \"-.2rem\",\n      },\n    },\n  },\n\n  tableCell: {\n    \"&.MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.6rem !important\",\n      height: \"3rem\",\n      borderRadius: \"1.3rem\",\n    },\n  },\n  \"&.MuiButton-root\": {\n    ...theme.typography.btn,\n    background: theme.palette.common.black,\n    width: \"100%\",\n  },\n  tableBtn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      height: \"3rem\",\n      fontSize: \"1.25rem\",\n      borderRadius: \"2rem\",\n      boxShadow: \"none\",\n\n      \"&:hover\": {\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n          color: \"#fff\",\n        },\n      },\n\n      \"&:active\": {\n        boxShadow: \"none\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.5rem\",\n      },\n    },\n  },\n  redBtn: {\n    \"&.MuiButton-root\": {\n      background: theme.palette.common.lightRed,\n      color: theme.palette.common.red,\n\n      \"&:hover\": {\n        background: theme.palette.error.light,\n        color: \"#fff\",\n      },\n    },\n  },\n  greenBtn: {\n    \"&.MuiButton-root\": {\n      background: theme.palette.common.lightGreen,\n      color: theme.palette.common.green,\n\n      \"&:hover\": {\n        background: theme.palette.success.light,\n        color: \"#fff\",\n      },\n    },\n  },\n\n  checkbox: {\n    \"& .MuiSvgIcon-root\": {\n      fontSize: 28,\n    },\n    \"&.Mui-checked\": {\n      color: \"green !important\",\n    },\n  },\n}));\n\nconst UserTypes = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n  const [deleteUser] = useMutation(deleteUserType);\n  // const handleDialogOpen = () => {\n  //   setIsOpen(true);\n  // };\n  const handleDeleteOpenDialog = (id) => {\n    setId(id);\n    setdeleteModal(true);\n  };\n  const onConfirm = async () => {\n    try {\n      await deleteUser({\n        variables: { id },\n        refetchQueries: [{ query: getUserTypes }],\n      });\n    } catch (error) {\n      console.error(error.message);\n    }\n  };\n\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\n  const [id, setId] = useState(null);\n  const [deleteModal, setdeleteModal] = useState(false);\n  const [singleData, setSingleData] = useState();\n  const [fetchUserTypes, { loading, data, error /*refetch*/ }] =\n    useLazyQuery(getUserTypes);\n  console.log(data);\n  useEffect(() => {\n    fetchUserTypes({\n      variables: {\n        first: pageInfo?.limit,\n      },\n    });\n  }, [fetchUserTypes, pageInfo]);\n\n  // const onChange = async (e) => {\n  //   setSearchHcp(e);\n  //   if (e == \"\") {\n  //     refetch();\n  //   } else refetch({ recipient: e });\n  // };\n  const [userType, setUsertypes] = useState([]);\n\n  useEffect(() => {\n    if (data) {\n      setPageInfo(data.getUserTypes.pageInfo);\n      setUsertypes(data.getUserTypes.userType);\n    }\n  }, [data]);\n  const { rowsPerPage, selectedRows, page } = useSelector(\n    (state) => state.tables\n  );\n  const { setSelectedRows } = useActions();\n  const initialValues = {\n    name: \"\",\n    type: \"\",\n    description: \"\",\n  };\n\n  // const [searchHcp, setSearchHcp] = useState(\"\");\n  const [isOpens, setIsOpens] = useState(false);\n  const handleDialogCloses = () => setIsOpens(false);\n  const [editId, setEditId] = useState(null);\n  const [isOpen, setIsOpen] = useState(false);\n  const handleEditCloseDialog = () => {\n    setEdit(false);\n  };\n  const [alert, setAlert] = useState(null);\n  const handleDialogOpens1 = () => setIsOpens(true);\n  const initialValues1 = {\n    name: \"\",\n    userTypeId: \"\",\n  };\n  const onSubmit1 = async (values) => {\n    // const { name, userTypeId } = values;\n    // await provider.refetch({\n    //   name,\n    //   userTypeId,\n    // });\n    handleDialogCloses();\n  };\n  const validationSchema1 = Yup.object({\n    name: Yup.string(\"Enter your hospital\"),\n    userTypeId: Yup.string(\"ENter your userTypeId\"),\n  });\n  const [edit, setEdit] = useState(false);\n  const handleDialogClose = async () => {\n    setIsOpen(false);\n    setEditId(null);\n    setSingleData();\n  };\n  const handleEditOpenDialog = (id) => {\n    setEdit(true);\n    setEditId(id);\n  };\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error} />;\n  return (\n    <>\n      <Grid\n        container\n        direction=\"column\"\n        gap={2}\n        flexWrap=\"nowrap\"\n        height=\"100%\"\n      >\n        <Grid\n          item\n          gap={{ sm: 4, xs: 2 }}\n          container\n          direction={{ sm: \"row\", xs: \"column\" }}\n        >\n          <Grid\n            item\n            flex={{ sm: 1, xs: 1 }}\n            container\n            alignItems=\"center\"\n            flexWrap=\"nowrap\"\n            gap={1}\n            justifyContent=\"space-between\"\n          >\n            <Grid item></Grid>\n            {/* <Grid item>\n              <CustomButton\n                endIcon={<AddIcon />}\n                onClick={handleDialogOpens1}\n                title=\"Add new User Types\"\n                type={buttonType}\n              />\n            </Grid> */}\n          </Grid>\n        </Grid>\n        <TableLayout>\n          {userType.length > 0 ? (\n            <Grid item container height=\"100%\" direction=\"column\">\n              <EnhancedTable\n                headCells={partnersHeadCells2}\n                rows={userType}\n                paginationLabel=\"Patients per page\"\n                hasCheckbox={true}\n                changeLimit={async (e) => {\n                  changeTableLimit(fetchUserTypes, { first: e });\n                }}\n                dataPageInfo={pageInfo}\n                handlePagination={async (page) => {\n                  await handlePageChange(fetchUserTypes, page, pageInfo, {});\n                }}\n              >\n                {userType\n                  // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                  .map((row, index) => {\n                    const { _id, icon, name, providerCount, provider } = row;\n                    const isItemSelected = isSelected(_id, selectedRows);\n                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                    return (\n                      <TableRow\n                        hover\n                        role=\"checkbox\"\n                        aria-checked={isItemSelected}\n                        tabIndex={-1}\n                        key={_id}\n                        selected={isItemSelected}\n                      >\n                        <TableCell padding=\"checkbox\">\n                          <Checkbox\n                            onClick={() =>\n                              handleSelectedRows(\n                                _id,\n                                selectedRows,\n                                setSelectedRows\n                              )\n                            }\n                            color=\"primary\"\n                            checked={isItemSelected}\n                            inputProps={{\n                              \"aria-labelledby\": labelId,\n                            }}\n                          />\n                        </TableCell>\n                        <TableCell align=\"left\" className={classes.tableCell}>\n                          <div\n                            style={{\n                              height: \"100%\",\n                              display: \"flex\",\n                              alignItems: \"center\",\n                            }}\n                          >\n                            <span style={{ marginRight: \"1rem\" }}>\n                              <Avatar\n                                src={icon}\n                                sx={{ width: 24, height: 24 }}\n                              />\n                            </span>\n                            <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell align=\"left\" className={classes.tableCell}>\n                          <Link\n                            to={`/user-type/${_id}`}\n                            className={classes.link}\n                          >\n                            <Typography\n                              variant=\"h3\"\n                              classes={{ root: classes.title }}\n                            >\n                              {providerCount ? providerCount : \"NA\"}\n                            </Typography>\n                          </Link>\n                        </TableCell>\n                        <TableCell align=\"left\" className={classes.tableCell}>\n                          <div\n                            style={{\n                              height: \"100%\",\n                              display: \"flex\",\n                              alignItems: \"center\",\n                              justifyContent: \"space-around\",\n                            }}\n                          >\n                            <Button\n                              variant=\"contained\"\n                              disableRipple\n                              className={`${classes.tableBtn} ${classes.greenBtn}`}\n                              onClick={() => handleEditOpenDialog(_id)}\n                              endIcon={<EditIcon color=\"success\" />}\n                            >\n                              Edit\n                            </Button>\n                            {/* <Button\n                              variant=\"contained\"\n                              disableRipple\n                              className={`${classes.tableBtn} ${classes.redBtn}`}\n                              onClick={() => handleDeleteOpenDialog(_id)}\n                              endIcon={<DeleteIcon color=\"error\" />}\n                            >\n                              Delete UserType\n                            </Button> */}\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n              </EnhancedTable>\n            </Grid>\n          ) : (\n            <EmptyTable\n              headCells={partnersHeadCells2}\n              paginationLabel=\"Providers  per page\"\n            />\n          )}\n        </TableLayout>\n      </Grid>\n      <Modals\n        isOpen={isOpen}\n        title=\"Add new User Types\"\n        rowSpacing={5}\n        handleClose={handleDialogClose}\n      >\n        <UserTypeModal\n          handleDialogClose={handleDialogClose}\n          type=\"add\"\n          setAlert={setAlert}\n          editId={editId}\n          initialValues={initialValues}\n        />\n      </Modals>\n      {/* edit Modal */}\n      <Modals\n        isOpen={edit}\n        title=\"Edit User Type\"\n        rowSpacing={5}\n        handleClose={handleEditCloseDialog}\n      >\n        <UserTypeModal\n          handleDialogClose={handleEditCloseDialog}\n          type=\"edit\"\n          editId={editId}\n          setAlert={setAlert}\n          initialValues={initialValues}\n          setSingleData={setSingleData}\n          singleData={singleData}\n        />\n      </Modals>\n\n      <DeleteOrDisable\n        open={deleteModal}\n        setOpen={setdeleteModal}\n        title=\"Delete UserTypes\"\n        onConfirm={onConfirm}\n        confirmationMsg=\"delete usertypes\"\n        btnValue=\"Delete\"\n      />\n\n      <Modals\n        isOpen={isOpens}\n        title=\"Filter\"\n        rowSpacing={5}\n        handleClose={handleDialogCloses}\n      >\n        <Formik\n          initialValues={initialValues1}\n          onSubmit={onSubmit1}\n          validationSchema={validationSchema1}\n          validateOnChange={false}\n          validateOnMount={false}\n          validateOnBlur={false}\n        >\n          {({ isSubmitting, isValid, dirty }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid item container direction=\"column\" rowGap={4}>\n                  <Grid item container>\n                    <FormikControl\n                      control=\"input\"\n                      name=\"name\"\n                      label=\"Hospital Name\"\n                      placeholder=\"Enter Hospital Name\"\n                    />\n                  </Grid>\n\n                  <Grid item container>\n                    <FormikControl\n                      control=\"input\"\n                      name=\"userTypeId\"\n                      label=\"User Type\"\n                      placeholder=\"Enter User Type\"\n                    />\n                  </Grid>\n\n                  <Grid item>\n                    <CustomButton\n                      title=\"Apply Filter\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n    </>\n  );\n};\n\nexport default UserTypes;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/DoctorEarning.js",["1231","1232","1233"],"import React, { useEffect, useState } from \"react\";\nimport { NoData, EmptyTable } from \"components/layouts\";\nimport {\n  Grid,\n  Typography,\n  Checkbox,\n  TableRow,\n  TableCell,\n  Avatar,\n} from \"@mui/material\";\nimport { timeMoment, dateMoment } from \"components/Utilities/Time\";\nimport { Loader } from \"components/Utilities\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { getMyEarnings } from \"components/graphQL/useQuery\";\nimport { EnhancedTable } from \"components/layouts\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { payoutHeaders } from \"components/Utilities/tableHeaders\";\nimport useAlert from \"hooks/useAlert\";\nimport { useSelector } from \"react-redux\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { isSelected } from \"helpers/isSelected\";\n// import Filter from \"components/Forms/Filters\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport { useParams } from \"react-router-dom\";\nimport { defaultPageInfo } from \"helpers/mockData\";\nimport {\n  changeTableLimit,\n  fetchMoreData,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\n\nconst useStyles = makeStyles((theme) => ({\n  iconWrapper: {\n    width: 20,\n    height: 20,\n    borderRadius: \"50%\",\n    display: \"grid\",\n    placeContent: \"center\",\n    marginLeft: \"1rem\",\n    background: theme.palette.common.lightGreen,\n  },\n  button: {\n    \"&.css-1zf5oc-MuiButtonBase-root-MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"1rem\",\n      maxWidth: \"10rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .css-9tj150-MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.2rem\",\n      },\n\n      \"& .css-9tj150-MuiButton-endIcon\": {\n        marginLeft: \".3rem\",\n        marginTop: \"-.2rem\",\n      },\n    },\n  },\n\n  tableCell: {\n    \"&.css-1jilxo7-MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.6rem !important\",\n      height: \"3rem\",\n      borderRadius: \"1.3rem\",\n    },\n  },\n}));\n\nconst DoctorEarning = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { hcpId } = useParams();\n  const { displayAlert } = useAlert();\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n  const [payout, setPayout] = useState([]);\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\n\n  // const [statusFilterValue, setStatusFilterValue] = useState(\"\");\n  const [fetchPayout, { loading, error }] = useLazyQuery(getMyEarnings);\n  // refetch, variables\n  useEffect(() => {\n    try {\n      fetchPayout({\n        variables: { first: pageInfo?.limit, doctor: hcpId },\n      }).then(({ data }) => {\n        if (!data) throw Error(\"Couldn't fetch doctors payout data\");\n        setPageInfo(data?.getMyEarnings?.pageInfo);\n        setPayout(data?.getMyEarnings?.data);\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }, [fetchPayout, pageInfo?.limit, hcpId]);\n\n  // const onFilterStatusChange = async (value) => {\n  //   try {\n  //     deleteVar(variables);\n  //     setStatusFilterValue(value);\n  //     const filterVariables = { status: value };\n\n  //     filterData(filterVariables, {\n  //       fetchData: fetchPayout,\n  //       refetch: refetch,\n  //       variables: variables,\n  //     })\n  //       .then((data) => {\n  //         setPayout(data?.getMyEarnings?.data || []);\n  //         setPageInfo(data?.getMyEarnings?.pageInfo || {});\n  //       })\n  //       .catch(() => {\n  //         refresh(setStatusFilterValue, \"\");\n  //       });\n  //   } catch (error) {\n  //     console.error(error);\n  //     refresh(setStatusFilterValue, \"\");\n  //   }\n  // };\n\n  // const refresh = async (setFilterValue, defaultVal) => {\n  //   displayAlert(\"error\", `Something went wrong while filtering. Try again.`);\n  //   setFilterValue(defaultVal);\n  //   deleteVar(variables);\n  //   refetch()\n  //     .then(({ data }) => {\n  //       setPayout(data?.getMyEarnings?.data || []);\n  //       setPageInfo(data?.getMyEarnings?.pageInfo || {});\n  //     })\n  //     .catch((error) => {\n  //       console.error(error);\n  //       displayAlert(\"error\", `Failed to get patients data, Try again`);\n  //     });\n  // };\n\n  const setTableData = async (response, errMsg) => {\n    const data = response?.data;\n    try {\n      if (data) {\n        setPageInfo(data?.getMyEarnings?.pageInfo || defaultPageInfo);\n        setPayout(data?.getMyEarnings?.data || []);\n      }\n    } catch (error) {\n      console.error(error);\n      displayAlert(\"error\", errMsg);\n    }\n  };\n\n  if (error) return <NoData error={error} />;\n  if (loading) return <Loader />;\n  return (\n    <Grid container direction=\"column\" rowSpacing={2}>\n      <>\n        <Grid\n          item\n          container\n          justifyContent=\"space-between\"\n          style={{ paddingBottom: \"3rem\" }}\n        >\n          <Grid item container spacing={3} alignItems=\"center\">\n            <Grid item flex={1}>\n              <Typography noWrap variant=\"h1\" color=\"#2D2F39\">\n                Doctors Earnings Table\n              </Typography>\n            </Grid>\n          </Grid>\n        </Grid>\n        {payout.length > 0 ? (\n          <Grid item container>\n            <EnhancedTable\n              headCells={payoutHeaders}\n              rows={payout}\n              paginationLabel=\"Earning per page\"\n              hasCheckbox={true}\n              changeLimit={async (e) => {\n                const res = await changeTableLimit(fetchPayout, {\n                  first: e,\n                  doctor: hcpId,\n                });\n                await setTableData(res, \"Failed to change table limit.\");\n              }}\n              dataPageInfo={pageInfo}\n              handlePagination={async (page) => {\n                const res = await handlePageChange(\n                  fetchPayout,\n                  page,\n                  pageInfo,\n                  { doctor: hcpId }\n                );\n                await setTableData(res, \"Failed to change table page.\");\n              }}\n              fetchData={fetchPayout}\n              handleChangePage={fetchMoreData}\n            >\n              {payout.map((row, index) => {\n                const { balance, createdAt, _id, doctorData } = row;\n                const isItemSelected = isSelected(_id, selectedRows);\n                const labelId = `enhanced-table-checkbox-${index}`;\n\n                return (\n                  <TableRow\n                    hover\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={_id}\n                    selected={isItemSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        onClick={() =>\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\n                        }\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          \"aria-labelledby\": labelId,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell\n                      id={labelId}\n                      scope=\"row\"\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ color: theme.palette.common.black }}\n                    >\n                      {dateMoment(createdAt)}\n                    </TableCell>\n                    <TableCell\n                      id={labelId}\n                      scope=\"row\"\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ color: theme.palette.common.black }}\n                    >\n                      {timeMoment(createdAt)}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      {doctorData ? (\n                        <div\n                          style={{\n                            height: \"100%\",\n                            display: \"flex\",\n                            alignItems: \"left\",\n                          }}\n                        >\n                          <span style={{ marginRight: \"1rem\" }}>\n                            <Avatar\n                              alt={`Display Photo of ${doctorData?.firstName}`}\n                              src={\n                                doctorData ? doctorData?.picture : displayPhoto\n                              }\n                              sx={{ width: 24, height: 24 }}\n                            />\n                          </span>\n                          <span style={{ fontSize: \"1.25rem\" }}>\n                            {doctorData\n                              ? `${doctorData?.lastName} ${doctorData?.lastName}`\n                              : \"No Value\"}\n                          </span>\n                        </div>\n                      ) : (\n                        \"No Name\"\n                      )}\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ color: theme.palette.common.red }}\n                    >\n                      {balance}\n                    </TableCell>\n                    {/* <TableCell align=\"left\" className={classes.tableCell}>\n                      <Chip\n                        label={status ? status : \"No Value\"}\n                        className={classes.badge}\n                        style={{\n                          background:\n                            status === \"Success\"\n                              ? theme.palette.common.lightGreen\n                              : status === \"Failed\"\n                              ? theme.palette.common.lightGreen\n                              : theme.palette.common.lightRed,\n                          color:\n                            status === \"Success\"\n                              ? theme.palette.common.green\n                              : status === \"Failed\"\n                              ? theme.palette.common.danger\n                              : theme.palette.common.red,\n                        }}\n                      />\n                    </TableCell> */}\n                  </TableRow>\n                );\n              })}\n            </EnhancedTable>\n          </Grid>\n        ) : (\n          <EmptyTable\n            headCells={payoutHeaders}\n            paginationLabel=\"Earnings  per page\"\n          />\n        )}\n      </>\n    </Grid>\n  );\n};\n\nexport default DoctorEarning;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/SinglePatient.js",["1234","1235"],"import React, { useEffect, useState, memo, createElement } from \"react\";\nimport { Grid, Typography, Avatar } from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\nimport PersonRemoveIcon from \"@mui/icons-material/PersonRemove\";\n// import TrendingUpIcon from \"@mui/icons-material/TrendingUp\";\nimport { Card, CustomButton, Loader } from \"components/Utilities\";\nimport DisablePatient from \"components/modals/DeleteOrDisable\";\nimport { makeStyles } from \"@mui/styles\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport { NoData } from \"components/layouts\";\nimport { findProfile } from \"components/graphQL/useQuery\";\nimport { ReactComponent as ConsultationIcon } from \"assets/images/consultation.svg\";\nimport { ReactComponent as UserIcon } from \"assets/images/user.svg\";\nimport { ReactComponent as PrescriptionIcon } from \"assets/images/prescription.svg\";\nimport AssignmentIcon from \"@mui/icons-material/Assignment\";\nimport { Link, useParams, useHistory } from \"react-router-dom\";\n// import ReferPatient from \"components/modals/ReferPatient\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { getPatients } from \"components/graphQL/useQuery\";\nimport { deleteProfile } from \"components/graphQL/Mutation\";\n\nconst useStyles = makeStyles((theme) => ({\n  gridContainer: {\n    paddingBottom: \"10rem\",\n  },\n\n  gridsWrapper: {\n    \"@media(max-width:600px)\": {\n      \"&.MuiGrid-root\": {\n        flexDirection: \"column\",\n        rowGap: \"1.5rem\",\n        alignItems: \"center\",\n        \"& .detailsContainer\": {\n          justifyContent: \"space-around\",\n        },\n      },\n    },\n  },\n  parentGrid: {\n    textDecoration: \"none\",\n    color: theme.palette.primary.main,\n\n    \"& > .MuiGrid-root.MuiGrid-container\": {\n      backgroundColor: \"#ffffff\",\n    },\n  },\n\n  icon: {\n    \"&.css-1o5jd4y-MuiSvgIcon-root\": {\n      fontSize: \"4rem\",\n    },\n  },\n  \"@media(max-width:600px)\": {\n    \"&.MuiGrid-root\": {\n      flexDirection: \"column\",\n      rowGap: \"1.5rem\",\n    },\n  },\n  container: {\n    \"&.MuiGrid-root\": {\n      paddingTop: \"5rem\",\n      flexWrap: \"wrap\",\n      \"@media(max-width:600px)\": {\n        \"&\": {\n          padding: 0,\n          paddingTop: \"1rem\",\n          // flexDirection: \"column\",\n          rowGap: \"1.5rem\",\n        },\n      },\n    },\n  },\n}));\nconst SinglePatient = () => {\n  const history = useHistory();\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const { patientId } = useParams();\n  const [disableUser] = useMutation(deleteProfile);\n  const onConfirm = async () => {\n    try {\n      await disableUser({\n        variables: { id: patientId },\n        refetchQueries: [{ query: getPatients }],\n      });\n\n      history.push(\"/patients\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const cards2 = [\n    {\n      id: 1,\n      title: \"Patient Profile\",\n      background: theme.palette.common.lightRed,\n      path: \"profile\",\n      icon: UserIcon,\n      fill: theme.palette.common.red,\n    },\n    {\n      id: 4,\n      title: \"Medical Records\",\n      background: theme.palette.common.lightGreen,\n      path: \"records\",\n      icon: AssignmentIcon,\n      fill: theme.palette.common.green,\n    },\n    {\n      id: 5,\n      title: \"Consultations\",\n      background: theme.palette.common.lightRed,\n      path: \"consultations\",\n      icon: UserIcon,\n      fill: theme.palette.common.red,\n    },\n    {\n      id: 3,\n      title: \"Prescriptions\",\n      background: theme.palette.common.lightRed,\n      path: \"prescriptions\",\n      icon: PrescriptionIcon,\n      fill: theme.palette.common.red,\n    },\n    {\n      id: 2,\n      title: \"Appointments\",\n      background: theme.palette.common.lightGreen,\n      path: \"appointments\",\n      icon: ConsultationIcon,\n      fill: theme.palette.common.green,\n    },\n    /* {\n      id: 6,\n      title: \"Medications\",\n      background: theme.palette.common.lightGreen,\n      path: \"medications\",\n      icon: UserIcon,\n      fill: theme.palette.common.green,\n    }, */\n  ];\n\n  const trasparentButton = {\n    background: \"transparent\",\n    hover: theme.palette.common.danger,\n    active: \"#f4f4f4\",\n  };\n\n  const [patientProfile, setPatientProfile] = useState(\"\");\n  const { loading, error, data } = useQuery(findProfile, {\n    variables: {\n      id: patientId,\n    },\n    fetchPolicy: \"cache-and-network\",\n    nextFetchPolicy: \"cache-only\",\n  });\n\n  useEffect(() => {\n    if (data) {\n      localStorage.setItem(\"userDociId\", data.profile.dociId);\n      setPatientProfile(data.profile);\n    }\n  }, [data, patientId]);\n\n  const [openDisablePatient, setOpenDisablePatient] = useState(false);\n\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error} />;\n  else {\n    return (\n      <Grid\n        container\n        direction=\"column\"\n        className={classes.gridContainer}\n        gap={2}\n      >\n        <Grid\n          item\n          justifyContent=\"space-between\"\n          alignItems=\"center\"\n          container\n          p={2}\n          className={classes.gridsWrapper}\n        >\n          <Grid\n            item\n            alignItems=\"center\"\n            container\n            gap={2}\n            className=\"detailsContainer\"\n            sx={{ flex: 1 }}\n          >\n            <Grid item>\n              <Avatar\n                alt={patientProfile.firstName}\n                src={patientProfile.image ? patientProfile.image : displayPhoto}\n                sx={{ width: 50, height: 50 }}\n              />\n            </Grid>\n\n            <Typography variant=\"h2\">\n              {patientProfile.firstName} {patientProfile.lastName}\n            </Typography>\n          </Grid>\n          <Grid item>\n            <CustomButton\n              endIcon={<PersonRemoveIcon />}\n              title=\"Disable Patient\"\n              type={trasparentButton}\n              textColor={theme.palette.common.danger}\n              textColorOnHover=\"#ffffff\"\n              onClick={() => setOpenDisablePatient(true)}\n            />\n          </Grid>\n        </Grid>\n        <Grid item>\n          <Grid\n            container\n            justifyContent=\"center\"\n            p={2}\n            flexWrap=\"wrap\"\n            // sx={{ background: \"yellow\" }}\n            columnSpacing={{ md: 6, sm: 4, xs: 4 }}\n            rowSpacing={{ md: 6, sm: 4, xs: 4 }}\n            // spacing={2}\n          >\n            {cards2.map((card) => (\n              <Grid\n                key={card.id}\n                item\n                xs={10}\n                sm={6}\n                md={4}\n                className={classes.parentGrid}\n                component={Link}\n                // gap={3}\n                p={0}\n                to={`/patients/${patientId}/${card.path}`}\n              >\n                <Card title={card.title} header=\"h4\">\n                  {createElement(card.icon, {\n                    fill: card.fill,\n                    color: \"success\",\n                    style: { fontSize: \"clamp(2.5rem, 3vw,4rem)\" },\n                  })}\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n        <DisablePatient\n          open={openDisablePatient}\n          setOpen={setOpenDisablePatient}\n          title=\"Delete Patient\"\n          btnValue=\"delete\"\n          onConfirm={onConfirm}\n          confirmationMsg=\"disable Patient\"\n        />\n      </Grid>\n    );\n  }\n};\n\nexport default memo(SinglePatient);\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Settings.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/SingleHCP.js",["1236"],"import React, { useState, useEffect, createElement } from \"react\";\nimport { Grid, Typography, Avatar } from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { doctor, getDoctorsProfile } from \"components/graphQL/useQuery\";\nimport PersonRemoveIcon from \"@mui/icons-material/PersonRemove\";\nimport PaymentsIcon from \"@mui/icons-material/Payments\";\nimport { Card, CustomButton, Loader } from \"components/Utilities\";\nimport DisablePatient from \"components/modals/DeleteOrDisable\";\nimport { makeStyles } from \"@mui/styles\";\nimport { ReactComponent as ConsultationIcon } from \"assets/images/consultation.svg\";\nimport { ReactComponent as UserIcon } from \"assets/images/user.svg\";\nimport { ReactComponent as CalendarIcon } from \"assets/images/calendar.svg\";\nimport { Link, useParams, useHistory } from \"react-router-dom\";\nimport { deleteDoctor } from \"components/graphQL/Mutation\";\n//\n\nconst useStyles = makeStyles((theme) => ({\n  gridContainer: {\n    paddingBottom: \"10rem\",\n  },\n\n  gridsWrapper: {\n    \"@media(max-width:600px)\": {\n      \"&.MuiGrid-root\": {\n        flexDirection: \"column\",\n        rowGap: \"1.5rem\",\n        alignItems: \"center\",\n        \"& .detailsContainer\": {\n          justifyContent: \"space-around\",\n        },\n      },\n    },\n  },\n  parentGrid: {\n    textDecoration: \"none\",\n    color: theme.palette.primary.main,\n\n    \"& > .MuiGrid-root.MuiGrid-container\": {\n      backgroundColor: \"#ffffff\",\n    },\n  },\n\n  icon: {\n    \"&.css-1o5jd4y-MuiSvgIcon-root\": {\n      fontSize: \"4rem\",\n    },\n  },\n  \"@media(max-width:600px)\": {\n    \"&.MuiGrid-root\": {\n      flexDirection: \"column\",\n      rowGap: \"1.5rem\",\n    },\n  },\n  container: {\n    \"&.MuiGrid-root\": {\n      paddingTop: \"5rem\",\n      flexWrap: \"wrap\",\n      \"@media(max-width:600px)\": {\n        \"&\": {\n          padding: 0,\n          paddingTop: \"1rem\",\n          // flexDirection: \"column\",\n          rowGap: \"1.5rem\",\n        },\n      },\n    },\n  },\n}));\nconst SingleHCP = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const { hcpId } = useParams();\n  const history = useHistory();\n  const [disableUser] = useMutation(deleteDoctor);\n  const [doctorProfile, setDoctorProfile] = useState(\"\");\n  const [openDisableDoctor, setOpenDisableDoctor] = useState(false);\n  const profile = useQuery(doctor, {\n    variables: {\n      id: hcpId,\n    },\n  });\n  const onConfirm = async () => {\n    try {\n      await disableUser({\n        variables: { id: hcpId },\n        refetchQueries: [{ query: getDoctorsProfile }],\n      });\n      history.push(\"/hcps\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  useEffect(() => {\n    if (profile.data) {\n      setDoctorProfile(profile.data.doctorProfile);\n    }\n  }, [profile.data, hcpId]);\n\n  const cards2 = [\n    {\n      id: 1,\n      title: \"Doctor Profile\",\n      background: theme.palette.common.lightRed,\n      path: \"profile\",\n      icon: UserIcon,\n      fill: theme.palette.common.red,\n    },\n    {\n      id: 2,\n      title: \"Availability\",\n      background: theme.palette.common.lightGreen,\n      path: \"availability\",\n      icon: ConsultationIcon,\n      fill: theme.palette.common.green,\n    },\n    {\n      id: 3,\n      title: \"Consultations\",\n      background: theme.palette.common.lightRed,\n      path: \"consultations\",\n      icon: ConsultationIcon,\n      fill: theme.palette.common.red,\n    },\n    {\n      id: 4,\n      title: \"Earnings\",\n      background: theme.palette.common.lightGreen,\n      path: \"earnings\",\n      icon: PaymentsIcon,\n      fill: theme.palette.common.green,\n    },\n    {\n      id: 5,\n      title: \"Patients\",\n      background: theme.palette.common.lightRed,\n      path: \"doctor-patients\",\n      icon: UserIcon,\n      fill: theme.palette.common.red,\n    },\n    {\n      id: 6,\n      title: \"Appointments\",\n      background: theme.palette.common.lightGreen,\n      path: \"appointments\",\n      icon: CalendarIcon,\n      fill: theme.palette.common.green,\n    },\n  ];\n\n  const trasparentButton = {\n    background: \"transparent\",\n    hover: theme.palette.common.danger,\n    active: \"#f4f4f4\",\n  };\n\n  if (profile.loading) return <Loader />;\n  return (\n    <>\n      <Grid\n        container\n        direction=\"column\"\n        gap={2}\n        rowSpacing={2}\n        className={classes.gridContainer}\n      >\n        <Grid\n          item\n          container\n          alignItems=\"center\"\n          justifyContent=\"space-between\"\n          p={2}\n          className={classes.gridsWrapper}\n        >\n          {/* Display photo and profile name grid */}\n          <Grid\n            item\n            alignItems=\"center\"\n            container\n            gap={2}\n            className=\"detailsContainer\"\n            sx={{ flex: 1 }}\n          >\n            <Grid item>\n              <Avatar\n                alt={doctorProfile?.firstName}\n                src={doctorProfile?.picture}\n                sx={{ width: 50, height: 50 }}\n              />\n            </Grid>\n\n            <Typography variant=\"h2\">{`${doctorProfile.firstName} ${doctorProfile.lastName}`}</Typography>\n          </Grid>\n          {/* Action Buttons grid */}\n\n          <Grid item>\n            <CustomButton\n              endIcon={<PersonRemoveIcon />}\n              title=\"Disable Doctor\"\n              onClick={() => setOpenDisableDoctor(true)}\n              type={trasparentButton}\n              textColor={theme.palette.common.danger}\n              textColorOnHover=\"#ffffff\"\n            />\n          </Grid>\n        </Grid>\n\n        {/* BOTTOM CARDS SECTION */}\n        <Grid item>\n          <Grid\n            container\n            justifyContent=\"center\"\n            p={2}\n            flexWrap=\"wrap\"\n            // sx={{ background: \"yellow\" }}\n            columnSpacing={{ md: 6, sm: 4, xs: 4 }}\n            rowSpacing={{ md: 6, sm: 4, xs: 4 }}\n            // spacing={2}\n          >\n            {cards2.map((card) => (\n              <Grid\n                key={card.id}\n                item\n                xs={10}\n                sm={6}\n                md={4}\n                className={classes.parentGrid}\n                component={Link}\n                to={`/hcps/${hcpId}/${card.path}`}\n              >\n                <Card title={card.title} header=\"h4\">\n                  {createElement(card.icon, {\n                    fill: card.fill,\n                    color:\n                      card.id === 4 || card.id === 6 ? \"success\" : undefined,\n                    style: { fontSize: \"clamp(2.5rem, 3vw,4rem)\" },\n                  })}\n                </Card>\n              </Grid>\n            ))}\n          </Grid>\n        </Grid>\n      </Grid>\n\n      <DisablePatient\n        open={openDisableDoctor}\n        setOpen={setOpenDisableDoctor}\n        title=\"Delete Doctor\"\n        btnValue=\"delete\"\n        confirmationMsg=\"delete Doctor\"\n        onConfirm={onConfirm}\n      />\n    </>\n  );\n};\n\nexport default SingleHCP;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ReferralTab.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Permission.js",["1237","1238","1239"],"import React, { useState, useEffect, useCallback } from \"react\";\nimport { Loader, CustomButton, Modals } from \"components/Utilities\";\nimport { Formik, Form } from \"formik\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport * as Yup from \"yup\";\nimport {\n  Grid,\n  Button,\n  TableRow,\n  TableCell,\n  Checkbox,\n  Alert,\n  Chip,\n} from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { EnhancedTable } from \"components/layouts\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { PermissionHeader } from \"components/Utilities/tableHeaders\";\nimport { useSelector } from \"react-redux\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { isSelected } from \"helpers/isSelected\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport { PermissionModal, DeleteOrDisable } from \"components/modals\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { getPermissions } from \"components/graphQL/useQuery\";\nimport { useMutation } from \"@apollo/client\";\nimport { DELETE_PERMISSION } from \"components/graphQL/Mutation\";\nimport { NoData, EmptyTable } from \"components/layouts\";\nimport { defaultPageInfo } from \"helpers/mockData\";\nimport {\n  changeTableLimit,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport TableLayout from \"components/layouts/TableLayout\";\nconst useStyles = makeStyles((theme) => ({\n  flexContainer: {\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    margin: \"auto\",\n    width: \"100%\",\n    paddingBottom: \"2rem \",\n  },\n  button: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      width: \"100%\",\n    },\n  },\n  FormLabel: {\n    \"&.MuiFormLabel-root\": {\n      ...theme.typography.FormLabel,\n    },\n  },\n\n  tableCell: {\n    \"&.MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.6rem !important\",\n      height: \"3rem\",\n      borderRadius: \"1.3rem\",\n    },\n  },\n  tableBtn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      height: \"3rem\",\n      fontSize: \"1.25rem\",\n      borderRadius: \"2rem\",\n      boxShadow: \"none\",\n\n      \"&:hover\": {\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n          color: \"#fff\",\n        },\n      },\n\n      \"&:active\": {\n        boxShadow: \"none\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.5rem\",\n      },\n    },\n  },\n\n  redBtn: {\n    \"&.MuiButton-root\": {\n      background: theme.palette.common.lightRed,\n      color: theme.palette.common.red,\n\n      \"&:hover\": {\n        background: theme.palette.error.light,\n        color: \"#fff\",\n      },\n    },\n  },\n\n  greenBtn: {\n    \"&.MuiButton-root\": {\n      background: theme.palette.common.lightGreen,\n      color: theme.palette.common.green,\n\n      \"&:hover\": {\n        background: theme.palette.success.light,\n        color: \"#fff\",\n      },\n    },\n  },\n}));\n\nconst referralOptions = [\"Hello\", \"World\", \"Goodbye\", \"World\"];\nconst Permission = () => {\n  const [singlePermission, setSinglePermission] = useState();\n\n  const checkbox = [\n    { key: \"create\", value: \"create\" },\n    { key: \"update\", value: \"update\" },\n    { key: \"read\", value: \"read\" },\n    { key: \"delete\", value: \"delete\" },\n  ];\n\n  const initialValues = {\n    name: \"\",\n    // checkbox: [],\n    description: \"\",\n  };\n  const initialValues1 = {\n    name: \"\",\n    date: \"\",\n    category: \"\",\n  };\n\n  const validationSchema1 = Yup.object({\n    name: Yup.string(\"Enter your Permission\")\n      .trim()\n      .required(\"permission is required\"),\n    date: Yup.string(\"Select Date\").required(\"Date is required\"),\n    category: Yup.string(\"Select Category\")\n      .trim()\n      .required(\"Category is required\"),\n  });\n  const onSubmit1 = (values) => {\n    console.log(values);\n  };\n\n  const validationSchema = Yup.object({\n    // checkbox: Yup.array().min(1, \"Add atleast a permission\"),\n    name: Yup.string(\"Enter your Permission\").required(\n      \"permission is required\"\n    ),\n    description: Yup.string(\"Enter Description\").required(\n      \"Description is required\"\n    ),\n  });\n\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n  const [deleteModal, setdeleteModal] = useState(false);\n  const [isEdit, setIsEdit] = useState(false);\n  const [editId, setEditId] = useState(null);\n  const handleEditCloseDialog = useCallback(() => {\n    setIsEdit(false);\n    setSinglePermission(\"\");\n  }, []);\n  const [editDetails] = useState(null);\n  const [deleteId, setDeleteId] = useState(null);\n  const [isOpen, setIsOpen] = useState(false);\n  const handleDialogOpen = () => setIsOpen(true);\n  const [alert, setAlert] = useState(null);\n  const handleDeleteOpenDialog = (id) => {\n    setdeleteModal(true);\n    setDeleteId(id);\n  };\n  const handleEditOpenDialog = async (id) => {\n    setEditId(id);\n    setIsEdit(true);\n  };\n\n  const onConfirm = async () => {\n    try {\n      const { data } = await deletPlan({\n        variables: { id: deleteId },\n        refetchQueries: [{ query: getPermissions }],\n      });\n      setAlert({\n        message: data.deletePermission.message,\n        type: \"success\",\n      });\n      setTimeout(() => {\n        setAlert(null);\n      }, 5000);\n    } catch (error) {\n      setAlert({\n        message: \"Plan  not successfully deleted\",\n        type: \"danger\",\n      });\n      setTimeout(() => {\n        setAlert(null);\n      }, 5000);\n    }\n  };\n  const handleDialogClose = () => setIsOpen(false);\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n  };\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\n  const [fetchPermissions, { loading, data, error }] =\n    useLazyQuery(getPermissions);\n\n  useEffect(() => {\n    fetchPermissions({\n      variables: {\n        first: pageInfo?.limit,\n      },\n      notifyOnNetworkStatusChange: true,\n    });\n  }, [fetchPermissions, pageInfo]);\n\n  const [deletPlan] = useMutation(DELETE_PERMISSION);\n  const [permission, setPermission] = useState([]);\n\n  useEffect(() => {\n    if (data) {\n      setPermission(data.getPermissions.permission);\n      setPageInfo(data.getPermissions.pageInfo);\n    }\n  }, [permission, data]);\n\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error} />;\n  return (\n    <>\n      {alert && Object.keys(alert).length > 0 && (\n        <Alert\n          variant=\"filled\"\n          severity={alert.type}\n          sx={{ justifyContent: \"center\", width: \"70%\", margin: \"0 auto\" }}\n        >\n          {alert.message}\n        </Alert>\n      )}\n      <Grid container direction=\"column\">\n        <Grid\n          item\n          sm\n          container\n          justifyContent={\"flex-end\"}\n          sx={{ marginBottom: \"2rem\" }}\n        >\n          <Grid item>\n            <CustomButton\n              endIcon={<AddIcon />}\n              title=\"Add New Permission\"\n              type={buttonType}\n              onClick={handleDialogOpen}\n            />\n          </Grid>\n        </Grid>\n        <TableLayout>\n          {Permission.length > 0 ? (\n            <Grid item container>\n              <EnhancedTable\n                headCells={PermissionHeader}\n                rows={Permission}\n                paginationLabel=\"permission per page\"\n                hasCheckbox={true}\n                changeLimit={async (e) => {\n                  changeTableLimit(fetchPermissions, { first: e });\n                }}\n                dataPageInfo={pageInfo}\n                handlePagination={async (page) => {\n                  handlePageChange(fetchPermissions, page, pageInfo, {});\n                }}\n              >\n                {permission.map((row, index) => {\n                  const isItemSelected = isSelected(row._id, selectedRows);\n\n                  const labelId = `enhanced-table-checkbox-${index}`;\n                  const data = row.name.split(\":\")[0];\n                  const newPerm = row.description.split(\":\")[1];\n                  return (\n                    <TableRow\n                      hover\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={row._id}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          onClick={() =>\n                            handleSelectedRows(\n                              row.id,\n                              selectedRows,\n                              setSelectedRows\n                            )\n                          }\n                          color=\"primary\"\n                          checked={isItemSelected}\n                          inputProps={{\n                            \"aria-labelledby\": labelId,\n                          }}\n                        />\n                      </TableCell>\n                      <TableCell\n                        id={labelId}\n                        scope=\"row\"\n                        align=\"left\"\n                        className={classes.tableCell}\n                      >\n                        <Grid\n                          container\n                          rowSpacing={2}\n                          style={{\n                            maxWidth: \"25rem\",\n                            display: \"inline-flex\",\n                            justifyContent: \"left\",\n                            alignItems: \"center\",\n                          }}\n                        >\n                          <Grid item xs={6}>\n                            <Chip label={data} className={classes.badge} />\n                          </Grid>\n                        </Grid>\n                      </TableCell>\n                      <TableCell\n                        id={labelId}\n                        scope=\"row\"\n                        align=\"left\"\n                        className={classes.tableCell}\n                      >\n                        <Grid\n                          container\n                          rowSpacing={2}\n                          style={{\n                            maxWidth: \"25rem\",\n                            display: \"inline-flex\",\n                            justifyContent: \"left\",\n                            alignItems: \"center\",\n                          }}\n                        >\n                          <Grid item xs={6}>\n                            <Chip label={newPerm} className={classes.badge} />\n                          </Grid>\n                        </Grid>\n                      </TableCell>\n\n                      <TableCell align=\"left\" className={classes.tableCell}>\n                        <div\n                          style={{\n                            height: \"100%\",\n                            display: \"flex\",\n                            alignItems: \"left\",\n                            justifyContent: \"space-around\",\n                          }}\n                        >\n                          <Button\n                            variant=\"contained\"\n                            disableRipple\n                            onClick={() => handleEditOpenDialog(row._id)}\n                            className={`${classes.tableBtn} ${classes.greenBtn}`}\n                            endIcon={<EditIcon color=\"success\" />}\n                          >\n                            Edit\n                          </Button>\n                          <Button\n                            variant=\"contained\"\n                            disableRipple\n                            onClick={() => handleDeleteOpenDialog(row._id)}\n                            className={`${classes.tableBtn} ${classes.redBtn}`}\n                            to=\"/view\"\n                            endIcon={<DeleteIcon color=\"error\" />}\n                          >\n                            Delete\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </EnhancedTable>\n            </Grid>\n          ) : (\n            <EmptyTable\n              headCells={PermissionHeader}\n              paginationLabel=\"Permission  per page\"\n            />\n          )}\n        </TableLayout>\n      </Grid>\n\n      <Modals\n        isOpen={isOpen}\n        title=\"Filter\"\n        rowSpacing={5}\n        handleClose={handleDialogClose}\n      >\n        <Formik\n          initialValues={initialValues1}\n          onSubmit={onSubmit1}\n          validationSchema={validationSchema1}\n          validateOnChange={false}\n          validateOnMount={false}\n          validateOnBlur={false}\n        >\n          {({ isSubmitting, dirty, isValid }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid item container direction=\"column\">\n                  <Grid item container spacing={2}>\n                    <Grid item xs={6} marginBottom={4}>\n                      <FormikControl\n                        control=\"select\"\n                        options={referralOptions}\n                        name=\"name\"\n                        label=\"Name\"\n                        placeholder=\"Enter Plan Name\"\n                      />\n                    </Grid>\n                    {/* second grid */}\n                    <Grid item xs={6}>\n                      <FormikControl\n                        control=\"select\"\n                        options={referralOptions}\n                        name=\"date\"\n                        label=\"Date\"\n                        placeholder=\"Choose Date\"\n                      />\n                    </Grid>\n                  </Grid>\n\n                  <Grid item container spacing={2}>\n                    <FormikControl\n                      control=\"select\"\n                      options={referralOptions}\n                      name=\"category\"\n                      label=\"Category\"\n                      placeholder=\"Save Category\"\n                    />\n                  </Grid>\n                </Grid>\n                <Grid item container xs={12} marginTop={20}>\n                  <CustomButton\n                    title=\"Apply Filter\"\n                    width=\"100%\"\n                    isSubmitting={isSubmitting}\n                    disabled={!(dirty || isValid)}\n                    type={buttonType}\n                  />\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n\n      {/* // modal */}\n\n      <Modals\n        isOpen={isOpen}\n        title=\"Add new permission\"\n        handleClose={handleDialogClose}\n      >\n        <PermissionModal\n          handleDialogClose={handleDialogClose}\n          type=\"add\"\n          options={checkbox}\n          initialValues={initialValues}\n          validationSchema={validationSchema}\n          setAlert={setAlert}\n        />\n      </Modals>\n\n      {/* edit modala */}\n      <Modals\n        isOpen={isEdit}\n        title=\"Edit permission\"\n        handleClose={handleEditCloseDialog}\n      >\n        <PermissionModal\n          handleDialogClose={handleEditCloseDialog}\n          type=\"edit\"\n          options={checkbox}\n          singlePermission={singlePermission}\n          editId={editId}\n          validationSchema={validationSchema}\n          setAlert={setAlert}\n          editDetails={editDetails}\n          setSinglePermission={setSinglePermission}\n        />\n      </Modals>\n      {/* delete modal */}\n      <DeleteOrDisable\n        open={deleteModal}\n        setOpen={setdeleteModal}\n        title=\"Delete Permission\"\n        confirmationMsg=\"delete permission\"\n        btnValue=\"Delete\"\n        onConfirm={onConfirm}\n      />\n    </>\n  );\n};\nexport default Permission;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/PatientAppointment.js",["1240","1241","1242","1243","1244","1245"],"import React, { useState, useEffect } from \"react\";\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\nimport {\n  CustomButton,\n  /* FilterList, */ Modals,\n  Loader,\n} from \"components/Utilities\";\nimport { Formik, Form } from \"formik\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport {\n  Grid,\n  Alert,\n  Typography,\n  TableRow,\n  TableCell,\n  Checkbox,\n  Button,\n  Avatar,\n} from \"@mui/material\";\nimport { deleteAppointment } from \"components/graphQL/Mutation\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport { getAppoint, getDOCAppoint } from \"components/graphQL/useQuery\";\nimport { DeleteOrDisable } from \"components/modals\";\nimport { consultationsHeadCells2 } from \"components/Utilities/tableHeaders\";\nimport { useSelector } from \"react-redux\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport AssignmentIcon from \"@mui/icons-material/Assignment\";\nimport { useParams } from \"react-router-dom\";\nimport { timeConverter, timeMoment } from \"components/Utilities/Time\";\nimport * as Yup from \"yup\";\nimport { updateAppointment } from \"components/graphQL/Mutation\";\nimport {\n  changeTableLimit,\n  fetchMoreData,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport TableLayout from \"components/layouts/TableLayout\";\nconst useStyles = makeStyles((theme) => ({\n  tableCell: {\n    \"&.css-1jilxo7-MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n  btn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      width: \"100%\",\n    },\n  },\n\n  tableBtn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      height: \"3rem\",\n      fontSize: \"1.25rem\",\n      borderRadius: \"2rem\",\n      boxShadow: \"none\",\n\n      \"&:hover\": {\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n          color: \"#fff\",\n        },\n      },\n\n      \"&:active\": {\n        boxShadow: \"none\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.5rem\",\n      },\n    },\n  },\n\n  redBtn: {\n    \"&.MuiButton-root\": {\n      background: theme.palette.common.lightRed,\n      color: theme.palette.common.red,\n\n      \"&:hover\": {\n        background: theme.palette.error.light,\n        color: \"#fff\",\n      },\n    },\n  },\n\n  greenBtn: {\n    \"&.MuiButton-root\": {\n      background: theme.palette.common.lightGreen,\n      color: theme.palette.common.green,\n\n      \"&:hover\": {\n        background: theme.palette.success.light,\n        color: \"#fff\",\n      },\n    },\n  },\n}));\n\n/* const filterOptions = [\n  { id: 0, value: \"Name\" },\n  { id: 1, value: \"Date\" },\n  { id: 2, value: \"Description\" },\n]; */\n\nconst PatientAppointment = () => {\n  const [updateAppoint] = useMutation(updateAppointment);\n  const [deleteAppointments] = useMutation(deleteAppointment);\n  const [pageInfo, setPageInfo] = useState([]);\n  const [alert, setAlert] = useState(null);\n  const [editId, setEditid] = useState(null);\n  const [doctorId, setDoctorId] = useState(null);\n  const handleDelete = (id) => {\n    setId(id);\n    setdeleteModal(true);\n  };\n\n  const handleSchedule = (id, doctor) => {\n    setIsPatients(true);\n    setEditid(id);\n    setDoctorId(doctor);\n  };\n  const onConfirm = async () => {\n    try {\n      await deleteAppointments({\n        variables: { id },\n        refetchQueries: [\n          {\n            query: getAppoint,\n            variables: {\n              id: patientId,\n              orderBy: \"-createdAt\",\n            },\n          },\n        ],\n      });\n      setAlert({\n        message: \"appointment deleted successfully\",\n        type: \"success\",\n      });\n      setTimeout(() => {\n        setAlert(null);\n      }, 5000);\n    } catch (error) {\n      setAlert({\n        message: \"appointment  not successfully deleted\",\n        type: \"danger\",\n      });\n      setTimeout(() => {\n        setAlert(null);\n      }, 5000);\n      console.log(error);\n    }\n  };\n  const [deleteModal, setdeleteModal] = useState(false);\n  const classes = useStyles();\n  const theme = useTheme();\n  const [isPatient, setIsPatient] = useState(false);\n  const [isPatients, setIsPatients] = useState(false);\n  const [id, setId] = useState(null);\n  /* const handlePatientOpen = () => setIsPatient(true); */\n  const handlePatientClose = () => setIsPatient(false);\n  const handlePatientCloses = () => setIsPatients(false);\n  const { patientId } = useParams();\n  const [patientAppointment, setPatientAppointment] = useState([]);\n  const initialValues = {\n    status: \"\",\n    gender: \"\",\n    date: \"\",\n    plan: \"\",\n  };\n  const initialValues1 = {\n    date: \"\",\n  };\n\n  const validationSchema = Yup.object({\n    date: Yup.string(\"Enter your affliate\").required(\"Date is required\"),\n    plan: Yup.string(\"Select your plan\").required(\"Plan is required\"),\n    gender: Yup.string(\"Select your gender\").required(\"Gender is required\"),\n    status: Yup.string(\"Select your status\").required(\"Status is required\"),\n  });\n  const validationSchema1 = Yup.object({\n    date: Yup.string(\"select date and time \").required(\n      \"Date  and time is required\"\n    ),\n  });\n  const onSubmit1 = async (values) => {\n    const { date } = values;\n    const timeValue = timeMoment(date);\n    const dateValue = timeConverter(date);\n    await updateAppoint({\n      variables: {\n        id: editId,\n        date: dateValue,\n        time: timeValue,\n        doctor: doctorId,\n      },\n      refetchQueries: [\n        {\n          query: getAppoint,\n          variables: {\n            id: patientId,\n            orderBy: \"-createdAt\",\n          },\n        },\n        {\n          query: getDOCAppoint,\n          variables: {\n            id: doctorId,\n            orderBy: \"-createdAt\",\n          },\n        },\n      ],\n    });\n    handlePatientCloses();\n  };\n  const onSubmit = (values) => {\n    console.log(values);\n  };\n\n  const [getPatientsAppointment, { loading, data, error }] =\n    useLazyQuery(getAppoint);\n\n  useEffect(() => {\n    getPatientsAppointment({\n      variables: {\n        id: patientId,\n        orderBy: \"-createdAt\",\n      },\n      notifyOnNetworkStatusChange: true,\n    });\n  }, [getPatientsAppointment, patientId]);\n\n  useEffect(() => {\n    if (data) {\n      setPatientAppointment(data.getAppointments.data);\n      setPageInfo(data.getAppointments.pageInfo);\n    }\n  }, [data, patientId]);\n\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n\n  const genderType = [\n    { key: \"Male\", value: \"Male\" },\n    { key: \"Female\", value: \"Female\" },\n    { key: \"Prefer not to say\", value: \"Prefer not to say\" },\n  ];\n  const plans = [\n    { key: \"Plan 1\", value: \"Plan 1\" },\n    { key: \"Plan 2\", value: \"Plan 2\" },\n    { key: \"Plan 3\", value: \"Plan 3\" },\n    { key: \"Plan 4\", value: \"Plan 4\" },\n  ];\n  const plans1 = [\n    { key: \"Plan 1\", value: \"Plan 1\" },\n    { key: \"Plan 2\", value: \"Plan 2\" },\n    { key: \"Plan 3\", value: \"Plan 3\" },\n    { key: \"Plan 4\", value: \"Plan 4\" },\n  ];\n  const statusType = [\n    { key: \"Active\", value: \"Active\" },\n    { key: \"Blocked\", value: \"Blocked\" },\n  ];\n\n  if (error) return <NoData error={error} />;\n  if (loading) return <Loader />;\n  return (\n    <>\n      {alert && Object.keys(alert).length > 0 && (\n        <Alert\n          variant=\"filled\"\n          severity={alert.type}\n          sx={{ justifyContent: \"center\", width: \"70%\", margin: \"0 auto\" }}\n        >\n          {alert.message}\n        </Alert>\n      )}\n      <Grid\n        container\n        direction=\"column\"\n        gap={2}\n        flexWrap=\"nowrap\"\n        height=\"100%\"\n      >\n        <>\n          <Grid\n            item\n            container\n            flexWrap=\"nowrap\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n          >\n            {/* <Grid item flex={1}>\n              <Typography variant=\"h2\">Appointments</Typography>\n            </Grid>{\" \"}\n            */}\n            {/* <Grid item>\n              <FilterList\n                onClick={handlePatientOpen}\n                options={filterOptions}\n                title=\"Filter\"\n              />\n            </Grid> */}\n          </Grid>\n          <TableLayout>\n            {patientAppointment.length > 0 ? (\n              <Grid item container height=\"100%\" direction=\"column\">\n                <EnhancedTable\n                  headCells={consultationsHeadCells2}\n                  rows={patientAppointment}\n                  paginationLabel=\"Patients per page\"\n                  hasCheckbox={true}\n                  changeLimit={async (e) => {\n                    await changeTableLimit(getPatientsAppointment, {\n                      first: e,\n                    });\n                  }}\n                  dataPageInfo={pageInfo}\n                  handlePagination={async (page) => {\n                    await handlePageChange(\n                      getPatientsAppointment,\n                      page,\n                      pageInfo\n                    );\n                  }}\n                >\n                  {patientAppointment\n                    // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((row, index) => {\n                      const isItemSelected = isSelected(row._id, selectedRows);\n                      const labelId = `enhanced-table-checkbox-${index}`;\n                      return (\n                        <TableRow\n                          hover\n                          role=\"checkbox\"\n                          aria-checked={isItemSelected}\n                          tabIndex={-1}\n                          key={row._id}\n                          selected={isItemSelected}\n                        >\n                          <TableCell padding=\"checkbox\">\n                            <Checkbox\n                              onClick={() =>\n                                handleSelectedRows(\n                                  row.id,\n                                  selectedRows,\n                                  setSelectedRows\n                                )\n                              }\n                              color=\"primary\"\n                              checked={isItemSelected}\n                              inputProps={{\n                                \"aria-labelledby\": labelId,\n                              }}\n                            />\n                          </TableCell>\n                          <TableCell\n                            align=\"left\"\n                            className={classes.tableCell}\n                            style={{ maxWidth: \"20rem\" }}\n                          >\n                            <div\n                              style={{\n                                height: \"100%\",\n                                display: \"flex\",\n                                alignItems: \"center\",\n                              }}\n                            >\n                              <span style={{ marginRight: \"1rem\" }}>\n                                <Avatar\n                                  alt={`Display Photo of ${row.doctorData.firstName}`}\n                                  src={\n                                    row.doctorData.picture\n                                      ? row.doctorData.picture\n                                      : displayPhoto\n                                  }\n                                  sx={{ width: 24, height: 24 }}\n                                />\n                              </span>\n                              <span style={{ fontSize: \"1.25rem\" }}>\n                                {`${row.doctorData.firstName} \n                             ${row.doctorData.lastName}`}\n                              </span>\n                            </div>\n                          </TableCell>\n                          <TableCell align=\"left\" className={classes.tableCell}>\n                            {row.date}\n                          </TableCell>\n                          <TableCell\n                            align=\"left\"\n                            className={classes.tableCell}\n                            style={{\n                              color: theme.palette.common.grey,\n                              maxWidth: \"20rem\",\n                            }}\n                          >\n                            {/* {hours(}row.time) */} {row.time}\n                          </TableCell>\n                          <TableCell align=\"left\" className={classes.tableCell}>\n                            <Button\n                              variant=\"contained\"\n                              disableRipple\n                              className={`${classes.tableBtn} ${classes.greenBtn}`}\n                              endIcon={<AssignmentIcon color=\"success\" />}\n                              onClick={() =>\n                                handleSchedule(row._id, row.doctor)\n                              }\n                            >\n                              Reschedule\n                            </Button>\n                          </TableCell>\n                          <TableCell align=\"left\" className={classes.tableCell}>\n                            <Button\n                              variant=\"contained\"\n                              disableRipple\n                              onClick={() => handleDelete(row._id)}\n                              className={`${classes.tableBtn} ${classes.redBtn}`}\n                              endIcon={<DeleteIcon color=\"error\" />}\n                            >\n                              Cancel\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n                </EnhancedTable>\n              </Grid>\n            ) : (\n              <EmptyTable\n                headCells={consultationsHeadCells2}\n                paginationLabel=\"Appointments per page\"\n              />\n            )}\n          </TableLayout>\n        </>\n      </Grid>\n\n      <Modals\n        isOpen={isPatients}\n        title=\"Reschedule Appointment\"\n        rowSpacing={5}\n        height=\"auto\"\n        handleClose={handlePatientCloses}\n      >\n        <Formik\n          initialValues={initialValues1}\n          onSubmit={onSubmit1}\n          validationSchema={validationSchema1}\n          validateOnChange={false}\n          validateOnMount={false}\n          validateOnBlur={false}\n        >\n          {({ isSubmitting, dirty, isValid, setFieldValue }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid item container direction=\"column\" gap={2}>\n                  <Grid item container>\n                    <Grid container spacing={2}>\n                      <Grid item md>\n                        <FormikControl\n                          control=\"time\"\n                          name=\"date\"\n                          label=\"Date\"\n                          placeholder=\"Choose Date and Time\"\n                          setFieldValue={setFieldValue}\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid\n                    item\n                    container\n                    alignItems=\"flex-end\"\n                    marginTop={5}\n                    xs={12}\n                  >\n                    <CustomButton\n                      title=\"Reschedule Appointment\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n\n      <Modals\n        isOpen={isPatient}\n        title=\"Filter\"\n        rowSpacing={5}\n        height=\"auto\"\n        handleClose={handlePatientClose}\n      >\n        <Formik\n          initialValues={initialValues}\n          onSubmit={onSubmit}\n          validationSchema={validationSchema}\n          validateOnChange={false}\n          validateOnMount={false}\n          validateOnBlur={false}\n        >\n          {({ isSubmitting, dirty, isValid }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid item container direction=\"column\" gap={2}>\n                  <Grid item container>\n                    <Grid container spacing={2}>\n                      <Grid item md>\n                        <FormikControl\n                          control=\"select\"\n                          options={plans}\n                          name=\"date\"\n                          label=\"Date\"\n                          placeholder=\"Choose Date\"\n                        />\n                      </Grid>\n                      <Grid item md>\n                        <FormikControl\n                          control=\"select\"\n                          options={plans1}\n                          name=\"plan\"\n                          label=\"Plan\"\n                          placeholder=\"Select Plan\"\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item container gap={3}>\n                    <Grid container spacing={2}>\n                      <Grid item md>\n                        <FormikControl\n                          control=\"select\"\n                          options={genderType}\n                          name=\"gender\"\n                          label=\"Gender\"\n                          placeholder=\"Choose Gender\"\n                        />\n                      </Grid>\n                      <Grid item md>\n                        <FormikControl\n                          control=\"select\"\n                          options={statusType}\n                          name=\"status\"\n                          label=\"Status\"\n                          placeholder=\"Select status\"\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid\n                    item\n                    container\n                    alignItems=\"flex-end\"\n                    marginTop={5}\n                    xs={12}\n                  >\n                    <CustomButton\n                      title=\" Apply Filter\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n      {/* delete modal */}\n      <DeleteOrDisable\n        open={deleteModal}\n        onConfirm={() => console.log(\"confrimed\")}\n        setOpen={setdeleteModal}\n        title=\"Cancel Consultation\"\n        confirmationMsg=\"cancel appointment\"\n        btnValue=\"cancel\"\n      />\n\n      <DeleteOrDisable\n        open={deleteModal}\n        setOpen={setdeleteModal}\n        title=\"Delete Appointment\"\n        onConfirm={onConfirm}\n        confirmationMsg=\"delete appointment\"\n        btnValue=\"Delete\"\n      />\n    </>\n  );\n};\n\nexport default PatientAppointment;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Messages.js",["1246"],"import React, { useState, useEffect, useCallback } from \"react\";\nimport { debounce } from \"lodash\";\nimport { NoData, EnhancedTable, EmptyTable } from \"components/layouts\";\nimport { Link } from \"react-router-dom\";\nimport { TableRow, TableCell } from \"@mui/material\";\nimport { Loader, CustomButton } from \"components/Utilities\";\nimport { makeStyles } from \"@mui/styles\";\nimport { dateMoment, timeMoment } from \"components/Utilities/Time\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { messagesHeadCells } from \"components/Utilities/tableHeaders\";\nimport { Avatar, Button, Checkbox, Grid } from \"@mui/material\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport { useSelector } from \"react-redux\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { getMessage } from \"components/graphQL/useQuery\";\nimport {\n  changeTableLimit,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport TableLayout from \"components/layouts/TableLayout\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    \"&.MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"0.5rem\",\n      maxWidth: \"10rem\",\n      fontSize: \".85rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"0.85rem\",\n      },\n\n      \"& .MuiButton-endIcon\": {\n        marginLeft: \".2rem\",\n      },\n    },\n  },\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.25rem !important\",\n      height: \"2.7rem\",\n      borderRadius: \"1.3rem\",\n    },\n  },\n  tableBtn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      height: \"3rem\",\n      fontSize: \"1.25rem\",\n      borderRadius: \"2rem\",\n      boxShadow: \"none\",\n\n      \"&:hover\": {\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n          color: \"#fff\",\n        },\n      },\n\n      \"&:active\": {\n        boxShadow: \"none\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.5rem\",\n      },\n    },\n  },\n\n  redBtn: {\n    \"&.MuiButton-root\": {\n      background: theme.palette.common.lightRed,\n      color: theme.palette.common.red,\n\n      \"&:hover\": {\n        background: theme.palette.error.light,\n        color: \"#fff\",\n      },\n    },\n  },\n}));\n\nconst Messages = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [pageInfo, setPageInfo] = useState({\n    page: 0,\n    totalPages: 1,\n    hasNextPage: false,\n    hasPrevPage: false,\n    limit: 10,\n    totalDocs: 0,\n  });\n  const greenButtonType = {\n    background: theme.palette.primary.main,\n    hover: theme.palette.primary.light,\n    active: theme.palette.primary.dark,\n  };\n\n  /*   const [searchMessage, setSearchMessage] = useState(\"\"); */\n  const [message, setMessage] = useState([]);\n\n  const [fetchMessages, { loading, data, error }] = useLazyQuery(getMessage);\n\n  useEffect(() => {\n    fetchMessages({\n      variables: {\n        first: pageInfo.limit,\n      },\n      notifyOnNetworkStatusChange: true,\n    });\n  }, [fetchMessages, pageInfo]);\n\n  /*   const onChange = async (e) => {\n    setSearchMessage(e);\n    if (e === \"\") {\n      refetch();\n    } else refetch({ recipient: e });\n  }; */\n\n  useEffect(() => {\n    if (data) {\n      setMessage(data.getMessages.messages);\n      setPageInfo(data.getMessages.pageInfo);\n    }\n  }, [message, data]);\n\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n  //eslint-disable-next-line\n  const debouncer = useCallback(debounce(fetchMessages, 3000), []);\n\n  if (error) return <NoData error={error} />;\n  if (loading) return <Loader />;\n  else {\n    return (\n      <Grid\n        container\n        direction=\"column\"\n        gap={2}\n        flexWrap=\"nowrap\"\n        height=\"100%\"\n      >\n        <Grid\n          item\n          gap={{ md: 4, sm: 4, xs: 2 }}\n          direction={{ sm: \"row\", xs: \"column\" }}\n          container\n          justifyContent=\"flex-end\"\n        >\n          <Grid item>\n            <CustomButton\n              endIcon={<AddIcon />}\n              title=\"New Message\"\n              type={greenButtonType}\n              component={Link}\n              to=\"/messages/create-message\"\n            />\n          </Grid>\n        </Grid>\n        <TableLayout>\n          {message.length > 0 ? (\n            <Grid item container height=\"100%\" direction=\"column\">\n              <EnhancedTable\n                headCells={messagesHeadCells}\n                rows={message}\n                paginationLabel=\"Message per page\"\n                hasCheckbox={true}\n                changeLimit={async (e) => {\n                  changeTableLimit(fetchMessages, { first: e });\n                }}\n                fetchData={fetchMessages}\n                handlePagination={async (page) => {\n                  handlePageChange(fetchMessages, page, pageInfo, {});\n                }}\n              >\n                {message.map((row, index) => {\n                  const { subject, createdAt, _id, recipientData } = row;\n                  const isItemSelected = isSelected(_id, selectedRows);\n\n                  const labelId = `enhanced-table-checkbox-${index}`;\n                  return (\n                    <TableRow\n                      hover\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={_id}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          onClick={() =>\n                            handleSelectedRows(\n                              _id,\n                              selectedRows,\n                              setSelectedRows\n                            )\n                          }\n                          color=\"primary\"\n                          checked={isItemSelected}\n                          inputProps={{\n                            \"aria-labelledby\": labelId,\n                          }}\n                        />\n                      </TableCell>\n                      <TableCell\n                        align=\"left\"\n                        className={classes.tableCell}\n                        style={{ maxWidth: \"20rem\" }}\n                      >\n                        <div\n                          style={{\n                            height: \"100%\",\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            justifyContent: \"flex-start\",\n                          }}\n                        >\n                          <span style={{ marginRight: \"1rem\" }}>\n                            <Avatar\n                              alt={`Display Photo of  ${\n                                recipientData && recipientData.firstName\n                              }`}\n                              src={\n                                recipientData && recipientData.image\n                                  ? recipientData.image\n                                  : displayPhoto\n                              }\n                              sx={{ width: 24, height: 24 }}\n                            />\n                          </span>\n                          <span style={{ fontSize: \"1.25rem\" }}>\n                            {recipientData && recipientData.firstName\n                              ? `${recipientData.firstName} ${recipientData.lastName}`\n                              : \"No Value\"}\n                          </span>\n                        </div>\n                      </TableCell>\n                      <TableCell\n                        align=\"left\"\n                        className={classes.tableCell}\n                        style={{ maxWidth: \"15rem\" }}\n                      >\n                        {subject}\n                      </TableCell>\n                      <TableCell\n                        align=\"left\"\n                        className={classes.tableCell}\n                        style={{ color: theme.palette.common.grey }}\n                      >\n                        {dateMoment(createdAt)}\n                      </TableCell>\n                      <TableCell\n                        align=\"left\"\n                        className={classes.tableCell}\n                        style={{ color: theme.palette.common.grey }}\n                      >\n                        {timeMoment(createdAt)}\n                      </TableCell>\n                      <TableCell>\n                        <Button\n                          variant=\"contained\"\n                          className={classes.button}\n                          component={Link}\n                          to={`messages/${_id}`}\n                          endIcon={<ArrowForwardIosIcon />}\n                          /* onClick={() => setSelectedSubMenu(6)} */\n                        >\n                          View Message\n                        </Button>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </EnhancedTable>\n            </Grid>\n          ) : (\n            <EmptyTable\n              headCells={messagesHeadCells}\n              paginationLabel=\"Messages  per page\"\n            />\n          )}\n        </TableLayout>\n      </Grid>\n    );\n  }\n};\n\nexport default Messages;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Management.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Hcps.js",["1247","1248","1249"],"import React, { useState, useEffect } from \"react\";\nimport { Formik, Form } from \"formik\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { NetworkStatus } from \"@apollo/client\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport {\n  Grid,\n  TableRow,\n  TableCell,\n  Button,\n  Checkbox,\n  Chip,\n  Avatar,\n} from \"@mui/material\";\nimport useAlert from \"hooks/useAlert\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { isSelected } from \"helpers/isSelected\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { timeConverter } from \"components/Utilities/Time\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { useStyles } from \"../../styles/doctorsPageStyles\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport {\n  getDoctorsProfile,\n  getDoctorsProfileByStatus,\n} from \"components/graphQL/useQuery\";\nimport { hcpsHeadCells } from \"components/Utilities/tableHeaders\";\nimport { createDOctorProfile } from \"components/graphQL/Mutation\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\nimport { addDoctorValidationSchema } from \"helpers/validationSchemas\";\nimport { Loader, Modals, CustomButton } from \"components/Utilities\";\nimport {\n  changeTableLimit,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport {\n  addDocInitialValues,\n  /* cadreFilterBy, */\n  defaultPageInfo,\n  docCadreOptions,\n  docSpecializationsOptions,\n  doctorsSearchOptions,\n  genderType,\n  /*  providerFilterBy,\n  specializationFilterBy,\n  statusFilterBy, */\n} from \"helpers/mockData\";\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\nimport DoctorFilters from \"components/Forms/Filters/DoctorsFilters\";\nimport TableLayout from \"components/layouts/TableLayout\";\n\nconst Hcps = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { displayAlert } = useAlert();\n  const [profiles, setProfiles] = useState(\"\");\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\n  const [openAddHcp, setOpenAddHcp] = useState(false);\n  const [createDoc] = useMutation(createDOctorProfile);\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n  const [fetchDoctors, { error, loading, refetch, variables, networkStatus }] =\n    useLazyQuery(getDoctorsProfile, {\n      notifyOnNetworkStatusChange: true,\n    });\n  const [\n    fetchDoctorsByStatus,\n    {\n      loading: byStatusLoading,\n      refetch: byStatusRefetch,\n      variables: byStatusVariables,\n    },\n  ] = useLazyQuery(getDoctorsProfileByStatus);\n\n  useEffect(() => {\n    fetchDoctors({\n      variables: {\n        first: pageInfo.limit,\n      },\n    })\n      .then(({ data }) => {\n        if (data) {\n          setPageInfo(data.doctorProfiles.pageInfo || []);\n          setProfiles(data.doctorProfiles.profile || defaultPageInfo);\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onSubmit = async (values) => {\n    const {\n      createdAt,\n      updatedAt,\n      firstName,\n      lastName,\n      gender,\n      phone,\n      email,\n      hospital,\n      dociId,\n      specialization,\n      dob,\n      cadre,\n      image,\n    } = values;\n    const correctDOB = timeConverter(dob);\n    await createDoc({\n      variables: {\n        dociId,\n        createdAt,\n        updatedAt,\n        firstName,\n        lastName,\n        gender,\n        phoneNumber: phone,\n        email,\n        hospital,\n        specialization,\n        dob: correctDOB,\n        cadre,\n        image,\n        providerId: \"61db6f8968b248001aec4fcb\",\n      },\n      refetchQueries: [{ query: getDoctorsProfile }],\n    });\n    setOpenAddHcp(false);\n  };\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n  };\n  const getSearchPlaceholder = (filterBy) => {\n    return filterBy === \"id\"\n      ? \"Search by ID e.g 7NE6ELLO\"\n      : filterBy === \"firstName\"\n      ? \"Search by first name e.g John\"\n      : filterBy === \"lastName\"\n      ? \"Search by last name e.g Doe\"\n      : \"\";\n  };\n\n  const setTableData = async (response, errMsg) => {\n    response\n      .then(({ data }) => {\n        setPageInfo(data.doctorProfiles.pageInfo || defaultPageInfo);\n        setProfiles(data.doctorProfiles.profile || []);\n      })\n      .catch((error) => {\n        console.error(error);\n        displayAlert(\"error\", errMsg);\n      });\n  };\n\n  if (error) return <NoData error={error} />;\n  return (\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\n      <Grid\n        item\n        gap={{ md: 4, sm: 4, xs: 2 }}\n        direction={{ sm: \"row\", xs: \"column\" }}\n        container\n        justifyContent=\"flex-end\"\n      >\n        <Grid item>\n          <CustomButton\n            endIcon={<AddIcon />}\n            title=\"Add Doctor\"\n            type={buttonType}\n            onClick={() => setOpenAddHcp(true)}\n          />\n        </Grid>\n      </Grid>\n      {/* ========= FILTERS =========== */}\n\n      <TableLayout\n        filters={\n          <DoctorFilters\n            setProfiles={setProfiles}\n            setPageInfo={setPageInfo}\n            queryParams={{\n              doctorsParams: { fetchDoctors, loading, refetch, variables },\n              doctorsByStatusParams: {\n                byStatusLoading,\n                byStatusVariables,\n                byStatusRefetch,\n                fetchDoctorsByStatus,\n              },\n            }}\n          />\n        }\n        search={\n          <CompoundSearch\n            queryParams={{ fetchData: fetchDoctors, variables, loading }}\n            setPageInfo={(data) =>\n              setPageInfo(data.doctorProfiles.pageInfo || {})\n            }\n            setProfiles={(data) =>\n              setProfiles(data.doctorProfiles.profile || [])\n            }\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\n            filterOptions={doctorsSearchOptions}\n          />\n        }\n      >\n        {loading ? (\n          <Loader />\n        ) : byStatusLoading ? (\n          <Loader />\n        ) : networkStatus === NetworkStatus.refetch ? (\n          <Loader />\n        ) : profiles.length > 0 ? (\n          <Grid item container height=\"100%\" direction=\"column\">\n            <EnhancedTable\n              headCells={hcpsHeadCells}\n              rows={profiles}\n              paginationLabel=\"Doctors per page\"\n              hasCheckbox={true}\n              changeLimit={async (e) => {\n                const res = changeTableLimit(fetchDoctors, {\n                  first: e,\n                });\n                await setTableData(res, \"Failed to change table limit\");\n              }}\n              dataPageInfo={pageInfo}\n              handlePagination={async (page) => {\n                const res = handlePageChange(fetchDoctors, page, pageInfo, {});\n                await setTableData(res, \"Failed to change page.\");\n              }}\n            >\n              {profiles.map((row, index) => {\n                const {\n                  _id,\n                  dociId,\n                  firstName,\n                  provider,\n                  status,\n                  specialization,\n                  consultations,\n                  picture,\n                  lastName,\n                } = row;\n                const isItemSelected = isSelected(_id, selectedRows);\n                const labelId = `enhanced-table-checkbox-${index}`;\n                return (\n                  <TableRow\n                    hover\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={_id}\n                    selected={isItemSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        onClick={() =>\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\n                        }\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          \"aria-labelledby\": labelId,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell\n                      id={labelId}\n                      scope=\"row\"\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                        minWidth: \"10rem\",\n                      }}\n                    >\n                      {dociId && dociId.split(\"-\")[1]}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      <div\n                        style={{\n                          height: \"100%\",\n                          display: \"flex\",\n                          alignItems: \"left\",\n                        }}\n                      >\n                        <span style={{ marginRight: \"1rem\" }}>\n                          <Avatar\n                            alt={`Display Photo of ${firstName}`}\n                            src={picture ? picture : displayPhoto}\n                            sx={{ width: 24, height: 24 }}\n                          />\n                        </span>\n                        <span style={{ fontSize: \"1.25rem\" }}>\n                          {firstName} {lastName}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ color: theme.palette.common.grey }}\n                    >\n                      {specialization}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      {consultations ? consultations : 0}\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ color: theme.palette.common.grey }}\n                    >\n                      {provider ? provider : \"No Provider\"}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      <Chip\n                        label={\n                          status && status === \"Active\" ? \"Active\" : \"Inactive\"\n                        }\n                        className={classes.badge}\n                        style={{\n                          background:\n                            status === \"Active\"\n                              ? theme.palette.common.lightGreen\n                              : theme.palette.common.lightRed,\n                          color:\n                            status === \"Active\"\n                              ? theme.palette.common.green\n                              : theme.palette.common.red,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        variant=\"contained\"\n                        className={classes.button}\n                        component={Link}\n                        to={`hcps/${_id}`}\n                        endIcon={<ArrowForwardIosIcon />}\n                      >\n                        View Doctor\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </EnhancedTable>\n          </Grid>\n        ) : (\n          <EmptyTable\n            headCells={hcpsHeadCells}\n            paginationLabel=\"Doctors per page\"\n          />\n        )}\n      </TableLayout>\n      {/* ADD Doctor MODAL */}\n      <Modals\n        isOpen={openAddHcp}\n        title=\"Add Doctor\"\n        rowSpacing={5}\n        height=\"auto\"\n        width={{ sm: \"50vw\", xs: \"90vw\" }}\n        handleClose={() => setOpenAddHcp(false)}\n      >\n        <Formik\n          initialValues={addDocInitialValues}\n          onSubmit={onSubmit}\n          validationSchema={addDoctorValidationSchema}\n          validateOnChange={false}\n          validateOnMount={false}\n          validateOnBlur={false}\n        >\n          {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\n            return (\n              <Form style={{ marginTop: \"1rem\" }}>\n                <Grid container direction=\"column\" gap={2}>\n                  <Grid item container direction=\"column\" gap={1}>\n                    <Grid item container spacing={2}>\n                      <Grid item container xs={6}>\n                        <FormikControl\n                          control=\"input\"\n                          label=\"First Name\"\n                          id=\"firstName\"\n                          name=\"firstName\"\n                          placeholder=\"Enter first name\"\n                        />\n                      </Grid>\n                      <Grid item container xs={6}>\n                        <FormikControl\n                          control=\"input\"\n                          label=\"Last Name\"\n                          id=\"lastName\"\n                          name=\"lastName\"\n                          placeholder=\"Enter last name\"\n                        />\n                      </Grid>\n                    </Grid>\n                    <Grid item container direction=\"column\" gap={2}>\n                      <Grid item container spacing={2}>\n                        <Grid item xs={6}>\n                          <FormikControl\n                            control=\"date\"\n                            name=\"dob\"\n                            label=\"DOB\"\n                            setFieldValue={setFieldValue}\n                            setValues={setValues}\n                          />\n                        </Grid>\n                        <Grid item xs={6}>\n                          <Grid container direction=\"column\">\n                            <FormikControl\n                              control=\"select\"\n                              options={docSpecializationsOptions}\n                              name=\"specialization\"\n                              label=\"Specialization\"\n                              placeholder=\"Specialization\"\n                            />\n                          </Grid>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item container direction=\"column\" gap={2}>\n                    <Grid item container spacing={2}>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"select\"\n                          label=\"Gender\"\n                          id=\"gender\"\n                          name=\"gender\"\n                          options={genderType}\n                          placeholder=\"Gender\"\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"input\"\n                          label=\"Phone Number\"\n                          id=\"phone\"\n                          name=\"phone\"\n                          placeholder=\"Enter last Phone number\"\n                        />\n                      </Grid>\n                    </Grid>\n\n                    <Grid item container direction=\"column\" gap={2}>\n                      <Grid item container spacing={2}>\n                        <Grid item xs={6}>\n                          <FormikControl\n                            control=\"input\"\n                            label=\"Hospital\"\n                            id=\"hospital\"\n                            name=\"hospital\"\n                            placeholder=\"Enter hospital Name\"\n                          />\n                        </Grid>\n                        <Grid item xs={6} marginBottom={{ xs: 1 }}>\n                          <FormikControl\n                            control=\"select\"\n                            options={docCadreOptions}\n                            name=\"cadre\"\n                            label=\"Cadre\"\n                            placeholder=\"Select Cadre\"\n                          />\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item container spacing={2} alignItems=\"center\">\n                    <Grid item xs={6}>\n                      <FormikControl\n                        control=\"file\"\n                        name=\"image\"\n                        label=\"Profile Pics\"\n                        setFieldValue={setFieldValue}\n                      />\n                    </Grid>\n                    <Grid item xs={6}>\n                      <FormikControl\n                        control=\"input\"\n                        label=\"Heala-ID\"\n                        id=\"dociId\"\n                        name=\"dociId\"\n                        placeholder=\"Enter Heala ID\"\n                      />\n                    </Grid>\n                  </Grid>\n                  <Grid item container>\n                    <CustomButton\n                      title=\"Add Doctor\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n    </Grid>\n  );\n};\n\nexport default Hcps;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpPatients.js",["1250"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Grid,\n  Typography,\n  Avatar,\n  TableRow,\n  Checkbox,\n  TableCell,\n  Button,\n} from \"@mui/material\";\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport { hcpPatientsHeadCells } from \"components/Utilities/tableHeaders\";\nimport { useSelector } from \"react-redux\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { Loader } from \"components/Utilities\";\nimport { getDoctorPatients } from \"components/graphQL/useQuery\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport {\n  changeTableLimit,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport TableLayout from \"components/layouts/TableLayout\";\n\nconst useStyles = makeStyles((theme) => ({\n  tableCell: {\n    \"&.MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n\n  button: {\n    \"&.MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"1rem\",\n      whitespace: \"nowrap\",\n      maxWidth: \"15rem\",\n      width: \"100%\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.2rem\",\n      },\n    },\n  },\n}));\n\nconst HcpPatients = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [pageInfo, setPageInfo] = useState([]);\n\n  const { hcpId } = useParams();\n\n  const { setSelectedRows } = useActions();\n  const { selectedRows } = useSelector((state) => state.tables);\n\n  const [fetchDoctorsPatients, { loading, error, data }] =\n    useLazyQuery(getDoctorPatients);\n\n  useEffect(() => {\n    fetchDoctorsPatients({\n      variables: { id: hcpId },\n      notifyOnNetworkStatusChange: true,\n    });\n  }, [fetchDoctorsPatients, hcpId]);\n\n  const [profiles, setProfiles] = useState([]);\n  useEffect(() => {\n    if (data) {\n      setProfiles(data.getDoctorPatients.data);\n      setPageInfo(data.getDoctorPatients.pageInfo);\n    }\n  }, [data]);\n\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error} />;\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      gap={2}\n      flexWrap=\"nowrap\"\n      height=\"100%\"\n      sx={{ margin: \"3rem 0rem\" }}\n    >\n      <TableLayout>\n        {profiles.length > 0 ? (\n          <Grid item container direction=\"column\" height=\"100%\">\n            <EnhancedTable\n              headCells={hcpPatientsHeadCells}\n              rows={profiles}\n              paginationLabel=\"List Per Page\"\n              hasCheckbox={true}\n              changeLimit={async (e) => {\n                await changeTableLimit(fetchDoctorsPatients, {\n                  first: e,\n                  id: hcpId,\n                });\n              }}\n              dataPageInfo={pageInfo}\n              handlePagination={async (page) => {\n                await handlePageChange(fetchDoctorsPatients, page, pageInfo, {\n                  id: hcpId,\n                });\n              }}\n            >\n              {profiles.map((row, index) => {\n                const { _id, patientData } = row;\n                const isItemSelected = isSelected(_id, selectedRows);\n                const labelId = `enhanced-table-checkbox-${index}`;\n\n                return (\n                  <TableRow\n                    hover\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={_id}\n                    selected={isItemSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        onClick={() =>\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\n                        }\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          \"aria-labelledby\": labelId,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell\n                      id={labelId}\n                      scope=\"row\"\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ color: theme.palette.common.grey }}\n                    >\n                      {patientData && patientData?.dociId?.split(\"-\")[1]}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      <div\n                        style={{\n                          height: \"100%\",\n                          display: \"flex\",\n                          alignItems: \"center\",\n                          textAlign: \"left\",\n                        }}\n                      >\n                        <span style={{ marginRight: \"1rem\" }}>\n                          <Avatar\n                            alt=\"\"\n                            src={row.image}\n                            sx={{ width: 24, height: 24 }}\n                          />\n                        </span>\n                        <span style={{ fontSize: \"1.25rem\" }}>\n                          {patientData?.firstName\n                            ? `${patientData?.firstName} ${patientData?.lastName}`\n                            : \"No Patient Name\"}\n                          {row.lastName}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      {patientData?.gender && patientData?.gender}\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        variant=\"contained\"\n                        className={classes.button}\n                        component={Link}\n                        to={`/patients/${patientData?._id}/profile`}\n                        endIcon={<ArrowForwardIosIcon />}\n                      >\n                        View Patient Profile\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </EnhancedTable>\n          </Grid>\n        ) : (\n          <EmptyTable\n            headCells={hcpPatientsHeadCells}\n            paginationLabel=\"List  per page\"\n          />\n        )}\n      </TableLayout>\n    </Grid>\n  );\n};\n\nexport default HcpPatients;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpConsultations.js",["1251","1252","1253"],"import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { getDocConsult } from \"components/graphQL/useQuery\";\nimport {\n  Avatar,\n  Typography,\n  TableRow,\n  Button,\n  TableCell,\n  Checkbox,\n  Grid,\n} from \"@mui/material\";\nimport { consultationsHeadCells } from \"components/Utilities/tableHeaders\";\nimport { useSelector } from \"react-redux\";\nimport { NoData, EnhancedTable, EmptyTable } from \"components/layouts\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport { Loader } from \"components/Utilities\";\nimport { useParams } from \"react-router-dom\";\nimport { dateMoment } from \"components/Utilities/Time\";\nimport {\n  changeTableLimit,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport TableLayout from \"components/layouts/TableLayout\";\n\nconst useStyles = makeStyles((theme) => ({\n  tableCell: {\n    \"&.css-1jilxo7-MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n\n  button: {\n    \"&.MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"1rem\",\n      maxWidth: \"12rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.2rem\",\n      },\n\n      \"& .MuiButton-endIcon\": {\n        marginLeft: \".3rem\",\n      },\n    },\n  },\n}));\n\n/* const filterOptions = [\n  { id: 0, value: \"Name\" },\n  { id: 1, value: \"Date\" },\n  { id: 2, value: \"Description\" },\n]; */\n\nconst HcpConsultations = (props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [pageInfo, setPageInfo] = useState([]);\n  const { hcpId } = useParams();\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n  const [consultations, setConsultations] = useState([]);\n\n  const [fetchDocConsultations, { loading, data, error }] =\n    useLazyQuery(getDocConsult);\n\n  useEffect(() => {\n    fetchDocConsultations({\n      variables: {\n        id: hcpId,\n        orderBy: \"-createdAt\",\n      },\n      notifyOnNetworkStatusChange: true,\n    });\n  }, [fetchDocConsultations, hcpId]);\n\n  useEffect(() => {\n    if (data && data.getConsultations.data) {\n      setConsultations(data.getConsultations.data);\n      setPageInfo(data.getConsultations.pageInfo);\n    }\n  }, [data, hcpId]);\n\n  if (error) return <NoData error={error} />;\n  if (loading) return <Loader />;\n  return (\n    <Grid container direction=\"column\" height=\"100%\" gap={2}>\n      <Grid\n        item\n        container\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      ></Grid>\n      <TableLayout>\n        {consultations.length > 0 ? (\n          <Grid item>\n            <EnhancedTable\n              headCells={consultationsHeadCells}\n              rows={consultations}\n              paginationLabel=\"Consultations per page\"\n              hasCheckbox={true}\n              changeLimit={async (e) => {\n                await changeTableLimit(fetchDocConsultations, {\n                  first: e,\n                  id: hcpId,\n                });\n              }}\n              dataPageInfo={pageInfo}\n              handlePagination={async (page) => {\n                await handlePageChange(fetchDocConsultations, page, pageInfo, {\n                  id: hcpId,\n                });\n              }}\n            >\n              {consultations.map((row, index) => {\n                // eslint-disable-next-line\n                const {\n                  _id,\n                  createdAt,\n                  symptoms,\n                  status,\n                  type,\n                  contactMedium,\n                  patientData,\n\n                  // eslint-disable-next-line\n                } = row;\n                const isItemSelected = isSelected(row._id, selectedRows);\n                const labelId = `enhanced-table-checkbox-${index}`;\n                return (\n                  <TableRow\n                    hover\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={_id}\n                    selected={isItemSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        onClick={() =>\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\n                        }\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          \"aria-labelledby\": labelId,\n                        }}\n                      />\n                    </TableCell>\n\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      {dateMoment(createdAt)}\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ maxWidth: \"20rem\" }}\n                    >\n                      <div\n                        style={{\n                          height: \"100%\",\n                          display: \"flex\",\n                          alignItems: \"left\",\n                        }}\n                      >\n                        <span style={{ marginRight: \"1rem\" }}>\n                          <Avatar\n                            alt={`Display Photo of ${patientData.firstName}`}\n                            src={\n                              patientData.picture\n                                ? patientData.picture\n                                : displayPhoto\n                            }\n                            sx={{ width: 24, height: 24 }}\n                          />\n                        </span>\n                        <span\n                          style={{ fontSize: \"1.25rem\" }}\n                        >{`${patientData.firstName} ${patientData.lastName}`}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                        maxWidth: \"20rem\",\n                      }}\n                    >\n                      <Grid container gap={1}>\n                        {symptoms\n                          ? symptoms.map((i) => {\n                              return <p key={i.name}>{i.name}</p>;\n                            })\n                          : \"No Value\"}\n                      </Grid>\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                        maxWidth: \"20rem\",\n                      }}\n                    >\n                      {contactMedium}\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                        maxWidth: \"20rem\",\n                      }}\n                    >\n                      {type ? type : \"No Value\"}\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                        maxWidth: \"20rem\",\n                      }}\n                    >\n                      {status ? status : \"No Value\"}\n                    </TableCell>\n                    <TableCell align=\"left\">\n                      <Button\n                        variant=\"contained\"\n                        className={classes.button}\n                        component={Link}\n                        to={`/hcps/${hcpId}/consultations/case-notes/${_id}`}\n                        endIcon={<ArrowForwardIosIcon />}\n                      >\n                        View Details\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </EnhancedTable>\n          </Grid>\n        ) : (\n          <EmptyTable\n            headCells={consultationsHeadCells}\n            paginationLabel=\"Consultation  per page\"\n          />\n        )}\n      </TableLayout>\n    </Grid>\n  );\n};\n\nexport default HcpConsultations;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/DoctorPayout.js",["1254","1255","1256","1257","1258","1259"],"import React, { useEffect, useState } from \"react\";\nimport { NoData, EmptyTable } from \"components/layouts\";\nimport {\n  Grid,\n  Typography,\n  Chip,\n  Checkbox,\n  TableRow,\n  TableCell,\n  Avatar,\n} from \"@mui/material\";\nimport { timeMoment, dateMoment } from \"components/Utilities/Time\";\nimport { Loader } from \"components/Utilities\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { getPayoutData } from \"components/graphQL/useQuery\";\nimport { EnhancedTable } from \"components/layouts\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { payoutHeader } from \"components/Utilities/tableHeaders\";\nimport useAlert from \"hooks/useAlert\";\nimport { useSelector } from \"react-redux\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { isSelected } from \"helpers/isSelected\";\nimport Filter from \"components/Forms/Filters\";\nimport { useParams } from \"react-router-dom\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport { defaultPageInfo, payoutFilterBy } from \"helpers/mockData\";\nimport {\n  changeTableLimit,\n  deleteVar,\n  fetchMoreData,\n  filterData,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\n\nconst useStyles = makeStyles((theme) => ({\n  iconWrapper: {\n    width: 20,\n    height: 20,\n    borderRadius: \"50%\",\n    display: \"grid\",\n    placeContent: \"center\",\n    marginLeft: \"1rem\",\n    background: theme.palette.common.lightGreen,\n  },\n  button: {\n    \"&.css-1zf5oc-MuiButtonBase-root-MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"1rem\",\n      maxWidth: \"10rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .css-9tj150-MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.2rem\",\n      },\n\n      \"& .css-9tj150-MuiButton-endIcon\": {\n        marginLeft: \".3rem\",\n        marginTop: \"-.2rem\",\n      },\n    },\n  },\n\n  tableCell: {\n    \"&.css-1jilxo7-MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.6rem !important\",\n      height: \"3rem\",\n      borderRadius: \"1.3rem\",\n    },\n  },\n}));\n\nconst DoctorPayout = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { displayAlert } = useAlert();\n  const { hcpId } = useParams();\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n  const [payout, setPayout] = useState([]);\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\n\n  const [statusFilterValue, setStatusFilterValue] = useState(\"\");\n  const [fetchPayout, { loading, error, refetch, variables }] =\n    useLazyQuery(getPayoutData);\n\n  useEffect(() => {\n    try {\n      fetchPayout({\n        variables: { first: pageInfo?.limit, doctor: hcpId },\n      }).then(({ data }) => {\n        if (!data) throw Error(\"Couldn't fetch doctors payout data\");\n        setPageInfo(data?.getEarningStats?.payoutData?.PageInfo);\n        setPayout(data?.getEarningStats?.payoutData?.data);\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }, [fetchPayout, pageInfo?.limit, hcpId]);\n\n  const onFilterStatusChange = async (value) => {\n    try {\n      deleteVar(variables);\n      setStatusFilterValue(value);\n      const filterVariables = { status: value };\n\n      filterData(filterVariables, {\n        fetchData: fetchPayout,\n        refetch: refetch,\n        variables: variables,\n      })\n        .then((data) => {\n          setPayout(data?.getEarningStats?.payoutData?.data || []);\n          setPageInfo(data?.getEarningStats?.payoutData?.PageInfo || {});\n        })\n        .catch(() => {\n          refresh(setStatusFilterValue, \"\");\n        });\n    } catch (error) {\n      console.error(error);\n      refresh(setStatusFilterValue, \"\");\n    }\n  };\n\n  const refresh = async (setFilterValue, defaultVal) => {\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\n    setFilterValue(defaultVal);\n\n    deleteVar(variables);\n\n    refetch()\n      .then(({ data }) => {\n        setPayout(data?.getEarningStats?.payoutData?.data || []);\n        setPageInfo(data?.getEarningStats?.payoutData?.PageInfo || {});\n      })\n      .catch((error) => {\n        console.error(error);\n        displayAlert(\"error\", \"Failed to get patients data, Try again\");\n      });\n  };\n  const setTableData = async (response, errMsg) => {\n    const data = response?.data;\n    try {\n      if (data) {\n        setPageInfo(\n          data?.getEarningStats?.payoutData?.PageInfo || defaultPageInfo\n        );\n        setPayout(data?.getEarningStats?.payoutData?.data || []);\n      }\n    } catch (error) {\n      console.error(error);\n      displayAlert(\"error\", error.message);\n    }\n  };\n\n  if (error) return <NoData error={error} />;\n  if (loading) return <Loader />;\n  return (\n    <Grid container direction=\"column\" rowSpacing={2}>\n      <>\n        <Grid\n          item\n          container\n          justifyContent=\"space-between\"\n          style={{ paddingBottom: \"3rem\" }}\n        >\n          <Grid item container spacing={3} alignItems=\"center\">\n            <Grid item flex={1}>\n              <Typography noWrap variant=\"h1\" color=\"#2D2F39\">\n                Doctors Payout Table\n              </Typography>\n            </Grid>\n            <Grid item>\n              <Filter\n                onHandleChange={(e) => onFilterStatusChange(e?.target?.value)}\n                onClickClearBtn={() => onFilterStatusChange(\"\")}\n                options={payoutFilterBy}\n                name=\"status\"\n                placeholder=\"None\"\n                value={statusFilterValue}\n                hasClearBtn={true}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n        {payout.length > 0 ? (\n          <Grid item container>\n            <EnhancedTable\n              headCells={payoutHeader}\n              rows={payout}\n              paginationLabel=\"payout per page\"\n              hasCheckbox={true}\n              changeLimit={async (e) => {\n                const res = await changeTableLimit(fetchPayout, {\n                  first: e,\n                  doctor: hcpId,\n                });\n                await setTableData(res, \"Failed to change table limit.\");\n              }}\n              dataPageInfo={pageInfo}\n              handlePagination={async (page) => {\n                const res = await handlePageChange(\n                  fetchPayout,\n                  page,\n                  pageInfo,\n                  { doctor: hcpId }\n                );\n                await setTableData(res, \"Failed to change table page.\");\n              }}\n              fetchData={fetchPayout}\n              handleChangePage={fetchMoreData}\n            >\n              {payout?.map((row, index) => {\n                const { amount, createdAt, status, _id, doctorData } = row;\n                const data = doctorData || [];\n                const { firstName, lastName, picture } = data[0] || {};\n                const isItemSelected = isSelected(_id, selectedRows);\n                const labelId = `enhanced-table-checkbox-${index}`;\n\n                return (\n                  <TableRow\n                    hover\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={_id}\n                    selected={isItemSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        onClick={() =>\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\n                        }\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          \"aria-labelledby\": labelId,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell\n                      id={labelId}\n                      scope=\"row\"\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ color: theme.palette.common.black }}\n                    >\n                      {dateMoment(createdAt)}\n                    </TableCell>\n                    <TableCell\n                      id={labelId}\n                      scope=\"row\"\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ color: theme.palette.common.black }}\n                    >\n                      {timeMoment(createdAt)}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      {row?.doctorData && row?.doctorData[0] !== {} ? (\n                        <div\n                          style={{\n                            height: \"100%\",\n                            display: \"flex\",\n                            alignItems: \"left\",\n                          }}\n                        >\n                          <span style={{ marginRight: \"1rem\" }}>\n                            <Avatar\n                              alt={`Display Photo of ${firstName}`}\n                              src={picture ? picture : displayPhoto}\n                              sx={{ width: 24, height: 24 }}\n                            />\n                          </span>\n                          <span style={{ fontSize: \"1.25rem\" }}>{`${\n                            firstName && firstName\n                          } ${lastName && lastName}`}</span>\n                        </div>\n                      ) : (\n                        \"No Name\"\n                      )}\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ color: theme.palette.common.red }}\n                    >\n                      {amount}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      <Chip\n                        label={status}\n                        className={classes.badge}\n                        style={{\n                          background:\n                            status === \"Success\"\n                              ? theme.palette.common.lightGreen\n                              : status === \"Failed\"\n                              ? theme.palette.common.lightGreen\n                              : theme.palette.common.lightRed,\n                          color:\n                            status === \"Success\"\n                              ? theme.palette.common.green\n                              : status === \"Failed\"\n                              ? theme.palette.common.danger\n                              : theme.palette.common.red,\n                        }}\n                      />\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </EnhancedTable>\n          </Grid>\n        ) : (\n          <EmptyTable\n            headCells={payoutHeader}\n            paginationLabel=\"Payout  per page\"\n          />\n        )}\n      </>\n    </Grid>\n  );\n};\n\nexport default DoctorPayout;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Providers.js",["1260","1261","1262","1263","1264"],"import React, { useState, useEffect } from \"react\";\nimport { useTheme } from \"@mui/material/styles\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport { partnersHeadCells2 } from \"components/Utilities/tableHeaders\";\nimport { NoData, EmptyTable } from \"components/layouts\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport {\n  Grid,\n  TableRow,\n  TableCell,\n  Checkbox,\n  Alert,\n  Button,\n  Avatar,\n} from \"@mui/material\";\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\nimport { EnhancedTable } from \"components/layouts\";\nimport { makeStyles } from \"@mui/styles\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { DeleteOrDisable, ProviderModal } from \"components/modals\";\nimport { useSelector } from \"react-redux\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { isSelected } from \"helpers/isSelected\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useMutation, useLazyQuery, useQuery } from \"@apollo/client\";\nimport { getProviders /**/ } from \"components/graphQL/useQuery\";\nimport { deletProvider } from \"components/graphQL/Mutation\";\nimport { defaultPageInfo } from \"helpers/mockData\";\nimport {\n  changeTableLimit,\n  fetchMoreData,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport TableLayout from \"components/layouts/TableLayout\";\nimport { useParams } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  FormLabel: {\n    fontSize: \"1.6rem\",\n    color: theme.palette.common.dark,\n  },\n  btn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      width: \"100%\",\n    },\n  },\n  button: {\n    \"&.MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"1rem\",\n      maxWidth: \"10rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.2rem\",\n      },\n\n      \"& .MuiButton-endIcon\": {\n        marginLeft: \".3rem\",\n        marginTop: \"-.2rem\",\n      },\n    },\n  },\n  tableBtn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      height: \"3rem\",\n      fontSize: \"1.25rem\",\n      borderRadius: \"2rem\",\n      boxShadow: \"none\",\n\n      \"&:hover\": {\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n          color: \"#fff\",\n        },\n      },\n\n      \"&:active\": {\n        boxShadow: \"none\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.5rem\",\n      },\n    },\n  },\n  redBtn: {\n    \"&.MuiButton-root\": {\n      background: theme.palette.common.lightRed,\n      color: theme.palette.common.red,\n\n      \"&:hover\": {\n        background: theme.palette.error.light,\n        color: \"#fff\",\n      },\n    },\n  },\n  greenBtn: {\n    \"&.MuiButton-root\": {\n      background: theme.palette.common.lightGreen,\n      color: theme.palette.common.green,\n\n      \"&:hover\": {\n        background: theme.palette.success.light,\n        color: \"#fff\",\n      },\n    },\n  },\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.6rem !important\",\n      height: \"3rem\",\n      borderRadius: \"1.3rem\",\n    },\n  },\n  \"&.MuiButton-root\": {\n    ...theme.typography.btn,\n    background: theme.palette.common.black,\n    width: \"100%\",\n  },\n  checkbox: {\n    \"& .MuiSvgIcon-root\": {\n      fontSize: 28,\n    },\n    \"&.Mui-checked\": {\n      color: \"green !important\",\n    },\n  },\n}));\n\nconst Providers = () => {\n  const classes = useStyles();\n  const { id: ids } = useParams();\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\n  const [fetchProviders, { error, loading, refetch }] =\n    useLazyQuery(getProviders);\n  const { data: dat, error: err, loading: load } = useQuery(getProviders);\n\n  useEffect(() => {\n    fetchProviders({\n      variables: {\n        first: pageInfo?.limit || 10,\n        userTypeId: ids,\n      },\n    });\n    //eslint-disable-next-line\n  }, [fetchProviders]);\n\n  // const onChange = async (e) => {\n  //   setSearchHcp(e);\n  //   if (e == \"\") {\n  //     refetch();\n  //   } else refetch({ name: e });\n  // };\n  const [id, setId] = useState(null);\n  const [deleteModal, setdeleteModal] = useState(false);\n  const [deleteProvider] = useMutation(deletProvider);\n  // const [singleProvider] = useLazyQuery(getSingleProvider);\n  const handleDeleteOpenDialog = (id) => {\n    setId(id);\n    setdeleteModal(true);\n  };\n  const [providers, setProviders] = useState([]);\n\n  useEffect(() => {\n    if (dat) {\n      setProviders(dat.getProviders.provider);\n      setPageInfo(dat.getProviders.pageInfo);\n    }\n  }, [dat]);\n\n  const theme = useTheme();\n  const handleDialogOpen = () => setIsOpen(true);\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n\n  const initialValues = {\n    name: \"\",\n    type: \"\",\n    image: null,\n    iconAlt: null,\n  };\n\n  const onConfirm = async () => {\n    try {\n      await deleteProvider({\n        variables: { id },\n        refetchQueries: [{ query: getProviders }],\n      });\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  // const [searchHcp, setSearchHcp] = useState(\"\");\n  const [editId, setEditId] = useState(null);\n  const [isOpens, setIsOpens] = useState(false);\n  const handleEditCloseDialog = () => {\n    setEdit(false);\n  };\n  const [alert, setAlert] = useState(null);\n  const [edit, setEdit] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const handleDialogClose = async () => {\n    setIsOpen(false);\n    setEditId(null);\n    setSingleData();\n  };\n\n  /*   const handleDialogOpens1 = () => setIsOpens(true); */\n  const initialValues1 = {\n    name: \"\",\n    userTypeId: \"\",\n  };\n  const onSubmit1 = async (values) => {\n    const { name, userTypeId } = values;\n    await refetch({\n      name,\n      userTypeId,\n    });\n    handleDialogCloses();\n  };\n  const validationSchema1 = Yup.object({\n    name: Yup.string(\"Enter your hospital\").trim(),\n    userTypeId: Yup.string(\"Enter your userTypeId\").trim(),\n  });\n\n  const handleDialogCloses = () => setIsOpens(false);\n  const handleEditOpenDialog = (id) => {\n    setEdit(true);\n    setEditId(id);\n  };\n  const [singleData, setSingleData] = useState();\n\n  if (loading || load) return <Loader />;\n  if (error || err) return <NoData error={error} />;\n  return (\n    <>\n      <Grid\n        container\n        direction=\"column\"\n        gap={2}\n        flexWrap=\"nowrap\"\n        height=\"100%\"\n      >\n        <Grid\n          item\n          gap={{ sm: 4, xs: 2 }}\n          container\n          direction={{ md: \"row\", sm: \"column\" }}\n        >\n          <Grid item container justifyContent=\"space-between\">\n            <Grid item></Grid>\n            <Grid item>\n              <CustomButton\n                endIcon={<AddIcon />}\n                title=\"Add new Provider\"\n                type={buttonType}\n                onClick={handleDialogOpen}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n        <TableLayout>\n          {providers.length > 0 ? (\n            <Grid item container height=\"100%\" direction=\"column\">\n              <EnhancedTable\n                headCells={partnersHeadCells2}\n                rows={providers}\n                paginationLabel=\"Providers per page\"\n                hasCheckbox={true}\n                changeLimit={async (e) => {\n                  await changeTableLimit(fetchProviders, {\n                    first: e,\n                    userTypeId: ids,\n                  });\n                }}\n                dataPageInfo={pageInfo}\n                handlePagination={async (page) => {\n                  await handlePageChange(fetchProviders, page, pageInfo, {\n                    userTypeId: ids,\n                  });\n                }}\n              >\n                {providers.map((row, index) => {\n                  const { _id, name, icon } = row;\n                  const isItemSelected = isSelected(_id, selectedRows);\n\n                  const labelId = `enhanced-table-checkbox-${index}`;\n\n                  return (\n                    <TableRow\n                      hover\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={_id}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          onClick={() =>\n                            handleSelectedRows(\n                              _id,\n                              selectedRows,\n                              setSelectedRows\n                            )\n                          }\n                          color=\"primary\"\n                          checked={isItemSelected}\n                          inputProps={{\n                            \"aria-labelledby\": labelId,\n                          }}\n                        />\n                      </TableCell>\n                      <TableCell align=\"center\" className={classes.tableCell}>\n                        <div\n                          style={{\n                            height: \"100%\",\n                            display: \"flex\",\n                            alignItems: \"center\",\n                          }}\n                        >\n                          <span style={{ marginRight: \"1rem\" }}>\n                            <Avatar src={icon} sx={{ width: 24, height: 24 }} />\n                          </span>\n                          <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell align=\"center\" className={classes.tableCell}>\n                        <div\n                          style={{\n                            height: \"100%\",\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            justifyContent: \"space-around\",\n                          }}\n                        >\n                          <Button\n                            variant=\"contained\"\n                            disableRipple\n                            className={`${classes.tableBtn} ${classes.greenBtn}`}\n                            onClick={() => handleEditOpenDialog(_id)}\n                            endIcon={<EditIcon color=\"success\" />}\n                          >\n                            Edit Provider\n                          </Button>\n                          <Button\n                            variant=\"contained\"\n                            disableRipple\n                            className={`${classes.tableBtn} ${classes.redBtn}`}\n                            onClick={() => handleDeleteOpenDialog(_id)}\n                            endIcon={<DeleteIcon color=\"error\" />}\n                          >\n                            Delete Provider\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </EnhancedTable>\n            </Grid>\n          ) : (\n            <EmptyTable\n              headCells={partnersHeadCells2}\n              paginationLabel=\"Providers  per page\"\n            />\n          )}\n        </TableLayout>\n      </Grid>\n\n      <Modals\n        isOpen={isOpen}\n        title=\"Add new Provider\"\n        rowSpacing={5}\n        handleClose={handleDialogClose}\n      >\n        <ProviderModal\n          handleDialogClose={handleDialogClose}\n          type=\"add\"\n          setAlert={setAlert}\n          editId={editId}\n          setSingleData={setSingleData}\n          initialValues={initialValues}\n        />\n      </Modals>\n      {/* edit Modal */}\n      <Modals\n        isOpen={edit}\n        title=\"Edit Provider\"\n        rowSpacing={5}\n        handleClose={handleEditCloseDialog}\n      >\n        <ProviderModal\n          handleDialogClose={handleEditCloseDialog}\n          type=\"edit\"\n          editId={editId}\n          setAlert={setAlert}\n          initialValues={initialValues}\n          singleData={singleData}\n          setSingleData={setSingleData}\n        />\n      </Modals>\n\n      <DeleteOrDisable\n        open={deleteModal}\n        setOpen={setdeleteModal}\n        title=\"Delete Provider\"\n        onConfirm={onConfirm}\n        confirmationMsg=\"delete provider\"\n        btnValue=\"Delete\"\n      />\n\n      <Modals\n        isOpen={isOpens}\n        title=\"Filter\"\n        rowSpacing={5}\n        handleClose={handleDialogCloses}\n      >\n        <Formik\n          initialValues={initialValues1}\n          onSubmit={onSubmit1}\n          validationSchema={validationSchema1}\n          validateOnChange={false}\n          validateOnMount={false}\n          validateOnBlur={false}\n        >\n          {({ isSubmitting, isValid, dirty }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid item container direction=\"column\">\n                  <Grid item container>\n                    <FormikControl\n                      control=\"input\"\n                      name=\"name\"\n                      label=\"Hospital Name\"\n                      placeholder=\"Enter Hospital Name\"\n                    />\n                  </Grid>\n                  <Grid\n                    item\n                    style={{ marginBottom: \"18rem\", marginTop: \"3rem\" }}\n                  >\n                    <Grid container>\n                      <Grid item container>\n                        <FormikControl\n                          control=\"input\"\n                          name=\"userTypeId\"\n                          label=\"User Type\"\n                          placeholder=\"Enter User Type\"\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item>\n                    <CustomButton\n                      title=\"Apply Filter\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n    </>\n  );\n};\n\nexport default Providers;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpCaseNote.js",["1265"],"import React, { useEffect, Fragment, useState } from \"react\";\nimport { Grid, Chip, Avatar, Typography, Divider } from \"@mui/material\";\nimport { Modals, Loader, CustomButton } from \"components/Utilities\";\nimport { NoData } from \"components/layouts\";\nimport { useQuery } from \"@apollo/client\";\nimport { getConsult } from \"components/graphQL/useQuery\";\nimport { dateMoment, duration } from \"components/Utilities/Time\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { useParams } from \"react-router-dom\";\nimport { trucateString } from \"helpers/filterHelperFunctions\";\nimport Copy from \"components/Copy\";\nimport { daily } from \"components/Utilities/Time\";\n\nconst useStyles = makeStyles((theme) => ({\n  parentGridWrapper: {\n    background: \"#fff\",\n    borderRadius: \"1rem\",\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.1)\",\n\n    \"&:not(:last-of-type)\": {\n      marginBottom: \"5rem\",\n    },\n  },\n\n  infoBadge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.5rem\",\n      borderRadius: \"1.5rem\",\n      background: theme.palette.common.lightGreen,\n      color: theme.palette.common.green,\n    },\n  },\n\n  title: {\n    \"&.MuiTypography-root\": {\n      color: theme.palette.common.grey,\n      // marginRight: \"2rem\",\n      whitespace: \"wrap\",\n    },\n  },\n  item: {\n    padding: \"2rem 3rem\",\n    justifyContent: \"space-between\",\n    width: \"100%\",\n    flexWrap: \"nowrap\",\n    // justifyContent: \"space-between\",\n    \"&.MuiGrid-root > *\": {\n      flex: 1,\n    },\n  },\n  subItem: {\n    \"&.MuiGrid-container\": {\n      flexDirection: \"column\",\n      wordBreak: \"break-word\",\n    },\n  },\n}));\n\nconst HcpCaseNotes = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n\n  const { rowId } = useParams();\n\n  const [consult, setConsult] = useState([]);\n\n  const { loading, data, error } = useQuery(getConsult, {\n    variables: {\n      id: rowId,\n    },\n  });\n\n  const [isOpen, setIsOpen] = useState(false);\n  const handleDialogOpen = () => {\n    setIsOpen(true);\n  };\n  const handleDialogClose = () => {\n    setIsOpen(false);\n  };\n  useEffect(() => {\n    if (data) {\n      setConsult(data.getConsultation);\n    }\n  }, [data, rowId]);\n  if (error) return <NoData error={error} />;\n\n  if (loading) return <Loader />;\n  const {\n    _id,\n    prescription,\n    type,\n    consultationDuration,\n    consultationOwner,\n    referralId,\n    createdAt,\n    discomfortLevel,\n    status,\n    description,\n    doctorNote,\n    severity,\n    firstNotice,\n    contactMedium,\n    updatedAt,\n    patientData,\n    doctorData,\n    symptoms,\n  } = consult;\n\n  return (\n    <>\n      <Grid container direction=\"column\" gap={2} sx={{ margin: \"3rem 0rem\" }}>\n        <Grid\n          item\n          container\n          direction=\"column\"\n          className={classes.parentGridWrapper}\n        >\n          <Grid\n            item\n            container\n            flexWrap=\"wrap\"\n            className={classes.item}\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\n          >\n            <Grid item>\n              <Grid container className={classes.subItem} gap={2}>\n                <Grid item>\n                  <Typography variant=\"body1\" className={classes.title}>\n                    Consultation Date:\n                  </Typography>\n                </Grid>\n                <Grid item container>\n                  <Typography variant=\"h5\">{dateMoment(createdAt)}</Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid item container className={classes.subItem} gap={2}>\n                <Grid item>\n                  <Typography variant=\"body1\" className={classes.title}>\n                    Referral:\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  {referralId ? (\n                    <Grid item container gap={2}>\n                      <Typography variant=\"body1\">\n                        {trucateString(referralId, 10, \"front\")}\n                      </Typography>\n                      <Copy text={referralId} name=\"Consultation ID\" />\n                    </Grid>\n                  ) : (\n                    \"No value\"\n                  )}\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid\n                item\n                container\n                flexDirection=\"column\"\n                gap={2}\n                className={classes.subItem}\n              >\n                <Grid item>\n                  <Typography variant=\"body1\" className={classes.title}>\n                    Consultation ID:\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  {_id ? (\n                    <Grid item container gap={2}>\n                      <Typography variant=\"h5\">\n                        {trucateString(referralId, 10, \"front\")}\n                      </Typography>\n                      <Copy text={referralId} name=\"Consultation ID\" />\n                    </Grid>\n                  ) : (\n                    <Typography variant=\"h5\"> No value</Typography>\n                  )}\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Divider color={theme.palette.common.lighterGrey} />\n          <Grid\n            item\n            container\n            className={classes.item}\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\n          >\n            <Grid item>\n              <Grid container className={classes.subItem} gap={2}>\n                <Grid item>\n                  <Typography variant=\"body1\" className={classes.title}>\n                    Doctor:\n                  </Typography>\n                </Grid>\n                {patientData && Object.keys(patientData).length > 0 ? (\n                  <Grid item container alignItems=\"center\">\n                    <Grid item marginRight={2}>\n                      <Avatar\n                        src={patientData.image}\n                        alt={`Display photo of the ${patientData.firstName}`}\n                      />\n                    </Grid>\n                    <Grid item>\n                      <Typography variant=\"h5\">{`${patientData.firstName} ${patientData.lastName}`}</Typography>\n                    </Grid>\n                  </Grid>\n                ) : (\n                  <Typography variant=\"h5\">No Doctor</Typography>\n                )}\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid item container className={classes.subItem} gap={2}>\n                <Grid item>\n                  <Typography variant=\"body1\" className={classes.title}>\n                    Contact:\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"body1\">\n                    {contactMedium ? contactMedium : \"No Value\"}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid item container className={classes.subItem} gap={2}>\n                <Grid item>\n                  <Typography variant=\"body1\" className={classes.title}>\n                    Owner:\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"body1\">\n                    {consultationOwner ? consultationOwner : \"No Value\"}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Divider color={theme.palette.common.lighterGrey} />\n\n          <Grid\n            item\n            container\n            className={classes.item}\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\n          >\n            <Grid item container className={classes.subItem} gap={2}>\n              <Grid item>\n                <Typography variant=\"body1\" className={classes.title}>\n                  Severity:\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Grid container gap={1}>\n                  <Typography variant=\"body1\">\n                    {severity ? severity : \"No value\"}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item container className={classes.subItem} gap={2}>\n              <Grid item>\n                <Typography variant=\"body1\" className={classes.title}>\n                  First Notice:\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\">\n                  {\" \"}\n                  {firstNotice ? firstNotice : \"No value\"}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid item container className={classes.subItem} gap={2}>\n              <Grid item>\n                <Typography variant=\"body1\" className={classes.title}>\n                  Discomfort:\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\">\n                  {discomfortLevel ? discomfortLevel : \"No Value\"}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n\n          <Divider color={theme.palette.common.lighterGrey} />\n          <Grid\n            item\n            container\n            className={classes.item}\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\n          >\n            <Grid item container className={classes.subItem} gap={2}>\n              <Grid item>\n                <Typography variant=\"body1\" className={classes.title}>\n                  Symptoms:\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Grid container gap={1}>\n                  {symptoms ? (\n                    symptoms.map((symptom, index) => {\n                      return (\n                        <Typography key={index} variant=\"body1\">\n                          {`${symptom.name},`}\n                        </Typography>\n                      );\n                    })\n                  ) : (\n                    <Typography variant=\"body1\">No Value</Typography>\n                  )}\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid\n                item\n                container\n                flexDirection=\"column\"\n                className={classes.subItem}\n                gap={2}\n              >\n                <Grid item>\n                  <Typography variant=\"body1\" className={classes.title}>\n                    Status:\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Chip\n                    variant=\"contained\"\n                    label={status}\n                    className={classes.infoBadge}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid item container className={classes.subItem} gap={2}>\n                <Grid item>\n                  <Typography variant=\"body1\" className={classes.title}>\n                    Type:\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"body1\">\n                    {type ? type : \"No Value\"}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Divider color={theme.palette.common.lighterGrey} />\n          <Grid\n            item\n            container\n            className={classes.item}\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\n          >\n            <Grid item container className={classes.subItem} gap={2}>\n              <Grid item>\n                <Typography variant=\"body1\" className={classes.title}>\n                  Description:\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}>\n                  {description ? description : \"No Value\"}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid item container direction=\"column\" gap={2}>\n              <Grid item>\n                <Typography variant=\"body1\" className={classes.title}>\n                  Doctors Note:\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}>\n                  {doctorNote ? doctorNote : \"No Value\"}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid item container direction=\"column\" gap={2}>\n              <Grid item>\n                <Typography variant=\"body1\" className={classes.title}>\n                  Updated At:\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}>\n                  {dateMoment(updatedAt)}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Divider color={theme.palette.common.lighterGrey} />\n          <Grid item container justifyContent=\"flex-end\">\n            {prescription && (\n              <Grid item container width={{ md: \"20%\", xs: \"100%\", sm: \"50%\" }}>\n                <CustomButton\n                  title=\"View Prescription\"\n                  width=\"100%\"\n                  type={buttonType}\n                  onClick={handleDialogOpen}\n                />\n              </Grid>\n            )}\n          </Grid>\n          <Grid\n            item\n            container\n            className={classes.item}\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\n          >\n            <Grid item container className={classes.subItem} gap={2}>\n              <Grid item>\n                <Typography variant=\"body1\" className={classes.title}>\n                  Duration:\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}>\n                  {consultationDuration ? consultationDuration : \"No Value\"}\n                </Typography>\n              </Grid>\n            </Grid>\n            <Grid item container direction=\"column\" gap={2}></Grid>\n            <Grid item container direction=\"column\" gap={2}></Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Modals\n        isOpen={isOpen}\n        height={{ xs: \"90vh\" }}\n        title=\"Prescription\"\n        width={{ md: \"50vw\", sm: \"70vw\", xs: \"90vw\" }}\n        rowSpacing={2}\n        handleClose={handleDialogClose}\n      >\n        <Grid item container width=\"100%\" direction=\"row\">\n          <Grid\n            item\n            container\n            padding={{ md: \"2rem 0\", sm: \"1rem 0\", xs: \"1rem 0\" }}\n            // alignItems=\"center\"\n            justifyContent=\"space-between\"\n            width=\"100%\"\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\n            rowGap={{ xs: \"1rem\", sm: \"1.5rem\" }}\n          >\n            <Grid item>\n              <Grid\n                item\n                container\n                className={classes.subItem}\n                gap={{ md: 2, sm: 2, xs: 0 }}\n              >\n                <Grid item>\n                  <Typography variant=\"body1\" className={classes.title}>\n                    Doctor:\n                  </Typography>\n                </Grid>\n                {doctorData && Object.keys(doctorData).length > 0 ? (\n                  <Grid container alignItems=\"center\">\n                    <Grid item marginRight={2}>\n                      <Avatar\n                        src={doctorData.image}\n                        alt={`Display photo of the ${doctorData.firstName}`}\n                      />\n                    </Grid>\n                    <Grid item>\n                      <Typography variant=\"h5\">{`${doctorData.firstName} ${doctorData.lastName}`}</Typography>\n                    </Grid>\n                  </Grid>\n                ) : (\n                  <Typography variant=\"body1\">No Doctor</Typography>\n                )}\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid\n                item\n                container\n                className={classes.subItem}\n                gap={{ md: 2, sm: 2, xs: 0 }}\n              >\n                <Grid>\n                  <Typography variant=\"body1\" className={classes.title}>\n                    Prescription Date\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"h5\">{dateMoment(createdAt)}</Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid\n                item\n                container\n                className={classes.subItem}\n                gap={{ md: 2, sm: 2, xs: 0 }}\n              >\n                <Grid item>\n                  <Typography variant=\"body1\" className={classes.title}>\n                    Symptoms\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Grid container gap={1}>\n                    {symptoms ? (\n                      symptoms.map((i) => {\n                        return (\n                          <Typography key={i.name} variant=\"h5\">\n                            {i.name}\n                          </Typography>\n                        );\n                      })\n                    ) : (\n                      <Typography variant=\"h5\">No Value</Typography>\n                    )}\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Divider color={theme.palette.common.lighterGrey} />\n          {prescription && (\n            <Fragment>\n              <Grid\n                item\n                container\n                style={{ padding: \"2rem 0rem\" }}\n                alignItems=\"center\"\n                justifyContent=\"space-between\"\n                sx={{ flexWrap: \"nowrap\" }}\n              >\n                <Grid item>\n                  <Typography variant=\"body1\" className={classes.title}>\n                    Drug\n                  </Typography>\n                </Grid>\n\n                <Grid item>\n                  <Typography variant=\"body1\" className={classes.title}>\n                    Dosage\n                  </Typography>\n                </Grid>\n\n                <Grid item>\n                  <Typography variant=\"body1\" className={classes.title}>\n                    Frequency\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"body1\" className={classes.title}>\n                    Mode\n                  </Typography>\n                </Grid>\n              </Grid>\n              <Divider color={theme.palette.common.lighterGrey} />\n            </Fragment>\n          )}\n\n          {prescription &&\n            prescription.map((i, index) => {\n              return (\n                <>\n                  <Grid\n                    key={index}\n                    item\n                    container\n                    style={{ color: \"#4f4f4f\" }}\n                    alignItems=\"center\"\n                    justifyContent=\"space-between\"\n                    sx={{ flexWrap: \"nowrap\", textAlign: \"left\" }}\n                  >\n                    <Grid item>\n                      <Typography variant=\"body1\" className={classes.title}>\n                        {i.drugName}\n                      </Typography>\n                    </Grid>\n\n                    <Grid item>\n                      <Typography variant=\"body1\" className={classes.title}>\n                        {`${i.dosageQuantity} ${i.dosage}`}\n                      </Typography>\n                    </Grid>\n\n                    <Grid item>\n                      <Typography variant=\"body1\" className={classes.title}>\n                        {duration(i.dosageFrequency.duration)}{\" \"}\n                        {daily(i.dosageFrequency.day)}\n                      </Typography>\n                    </Grid>\n                    <Grid item>\n                      <Typography variant=\"body1\" className={classes.title}>\n                        {i.mode}\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                  <Divider color={theme.palette.common.lighterGrey} />\n                </>\n              );\n            })}\n          <Grid\n            item\n            container\n            padding={{ md: \"2rem 0\", sm: \"1rem 0\", xs: \"1rem 0\" }}\n            alignItems=\"center\"\n            justifyContent=\"space-between\"\n            sx={{ flexWrap: \"nowrap\" }}\n          >\n            <Grid\n              item\n              container\n              direction=\"column\"\n              gap={{ md: 2, sm: 2, xs: 0 }}\n            >\n              <Grid item>\n                <Typography variant=\"body1\" className={classes.title}>\n                  Doctors Note:\n                </Typography>\n              </Grid>\n              <Grid item>\n                <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}>\n                  {doctorNote ? doctorNote : \"No Value\"}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Modals>\n    </>\n  );\n};\n\nexport default HcpCaseNotes;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ViewMessage.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpAvailability.js",["1266"],"import React, { useEffect, useState } from \"react\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { AvailabilityCard, Loader } from \"components/Utilities\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\nimport { getAvailability } from \"components/graphQL/useQuery\";\nimport { NoData } from \"components/layouts\";\n\nconst HcpAvailability = () => {\n  const [availabiltyArray, setAvailabiltyArray] = useState([]);\n  const { hcpId } = useParams();\n  const { loading, data, error } = useQuery(getAvailability, {\n    variables: {\n      id: hcpId,\n    },\n  });\n  useEffect(() => {\n    if (data) setAvailabiltyArray(data?.getAvailabilities?.availability);\n  }, [data]);\n\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error} />;\n  return (\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\n      <Grid\n        item\n        container\n        direction=\"column\"\n        gap={2}\n        flexWrap=\"nowrap\"\n        height=\"100%\"\n        sx={{ margin: \"2.5rem 0rem\" }}\n      >\n        {availabiltyArray.length > 0 ? (\n          availabiltyArray.map((availability, index) => {\n            if (availability?.times) {\n              return (\n                <Grid item key={index}>\n                  <AvailabilityCard availability={availability} />\n                </Grid>\n              );\n            } else {\n              return null;\n            }\n          })\n        ) : (\n          <NoData />\n        )}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default HcpAvailability;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpAppointments.js",["1267","1268","1269"],"import React, { useState, useEffect } from \"react\";\nimport { Grid, Divider, Avatar, Typography } from \"@mui/material\";\nimport { Modals, CustomButton, Loader } from \"components/Utilities\";\nimport { timeConverter, timeMoment } from \"components/Utilities/Time\";\nimport * as Yup from \"yup\";\nimport { updateAppointment } from \"components/graphQL/Mutation\";\nimport { DeleteOrDisable } from \"components/modals\";\nimport { Formik, Form } from \"formik\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { getAppoint, getDOCAppoint } from \"components/graphQL/useQuery\";\nimport { deleteAppointment } from \"components/graphQL/Mutation\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport { makeStyles } from \"@mui/styles\";\nimport useAlert from \"hooks/useAlert\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { ReactComponent as CalendarIcon } from \"assets/images/calendar.svg\";\nimport { ReactComponent as TimerIcon } from \"assets/images/timer.svg\";\nimport AssignmentIcon from \"@mui/icons-material/Assignment\";\nimport { useParams } from \"react-router-dom\";\nimport { NoData } from \"components/layouts\";\n\nconst useStyles = makeStyles((theme) => ({\n  parentGridWrapper: {\n    background: \"#fff\",\n    borderRadius: \"1rem\",\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.1)\",\n\n    \"&:not(:last-of-type)\": {\n      marginBottom: \"5rem\",\n    },\n  },\n\n  infoBadge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.5rem\",\n      borderRadius: \"1.5rem\",\n      background: theme.palette.common.lightGreen,\n      color: theme.palette.common.green,\n    },\n  },\n\n  title: {\n    \"&.MuiTypography-root\": {\n      color: theme.palette.common.grey,\n      // marginRight: \"2rem\",\n    },\n  },\n}));\n\nconst HcpAppointments = () => {\n  const { hcpId } = useParams();\n  const classes = useStyles();\n  const theme = useTheme();\n  const { displayAlert } = useAlert();\n  const [appointment, setAppointment] = useState([]);\n  const [updateAppoint] = useMutation(updateAppointment);\n  const { loading, data, error } = useQuery(getDOCAppoint, {\n    variables: {\n      id: hcpId,\n      orderBy: \"-createdAt\",\n    },\n  });\n  const [deleteAppointments] = useMutation(deleteAppointment);\n  useEffect(() => {\n    if (data) {\n      setAppointment(data.getAppointments.data);\n    }\n  }, [data, hcpId]);\n  const handleDeleteOpenDialog = (id) => {\n    setId(id);\n    setdeleteModal(true);\n  };\n\n  const greenButton = {\n    background: theme.palette.common.lightGreen,\n    hover: theme.palette.success.light,\n    active: theme.palette.success.dark,\n  };\n  const [patientId, setPatientId] = useState(null);\n  const handleSchedule = (id, patient) => {\n    setIsPatients(true);\n    setEditid(id);\n    setPatientId(patient);\n  };\n  const [id, setId] = useState(null);\n  const [isPatients, setIsPatients] = useState(false);\n  const [deleteModal, setdeleteModal] = useState(false);\n  const onConfirm = async () => {\n    try {\n      await deleteAppointments({\n        variables: { id },\n\n        refetchQueries: [\n          {\n            query: getDOCAppoint,\n            variables: {\n              id: hcpId,\n              orderBy: \"-createdAt\",\n            },\n          },\n        ],\n      });\n      displayAlert(\"success\", \"Appointment Deleted Successfully\");\n    } catch (error) {\n      console.log(error);\n      displayAlert(\"error\", error);\n    }\n  };\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n  const handlePatientCloses = () => setIsPatients(false);\n  const redButton = {\n    background: theme.palette.common.lightRed,\n    hover: theme.palette.error.light,\n    active: theme.palette.error.dark,\n  };\n\n  const [editId, setEditid] = useState(null);\n  const initialValues1 = {\n    date: \"\",\n  };\n  const validationSchema1 = Yup.object({\n    date: Yup.string(\"select date and time \").required(\n      \"Date  and time is required\"\n    ),\n  });\n  const onSubmit1 = async (values) => {\n    const { date } = values;\n\n    const timeValue = timeMoment(date);\n    const dateValue = timeConverter(date);\n    try {\n      await updateAppoint({\n        variables: {\n          id: editId,\n          date: dateValue,\n          time: timeValue,\n          doctor: hcpId,\n          patient: patientId,\n        },\n        refetchQueries: [\n          {\n            query: getAppoint,\n            variables: {\n              id: patientId,\n              orderBy: \"-createdAt\",\n            },\n          },\n          {\n            query: getDOCAppoint,\n            variables: {\n              id: hcpId,\n              orderBy: \"-createdAt\",\n            },\n          },\n        ],\n      });\n      displayAlert(\"success\", \"Appointment Updated Successfully\");\n    } catch (error) {\n      console.log(error);\n      displayAlert(\"error\", error);\n    }\n    handlePatientCloses();\n  };\n\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error} />;\n  return (\n    <>\n      <Grid\n        container\n        gap={2}\n        flexWrap=\"nowrap\"\n        direction=\"column\"\n        height=\"100%\"\n      >\n        {appointment.length > 0 ? (\n          appointment.map((appoint) => (\n            <Grid\n              item\n              container\n              direction=\"column\"\n              key={appoint._id}\n              className={classes.parentGridWrapper}\n            >\n              <Grid\n                item\n                container\n                style={{ maxWidth: \"60rem\", padding: \"4rem 5rem\" }}\n              >\n                <Grid\n                  item\n                  container\n                  alignItems=\"center\"\n                  justifyContent=\"space-between\"\n                >\n                  <Grid item>\n                    <Typography variant=\"body1\" className={classes.title}>\n                      Consultation Date:\n                    </Typography>\n                  </Grid>\n                  <Grid item>\n                    <Grid container alignItems=\"center\">\n                      <Grid item style={{ marginRight: \"1.5rem\" }}>\n                        <CalendarIcon\n                          fill={theme.palette.common.lightGrey}\n                          height={14}\n                          width={10}\n                        />\n                      </Grid>\n                      <Grid item>\n                        <Typography variant=\"body1\">{appoint.date}</Typography>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item>\n                    <Grid container alignItems=\"center\">\n                      <Grid item style={{ marginRight: \"1.5rem\" }}>\n                        <TimerIcon fill={theme.palette.common.red} />\n                      </Grid>\n                      <Grid item>\n                        <Typography variant=\"body1\">{appoint.time}</Typography>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Divider color={theme.palette.common.lighterGrey} />\n              <Grid item style={{ padding: \"2rem 5rem\" }}>\n                <Grid container gap={2} alignItems=\"center\">\n                  <Grid item>\n                    <Typography variant=\"body1\" className={classes.title}>\n                      Patient:\n                    </Typography>\n                  </Grid>\n                  <Grid item>\n                    <Avatar\n                      src={\n                        appoint.patientData.picture\n                          ? appoint.patientData.picture\n                          : displayPhoto\n                      }\n                      alt=\"Display Photo of the patient\"\n                    />\n                  </Grid>\n                  <Grid item>\n                    <Typography variant=\"body1\">{`${appoint.patientData.firstName} ${appoint.patientData.lastName}`}</Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Divider color={theme.palette.common.lighterGrey} />\n              <Grid item style={{ padding: \"3rem 5rem\" }}>\n                <Grid container direction=\"column\">\n                  <Grid item style={{ marginBottom: \"1rem\" }}>\n                    <Typography variant=\"body1\" className={classes.title}>\n                      Meeting Details\n                    </Typography>\n                  </Grid>\n                  <Grid item>\n                    <Typography variant=\"body2\">\n                      {appoint.details ? appoint.details : \"No Value\"}\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Divider color={theme.palette.common.lighterGrey} />\n              <Grid item>\n                <Grid\n                  container\n                  justifyContent=\"flex-end\"\n                  style={{ padding: \"2rem 5rem\" }}\n                >\n                  <Grid item style={{ marginRight: \"3rem\" }}>\n                    <CustomButton\n                      title=\"Reschedule\"\n                      type={greenButton}\n                      height=\"3.5rem\"\n                      textColorOnHover=\"#fff\"\n                      onClick={() =>\n                        handleSchedule(appoint._id, appoint.patient)\n                      }\n                      textColor={theme.palette.common.green}\n                      endIcon={<AssignmentIcon color=\"success\" />}\n                      borderRadius=\"3rem\"\n                    />\n                  </Grid>\n                  <Grid item>\n                    <CustomButton\n                      title=\"Cancel\"\n                      type={redButton}\n                      height=\"3.5rem\"\n                      textColorOnHover=\"#fff\"\n                      onClick={() => handleDeleteOpenDialog(appoint._id)}\n                      textColor={theme.palette.common.red}\n                      endIcon={<AssignmentIcon color=\"error\" />}\n                      borderRadius=\"3rem\"\n                    />\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          ))\n        ) : (\n          <NoData />\n        )}\n      </Grid>\n\n      <DeleteOrDisable\n        open={deleteModal}\n        setOpen={setdeleteModal}\n        title=\"Delete Appointment\"\n        onConfirm={onConfirm}\n        confirmationMsg=\"delete Appointment\"\n        btnValue=\"Delete\"\n      />\n\n      <Modals\n        isOpen={isPatients}\n        title=\"Reschedule Appointment\"\n        rowSpacing={5}\n        height=\"auto\"\n        handleClose={handlePatientCloses}\n      >\n        <Formik\n          initialValues={initialValues1}\n          onSubmit={onSubmit1}\n          validationSchema={validationSchema1}\n          validateOnChange={false}\n          validateOnMount={false}\n          validateOnBlur={false}\n        >\n          {({ isSubmitting, dirty, isValid, setFieldValue }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid item container direction=\"column\" gap={2}>\n                  <Grid item container>\n                    <Grid container spacing={2}>\n                      <Grid item md>\n                        <FormikControl\n                          control=\"time\"\n                          name=\"date\"\n                          label=\"Date\"\n                          placeholder=\"Choose Date and Time\"\n                          setFieldValue={setFieldValue}\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid\n                    item\n                    container\n                    alignItems=\"flex-end\"\n                    marginTop={5}\n                    xs={12}\n                  >\n                    <CustomButton\n                      title=\"Reschedule Appointment\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n    </>\n  );\n};\n\nexport default HcpAppointments;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Prescriptions.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/PendingPayout.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/PatientProfile.js",["1270"],"import React, { useState, useEffect } from \"react\";\nimport { dateMoment } from \"components/Utilities/Time\";\nimport { NoData } from \"components/layouts\";\nimport { Grid } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport {\n  CustomButton,\n  Loader,\n  DisplayProfile,\n  ProfileCard,\n} from \"components/Utilities\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport { useTheme } from \"@mui/material/styles\";\nimport PersonRemoveIcon from \"@mui/icons-material/PersonRemove\";\nimport { DeleteOrDisable } from \"components/modals\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { deleteProfile } from \"components/graphQL/Mutation\";\nimport {\n  getPatients,\n  getProfile,\n  verifiedEmail,\n} from \"components/graphQL/useQuery\";\n\nconst useStyles = makeStyles((theme) => ({\n  gridsWrapper: {\n    background: \"#fff\",\n    borderRadius: \"1rem\",\n    padding: \"1rem\",\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\n  },\n\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.3rem !important\",\n      //   height: \"2.7rem\",\n      background: theme.palette.common.lightGreen,\n      color: theme.palette.common.green,\n      borderRadius: \"1.5rem\",\n    },\n  },\n\n  cardGrid: {\n    background: \"#fff\",\n    borderRadius: \"1rem\",\n    padding: \"4rem 5rem\",\n    height: \"16.1rem\",\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\n  },\n\n  linkIcon: {\n    \"&.MuiSvgIcon-root\": {\n      fontSize: \"1.25rem\",\n      color: theme.palette.common.green,\n      marginLeft: \"1.2rem\",\n    },\n  },\n  link: {\n    textDecoration: \"none\",\n    color: theme.palette.common.green,\n    cursor: \"pointer\",\n  },\n\n  buttonsGridWrapper: {\n    height: \"16.1rem\",\n  },\n}));\n\nconst PatientProfile = () => {\n  const { patientId } = useParams();\n  const doci = localStorage.getItem(\"userDociId\");\n  const { loading, data, error } = useQuery(getProfile, {\n    variables: {\n      profileId: patientId,\n    },\n  });\n  const { data: emailStatus, loading: emailLoading } = useQuery(verifiedEmail, {\n    variables: {\n      dociId: doci,\n    },\n  });\n\n  const [disableUser] = useMutation(deleteProfile);\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const [patientProfile, setPatientProfile] = useState(\"\");\n  const [emailStat, setEmailStat] = useState(false);\n\n  useEffect(() => {\n    if (emailStatus) {\n      setEmailStat(emailStatus.accounts.data[0].isEmailVerified);\n    }\n  }, [emailStatus]);\n  useEffect(() => {\n    if (data) {\n      setPatientProfile(data.profile);\n    }\n  }, [data, patientId]);\n\n  const history = useHistory();\n  const onConfirm = async () => {\n    try {\n      await disableUser({\n        variables: { id: patientId },\n        refetchQueries: [{ query: getPatients }],\n      });\n      history.push(\"/patients\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const [openDisablePatient, setOpenDisablePatient] = useState(false);\n\n  const trasparentButton = {\n    background: \"transparent\",\n    hover: \"#fafafa\",\n    active: \"#f4f4f4\",\n  };\n\n  if (loading || emailLoading) return <Loader />;\n  if (error) return <NoData error={error} />;\n  const {\n    firstName,\n    lastName,\n    dociId,\n    status,\n    gender,\n    image,\n    createdAt,\n    provider,\n    phoneNumber,\n    email,\n  } = patientProfile;\n  return (\n    <Grid container direction=\"column\" gap={4}>\n      <Grid item>\n        <DisplayProfile\n          fullName={`${firstName} ${lastName}`}\n          displayPhoto={image ? image : displayPhoto}\n          medicalTitle=\"User ID\"\n          statusId={dociId?.split(\"-\")[1]}\n          status={status ? status : \"No Value\"}\n          chatPath={`/patients/${patientId}/profile/chat`}\n        />\n      </Grid>\n      {/* <Grid item container> */}\n      <Grid item container spacing={4} justifyContent=\"space-between\">\n        <Grid item container md={6} sm={6} xs={12}>\n          <ProfileCard text=\"Gender\" value={gender} />\n        </Grid>\n        <Grid item container md={6} sm={6} xs={12}>\n          <ProfileCard text=\"Created At\" value={dateMoment(createdAt)} />\n        </Grid>\n        <Grid item container md={6} sm={6} xs={12}>\n          <ProfileCard\n            text=\"Provider\"\n            value={provider ? provider : \"No Provider\"}\n          />\n        </Grid>\n        <Grid item container md={6} sm={6} xs={12}>\n          <ProfileCard\n            text=\"Verified\"\n            value={emailStat == \"false\" ? \"Not Verified\" : \"Verified\"}\n          />\n        </Grid>\n        <Grid item container md={6} sm={6} xs={12} mx=\"auto\">\n          <ProfileCard\n            text=\"Email Address\"\n            value={\n              email ? (\n                <a href={`mailto:${email}`} className={classes.link}>\n                  {email}\n                </a>\n              ) : (\n                \"No Email Provided\"\n              )\n            }\n          />\n        </Grid>\n        <Grid item container md={6} sm={6} xs={12}>\n          <ProfileCard\n            text=\"Phone Number\"\n            value={\n              phoneNumber ? (\n                <a href={`tel:+234${phoneNumber}`} className={classes.link}>\n                  {phoneNumber}\n                </a>\n              ) : (\n                \"No Phone Number\"\n              )\n            }\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        item\n        container\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        className={`${classes.gridsWrapper} ${classes.buttonsGridWrapper}`}\n      >\n        <Grid item>\n          <CustomButton\n            endIcon={<PersonRemoveIcon />}\n            title=\"Disable Patient\"\n            type={trasparentButton}\n            textColor={theme.palette.common.red}\n            onClick={() => setOpenDisablePatient(true)}\n          />\n        </Grid>\n\n        <DeleteOrDisable\n          open={openDisablePatient}\n          setOpen={setOpenDisablePatient}\n          title=\"Delete Partner\"\n          btnValue=\"disable\"\n          confirmationMsg=\"disable Patient\"\n          onConfirm={onConfirm}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default PatientProfile;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Partners.js",["1271","1272","1273","1274","1275","1276","1277","1278","1279","1280"],"import React, { useState, useEffect } from \"react\";\nimport { Formik, Form } from \"formik\";\nimport { useSnackbar } from \"notistack\";\nimport { useSelector } from \"react-redux\";\nimport { useTheme } from \"@mui/material/styles\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\nimport {\n  Checkbox,\n  TableCell,\n  Avatar,\n  TableRow,\n  Button,\n  Grid,\n  Typography,\n} from \"@mui/material\";\n\nimport useAlert from \"hooks/useAlert\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { categoryFilterOptions, defaultPageInfo } from \"helpers/mockData\";\nimport { useStyles } from \"styles/partnersPageStyles\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport {\n  changeTableLimit,\n  deleteItem,\n  deleteVar,\n  filterData,\n  handlePageChange,\n  banks,\n} from \"helpers/filterHelperFunctions\";\nimport DeletePartner from \"components/modals/DeleteOrDisable\";\nimport { partnersHeadCells } from \"components/Utilities/tableHeaders\";\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\nimport {\n  addPartner,\n  addPartnerCategory,\n  regeneratePartnerProfileUrl,\n} from \"components/graphQL/Mutation\";\nimport {\n  getPartners,\n  getSingleProvider,\n  getProviders,\n  DELETE_PARTNER,\n} from \"components/graphQL/useQuery\";\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\nimport {\n  addNewPartnerValidationSchema,\n  addPartnerValidationSchema,\n  filterPartnersValidationSchema,\n} from \"helpers/validationSchemas\";\nimport Filter from \"components/Forms/Filters\";\nimport { PageInfo } from \"components/graphQL/fragment\";\nimport TableLayout from \"components/layouts/TableLayout\";\n\nconst Partners = () => {\n  const theme = useTheme();\n  const classes = useStyles();\n  const { displayAlert } = useAlert();\n  /* const [setCategoryDatas] = useState([]); */\n  const { setSelectedRows } = useActions();\n  const { enqueueSnackbar } = useSnackbar();\n  const [partner, setPartners] = useState([]);\n  const [dropDown, setDropDown] = useState([]);\n  const [addPartners] = useMutation(addPartner);\n  const categoryData = useQuery(getSingleProvider);\n  const [delete_partner] = useLazyQuery(DELETE_PARTNER);\n  /*   const [searchPartner, setSearchPartner] = useState(\"\"); */\n  const [isDeleting, setIsDeleting] = useState({});\n  const [addPartnerCat] = useMutation(addPartnerCategory);\n  const { data: da, loading: load } = useQuery(getProviders);\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\n  const [openAddPartner, setOpenAddPartner] = useState(false);\n  const [openFilterPartner, setOpenFilterPartner] = useState(false);\n  const [openDeletePartner, setOpenDeletePartner] = useState(false);\n  const [partnerToDelete, setPartnerToDelete] = useState(null);\n  const [partnerFilterValues, setPartnerFilterValues] = useState({\n    category: \"\",\n  });\n  const { selectedRows /* page */ } = useSelector((state) => state.tables);\n  const [openAddPartnerCategory, setAddPartnerCategory] = useState(false);\n  const [fetchPartners, { loading, error, refetch, variables }] =\n    useLazyQuery(getPartners);\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\n\n  const specializations = [\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\n    { key: \"Hospital\", value: \"Hospital\" },\n  ];\n  const categoryOptions = [\n    { key: \"Diagnostics\", value: \"diagnostics\" },\n    { key: \"Pharmacy\", value: \"pharmacy\" },\n    { key: \"Hospital\", value: \"hospital\" },\n  ];\n  const classificationOptions = [\n    { key: \"Primary Healthcare\", value: \"Primary Healthcare\" },\n    { key: \"Secondary Healthcare\", value: \"Secondary Healthcare\" },\n  ];\n\n  const specializationOptions = [\n    { key: \"Dental Care\", value: \"Dental Care\" },\n    { key: \"Eye Clinic\", value: \"Eye Clinic\" },\n    { key: \"Skin Care\", value: \"Skin Care\" },\n    { key: \"Mental Care\", value: \"Mental Care\" },\n  ];\n  const specializations5 = [\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\n    { key: \"Hospital\", value: \"Hospital\" },\n  ];\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n\n  const darkButtonType = {\n    background: theme.palette.primary.main,\n    hover: theme.palette.primary.light,\n    active: theme.palette.primary.dark,\n  };\n  const initialValues = {\n    Name: \"\",\n    date: \"\",\n    category: \"\",\n  };\n\n  const initialValues1 = {\n    name: \"\",\n    email: \"\",\n    specialization: \"\",\n    category: \"\",\n    account: \"\",\n    address: \"\",\n    phone: \"\",\n    classification: \"\",\n    bank: \"\",\n    image: null,\n    provider: \"\",\n  };\n\n  const initialValues2 = {\n    category: \"\",\n  };\n\n  const setTableData = async (response, errMsg) => {\n    response\n      .then((res) => {\n        const { data } = res;\n        if (data) {\n          setPartners(data?.getPartners?.data || []);\n          setPageInfo(data?.getPartners?.pageInfo || defaultPageInfo);\n        }\n        if (!data) {\n          setPartners(res?.getPartners?.data || []);\n          setPageInfo(res?.getPartners?.pageInfo || defaultPageInfo);\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n        displayAlert(\"error\", errMsg);\n      });\n  };\n\n  const fetchPartnersData = async () => {\n    const res = fetchPartners({\n      variables: {\n        first: pageInfo.limit,\n      },\n    });\n    setTableData(res, \"Couldn't fetch Partners data\");\n  };\n\n  useEffect(() => {\n    fetchPartnersData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (da) {\n      const datas = da.getProviders.provider;\n      setDropDown(\n        datas &&\n          datas.map((i) => {\n            return { key: i.name, value: i._id };\n          })\n      );\n    }\n  }, [da]);\n\n  useEffect(() => {\n    (partner || []).map((p) => {\n      const newIsDeleting = isDeleting;\n      setIsDeleting({ [p._id]: false, ...newIsDeleting });\n      return null;\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [partner]);\n\n  const onSubmit = (values) => {\n    console.log(values);\n  };\n\n  const onSubmit2 = async (values, onSubmitProps) => {\n    const { category } = values;\n\n    try {\n      const addCatRes = await addPartnerCat({\n        variables: {\n          name: category,\n        },\n      });\n\n      if (addCatRes?.addPartner?.partner) {\n        setAddPartnerCategory(false);\n        onSubmitProps.resetForm();\n        const res = refetch();\n        setTableData(res, \"Couldn't fetch partners.\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const onSubmit1 = async (values, onSubmitProps) => {\n    console.log(values);\n    let {\n      name,\n      email,\n      category,\n      phone,\n      bank,\n      specialization,\n      provider,\n      image,\n      account,\n    } = values;\n    name = name.trim();\n\n    try {\n      await addPartners({\n        variables: {\n          name,\n          email,\n          category,\n          specialization,\n          account,\n          phone,\n          bank,\n          logoImageUrl: image,\n          providerId: provider,\n        },\n        refetchQueries: [{ query: getPartners }],\n      });\n      enqueueSnackbar(\"Partner added successfully\", {\n        variant: \"success\",\n      });\n      onSubmitProps.resetForm();\n      setOpenAddPartner(false);\n    } catch (err) {\n      console.log(err, \"err\");\n      enqueueSnackbar(\"Email is already taken\", {\n        variant: \"error\",\n      });\n    }\n  };\n\n  const onFilterCategoryChange = async (value) => {\n    try {\n      deleteVar(variables);\n      setPartnerFilterValues({ ...partnerFilterValues, category: value });\n      const filterVariables = { category: value };\n\n      const res = filterData(filterVariables, {\n        fetchData: fetchPartners,\n        refetch: refetch,\n        variables: variables,\n      });\n      await setTableData(res, \"couldn't filter table.\");\n    } catch (error) {\n      console.error(error);\n      refresh(setPartnerFilterValues, \"\");\n    }\n  };\n\n  const refresh = async (setFilterValue, defaultVal) => {\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\n    setFilterValue(defaultVal);\n\n    deleteVar(variables);\n\n    const res = refetch();\n    await setTableData(res, \"couldn't filter table.\");\n  };\n  const [newProfileUrl, setNewProfileUrl] = useState(\"\");\n\n  useEffect(() => {\n    setNewProfileUrl(daa?.regeneratePartnerProfileUrl?.partner?.profileUrl);\n  }, [daa]);\n  const [Id, setId] = useState(\"\");\n  const handleGenerateLink = async (id) => {\n    setId(id);\n    await regenerate({\n      variables: {\n        id,\n      },\n      refetchQueries: [\n        {\n          query: getPartners,\n          variables: {\n            variables: pageInfo.page,\n            limit: PageInfo.limit,\n          },\n        },\n      ],\n    });\n  };\n\n  const z = (id) => {\n    let b = \"\";\n    const m = daa?.regeneratePartnerProfileUrl?.partner?._id;\n    if (id === m) {\n      b = m;\n    } else {\n      b = \"\";\n    }\n    return b;\n  };\n  useEffect(() => {\n    partner.map((item) => {\n      if (item._id === Id) {\n        return {\n          ...item,\n          profileUrl: newProfileUrl,\n        };\n      }\n    });\n\n    //eslint-disable-next-line\n  }, [Id, newProfileUrl]);\n  if (error || categoryData.error)\n    return <NoData error={error || categoryData.error} />;\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      gap={{ sm: 4, xs: 2 }}\n      flexWrap=\"nowrap\"\n      height=\"100%\"\n    >\n      <Grid\n        item\n        container\n        gap={2}\n        direction={{ md: \"row\", sm: \"row\", xs: \"column\" }}\n      >\n        <Grid\n          item\n          container\n          justifyContent=\"flex-end\"\n          alignItems=\"center\"\n          flex={{ sm: 1, xs: 1, md: 1 }}\n        >\n          <Grid item>\n            <CustomButton\n              endIcon={<PersonAddAlt1Icon />}\n              title=\"Add \"\n              type={darkButtonType}\n              onClick={() => setOpenAddPartner(true)}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      <TableLayout\n        filters={\n          <Filter\n            onHandleChange={(e) => onFilterCategoryChange(e?.target?.value)}\n            onClickClearBtn={() => onFilterCategoryChange(\"\")}\n            options={[{ key: \"Category\", value: \"\" }, ...categoryFilterOptions]}\n            name=\"category\"\n            placeholder=\"None\"\n            value={partnerFilterValues.category}\n            hasClearBtn={true}\n            disable={loading}\n          />\n        }\n      >\n        {load || loading ? (\n          <Loader />\n        ) : partner.length > 0 ? (\n          <Grid item container height=\"100%\" direction=\"column\">\n            <EnhancedTable\n              headCells={partnersHeadCells}\n              rows={partner}\n              paginationLabel=\"Partner per page\"\n              hasCheckbox={true}\n              changeLimit={async (e) => {\n                const res = changeTableLimit(fetchPartners, {\n                  first: e,\n                });\n                await setTableData(res, \"Failed to change table limit.\");\n              }}\n              dataPageInfo={pageInfo}\n              handlePagination={async (page) => {\n                const res = handlePageChange(fetchPartners, page, pageInfo, {});\n                await setTableData(res, \"Failed to change page.\");\n              }}\n            >\n              {partner.map((row, index) => {\n                const isItemSelected = isSelected(row.id, selectedRows);\n                const labelId = `enhanced-table-checkbox-${index}`;\n                const { _id, logoImageUrl, name, email, category } = row;\n\n                return (\n                  <TableRow\n                    hover\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={_id}\n                    selected={isItemSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        onClick={() =>\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\n                        }\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          \"aria-labelledby\": labelId,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ maxWidth: \"20rem\" }}\n                    >\n                      <div\n                        style={{\n                          height: \"100%\",\n                          display: \"flex\",\n                          alignItems: \"left\",\n                        }}\n                      >\n                        <span style={{ marginRight: \"1rem\" }}>\n                          <Avatar\n                            alt={`Display Photo of ${name}`}\n                            src={logoImageUrl}\n                            sx={{ width: 24, height: 24 }}\n                          />\n                        </span>\n                        <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                        maxWidth: \"20rem\",\n                      }}\n                    >\n                      {email}\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                        maxWidth: \"20rem\",\n                      }}\n                    >\n                      {category}\n                    </TableCell>\n\n                    {/* <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                        maxWidth: \"20rem\",\n                      }}\n                    >\n                      {profileUrl || z(_id) !== \"\" ? (\n                        <Typography\n                          style={{\n                            color: theme.palette.common.grey,\n                            maxWidth: \"20rem\",\n                          }}\n                          sx={{ display: \"flex\", alignItems: \"center\" }}\n                        >\n                          {trucateProfileLink(profileUrl ? profileUrl : z(_id))}\n                          <div style={{ marginLeft: \"1rem\" }}>\n                            <Copy\n                              name=\"Profile Link\"\n                              text={profileUrl ? profileUrl : z(_id)}\n                            />\n                          </div>\n                        </Typography>\n                      ) : (\n                        <Button\n                          variant=\"contained\"\n                          disableRipple\n                          className={`${classes.tableBtn} ${classes.redBtn}`}\n                          onClick={() => handleGenerateLink(_id)}\n                        >\n                          Generate Link\n                        </Button>\n                      )}\n                    </TableCell> \n                    <TableCell align=\"center\" className={classes.tableCell}>\n                      {isDeleting[_id] ? (\n                        <Loader />\n                      ) : (\n                        <Button\n                          variant=\"contained\"\n                          disableRipple\n                          className={`${classes.tableBtn} ${classes.redBtn}`}\n                          endIcon={<DeleteIcon color=\"error\" />}\n                          onClick={() => {\n                            setPartnerToDelete(_id || \"\");\n                            setOpenDeletePartner(true);\n                          }}\n                        >\n                          Delete partner\n                        </Button>\n                      )}\n                    </TableCell>*/}\n                  </TableRow>\n                );\n              })}\n            </EnhancedTable>\n          </Grid>\n        ) : (\n          <EmptyTable\n            headCells={partnersHeadCells}\n            paginationLabel=\"Doctors per page\"\n          />\n        )}\n      </TableLayout>\n      <Modals\n        isOpen={openFilterPartner}\n        title=\"Filter\"\n        rowSpacing={5}\n        width={{ sm: \"40vw\", xs: \"90vw\", md: \"40vw\" }}\n        handleClose={() => setOpenFilterPartner(false)}\n      >\n        <Formik\n          initialValues={initialValues}\n          onSubmit={onSubmit}\n          validateOnBlur={false}\n          validationSchema={filterPartnersValidationSchema}\n          validateOnChange={false}\n          validateOnMount={false}\n        >\n          {({ isSubmitting, isValid, dirty }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid item container direction=\"column\" gap={3}>\n                  <Grid item marginBottom={3}>\n                    <Grid container spacing={2}>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"input\"\n                          name=\"Name\"\n                          label=\"Name\"\n                          placeholder=\"Select name\"\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"select\"\n                          options={specializations}\n                          name=\"date\"\n                          label=\"Date\"\n                          placeholder=\"Choose Date\"\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid\n                  item\n                  container\n                  spacing={2}\n                  style={{ marginBottom: \"10rem\" }}\n                >\n                  <Grid item xs={6}>\n                    <FormikControl\n                      control=\"select\"\n                      options={specializations}\n                      name=\"category\"\n                      label=\"Category\"\n                      placeholder=\"Select Category\"\n                    />\n                  </Grid>\n                  {/* Placeholder grid */}\n                  <Grid item md></Grid>\n                </Grid>\n                <Grid item container xs={12}>\n                  <CustomButton\n                    title=\"Apply Filter\"\n                    width=\"100%\"\n                    type={buttonType}\n                    isSubmitting={isSubmitting}\n                    disabled={!(dirty || isValid)}\n                  />\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n\n      {/* ADD NEW PARTER MODAL */}\n      <Modals\n        isOpen={openAddPartner}\n        title=\"Add Partners\"\n        rowSpacing={5}\n        handleClose={() => setOpenAddPartner(false)}\n      >\n        <Formik\n          initialValues={initialValues1}\n          onSubmit={onSubmit1}\n          validationSchema={addNewPartnerValidationSchema}\n          validateOnChange={false}\n          validateOnMount={false}\n          validateOnBlur={false}\n        >\n          {({ isSubmitting, isValid, dirty, values, setFieldValue }) => {\n            const { classification, category } = values;\n            return (\n              <Form style={{ marginTop: \"1rem\" }}>\n                <Grid container direction=\"column\" gap={1.5}>\n                  <Grid item container>\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"input\"\n                          label=\"Name\"\n                          id=\"name\"\n                          name=\"name\"\n                          placeholder=\"Enter Partner name\"\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"input\"\n                          label=\"Email\"\n                          id=\"name\"\n                          name=\"email\"\n                          placeholder=\"Enter Email\"\n                        />\n                      </Grid>\n                    </Grid>\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"input\"\n                          label=\" Account Number\"\n                          id=\"account\"\n                          name=\"account\"\n                          placeholder=\"Enter Account Number\"\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"input\"\n                          label=\"Phone Number\"\n                          id=\"phone\"\n                          name=\"phone\"\n                          placeholder=\"Enter Phone Number\"\n                        />\n                      </Grid>\n                    </Grid>\n\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"select\"\n                          options={categoryOptions}\n                          name=\"category\"\n                          label=\"Category\"\n                          placeholder=\"Category\"\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"select\"\n                          options={banks}\n                          name=\"bank\"\n                          label=\"Bank\"\n                          placeholder=\"Select Bank\"\n                        />\n                      </Grid>\n                    </Grid>\n                    {category === \"hospital\" && (\n                      <Grid item container flexWrap=\"nowrap\" gap={2}>\n                        <Grid item xs={6}>\n                          <FormikControl\n                            control=\"select\"\n                            options={dropDown}\n                            name=\"provider\"\n                            label=\"Provider\"\n                            id=\"provider\"\n                            placeholder=\"Select Provider\"\n                          />\n                        </Grid>\n                        <Grid item xs={6}>\n                          <FormikControl\n                            control=\"select\"\n                            options={classificationOptions}\n                            name=\"classification\"\n                            label=\"Classification\"\n                            id=\"classification\"\n                            placeholder=\"select classification\"\n                          />\n                        </Grid>\n                      </Grid>\n                    )}\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"file\"\n                          name=\"image\"\n                          label=\"Company Logo\"\n                          setFieldValue={setFieldValue}\n                        />\n                      </Grid>\n                      {classification === \"Secondary Healthcare\" && (\n                        <Grid item xs={6}>\n                          <FormikControl\n                            control=\"select\"\n                            options={specializationOptions}\n                            name=\"specialization\"\n                            label=\"Specialization\"\n                            id=\"specialization\"\n                            placeholder=\"Select Specialization\"\n                          />\n                        </Grid>\n                      )}\n                    </Grid>\n                    <Grid item container flexWrap=\"nowrap\">\n                      <Grid item container>\n                        <FormikControl\n                          control=\"textarea\"\n                          name=\"address\"\n                          minRows={3}\n                          label=\"Address\"\n                          placeholder=\"Enter address\"\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item container sx={{ mt: 1 }}>\n                    <CustomButton\n                      title=\"Add Partner\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n\n      {/* Add Partner Category */}\n      <Modals\n        isOpen={openAddPartnerCategory}\n        title=\"Add Partners Category\"\n        rowSpacing={5}\n        handleClose={() => setAddPartnerCategory(false)}\n      >\n        <Formik\n          initialValues={initialValues2}\n          onSubmit={onSubmit2}\n          validationSchema={addPartnerValidationSchema}\n          validateOnChange={false}\n          validateOnMount={false}\n          validateOnBlur={false}\n        >\n          {({ isSubmitting, isValid, dirty }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid container direction=\"column\" gap={3}>\n                  <Grid item container>\n                    <Grid item container direction=\"column\" gap={1}>\n                      <Grid item container>\n                        <FormikControl\n                          control=\"select\"\n                          options={specializations5}\n                          name=\"category\"\n                          label=\"Category\"\n                          placeholder=\"Specialization\"\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item container>\n                    <CustomButton\n                      title=\"Add Partner\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n      <DeletePartner\n        open={openDeletePartner}\n        setOpen={setOpenDeletePartner}\n        title=\"Delete Partner\"\n        btnValue=\"delete\"\n        onConfirm={async () => {\n          const res = deleteItem(\n            delete_partner,\n            partnerToDelete,\n            setPartnerToDelete,\n            refetch,\n            Typography,\n            enqueueSnackbar,\n            setIsDeleting,\n            isDeleting\n          );\n          setOpenDeletePartner(false);\n          await setTableData(res, \"Couldn't refetch Partners\");\n        }}\n        confirmationMsg=\"delete partner\"\n        onCancel={() => {\n          setPartnerToDelete(null);\n        }}\n      />\n    </Grid>\n  );\n};\n\nexport default Partners;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Financetable.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Chat.js",["1281","1282"],"import React, { useEffect, useState } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport { Grid, Typography, Divider } from \"@mui/material\";\nimport { Loader, CustomButton, PreviousButton } from \"components/Utilities\";\nimport { useParams } from \"react-router-dom\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { useHistory } from \"react-router-dom\";\nimport { makeStyles } from \"@mui/styles\";\nimport { CREATE_MESSAGE } from \"components/graphQL/Mutation\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  showSuccessMsg,\n  handleError,\n} from \"../../helpers/filterHelperFunctions\";\nimport { getMessage, getProfile } from \"components/graphQL/useQuery\";\n\nconst useStyles = makeStyles((theme) => ({\n  gridWrapper: {\n    \"&.MuiGrid-item\": {\n      borderRadius: \"1rem\",\n      background: \"#fff\",\n      padding: \"2rem 4rem\",\n      maxWidth: \"60rem !important\",\n      boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.1)\",\n    },\n  },\n  inputGrid: {\n    flex: 1,\n    alignItems: \"center\",\n  },\n  heading: {\n    \"&.MuiTypography-root\": {\n      color: theme.palette.common.grey,\n      //   fontSize: \"1rem\"\n    },\n  },\n  formInput: {\n    width: \"100%\",\n    height: \"100%\",\n    fontSize: \"1.5rem\",\n    padding: \".5rem 1rem\",\n    border: \"none\",\n    background: \"transparent\",\n    color: theme.palette.common.grey,\n\n    \"&:focus\": {\n      outline: \"none\",\n    },\n  },\n  textArea: {\n    border: \"1px solid rgba(0, 0, 0, 0.03)\",\n    resize: \"none\",\n    borderRadius: \"0.5rem\",\n  },\n  divider: {\n    \"&.MuiDivider-root\": {\n      borderColor: \"rgba(0, 0, 0, 0.03)\",\n    },\n  },\n}));\n\nconst Chat = () => {\n  const { patientId } = useParams();\n  const classes = useStyles();\n  const theme = useTheme();\n  let history = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const [createNewMessage] = useMutation(CREATE_MESSAGE, {\n    refetchQueries: [{ query: getMessage }],\n  });\n  const { data, loading } = useQuery(getProfile, {\n    variables: { profileId: patientId },\n  });\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n  const [profile, setprofile] = useState(\"\");\n  const { firstName, lastName } = profile;\n\n  const initialValues = {\n    subject: \"\",\n    recipient: `${firstName} ${lastName} ` || \"\",\n    textarea: \"\",\n  };\n\n  useEffect(() => {\n    if (data) {\n      setprofile(data.profile);\n    }\n  }, [data]);\n\n  const validationSchema = Yup.object({\n    subject: Yup.string(\"Enter your subject\")\n      .trim()\n      .required(\"Subject is required\"),\n    textarea: Yup.string(\"Enter your message\")\n      .trim()\n      .required(\"Message is required\"),\n    recipient: Yup.string(\"Enter your recipient\")\n      .trim()\n      .required(\"recipients is required\"),\n  });\n  const onSubmit = async (values, onSubmitProps) => {\n    const id = localStorage.getItem(\"user_id\");\n    const { subject, textarea } = values;\n\n    try {\n      await createNewMessage({\n        variables: {\n          sender: id,\n          recipient: patientId,\n          subject,\n          body: textarea,\n        },\n      });\n      showSuccessMsg(enqueueSnackbar, Typography, \"Message sent\");\n    } catch (error) {\n      handleError(error, enqueueSnackbar);\n      console.log(error);\n    }\n    onSubmitProps.resetForm();\n    history.push(`/patients/${patientId}/profile`);\n    /* setSelectedScopedMenu(0); */\n  };\n\n  if (loading) return <Loader />;\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validateOnBlur={false}\n      validationSchema={validationSchema}\n      validateOnChange={false}\n      validateOnMount={false}\n      enableReinitialize\n    >\n      {({ isValid, isSubmitting, dirty }) => {\n        return (\n          <Form>\n            <Grid container direction=\"column\">\n              <Grid item style={{ marginBottom: \"3rem\" }}>\n                <PreviousButton path={`/patients/${patientId}/profile`} />\n              </Grid>\n              <Grid item container direction=\"column\" alignItems=\"center\">\n                <Grid item>\n                  <Typography variant=\"h4\" style={{ marginBottom: \"3rem\" }}>\n                    Create New Message\n                  </Typography>\n                </Grid>\n                <Grid\n                  item\n                  container\n                  direction=\"column\"\n                  className={classes.gridWrapper}\n                >\n                  <Grid item>\n                    <Grid\n                      item\n                      container\n                      alignItems=\"center\"\n                      sx={{ gap: \"0!important\" }}\n                    >\n                      <Grid item>\n                        <Typography variant=\"body2\" className={classes.heading}>\n                          Recipient:\n                        </Typography>\n                      </Grid>\n                      <Grid item className={classes.inputGrid}>\n                        <FormikControl\n                          control=\"input\"\n                          id=\"message\"\n                          name=\"recipient\"\n                          disabled\n                          variant=\"standard\"\n                          className={classes.formInput}\n                        />\n                      </Grid>\n                    </Grid>\n                    <Divider className={classes.divider} />\n                  </Grid>\n                  <Grid item>\n                    <Grid container alignItems=\"center\">\n                      <Grid item>\n                        <Typography variant=\"body2\" className={classes.heading}>\n                          Subject:\n                        </Typography>\n                      </Grid>\n                      <Grid item className={classes.inputGrid}>\n                        <FormikControl\n                          control=\"input\"\n                          id=\"subject\"\n                          name=\"subject\"\n                          variant=\"standard\"\n                          className={classes.formInput}\n                        />\n                      </Grid>\n                    </Grid>\n                    <Divider className={classes.divider} />\n                  </Grid>\n                  <Grid item>\n                    <Grid container direction=\"column\">\n                      <Grid item>\n                        <Typography variant=\"body2\" className={classes.heading}>\n                          Message:\n                        </Typography>\n                      </Grid>\n                      <Grid item style={{ height: \"15rem\" }}>\n                        <FormikControl\n                          control=\"textarea\"\n                          id=\"textarea\"\n                          name=\"textarea\"\n                          variant=\"standard\"\n                          fLabel={true}\n                        />\n                      </Grid>\n                    </Grid>\n                    {/* <Divider className={classes.divider} /> */}\n                  </Grid>\n                  <Grid\n                    item\n                    style={{ alignSelf: \"flex-end\", marginTop: \"2rem\" }}\n                  >\n                    <CustomButton\n                      title=\"Send Message\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                      // endIcon={<ArrowForwardIosIcon style={{ fontSize: \"1.5rem\" }} />}\n                    />\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default Chat;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Patients.js",["1283","1284","1285"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { useLazyQuery, NetworkStatus } from \"@apollo/client\";\nimport { NoData, EmptyTable } from \"components/layouts\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport {\n  Button,\n  Avatar,\n  Chip,\n  Checkbox,\n  TableCell,\n  TableRow,\n  Grid,\n} from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\nimport useAlert from \"hooks/useAlert\";\nimport { isSelected } from \"helpers/isSelected\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport { Loader } from \"components/Utilities\";\nimport { useStyles } from \"styles/patientsPageStyles\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\nimport { EnhancedTable } from \"components/layouts\";\nimport PatientFilters from \"components/Forms/Filters/PatientFilters\";\nimport { patientsHeadCells } from \"components/Utilities/tableHeaders\";\nimport { defaultPageInfo, searchOptions } from \"../../helpers/mockData\";\nimport {\n  getPatients,\n  getPatientsByPlan,\n  getPatientsByStatus,\n} from \"components/graphQL/useQuery\";\nimport {\n  changeTableLimit,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\n\nimport TableLayout from \"components/layouts/TableLayout\";\nimport { getSearchPlaceholder } from \"helpers/func\";\n\nconst Patients = () => {\n  const theme = useTheme();\n  const classes = useStyles();\n  const { displayAlert } = useAlert();\n  const { setSelectedRows } = useActions();\n  const [profiles, setProfiles] = useState([]);\n  const { selectedRows } = useSelector((state) => state.tables);\n  const [fetchPatient, { loading, refetch, error, variables, networkStatus }] =\n    useLazyQuery(getPatients);\n  const [\n    fetchPatientByStatus,\n    {\n      loading: byStatusLoading,\n      variables: byStatusVaribles,\n      refetch: byStatusRefetch,\n    },\n  ] = useLazyQuery(getPatientsByStatus);\n  const [\n    fetchPatientByPlan,\n    {\n      loading: byPlanLoading,\n      variables: byPlanVaribles,\n      refetch: byPlanRefetch,\n    },\n  ] = useLazyQuery(getPatientsByPlan);\n\n  const [pageInfo, setPageInfo] = useState({\n    page: 0,\n    totalPages: 1,\n    hasNextPage: false,\n    hasPrevPage: false,\n    limit: 10,\n    totalDocs: 0,\n  });\n\n  useEffect(() => {\n    fetchPatient({\n      variables: {\n        first: pageInfo.limit,\n      },\n    })\n      .then(({ data }) => {\n        if (data) {\n          setPageInfo(data?.profiles?.pageInfo || []);\n          setProfiles(data?.profiles?.data || defaultPageInfo);\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const setTableData = async (response, errMsg) => {\n    response\n      .then(({ data }) => {\n        setPageInfo(data?.profiles?.pageInfo || defaultPageInfo);\n        setProfiles(data?.profiles?.data || []);\n      })\n      .catch((error) => {\n        console.error(error);\n        displayAlert(\"error\", errMsg);\n      });\n  };\n\n  if (error) return <NoData error={error} />;\n\n  return (\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\n      <Grid\n        item\n        container\n        spacing={2}\n        className={classes.searchFilterContainer}\n      >\n        <Grid item container flexWrap=\"wrap\" spacing={4}></Grid>\n      </Grid>\n      <TableLayout\n        filters={\n          <PatientFilters\n            setProfiles={setProfiles}\n            setPageInfo={setPageInfo}\n            queryParams={{\n              patientsParams: { fetchPatient, loading, refetch, variables },\n              patientsByStatusParams: {\n                byStatusLoading,\n                byStatusVaribles,\n                byStatusRefetch,\n                fetchPatientByStatus,\n              },\n              patientsByPlanParams: {\n                byPlanLoading,\n                byPlanVaribles,\n                byPlanRefetch,\n                fetchPatientByPlan,\n              },\n            }}\n          />\n        }\n        search={\n          <CompoundSearch\n            queryParams={{\n              fetchData: fetchPatient,\n              variables,\n              loading,\n              newVariables: {},\n            }}\n            setPageInfo={(data) => setPageInfo(data?.profiles?.pageInfo || {})}\n            setProfiles={(data) => setProfiles(data?.profiles?.data || [])}\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\n            filterOptions={searchOptions}\n          />\n        }\n      >\n        {loading || byStatusLoading || byPlanLoading ? (\n          <Loader />\n        ) : networkStatus === NetworkStatus.refetch ? (\n          <Loader />\n        ) : profiles.length > 0 ? (\n          /* ================= PATIENTS TABLE ================= */\n          <Grid\n            container\n            item\n            direction=\"column\"\n            overflow=\"hidden\"\n            maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\n          >\n            <EnhancedTable\n              headCells={patientsHeadCells}\n              rows={profiles}\n              paginationLabel=\"Patients per page\"\n              hasCheckbox={true}\n              changeLimit={async (e) => {\n                const res = changeTableLimit(fetchPatient, {\n                  first: e,\n                });\n                await setTableData(res, \"Failed to change table limit.\");\n              }}\n              dataPageInfo={pageInfo}\n              handlePagination={async (page) => {\n                const res = handlePageChange(fetchPatient, page, pageInfo, {});\n                await setTableData(res, \"Failed to change page.\");\n              }}\n            >\n              {profiles.map((row, index) => {\n                const {\n                  dociId,\n                  firstName,\n                  lastName,\n                  plan,\n                  provider,\n                  image,\n                  consultations,\n                  _id,\n                  status,\n                } = row;\n                const isItemSelected = isSelected(_id, selectedRows);\n                const labelId = `enhanced-table-checkbox-${index}`;\n                return (\n                  <TableRow\n                    hover\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={_id}\n                    selected={isItemSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        onClick={() =>\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\n                        }\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          \"aria-labelledby\": labelId,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell\n                      id={labelId}\n                      scope=\"row\"\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                        textAlign: \"left\",\n                      }}\n                    >\n                      {dociId && dociId.split(\"-\")[1]}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      <div\n                        style={{\n                          height: \"100%\",\n                          display: \"flex\",\n                          alignItems: \"left\",\n                        }}\n                      >\n                        <span style={{ marginRight: \"1rem\" }}>\n                          <Avatar\n                            alt={`Display Photo of ${firstName}`}\n                            src={image ? image : displayPhoto}\n                            sx={{ width: 24, height: 24 }}\n                          />\n                        </span>\n                        <span\n                          style={{ fontSize: \"1.25rem\" }}\n                        >{`${firstName} ${lastName}`}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      {plan ? plan : \"No Plan\"}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      {provider ? provider : \"No Provider\"}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      {consultations ? consultations : 0}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      <Chip\n                        label={\n                          status && status === \"Active\" ? \"Active\" : \"Inactive\"\n                        }\n                        className={classes.badge}\n                        style={{\n                          background:\n                            status === \"Active\"\n                              ? theme.palette.common.lightGreen\n                              : theme.palette.common.lightRed,\n                          color:\n                            status === \"Active\"\n                              ? theme.palette.common.green\n                              : theme.palette.common.red,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        variant=\"contained\"\n                        className={classes.button}\n                        component={Link}\n                        to={`patients/${_id}`}\n                        endIcon={<ArrowForwardIosIcon />}\n                      >\n                        View Profile\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </EnhancedTable>\n          </Grid>\n        ) : (\n          <EmptyTable\n            headCells={patientsHeadCells}\n            paginationLabel=\"Patients per page\"\n          />\n        )}\n      </TableLayout>\n    </Grid>\n  );\n};\n\nexport default Patients;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Finance.js",["1286","1287"],"import React, { useState, useEffect } from \"react\";\nimport { NoData } from \"components/layouts\";\nimport { Loader, CircularProgressBar, FormSelect } from \"components/Utilities\";\nimport { Grid, Typography } from \"@mui/material\";\nimport TrendingDownIcon from \"@mui/icons-material/TrendingDown\";\nimport TrendingUpIcon from \"@mui/icons-material/TrendingUp\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { makeStyles } from \"@mui/styles\";\nimport { Link } from \"react-router-dom\";\nimport { Card } from \"components/Utilities\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { getFinanceStats } from \"components/graphQL/useQuery\";\nimport {\n  financialPercent,\n  selectOptions,\n  formatNumber,\n} from \"components/Utilities/Time\";\n\nconst useStyles = makeStyles((theme) => ({\n  cardContainer: {\n    \"&.MuiCard-root\": {\n      width: \"100%\",\n      height: \"15.8rem\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      background: \"white\",\n      marginRight: \"5rem\",\n      \"&:hover\": {\n        boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.15)\",\n        cursor: \"pointer\",\n      },\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n      \"& .MuiCardContent-root .MuiTypography-h5\": {\n        textDecoration: \"none !important\",\n        textTransform: \"uppercase\",\n      },\n    },\n  },\n\n  iconWrapper: {\n    width: 60,\n    height: 60,\n    borderRadius: \"50%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  cardGrid: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"25.8rem\",\n  },\n  flexContainer: {\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    margin: \"auto\",\n    width: \"100%\",\n    \"&:first-child\": {\n      borderBottom: \".5px solid #F8F8F8\",\n    },\n  },\n  lightGreen: {\n    color: theme.palette.common.green,\n  },\n\n  lightRed: {\n    color: theme.palette.common.red,\n  },\n  mainContainer: {\n    width: \"100%\",\n    background: \"white\",\n    borderRadius: \"2rem\",\n    boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.15)\",\n  },\n  parentGrid: {\n    textDecoration: \"none\",\n    color: theme.palette.primary.main,\n\n    \"& > .MuiGrid-root.MuiGrid-container\": {\n      backgroundColor: \"#ffffff\",\n    },\n  },\n\n  cardIcon: {\n    \"&.MuiSvgIcon-root\": {\n      fontSize: \"3rem\",\n    },\n  },\n}));\nconst Finance = () => {\n  const theme = useTheme();\n  const classes = useStyles();\n  const [range, setRange] = useState(\"365\");\n  const [totalIncome, setTotalIncome] = useState(0);\n  const [totalExpenditure, setTotalExpenditure] = useState(0);\n  const financialValue = financialPercent(totalIncome, totalExpenditure);\n  const [finances, setFinances] = useState(financialValue);\n  const [fetchFinanceStats, { error, loading }] = useLazyQuery(getFinanceStats);\n\n  useEffect(() => {\n    try {\n      fetchFinanceStats({ variables: { q: range } }).then(({ data }) => {\n        if (!data) throw Error(\"couldn't fetch data\");\n        const { subscriptionIncome, totalPayout } = data.getEarningStats;\n        setTotalIncome(subscriptionIncome);\n        setTotalExpenditure(totalPayout);\n        const value = financialPercent(subscriptionIncome, totalPayout);\n        setFinances(value);\n      });\n    } catch (error) {\n      console.error(error);\n    }\n  }, [range, fetchFinanceStats]);\n\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error} />;\n\n  return (\n    <Grid container gap={3}>\n      <Grid\n        item\n        container\n        rowGap={4}\n        padding={{ md: \"2rem 4rem\", sm: \"2rem, 4rem\", xs: \"1rem\" }}\n        className={classes.mainContainer}\n        flexDirection={{ md: \"row\", sm: \"row\", xs: \"column\" }}\n        sx={{ alignItems: \"center\", justifyContent: \"space-between\" }}\n      >\n        <Grid item container className={classes.flexContainer}>\n          <Grid item>\n            <Typography variant=\"h1\" color=\"#2D2F39\">\n              Earning\n            </Typography>\n          </Grid>\n          <Grid item>\n            <FormSelect\n              placeholder=\"Select days\"\n              value={range}\n              onChange={(e) => setRange(e?.target?.value)}\n              options={selectOptions}\n              name=\"finance\"\n            />\n          </Grid>\n        </Grid>\n        <Grid\n          item\n          container\n          alignItems=\"center\"\n          flexDirection={{ md: \"row\", sm: \"row\", xs: \"column\" }}\n          spacing={{ md: 2, xs: 2, sm: 2 }}\n        >\n          <Grid item>\n            <CircularProgressBar\n              height=\"17rem\"\n              width=\"17rem\"\n              color={theme.palette.common.green}\n              trailColor={theme.palette.common.red}\n              value={finances}\n              strokeWidth={8}\n            />\n          </Grid>\n          <Grid item flex={1}>\n            <Grid\n              container\n              alignItems=\"center\"\n              rowGap={4}\n              justifyContent={{\n                md: \"space-around\",\n                xs: \"flex-start\",\n                sm: \"space-around\",\n              }}\n            >\n              <Grid\n                item\n                spacing={2}\n                sx={{ justifyContent: \"center\", alignItems: \"center\" }}\n              >\n                <Grid\n                  container\n                  alignItems=\"center\"\n                  gap={{ md: 2, sm: 2, xs: 4 }}\n                >\n                  <Grid\n                    className={classes.iconWrapper}\n                    sx={{ background: theme.palette.common.lightGreen }}\n                  >\n                    <Grid item>\n                      <TrendingDownIcon\n                        color=\"success\"\n                        className={classes.cardIcon}\n                      />\n                    </Grid>\n                  </Grid>\n                  <Grid item>\n                    <Typography noWrap variant=\"h2\">\n                      <span\n                        style={{\n                          textDecoration: \"line-through\",\n                          textDecorationStyle: \"double\",\n                        }}\n                      >\n                        N{\"\"}\n                      </span>\n                      {formatNumber(totalIncome)}\n                    </Typography>\n                    <Typography\n                      variant=\"body2\"\n                      style={{\n                        color: theme.palette.common.lightGrey,\n                      }}\n                    >\n                      Subscription Earnings\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n              {/* second */}\n              <Grid item>\n                <Grid\n                  container\n                  alignItems=\"center\"\n                  gap={{ md: 2, sm: 2, xs: 4 }}\n                >\n                  <Grid\n                    className={classes.iconWrapper}\n                    sx={{ background: theme.palette.common.lightRed }}\n                  >\n                    <Grid item>\n                      <TrendingUpIcon\n                        color=\"error\"\n                        className={classes.cardIcon}\n                      />\n                    </Grid>\n                  </Grid>\n                  <Grid item>\n                    <Typography noWrap variant=\"h2\">\n                      <span\n                        style={{\n                          textDecoration: \"line-through\",\n                          textDecorationStyle: \"double\",\n                        }}\n                      >\n                        N\n                      </span>\n                      {formatNumber(+totalExpenditure)}\n                    </Typography>\n                    <Typography\n                      variant=\"body2\"\n                      style={{\n                        color: theme.palette.common.lightGrey,\n                      }}\n                    >\n                      Total Payouts\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n              {/* second */}\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n\n      {/* iterms */}\n      <Grid item container spacing={2} justifyContent=\"space-between\">\n        {/* 1 */}\n        <Grid item container md={4} sm={4} xs={12}>\n          <Grid\n            item\n            container\n            flexDirection=\"column\"\n            component={Link}\n            to=\"/finance/payouts\"\n            className={classes.parentGrid}\n          >\n            <Card\n              title=\"Doctor Payout\"\n              background={theme.palette.common.lightGreen}\n            >\n              <TrendingUpIcon color=\"error\" className={classes.cardIcon} />\n            </Card>\n          </Grid>\n        </Grid>\n        {/* 2 */}\n        <Grid item container md={4} sm={4} xs={12}>\n          <Grid\n            item\n            container\n            flexDirection=\"column\"\n            component={Link}\n            to=\"/finance/earnings\"\n            className={classes.parentGrid}\n          >\n            <Card\n              title=\"Doctor Earnings\"\n              background={theme.palette.common.lightGreen}\n            >\n              <Grid className={classes.iconWrapper}>\n                <TrendingDownIcon\n                  color=\"success\"\n                  className={classes.cardIcon}\n                />\n              </Grid>\n            </Card>\n          </Grid>\n        </Grid>\n        {/* 3 */}\n        <Grid item container md={4} sm={4} xs={12}>\n          <Grid\n            item\n            container\n            flexDirection=\"column\"\n            component={Link}\n            to=\"/finance/sub-income\"\n            className={classes.parentGrid}\n          >\n            <Card\n              title=\"Subscription Income\"\n              background={theme.palette.common.lightGreen}\n            >\n              <Grid className={classes.iconWrapper}>\n                <TrendingDownIcon\n                  color=\"success\"\n                  className={classes.cardIcon}\n                />\n              </Grid>\n            </Card>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nFinance.propTypes = {\n  /* setSelectedSubMenu: PropTypes.func, */\n};\n\nexport default Finance;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Medications.js",["1288"],"import React, { useEffect, useState } from \"react\";\nimport {\n  Grid,\n  Avatar,\n  Checkbox,\n  TableCell,\n  TableRow,\n  Typography,\n} from \"@mui/material\";\nimport { EnhancedTable, EmptyTable, NoData } from \"components/layouts\";\nimport { medicationsHeadCells } from \"components/Utilities/tableHeaders\";\nimport { useSelector } from \"react-redux\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { Loader } from \"components/Utilities\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport { useParams } from \"react-router-dom\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { myMedic } from \"components/graphQL/useQuery\";\nimport { dateMoment } from \"components/Utilities/Time\";\nimport { changeTableLimit, fetchMoreData } from \"helpers/filterHelperFunctions\";\n\nconst useStyles = makeStyles((theme) => ({\n  tableCell: {\n    \"&.MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n}));\n\nconst Medications = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [pageInfo, setPageInfo] = useState([]);\n  const { patientId } = useParams();\n\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n  const [medications, setMedications] = useState([]);\n\n  const [fetchMedications, { loading, error, data }] = useLazyQuery(myMedic);\n\n  useEffect(() => {\n    fetchMedications({\n      variables: {\n        id: patientId,\n        orderBy: \"-createdAt\",\n      },\n      notifyOnNetworkStatusChange: true,\n    });\n  }, [fetchMedications, patientId]);\n\n  useEffect(() => {\n    if (data) {\n      setMedications(data.getMedications.medication);\n      setPageInfo(data.getMedications.pageInfo);\n    }\n  }, [data]);\n\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error} />;\n\n  return (\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\n      <Grid item container height=\"100%\" direction=\"column\" gap={2}>\n        <Grid item>\n          <Typography variant=\"h2\">Medications</Typography>\n        </Grid>\n        {medications.length > 0 ? (\n          <Grid item container height=\"100%\" direction=\"column\">\n            <EnhancedTable\n              headCells={medicationsHeadCells}\n              rows={medications}\n              paginationLabel=\"Medication per page\"\n              handleChangePage={fetchMoreData}\n              hasCheckbox={true}\n              changeLimit={changeTableLimit}\n              fetchData={fetchMedications}\n              dataPageInfo={pageInfo}\n            >\n              {medications\n                // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                .map((row, index) => {\n                  const isItemSelected = isSelected(row._id, selectedRows);\n                  const labelId = `enhanced-table-checkbox-${index}`;\n\n                  return (\n                    <TableRow\n                      hover\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={row._id}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          onClick={() =>\n                            handleSelectedRows(\n                              row.id,\n                              selectedRows,\n                              setSelectedRows\n                            )\n                          }\n                          color=\"primary\"\n                          checked={isItemSelected}\n                          inputProps={{\n                            \"aria-labelledby\": labelId,\n                          }}\n                        />\n                      </TableCell>\n                      <TableCell\n                        align=\"left\"\n                        className={classes.tableCell}\n                        style={{ color: theme.palette.common.grey }}\n                      >\n                        {dateMoment(row.createdAt)}\n                      </TableCell>\n                      <TableCell\n                        align=\"left\"\n                        className={classes.tableCell}\n                        style={{ maxWidth: \"20rem\" }}\n                      >\n                        {row.name}\n                      </TableCell>\n                      <TableCell\n                        align=\"left\"\n                        className={classes.tableCell}\n                        style={{ maxWidth: \"20rem\" }}\n                      >\n                        {row.dosage ? row.dosage : \"No Value\"}\n                      </TableCell>\n                      <TableCell\n                        align=\"left\"\n                        className={classes.tableCell}\n                        style={{ maxWidth: \"20rem\" }}\n                      >\n                        {row.interval ? row.interval : \"No Value\"}\n                      </TableCell>\n                      <TableCell\n                        align=\"left\"\n                        className={classes.tableCell}\n                        style={{ maxWidth: \"20rem\" }}\n                      >\n                        <div\n                          style={{\n                            height: \"100%\",\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            justifyContent: \"left\",\n                          }}\n                        >\n                          <span style={{ marginRight: \"1rem\" }}>\n                            <Avatar\n                              alt={`Display Photo of ${row.caregiver}`}\n                              src={displayPhoto}\n                              sx={{ width: 24, height: 24 }}\n                            />\n                          </span>\n                          <span style={{ fontSize: \"1.25rem\" }}>\n                            {row.doctor}\n                          </span>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n            </EnhancedTable>\n          </Grid>\n        ) : (\n          <EmptyTable\n            headCells={medicationsHeadCells}\n            paginationLabel=\"Medications per page\"\n          />\n        )}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Medications;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/MedicalRecords.js",["1289"],"import React, { useEffect, useState } from \"react\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { Loader, ProfileCard } from \"components/Utilities\";\nimport { useParams } from \"react-router-dom\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { calculateBMI } from \"components/Utilities/bMI\";\nimport {\n  getProfile,\n  findAllergies,\n  getLabResult,\n} from \"components/graphQL/useQuery\";\nimport { NoData } from \"components/layouts\";\n\nconst MedicalRecords = () => {\n  const { patientId } = useParams();\n  const [patientProfile, setPatientProfile] = useState(undefined);\n\n  const [patients, { loading, data, error }] = useLazyQuery(getProfile);\n  const [alergy, allergyResult] = useLazyQuery(findAllergies, {\n    variables: { id: patientId },\n  });\n  const [labResult, labResults] = useLazyQuery(getLabResult, {\n    variables: { id: patientId },\n  });\n  const [alergies, setAlergies] = useState([]);\n  const [lab, setLab] = useState([]);\n\n  useEffect(() => {\n    (async () => {\n      try {\n        patients({ variables: { profileId: patientId } });\n        alergy();\n        labResult();\n        setAlergies(allergyResult.data.findAllergies.allergies);\n        setLab(labResults.data.getLabResults.lab);\n      } catch (err) {\n        console.error(err);\n      }\n    })();\n  }, [\n    alergy,\n    patients,\n    patientId,\n    labResult,\n    allergyResult.data,\n    labResults.data,\n  ]);\n\n  useEffect(() => {\n    if (data && data.profile) {\n      setPatientProfile(data.profile);\n    }\n  }, [data]);\n\n  if (loading || allergyResult.loading) return <Loader />;\n  if (error || allergyResult.error)\n    return <NoData error={allergyResult.error || error} />;\n  if (patientProfile) {\n    const value =\n      alergies.length > 0 &&\n      alergies?.map((alergy) => alergy.name).filter((i) => i !== undefined);\n\n    const labResult = lab?.map((alergy) => alergy);\n\n    return (\n      <Grid\n        container\n        direction=\"column\"\n        gap={{\n          md: 5,\n          sm: 4,\n          xs: 3,\n        }}\n        paddingBottom={{ md: 10, sm: 5, xs: 3 }}\n      >\n        <Grid item>\n          <Typography variant=\"h2\">Medical Records</Typography>\n        </Grid>\n        <Grid item container spacing={4} justifyContent=\"space-between\">\n          <Grid item container md={6} sm={6} xs={12}>\n            <ProfileCard\n              text=\"Height\"\n              value={\n                patientProfile.height ? patientProfile.height : \"No Height\"\n              }\n            />\n          </Grid>\n          <Grid item container md={6} sm={6} xs={12}>\n            <ProfileCard\n              text=\"Weight\"\n              value={\n                patientProfile.weight ? patientProfile.weight : \"No Weight\"\n              }\n            />\n          </Grid>\n          <Grid item container md={6} sm={6} xs={12}>\n            <ProfileCard\n              text=\"Blood Group\"\n              value={\n                patientProfile.bloodGroup\n                  ? patientProfile.bloodGroup\n                  : \"No Blood Group\"\n              }\n            />\n          </Grid>\n          <Grid item container md={6} sm={6} xs={12}>\n            <ProfileCard\n              text=\"GenoType\"\n              value={\n                patientProfile.genotype\n                  ? patientProfile.genotype\n                  : \"No Genotype\"\n              }\n            />\n          </Grid>\n          <Grid item container md={6} sm={6} xs={12}>\n            <ProfileCard\n              text=\"BMI\"\n              value={\n                patientProfile.height\n                  ? calculateBMI(\n                      patientProfile.height,\n                      patientProfile.weight\n                    ).toFixed(2)\n                  : \"No Value\"\n              }\n            />\n          </Grid>\n          <Grid item container md={6} sm={6} xs={12}>\n            <ProfileCard\n              text=\"Allergies\"\n              value={value.length > 0 ? value : \"No Allergy\"}\n            />\n          </Grid>\n          <Grid item container md={6} sm={6} xs={12}>\n            <ProfileCard\n              text=\"Lab Results\"\n              value={value.length > 0 ? labResult : \"No Lab Result\"}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n    );\n  } else return <NoData />;\n};\n\nexport default MedicalRecords;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Login.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpProfile.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpEarnings.js",["1290"],"import React, { useState, useEffect } from \"react\";\nimport { NoData } from \"components/layouts\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { Link } from \"react-router-dom\";\nimport TrendingDownIcon from \"@mui/icons-material/TrendingDown\";\nimport TrendingUpIcon from \"@mui/icons-material/TrendingUp\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { makeStyles } from \"@mui/styles\";\nimport {\n  CircularProgressBar,\n  Card,\n  Loader,\n  FormSelect,\n} from \"components/Utilities\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\nimport { getMyEarnings } from \"components/graphQL/useQuery\";\nimport {\n  financialPercent,\n  selectOptions,\n  formatNumber,\n} from \"components/Utilities/Time\";\n\nconst useStyles = makeStyles((theme) => ({\n  cardContainer: {\n    \"&.MuiCard-root\": {\n      width: \"100%\",\n      height: \"15.8rem\",\n      display: \"flex\",\n      justifyContent: \"center\",\n      flexDirection: \"column\",\n      alignItems: \"center\",\n      background: \"white\",\n      marginRight: \"5rem\",\n      \"&:hover\": {\n        boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.15)\",\n        cursor: \"pointer\",\n      },\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n      \"& .MuiCardContent-root .MuiTypography-h5\": {\n        textDecoration: \"none !important\",\n        textTransform: \"uppercase\",\n      },\n    },\n  },\n\n  iconWrapper: {\n    width: 60,\n    height: 60,\n    borderRadius: \"50%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  cardGrid: {\n    justifyContent: \"center\",\n    alignItems: \"center\",\n    height: \"25.8rem\",\n  },\n  flexContainer: {\n    justifyContent: \"space-between\",\n    alignItems: \"center\",\n    margin: \"auto\",\n    width: \"100%\",\n\n    // padding: \"2rem 4rem\",\n    \"&:first-child\": {\n      borderBottom: \".5px solid #F8F8F8\",\n    },\n  },\n  lightGreen: {\n    color: theme.palette.common.green,\n  },\n\n  lightRed: {\n    color: theme.palette.common.red,\n  },\n  mainContainer: {\n    flexDirection: \"column\",\n    width: \"100%\",\n    background: \"white\",\n    borderRadius: \"2rem\",\n    boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.15)\",\n  },\n  parentGrid: {\n    textDecoration: \"none\",\n    width: \"24.7rem\",\n    color: theme.palette.primary.main,\n    \"&.MuiGrid-item\": {\n      ...theme.typography.cardParentGrid,\n      minWidth: \"20rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n    },\n  },\n\n  cardIcon: {\n    \"&.MuiSvgIcon-root\": {\n      fontSize: \"3rem\",\n    },\n  },\n}));\n\nconst HcpEarnings = () => {\n  const classes = useStyles();\n  const { hcpId } = useParams();\n\n  const [form, setForm] = useState(\"\");\n  const { data, error, loading, refetch } = useQuery(getMyEarnings, {\n    variables: {\n      doctor: hcpId,\n    },\n  });\n  // const { data: datas } = useQuery(getMyEarningDoc, {\n  //   variables: { doc: hcpId },\n  // });\n  const [totalEarning, setTotalEarning] = useState([]);\n  const [totalPayouts, setTotalPayouts] = useState([]);\n  const financialValue = financialPercent(totalEarning, totalPayouts);\n  const [finances, setFinances] = useState(financialValue);\n  const onChange = async (e) => {\n    setForm(e.target.value);\n    await refetch({ q: e.target.value });\n  };\n\n  const theme = useTheme();\n  useEffect(() => {\n    if (data) {\n      const { totalEarnings, totalPayouts } = data?.getMyEarnings;\n      setTotalEarning(totalEarnings);\n      setTotalPayouts(totalPayouts);\n      const value = financialPercent(totalEarnings, totalPayouts);\n      setFinances(value);\n    }\n  }, [form, data]);\n  // const classes = useStyles();\n\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error} />;\n  return (\n    <Grid container gap={3}>\n      <Grid\n        item\n        container\n        rowGap={4}\n        padding={{ md: \"2rem 4rem\", sm: \"2rem, 4rem\", xs: \"1rem\" }}\n        className={classes.mainContainer}\n        flexDirection={{ md: \"row\", sm: \"row\", xs: \"column\" }}\n        sx={{ alignItems: \"center\", justifyContent: \"space-between\" }}\n      >\n        <Grid item container className={classes.flexContainer}>\n          <Grid item>\n            <Typography variant=\"h1\" color=\"#2D2F39\">\n              Earning\n            </Typography>\n          </Grid>\n          <Grid item>\n            <FormSelect\n              placeholder=\"Select days\"\n              value={form}\n              onChange={onChange}\n              options={selectOptions}\n              name=\"finance\"\n            />\n          </Grid>\n        </Grid>\n        <Grid\n          item\n          container\n          alignItems=\"center\"\n          flexDirection={{ md: \"row\", sm: \"row\", xs: \"column\" }}\n          spacing={{ md: 2, xs: 2, sm: 2 }}\n        >\n          <Grid item>\n            <CircularProgressBar\n              height=\"17rem\"\n              width=\"17rem\"\n              color={theme.palette.common.green}\n              trailColor={theme.palette.common.red}\n              value={finances}\n              strokeWidth={8}\n            />\n          </Grid>\n          <Grid item flex={1}>\n            <Grid\n              container\n              alignItems=\"center\"\n              rowGap={4}\n              justifyContent={{\n                md: \"space-around\",\n                xs: \"flex-start\",\n                sm: \"space-around\",\n              }}\n            >\n              <Grid\n                item\n                spacing={2}\n                sx={{ justifyContent: \"center\", alignItems: \"center\" }}\n              >\n                <Grid\n                  container\n                  alignItems=\"center\"\n                  gap={{ md: 2, sm: 2, xs: 4 }}\n                >\n                  <Grid\n                    className={classes.iconWrapper}\n                    sx={{ background: theme.palette.common.lightGreen }}\n                  >\n                    <Grid item>\n                      <TrendingDownIcon\n                        color=\"success\"\n                        className={classes.cardIcon}\n                      />\n                    </Grid>\n                  </Grid>\n                  <Grid item>\n                    <Typography noWrap variant=\"h2\">\n                      <span\n                        style={{\n                          textDecoration: \"line-through\",\n                          textDecorationStyle: \"double\",\n                        }}\n                      >\n                        N{\"\"}\n                      </span>\n                      {formatNumber(totalEarning)}\n                    </Typography>\n                    <Typography\n                      variant=\"body2\"\n                      style={{\n                        color: theme.palette.common.lightGrey,\n                      }}\n                    >\n                      Total Earnings\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n              {/* second */}\n              <Grid item>\n                <Grid\n                  container\n                  alignItems=\"center\"\n                  gap={{ md: 2, sm: 2, xs: 4 }}\n                >\n                  <Grid\n                    className={classes.iconWrapper}\n                    sx={{ background: theme.palette.common.lightRed }}\n                  >\n                    <Grid item>\n                      <TrendingUpIcon\n                        color=\"error\"\n                        className={classes.cardIcon}\n                      />\n                    </Grid>\n                  </Grid>\n                  <Grid item>\n                    <Typography noWrap variant=\"h2\">\n                      <span\n                        style={{\n                          textDecoration: \"line-through\",\n                          textDecorationStyle: \"double\",\n                        }}\n                      >\n                        N{\"\"}\n                      </span>\n                      {formatNumber(+totalPayouts)}\n                    </Typography>\n                    <Typography\n                      variant=\"body2\"\n                      style={{\n                        color: theme.palette.common.lightGrey,\n                      }}\n                    >\n                      Total Payouts\n                    </Typography>\n                  </Grid>\n                </Grid>\n              </Grid>\n              {/* second */}\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n      {/* iterms */}\n      <Grid item container justifyContent=\"space-evenly\">\n        {/* 1 */}\n        <Grid item container md={4} sm={4} xs={12}>\n          <Grid item container flexDirection=\"column\">\n            <Link\n              to={`/hcps/${hcpId}/earnings/payout`}\n              style={{ textDecoration: \"none\" }}\n            >\n              <Card\n                title=\"Total Payout\"\n                background={theme.palette.common.lightRed}\n              >\n                <TrendingUpIcon color=\"error\" className={classes.cardIcon} />\n              </Card>\n            </Link>\n          </Grid>\n        </Grid>\n        {/* 2 */}\n        <Grid item container md={4} sm={4} xs={12}>\n          <Grid item container flexDirection=\"column\">\n            <Link\n              to={`/hcps/${hcpId}/earnings/earn`}\n              style={{ textDecoration: \"none\" }}\n            >\n              <Card\n                title=\"Total Earnings\"\n                background={theme.palette.common.lightGreen}\n              >\n                <Grid className={classes.iconWrapper}>\n                  <TrendingDownIcon\n                    color=\"success\"\n                    className={classes.cardIcon}\n                  />\n                </Grid>\n              </Card>\n            </Link>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default HcpEarnings;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Email.js",["1291","1292","1293"],"import React, { useState, useEffect } from \"react\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useSelector } from \"react-redux\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { Loader, CustomButton } from \"components/Utilities\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport {\n  TableRow,\n  Alert,\n  TableCell,\n  Checkbox,\n  Button,\n  Grid,\n  Typography,\n} from \"@mui/material\";\nimport { Link } from \"react-router-dom\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { dateMoment } from \"components/Utilities/Time\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { getEmailList } from \"components/graphQL/useQuery\";\nimport { emailHeader } from \"components/Utilities/tableHeaders\";\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\nimport TableLayout from \"components/layouts/TableLayout\";\n// import { emailPageDefaultFilterValues } from \"helpers/mockData\";\n//roleFilterBy\nconst useStyles = makeStyles((theme) => ({\n  chip: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.25rem\",\n      height: \"3rem\",\n      borderRadius: \"1.3rem\",\n      background: theme.palette.common.white,\n      color: theme.palette.common.green,\n      \"& .MuiChip-deleteIcon\": {\n        color: \"inherit\",\n        fontSize: \"inherit\",\n      },\n    },\n  },\n  button: {\n    \"&.MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"0.5rem\",\n      maxWidth: \"7rem\",\n      fontSize: \".85rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"0.85rem\",\n      },\n\n      \"& .MuiButton-endIcon\": {\n        marginLeft: \".2rem\",\n        marginTop: \"-.2rem\",\n      },\n    },\n  },\n  btn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      width: \"100%\",\n    },\n  },\n  FormLabel: {\n    \"&.MuiFormLabel-root\": {\n      ...theme.typography.FormLabel,\n    },\n  },\n\n  tableCell: {\n    \"&.MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n}));\n\nconst Email = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [\n    fetchEmails,\n    {\n      loading,\n      error,\n      data,\n      // refetch, variables\n    },\n  ] = useLazyQuery(getEmailList);\n  const [emails, setEmails] = useState([]);\n\n  useEffect(() => {\n    fetchEmails();\n  }, [fetchEmails]);\n\n  useEffect(() => {\n    if (data) {\n      setEmails(data.getEmailList.data);\n    }\n  }, [data]);\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n  const [response] = useState(\"\");\n  /* const [searchMail, setSearchMail] = useState(\"\"); */\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n\n  // const [filterValues, setFilterValues] = useState(emailPageDefaultFilterValues);\n\n  if (error) return <NoData error={error} />;\n\n  return (\n    <>\n      <Grid\n        container\n        direction=\"column\"\n        height=\"100%\"\n        flexWrap=\"nowrap\"\n        gap={2}\n      >\n        {response ? (\n          <Grid\n            item\n            width={300}\n            margin=\"auto\"\n            justifyContent=\"center\"\n            alignItems=\"center\"\n            textAlign=\"center\"\n          >\n            <Alert severity=\"success\">\n              <Typography variant=\"h1\">{response}</Typography>\n            </Alert>\n          </Grid>\n        ) : null}\n        <Grid\n          item\n          direction={{ sm: \"row\", xs: \"column\" }}\n          container\n          justifyContent={\"flex-end\"}\n          gap={{ md: 4, sm: 4, xs: 2 }}\n        >\n          <Grid item>\n            <CustomButton\n              endIcon={<AddIcon />}\n              component={Link}\n              to=\"/email/create-email\"\n              title=\"Add Email\"\n              type={buttonType}\n            />\n          </Grid>\n        </Grid>\n\n        <TableLayout>\n          {loading ? (\n            <Loader />\n          ) : emails && emails.length > 0 ? (\n            <Grid item container direction=\"column\" height=\"100%\">\n              <EnhancedTable\n                headCells={emailHeader}\n                rows={emails}\n                paginationLabel=\"email per page\"\n                handleChangePage={() => console.log(\"\")}\n                hasCheckbox={true}\n                changeLimit={() => console.log(\"\")}\n                fetchData={() => console.log(\"\")}\n                dataPageInfo={{}}\n                hasPagination={false}\n              >\n                {emails &&\n                  emails\n                    // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((row, index) => {\n                      const { _id, email, createdAt, role } = row;\n                      const isItemSelected = isSelected(_id, selectedRows);\n\n                      const labelId = `enhanced-table-checkbox-${index}`;\n\n                      return (\n                        <TableRow\n                          hover\n                          role=\"checkbox\"\n                          aria-checked={isItemSelected}\n                          tabIndex={-1}\n                          key={_id}\n                          selected={isItemSelected}\n                        >\n                          <TableCell padding=\"checkbox\">\n                            <Checkbox\n                              onClick={() =>\n                                handleSelectedRows(\n                                  _id,\n                                  selectedRows,\n                                  setSelectedRows\n                                )\n                              }\n                              color=\"primary\"\n                              checked={isItemSelected}\n                              inputProps={{\n                                \"aria-labelledby\": labelId,\n                              }}\n                            />\n                          </TableCell>\n\n                          <TableCell\n                            id={labelId}\n                            scope=\"row\"\n                            align=\"left\"\n                            className={classes.tableCell}\n                            style={{ color: theme.palette.common.black }}\n                          >\n                            {dateMoment(createdAt)}\n                          </TableCell>\n                          <TableCell\n                            id={labelId}\n                            scope=\"row\"\n                            align=\"left\"\n                            className={classes.tableCell}\n                            style={{ color: theme.palette.common.black }}\n                          >\n                            {email}\n                          </TableCell>\n\n                          <TableCell\n                            align=\"left\"\n                            className={classes.tableCell}\n                            style={{ color: theme.palette.common.red }}\n                          >\n                            {role}\n                          </TableCell>\n\n                          <TableCell>\n                            <Button\n                              variant=\"contained\"\n                              className={classes.button}\n                              component={Link}\n                              disabled\n                              to={`email/${index}`}\n                              endIcon={<ArrowForwardIosIcon />}\n                              /* onClick={() => setSelectedSubMenu(7)} */\n                            >\n                              View mail\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n              </EnhancedTable>\n            </Grid>\n          ) : (\n            <EmptyTable\n              headCells={emailHeader}\n              paginationLabel=\"Email  per page\"\n            />\n          )}\n        </TableLayout>\n      </Grid>\n    </>\n  );\n};\n\nexport default Email;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HCPChat.js",["1294","1295"],"import React, { useEffect, useState } from \"react\";\nimport { Grid, Typography, Divider } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { CustomButton, Loader, PreviousButton } from \"components/Utilities\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { useHistory } from \"react-router-dom\";\nimport { makeStyles } from \"@mui/styles\";\nimport { CREATE_MESSAGE } from \"components/graphQL/Mutation\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport { getMessage, doctor } from \"components/graphQL/useQuery\";\n\nconst useStyles = makeStyles((theme) => ({\n  gridWrapper: {\n    \"&.MuiGrid-item\": {\n      borderRadius: \"1rem\",\n      background: \"#fff\",\n      padding: \"2rem 4rem\",\n      maxWidth: \"60rem !important\",\n      boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.1)\",\n    },\n  },\n  inputGrid: {\n    flex: 1,\n    alignItems: \"center\",\n  },\n  heading: {\n    \"&.MuiTypography-root\": {\n      color: theme.palette.common.grey,\n      //   fontSize: \"1rem\"\n    },\n  },\n  formInput: {\n    width: \"100%\",\n    height: \"100%\",\n    fontSize: \"1.5rem\",\n    padding: \".5rem 1rem\",\n    border: \"none\",\n    background: \"transparent\",\n    color: theme.palette.common.grey,\n\n    \"&:focus\": {\n      outline: \"none\",\n    },\n  },\n  textArea: {\n    border: \"1px solid rgba(0, 0, 0, 0.03)\",\n    resize: \"none\",\n    borderRadius: \"0.5rem\",\n  },\n  divider: {\n    \"&.MuiDivider-root\": {\n      borderColor: \"rgba(0, 0, 0, 0.03)\",\n    },\n  },\n}));\n\nconst HCPChat = () => {\n  const { hcpId } = useParams();\n\n  const classes = useStyles();\n  const theme = useTheme();\n  let history = useHistory();\n  const [createNewMessage] = useMutation(CREATE_MESSAGE, {\n    refetchQueries: [{ query: getMessage }],\n  });\n  const { data, loading } = useQuery(doctor, { variables: { id: hcpId } });\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n  const [profile, setprofile] = useState(\"\");\n  const { firstName, lastName } = profile;\n\n  const initialValues = {\n    subject: \"\",\n    recipient: `${firstName} ${lastName} ` || \"\",\n    textarea: \"\",\n  };\n\n  useEffect(() => {\n    if (data) {\n      setprofile(data.doctorProfile);\n    }\n  }, [data]);\n\n  const validationSchema = Yup.object({\n    subject: Yup.string(\"Enter your subject\").required(\"Subject is required\"),\n    textarea: Yup.string(\"Enter your message\").required(\"Message is required\"),\n    recipient: Yup.string(\"Enter your recipient\").required(\n      \"recipients is required\"\n    ),\n  });\n  const onSubmit = async (values, onSubmitProps) => {\n    const id = localStorage.getItem(\"user_id\");\n    const { subject, textarea } = values;\n\n    try {\n      await createNewMessage({\n        variables: {\n          sender: id,\n          recipient: hcpId,\n          subject,\n          body: textarea,\n        },\n      });\n    } catch (error) {\n      console.log(error);\n    }\n    onSubmitProps.resetForm();\n    history.goBack();\n  };\n\n  if (loading) return <Loader />;\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validateOnBlur={false}\n      validationSchema={validationSchema}\n      validateOnChange={false}\n      validateOnMount={false}\n      enableReinitialize\n    >\n      {({ isValid, isSubmitting, dirty }) => {\n        return (\n          <Form>\n            <Grid container direction=\"column\">\n              <Grid item style={{ marginBottom: \"3rem\" }}>\n                <PreviousButton\n                  path={`/hcps/${hcpId}/profile`}\n                  /* onClick={() => setSelectedScopedMenu(0)} */\n                />\n              </Grid>\n              <Grid item container direction=\"column\" alignItems=\"center\">\n                <Grid item>\n                  <Typography variant=\"h4\" style={{ marginBottom: \"3rem\" }}>\n                    Create New Message\n                  </Typography>\n                </Grid>\n                <Grid\n                  item\n                  container\n                  direction=\"column\"\n                  className={classes.gridWrapper}\n                >\n                  <Grid item>\n                    <Grid\n                      item\n                      container\n                      alignItems=\"center\"\n                      sx={{ gap: \"0!important\" }}\n                    >\n                      <Grid item>\n                        <Typography variant=\"body2\" className={classes.heading}>\n                          Recipient:\n                        </Typography>\n                      </Grid>\n                      <Grid item className={classes.inputGrid}>\n                        <FormikControl\n                          control=\"input\"\n                          id=\"message\"\n                          name=\"recipient\"\n                          disabled\n                          variant=\"standard\"\n                          className={classes.formInput}\n                        />\n                      </Grid>\n                    </Grid>\n                    <Divider className={classes.divider} />\n                  </Grid>\n                  <Grid item>\n                    <Grid container alignItems=\"center\">\n                      <Grid item>\n                        <Typography variant=\"body2\" className={classes.heading}>\n                          Subject:\n                        </Typography>\n                      </Grid>\n                      <Grid item className={classes.inputGrid}>\n                        <FormikControl\n                          control=\"input\"\n                          id=\"subject\"\n                          name=\"subject\"\n                          variant=\"standard\"\n                          className={classes.formInput}\n                        />\n                      </Grid>\n                    </Grid>\n                    <Divider className={classes.divider} />\n                  </Grid>\n                  <Grid item>\n                    <Grid container direction=\"column\">\n                      <Grid item>\n                        <Typography variant=\"body2\" className={classes.heading}>\n                          Message:\n                        </Typography>\n                      </Grid>\n                      <Grid item style={{ height: \"15rem\" }}>\n                        <FormikControl\n                          control=\"textarea\"\n                          id=\"textarea\"\n                          name=\"textarea\"\n                          variant=\"standard\"\n                          fLabel={true}\n                        />\n                      </Grid>\n                    </Grid>\n                    {/* <Divider className={classes.divider} /> */}\n                  </Grid>\n                  <Grid\n                    item\n                    style={{ alignSelf: \"flex-end\", marginTop: \"2rem\" }}\n                  >\n                    <CustomButton\n                      title=\"Send Message\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                      // endIcon={<ArrowForwardIosIcon style={{ fontSize: \"1.5rem\" }} />}\n                    />\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nexport default HCPChat;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Payout.js",["1296","1297","1298","1299","1300","1301"],"import React, { useEffect, useState } from \"react\";\nimport { NoData, EmptyTable } from \"components/layouts\";\nimport {\n  Grid,\n  Typography,\n  Chip,\n  Checkbox,\n  TableRow,\n  TableCell,\n  Avatar,\n} from \"@mui/material\";\nimport { timeMoment, dateMoment } from \"components/Utilities/Time\";\nimport { Loader } from \"components/Utilities\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { getPayoutData } from \"components/graphQL/useQuery\";\nimport { EnhancedTable } from \"components/layouts\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { payoutHeader } from \"components/Utilities/tableHeaders\";\nimport useAlert from \"hooks/useAlert\";\nimport { useSelector } from \"react-redux\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { isSelected } from \"helpers/isSelected\";\nimport Filter from \"components/Forms/Filters\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport { defaultPageInfo, payoutFilterBy } from \"helpers/mockData\";\nimport {\n  changeTableLimit,\n  deleteVar,\n  fetchMoreData,\n  filterData,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport TableLayout from \"components/layouts/TableLayout\";\n\nconst useStyles = makeStyles((theme) => ({\n  iconWrapper: {\n    width: 20,\n    height: 20,\n    borderRadius: \"50%\",\n    display: \"grid\",\n    placeContent: \"center\",\n    marginLeft: \"1rem\",\n    background: theme.palette.common.lightGreen,\n  },\n  button: {\n    \"&.css-1zf5oc-MuiButtonBase-root-MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"1rem\",\n      maxWidth: \"10rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .css-9tj150-MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.2rem\",\n      },\n\n      \"& .css-9tj150-MuiButton-endIcon\": {\n        marginLeft: \".3rem\",\n        marginTop: \"-.2rem\",\n      },\n    },\n  },\n\n  tableCell: {\n    \"&.css-1jilxo7-MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.6rem !important\",\n      height: \"3rem\",\n      borderRadius: \"1.3rem\",\n    },\n  },\n}));\n\nconst Payout = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { displayAlert } = useAlert();\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n  const [payout, setPayout] = useState([]);\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\n\n  const [statusFilterValue, setStatusFilterValue] = useState(\"\");\n  const [fetchPayout, { loading, error, refetch, variables }] =\n    useLazyQuery(getPayoutData);\n\n  useEffect(() => {\n    try {\n      fetchPayout({ variables: { first: pageInfo?.limit } }).then(\n        ({ data }) => {\n          if (!data) throw Error(\"Couldn't fetch doctors payout data\");\n          setPageInfo(data?.getEarningStats?.payoutData?.PageInfo);\n          setPayout(data?.getEarningStats?.payoutData?.data);\n        }\n      );\n    } catch (error) {\n      console.error(error);\n    }\n  }, [fetchPayout, pageInfo?.limit]);\n\n  const onFilterStatusChange = async (value) => {\n    try {\n      deleteVar(variables);\n      setStatusFilterValue(value);\n      const filterVariables = { status: value };\n\n      filterData(filterVariables, {\n        fetchData: fetchPayout,\n        refetch: refetch,\n        variables: variables,\n      })\n        .then((data) => {\n          setPayout(data?.getEarningStats?.payoutData?.data || []);\n          setPageInfo(data?.getEarningStats?.payoutData?.PageInfo || {});\n        })\n        .catch(() => {\n          refresh(setStatusFilterValue, \"\");\n        });\n    } catch (error) {\n      console.error(error);\n      refresh(setStatusFilterValue, \"\");\n    }\n  };\n\n  const refresh = async (setFilterValue, defaultVal) => {\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\n    setFilterValue(defaultVal);\n\n    deleteVar(variables);\n\n    refetch()\n      .then(({ data }) => {\n        setPayout(data?.getEarningStats?.payoutData?.data || []);\n        setPageInfo(data?.getEarningStats?.payoutData?.PageInfo || {});\n      })\n      .catch((error) => {\n        console.error(error);\n        displayAlert(\"error\", \"Failed to get patients data, Try again\");\n      });\n  };\n\n  const setTableData = async (response, errMsg) => {\n    response\n      .then(({ data }) => {\n        setPageInfo(\n          data?.getEarningStats?.payoutData?.PageInfo || defaultPageInfo\n        );\n        setPayout(data?.getEarningStats?.payoutData?.data || []);\n      })\n      .catch((error) => {\n        console.error(error);\n        displayAlert(\"error\", errMsg);\n      });\n  };\n\n  if (error) return <NoData error={error} />;\n\n  return (\n    <Grid container direction=\"column\" rowSpacing={2}>\n      <>\n        <Grid\n          item\n          container\n          justifyContent=\"space-between\"\n          style={{ paddingBottom: \"3rem\" }}\n        ></Grid>\n        <TableLayout\n          filters={\n            <Filter\n              onHandleChange={(e) => onFilterStatusChange(e?.target?.value)}\n              onClickClearBtn={() => onFilterStatusChange(\"\")}\n              options={[{ key: \"Status\", value: \"\" }, ...payoutFilterBy]}\n              name=\"status\"\n              placeholder=\"None\"\n              value={statusFilterValue}\n              hasClearBtn={true}\n            />\n          }\n        >\n          {loading ? (\n            <Loader />\n          ) : payout.length > 0 ? (\n            <Grid item container>\n              <EnhancedTable\n                headCells={payoutHeader}\n                rows={payout}\n                paginationLabel=\"payout per page\"\n                hasCheckbox={true}\n                changeLimit={async (e) => {\n                  const res = await changeTableLimit(fetchPayout, { first: e });\n                  await setTableData(res, \"Failed to change table limit.\");\n                }}\n                dataPageInfo={pageInfo}\n                handlePagination={async (page) => {\n                  const res = await handlePageChange(\n                    fetchPayout,\n                    page,\n                    pageInfo,\n                    {}\n                  );\n                  await setTableData(res, \"Failed to change table page.\");\n                }}\n                fetchData={fetchPayout}\n                handleChangePage={fetchMoreData}\n              >\n                {payout.map((row, index) => {\n                  const { amount, createdAt, status, _id, doctorData } = row;\n                  const data = doctorData || [];\n                  const { firstName, lastName, picture } = data[0] || {};\n                  const isItemSelected = isSelected(_id, selectedRows);\n                  const labelId = `enhanced-table-checkbox-${index}`;\n\n                  return (\n                    <TableRow\n                      hover\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={_id}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          onClick={() =>\n                            handleSelectedRows(\n                              _id,\n                              selectedRows,\n                              setSelectedRows\n                            )\n                          }\n                          color=\"primary\"\n                          checked={isItemSelected}\n                          inputProps={{\n                            \"aria-labelledby\": labelId,\n                          }}\n                        />\n                      </TableCell>\n                      <TableCell\n                        id={labelId}\n                        scope=\"row\"\n                        align=\"left\"\n                        className={classes.tableCell}\n                        style={{ color: theme.palette.common.black }}\n                      >\n                        {dateMoment(createdAt)}\n                      </TableCell>\n                      <TableCell\n                        id={labelId}\n                        scope=\"row\"\n                        align=\"left\"\n                        className={classes.tableCell}\n                        style={{ color: theme.palette.common.black }}\n                      >\n                        {timeMoment(createdAt)}\n                      </TableCell>\n                      <TableCell align=\"left\" className={classes.tableCell}>\n                        {row?.doctorData && row?.doctorData[0] !== {} ? (\n                          <div\n                            style={{\n                              height: \"100%\",\n                              display: \"flex\",\n                              alignItems: \"left\",\n                            }}\n                          >\n                            <span style={{ marginRight: \"1rem\" }}>\n                              <Avatar\n                                alt={`Display Photo of ${firstName}`}\n                                src={picture ? picture : displayPhoto}\n                                sx={{ width: 24, height: 24 }}\n                              />\n                            </span>\n                            <span style={{ fontSize: \"1.25rem\" }}>{`${\n                              firstName && firstName\n                            } ${lastName && lastName}`}</span>\n                          </div>\n                        ) : (\n                          \"No Name\"\n                        )}\n                      </TableCell>\n                      <TableCell\n                        align=\"left\"\n                        className={classes.tableCell}\n                        style={{ color: theme.palette.common.red }}\n                      >\n                        {amount}\n                      </TableCell>\n                      <TableCell align=\"left\" className={classes.tableCell}>\n                        <Chip\n                          label={status}\n                          className={classes.badge}\n                          style={{\n                            background:\n                              status === \"Success\"\n                                ? theme.palette.common.lightGreen\n                                : status === \"Failed\"\n                                ? theme.palette.common.lightGreen\n                                : theme.palette.common.lightRed,\n                            color:\n                              status === \"Success\"\n                                ? theme.palette.common.green\n                                : status === \"Failed\"\n                                ? theme.palette.common.danger\n                                : theme.palette.common.red,\n                          }}\n                        />\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </EnhancedTable>\n            </Grid>\n          ) : (\n            <EmptyTable\n              headCells={payoutHeader}\n              paginationLabel=\"Payout  per page\"\n            />\n          )}\n        </TableLayout>\n      </>\n    </Grid>\n  );\n};\n\nexport default Payout;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HCP.js",["1302","1303","1304"],"import React, { useState, useEffect } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { useTheme } from \"@mui/material/styles\";\nimport {\n  Grid,\n  Button,\n  Avatar,\n  Chip,\n  TableRow,\n  TableCell,\n  Checkbox,\n} from \"@mui/material\";\nimport useAlert from \"hooks/useAlert\";\nimport Filter from \"components/Forms/Filters\";\nimport { isSelected } from \"helpers/isSelected\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport { Loader } from \"components/Utilities\";\nimport { dateMoment } from \"components/Utilities/Time\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { getVerification } from \"components/graphQL/useQuery\";\nimport { HCPHeader } from \"components/Utilities/tableHeaders\";\nimport { useStyles } from \"../../styles/docVerificationPageStyles\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\nimport { docVerifyStatusFilterBy } from \"helpers/mockData\";\nimport {\n  changeTableLimit,\n  deleteVar,\n  filterData,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport TableLayout from \"components/layouts/TableLayout\";\n\nconst HCP = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { displayAlert } = useAlert();\n  const [pageInfo, setPageInfo] = useState({\n    page: 0,\n    totalPages: 1,\n    hasNextPage: false,\n    hasPrevPage: false,\n    limit: 10,\n    totalDocs: 0,\n  });\n\n  const [statusFilterValue, setStatusFilterValue] = useState(\"\");\n  const [fetchVerifications, { loading, data, error, variables, refetch }] =\n    useLazyQuery(getVerification);\n\n  useEffect(() => {\n    fetchVerifications({\n      variables: {\n        first: pageInfo.limit,\n      },\n      notifyOnNetworkStatusChange: true,\n    });\n  }, [fetchVerifications, pageInfo]);\n\n  /* const [response, setResponse] = useState(\"\"); */\n\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n  /*   const [searchMail, setSearchMail] = useState(\"\"); */\n\n  const [respondData, setRespondData] = useState([]); //setRespondData\n\n  useEffect(() => {\n    try {\n      if (data) {\n        setRespondData(data.getVerifications.verification);\n        setPageInfo(data.getVerifications.pageInfo);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }, [data]);\n\n  const onFilterStatusChange = async (value) => {\n    try {\n      deleteVar(variables);\n      setStatusFilterValue(value);\n      const filterVariables = { status: value };\n\n      filterData(filterVariables, {\n        fetchData: fetchVerifications,\n        refetch: refetch,\n        variables: variables,\n      })\n        .then((data) => {\n          setRespondData(data.getVerifications.verification || []);\n          setPageInfo(data.getVerifications.pageInfo || {});\n        })\n        .catch(() => {\n          refresh(setStatusFilterValue, \"\");\n        });\n    } catch (error) {\n      console.error(error);\n      refresh(setStatusFilterValue, \"\");\n    }\n  };\n\n  const refresh = async (setFilterValue, defaultVal) => {\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\n    setFilterValue(defaultVal);\n\n    deleteVar(variables);\n\n    refetch()\n      .then(({ data }) => {\n        setRespondData(data.getVerifications.verification || []);\n        setPageInfo(data.getVerifications.pageInfo || {});\n      })\n      .catch((error) => {\n        console.error(error);\n        displayAlert(\"error\", \"Failed to get patients data, Try again\");\n      });\n  };\n\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error} />;\n\n  return (\n    <>\n      <Grid\n        container\n        direction=\"column\"\n        gap={2}\n        flexWrap=\"nowrap\"\n        height=\"100%\"\n      >\n        <Grid item container>\n          <Grid\n            item\n            direction={{ sm: \"row\", xs: \"column\" }}\n            gap={{ md: 4, sm: 4, xs: 2 }}\n            container\n          ></Grid>\n        </Grid>\n        <TableLayout\n          filters={\n            <Filter\n              onHandleChange={(e) => onFilterStatusChange(e?.target?.value)}\n              onClickClearBtn={() => onFilterStatusChange(\"\")}\n              options={[\n                { key: \"Status\", value: \"\" },\n                ...docVerifyStatusFilterBy,\n              ]}\n              name=\"status\"\n              placeholder=\"By status\"\n              value={statusFilterValue}\n              hasClearBtn={true}\n            />\n          }\n        >\n          {respondData.length > 0 ? (\n            <Grid container item height=\"100%\" direction=\"column\">\n              <EnhancedTable\n                headCells={HCPHeader}\n                rows={respondData}\n                paginationLabel=\"verification per page\"\n                hasCheckbox={true}\n                changeLimit={async (e) => {\n                  changeTableLimit(fetchVerifications, { first: e });\n                }}\n                dataPageInfo={pageInfo}\n                handlePagination={async (page) => {\n                  handlePageChange(fetchVerifications, page, pageInfo, {});\n                }}\n              >\n                {respondData\n                  // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                  .map((row, index) => {\n                    const {\n                      createdAt,\n                      status,\n                      qualification,\n                      doctorData,\n                      _id,\n                    } = row;\n                    const isItemSelected = isSelected(_id, selectedRows);\n\n                    const labelId = `enhanced-table-checkbox-${index}`;\n\n                    return (\n                      <TableRow\n                        hover\n                        role=\"checkbox\"\n                        aria-checked={isItemSelected}\n                        tabIndex={-1}\n                        key={_id}\n                        selected={isItemSelected}\n                      >\n                        <TableCell padding=\"checkbox\">\n                          <Checkbox\n                            onClick={() =>\n                              handleSelectedRows(\n                                _id,\n                                selectedRows,\n                                setSelectedRows\n                              )\n                            }\n                            color=\"primary\"\n                            checked={isItemSelected}\n                            inputProps={{\n                              \"aria-labelledby\": labelId,\n                            }}\n                          />\n                        </TableCell>\n                        <TableCell\n                          id={labelId}\n                          scope=\"row\"\n                          align=\"left\"\n                          className={classes.tableCell}\n                          style={{ color: theme.palette.common.black }}\n                        >\n                          {dateMoment(createdAt)}\n                        </TableCell>\n\n                        <TableCell align=\"left\" className={classes.tableCell}>\n                          <div\n                            style={{\n                              height: \"100%\",\n                              display: \"flex\",\n                              alignItems: \"left\",\n                            }}\n                          >\n                            <span style={{ marginRight: \"1rem\" }}>\n                              <Avatar\n                                alt={`image of ${\n                                  doctorData && doctorData.firstName\n                                }`}\n                                src={\n                                  doctorData ? doctorData.picture : displayPhoto\n                                }\n                                sx={{ width: 24, height: 24 }}\n                              />\n                            </span>\n                            <span style={{ fontSize: \"1.25rem\" }}>\n                              {doctorData && doctorData.firstName}\n                            </span>\n                          </div>\n                        </TableCell>\n                        <TableCell\n                          id={labelId}\n                          scope=\"row\"\n                          align=\"left\"\n                          className={classes.tableCell}\n                          style={{ color: theme.palette.common.black }}\n                        >\n                          {doctorData && doctorData.lastName}\n                        </TableCell>\n                        <TableCell align=\"left\" className={classes.tableCell}>\n                          {qualification && qualification.degree}\n                        </TableCell>\n                        <TableCell\n                          align=\"left\"\n                          className={classes.tableCell}\n                          style={{ color: theme.palette.common.red }}\n                        >\n                          <Chip\n                            label={status ? \"Verified\" : \"Not Verified\"}\n                            className={classes.badge}\n                            style={{\n                              background:\n                                status === true\n                                  ? theme.palette.common.lightGreen\n                                  : theme.palette.common.lightRed,\n                              color:\n                                status === true\n                                  ? theme.palette.common.green\n                                  : theme.palette.common.red,\n                            }}\n                          />\n                        </TableCell>\n                        <TableCell align=\"left\" className={classes.tableCell}>\n                          {qualification && dateMoment(qualification.year)}\n                        </TableCell>\n\n                        <TableCell>\n                          <Button\n                            variant=\"contained\"\n                            className={classes.button}\n                            style={{\n                              whiteSpace: \"nowrap\",\n                              padding: \"5% 50%\",\n                              marginLeft: \"-10%\",\n                            }}\n                            component={Link}\n                            endIcon={<ArrowForwardIosIcon />}\n                            to={`/verification/view/${_id}`}\n                          >\n                            View Verification{\" \"}\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n              </EnhancedTable>\n            </Grid>\n          ) : (\n            <EmptyTable\n              headCells={HCPHeader}\n              paginationLabel=\"Verification  per page\"\n            />\n          )}\n        </TableLayout>\n      </Grid>\n    </>\n  );\n};\n\nexport default HCP;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ViewDoctorVerification.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/DoctorVerificationProfile.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Dashboard.js",["1305","1306","1307"],"import React, { useEffect, useState } from \"react\";\nimport { Grid } from \"@mui/material\";\nimport { getProviders } from \"components/graphQL/useQuery\";\nimport { useQuery, useLazyQuery } from \"@apollo/client\";\nimport { dashboard, dashboard1 } from \"components/graphQL/useQuery\";\nimport { NoData, AvailabilityTable, DashboardCharts } from \"components/layouts\";\nimport { Loader } from \"components/Utilities\";\n\nconst Dashboard = () => {\n  const [form, setForm] = useState(\"\");\n  const [dropDown, setDropDown] = useState([]);\n  const [state, setState] = useState(\"\");\n  const { data: da } = useQuery(getProviders);\n\n  const [provider, setProvider] = useState(\"\");\n  const [fetchData, { data: newData, error: err, loading: load }] =\n    useLazyQuery(dashboard);\n  const [fetchData2, { data: newData2, error, loading }] =\n    useLazyQuery(dashboard1);\n\n  useEffect(() => {\n    const all = {\n      key: \"All Stats\",\n      value: \"\",\n    };\n    if (da) {\n      const datas = da.getProviders.provider;\n      const options = datas?.map((i) => {\n        return {\n          key: i.name,\n          value: i._id,\n        };\n      });\n\n      setDropDown([all, ...options]);\n    }\n  }, [da]);\n\n  useEffect(() => {\n    if (newData2) {\n      setState(newData2);\n    }\n    //eslint-disable-next-line\n  }, []);\n  const onChange = async (e) => {\n    setProvider(e.target.value);\n    setForm(e.target.value);\n  };\n\n  useEffect(() => {\n    if (provider === \"\") {\n      fetchData2();\n    } else {\n      fetchData({\n        variables: {\n          providerId: provider,\n        },\n      });\n    }\n    //eslint-disable-next-line\n  }, [provider]);\n\n  useEffect(() => {\n    if (newData) {\n      setState(newData);\n    }\n  }, [form, newData, provider]);\n  useEffect(() => {\n    if (newData2) {\n      setState(newData2);\n    }\n  }, [form, newData2, provider]);\n\n  if (loading || load) return <Loader />;\n\n  if (error || err) return <NoData error={error} />;\n\n  return (\n    <Grid container direction=\"column\" gap={2}>\n      {state ? (\n        <>\n          <DashboardCharts data={state?.getStats} />\n          <AvailabilityTable />\n        </>\n      ) : (\n        <NoData />\n      )}\n    </Grid>\n  );\n};\n\nexport default Dashboard;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/EditManagement.js",["1308","1309","1310"],"import React, { useEffect, useState } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { useSelector } from \"react-redux\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { makeStyles } from \"@mui/styles\";\nimport { Formik, Form } from \"formik\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { EnhancedTable, NoData } from \"components/layouts\";\nimport { editManagement } from \"components/Utilities/tableHeaders\";\nimport {\n  PreviousButton,\n  CustomButton,\n  Loader,\n  Modals,\n} from \"components/Utilities\";\nimport { editRole } from \"components/graphQL/Mutation\";\nimport { getRoles, getRole } from \"components/graphQL/useQuery\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { TableRow, TableCell, Grid, Typography } from \"@mui/material\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { arrangeItems } from \"../../helpers/func\";\nimport { handleError, showSuccessMsg } from \"helpers/filterHelperFunctions\";\n\nconst useStyles = makeStyles((theme) => ({\n  filterBtnGrid: {\n    \"&.MuiGrid-root\": {\n      marginRight: \"3rem\",\n    },\n  },\n  chip: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.25rem\",\n      height: \"3rem\",\n      borderRadius: \"1.3rem\",\n      background: theme.palette.common.white,\n      color: theme.palette.common.green,\n      \"& .MuiChip-deleteIcon\": {\n        color: \"inherit\",\n        fontSize: \"inherit\",\n      },\n    },\n  },\n  button: {\n    \"&.MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"0.5rem\",\n      maxWidth: \"7rem\",\n      fontSize: \".85rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"0.85rem\",\n      },\n\n      \"& .MuiButton-endIcon\": {\n        marginLeft: \".2rem\",\n        marginTop: \"-.2rem\",\n      },\n    },\n  },\n  btn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      width: \"100%\",\n    },\n  },\n\n  tableCell: {\n    \"&.MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n      gap: \"4rem\",\n    },\n  },\n}));\nconst EditManagement = () => {\n  let history = useHistory();\n  const { enqueueSnackbar } = useSnackbar();\n  const { editId } = useParams();\n  const [last, setLast] = useState([]);\n  const [isOpen, setIsOpen] = useState(false);\n  const handleDialogOpen = () => setIsOpen(true);\n  const [role, setRole] = useState([]);\n  const [state, setState] = useState({\n    description: \"\",\n    name: \"\",\n  });\n  const { data, loading, error } = useQuery(getRole, {\n    variables: { id: editId },\n  });\n\n  useEffect(() => {\n    if (data) {\n      const { name, description, permissions } = data.getRole;\n      setState({\n        name,\n        description,\n      });\n\n      setLast(permissions);\n      setRole(permissions === null ? [] : arrangeItems(permissions)); //h);  arrangeItems(\n    }\n  }, [data]);\n  const handleDialogClose = () => setIsOpen(false);\n  const initialValues1 = {\n    name: \"\",\n    value: \"\",\n  };\n\n  const onSubmit1 = (values, onSubmitProps) => {\n    const { name, value } = values;\n\n    const z = role.filter((i) => i.name === name);\n    const index = role.findIndex((object) => object.name === z[0].name);\n    const j = role[index];\n    j.value = [value, ...j.value];\n\n    setRole(role);\n    setLast([`${name}:${value}`, ...last]);\n    onSubmitProps.resetForm();\n  };\n\n  const [editRoles] = useMutation(editRole, {\n    refetchQueries: [{ query: getRoles }],\n  });\n  const onSubmit = async (values) => {\n    try {\n      const { name, description, permissions } = values;\n      await editRoles({\n        variables: {\n          id: editId,\n          name,\n          description,\n          permissions,\n        },\n      });\n      showSuccessMsg(\n        enqueueSnackbar,\n        Typography,\n        \"Premissions updated successfully.\"\n      );\n      history.push(\"/settings/management\");\n    } catch (error) {\n      handleError(error, enqueueSnackbar);\n    }\n  };\n\n  const theme = useTheme();\n  const classes = useStyles();\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n  };\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { name, description } = state;\n\n  const initialValues = {\n    permissions: last,\n    name,\n    description,\n  };\n\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error} />;\n  return (\n    <>\n      <Grid container direction=\"column\" rowSpacing={2}>\n        <Grid item>\n          <PreviousButton path=\"/settings/management\" />\n        </Grid>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={onSubmit}\n          // validationSchema={validationSchema}\n          validateOnChange={false}\n          validateOnMount={false}\n          validateOnBlur={false}\n          enableReinitialize\n        >\n          {({ isSubmitting }) => {\n            return (\n              <>\n                <Form>\n                  <Grid\n                    item\n                    container\n                    flexWrap=\"nowrap\"\n                    alignItems=\"center\"\n                    style={{ paddingBottom: \"3rem\" }}\n                  >\n                    <Grid item container alignItems=\"center\">\n                      <Typography\n                        noWrap\n                        variant=\"h1\"\n                        component=\"div\"\n                        color=\"#2D2F39\"\n                      >\n                        User Permissions\n                      </Typography>\n                    </Grid>\n\n                    <Grid\n                      item\n                      container\n                      gap={2}\n                      justifyContent=\"end\"\n                      alignItems=\"center\"\n                      justifySelf=\"flex-end\"\n                    >\n                      <Grid item>\n                        <CustomButton\n                          endIcon={<AddIcon />}\n                          title=\"Add New Permission\"\n                          type={buttonType}\n                          onClick={handleDialogOpen}\n                        />\n                      </Grid>\n                      <Grid item>\n                        <CustomButton\n                          title=\"Save Permission\"\n                          type={buttonType}\n                          isSubmitting={isSubmitting}\n                          maxWidth=\"100%\"\n                          className={classes.btn}\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n\n                  <Grid item container>\n                    <EnhancedTable\n                      headCells={editManagement}\n                      rows={role}\n                      type=\"editRole\"\n                      hasCheckbox={false}\n                    >\n                      {role.map((row, index) => {\n                        const isItemSelected = isSelected(index, selectedRows);\n                        const labelId = `enhanced-table-checkbox-${index}`;\n\n                        return (\n                          <TableRow\n                            hover\n                            role=\"checkbox\"\n                            aria-checked={isItemSelected}\n                            tabIndex={-1}\n                            key={index}\n                            selected={isItemSelected}\n                          >\n                            <TableCell\n                              role=\"checkbox\"\n                              sx={{ padding: \"0 5rem\" }}\n                            ></TableCell>\n                            <TableCell\n                              id={labelId}\n                              scope=\"row\"\n                              align=\"left\"\n                              className={classes.tableCell}\n                              style={{ color: theme.palette.common.black }}\n                            >\n                              {row.name}\n                            </TableCell>\n                            <TableCell\n                              id={labelId}\n                              scope=\"row\"\n                              align=\"left\"\n                              style={{\n                                color: theme.palette.common.black,\n                                display: \"flex\",\n                              }}\n                            >\n                              {[\n                                row.name === \"account\" ? \"count\" : \"create\",\n                                \"get-all\",\n                                \"get\",\n                                \"delete\",\n                                \"update\",\n                              ].map((type, index) => {\n                                const value = row.value.includes(type)\n                                  ? `${row.name}:${type}`\n                                  : \"\";\n                                return (\n                                  <FormikControl\n                                    control=\"check\"\n                                    name=\"permissions\"\n                                    label={type}\n                                    key={index}\n                                    value={value}\n                                  />\n                                );\n                              })}\n                            </TableCell>\n                          </TableRow>\n                        );\n                      })}\n                    </EnhancedTable>\n                  </Grid>\n                </Form>\n              </>\n            );\n          }}\n        </Formik>\n      </Grid>\n      <Modals\n        isOpen={isOpen}\n        title=\"Add New Role\"\n        rowSpacing={5}\n        handleClose={handleDialogClose}\n      >\n        <Formik\n          initialValues={initialValues1}\n          onSubmit={onSubmit1}\n          validateOnChange={false}\n          validateOnMount={false}\n          validateOnBlur={false}\n        >\n          {({ isSubmitting, dirty, isValid }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid item container gap={4} direction=\"column\">\n                  <Grid item container spacing={2}>\n                    <FormikControl\n                      control=\"input\"\n                      name=\"name\"\n                      label=\"Name\"\n                      placeholder=\"Enter Plan Name\"\n                    />\n                  </Grid>\n\n                  <Grid item container spacing={2}>\n                    <FormikControl\n                      control=\"input\"\n                      name=\"value\"\n                      label=\"Value\"\n                      placeholder=\"Enter Value\"\n                    />\n                  </Grid>\n                </Grid>\n                <Grid item container xs={12} marginTop={20}>\n                  <CustomButton\n                    title=\"Add New Role\"\n                    width=\"100%\"\n                    type={buttonType}\n                  />\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n    </>\n  );\n};\n\nexport default EditManagement;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/CreateMessage.js",["1311"],"import React, { useEffect, useState, useCallback } from \"react\";\nimport { CustomButton, PreviousButton } from \"components/Utilities\";\nimport { Divider, Grid, Typography } from \"@mui/material\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { useHistory } from \"react-router-dom\";\nimport { makeStyles } from \"@mui/styles\";\nimport { CREATE_MESSAGE } from \"components/graphQL/Mutation\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport {\n  getMessage,\n  getProfileByDociId,\n  getDoctorByDociId,\n} from \"components/graphQL/useQuery\";\n\nconst useStyles = makeStyles((theme) => ({\n  gridWrapper: {\n    \"&.MuiGrid-item\": {\n      borderRadius: \"1rem\",\n      background: \"#fff\",\n      padding: \"2rem 4rem\",\n      maxWidth: \"60rem !important\",\n      boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.1)\",\n    },\n  },\n  inputGrid: {\n    flex: 1,\n  },\n  heading: {\n    \"&.MuiTypography-root\": {\n      color: theme.palette.common.grey,\n      //   fontSize: \"1rem\"\n    },\n  },\n  formInput: {\n    width: \"100%\",\n    height: \"100%\",\n    fontSize: \"1.5rem\",\n    padding: \".5rem 1rem\",\n    border: \"none\",\n    background: \"transparent\",\n    color: theme.palette.common.grey,\n\n    \"&:focus\": {\n      outline: \"none\",\n    },\n  },\n  textArea: {\n    border: \"1px solid rgba(0, 0, 0, 0.03)\",\n    resize: \"none\",\n    borderRadius: \"0.5rem\",\n  },\n  divider: {\n    \"&.MuiDivider-root\": {\n      borderColor: \"rgba(0, 0, 0, 0.03)\",\n    },\n  },\n}));\n\nconst CreateMessage = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  let history = useHistory();\n  const [createNewMessage] = useMutation(CREATE_MESSAGE, {\n    refetchQueries: [{ query: getMessage }],\n  });\n  const [recipientValue, setRecipientvalue] = useState(\"\");\n  const { data, refetch, error } = useQuery(getProfileByDociId, {\n    fetchPolicy: \"network-only\",\n    nextFetchPolicy: \"network-only\",\n  });\n  const { data: doctorProfile, refetch: refetch2 } = useQuery(\n    getDoctorByDociId,\n    {\n      fetchPolicy: \"network-only\",\n      nextFetchPolicy: \"network-only\",\n    }\n  );\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n\n  const validationSchema = Yup.object({\n    subject: Yup.string(\"Enter your subject\")\n      .trim()\n      .required(\"Subject is required\"),\n    textarea: Yup.string(\"Enter your message\")\n      .trim()\n      .required(\"Message is required\"),\n    recipient: Yup.string(\"Enter your recipient\")\n      .trim()\n      .required(\"recipients is required\"),\n  });\n\n  const [recipient, setRecipient] = useState(\"\");\n  const { firstName, lastName, _id } = recipient.length > 0 && recipient[0];\n\n  const onSubmit = async (values, onSubmitProps) => {\n    const id = localStorage.getItem(\"user_id\");\n    const { subject, textarea, recipient } = values;\n\n    try {\n      await createNewMessage({\n        variables: {\n          sender: id,\n          recipient: _id ? _id : recipient,\n          subject,\n          body: textarea,\n        },\n      });\n\n      history.push(\"/messages\");\n    } catch (error) {\n      console.log(error);\n    }\n    onSubmitProps.resetForm();\n  };\n  const onChange = useCallback(\n    async (e) => {\n      setRecipientvalue(e);\n      await refetch({\n        dociId: `HEALA-${e.toUpperCase()}`,\n      });\n      if ((data && data.profiles.data.length < 1) || error) {\n        await refetch2({ dociId: `HEALA-${e.toUpperCase()}` });\n      }\n    },\n    [refetch, refetch2, data, error]\n  );\n\n  useEffect(() => {\n    (async () => {\n      if (data && data.profiles.data.length > 0) {\n        setRecipient(data.profiles.data);\n      }\n    })();\n  }, [data, recipientValue, onChange]);\n  useEffect(() => {\n    (async () => {\n      if (doctorProfile && doctorProfile.doctorProfiles.profile.length > 0) {\n        setRecipient(doctorProfile.doctorProfiles.profile);\n      }\n    })();\n  }, [doctorProfile, onChange, recipientValue]);\n  const initialValues = {\n    subject: \"\",\n    recipient: recipient ? `${firstName} ${lastName} ` : \"\",\n    textarea: \"\",\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={validationSchema}\n      validateOnChange={false}\n      validateOnMount={false}\n      validateOnBlur={false}\n      enableReinitialize\n    >\n      {({ isValid, isSubmitting, dirty, values }) => {\n        return (\n          <Form onChange={setRecipientvalue(values.recipient)}>\n            {/* /*setRecipientvalue(values.recipient)*/}\n            <Grid container direction=\"column\">\n              <Grid item style={{ marginBottom: \"3rem\" }}>\n                <PreviousButton path={\"/messages\"} />\n              </Grid>\n              <Grid item container direction=\"column\" alignItems=\"center\">\n                <Grid item>\n                  <Typography variant=\"h4\" style={{ marginBottom: \"3rem\" }}>\n                    Create New Message\n                  </Typography>\n                </Grid>\n                <Grid\n                  item\n                  container\n                  direction=\"column\"\n                  className={classes.gridWrapper}\n                >\n                  <Grid item style={{ marginBottom: \"3rem\" }}>\n                    <Grid container alignItems=\"center\">\n                      <Grid item>\n                        <Typography variant=\"body2\" className={classes.heading}>\n                          Recipient:\n                        </Typography>\n                      </Grid>\n                      <Grid item className={classes.inputGrid}>\n                        <FormikControl\n                          control=\"input\"\n                          id=\"message\"\n                          onBlur={() => onChange(values.recipient)}\n                          name=\"recipient\"\n                          variant=\"standard\"\n                          className={classes.formInput}\n                        />\n                      </Grid>\n                    </Grid>\n                    <Divider className={classes.divider} />\n                  </Grid>\n                  <Grid item style={{ marginBottom: \"3rem\" }}>\n                    <Grid container alignItems=\"center\">\n                      <Grid item>\n                        <Typography variant=\"body2\" className={classes.heading}>\n                          Subject:\n                        </Typography>\n                      </Grid>\n                      <Grid item className={classes.inputGrid}>\n                        <FormikControl\n                          control=\"input\"\n                          id=\"subject\"\n                          name=\"subject\"\n                          variant=\"standard\"\n                          className={classes.formInput}\n                        />\n                      </Grid>\n                    </Grid>\n                    <Divider className={classes.divider} />\n                  </Grid>\n                  <Grid item>\n                    <Grid container direction=\"column\">\n                      <Grid item>\n                        <Typography variant=\"body2\" className={classes.heading}>\n                          Message:\n                        </Typography>\n                      </Grid>\n                      <Grid item style={{ height: \"15rem\" }}>\n                        <FormikControl\n                          control=\"textarea\"\n                          id=\"textarea\"\n                          name=\"textarea\"\n                          variant=\"standard\"\n                          fLabel={true}\n                        />\n                      </Grid>\n                    </Grid>\n                    {/* <Divider className={classes.divider} /> */}\n                  </Grid>\n                  <Grid\n                    item\n                    style={{ alignSelf: \"flex-end\", marginTop: \"2rem\" }}\n                  >\n                    <CustomButton\n                      title=\"Send Message\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                      // endIcon={<ArrowForwardIosIcon style={{ fontSize: \"1.5rem\" }} />}\n                    />\n                  </Grid>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n\n  // );\n};\n\nexport default CreateMessage;\n","/Users/codabae/Documents/ci work/heala/DProject/src/styles/doctorsPageStyles.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/styles/docVerificationPageStyles.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Consultations.js",["1312","1313"],"import React, { useEffect, useState } from \"react\";\nimport { dateMoment } from \"components/Utilities/Time\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Grid,\n  Typography,\n  TableRow,\n  TableCell,\n  Checkbox,\n  Button,\n  Avatar,\n} from \"@mui/material\";\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\nimport { consultationsHeadCells4 } from \"components/Utilities/tableHeaders\";\nimport { useSelector } from \"react-redux\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport { useParams } from \"react-router-dom\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { getConsultations } from \"components/graphQL/useQuery\";\nimport { Loader } from \"components/Utilities\";\nimport {\n  changeTableLimit,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport TableLayout from \"components/layouts/TableLayout\";\n\nconst useStyles = makeStyles((theme) => ({\n  tableCell: {\n    \"&.css-1jilxo7-MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n\n  button: {\n    \"&.MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"1rem\",\n      maxWidth: \"12rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.2rem\",\n      },\n\n      \"& .MuiButton-endIcon\": {\n        marginLeft: \".3rem\",\n      },\n    },\n  },\n}));\n\n/* const filterOptions = [\n  { id: 0, value: \"Name\" },\n  { id: 1, value: \"Date\" },\n  { id: 2, value: \"Description\" },\n]; */\n\nconst Consultations = () => {\n  const [pageInfo, setPageInfo] = useState({});\n  const classes = useStyles();\n  const theme = useTheme();\n  const { patientConsultation } = useActions();\n  const { selectedRows } = useSelector((state) => state.tables);\n  const [consultations, setConsultations] = useState([]);\n  const { setSelectedRows } = useActions();\n  const { patientId } = useParams();\n\n  const [fetchConsultations, { loading, data, error }] =\n    useLazyQuery(getConsultations);\n\n  useEffect(() => {\n    fetchConsultations({\n      variables: {\n        id: patientId,\n        orderBy: \"-createdAt\",\n      },\n    });\n  }, [fetchConsultations, patientId]);\n\n  useEffect(() => {\n    if (data) {\n      setConsultations(data.getConsultations.data);\n      patientConsultation(data);\n      setPageInfo(data.getConsultations.pageInfo);\n    }\n  }, [data, consultations, patientConsultation]);\n\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error.message} />;\n\n  return (\n    <Grid container gap={2} flexWrap=\"nowrap\" direction=\"column\" height=\"100%\">\n      <Grid\n        item\n        container\n        flexWrap=\"nowrap\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        sx={{ margin: \"1rem 0rem\" }}\n      >\n        {/* <Grid item flex={1}>\n          <Typography variant=\"h2\">Consultations</Typography>\n        </Grid> */}\n        {/* <Grid item>\n          <FilterList options={filterOptions} title=\"Filter\" />\n        </Grid> */}\n      </Grid>\n      <TableLayout>\n        {consultations.length > 0 ? (\n          <Grid item container direction=\"column\" height=\"100%\">\n            <EnhancedTable\n              headCells={consultationsHeadCells4}\n              rows={consultations}\n              paginationLabel=\"Patients per page\"\n              hasCheckbox={true}\n              changeLimit={async (e) => {\n                await changeTableLimit(fetchConsultations, {\n                  first: e,\n                  id: patientId,\n                });\n              }}\n              dataPageInfo={pageInfo}\n              handlePagination={async (page) => {\n                await handlePageChange(fetchConsultations, page, pageInfo, {\n                  id: patientId,\n                });\n              }}\n            >\n              {consultations.map((row, index) => {\n                const { doctorData } = row;\n                const isItemSelected = isSelected(row._id, selectedRows);\n                const labelId = `enhanced-table-checkbox-${index}`;\n                return (\n                  <TableRow\n                    hover\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={row._id}\n                    selected={isItemSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        onClick={() =>\n                          handleSelectedRows(\n                            row._id,\n                            selectedRows,\n                            setSelectedRows\n                          )\n                        }\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          \"aria-labelledby\": labelId,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      {dateMoment(row.createdAt)}\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ maxWidth: \"25rem\" }}\n                    >\n                      <div\n                        style={{\n                          height: \"100%\",\n                          display: \"flex\",\n                          alignItems: \"center\",\n                        }}\n                      >\n                        <span style={{ marginRight: \"1rem\" }}>\n                          <Avatar\n                            alt={`Display Photo of ${doctorData.firstName}`}\n                            src={\n                              doctorData.picture\n                                ? doctorData.picture\n                                : displayPhoto\n                            }\n                            sx={{ width: 24, height: 24 }}\n                          />\n                        </span>\n                        <span style={{ fontSize: \"1.25rem\" }}>\n                          {doctorData.firstName\n                            ? `${doctorData.firstName} ${doctorData.lastName}`\n                            : \"No Doctor\"}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      <Grid container gap={1}>\n                        {row.symptoms\n                          ? row.symptoms.map((i) => {\n                              return <p key={i.name}>{i.name}</p>;\n                            })\n                          : \"No Value\"}\n                      </Grid>\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                        width: \"4rem\",\n                      }}\n                    >\n                      {row.contactMedium ? row.contactMedium : \"No Value\"}\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                      }}\n                    >\n                      {row.type ? row.type : \"No Value\"}\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                      }}\n                    >\n                      {row.status ? row.status : \"No Value\"}\n                    </TableCell>\n                    <TableCell align=\"left\">\n                      <Button\n                        variant=\"contained\"\n                        className={classes.button}\n                        component={Link}\n                        to={`/patients/${patientId}/consultations/case-notes/${row._id}`}\n                        endIcon={<ArrowForwardIosIcon />}\n                      >\n                        View Details\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </EnhancedTable>\n          </Grid>\n        ) : (\n          <EmptyTable\n            headCells={consultationsHeadCells4}\n            paginationLabel=\"Patients per page\"\n          />\n        )}\n      </TableLayout>\n    </Grid>\n  );\n};\n\nexport default Consultations;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/PreviousButton.js",["1314"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport IconButton from \"@mui/material/IconButton\";\nimport { Link } from \"react-router-dom\";\nimport { makeStyles } from \"@mui/styles\";\nimport KeyboardBackspaceIcon from \"@mui/icons-material/KeyboardBackspace\";\n\nconst useStyles = makeStyles((theme) => ({\n  icon: {\n    \"&.MuiSvgIcon-root\": {\n      fontSize: \"2.5rem\",\n    },\n  },\n}));\nconst PreviousButton = ({ path, ...rest }) => {\n  const classes = useStyles();\n  return (\n    <IconButton LinkComponent={Link} to={path} {...rest}>\n      <KeyboardBackspaceIcon color=\"error\" className={classes.icon} />\n    </IconButton>\n  );\n};\n\nPreviousButton.propTypes = {\n  path: PropTypes.string,\n};\n\nexport default PreviousButton;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/CaseNotes.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Administrator.js",["1315"],"import React, { useState, useEffect } from \"react\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport {\n  Loader,\n  /* Button, */\n  Modals,\n  CustomButton,\n} from \"components/Utilities\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { Grid, Checkbox, TableRow, TableCell } from \"@mui/material\";\nimport { signup } from \"components/graphQL/Mutation\";\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\nimport { makeStyles } from \"@mui/styles\";\nimport { adminHeader } from \"components/Utilities/tableHeaders\";\nimport { useSelector } from \"react-redux\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { isSelected } from \"helpers/isSelected\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport { findAdmin } from \"components/graphQL/useQuery\";\nimport { defaultPageInfo } from \"helpers/mockData\";\nimport { changeTableLimit } from \"helpers/filterHelperFunctions\";\nimport TableLayout from \"components/layouts/TableLayout\";\n//\nconst useStyles = makeStyles((theme) => ({\n  FormLabel: {\n    fontSize: \"1.6rem\",\n    color: theme.palette.common.dark,\n  },\n  btn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      width: \"100%\",\n    },\n  },\n  button: {\n    \"&.MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"1rem\",\n      maxWidth: \"10rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.2rem\",\n      },\n\n      \"& .MuiButton-endIcon\": {\n        marginLeft: \".3rem\",\n        marginTop: \"-.2rem\",\n      },\n    },\n  },\n  redBtn: {\n    \"&.MuiButton-root\": {\n      background: theme.palette.common.lightRed,\n      color: theme.palette.common.red,\n\n      \"&:hover\": {\n        background: theme.palette.error.light,\n        color: \"#fff\",\n      },\n    },\n  },\n  greenBtn: {\n    \"&.MuiButton-root\": {\n      background: theme.palette.common.lightGreen,\n      color: theme.palette.common.green,\n\n      \"&:hover\": {\n        background: theme.palette.success.light,\n        color: \"#fff\",\n      },\n    },\n  },\n\n  tableCell: {\n    \"&.MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.6rem !important\",\n      height: \"3rem\",\n      borderRadius: \"1.3rem\",\n    },\n  },\n  \"&.MuiButton-root\": {\n    ...theme.typography.btn,\n    background: theme.palette.common.black,\n    width: \"100%\",\n  },\n\n  checkboxContainer: {\n    \"&.MuiBox-root\": {\n      padding: \"2rem 0\",\n      border: \"1px solid #E0E0E0\",\n      borderRadius: \".4rem\",\n      \"&:active\": {\n        border: \"2px solid black\",\n      },\n    },\n  },\n  checkbox: {\n    \"& .MuiSvgIcon-root\": {\n      fontSize: 28,\n    },\n    \"&.Mui-checked\": {\n      color: \"green !important\",\n    },\n  },\n}));\n\nconst Administrator = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [addAdminUser] = useMutation(signup);\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\n  const [fetchAdmins, { loading, data, error, refetch }] =\n    useLazyQuery(findAdmin);\n\n  useEffect(() => {\n    fetchAdmins({\n      variables: {\n        first: pageInfo?.limit,\n      },\n      notifyOnNetworkStatusChange: true,\n    });\n  }, [fetchAdmins, pageInfo]);\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n  /*   const onChange = async (e) => {\n    setSearchMail(e);\n    if (e == \"\") {\n      refetch();\n    } else refetch({ role: e });\n  }; */\n  const specializations = [\n    { key: \"Doctor\", value: \"doctor\" },\n    { key: \"Super-admin\", value: \"super-admin\" },\n  ];\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n\n  const initialValues = {\n    email: \"\",\n    role: \"\",\n  };\n  const [admins, setAdmins] = useState([]);\n\n  useEffect(() => {\n    if (data) {\n      setAdmins(data.accounts.data);\n      setPageInfo(data.accounts.pageInfo);\n    }\n  }, [data]);\n\n  /*   const optionss = [\n    {\n      label: \"option 1\",\n      value: \"option 1\",\n    },\n    {\n      label: \"option 2\",\n      value: \"option 2\",\n    },\n    {\n      label: \"option 3\",\n      value: \"three\",\n    },\n  ]; */\n\n  const validationSchema = Yup.object({\n    email: Yup.string().email(\"Enter a valid email\").trim(),\n    role: Yup.string(\"Select your role\"),\n  });\n  const onSubmit = async (values) => {\n    const { email, role } = values;\n    await refetch({\n      email,\n      role,\n    });\n    handleDialogClose();\n  };\n  const initialValues1 = {\n    email: \"\",\n    password: \"\",\n  };\n\n  const validationSchema1 = Yup.object({\n    password: Yup.string()\n      .required(\"password is required\")\n      .min(8, \"Password is too short - should be 8 chars minimum.\"),\n    email: Yup.string()\n      .email(\"Enter a valid email\")\n      .required(\"Email is required\"),\n  });\n  const onSubmit1 = async (values, onSubmitProps) => {\n    const { email, password } = values;\n    try {\n      await addAdminUser({\n        variables: {\n          email,\n          password,\n          role: \"admin\",\n          authType: \"normal\",\n        },\n        refetchQueries: [{ query: findAdmin }],\n      });\n    } catch (err) {\n      console.log(err);\n    }\n    handleAdminClose();\n    onSubmitProps.resetForm();\n  };\n\n  /*   const [searchMail, setSearchMail] = useState(\"\"); */\n  const [isOpen, setIsOpen] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const handleAdminClose = () => setIsAdmin(false);\n  /*   const handleDialogOpen = () => setIsOpen(true); */\n  const handleAdminOpen = () => setIsAdmin(true);\n  const handleDialogClose = () => setIsOpen(false);\n\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error} />;\n  return (\n    <>\n      <Grid\n        container\n        direction=\"column\"\n        gap={2}\n        flexWrap=\"nowrap\"\n        height=\"100%\"\n      >\n        <Grid\n          item\n          container\n          flex={{ md: 1, sm: 1, xs: 1 }}\n          justifyContent=\"space-between\"\n        >\n          <Grid\n            item\n            container\n            flex={{ md: 1, sm: 1, xs: 1 }}\n            justifyContent=\"space-between\"\n          >\n            <Grid item></Grid>\n            <Grid item>\n              <CustomButton\n                endIcon={<AddIcon />}\n                title=\"Add Admin\"\n                type={buttonType}\n                onClick={handleAdminOpen}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n        <TableLayout>\n          {admins.length > 0 ? (\n            <Grid item container height=\"100%\" direction=\"column\">\n              <EnhancedTable\n                headCells={adminHeader}\n                rows={admins}\n                paginationLabel=\"admin per page\"\n                hasCheckbox={true}\n                changeLimit={changeTableLimit}\n                fetchData={fetchAdmins}\n                dataPageInfo={pageInfo}\n              >\n                {admins.map((row, index) => {\n                  const { _id, email, role } = row;\n                  const isItemSelected = isSelected(_id, selectedRows);\n\n                  const labelId = `enhanced-table-checkbox-${index}`;\n\n                  return (\n                    <TableRow\n                      hover\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={_id}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          onClick={() =>\n                            handleSelectedRows(\n                              _id,\n                              selectedRows,\n                              setSelectedRows\n                            )\n                          }\n                          color=\"primary\"\n                          checked={isItemSelected}\n                          inputProps={{\n                            \"aria-labelledby\": labelId,\n                          }}\n                        />\n                      </TableCell>\n\n                      <TableCell align=\"left\" className={classes.tableCell}>\n                        {email}\n                      </TableCell>\n                      <TableCell\n                        id={labelId}\n                        scope=\"row\"\n                        align=\"left\"\n                        className={classes.tableCell}\n                        style={{ color: theme.palette.common.black }}\n                      >\n                        {role}\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </EnhancedTable>\n            </Grid>\n          ) : (\n            <EmptyTable\n              headCells={adminHeader}\n              paginationLabel=\"Admin  per page\"\n            />\n          )}\n        </TableLayout>\n      </Grid>\n      <Modals\n        isOpen={isOpen}\n        title=\"Filter\"\n        rowSpacing={5}\n        handleClose={handleDialogClose}\n      >\n        <Formik\n          initialValues={initialValues}\n          onSubmit={onSubmit}\n          validateOnBlur={false}\n          validationSchema={validationSchema}\n          validateOnChange={false}\n          validateOnMount={false}\n        >\n          {({ isSubmitting, isValid, dirty }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid item container gap={4}>\n                  <Grid item container direction=\"column\">\n                    <Grid item container spacing={2}>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"input\"\n                          name=\"email\"\n                          label=\"Admin Email\"\n                          placeholder=\"Enter Admin Email\"\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"select\"\n                          name=\"role\"\n                          label=\"Role\"\n                          options={specializations}\n                          placeholder=\"Select Role\"\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item container xs={12}>\n                    <CustomButton\n                      title=\"Apply Filter\"\n                      width=\"100%\"\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                      type={buttonType}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n\n      <Modals\n        isOpen={isAdmin}\n        title=\"Add Admin\"\n        rowSpacing={5}\n        height=\"auto\"\n        handleClose={handleAdminClose}\n      >\n        <Formik\n          initialValues={initialValues1}\n          onSubmit={onSubmit1}\n          validationSchema={validationSchema1}\n          validateOnChange={false}\n          validateOnMount={false}\n          validateOnBlur={false}\n        >\n          {({ isValid, isSubmitting, dirty }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid item container direction=\"column\" gap={2}>\n                  <Grid item>\n                    <FormikControl\n                      control=\"input\"\n                      label=\"Email\"\n                      id=\"email\"\n                      placeholder=\"Enter email\"\n                      name=\"email\"\n                    />\n                  </Grid>\n                  <Grid item>\n                    <FormikControl\n                      control=\"input\"\n                      label=\"Password\"\n                      type=\"password\"\n                      id=\"password\"\n                      name=\"password\"\n                      placeholder=\"Enter Password\"\n                    />\n                  </Grid>\n\n                  <Grid item container xs={12} marginTop={5}>\n                    <CustomButton\n                      title=\"Add Admin\"\n                      width=\"100%\"\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                      type={buttonType}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n    </>\n  );\n};\n\nexport default Administrator;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/EmptyTable.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/Header.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/CircularProgress.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/SearchInput.js",["1316"],"import React from \"react\";\nimport SearchIcon from \"@mui/icons-material/Search\";\nimport PropTypes from \"prop-types\";\nimport InputAdornment from \"@mui/material/InputAdornment\";\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\nimport { makeStyles } from \"@mui/styles\";\nimport { Field } from \"formik\";\n\nconst Search = ({\n  width,\n  placeholder,\n  height,\n  placeholderWidth,\n  type,\n  name,\n  hasStartIcon = true,\n  ...rest\n}) => {\n  const useStyles = makeStyles({\n    //   root: {\n    //     \"& .css-1u99e1o-MuiInputBase-root-MuiOutlinedInput-root\": {\n    //       fontSize: \"1.6rem\",\n    //     },\n    //   },\n  });\n  const classes = useStyles();\n\n  return (\n    <div className={classes.root}>\n      <Field name={name}>\n        {({ field }) => {\n          return (\n            <OutlinedInput\n              type={type}\n              id=\"input-with-icon-adornment\"\n              sx={{\n                display: \"flex\",\n                alignItems: \"center\",\n                width,\n                height,\n                fontSize: \"16px\",\n                placeholderWidth,\n                background: \"white\",\n                borderRadius: 2,\n              }}\n              placeholder={placeholder}\n              inputProps={{ \"aria-label\": placeholder }}\n              startAdornment={\n                hasStartIcon && (\n                  <InputAdornment position=\"start\">\n                    <SearchIcon style={{ fontSize: \"3rem\" }} name={name} />\n                  </InputAdornment>\n                )\n              }\n              {...rest}\n            />\n          );\n        }}\n      </Field>\n    </div>\n  );\n};\nSearch.propTypes = {\n  width: PropTypes.string,\n  placeholder: PropTypes.string,\n  name: PropTypes.string,\n  height: PropTypes.string,\n  placeholderWidth: PropTypes.string,\n  type: PropTypes.string,\n  hasStartIcon: PropTypes.bool,\n  onChange: PropTypes.func,\n};\n\nexport default Search;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Backdrop.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Appointments.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/CardItem.js",["1317"],"import React from \"react\";\nimport { Card, Grid, Typography } from \"@mui/material\";\nimport ArrowUpwardIcon from \"@mui/icons-material/ArrowUpward\";\nimport PropTypes from \"prop-types\";\nimport { ArrowDownwardOutlined } from \"@mui/icons-material\";\nimport { makeStyles } from \"@mui/styles\";\n\nimport { useTheme } from \"@mui/material/styles\";\nimport { roundUp } from \"components/Utilities/Time\";\nconst useStyles = makeStyles((theme) => ({\n  grid: {\n    \"&.MuiGrid-item\": {\n      paddingLeft: \"0\",\n    },\n  },\n}));\nconst CardItem = ({ value }) => {\n  const theme = useTheme();\n  const { name, value: val, id, percentageValue, icon } = value;\n  const percent = roundUp(percentageValue);\n  const classes = useStyles();\n\n  return (\n    <Card\n      variant=\"outlined\"\n      width=\"100%\"\n      xs={3}\n      sx={{\n        padding: \"22px 20px\",\n        borderRadius: \"15px\",\n        borderColor: \"transparent\",\n      }}\n    >\n      <Grid\n        item\n        container\n        gap=\"1rem\"\n        flexWrap=\"nowrap\"\n        flexDirection={{ xs: \"row\", sm: \"row\", md: \"row\" }}\n      >\n        <Grid\n          item\n          sx={{\n            minHeight: \"5.4rem\",\n            // maxWidth: \"5.4rem\",\n            maxWidth: \"100%\",\n            borderRadius: \"100%\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          {icon}\n        </Grid>\n        <Grid item>\n          <Grid container flexDirection=\"column\" spacing={1}>\n            <Grid item>\n              <Typography\n                sx={{\n                  fontSize: \"1.2rem\",\n                  fontWeight: 400,\n                  lineHeight: 1.5,\n                  color: \"#757886\",\n                }}\n              >\n                {name}\n              </Typography>\n            </Grid>\n            <Grid item className={classes.grid}>\n              <Grid\n                container\n                gap={1}\n                alignItems=\"center\"\n                sx={{\n                  padding: \"3px 8px\",\n                }}\n              >\n                <Typography\n                  sx={{\n                    fontWeight: \"600\",\n                    fontSize: \"24px\",\n                    lineHeight: \"24px\",\n                    letterSpacing: \"-0.28px\",\n\n                    color: \"#2D2F39\",\n                  }}\n                >\n                  {val}\n                </Typography>\n\n                {id < 3 && (\n                  <Grid\n                    item\n                    sx={{\n                      borderRadius: \"100px\",\n                      color:\n                        percentageValue < 1\n                          ? \"#ED3237\"\n                          : theme.palette.success.main,\n                      backgroundColor:\n                        percentageValue < 1\n                          ? \"rgba(237, 50, 55, 0.1)\"\n                          : \"rgba(62, 165, 132, 0.1)\",\n                      padding: \"3px 8px\",\n                    }}\n                  >\n                    <Grid container alignItems=\"center\" justifyContent=\"center\">\n                      <Typography\n                        variant=\"span\"\n                        sx={{ fontWeight: 500, fontSize: \"1rem\" }}\n                      >\n                        {percent}\n                      </Typography>\n                      {percentageValue < 1 ? (\n                        <ArrowDownwardOutlined\n                          sx={{ color: \"inherit\", fontSize: \"1rem\" }}\n                        />\n                      ) : (\n                        <ArrowUpwardIcon\n                          sx={{ color: \"inherit\", fontSize: \"1rem\" }}\n                        />\n                      )}\n                    </Grid>\n                  </Grid>\n                )}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Card>\n  );\n};\nCardItem.propTypes = {\n  value: PropTypes.object,\n};\n\nexport default CardItem;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/WaitingListTable.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/DashboardChart.js",["1318","1319","1320","1321","1322","1323"],"import React, { useState, useEffect } from \"react\";\nimport { Grid, Card, Typography, Divider } from \"@mui/material\";\nimport PropTypes from \"prop-types\";\nimport { CustomSelect } from \"components/validation/Select\";\nimport ArrowUpwardIcon from \"@mui/icons-material/ArrowUpward\";\nimport { ArrowDownwardOutlined } from \"@mui/icons-material\";\nimport { ReactComponent as ConsultationIcon } from \"assets/images/totalC.svg\";\nimport { ReactComponent as DoctorIcon } from \"assets/images/totalD.svg\";\nimport { ReactComponent as PatientIcon } from \"assets/images/totalP.svg\";\nimport { ReactComponent as PartnerIcon } from \"assets/images/totalPartner.svg\";\n\nimport {\n  consultationsOptions,\n  returnpercent,\n  financeOptions,\n  partnerOptions,\n  partnersOptions,\n  newOptions,\n  formatNumber,\n  selectOptions,\n} from \"components/Utilities/Time\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { LineChart, CircularProgressBar } from \"components/Utilities\";\nimport { CardItem } from \"components/layouts\";\nimport \"chartjs-plugin-style\";\n\nconst useStyles = makeStyles((theme) => ({\n  chartCard: {\n    background: \"#fff\",\n    borderRadius: \"1rem\",\n  },\n  chartImg: {\n    maxWidth: \"100%\",\n  },\n  headerGrid: {\n    background: \"rgb(253, 253, 253)\",\n    width: \"100%\",\n    borderTopLeftRadius: \"1rem\",\n    borderTopRightRadius: \"1rem\",\n    padding: \"1.5rem 2rem\",\n  },\n  overviewGrid: {\n    // padding: \"4rem 2rem 3rem\",\n  },\n  groupIconGrid: {\n    width: \"5rem\",\n    height: \"5rem\",\n    background: theme.palette.common.lightGreen,\n    borderRadius: \"50%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  groupIcon: {\n    \"&.MuiSvgIcon-root\": {\n      fontSize: \"2.5rem\",\n    },\n  },\n  bottomChartGrid: {\n    // padding: \"3rem 2rem\",\n  },\n\n  dottedCircle: {\n    width: 5,\n    height: 5,\n    borderRadius: \"100%\",\n  },\n  red: {\n    background: theme.palette.common.red,\n  },\n  green: {\n    background: theme.palette.common.green,\n  },\n  gold: {\n    borderColor: theme.palette.common.gold,\n  },\n\n  iconWrapper: {\n    width: 40,\n    height: 40,\n    borderRadius: \"50%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  greenIconBg: {\n    background: theme.palette.common.lightGreen,\n  },\n  redIconBg: {\n    background: theme.palette.common.lightRed,\n  },\n\n  greenNotificationBg: {\n    background: theme.palette.common.green,\n  },\n\n  notificationIcon: {\n    \"&.MuiSvgIcon-root\": {\n      color: \"#fff\",\n    },\n  },\n}));\n\nconst DashboardCharts = ({ data }) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [patients, setPatients] = useState([]);\n  const [doctorStats, setDoctorStats] = useState([]);\n\n  const [totalConsultations, setTotalConsultations] = useState(\"\");\n  const [totalEarning, setTotalEarning] = useState(0);\n  const [totalPayouts, setTotalPayouts] = useState(0);\n  const [partnersData, setPartnersData] = useState([]);\n\n  const [consultationState, setConsultationState] = useState({\n    state: \"all\",\n    data: {\n      all: data?.consultationStats.chartData,\n      complete: data?.consultationStats.completedChartData,\n      ongoing: data?.consultationStats.ongoingChartData,\n      accept: data?.consultationStats.acceptedChartData,\n      decline: data?.consultationStats.declinedChartData,\n      cancel: data?.consultationStats.cancelledChartData,\n    },\n  });\n\n  const [graphState, setGraphState] = useState({\n    state: \"all\",\n    data: {\n      all: data?.doctorStats?.chartData,\n      active: data?.doctorStats.activeChartData,\n      inactive: data?.doctorStats.inactiveChartData,\n    },\n  });\n  const [subScriptionState, setSubScriptionState] = useState({\n    state: \"all\",\n    data: {\n      all: data?.subscriptionStats?.chartData,\n      active: data?.subscriptionStats.activeChartData,\n      inactive: data?.subscriptionStats.inactiveChartData,\n    },\n  });\n  const [patientGraphState] = useState({\n    state: \"all\",\n    data: {\n      all: data?.patientStats.chartData,\n      active: data?.patientStats.activeChartData,\n      inactive: data?.patientStats.inactiveChartData,\n    },\n  });\n  const [financialState] = useState({\n    state: \"all\",\n    data: {\n      earning: data?.earningStats?.chartData,\n      payout: data?.payoutStats?.chartData,\n    },\n  });\n\n  const [earningArray] = useState(data?.earningStats?.chartData);\n  const [totalPayoutValue, setPayoutValue] = useState(totalPayouts);\n  const [totalEarningsValue, setEarningsValue] = useState(totalEarning);\n  const [payoutArray] = useState(data?.payoutStats?.chartData);\n  const [partnerGraphState, setPartnerGraphState] = useState({\n    state: \"all\",\n    data: {\n      all: data?.partnerStats.chartData,\n      hospital: data?.partnerStats.hospitalChartData,\n      diagnostic: data?.partnerStats.diagnosticsChartData,\n      pharmacy: data?.partnerStats.pharmacyChartData,\n    },\n  });\n\n  useEffect(() => {\n    const {\n      patientStats,\n      doctorStats,\n      consultationStats,\n      partnerStats,\n      earningStats,\n      payoutStats,\n    } = data;\n    setPatients(patientStats);\n    setDoctorStats(doctorStats);\n    setTotalConsultations(consultationStats);\n    setPartnersData(partnerStats);\n    setTotalEarning(earningStats?.total);\n    setEarningsValue(earningStats?.total);\n    setTotalPayouts(payoutStats?.total);\n\n    //eslint-disable-next-line\n  }, [data]);\n\n  const {\n    totalAccepted,\n    totalCancelled,\n    totalOngoing,\n    totalDeclined,\n    totalCompleted,\n  } = totalConsultations;\n  const total =\n    totalAccepted +\n    totalCancelled +\n    totalOngoing +\n    totalDeclined +\n    totalCompleted;\n  const { totalActive: activeDoctors, totalInactive: inactiveDoctors } =\n    doctorStats;\n  const { totalActive: activePatients, totalInactive: inactivePatients } =\n    patients;\n  const totalDoc = activeDoctors + inactiveDoctors;\n  const totalPatient = activePatients + inactivePatients;\n  const [partnersState, setPartnersState] = useState(\"Patients\");\n  const patientPercentage = returnpercent(activePatients, inactivePatients);\n  const doctorPercentage = returnpercent(activeDoctors, inactiveDoctors);\n  const [amount, setAmount] = useState([\n    {\n      name: \"Total Earnings\",\n      value: 0,\n    },\n    {\n      name: \"Total Payouts\",\n      value: 0,\n    },\n  ]);\n  const [cardState, setCardState] = useState([\n    {\n      id: 1,\n      name: \"Total Doctors\",\n      percentageValue: 0,\n      value: 0,\n    },\n    {\n      id: 2,\n      name: \"Total Patients\",\n      percentageValue: 0,\n      value: 0,\n    },\n    {\n      id: 4,\n      name: \"Total Consultations\",\n      percentageValue: 0,\n      value: 0,\n    },\n    {\n      id: 3,\n      name: \"Total Partners\",\n      percentageValue: 0,\n      value: 0,\n    },\n  ]);\n  const [state, setState] = useState(patientGraphState);\n  const [options, setOptions] = useState(\"all\");\n\n  const handleStateChange = (e) => {\n    const { value } = e.target;\n\n    switch (value) {\n      case \"Patients\":\n        setState(patientGraphState);\n        setPartnersState(\"Patients\");\n        break;\n      case \"Doctors\":\n        setState(graphState);\n        setPartnersState(\"Doctors\");\n        break;\n      case \"Consultations\":\n        setState(consultationState);\n        setPartnersState(\"Consultations\");\n        break;\n      case \"Partners\":\n        setState(partnerGraphState);\n        setPartnersState(\"Partners\");\n        break;\n      case \"Finance\":\n        setState(financialState);\n        setPartnersState(\"Finance\");\n        break;\n      default:\n        setState(patientGraphState);\n        setPartnersState(\"Patients\");\n    }\n  };\n  useEffect(() => {\n    setCardState([\n      {\n        id: 1,\n        name: \"Total Doctors\",\n        percentageValue: doctorPercentage,\n        value: totalDoc,\n        icon: <DoctorIcon />,\n      },\n      {\n        id: 2,\n        name: \"Total Patients\",\n        percentageValue: patientPercentage,\n        value: totalPatient,\n        icon: <PatientIcon />,\n      },\n      {\n        id: 3,\n        name: \"Total Partners\",\n        value: partnersData?.total,\n        icon: <PartnerIcon />,\n      },\n      {\n        id: 4,\n        name: \"Total Consultations\",\n\n        value: total,\n        icon: <ConsultationIcon />,\n      },\n    ]);\n\n    setAmount([\n      {\n        name: \"Total Earnings\",\n        value: formatNumber(totalEarningsValue),\n      },\n      {\n        name: \"Total Payouts\",\n        value: formatNumber(totalPayoutValue),\n      },\n    ]);\n  }, [\n    totalPatient,\n    totalPayoutValue,\n    totalEarningsValue,\n    total,\n    patientPercentage,\n    doctorPercentage,\n    partnersData?.total,\n    totalDoc,\n    totalEarning,\n    totalPayouts,\n  ]);\n  const handleOptionChange = (e) => {\n    const { value } = e.target;\n    setOptions(value);\n  };\n  const percentageValue = 0.5;\n  const [financeState, setFinancialStates] = useState(0);\n  const handleFinanceStateChange = (e) => {\n    const { value } = e.target;\n    // eslint-disable-next-line\n    payoutArray?.map((item) => {\n      // eslint-disable-next-line\n      if (value == 0) {\n        setFinancialStates(0);\n        setPayoutValue(totalPayouts);\n        setEarningsValue(totalEarning);\n      }\n      //eslint-disable-next-line\n      if (item.month == value && value > 0) {\n        setFinancialStates(value);\n        setPayoutValue(item.sum);\n      }\n    });\n    earningArray?.map((item) => {\n      // eslint-disable-next-line\n      if (item.month == value) {\n        setEarningsValue(item.sum);\n      }\n    });\n  };\n\n  return (\n    <Grid container gap={2} justifyContent=\"center\">\n      {/* Top cards */}\n      <Grid item container gap={1.5} flexWrap=\"nowrap\">\n        {cardState?.map((item, index) => {\n          return (\n            <Grid key={`${item.id}-${index}`} item xs={3}>\n              <CardItem key={item.id} value={item} />\n            </Grid>\n          );\n        })}\n      </Grid>\n\n      <Grid item container gap={2} flexWrap=\"nowrap\">\n        <Grid item xs={8.5} sx={{ height: \"100%\" }}>\n          <Card\n            width=\"100%\"\n            variant=\"outlined\"\n            sx={{\n              p: 2,\n              height: \"100%\",\n              borderColor: \"transparent\",\n              borderRadius: \"15px\",\n            }}\n          >\n            <Grid\n              item\n              container\n              justifyContent=\"space-between\"\n              flexWrap=\"nowrap\"\n              sx={{ mb: 2 }}\n            >\n              <Grid item>\n                <CustomSelect\n                  variant=\"small\"\n                  value={partnersState}\n                  onChange={handleStateChange}\n                  options={partnersOptions}\n                  name=\"partners\"\n                />\n              </Grid>\n              <Grid item>\n                <CustomSelect\n                  variant=\"small\"\n                  value={options}\n                  onChange={handleOptionChange}\n                  options={\n                    partnersState === \"Partners\"\n                      ? partnerOptions\n                      : partnersState === \"Consultations\"\n                      ? consultationsOptions\n                      : partnersState === \"Finance\"\n                      ? financeOptions\n                      : newOptions\n                  }\n                  name=\"graph\"\n                />\n              </Grid>\n            </Grid>\n            <LineChart\n              graphState={state}\n              optionsValue={\n                partnersState === \"Partners\"\n                  ? partnerOptions\n                  : partnersState === \"Consultations\"\n                  ? consultationsOptions\n                  : partnersState === \"Finance\"\n                  ? financeOptions\n                  : newOptions\n              }\n              type={\n                partnersState === \"Partners\"\n                  ? \"partners\"\n                  : partnersState === \"Consultations\"\n                  ? \"consultation\"\n                  : partnersState === \"Finance\"\n                  ? \"finance\"\n                  : \"\"\n              }\n              opt={options}\n            />\n          </Card>\n        </Grid>\n        <Grid item xs={3.5} sx={{ height: \"100%\" }}>\n          <Card\n            variant=\"outlined\"\n            sx={{\n              borderColor: \"transparent\",\n              height: \"100%\",\n              borderRadius: \"15px\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              pb: 2,\n              // gap: \"4rem\",\n            }}\n          >\n            {/* <Grid container> */}\n            <Grid item container alignItems=\"center\" sx={{ p: 2.5, pb: 1 }}>\n              <Grid item flex={1}>\n                <Typography\n                  sx={{\n                    fontSize: \"1.8rem\",\n                    fontWeight: \"500\",\n                    lineHeight: \"25px\",\n                    letterSpacing: \"-0.01em\",\n                    color: \"#010101\",\n                  }}\n                >\n                  Financial Stats\n                </Typography>\n              </Grid>\n              <Grid item>\n                <CustomSelect\n                  variant=\"small\"\n                  value={financeState}\n                  onChange={handleFinanceStateChange}\n                  options={selectOptions}\n                  name=\"partners\"\n                />\n              </Grid>\n            </Grid>\n            <Divider sx={{ pt: 1 }} />\n            <Grid\n              item\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              container\n              sx={{ m: \"auto\" }}\n            >\n              <CircularProgressBar\n                height=\"15rem\"\n                width=\"15rem\"\n                color={theme.palette.common.green}\n                trailColor={theme.palette.common.red}\n                value={totalEarning}\n              />\n            </Grid>\n\n            {amount.map((item, index) => {\n              const { color, value, name } = item;\n              return (\n                <Grid\n                  key={index}\n                  item\n                  container\n                  sx={{ p: 2 }}\n                  flexWrap=\"nowrap\"\n                >\n                  <Grid flex={1}>\n                    <Grid container alignItems=\"center\" gap={1}>\n                      <div\n                        className={`${classes.dottedCircle}\n                         ${classes.red}`}\n                      />\n                      <Typography\n                        sx={{\n                          fontWeight: 400,\n                          fontSize: \"1.4rem\",\n                          lineHeight: \"20px\",\n                          color: \"#606060\",\n                        }}\n                      >\n                        {name}\n                      </Typography>\n                      <Grid\n                        item\n                        sx={{\n                          borderRadius: \"100px\",\n                          color:\n                            percentageValue < 1\n                              ? \"#ED3237\"\n                              : theme.palette.success.main,\n                          backgroundColor:\n                            percentageValue < 1\n                              ? \"rgba(237, 50, 55, 0.1)\"\n                              : \"rgba(62, 165, 132, 0.1)\",\n                          padding: \"3px 8px\",\n                        }}\n                      >\n                        <Grid\n                          container\n                          alignItems=\"center\"\n                          justifyContent=\"center\"\n                        >\n                          <Typography\n                            variant=\"span\"\n                            sx={{ fontWeight: 500, fontSize: \"1rem\" }}\n                          >\n                            {\"0.5\"}\n                          </Typography>\n                          {percentageValue < 1 ? (\n                            <ArrowDownwardOutlined\n                              sx={{ color: \"inherit\", fontSize: \"1rem\" }}\n                            />\n                          ) : (\n                            <ArrowUpwardIcon\n                              sx={{ color: \"inherit\", fontSize: \"1rem\" }}\n                            />\n                          )}\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item justifySelf=\"center\">\n                    <Grid container>\n                      <Typography\n                        sx={{\n                          fontWeight: 500,\n                          fontSize: \"1.6rem\",\n                          lineHeight: \"20px\",\n                          color: \"#3F3F3F\",\n                        }}\n                      >\n                        NGN {value}\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              );\n            })}\n          </Card>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nDashboardCharts.propTypes = {\n  data: PropTypes.object,\n  refetch: PropTypes.func,\n};\n\nexport default DashboardCharts;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/Notifications.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/HeaderContents.js",["1324","1325","1326","1327","1328","1329","1330","1331","1332","1333","1334"],"import React, { Fragment, useState, useEffect, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@mui/styles\";\nimport HeaderProfile from \"./HeaderProfile\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { useTheme } from \"@mui/material/styles\";\n\nimport {\n  Typography,\n  Toolbar,\n  Grid,\n  ClickAwayListener,\n  Paper,\n} from \"@mui/material\";\n\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport { findAccounts } from \"components/graphQL/useQuery\";\nimport ArrowUpwardIcon from \"@mui/icons-material/ArrowUpward\";\nimport { Link, useLocation, useHistory } from \"react-router-dom\";\nimport { getPatients, DoctorCount } from \"components/graphQL/useQuery\";\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\nimport { patterns, predicateBreadcrumbFromUrl } from \"helpers/breadcrumb\";\nimport KeyboardArrowRightIcon from \"@mui/icons-material/KeyboardArrowRight\";\n\nconst useStyles = makeStyles((theme) => ({\n  toolbar: {\n    alignItems: \"center\",\n    height: \"100%\",\n    flex: 1,\n    justifyContent: \"space-between\",\n  },\n  text: {\n    fontSize: \"clamp(2rem, 1.2vw, 1.6rem)\",\n    fontWeight: 500,\n    lineHeight: \"2.5rem\",\n    color: \"#2D2F39\",\n    letterSpacing: \"-0.01em\",\n  },\n  name: {\n    fontSize: \"clamp(1.5rem, 1.5vw, 2rem)\", //clamp(1.5rem, 1.5vw, 2.25rem)\n    fontWeight: 300,\n  },\n  titleWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  link: {\n    textDecoration: \"none\",\n  },\n  title: {\n    // fontSize: \"clamp(1.2rem, 1vw+1rem, 2.4rem )\",\n    fontSize: \"clamp(1.5rem, 2vw, 2.25rem)\",\n    color: theme.palette.common.black,\n    \"&.MuiTypography-root\": {\n      marginRight: \".5rem\",\n    },\n  },\n  history: {\n    \"&.MuiTypography-root\": {\n      display: \"flex\",\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      color: \"#3E5EA9\",\n      fontSize: \"14px\",\n      fontWeight: 500,\n      lineHeight: \"20px\",\n    },\n  },\n\n  options: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    backgroundColor: \"#ffffff\",\n    borderRadius: \"8px\",\n    position: \"absolute\",\n    top: 28,\n    right: 5,\n    zIndex: 1,\n\n    \"&>:last-child\": {\n      borderBottom: \"none\",\n    },\n  },\n\n  btn: {\n    display: \"flex\",\n    alignItems: \"center\",\n    backgroundColor: \"#fff\",\n    padding: \"1rem 2rem\",\n    fontSize: \"14px\",\n    fontWeight: 400,\n    color: \"#2D2F39\",\n    border: \"none\",\n    borderBottom: \"1px solid #E5E5E5\",\n    textAlign: \"left\",\n    whiteSpace: \"nowrap\",\n\n    \"&:hover\": {\n      color: \"#ffffff\",\n      backgroundColor: theme.palette.common.blue,\n    },\n  },\n\n  subtitle: {\n    color: theme.palette.common.green,\n    \"&.MuiTypography-root\": {\n      fontSize: \"clamp(0.6rem, 1vw + .5rem, 1.25rem)\",\n      marginLeft: \".5rem\",\n      alignSelf: \"flex-end\",\n    },\n  },\n  customSubHeaderWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n}));\n\nconst CustomHeaderText = ({ title, total, path }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      container\n      flex={1}\n      flexDirection=\"column\"\n      justifyContent=\"center\"\n      rowGap={1}\n    >\n      <Grid item container flexWrap=\"nowrap\" alignItems=\"center\">\n        <Link to={`/${path}`} className={classes.link}>\n          <Typography variant=\"h3\" classes={{ root: classes.title }}>\n            {title}\n          </Typography>\n        </Link>\n        <ArrowUpwardIcon color=\"success\" />\n      </Grid>\n      <Grid item>\n        <Typography variant=\"h5\" className={classes.subtitle}>\n          {total} total\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nCustomHeaderText.propTypes = {\n  title: PropTypes.string,\n  total: PropTypes.number,\n  path: PropTypes.string,\n  data: PropTypes.object,\n};\n\nconst CustomHeaderTitle = ({ title }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.titleWrapper}>\n      {\n        <Grid>\n          <Typography variant=\"h3\" classes={{ root: classes.title }}>\n            {title}\n          </Typography>\n        </Grid>\n      }\n    </div>\n  );\n};\n\nCustomHeaderTitle.propTypes = {\n  title: PropTypes.string,\n};\n\n// SUBMENU HEADERS\nconst CustomSubHeaderText = (props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const {\n    title,\n    subTitle,\n    subSubTitle,\n    scopedSubTitle,\n    scopedMenu,\n    scopedSubMenu,\n    titleColor = theme.palette.common.red,\n  } = props;\n\n  return (\n    <div className={classes.customSubHeaderWrapper}>\n      <Typography variant=\"h3\" style={{ color: theme.palette.common.grey }}>\n        {title}\n      </Typography>\n      <KeyboardArrowRightIcon\n        style={{\n          fontSize: \"2rem\",\n          color: theme.palette.common.grey,\n        }}\n      />\n      <Typography\n        variant=\"h3\"\n        classes={{ root: classes.title }}\n        style={{\n          color: titleColor,\n        }}\n      >\n        {subTitle}\n      </Typography>\n      {scopedMenu !== 0 && (\n        <Fragment>\n          <KeyboardArrowRightIcon\n            style={{ fontSize: \"2rem\", color: theme.palette.common.grey }}\n          />\n          <Typography\n            variant=\"h3\"\n            classes={{ root: classes.title }}\n            style={{\n              color:\n                scopedSubMenu === 0\n                  ? theme.palette.common.red\n                  : theme.palette.common.grey,\n            }}\n          >\n            {subSubTitle}\n          </Typography>\n        </Fragment>\n      )}\n\n      {scopedSubMenu !== 0 && (\n        <Fragment>\n          <KeyboardArrowRightIcon\n            style={{ fontSize: \"2rem\", color: theme.palette.common.grey }}\n          />\n          <Typography\n            variant=\"h3\"\n            classes={{ root: classes.title }}\n            style={{ color: theme.palette.common.red }}\n          >\n            {scopedSubTitle}\n          </Typography>\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nCustomSubHeaderText.propTypes = {\n  title: PropTypes.string,\n  subTitle: PropTypes.string,\n  subSubTitle: PropTypes.string,\n  scopedSubTitle: PropTypes.string,\n  titleColor: PropTypes.string,\n  scopedMenu: PropTypes.number,\n  scopedSubMenu: PropTypes.number,\n  data: PropTypes.object,\n};\n\n// HEADER DYNAMIC RENDERING COMPONENT\nconst HeaderText = () => {\n  const classes = useStyles();\n  const { pathname } = useLocation();\n  const email = localStorage.getItem(\"email\");\n  const [profileAcc, setProfileAcc] = useState([]);\n  const [docCount, setDocCount] = useState([]);\n  const [patientCount, setPatientCount] = useState([]);\n\n  const breadcrumbs = useMemo(\n    () => predicateBreadcrumbFromUrl(patterns, pathname.substring(1)),\n    [pathname]\n  );\n\n  const [profile, { data }] = useLazyQuery(findAccounts, {\n    variables: { email },\n  });\n\n  const [patient, patientContent] = useLazyQuery(getPatients);\n  const [doctor, doctorContent] = useLazyQuery(DoctorCount, {\n    fetchPolicy: \"cache-first\",\n  });\n\n  useEffect(() => {\n    (async () => {\n      profile();\n      if (data) {\n        setProfileAcc(data.accounts.data[0]);\n      }\n    })();\n  }, [profile, email, data]);\n\n  useEffect(() => {\n    (async () => {\n      patient();\n      doctor();\n      if (patientContent.data)\n        setPatientCount(patientContent.data.profiles.pageInfo.totalDocs);\n      if (doctorContent.data) setDocCount(doctorContent.data.DoctorCount);\n    })();\n  }, [doctor, patient, patientContent.data, doctorContent.data]);\n\n  const counts = {\n    Doctors: docCount,\n    Patients: patientCount,\n  };\n\n  switch (pathname) {\n    case \"/dashboard\":\n      return (\n        <Typography className={classes.text} gutterBottom>\n          Dashboard\n        </Typography>\n      );\n    case \"/\":\n      return (\n        <Typography className={classes.text} gutterBottom>\n          Dashboard\n        </Typography>\n      );\n    default:\n      return <Breadcrumb breadcrumbs={breadcrumbs} counts={counts} />;\n  }\n};\n\nHeaderText.propTypes = {\n  selectedMenu: PropTypes.number,\n};\n\nconst HeaderContent = () => {\n  const classes = useStyles();\n  return (\n    <Toolbar className={classes.toolbar}>\n      <HeaderText />\n\n      <HeaderProfile />\n    </Toolbar>\n  );\n};\n\nHeaderContent.propTypes = {};\n\nconst Crumb = ({ breadcrumbs }) => {\n  const classes = useStyles();\n  const history = useHistory();\n  const [isOpen, setIsOpen] = useState(false);\n  const previousText = breadcrumbs[breadcrumbs.length - 2].pageTitle;\n  const previousIndex = breadcrumbs[breadcrumbs.length - 2].pageIndex;\n\n  const handleClickAway = () => {\n    setIsOpen(false);\n  };\n\n  return (\n    <Grid container alignItems=\"center\" sx={{ position: \"relative\" }}>\n      <Grid item>\n        <Grid\n          container\n          alignItems=\"center\"\n          onClick={() => history.go(previousIndex)}\n          sx={{ cursor: \"pointer\" }}\n        >\n          <ArrowBackIcon\n            fontSize=\"small\"\n            sx={{ marginRight: \"0.5rem\", color: \"#3E5EA9\" }}\n          />{\" \"}\n          <Typography variant=\"p\" classes={{ root: classes.history }}>\n            Back to {previousText}{\" \"}\n          </Typography>\n        </Grid>\n      </Grid>\n      {breadcrumbs.length > 2 ? (\n        <ClickAwayListener onClickAway={handleClickAway}>\n          <Grid\n            onClick={() => setIsOpen(!isOpen)}\n            sx={{\n              display: \"flex\",\n              alignItems: \"center\",\n              marginLeft: \"0.5rem\",\n              cursor: \"pointer\",\n            }}\n          >\n            <KeyboardArrowDownIcon\n              fontSize=\"medium\"\n              sx={{ color: \"#3E5EA9\" }}\n            />\n          </Grid>\n        </ClickAwayListener>\n      ) : null}\n      {isOpen && (\n        <Paper className={classes.options}>\n          {breadcrumbs.map((crumb, index) => {\n            const isLast = index === breadcrumbs.length - 1;\n            const borderRadius =\n              index === breadcrumbs.length - 2\n                ? \"0px 0px 8px 8px\"\n                : \"8px 8px 0px 0px\";\n            if (isLast) {\n              return null;\n            } else {\n              return (\n                <button\n                  key={index}\n                  className={classes.btn}\n                  style={{ borderRadius: borderRadius }}\n                  onClick={() => history.go(crumb.pageIndex)}\n                >\n                  {crumb.pageTitle}\n                </button>\n              );\n            }\n          })}\n        </Paper>\n      )}\n    </Grid>\n  );\n};\n\nconst Breadcrumb = ({ breadcrumbs = [], counts = {} }) => {\n  const classes = useStyles();\n  const text = breadcrumbs[breadcrumbs.length - 1]?.pageTitle || \"\";\n\n  return (\n    <Grid container justifyContent=\"flex-start\" alignItems=\"center\">\n      {breadcrumbs.length < 2 ? (\n        <Grid container alignContent=\"center\">\n          <Grid item>\n            <CustomHeaderTitle title={text} />\n          </Grid>\n          {counts[text] && (\n            <Grid\n              item\n              sx={{ marginLeft: \"0.5rem\", display: \"flex\" }}\n              alignContent=\"center\"\n            >\n              <Grid container alignContent=\"center\">\n                <ArrowUpwardIcon color=\"success\" />\n                <Typography variant=\"h2\" className={classes.subtitle}>\n                  {counts[text]} total\n                </Typography>\n              </Grid>\n            </Grid>\n          )}\n        </Grid>\n      ) : (\n        <Grid>\n          <Crumb breadcrumbs={breadcrumbs} />\n          <CustomHeaderTitle title={text} />\n        </Grid>\n      )}\n    </Grid>\n  );\n};\n\nBreadcrumb.propTypes = {\n  breadcrumbs: PropTypes.array,\n  counts: PropTypes.object,\n};\n\nexport default HeaderContent;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/HeaderProfile.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/SideMenu.js",["1335","1336","1337","1338","1339","1340","1341","1342","1343","1344"],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/EnhancedTableAction.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Search.js",["1345","1346"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@mui/styles\";\nimport { InputAdornment, OutlinedInput, Grid } from \"@mui/material\";\nimport SearchIcon from \"components/Icons/SearchIcon\";\n\nconst useStyles = makeStyles((theme) => ({\n  inputCont: {\n    \"&.MuiOutlinedInput-root\": {\n      backgroundColor: \"#FAFAFA\",\n      fontWeight: \"200 !important\",\n      color: `${theme.palette.common.grey} !important`,\n      height: ({ height }) => `${height}`,\n      fontSize: \"14px !important\",\n      borderRadius: \"12px\",\n      border: \"1px solid #E0E0E0 !important\",\n\n      \"&>fieldset\": {\n        border: 0,\n      },\n    },\n    /* \"&.MuiTypography-root\": {\n      fontWeight: \"200 !important\",\n      color: `${theme.palette.common.grey} !important`,\n      minHeight: 50,\n      fontSize: \"14px !important\",\n      borderRadius: \"12px\",\n    }, */\n  },\n}));\nconst SearchContainer = ({\n  width,\n  placeholder,\n  height,\n  placeholderWidth,\n  value,\n  onChange,\n  ref,\n  hasStartIcon = true,\n  startIcon,\n  onClickSearchBtn,\n  ...rest\n}) => {\n  const classes = useStyles();\n  return (\n    <Grid container>\n      <Grid item>\n        <OutlinedInput\n          className={classes.inputCont}\n          id=\"input-with-icon-adornment\"\n          value={value}\n          onChange={onChange}\n          ref={ref}\n          {...rest}\n          sx={{\n            fontSize: \"14px\",\n            height: height,\n            border: \"2px solid #E0E0E0\",\n            padding: \"0rem 1rem\",\n            borderRadius: \"12px\",\n          }}\n          placeholder={placeholder}\n          inputProps={{ \"aria-label\": placeholder }}\n          startAdornment={\n            <InputAdornment position=\"start\">\n              {startIcon\n                ? startIcon\n                : hasStartIcon && <SearchIcon style={{ fontSize: \"14px\" }} />}\n            </InputAdornment>\n          }\n          endAdornment={\n            <button\n              style={{\n                padding: \"0.5rem\",\n                margin: \"1rem 0rem\",\n                backgroundColor: \"#2D2F39\",\n                border: \"none\",\n                borderRadius: \"100%\",\n                display: \"flex\",\n                justifyContent: \"center\",\n                alignItems: \"center\",\n                cursor: \"pointer\",\n              }}\n              onClick={() => onClickSearchBtn()}\n            >\n              <SearchIcon sx={{ fontSize: \"20px\" }} />\n            </button>\n          }\n        />\n      </Grid>\n    </Grid>\n  );\n};\nSearchContainer.propTypes = {\n  width: PropTypes.string,\n  ref: PropTypes.string,\n  placeholder: PropTypes.string,\n  height: PropTypes.string,\n  placeholderWidth: PropTypes.string,\n  value: PropTypes.string,\n  hasStartIcon: PropTypes.bool,\n  onChange: PropTypes.func,\n  startIcon: PropTypes.node,\n  onClickSearchBtn: PropTypes.func,\n};\n\nexport default SearchContainer;\n","/Users/codabae/Documents/ci work/heala/DProject/src/styles/patientsPageStyles.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/NoData.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/AvailabilityTable.js",["1347","1348","1349"],"import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  TableRow,\n  Grid,\n  Typography,\n  TableCell,\n  Card,\n  Chip,\n  Button,\n  Checkbox,\n} from \"@mui/material\";\nimport { NoData } from \"components/layouts\";\nimport { CustomSelect } from \"components/validation/Select\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport { useSelector } from \"react-redux\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport {\n  changeTableLimit,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport EnhancedTable from \"components/layouts/EnhancedTable\";\nimport { Modals, Loader } from \"components/Utilities\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { availabilityHeadCells } from \"components/Utilities/tableHeaders\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport { hours, days, today } from \"components/Utilities/Time\";\nimport { EmptyTable } from \"components/layouts\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { useLazyQuery, useQuery } from \"@apollo/client\";\nimport { defaultPageInfo } from \"helpers/mockData\";\nimport {\n  getAvailabilities,\n  getDoctorAvailabilityForDate,\n  getProviders,\n  getAvailabilities1,\n} from \"components/graphQL/useQuery\";\nconst useStyles = makeStyles((theme) => ({\n  tableCell: {\n    \"&.MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n\n  button: {\n    \"&.MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"1rem\",\n      maxWidth: \"10rem\",\n      whiteSpace: \"nowrap\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.2rem\",\n      },\n\n      \"& .MuiButton-endIcon\": {\n        marginLeft: \".3rem\",\n        marginTop: \"-.2rem\",\n      },\n    },\n  },\n\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.2rem !important\",\n      height: \"2.7rem\",\n      borderRadius: \"1.3rem\",\n    },\n  },\n}));\n\nconst AvailabilityTable = () => {\n  const [pageInfo, setPageInfo] = useState({\n    page: 0,\n    totalPages: 1,\n    hasNextPage: false,\n    hasPrevPage: false,\n    limit: 10,\n    totalDocs: 0,\n  });\n\n  const { data: da } = useQuery(getProviders);\n  const [availabilities, setAvailabilities] = useState([]);\n  const [provider, setProvider] = useState(\"\");\n  const [modal, setModal] = useState(false);\n  const [form, setForm] = useState(\"\");\n  const [dropDown, setDropDown] = useState([]);\n  const [select, setSelect] = useState(today());\n  const [avail, setAvail] = useState(\"\");\n\n  const onChange = async (e) => {\n    setProvider(e.target.value);\n    setForm(e.target.value);\n  };\n\n  const classes = useStyles();\n  const theme = useTheme();\n\n  // redux\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n  //queries\n  const [fetchAvailabilities, { loading: load, data, error }] =\n    useLazyQuery(getAvailabilities);\n  const [fetchAvailabilities1, { loading: load1, data: data1, error: error1 }] =\n    useLazyQuery(getAvailabilities1);\n\n  // providers drop down\n  useEffect(() => {\n    const x = {\n      key: \"All Stats\",\n      value: \"\",\n    };\n    if (da) {\n      const data = da.getProviders.provider;\n      const options = data?.map((i) => {\n        return {\n          key: i.name,\n          value: i._id,\n        };\n      });\n      setDropDown([x, ...options]);\n    }\n  }, [da]);\n\n  const [fetchDay, { loading, data: dt }] = useLazyQuery(\n    getDoctorAvailabilityForDate\n  );\n\n  const setTableData = async (response, errMsg) => {\n    if (response?.data) {\n      setPageInfo(response?.data?.getAvailabilities?.pageInfo || []);\n      setAvailabilities(\n        response?.data?.getAvailabilities?.availability || defaultPageInfo\n      );\n    } else {\n      console.error(errMsg);\n    }\n  };\n\n  useEffect(() => {\n    if (dt) {\n      const { available, day, times } = dt?.getDoctorAvailabilityForDate;\n      setAvail({\n        available,\n        day,\n        times,\n      });\n    } else {\n      setAvail({\n        availale: false,\n        day: \"Not Available\",\n        times: [],\n      });\n    }\n  }, [dt]);\n\n  useEffect(() => {\n    if (provider === \"\") {\n      fetchAvailabilities1({\n        variables: {\n          pageInfo: pageInfo,\n          first: 5,\n          day: select,\n        },\n      });\n    } else {\n      fetchAvailabilities({\n        variables: {\n          first: 5,\n          providerId: provider,\n          day: select,\n        },\n      });\n    }\n\n    if (data) {\n      setPageInfo(data?.getAvailabilities?.pageInfo || []);\n      setAvailabilities(\n        data?.getAvailabilities?.availability || defaultPageInfo\n      );\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, provider, select]);\n  useEffect(() => {\n    if (data1) {\n      setPageInfo(data1?.getAvailabilities?.pageInfo || []);\n      setAvailabilities(\n        data1?.getAvailabilities?.availability || defaultPageInfo\n      );\n    }\n  }, [select, data1]);\n  const [loadings, setLoading] = useState(false);\n  const handleSelectChange = async (e) => {\n    const { value } = e.target;\n    setLoading(true);\n    await fetchAvailabilities({\n      variables: {\n        first: 5,\n        providerId: provider,\n        day: value,\n      },\n    });\n    setLoading(false);\n    setSelect(value);\n  };\n\n  const handleCheckDay = useCallback((day, doctor) => {\n    setModal(true);\n    fetchDay({\n      variables: {\n        day,\n        doctor,\n      },\n    });\n    //eslint-disable-next-line\n  }, []);\n  if (load || loadings || load1) return <Loader />;\n  if (error || error1) return <NoData />;\n  const { day, available, times } = avail;\n  return (\n    <>\n      <Grid item container direction=\"column\" height=\"100%\">\n        <Card\n          variant=\"outlined\"\n          sx={{\n            width: \"100%\",\n            borderRadius: \"1.5rem\",\n            borderColor: \"transparent\",\n            p: 2,\n          }}\n        >\n          <Grid item container alignItems=\"center\" gap={2}>\n            <Grid item flex={1}>\n              <Typography\n                sx={{\n                  fontWeight: 500,\n                  fontSize: \"20px\",\n                  lineHeight: \"25px\",\n                  letterSpacing: \"-0.01em\",\n                  color: \"#010101\",\n                }}\n              >\n                Doctor Availability\n              </Typography>\n            </Grid>\n            <Grid item>\n              <CustomSelect\n                value={select}\n                onChange={handleSelectChange}\n                options={days}\n                name=\"select\"\n              />\n            </Grid>\n            <Grid item>\n              <CustomSelect\n                value={form}\n                onChange={onChange}\n                options={dropDown}\n                name=\"availability-dropdown\"\n              />\n            </Grid>\n          </Grid>\n          {availabilities?.length > 0 ? (\n            <Grid\n              item\n              container\n              direction=\"column\"\n              overflow=\"hidden\"\n              sx={{ mt: 2 }}\n              maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\n            >\n              <EnhancedTable\n                headCells={availabilityHeadCells}\n                rows={availabilities}\n                paginationLabel=\"Availabilities per page\"\n                hasCheckbox={true}\n                changeLimit={async (e) => {\n                  const res = await changeTableLimit(fetchAvailabilities, {\n                    first: e,\n                    providerId: provider,\n                  });\n\n                  await setTableData(res, \"Failed to change table limit.\");\n                }}\n                dataPageInfo={pageInfo}\n                handlePagination={async (page) => {\n                  const res = handlePageChange(\n                    fetchAvailabilities,\n                    page,\n                    pageInfo,\n                    {\n                      providerId: provider,\n                      day: select,\n                    }\n                  );\n                  await setTableData(res, \"Failed to change page.\");\n                }}\n              >\n                {availabilities?.map((row, index) => {\n                  const { _id, doctorData, day, times, doctor } = row;\n                  const startTime = hours(times[0].start);\n                  const endTime = hours(times[times.length - 1].stop);\n\n                  if (doctorData?.firstName && doctorData?.lastName) {\n                    const labelId = `enhanced-table-checkbox-${index}`;\n                    const isItemSelected = isSelected(_id, selectedRows);\n\n                    return (\n                      <TableRow hover tabIndex={-1} key={_id}>\n                        <TableCell padding=\"checkbox\">\n                          <Checkbox\n                            onClick={() =>\n                              handleSelectedRows(\n                                _id,\n                                selectedRows,\n                                setSelectedRows\n                              )\n                            }\n                            color=\"primary\"\n                            checked={isItemSelected}\n                            inputProps={{\n                              \"aria-labelledby\": labelId,\n                            }}\n                          />\n                        </TableCell>\n                        <TableCell\n                          id={labelId}\n                          scope=\"row\"\n                          align=\"left\"\n                          className={classes.tableCell}\n                          style={{ color: theme.palette.common.grey }}\n                        >\n                          {doctorData?.dociId?.split(\"-\")[1]}\n                        </TableCell>\n                        <TableCell align=\"left\" className={classes.tableCell}>\n                          <div\n                            style={{\n                              height: \"100%\",\n                              display: \"flex\",\n                              alignItems: \"center\",\n                              textAlign: \"left\",\n                            }}\n                          >\n                            {/* <span style={{ marginRight: \"1rem\" }}>\n                            <Avatar\n                              alt={`${doctorData?.firstName} ${doctorData?.lastName}`}\n                              src={picture ? picture : displayPhoto}\n                              sx={{ width: 24, height: 24 }}\n                            />\n                          </span> */}\n                            <span style={{ fontSize: \"1.25rem\" }}>\n                              {doctorData?.firstName\n                                ? `${doctorData?.firstName} ${doctorData?.lastName}`\n                                : \"no name\"}\n                            </span>\n                          </div>\n                        </TableCell>\n                        <TableCell align=\"left\" className={classes.tableCell}>\n                          {day}\n                        </TableCell>\n                        <TableCell\n                          align=\"left\"\n                          className={classes.tableCell}\n                          style={{\n                            color: theme.palette.common.red,\n                          }}\n                        >\n                          <Chip\n                            label={startTime}\n                            className={classes.badge}\n                            style={{\n                              background: theme.palette.common.lightRed,\n                              color: theme.palette.common.red,\n                            }}\n                          />\n                        </TableCell>\n                        <TableCell\n                          align=\"left\"\n                          className={classes.tableCell}\n                          style={{\n                            color: theme.palette.common.red,\n                          }}\n                        >\n                          <Chip\n                            label={endTime}\n                            className={classes.badge}\n                            style={{\n                              background: theme.palette.common.lightRed,\n                              color: theme.palette.common.red,\n                            }}\n                          />\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            variant=\"contained\"\n                            className={classes.button}\n                            onClick={() => handleCheckDay(day, doctor)}\n                            endIcon={<ArrowForwardIosIcon />}\n                          >\n                            View Time\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  }\n                })}\n              </EnhancedTable>\n            </Grid>\n          ) : (\n            <EmptyTable\n              headCells={availabilityHeadCells}\n              paginationLabel=\"Availability  per page\"\n            />\n          )}\n        </Card>\n      </Grid>\n      <Modals\n        isOpen={modal}\n        title=\"Available Day\"\n        rowSpacing={5}\n        width=\"10vw\"\n        handleClose={() => setModal(false)}\n      >\n        {loading && <Loader />}\n        <Grid item container alignItems=\"center\" gap={2}>\n          <Typography variant=\"h4\">{day}</Typography>\n          <div\n            style={{\n              background: available\n                ? theme.palette.common.green\n                : theme.palette.common.red,\n              width: \"20px\",\n              height: \"20px\",\n              borderRadius: \"50%\",\n            }}\n          ></div>\n        </Grid>\n        <Grid item container gap={1}>\n          {times\n            ? times?.map((time, ind) => {\n                const { start, stop } = time;\n                return (\n                  <Chip\n                    key={ind}\n                    label={`${hours(start)} - ${hours(stop)} `}\n                    className={classes.badge}\n                    style={{\n                      background: theme.palette.common.lightRed,\n                      color: theme.palette.common.red,\n                    }}\n                  />\n                );\n              })\n            : \"No Time\"}\n        </Grid>\n      </Modals>\n    </>\n  );\n};\n\nexport default AvailabilityTable;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/Filters/DoctorsFilters.js",["1350","1351","1352","1353"],"import React, { useEffect, useState } from \"react\";\nimport ProPtypes from \"prop-types\";\nimport { Grid } from \"@mui/material\";\n\nimport Filter from \".\";\nimport useAlert from \"hooks/useAlert\";\nimport {\n  cadreOptions,\n  defaultPageInfo,\n  doctorsProfileDefaultFilterByValues,\n  genderType,\n  specializationOptions,\n  statusFilterBy,\n} from \"helpers/mockData\";\nimport { deleteVar, filterData } from \"helpers/filterHelperFunctions\";\nimport { getProviders } from \"components/graphQL/useQuery\";\nimport { useLazyQuery } from \"@apollo/client\";\n\nconst DoctorFilters = ({ setProfiles, setPageInfo, queryParams }) => {\n  const { displayAlert } = useAlert();\n  const [statusFilterValue, setStatusFilterValue] = useState(\"\");\n  const [providers, setProviders] = useState([]);\n  const [profileFilterValues, setProfileFilterValues] = useState(\n    doctorsProfileDefaultFilterByValues\n  ); // gender cadre specialization providerId\n  const [fetchProviders] = useLazyQuery(getProviders);\n  const { doctorsParams, doctorsByStatusParams } = queryParams;\n  const { fetchDoctors, loading, refetch, variables } = doctorsParams;\n  const {\n    byStatusLoading,\n    byStatusVaribles,\n    byStatusRefetch,\n    fetchDoctorsByStatus,\n  } = doctorsByStatusParams;\n\n  useEffect(() => {\n    fetchProviders()\n      .then(({ data }) => {\n        if (!data) throw Error(\"Couldn'ProPtypes get list of providers\");\n        const providersList = (data?.getProviders?.provider || []).map(\n          (provider) => {\n            const { _id, name } = provider;\n            return { key: name, value: _id };\n          }\n        );\n        setProviders(providersList);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const onFilterProfileChange = async (name, value) => {\n    try {\n      setStatusFilterValue(\"\");\n      deleteVar(variables);\n      const filterValues = { ...profileFilterValues, [name]: value };\n      setProfileFilterValues(filterValues);\n      filterData(filterValues, {\n        fetchData: fetchDoctors,\n        refetch,\n        variables,\n      })\n        .then((data) => {\n          setPageInfo(data.doctorProfiles.pageInfo || []);\n          setProfiles(data.doctorProfiles.profile || defaultPageInfo);\n        })\n        .catch(() => {\n          refresh(setProfileFilterValues, doctorsProfileDefaultFilterByValues);\n        });\n    } catch (error) {\n      console.error(error);\n      refresh(setProfileFilterValues, doctorsProfileDefaultFilterByValues);\n    }\n  };\n\n  const onFilterStatusChange = async (value) => {\n    try {\n      setProfileFilterValues(doctorsProfileDefaultFilterByValues);\n      deleteVar(byStatusVaribles);\n      setStatusFilterValue(value);\n      const filterVariables = { status: value };\n\n      filterData(filterVariables, {\n        fetchData: fetchDoctorsByStatus,\n        refetch: byStatusRefetch,\n        variables: byStatusVaribles,\n      })\n        .then((data) => {\n          setProfiles(data?.doctorProfilesByStatus?.profile || []);\n          setPageInfo(data?.doctorProfilesByStatus?.pageInfo || {});\n        })\n        .catch(() => {\n          refresh(setStatusFilterValue, \"\");\n        });\n    } catch (error) {\n      console.error(error);\n      refresh(setStatusFilterValue, \"\");\n    }\n  };\n\n  const refresh = async (setFilterValue, defaultVal) => {\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\n    setFilterValue(defaultVal);\n\n    deleteVar(variables);\n\n    refetch()\n      .then(({ data }) => {\n        setProfiles(data?.profiles?.data || []);\n        setPageInfo(data?.profiles?.pageInfo || {});\n      })\n      .catch((error) => {\n        console.error(error);\n        displayAlert(\"error\", \"Failed to get patients data, Try again\");\n      });\n  };\n  return (\n    <Grid item container flexWrap=\"wrap\" spacing={4}>\n      {/* FILTER BY PROFILE */}\n      <Grid item>\n        <Grid container flexWrap=\"wrap\" spacing={2} alignItems=\"flex-end\">\n          {[\n            {\n              label: \"\",\n              onHandleChange: (e) =>\n                onFilterProfileChange(\"gender\", e?.target?.value),\n              onClickClearBtn: () => onFilterProfileChange(\"gender\", \"\"),\n              options: [{ key: \"Gender\", value: \"\" }, ...genderType],\n              name: \"gender\",\n              placeholder: \"By gender\",\n              value: profileFilterValues.gender,\n              hasClearBtn: true,\n              disavle: loading || byStatusLoading,\n            },\n            {\n              label: \"\",\n              onHandleChange: (e) =>\n                onFilterProfileChange(\"cadre\", e?.target?.value),\n              onClickClearBtn: () => onFilterProfileChange(\"cadre\", \"\"),\n              options: [{ key: \"Cadre\", value: \"\" }, ...cadreOptions],\n              name: \"cadre\",\n              placeholder: \"By cadre\",\n              value: profileFilterValues.cadre,\n              hasClearBtn: true,\n              disavle: loading || byStatusLoading,\n            },\n            {\n              label: \"\",\n              onHandleChange: (e) =>\n                onFilterProfileChange(\"specialization\", e?.target?.value),\n              onClickClearBtn: () =>\n                onFilterProfileChange(\"specialization\", \"\"),\n              options: [\n                { key: \"Specialization\", value: \"\" },\n                ...specializationOptions,\n              ],\n              name: \"specialization\",\n              placeholder: \"By specialization\",\n              value: profileFilterValues.specialization,\n              hasClearBtn: true,\n              disavle: loading || byStatusLoading,\n            },\n            {\n              label: \"\",\n              onHandleChange: (e) =>\n                onFilterProfileChange(\"providerId\", e?.target?.value),\n              onClickClearBtn: () => onFilterProfileChange(\"providerId\", \"\"),\n              options: [{ key: \"Provider\", value: \"\" }, ...providers],\n              name: \"providerId\",\n              placeholder: \"By provider\",\n              value: profileFilterValues.providerId,\n              hasClearBtn: true,\n              disavle: loading || byStatusLoading,\n            },\n          ].map((filter, idx) => {\n            return (\n              <Grid item key={`${idx}-${filter.name}`}>\n                <Filter\n                  label={filter.label}\n                  onHandleChange={(e) => filter.onHandleChange(e)}\n                  onClickClearBtn={() => filter.onClickClearBtn()}\n                  options={filter.options}\n                  name={filter.name}\n                  placeholder={filter.placeholder}\n                  value={filter.value}\n                  hasClearBtn={true}\n                  disable={loading || byStatusLoading}\n                />\n              </Grid>\n            );\n          })}\n\n          {/* FILTER BY STATUS */}\n          <Grid item>\n            <Filter\n              label=\"\"\n              onHandleChange={(e) => onFilterStatusChange(e?.target?.value)}\n              onClickClearBtn={() => onFilterStatusChange(\"\")}\n              options={[{ key: \"Status\", value: \"\" }, ...statusFilterBy]}\n              name=\"status\"\n              placeholder=\"None\"\n              value={statusFilterValue}\n              hasClearBtn={true}\n              disable={loading || byStatusLoading}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\nDoctorFilters.propTypes = {\n  setProfiles: ProPtypes.func,\n  setPageInfo: ProPtypes.func,\n  queryParams: ProPtypes.object,\n};\n\nexport default DoctorFilters;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/FilterList.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Copy.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/styles/partnersPageStyles.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/Success.js",["1354","1355","1356"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Typography, Grid } from \"@mui/material\";\nimport { Modals, CustomButton } from \"components/Utilities\";\nimport { useTheme } from \"@mui/material/styles\";\nimport CheckCircleSharpIcon from \"@mui/icons-material/CheckCircleSharp\";\nimport CancelIcon from \"@mui/icons-material/Cancel\";\n\nconst Success = ({\n  open,\n  handleDialogClose,\n  title,\n  confirmationMsg,\n  btnValue,\n  onConfirm,\n  onCancel,\n  type,\n  ...rest\n}) => {\n  const theme = useTheme();\n\n  const disableButton = {\n    background: theme.palette.primary.main,\n    hover: theme.palette.primary.light,\n    active: theme.palette.primary.dark,\n  };\n\n  return (\n    <Modals\n      isOpen={open}\n      title=\"\"\n      isClose\n      rowSpacing={5}\n      handleClose={handleDialogClose}\n    >\n      <Grid item container direction=\"column\" rowSpacing={5} marginTop={2}>\n        <Grid item container justifyContent=\"center\">\n          {type !== \"fail\" ? (\n            <CheckCircleSharpIcon sx={{ fontSize: \"15rem\", color: \"green\" }} />\n          ) : (\n            <CancelIcon sx={{ fontSize: \"15rem\", color: \"red\" }} />\n          )}\n        </Grid>\n        <Grid item container justifyContent=\"center\">\n          <Typography variant=\"h2\">{title}</Typography>\n        </Grid>\n        <Grid item container justifyContent=\"center\">\n          <Typography variant=\"body1\">{confirmationMsg}</Typography>\n        </Grid>\n        <Grid item container marginTop={4}>\n          <CustomButton\n            title={btnValue}\n            type={disableButton}\n            width=\"100%\"\n            onClick={handleDialogClose}\n          />\n        </Grid>\n      </Grid>\n    </Modals>\n  );\n};\n\nSuccess.propTypes = {\n  open: PropTypes.bool,\n  handleDialogClose: PropTypes.func,\n  title: PropTypes.string,\n  confirmationMsg: PropTypes.string,\n  btnValue: PropTypes.string,\n  type: PropTypes.string,\n  onConfirm: PropTypes.func,\n  onCancel: PropTypes.func,\n};\n\nexport default Success;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/FormInput.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/Filters/PatientFilters.js",["1357","1358","1359","1360","1361"],"import React, { useEffect, useState } from \"react\";\nimport t from \"prop-types\";\nimport { Grid } from \"@mui/material\";\n\nimport Filter from \".\";\nimport useAlert from \"hooks/useAlert\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { getPlans, getProviders } from \"components/graphQL/useQuery\";\nimport { deleteVar, filterData } from \"helpers/filterHelperFunctions\";\nimport {\n  genderType,\n  patientsProfileDefaultFilterByValues,\n  /* statusFilterBy, */\n} from \"helpers/mockData\";\n\nconst PatientFilters = ({ setProfiles, setPageInfo, queryParams }) => {\n  const { displayAlert } = useAlert();\n  const [plans, setPlans] = useState([]);\n  const [fetchPlans] = useLazyQuery(getPlans);\n  const [providers, setProviders] = useState([]);\n  const [fetchProviders] = useLazyQuery(getProviders);\n  const [providerId, setProviderId] = useState(null);\n  const [filterPlanValue, setFilterPlanValue] = useState(\"\");\n  const [, setStatusFilterValue] = useState(\"\");\n  const { patientsParams, patientsByStatusParams, patientsByPlanParams } =\n    queryParams;\n  const { fetchPatient, loading, refetch, variables } = patientsParams;\n  const [profileFilterValues, setProfileFilterValues] = useState(\n    patientsProfileDefaultFilterByValues\n  );\n  const {\n    byStatusLoading,\n    /* byStatusVaribles,\n    byStatusRefetch,\n    fetchPatientByStatus, */\n  } = patientsByStatusParams;\n  const { byPlanLoading, byPlanVaribles, byPlanRefetch, fetchPatientByPlan } =\n    patientsByPlanParams;\n\n  useEffect(() => {\n    fetchProviders()\n      .then(({ data }) => {\n        if (!data) throw Error(\"Couldn't get list of providers\");\n        const providersList = (data?.getProviders?.provider).map((provider) => {\n          const { _id, name } = provider;\n          return { key: name, value: _id };\n        });\n        setProviders(providersList);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (providerId === \"\" || providerId === null) return;\n    fetchPlans({ variables: { provider: providerId } })\n      .then(({ data }) => {\n        if (!data) throw Error(\"Couldn't get list of plans\");\n        const planList = (data?.getPlans?.plan || []).map((plan) => {\n          const { _id, name } = plan;\n          return { key: name, value: _id };\n        });\n        setPlans(planList);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [providerId]);\n\n  const onFilterProfileChange = async (name, value) => {\n    try {\n      if (name === \"provider\") setProviderId(value);\n      setStatusFilterValue(\"\");\n      deleteVar(variables);\n      const filterValues = { ...profileFilterValues, [name]: value };\n      setProfileFilterValues(filterValues);\n      filterData(filterValues, {\n        fetchData: fetchPatient,\n        refetch,\n        variables,\n      })\n        .then((data) => {\n          setProfiles(data?.profiles?.data || []);\n          setPageInfo(data?.profiles?.pageInfo || {});\n        })\n        .catch(() => {\n          refresh(setProfileFilterValues, patientsProfileDefaultFilterByValues);\n        });\n    } catch (error) {\n      console.error(error);\n      refresh(setProfileFilterValues, patientsProfileDefaultFilterByValues);\n    }\n  };\n\n  /*   const onFilterStatusChange = async (value) => {\n    try {\n      setProfileFilterValues({ gender: \"\", provider: \"\" });\n      deleteVar(byStatusVaribles);\n      setStatusFilterValue(value);\n      const filterVariables = { status: value };\n\n      filterData(filterVariables, {\n        fetchData: fetchPatientByStatus,\n        refetch: byStatusRefetch,\n        variables: byStatusVaribles,\n      })\n        .then((data) => {\n          setProfiles(data?.profilesByStatus?.data || []);\n          setPageInfo(data?.profilesByStatus?.pageInfo || {});\n        })\n        .catch(() => {\n          refresh(setStatusFilterValue, \"\");\n        });\n    } catch (error) {\n      console.error(error);\n      refresh(setStatusFilterValue, \"\");\n    }\n  }; */\n\n  const onFilterPlanChange = async (value) => {\n    try {\n      if (value === \"\") {\n        setProfileFilterValues({\n          ...patientsProfileDefaultFilterByValues,\n        });\n      } else {\n        setProfileFilterValues({\n          ...patientsProfileDefaultFilterByValues,\n          provider: profileFilterValues.provider,\n        });\n      }\n      deleteVar(byPlanVaribles);\n      setFilterPlanValue(value);\n      const filterVariables = { planId: value };\n\n      filterData(filterVariables, {\n        fetchData: fetchPatientByPlan,\n        refetch: byPlanRefetch,\n        variables: byPlanVaribles,\n      })\n        .then((data) => {\n          setProfiles(data?.profilesByPlan?.data || []);\n          setPageInfo(data?.profilesByPlan?.pageInfo || {});\n        })\n        .catch(() => {\n          refresh(setStatusFilterValue, \"\");\n        });\n    } catch (error) {\n      console.error(error);\n      refresh(setStatusFilterValue, \"\");\n    }\n  };\n\n  const refresh = async (setFilterValue, defaultVal) => {\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\n    setFilterValue(defaultVal);\n\n    deleteVar(variables);\n\n    refetch()\n      .then(({ data }) => {\n        setProfiles(data?.profiles?.data || []);\n        setPageInfo(data?.profiles?.pageInfo || {});\n      })\n      .catch((error) => {\n        console.error(error);\n        displayAlert(\"error\", \"Failed to get patients data, Try again\");\n      });\n  };\n  return (\n    <Grid item container flexWrap=\"wrap\" spacing={2} alignItems=\"flex-end\">\n      {/* FILTER BY GENDER */}\n      <Grid item>\n        <Filter\n          onHandleChange={(e) =>\n            onFilterProfileChange(\"gender\", e?.target?.value)\n          }\n          onClickClearBtn={() => onFilterProfileChange(\"gender\", \"\")}\n          options={[{ key: \"Gender\", value: \"\" }, ...genderType]}\n          name=\"gender\"\n          value={profileFilterValues.gender}\n          hasClearBtn={true}\n          disable={loading || byStatusLoading || byPlanLoading}\n          variant=\"small\"\n        />\n      </Grid>\n\n      {/* FILTER BY PROVIDER AND PLAN */}\n      <Grid item>\n        <Filter\n          onHandleChange={(e) =>\n            onFilterProfileChange(\"provider\", e?.target?.value)\n          }\n          onClickClearBtn={() => onFilterProfileChange(\"provider\", \"\")}\n          options={[{ key: \"Provider\", value: \"\" }, ...providers]}\n          name=\"provider\"\n          value={profileFilterValues.provider}\n          hasClearBtn={true}\n          disable={loading || byStatusLoading || byPlanLoading}\n        />\n      </Grid>\n      {profileFilterValues.provider === \"\" ? null : (\n        <Grid item>\n          <Filter\n            label=\"\"\n            onHandleChange={(e) => onFilterPlanChange(e?.target?.value)}\n            onClickClearBtn={() => onFilterPlanChange(\"\")}\n            options={plans}\n            name=\"plan\"\n            placeholder=\"Provider Plan\"\n            value={filterPlanValue}\n            hasClearBtn={true}\n            disable={loading || byStatusLoading || byPlanLoading}\n          />\n        </Grid>\n      )}\n\n      {/* FILTER BY STATUS */}\n      {/* <Grid item>\n        <Filter\n          label=\"By Status\"\n          onHandleChange={(e) => onFilterStatusChange(e?.target?.value)}\n          onClickClearBtn={() => onFilterStatusChange(\"\")}\n          options={statusFilterBy}\n          name=\"status\"\n          placeholder=\"None\"\n          value={statusFilterValue}\n          hasClearBtn={true}\n          disable={loading || byStatusLoading || byPlanLoading}\n        />\n      </Grid> */}\n      {/* ==== CLEAR FILTERS BUTTON ===== */}\n      {/* <Grid item>\n            <ClearFiltersBtn\n              title=\"Clear filters\"\n              onHandleClick={() => {\n                resetFilters(\n                  setFilterValues,\n                  patientsPageDefaultFilterValues,\n                  variables,\n                  fetchPatient\n                );\n              }}\n            />\n          </Grid> */}\n    </Grid>\n  );\n};\nPatientFilters.propTypes = {\n  setProfiles: t.func.isRequired,\n  setPageInfo: t.func.isRequired,\n  queryParams: t.object.isRequired,\n};\n\nexport default PatientFilters;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/LineChart.js",["1362"],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Modal.js",["1363","1364"],"import React from \"react\";\nimport { Modal, Stack, Box, Typography, Grid } from \"@mui/material\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@mui/styles\";\nimport CloseIcon from \"@mui/icons-material/Close\";\n\nconst useStyles = makeStyles((theme) => ({\n  closeIcon: {\n    \"&.MuiSvgIcon-root\": {\n      fontSize: \"2rem\",\n      cursor: \"pointer\",\n\n      \"&:hover\": {\n        color: \"red\",\n      },\n    },\n  },\n}));\n\nconst Modals = ({\n  isOpen,\n  isClose,\n  handleClose,\n  width,\n  title,\n  color,\n  children,\n  rowSpacing,\n  height,\n}) => {\n  const style = {\n    position: \"absolute\",\n    top: \"50%\",\n    left: \"50%\",\n    transform: \"translate(-50%, -50%)\",\n    height,\n    bgcolor: \"background.paper\",\n    borderRadius: \"2rem\",\n  };\n\n  const classes = useStyles();\n  return (\n    <Stack>\n      <Modal\n        open={isOpen}\n        onClose={handleClose}\n        aria-labelledby=\"modal-title\"\n        aria-describedby=\"modal-description\"\n      >\n        <Box\n          sx={style}\n          width={{ sm: \"40vw\", xs: \"90vw\", md: \"40vw\" }}\n          padding={{ sm: 4, xs: 3, md: 4 }}\n        >\n          <Grid\n            container\n            rowSpacing={rowSpacing ? rowSpacing : 4}\n            className={classes.modal}\n            flexDirection=\"column\"\n          >\n            <Grid\n              item\n              container\n              justifyContent=\"space-between\"\n              alignItems=\"center\"\n              flex=\"2\"\n            >\n              <Grid item>\n                <Typography variant=\"h3\">{title}</Typography>\n              </Grid>\n              <Grid item>\n                {!isClose ? (\n                  <CloseIcon\n                    color={color ? color : \"secondary\"}\n                    className={classes.closeIcon}\n                    onClick={handleClose}\n                  />\n                ) : null}\n              </Grid>\n            </Grid>\n            {children}\n          </Grid>\n        </Box>\n      </Modal>\n    </Stack>\n  );\n};\nModals.propTypes = {\n  isOpen: PropTypes.bool,\n  isClose: PropTypes.bool,\n  handleClose: PropTypes.func,\n  children: PropTypes.node,\n  title: PropTypes.string,\n  color: PropTypes.string,\n  height: PropTypes.string,\n  width: PropTypes.string,\n  rowSpacing: PropTypes.number,\n};\n\nModals.defaultProps = {\n  height: \"auto\",\n};\n\nexport default Modals;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/CircularChart.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/LinearProgress.js",["1365"],"import React, { useState, useEffect } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { LinearProgress, Typography, Box } from \"@mui/material\";\n\nconst LinearProgressWithLabel = (props) => {\n  return (\n    <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\n      <Box sx={{ width: \"100%\", mr: 1 }}>\n        <LinearProgress variant=\"determinate\" {...props} />\n      </Box>\n      <Box sx={{ minWidth: 35 }}>\n        <Typography variant=\"body2\" color=\"text.secondary\">{`${Math.round(\n          props.value\n        )}%`}</Typography>\n      </Box>\n    </Box>\n  );\n};\nLinearProgressWithLabel.propTypes = {\n  value: PropTypes.number,\n};\n\nconst LinearWithValueLabel = ({ progres }) => {\n  const [progress, setProgress] = useState(0);\n\n  useEffect(() => {\n    setProgress((progres) => (progres >= 100 ? 0 : progres + 0));\n  }, [progress]);\n\n  return (\n    <Box sx={{ width: \"100%\" }}>\n      <LinearProgressWithLabel value={progress} />\n    </Box>\n  );\n};\nexport default LinearWithValueLabel;\nLinearWithValueLabel.propTypes = {\n  progres: PropTypes.number,\n};\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/FormSelect.js",["1366"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { MenuItem, Select, Typography, FormControl } from \"@mui/material/\";\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\n\nconst FormSelect = ({\n  startAdornment,\n  value,\n  onChange,\n  placeholder,\n  options,\n  ...rest\n}) => {\n  return (\n    <FormControl sx={{ width: \"100%\" }}>\n      <Select\n        value={value}\n        onChange={onChange}\n        displayEmpty\n        startAdornment={startAdornment}\n        style={{ minHeight: 50, minWidth: 90 }}\n        inputProps={{ \"aria-label\": \"Select Referral Type\" }}\n        IconComponent={KeyboardArrowDownIcon}\n        {...rest}\n      >\n        <MenuItem value=\"\">\n          <Typography>{placeholder}</Typography>\n        </MenuItem>\n        {options.map((option, index) => (\n          <MenuItem\n            key={option.value}\n            value={option.value}\n            style={{ fontSize: \"1.25rem\" }}\n          >\n            {option.key}\n          </MenuItem>\n        ))}\n      </Select>\n    </FormControl>\n  );\n};\n\nFormSelect.propTypes = {\n  options: PropTypes.array,\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n  placeholder: PropTypes.string,\n  startAdornment: PropTypes.element,\n};\n\nexport default FormSelect;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/DisplayProfile.js",["1367","1368"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Link } from \"react-router-dom\";\nimport { Typography, Chip, Avatar, Grid } from \"@mui/material\";\nimport CustomButton from \"./CustomButton\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { HiChat } from \"react-icons/hi\";\nimport { useParams } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  gridsWrapper: {\n    background: \"#fff\",\n    borderRadius: \"1rem\",\n    padding: \"2rem\",\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\n  },\n\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.3rem !important\",\n      borderRadius: \"1.5rem\",\n    },\n  },\n}));\n\nconst DisplayProfile = ({\n  fullName,\n  displayPhoto,\n  medicalTitle,\n  statusId,\n  specialization,\n  status,\n  type,\n}) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { patientId, hcpId } = useParams();\n\n  const greenButton = {\n    background: theme.palette.success.main,\n    hover: theme.palette.success.light,\n    active: theme.palette.success.dark,\n  };\n\n  return (\n    <Grid\n      container\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      flexWrap=\"wrap\"\n      direction=\"row\"\n      className={classes.gridsWrapper}\n      rowGap={2}\n    >\n      <Grid item>\n        <Grid container gap={2} alignItems=\"center\">\n          <Avatar\n            alt={\"Display Photo\"}\n            src={displayPhoto}\n            sx={{ width: 50, height: 50 }}\n          />\n          <Typography variant=\"h3\">{fullName}</Typography>\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Grid container alignItems=\"center\" justifyContent=\"space-between\">\n          {specialization ? (\n            <Grid item>\n              <Typography variant=\"h4\" style={{ fontWeight: 400 }}>\n                <span style={{ color: theme.palette.common.lightGrey }}>\n                  Specialization:\n                </span>{\" \"}\n                <Chip\n                  label={specialization}\n                  color=\"success\"\n                  className={classes.badge}\n                />\n              </Typography>\n            </Grid>\n          ) : status ? (\n            <Grid item>\n              <Typography variant=\"h4\">\n                <span style={{ color: theme.palette.common.lightGrey }}>\n                  Status:\n                </span>{\" \"}\n                <Chip\n                  label={status}\n                  color={status === \"Active\" ? \"success\" : \"error\"}\n                  className={classes.badge}\n                  style={{\n                    background:\n                      status === \"Active\"\n                        ? theme.palette.common.lightGreen\n                        : theme.palette.common.lightRed,\n                    color:\n                      status === \"Active\"\n                        ? theme.palette.common.green\n                        : theme.palette.common.red,\n                  }}\n                />\n              </Typography>\n            </Grid>\n          ) : null}\n        </Grid>\n      </Grid>\n      <Grid item>\n        <Typography variant=\"h4\" color=\"error\" style={{ fontWeight: 400 }}>\n          <span style={{ color: theme.palette.common.lightGrey }}>\n            {medicalTitle}:\n          </span>{\" \"}\n          {statusId}\n        </Typography>\n      </Grid>\n      {type !== \"\" ? (\n        <Grid item>\n          <CustomButton\n            endIcon={<HiChat />}\n            title=\"Message\"\n            type={greenButton}\n            component={Link}\n            to={\n              type !== \"doctor\"\n                ? `/patients/${patientId}/profile/chat`\n                : `/hcps/${hcpId}/profile/chat`\n            }\n          />\n        </Grid>\n      ) : null}\n    </Grid>\n  );\n};\n\nDisplayProfile.propTypes = {\n  fullName: PropTypes.string,\n  displayPhoto: PropTypes.string,\n  medicalTitle: PropTypes.string,\n  statusId: PropTypes.string,\n  specialization: PropTypes.string,\n  status: PropTypes.string,\n  chatPath: PropTypes.string,\n  type: PropTypes.string,\n};\n\nexport default DisplayProfile;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Rows/PlanListRow.js",["1369"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { useTheme } from \"@mui/styles\";\nimport { makeStyles } from \"@mui/styles\";\nimport { Loader } from \"components/Utilities\";\nimport { formatNumber } from \"components/Utilities/Time\";\nimport { EditDelBtn } from \"components/Buttons/EditDelBtn\";\nimport { Checkbox, TableCell, TableRow } from \"@mui/material\";\n\nconst useStyles = makeStyles((theme) => ({\n  FormLabel: {\n    \"&.MuiFormLabel-root\": {\n      ...theme.typography.FormLabel,\n    },\n  },\n  button: {\n    \"&.MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"1rem\",\n      maxWidth: \"15rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.2rem\",\n      },\n\n      \"& .MuiButton-endIcon\": {\n        marginLeft: \".3rem\",\n        marginTop: \"-.2rem\",\n      },\n    },\n  },\n  btn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      width: \"100%\",\n    },\n  },\n  closeIcon: {\n    \"&.MuiSvgIcon-root\": {\n      fontSize: \"2rem \",\n      cursor: \"pointer\",\n\n      \"&:hover\": {\n        color: theme.palette.common.red,\n      },\n    },\n  },\n  tableBtn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      height: \"3rem\",\n      fontSize: \"1.25rem\",\n      borderRadius: \"2rem\",\n      boxShadow: \"none\",\n      width: \"12rem\",\n\n      \"&:hover\": {\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n          color: \"#fff\",\n        },\n      },\n\n      \"&:active\": {\n        boxShadow: \"none\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.5rem\",\n      },\n    },\n  },\n\n  redBtn: {\n    \"&.MuiButton-root\": {\n      background: theme.palette.common.lightRed,\n      color: theme.palette.common.red,\n\n      \"&:hover\": {\n        background: theme.palette.error.light,\n        color: \"#fff\",\n      },\n    },\n  },\n\n  greenBtn: {\n    \"&.MuiButton-root\": {\n      background: theme.palette.common.lightGreen,\n      color: theme.palette.common.green,\n\n      \"&:hover\": {\n        background: theme.palette.success.light,\n        color: \"#fff\",\n      },\n    },\n  },\n  tableCell: {\n    \"&.MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.6rem !important\",\n      height: \"3rem\",\n      borderRadius: \"1.3rem\",\n    },\n    modal: {\n      background: \"red !important\",\n      \"& > * \": {\n        padding: \"2rem 1rem\",\n      },\n    },\n    \".MuiGrid-root\": {\n      background: \"red\",\n    },\n  },\n}));\n\nexport const PlanListRow = ({\n  plan,\n  isItemSelected,\n  handleSelectedRows,\n  selectedRows,\n  setSelectedRows,\n  labelId,\n  handleDeleteOpenDialog,\n  handleEditOpenDialog,\n  deleting,\n}) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { _id, name, amount, duration, description } = plan;\n  return (\n    <TableRow\n      hover\n      role=\"checkbox\"\n      aria-checked={isItemSelected}\n      tabIndex={-1}\n      key={_id}\n      selected={isItemSelected}\n      sx={{ cursor: \"pointer\" }}\n      onClick={() => handleEditOpenDialog()}\n    >\n      <TableCell padding=\"checkbox\">\n        <Checkbox\n          onClick={() => handleSelectedRows(_id, selectedRows, setSelectedRows)}\n          color=\"primary\"\n          checked={isItemSelected}\n          inputProps={{\n            \"aria-labelledby\": labelId,\n          }}\n        />\n      </TableCell>\n      <TableCell\n        id={labelId}\n        scope=\"row\"\n        align=\"left\"\n        className={classes.tableCell}\n        style={{ color: theme.palette.common.black }}\n      >\n        {name}\n      </TableCell>\n      <TableCell\n        id={labelId}\n        scope=\"row\"\n        align=\"left\"\n        className={classes.tableCell}\n        style={{ color: theme.palette.common.red }}\n      >\n        {formatNumber(amount)}\n      </TableCell>\n\n      <TableCell\n        align=\"left\"\n        className={classes.tableCell}\n        style={{\n          color: theme.palette.common.black,\n          maxWidth: \"20rem\",\n        }}\n      >\n        {description}\n      </TableCell>\n      <TableCell\n        align=\"left\"\n        className={classes.tableCell}\n        style={{\n          color: theme.palette.common.black,\n          maxWidth: \"20rem\",\n        }}\n      >\n        {duration}\n      </TableCell>\n\n      <TableCell align=\"left\" className={classes.tableCell}>\n        <div\n          style={{\n            height: \"100%\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"space-around\",\n          }}\n        >\n          {deleting ? (\n            <Loader />\n          ) : (\n            <EditDelBtn\n              type=\"delete\"\n              text=\"Delete plan\"\n              onHandleClick={() => handleDeleteOpenDialog()}\n            />\n          )}\n        </div>\n      </TableCell>\n    </TableRow>\n  );\n};\n\nPlanListRow.propTypes = {\n  plan: PropTypes.object,\n  isItemSelected: PropTypes.bool,\n  handleSelectedRows: PropTypes.func,\n  selectedRows: PropTypes.array,\n  setSelectedRows: PropTypes.func,\n  labelId: PropTypes.string,\n  handleDeleteOpenDialog: PropTypes.func,\n  handleEditOpenDialog: PropTypes.func,\n  deleting: PropTypes.bool,\n};\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/ProfileCard.js",["1370"],"import React from \"react\";\nimport { Typography, Grid, Chip } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => ({\n  cardGrid: {\n    background: \"#fff\",\n    borderRadius: \"1rem\",\n    // padding: \"4rem 5rem\",\n    height: \"16.1rem\",\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\n  },\n  link: {\n    display: \"flex\",\n    alignItems: \"center\",\n    fontSize: \"1.25rem\",\n    color: theme.palette.common.green,\n    padding: \".75rem\",\n    borderRadius: \"1.5rem\",\n    textDecoration: \"none\",\n  },\n  infoBadge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.25rem\",\n      borderRadius: \"1.5rem\",\n      color: theme.palette.common.green,\n    },\n  },\n}));\nconst ProfileCard = ({ value, text, type }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      item\n      container\n      direction=\"column\"\n      justifyContent=\"center\"\n      rowGap={{ md: 4, sm: 3, xs: 3 }}\n      alignItems=\"center\"\n      className={classes.cardGrid}\n    >\n      <Grid item>\n        <Typography variant=\"h4\">{text}</Typography>\n      </Grid>\n\n      {/* {type === \"alergy\"\n        ? value?.map((i, key) => (\n            <a\n              rel=\"noreferrer\"\n              key={i._id}\n              className={classes.link}\n              href={i.url}\n              target=\"_blank\"\n            ></a>\n          ))\n        : null} */}\n      <Grid item>\n        {Array.isArray(value) ? (\n          value.map((i, key) => (\n            <Chip\n              variant=\"outlined\"\n              key={key}\n              label={i}\n              className={classes.infoBadge}\n            />\n          ))\n        ) : (\n          <Chip\n            variant=\"outlined\"\n            label={value}\n            className={classes.infoBadge}\n          />\n        )}\n      </Grid>\n    </Grid>\n  );\n};\n\nProfileCard.propTypes = {\n  text: PropTypes.string,\n  value: PropTypes.string,\n  type: PropTypes.string,\n};\nexport default ProfileCard;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/UserTypeModal.js",["1371"],"import React, { useEffect } from \"react\";\nimport CustomButton from \"components/Utilities/CustomButton\";\nimport { Formik, Form } from \"formik\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport { Grid } from \"@mui/material\";\nimport PropTypes from \"prop-types\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { getUserTypes, getUserType } from \"components/graphQL/useQuery\";\nimport { createUserType, editUserType } from \"components/graphQL/Mutation\";\nimport * as Yup from \"yup\";\nimport { useTheme } from \"@mui/material/styles\";\n\nexport const UserTypeModal = ({\n  handleDialogClose,\n  type,\n  editId,\n  singleData,\n  setSingleData,\n  initialValues,\n}) => {\n  const theme = useTheme();\n\n  const [createType] = useMutation(createUserType, {\n    refetchQueries: [{ query: getUserTypes }],\n  });\n  const [editType] = useMutation(editUserType, {\n    refetchQueries: [{ query: getUserTypes }],\n  });\n\n  const single = useQuery(getUserType, {\n    variables: {\n      id: editId,\n    },\n  });\n\n  useEffect(() => {\n    if (single.data) {\n      setSingleData({\n        name: single.data.getUserType.name,\n        image: single.data.getUserType.icon,\n        id: single.data.getUserType._id,\n        description: single.data.getUserType.description,\n      });\n    }\n  }, [single.data, setSingleData]);\n  //   const [updatePlan] = useMutation(UPDATE_PLAN);\n\n  //   const single = useQuery(getSinglePlan, {\n  //     variables: {\n  //       id: editId,\n  //     },\n  //   });\n  const validationSchema = Yup.object({\n    name: Yup.string(\"Enter your Name\").trim().required(\"Name is required\"),\n    image: Yup.string(\"Upload a single Image\").required(\"Image is required\"),\n  });\n\n  const onSubmit = async (values, onSubmitProps) => {\n    const { name, image } = values;\n    if (type == \"add\") {\n      try {\n        await createType({ variables: { name, icon: image } });\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    if (type === \"edit\") {\n      const { description, name, image, id } = values;\n      await editType({\n        variables: {\n          id,\n          name,\n          description,\n          icon: image,\n        },\n      });\n    }\n\n    onSubmitProps.resetForm();\n    handleDialogClose();\n  };\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n  return (\n    <Formik\n      initialValues={type === \"edit\" ? singleData : initialValues}\n      enableReinitialize\n      onSubmit={onSubmit}\n      validateOnBlur={false}\n      validationSchema={validationSchema}\n      validateOnChange={false}\n      validateOnMount={false}\n    >\n      {({ isSubmitting, dirty, isValid, setFieldValue }) => {\n        return (\n          <Form style={{ marginTop: \"3rem\" }}>\n            <Grid item container direction=\"column\" gap={1}>\n              <Grid item container rowSpacing={3}>\n                <Grid item container>\n                  <FormikControl\n                    control=\"textarea\"\n                    name=\"description\"\n                    label=\"Description\"\n                    placeholder=\"Description...\"\n                  />\n                </Grid>\n                <Grid item md display=\"flex\" alignItems=\"center\">\n                  <Grid item container md>\n                    <FormikControl\n                      control=\"file\"\n                      name=\"image\"\n                      label=\"Upload Your Logo\"\n                      setFieldValue={setFieldValue}\n                    />\n                  </Grid>\n                </Grid>\n\n                <Grid item xs={12}>\n                  <CustomButton\n                    title={type === \"edit\" ? \"Save UserTypes\" : \"Add UserTypes\"}\n                    width=\"100%\"\n                    isSubmitting={isSubmitting}\n                    disabled={!(dirty || isValid)}\n                    type={buttonType}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nUserTypeModal.propTypes = {\n  handleDialogClose: PropTypes.func,\n  setAlert: PropTypes.func,\n  editId: PropTypes.string,\n  type: PropTypes.string,\n  edit: PropTypes.bool,\n  initialValues: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  validationSchema: PropTypes.object,\n  singleData: PropTypes.object,\n  setSingleData: PropTypes.func,\n};\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/DataGrid.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/CheckBox.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Card.js",["1372"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport Grid from \"@mui/material/Grid\";\nimport Typography from \"@mui/material/Typography\";\nimport { makeStyles } from \"@mui/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  gridWrapper: {\n    ...theme.typography.cardGridWrapper,\n    width: \"100%\",\n  },\n\n  iconWrapper: {\n    ...theme.typography.cardIconWrapper,\n  },\n}));\n\nconst Card = ({ title, background, children, header = \"h2\", padding }) => {\n  const classes = useStyles();\n  return (\n    <Grid\n      item\n      container\n      direction=\"column\"\n      alignItems=\"center\"\n      justifyContent=\"space-between\"\n      className={classes.gridWrapper}\n      rowGap={3}\n    >\n      <Grid item className={classes.iconWrapper} style={{ background }}>\n        {children}\n      </Grid>\n      <Grid item>\n        <Typography variant={header}>{title}</Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nCard.propTypes = {\n  title: PropTypes.string,\n  background: PropTypes.string,\n  header: PropTypes.string,\n  children: PropTypes.node,\n  padding: PropTypes.string,\n};\n\nexport default Card;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Button.js",["1373","1374"],"import React from \"react\";\nimport Button from \"@mui/material/Button\";\nimport Stack from \"@mui/material/Stack\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@mui/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  button: {\n    textTransform: \"capitalize\",\n    fontFamily: \"Circular Std\",\n    fontSize: \"1.6rem\",\n    fontStyle: \"normal\",\n    fontWeight: 500,\n    lineHeight: \"2.4rem\",\n    letterSpacing: \"0px\",\n    textAlign: \"left\",\n    height: \"100%\",\n  },\n}));\n\nconst IconLabelButtons = ({\n  placeholder,\n  width,\n  backgroundColor,\n  type,\n  border,\n  height,\n  endIcon,\n}) => {\n  const classes = useStyles();\n  return (\n    <Stack\n      direction=\"row\"\n      spacing={2}\n      sx={{\n        width,\n        // height: \"100%\",\n      }}\n    >\n      <Button\n        sx={{ width, backgroundColor, borderRadius: border, height }}\n        variant=\"contained\"\n        className={classes.button}\n        endIcon={endIcon}\n      >\n        {placeholder}\n      </Button>\n    </Stack>\n  );\n};\n\nIconLabelButtons.propTypes = {\n  width: PropTypes.string,\n  placeholder: PropTypes.string,\n  backgroundColor: PropTypes.string,\n  type: PropTypes.string,\n  border: PropTypes.string,\n  height: PropTypes.string,\n  endIcon: PropTypes.node,\n};\n\nexport default IconLabelButtons;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/bMI.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/styles/loginPageStyles.js",["1375"],"import { makeStyles } from \"@mui/styles\";\n/* import loginBackground from \"../assets/images/login-background.svg\"; */\n\nexport const useStyles = makeStyles((theme) => ({\n  gridContainer: {\n    \"&.MuiGrid-root\": {\n      display: \"flex\",\n      flexDirection: \"column\",\n      justifyContent: \"center\",\n      backgroundColor: \"#f8f8f8\",\n      minHeight: \"100vh\",\n      width: \"100%\",\n    },\n  },\n  overlay: {\n    width: \"100%\",\n    height: \"100%\",\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n  },\n  peopleBgImage: {\n    width: \"100%\",\n    height: \"100%\",\n    backgroundSize: \"cover\",\n    overflow: \"hidden\",\n    backgroundPosition: \"25% 50%\",\n  },\n  heading: {\n    \"&.MuiTypography-root\": {\n      fontSize: \"clamp(1em, 3.2em, 5em)\",\n      textAlign: \"center\",\n      lineHeight: \"28px\",\n      fontWeight: \"500 !important\",\n      padding: \"23px\",\n      color: \"#333333\",\n    },\n  },\n  logoAlign: {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    flexGrow: 0,\n    paddingBottom: \"2rem\",\n  },\n\n  logo: {\n    width: \"clamp(100px, 150px, 200px)\",\n    position: \"relative\",\n    textAlign: \"center\",\n  },\n  rightParentGrid: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n    backgroundColor: \"#FCFCFC\",\n    borderRadius: \"11px\",\n  },\n\n  link: {\n    textDecoration: \"none\",\n  },\n  loginBtn: {\n    width: \"100%\",\n    height: \"54.62px\",\n    border: \"none\",\n    fontWeight: \"500 !important\",\n    fontSize: \"1.6rem !important\",\n    textTransform: \"initial !important\",\n    color: \"#ffffff !important\",\n    lineHeight: \"20px\",\n    background: \"linear-gradient(98.44deg, #3E5EA9 1.92%, #7EEDBA 122.04%)\",\n    borderRadius: \"7px\",\n    cursor: \"pointer\",\n    \"&:hover\": {\n      boxShadow: \"0px 6.82771px 20.4831px rgba(62, 165, 132, 0.15)\",\n    },\n  },\n}));\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/AvailabilityCard.js",["1376"],"import React from \"react\";\nimport { PropTypes } from \"prop-types\";\nimport { Grid, Typography, Divider } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { hours } from \"components/Utilities/Time\";\n\nconst useStyles = makeStyles((theme) => ({\n  cardGrid: {\n    background: \"#fff\",\n    borderRadius: \"2rem\",\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.1)\",\n  },\n}));\n\nconst AvailabilityCard = ({ availability }) => {\n  const classes = useStyles();\n  return (\n    <Grid container direction=\"column\" className={classes.cardGrid}>\n      <Grid item style={{ padding: \"2rem\" }}>\n        <Grid container justifyContent=\"center\" gap={2}>\n          <Grid item>\n            <Typography variant=\"body1\">Day:</Typography>\n          </Grid>\n          <Grid item>\n            <Typography variant=\"body1\">{availability?.day} </Typography>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Divider />\n      <Grid item style={{ padding: \"2rem\" }}>\n        <Grid item container justifyContent=\"center\">\n          <Grid item>\n            <Typography variant=\"body1\">Time: </Typography>\n          </Grid>\n          <Grid container>\n            {availability?.times?.map((time, index) => {\n              return (\n                <Grid\n                  container\n                  direction=\"column\"\n                  gap={2}\n                  key={index}\n                  alignItems=\"center\"\n                  justifyContent=\"center\"\n                >\n                  <Grid item>\n                    <Grid item container gap={2}>\n                      <Grid item>\n                        <Typography variant=\"body1\">{`${hours(\n                          time?.start\n                        )}`}</Typography>\n                      </Grid>\n                      <Grid item>\n                        <Typography variant=\"body1\">-</Typography>\n                      </Grid>\n                      <Grid item>\n                        <Typography variant=\"body1\">\n                          {`${hours(time?.stop)}`}{\" \"}\n                        </Typography>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Divider />\n                </Grid>\n              );\n            })}\n          </Grid>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\nAvailabilityCard.propTypes = {\n  day: PropTypes.string,\n  time: PropTypes.string,\n  availability: PropTypes.string,\n};\n\nexport default AvailabilityCard;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/LoginInput.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/DataHeader.js",["1377","1378","1379","1380","1381"],"/* import * as React from \"react\";\nimport Avatar from \"@mui/material/Avatar\";\nimport displayPhoto from \"assets/images/avatar.svg\"; */\nimport Styled from \"styled-components\";\n\n/* export const columns = [\n  {\n    field: \"entryDate\",\n    headerName: \"Entry Date\",\n    headerClassName: \"entryHeader\",\n    headerAlign: \"center\",\n    flex: 0.1,\n    cellClassName: \"entryDate\",\n    type: \"number\",\n    minWidth: 60,\n    sortable: false,\n  },\n\n  {\n    field: \"fullname\",\n    headerName: \"Name\",\n    headerClassName: \"entryHeader\",\n    sortable: false,\n    cellClassName: \"name\",\n    headerAlign: \"left\",\n    flex: 0.13,\n    minWidth: 100,\n    renderCell: (params) => (\n      <span style={{ display: \"flex\", alignItems: \"center\" }}>\n        <Avatar alt=\"Display avatar\" src={displayPhoto} style={{ marginRight: \"1rem\" }} />\n        {params.getValue(params.id, \"firstName\") || \"\"}\n\n        {params.getValue(params.id, \"lastName\") || \"\"}\n      </span>\n    ),\n  },\n  {\n    field: \"category\",\n    headerName: \"Category\",\n    headerAlign: \"left\",\n    cellClassName: \"category\",\n    // headerClassName: \"categoryHeader\",\n    type: \"number\",\n    minWidth: 100,\n    flex: 0.06,\n    sortable: false,\n  },\n\n  {\n    field: \"email\",\n    headerName: \"Email\",\n    headerClassName: \"entryHeader\",\n    headerAlign: \"center\",\n    cellClassName: \"email\",\n    flex: 0.15,\n    minWidth: 100,\n    renderCell: (params) => (\n      <Div>\n        <a> {params.getValue(params.id, \"email\") || \"\"}</a>\n      </Div>\n    ),\n  },\n];\n\nexport const columns2 = [\n  {\n    field: \"entryDate\",\n    headerName: \"Entry Date\",\n    headerClassName: \"entryHeader\",\n    headerAlign: \"center\",\n    flex: 0.1,\n    cellClassName: \"entryDate\",\n    type: \"number\",\n    minWidth: 110,\n    sortable: false,\n  },\n\n  {\n    field: \"fullname\",\n    headerName: \"Name\",\n    headerClassName: \"entryHeader\",\n    description: \"This column has a value getter and is not sortable.\",\n    sortable: false,\n    cellClassName: \"name\",\n    headerAlign: \"center\",\n    flex: 0.13,\n    minWidth: 150,\n    renderCell: (params) => (\n      <span style={{ display: \"flex\", alignItems: \"center\" }}>\n        <Avatar alt=\"Display avatar\" src={displayPhoto} style={{ marginRight: \"1rem\" }} />\n        {params.getValue(params.id, \"firstName\") || \"\"}\n\n        {params.getValue(params.id, \"lastName\") || \"\"}\n      </span>\n    ),\n  },\n  {\n    field: \"medical\",\n    headerName: \"Medical ID\",\n    headerAlign: \"center\",\n    cellClassName: \"medical\",\n    headerClassName: \"medical\",\n    type: \"number\",\n    minWidth: 120,\n    flex: 0.08,\n    sortable: false,\n  },\n\n  {\n    field: \" \",\n    headerName: \" \",\n    headerClassName: \"entryHeader\",\n    headerAlign: \"center\",\n    cellClassName: \"email\",\n    selectable: false,\n    flex: 0.15,\n    minWidth: 100,\n    renderCell: (params) => (\n      <Div2>\n        <a href=\"/view\">\n          View HCP &nbsp;&nbsp;\n          <svg\n            width=\"6\"\n            height=\"8\"\n            viewBox=\"0 0 6 8\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M0.726562 7.06L3.7799 4L0.726562 0.94L1.66656 0L5.66656 4L1.66656 8L0.726562 7.06Z\"\n              fill=\"#757886\"\n            />\n          </svg>\n        </a>\n      </Div2>\n    ),\n  },\n];\nexport const Referralcolumns = [\n  {\n    field: \"entryDate\",\n    headerName: \"Entry Date\",\n    headerClassName: \"entryHeader\",\n    headerAlign: \"center\",\n    flex: 0.09,\n    cellClassName: \"entryDate\",\n    type: \"number\",\n    minWidth: 60,\n    maxWidth: 150,\n    sortable: false,\n  },\n  {\n    field: \"time\",\n    headerName: \"Time\",\n    headerClassName: \"referralTime\",\n    headerAlign: \"center\",\n    flex: 0.077,\n    cellClassName: \"referralTime\",\n    type: \"number\",\n    minWidth: 50,\n    sortable: false,\n  },\n\n  {\n    field: \"HCP Name\",\n    headerName: \"HCP Name\",\n    headerClassName: \"entryHeader\",\n    description: \"This column has a value getter and is not sortable.\",\n    sortable: false,\n    cellClassName: \"name\",\n    headerAlign: \"center\",\n    flex: 0.13,\n    minWidth: 160,\n    renderCell: (params) => (\n      <span style={{ display: \"flex\", alignItems: \"center\" }}>\n        <Avatar alt=\"Display avatar\" src={displayPhoto} style={{ marginRight: \"1rem\" }} />\n        {params.getValue(params.id, \"firstName\") || \"\"}\n\n        {params.getValue(params.id, \"lastName\") || \"\"}\n      </span>\n    ),\n  },\n  {\n    field: \"specialization\",\n    headerName: \"Specialization\",\n    headerAlign: \"left\",\n    cellClassName: \"CellSpecialization\",\n    headerClassName: \"specialization\",\n    type: \"number\",\n    minWidth: 50,\n    flex: 0.11,\n    sortable: false,\n  },\n  {\n    field: \"fullname\",\n    headerName: \"Patient's Name\",\n    headerClassName: \"headerPatientName\",\n    sortable: false,\n    cellClassName: \"PatientName\",\n    headerAlign: \"center\",\n    flex: 0.15,\n    minWidth: 200,\n    renderCell: (params) => (\n      <span style={{ display: \"flex\", alignItems: \"center\" }}>\n        <Avatar alt=\"Display avatar\" src={displayPhoto} style={{ marginRight: \"1rem\" }} />\n        {params.getValue(params.id, \"firstName\") || \"\"}\n        {params.getValue(params.id, \"lastName\") || \"\"}\n      </span>\n    ),\n  },\n\n  {\n    field: \"Status \",\n    headerName: \" Status\",\n    headerClassName: \"status\",\n    headerAlign: \"left\",\n    cellClassName: \"cellStatus\",\n    selectable: false,\n    flex: 0.06,\n    minWidth: 70,\n    renderCell: (params) => (\n      <ReferralDiv>\n        <Div2>\n          <a href=\"\">Active</a>\n        </Div2>\n      </ReferralDiv>\n    ),\n  },\n  {\n    field: \"referral\",\n    headerName: \" \",\n    headerClassName: \"entryHeader\",\n    headerAlign: \"left\",\n    cellClassName: \"refferalHeader\",\n    selectable: false,\n    flex: 0.1,\n    minWidth: 100,\n    renderCell: (params) => (\n      <Div2>\n        <small>View referral</small>\n      </Div2>\n    ),\n  },\n];\nexport const Subscriptioncolumns = [\n  {\n    field: \"planName\",\n    headerName: \"Name of plan\",\n    headerClassName: \"planName\",\n    headerAlign: \"headerPlanName\",\n    flex: 0.1,\n    cellClassName: \"cellPlanName\",\n    type: \"number\",\n    minWidth: 60,\n    sortable: false,\n    checkboxSelection: false,\n  },\n  {\n    field: \"amount\",\n    headerName: \"Amount\",\n    headerClassName: \"headerAmount\",\n    headerAlign: \"center\",\n    flex: 0.086,\n    cellClassName: \"cellAmount\",\n    type: \"number\",\n    minWidth: 50,\n    sortable: false,\n    selectable: false,\n  },\n\n  {\n    field: \"Description\",\n    headerName: \"Description\",\n    headerClassName: \"description\",\n    sortable: false,\n    cellClassName: \"cellDescription\",\n    headerAlign: \"center\",\n    flex: 0.15,\n    minWidth: 200,\n    renderCell: (params) => (\n      <span\n        style={{\n          fontSize: \"1.4rem\",\n          whiteSpace: \"normal\",\n          wordWrap: \"break-word\",\n          lineHeight: \"2.1rem\",\n        }}\n      >\n        {params.getValue(params.id, \"description\") || \"\"}\n      </span>\n    ),\n  },\n  {\n    field: \"editPlan\",\n    headerName: \" \",\n    headerClassName: \"headerEditPlan\",\n    headerAlign: \"left\",\n    cellClassName: \"cellEditPlan\",\n    selectable: false,\n    flex: 0.1,\n    minWidth: 100,\n    renderCell: (params) => (\n      <SubscriptionDiv>\n        <Div>\n          <a>\n            {\" \"}\n            Edit plan\n            <svg\n              style={{ marginLeft: \".7rem\" }}\n              width=\"15\"\n              height=\"15\"\n              viewBox=\"0 0 15 15\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                d=\"M10.586 1.58599C10.7705 1.39497 10.9912 1.24261 11.2352 1.13779C11.4792 1.03297 11.7416 0.977801 12.0072 0.975494C12.2728 0.973186 12.5361 1.02379 12.7819 1.12435C13.0277 1.22491 13.251 1.37342 13.4388 1.5612C13.6266 1.74899 13.7751 1.97229 13.8756 2.21809C13.9762 2.46388 14.0268 2.72724 14.0245 2.9928C14.0222 3.25836 13.967 3.5208 13.8622 3.7648C13.7574 4.00881 13.605 4.2295 13.414 4.41399L12.621 5.20699L9.793 2.37899L10.586 1.58599ZM8.379 3.79299L0 12.172L0 15H2.828L11.208 6.62099L8.378 3.79299H8.379Z\"\n                fill=\"#3EA584\"\n              />\n            </svg>\n          </a>\n        </Div>\n      </SubscriptionDiv>\n    ),\n  },\n  {\n    field: \"\",\n    headerName: \"\",\n    headerClassName: \"headerdeletePlan\",\n    headerAlign: \"left\",\n    cellClassName: \"cellDeletePlan\",\n    selectable: false,\n    flex: 0.1,\n    minWidth: 100,\n    renderCell: (params) => (\n      <SubscriptionDelete>\n        <Div2 style={{ display: \"flex\", alignItems: \"center\" }}>\n          <a>Delete plan </a>\n          <svg\n            style={{ marginLeft: \".4rem\" }}\n            width=\"20\"\n            height=\"20\"\n            viewBox=\"0 0 20 20\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              clipRule=\"evenodd\"\n              d=\"M9 2C8.81434 2.0001 8.63237 2.05188 8.47447 2.14955C8.31658 2.24722 8.18899 2.38692 8.106 2.553L7.382 4H4C3.73478 4 3.48043 4.10536 3.29289 4.29289C3.10536 4.48043 3 4.73478 3 5C3 5.26522 3.10536 5.51957 3.29289 5.70711C3.48043 5.89464 3.73478 6 4 6L4 16C4 16.5304 4.21071 17.0391 4.58579 17.4142C4.96086 17.7893 5.46957 18 6 18H14C14.5304 18 15.0391 17.7893 15.4142 17.4142C15.7893 17.0391 16 16.5304 16 16V6C16.2652 6 16.5196 5.89464 16.7071 5.70711C16.8946 5.51957 17 5.26522 17 5C17 4.73478 16.8946 4.48043 16.7071 4.29289C16.5196 4.10536 16.2652 4 16 4H12.618L11.894 2.553C11.811 2.38692 11.6834 2.24722 11.5255 2.14955C11.3676 2.05188 11.1857 2.0001 11 2H9ZM7 8C7 7.73478 7.10536 7.48043 7.29289 7.29289C7.48043 7.10536 7.73478 7 8 7C8.26522 7 8.51957 7.10536 8.70711 7.29289C8.89464 7.48043 9 7.73478 9 8V14C9 14.2652 8.89464 14.5196 8.70711 14.7071C8.51957 14.8946 8.26522 15 8 15C7.73478 15 7.48043 14.8946 7.29289 14.7071C7.10536 14.5196 7 14.2652 7 14L7 8ZM12 7C11.7348 7 11.4804 7.10536 11.2929 7.29289C11.1054 7.48043 11 7.73478 11 8V14C11 14.2652 11.1054 14.5196 11.2929 14.7071C11.4804 14.8946 11.7348 15 12 15C12.2652 15 12.5196 14.8946 12.7071 14.7071C12.8946 14.5196 13 14.2652 13 14V8C13 7.73478 12.8946 7.48043 12.7071 7.29289C12.5196 7.10536 12.2652 7 12 7Z\"\n              fill=\"#ED3237\"\n            />\n          </svg>\n        </Div2>\n      </SubscriptionDelete>\n    ),\n  },\n];\nexport const FinanceColumns = [\n  {\n    field: \"entryDate\",\n    headerName: \"Entry Date\",\n    headerClassName: \"financeEntryHeader\",\n    headerAlign: \"center\",\n    flex: 0.1,\n    cellClassName: \"entryDate\",\n    type: \"number\",\n    minWidth: 60,\n    sortable: false,\n  },\n  {\n    field: \"time\",\n    headerName: \"Time\",\n    headerClassName: \"referralTime\",\n    headerAlign: \"center\",\n    flex: 0.1,\n    cellClassName: \"referralTime\",\n    type: \"number\",\n    minWidth: 50,\n    sortable: false,\n  },\n  {\n    field: \"fullname\",\n    headerName: \"Patient's Name\",\n    headerClassName: \"headerPatientName\",\n    sortable: false,\n    cellClassName: \"PatientName\",\n    headerAlign: \"left\",\n    flex: 0.15,\n    type: \"string\",\n    minWidth: 150,\n    renderCell: (params) => (\n      <span style={{ display: \"flex\", alignItems: \"center\" }}>\n        <Avatar alt=\"Display avatar\" src={displayPhoto} style={{ marginRight: \"1rem\" }} />\n        {params.getValue(params.id, \"firstName\") || \"\"}\n        {params.getValue(params.id, \"lastName\") || \"\"}\n      </span>\n    ),\n  },\n  {\n    field: \"planName\",\n    headerName: \"Subscription plan\",\n    headerClassName: \"planName\",\n    headerAlign: \"headerPlanName\",\n    flex: 0.1,\n    cellClassName: \"cellPlanName\",\n    type: \"number\",\n    minWidth: 60,\n    sortable: false,\n    checkboxSelection: false,\n  },\n  {\n    field: \"amount\",\n    headerName: \"Amount\",\n    headerClassName: \"headerAmount\",\n    headerAlign: \"center\",\n    flex: 0.086,\n    cellClassName: \"cellAmount\",\n    type: \"string\",\n    minWidth: 50,\n    sortable: false,\n    selectable: false,\n  },\n]; */\n\nexport const rows = [\n  {\n    id: 1,\n    lastName: \"Snow\",\n    name: \"Heala\",\n    entryDate: \"July 17, 2021\",\n    firstName: \"Jon\",\n    category: \"HCP\",\n    email: \"sule@gmail.com\",\n    time: \"10:00AM\",\n    medical: 123445,\n    amount: \"₦ 10,000\",\n    bank: \"Kuda MFB\",\n    subject: \"Appreciation message to Heala  team\",\n    status: \"active\",\n    specialization: \"Dentistry\",\n    availableTime: \"10:00AM - 3:30PM\",\n    planName: \"Plan 1\",\n    roleName: \"role 1\",\n    description: \"This is the decription regarding this particular plan\",\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\n    data: [\"create\", \"read\", \"update\", \"delete\"],\n    type: \"Nurse\",\n    account: 2018785545,\n  },\n  {\n    id: 2,\n    lastName: \"Lannister\",\n    roleName: \"role 1\",\n    entryDate: \"July 17, 2021\",\n    firstName: \"Cersei\",\n    category: \"User\",\n    planName: \"Plan 1\",\n    amount: \"₦ 10,000\",\n    name: \"Heala\",\n    medical: 123445,\n    bank: \"Kuda MFB\",\n    status: \"active\",\n    subject: \"Appreciation message to Heala  team\",\n    email: \"sule@gmail.com\",\n    description: \"This is the decription regarding this particular plan\",\n    availableTime: \"10:00AM - 3:30PM\",\n    time: \"10:00AM\",\n    specialization: \"Dentistry\",\n    permission: [\n      \"permission 1\",\n      \"permission 2\",\n      \"permission3\",\n      \"permission4\",\n      \"permission5\",\n      \"permission6\",\n    ],\n    data: [\"create\", \"read\", \"update\", \"delete\"],\n    type: \"Nurse\",\n    account: 2018785545,\n  },\n  {\n    id: 3,\n    lastName: \"Lannister\",\n    account: 2018785545,\n    roleName: \"role 1\",\n    bank: \"Kuda MFB\",\n    entryDate: \"July 17, 2021\",\n    name: \"Heala\",\n    firstName: \"Jaime\",\n    planName: \"Plan 1\",\n    category: \"HCP\",\n    amount: \"₦ 10,000\",\n    status: \"inactive\",\n    medical: 123445,\n    email: \"sule@gmail.com\",\n    availableTime: \"10:00AM - 3:30PM\",\n    time: \"10:00AM\",\n    subject: \"Appreciation message to Heala  team\",\n    specialization: \"Dentistry\",\n    description: \"This is the decription regarding this particular plan\",\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\n    data: [\"create\", \"read\", \"update\", \"delete\"],\n    type: \"Nurse\",\n  },\n  {\n    id: 4,\n    lastName: \"Stark\",\n    entryDate: \"July 17, 2021\",\n    roleName: \"role 1\",\n    firstName: \"Arya\",\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\n    category: \"HCP\",\n    amount: \"₦ 10,000\",\n    email: \"sule@gmail.com\",\n    time: \"10:00AM\",\n    planName: \"Plan 1\",\n    bank: \"Kuda MFB\",\n    availableTime: \"10:00AM - 3:30PM\",\n    medical: 123445,\n    type: \"Doctor\",\n    subject: \"Appreciation message to Heala  team\",\n    status: \"active\",\n    specialization: \"Dentistry\",\n    description: \"This is the decription regarding this particular plan\",\n    data: [\"create\", \"read\", \"update\", \"delete\"],\n    account: 2018785545,\n  },\n  {\n    id: 5,\n    lastName: \"Targaryen\",\n    entryDate: \"July 17, 2021\",\n    firstName: \"Daenerys\",\n    category: \"HSP\",\n    medical: 123445,\n    status: \"active\",\n    bank: \"Kuda MFB\",\n    amount: \"₦ 10,000\",\n    roleName: \"role 1\",\n    account: 2018785545,\n    planName: \"Plan 1\",\n    email: \"sule@gmail.com\",\n    subject: \"Appreciation message to Heala  team\",\n    time: \"10:00AM\",\n    specialization: \"Dentistry\",\n    availableTime: \"10:00AM - 3:30PM\",\n    description: \"This is the decription regarding this particular plan\",\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\n    data: [\"create\", \"read\", \"update\", \"delete\"],\n    type: \"Doctor\",\n  },\n  {\n    id: 6,\n    lastName: \"Melisandre\",\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\n    entryDate: \"July 17, 2021\",\n    roleName: \"role 1\",\n    data: [\"create\", \"read\", \"update\", \"delete\"],\n    firstName: null,\n    status: \"active\",\n    medical: 123445,\n    account: 2018785545,\n    bank: \"Kuda MFB\",\n    subject: \"Appreciation message to Heala  team\",\n    category: \"User\",\n    amount: \"₦ 10,000\",\n    email: \"sule@gmail.com\",\n    time: \"10:00AM\",\n    planName: \"Plan 1\",\n    specialization: \"Dentistry\",\n    description: \"This is the decription regarding this particular plan\",\n    type: \"Nurse\",\n  },\n  {\n    id: 7,\n    lastName: \"Clifford\",\n    entryDate: \"July 17, 2021\",\n    medical: 123445,\n    firstName: \"Ferrara\",\n    roleName: \"role 1\",\n    subject: \"Appreciation message to Heala  team\",\n    category: \"HCP\",\n    status: \"active\",\n    planName: \"Plan 1\",\n    amount: \"₦ 10,000\",\n    bank: \"Kuda MFB\",\n    email: \"sule@gmail.com\",\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\n    data: [\"create\", \"read\", \"update\", \"delete\"],\n    time: \"10:00AM\",\n    specialization: \"Dentistry\",\n    availableTime: \"10:00AM - 3:30PM\",\n    description: \"This is the decription regarding this particular plan\",\n    type: \"Nurse\",\n    account: 2018785545,\n  },\n  {\n    id: 9,\n    lastName: \"Roxie\",\n    entryDate: \"July 17, 2021\",\n    roleName: \"role 1\",\n    firstName: \"Harvey\",\n    category: \"HCP\",\n    data: [\"create\", \"read\", \"update\", \"delete\"],\n    medical: 123445,\n    subject: \"Appreciation message to Heala  team\",\n    status: \"active\",\n    planName: \"Plan 1\",\n    bank: \"Kuda MFB\",\n    amount: \"₦ 10,000\",\n    email: \"sule@gmail.com\",\n    time: \"10:00AM\",\n    specialization: \"Dentistry\",\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\n    availableTime: \"10:00AM - 3:30PM\",\n    description: \"This is the decription regarding this particular plan\",\n    type: \"Nurse\",\n    account: 2018785545,\n  },\n];\nconst ReferralDiv = Styled.div`\n& div{\n  width: 6.2rem !important;\n  padding:0;\n  margin-right:0 !important;\n  padding-left: 1rem !important;\n  background:#ECF6F3;\n  a{\n  width: 4.2rem!important;\n  font-size:1.4rem;\n  color:#49AA8B;\n  line-Height:2.1rem;\n  height:2.2rem;\n  }\n}`;\n\nconst SubscriptionDiv = Styled.div`\n& div{\n  width: 10.1rem !important;\n  padding: .8rem 1rem !important;\n  margin-right:0 !important;\n  padding-left: 1rem !important;\n  border-radius: 2rem !important;\n  background: #ECF6F3;\n  height:3.8rem;\n  \n  a{\n    font-weight:500;\n  font-size:1.4rem;\n  color: #3EA584;\n  line-Height:2.1rem;\n  // height:2.2rem;\n  }\n}\n`;\nconst SubscriptionDelete = Styled.div`\n& div{\n  width: 11.8rem !important;\n  padding: .8rem 1rem !important;\n  border-color:#FEF8F7;\n  border-radius: 2rem !important;\n  background: #FEF8F7;\n  height:3.8rem;\n\n\n  \n  a{\n  font-weight:500;\n  font-size:1.4rem;\n  color: #ED3237;\n  height:2.2rem;\n  font-family: Circular Std;\n  font-style: normal;\n  letter-spacing: 0px;\n  text-align: center;\n  width:10.1rem;\n  margin-right:0\n  }\n}\n`;\n\nconst Div2 = Styled.div`\nwidth: 11rem;\nheight: 3rem;\nmargin: auto 0;\nborder-radius: 2rem;\nborder: 1px solid #F2F2F2;\ndisplay: grid;\nplace-content: center;\ncolor:#757886;\n   & a{\n    text-decoration:none;\n    font-size: 1.4rem;\n    width:6.6rem;\n    height:2.2rem\n    margin:0;\n    line-Height:2.1rem;\n    color:inherit;\n    margin-right:1.25rem\n   } \n   &:hover{\n     cursor:pointer\n   }\n`;\nconst Div = Styled.div`\nwidth: 17.9rem;\nheight: 3rem;\nmargin: auto 0;\nborder-radius: 2rem;\nborder: 1px solid #F2F2F2;\ndisplay: grid;\nplace-content: center;\n   & a{\n    padding: .4rem 1rem;\n    \n   } \n   &:hover{\n     cursor:pointer\n   }\n`;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/hooks/useCopy.js",["1382"],"import React from \"react\";\nimport t from \"prop-types\";\nimport { useSnackbar } from \"notistack\";\nimport { Typography } from \"@mui/material\";\n\nexport const useCopy = () => {\n  const { enqueueSnackbar } = useSnackbar();\n\n  const copyToClipBoard = (text, name) => {\n    try {\n      navigator.clipboard.writeText(text);\n      enqueueSnackbar(\n        <Typography\n          style={{\n            fontSize: \"1.2rem\",\n            color: \"ffffff\",\n            fontWeight: \"bold\",\n            cursor: \"pointer\",\n          }}\n        >{`${name ? name : \"Text\"} copied!!!`}</Typography>,\n        {\n          variant: \"success\",\n          preventDuplicate: true,\n          anchorOrigin: {\n            horizontal: \"right\",\n            vertical: \"top\",\n          },\n        }\n      );\n    } catch (error) {\n      console.log(error);\n      enqueueSnackbar(\n        <Typography\n          style={{\n            fontSize: \"1.2rem\",\n            color: \"ffffff\",\n            fontWeight: \"bold\",\n            cursor: \"pointer\",\n          }}\n        >{`Couldn't copy ${name ? name : \"Text\"}!!!`}</Typography>,\n        {\n          variant: \"error\",\n          preventDuplicate: true,\n          anchorOrigin: {\n            horizontal: \"right\",\n            vertical: \"top\",\n          },\n        }\n      );\n    }\n  };\n\n  return {\n    copyToClipBoard,\n  };\n};\n\nuseCopy.PropTypes = {\n  text: t.string,\n  name: t.string,\n};\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/TestList.js",["1383"],"import React, { useState, useEffect } from \"react\";\nimport { useSnackbar } from \"notistack\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { NoData, EmptyTable } from \"components/layouts\";\n\nimport useAlert from \"hooks/useAlert\";\nimport TableLayout from \"components/layouts/TableLayout\";\nimport { TestListRow } from \"components/Rows/TestListRow\";\nimport ConfirmModal from \"components/modals/ConfirmModal\";\nimport { AddTestForm } from \"components/Forms/AddTestForm\";\nimport EnhancedTable from \"components/layouts/EnhancedTable\";\nimport { EditTestForm } from \"components/Forms/EditTestForm\";\nimport ConfirmDelete from \"components/modals/DeleteOrDisable\";\nimport UploadListModal from \"components/modals/UploadListModal\";\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\nimport { deleteItem, uploadFile } from \"helpers/filterHelperFunctions\";\nimport { testTableHeadCells } from \"components/Utilities/tableHeaders\";\nimport { DELETE_TEST, getListOfLabTests } from \"components/graphQL/useQuery\";\nimport { uploadTests } from \"components/graphQL/Mutation\";\n\nconst TestList = () => {\n  const theme = useTheme();\n  const { enqueueSnackbar } = useSnackbar();\n  const [list, setList] = useState([]);\n  const [delete_test] = useLazyQuery(DELETE_TEST);\n  const { displayAlert, getErrorMsg } = useAlert();\n  const [uploadTestFile] = useMutation(uploadTests);\n  const [editData, setEditData] = React.useState(null);\n  const [isDeleting, setIsDeleting] = React.useState({});\n  const [addTestModal, setAddTestModal] = React.useState(false);\n  const [confirmModal, setConfirmModal] = React.useState(false);\n  const [testToDelete, setTestToDelete] = React.useState(null);\n  const [editTestModal, setEditTestModal] = React.useState(false);\n  const [uploadListModal, setUploadListModal] = React.useState(false);\n  const [confirmDeleteModal, setConfirmDeleteModal] = React.useState(false);\n  const [fetchLabTestList, { loading, error, data, refetch }] =\n    useLazyQuery(getListOfLabTests);\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n  };\n\n  useEffect(() => {\n    fetchLabTestList();\n  }, [fetchLabTestList]);\n\n  useEffect(() => {\n    if (data) {\n      setList(data?.getDiagnosticLabTests?.data);\n    }\n  }, [data]);\n\n  useEffect(() => {\n    if (data) {\n      (data?.getDiagnosticLabTests?.data || []).map((test) => {\n        const newIsDeleting = isDeleting;\n        setIsDeleting({ [test?._id]: false, ...newIsDeleting });\n        return null;\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  return (\n    <>\n      <Grid\n        container\n        direction=\"column\"\n        gap={2}\n        flexWrap=\"nowrap\"\n        height=\"100%\"\n      >\n        <Grid item container justifyContent=\"flex-end\">\n          {/* === ADD BUTTONS === */}\n          <Grid item>\n            <Grid container>\n              <CustomButton\n                endIcon={<AddIcon />}\n                title=\"Add Test\"\n                type={buttonType}\n                onClick={() => setAddTestModal(true)}\n                sx={{ marginRight: \"1rem\" }}\n              />\n              <CustomButton\n                endIcon={<AddIcon />}\n                title=\"Upload list\"\n                type={buttonType}\n                onClick={() => setConfirmModal(true)}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <TableLayout>\n          {error ? (\n            <NoData error={error} />\n          ) : loading ? (\n            <Loader />\n          ) : !list ? (\n            <EmptyTable\n              headCells={testTableHeadCells}\n              paginationLabel=\"Test per page\"\n            />\n          ) : list.length > 0 ? (\n            /* ================= TESTS TABLE ================= */\n            <Grid item container height=\"100%\" direction=\"column\">\n              <EnhancedTable\n                headCells={testTableHeadCells}\n                rows={list}\n                hasCheckbox={false}\n                fetchData={fetchLabTestList}\n                hasPagination={false}\n              >\n                {list.map((row, index) => {\n                  const { _id } = row;\n                  const labelId = `enhanced-table-checkbox-${index}`;\n                  return (\n                    <TestListRow\n                      key={_id}\n                      data={row}\n                      labelId={labelId}\n                      setEditData={setEditData}\n                      isDeleting={isDeleting[_id]}\n                      setTestIdToDelete={setTestToDelete}\n                      openEditModal={() => setEditTestModal(true)}\n                      openConfirmModal={() => setConfirmDeleteModal(true)}\n                    />\n                  );\n                })}\n              </EnhancedTable>\n            </Grid>\n          ) : (\n            <EmptyTable\n              headCells={testTableHeadCells}\n              paginationLabel=\"Patients per page\"\n            />\n          )}\n        </TableLayout>\n\n        {/* ==== ADD TEST MODAL ==== */}\n        <Modals\n          isOpen={addTestModal}\n          title=\"Add Test\"\n          rowSpacing={5}\n          height=\"auto\"\n          handleClose={() => setAddTestModal(false)}\n        >\n          <AddTestForm\n            onSuccess={() => {\n              setAddTestModal(false);\n              refetch();\n            }}\n          />\n        </Modals>\n\n        {/* ==== EDIT TEST MODAL ==== */}\n        <Modals\n          isOpen={editTestModal}\n          title=\"Edit Test\"\n          rowSpacing={5}\n          height=\"auto\"\n          handleClose={() => setEditTestModal(false)}\n        >\n          <EditTestForm\n            data={editData}\n            onSuccess={() => {\n              setEditTestModal(false);\n              refetch();\n            }}\n          />\n        </Modals>\n\n        {/* ======== CONFIRM UPLOAD TEST MODAL ========= */}\n        <ConfirmModal\n          open={confirmModal}\n          setOpen={setConfirmModal}\n          title=\"Confirm Upload Tests\"\n          confirmationMsg=\"Uploading a new test JSON file will overwrite the current file.\"\n          onConfirm={() => {\n            setUploadListModal(false);\n            setUploadListModal(true);\n          }}\n          onCancel={() => {\n            setUploadListModal(false);\n          }}\n        />\n\n        {/*  ======= CONFIRM DELETE ======== */}\n        <ConfirmDelete\n          open={confirmDeleteModal}\n          setOpen={setConfirmDeleteModal}\n          title=\"Delete Test\"\n          btnValue=\"delete\"\n          onConfirm={() => {\n            deleteItem(\n              delete_test,\n              testToDelete,\n              setTestToDelete,\n              refetch,\n              Typography,\n              enqueueSnackbar,\n              setIsDeleting,\n              isDeleting\n            );\n            setUploadListModal(false);\n          }}\n          confirmationMsg=\"Are you sure you want to delete\"\n          onCancel={() => {\n            setUploadListModal(false);\n          }}\n        />\n\n        {/* ==== UPLOAD TEST MODAL ==== */}\n        <UploadListModal\n          isOpen={uploadListModal}\n          setIsOpen={setUploadListModal}\n          handleSubmit={async (values) => {\n            const throwError = () =>\n              displayAlert(\n                \"error\",\n                \"Something went wrong while uploading file.\"\n              );\n            try {\n              const { testFile: file } = values;\n              const fileUrl = await uploadFile(file);\n\n              if (typeof fileUrl !== \"string\") {\n                throwError();\n                return;\n              }\n\n              const { data } = await uploadTestFile({\n                variables: {\n                  fileUrl: fileUrl,\n                },\n              });\n\n              if (!data) {\n                throwError();\n                return;\n              }\n\n              const testAdded =\n                data?.uploadDiagnosticLabTests?.result?.totalInserted;\n              displayAlert(\"success\", `${testAdded && testAdded} Tests Added.`);\n              setUploadListModal(false);\n            } catch (error) {\n              console.error(\"Error from onSubmit Test JSON file\", error);\n              const errMsg = getErrorMsg(error);\n              displayAlert(\"error\", errMsg);\n            }\n          }}\n        />\n      </Grid>\n    </>\n  );\n};\n\nexport default TestList;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/routes/PrivateRoute.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Hmo.js",["1384","1385","1386"],"import React, { useEffect, useState } from \"react\";\nimport { Grid } from \"@mui/material\";\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\nimport { Loader } from \"components/Utilities\";\nimport { NoData } from \"components/layouts\";\nimport { addHMOInitialValues } from \"helpers/mockData\";\nimport { getProviders } from \"components/graphQL/useQuery\";\nimport DeletePartner from \"components/modals/DeleteOrDisable\";\nimport AddEditHMOModal from \"components/modals/AddEditHMOModal\";\nimport InfoCard, { AddHmoCard } from \"components/cards/InfoCard\";\nimport useAlert from \"hooks/useAlert\";\nimport { deletProvider } from \"components/graphQL/Mutation\";\n\nconst Hmo = () => {\n  const { displayAlert, getErrorMsg } = useAlert();\n  const [hmos, setHmos] = useState([]);\n  const [deleteHMO] = useMutation(deletProvider);\n  const [addModal, setAddModal] = useState(false);\n  const [editModal, setEditModal] = useState(false);\n  const [editHMOData, setEditHMOData] = useState({});\n  const [deleteModal, setDeleteModal] = useState(false);\n  const [hmoIdToDelete, setHmoIdToDelete] = useState(null);\n  const [fetchAllHMO, { error, loading, refetch }] = useLazyQuery(\n    getProviders,\n    {\n      variables: { userTypeId: \"61ed2b68e6091400135e3dba\" },\n    }\n  );\n\n  const refetchData = () => {\n    refetch()\n      .then(({ data }) => {\n        setHmos(data?.getProviders?.provider);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  useEffect(() => {\n    fetchAllHMO()\n      .then(({ data }) => {\n        setHmos(data?.getProviders?.provider);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  }, [fetchAllHMO]);\n\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error} />;\n  return (\n    <Grid>\n      <Grid container spacing={2} flexWrap=\"wrap\">\n        {hmos.map((hmo, idx) => {\n          const {\n            _id,\n            name,\n            icon,\n            address,\n            phone,\n            email,\n            iconAlt,\n            userTypeId,\n          } = hmo;\n\n          const editInitialValues = {\n            id: _id,\n            name: name,\n            icon: icon,\n            address: address || \"\",\n            phone: phone || \"\",\n            email: email || \"\",\n            iconAlt: iconAlt || \"\",\n            userTypeId: userTypeId || \"61ed2b68e6091400135e3dba\",\n          };\n          return (\n            <Grid key={idx} item>\n              <InfoCard\n                imgUrl={hmo?.icon}\n                imgAlt={hmo?.name}\n                linkTo={`hmo/${hmo?._id}`}\n                subTitle={\"15 Enrollees\"}\n                title={hmo?.name}\n                onClickEdit={() => {\n                  setEditHMOData(editInitialValues);\n                  setEditModal(true);\n                }}\n                onClickDelete={() => {\n                  setHmoIdToDelete(_id);\n                  setDeleteModal(true);\n                }}\n              />\n            </Grid>\n          );\n        })}\n        <Grid item>\n          <button\n            sx={{\n              cursor: \"pointer\",\n              border: \"none\",\n              background: \"transparent\",\n            }}\n            onClick={() => setAddModal(true)}\n          >\n            <AddHmoCard />\n          </button>\n        </Grid>\n      </Grid>\n      <Grid>\n        {/* CONFIRM DELETE MODAL */}\n        <DeletePartner\n          open={deleteModal}\n          setOpen={setDeleteModal}\n          title=\"Delete HMO\"\n          btnValue=\"delete\"\n          onConfirm={async () => {\n            setDeleteModal(false);\n            deleteHMO({\n              variables: {\n                id: hmoIdToDelete,\n              },\n            })\n              .then(({ data }) => {\n                if (data) {\n                  displayAlert(\"success\", \"HMO deleted successfully\");\n                  refetchData();\n                }\n              })\n              .catch((error) => {\n                console.error(error);\n                const errMsg = getErrorMsg(error);\n                displayAlert(\"error\", errMsg);\n              });\n          }}\n          confirmationMsg=\"delete HMO\"\n          onCancel={() => {\n            setHmoIdToDelete(null);\n          }}\n        />\n\n        {/* ADD MODAL */}\n        <AddEditHMOModal\n          isOpen={addModal}\n          setIsOpen={setAddModal}\n          type=\"add\"\n          initialValues={addHMOInitialValues}\n          onSuccess={() => {\n            setAddModal(false);\n            refetchData();\n          }}\n        />\n\n        {/* EDIT MODAL */}\n        <AddEditHMOModal\n          isOpen={editModal}\n          setIsOpen={setEditModal}\n          type=\"edit\"\n          initialValues={editHMOData}\n          onSuccess={() => {\n            setEditModal(false);\n            refetchData();\n          }}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default Hmo;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/HMOIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/LogoutIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/LabelIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/tableData.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/SearchIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/helpers/asideMenus.js",["1387","1388","1389","1390"],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/BellIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/helpers/breadcrumb.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/UploadListModal.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Rows/TestListRow.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/EditTestForm.js",["1391","1392","1393","1394","1395"],"import React from \"react\";\nimport t from \"prop-types\";\nimport { Formik, Form } from \"formik\";\nimport { useSnackbar } from \"notistack\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { useMutation } from \"@apollo/client\";\nimport { CustomButton } from \"components/Utilities\";\nimport { FormikControl } from \"components/validation\";\nimport { UPDATE_TEST } from \"components/graphQL/Mutation\";\nimport { editTestValidation } from \"helpers/validationSchemas\";\nimport { handleError, showSuccessMsg } from \"helpers/filterHelperFunctions\";\nimport { CustomSelect } from \"components/validation/Select\";\n\nexport const EditTestForm = ({ onSuccess, data }) => {\n  const theme = useTheme();\n  const { enqueueSnackbar } = useSnackbar();\n  const [updateTest] = useMutation(UPDATE_TEST);\n  const [value, setValue] = React.useState(\"Hours\");\n  const tatArr = data.tat.split(\" \");\n  const initialValues = {\n    id: data?._id,\n    name: data?.name,\n    price: data.price,\n    tatNumber: tatArr[0],\n    tatDuration: tatArr[1],\n  };\n\n  const onSubmit = async (values) => {\n    try {\n      const { id, name, price, tatNumber, tatDuration } = values;\n      const variables = {\n        id: id,\n        name: name,\n        price: Number(price),\n        tat: `${tatNumber} ${tatDuration}`,\n      };\n\n      const { data } = await updateTest({\n        variables: variables,\n      });\n      if (data) {\n        showSuccessMsg(enqueueSnackbar, Typography, \"Test Updated.\");\n        onSuccess();\n      }\n    } catch (err) {\n      handleError(err, enqueueSnackbar);\n      console.log(\"failed to update test\", err);\n    }\n  };\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={onSubmit}\n      validationSchema={editTestValidation}\n      validateOnChange={false}\n      validateOnMount={false}\n      validateOnBlur={false}\n    >\n      {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\n        /* setValues(initialValues); */\n        return (\n          <Form style={{ marginTop: \"1rem\" }}>\n            <Grid container direction=\"column\" gap={2}>\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl control=\"input\" id=\"id\" name=\"id\" hidden />\n              </Grid>\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"input\"\n                  label=\"Test Name\"\n                  id=\"name\"\n                  name=\"name\"\n                  placeholder=\"Enter Test name\"\n                />\n              </Grid>\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"input\"\n                  label=\"Test price\"\n                  id=\"price\"\n                  name=\"price\"\n                  placeholder=\"Enter Test price\"\n                />\n              </Grid>\n              <Grid item>\n                <Grid container spacing={2}>\n                  <Grid item flexGrow={1}>\n                    <FormikControl\n                      control=\"input\"\n                      label=\"Turnaround time (TAT)\"\n                      id=\"tat\"\n                      name=\"tatNumber\"\n                      placeholder=\"48\"\n                    />\n                  </Grid>\n                  <Grid item sx={{ display: \"flex\", alignItems: \"flex-end\" }}>\n                    <CustomSelect\n                      Control\n                      name=\"tatDuration\"\n                      disable={false}\n                      value={value}\n                      options={[\n                        { key: \"Minutes\", value: \"Minutes\" },\n                        { key: \"Hours\", value: \"Hours\" },\n                        { key: \"Days\", value: \"Days\" },\n                      ]}\n                      onChange={(e) => {\n                        setValue(e?.target?.value);\n                      }}\n                    />\n                  </Grid>\n                </Grid>\n              </Grid>\n              <Grid item container>\n                <CustomButton\n                  title=\"Update Test\"\n                  width=\"100%\"\n                  type={buttonType}\n                  isSubmitting={isSubmitting}\n                  disabled={isSubmitting}\n                />\n              </Grid>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nEditTestForm.propTypes = {\n  onSuccess: t.func.isRequired,\n  data: t.object,\n};\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/AddTestForm.js",["1396","1397","1398","1399"],"import React from \"react\";\nimport t from \"prop-types\";\nimport { Formik, Form } from \"formik\";\nimport { useSnackbar } from \"notistack\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { useMutation } from \"@apollo/client\";\nimport { CustomButton } from \"components/Utilities\";\nimport { FormikControl } from \"components/validation\";\nimport { addTest } from \"components/graphQL/Mutation\";\nimport { addTestValidation } from \"helpers/validationSchemas\";\nimport {\n  handleError,\n  showSuccessMsg,\n} from \"../../helpers/filterHelperFunctions\";\n\nexport const AddTestForm = ({ onSuccess }) => {\n  const theme = useTheme();\n  const { enqueueSnackbar } = useSnackbar();\n  const [addSingleTest] = useMutation(addTest);\n\n  const addTestIntialValues = {\n    name: \"\",\n    price: null,\n    tat: \"\",\n  };\n\n  const onSubmit = async (values) => {\n    try {\n      const { name, price, tat } = values;\n      const variables = {\n        name: name,\n        price: Number(price),\n        tat: parseInt(tat) > 1 ? `${tat} Hours` : `${tat} Hour`,\n      };\n      console.log(\"add test values\", variables);\n      const { data } = await addSingleTest({\n        variables: variables,\n      });\n      if (data) {\n        showSuccessMsg(enqueueSnackbar, Typography, \"Test added.\");\n        onSuccess();\n      }\n    } catch (err) {\n      handleError(err, enqueueSnackbar);\n      console.log(\"failed to add test\", err);\n    }\n  };\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n  };\n\n  return (\n    <Formik\n      initialValues={addTestIntialValues}\n      onSubmit={onSubmit}\n      validationSchema={addTestValidation}\n      validateOnChange={false}\n      validateOnMount={false}\n      validateOnBlur={false}\n    >\n      {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\n        return (\n          <Form style={{ marginTop: \"1rem\" }}>\n            <Grid container direction=\"column\" gap={2}>\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"input\"\n                  label=\"Test Name\"\n                  id=\"name\"\n                  name=\"name\"\n                  placeholder=\"Enter Test name\"\n                />\n              </Grid>\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"input\"\n                  label=\"Test price\"\n                  id=\"price\"\n                  name=\"price\"\n                  placeholder=\"Enter Test price\"\n                />\n              </Grid>\n              <Grid item>\n                <FormikControl\n                  control=\"input\"\n                  label=\"Turnaround time (TAT) - (hours)\"\n                  id=\"tat\"\n                  name=\"tat\"\n                  placeholder=\"48\"\n                />\n              </Grid>\n              <Grid item container>\n                <CustomButton\n                  title=\"Add Test\"\n                  width=\"100%\"\n                  type={buttonType}\n                  isSubmitting={isSubmitting}\n                  disabled={!dirty || !isValid || isSubmitting}\n                />\n              </Grid>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nAddTestForm.propTypes = {\n  onSuccess: t.func,\n};\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/AddEditHMOModal.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/EmailIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/PartnersIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/DoctorsIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/PatientsIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/DashboardIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/MessagesIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/UploadListForm.js",["1400","1401"],"import React from \"react\";\nimport t from \"prop-types\";\nimport { Formik, Form } from \"formik\";\nimport { Alert, Grid } from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\n\nimport DragAndDrop from \"./DragAndDrop\";\nimport { CustomButton } from \"components/Utilities\";\nimport { uploadFileValidationSchema } from \"helpers/validationSchemas\";\n\nexport const UploadListForm = ({ onSubmit, valSchema }) => {\n  const theme = useTheme();\n  const validationSchema = valSchema ? valSchema : uploadFileValidationSchema;\n\n  const addTestIntialValues = {\n    testFile: null,\n  };\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n  };\n\n  return (\n    <Formik\n      initialValues={addTestIntialValues}\n      onSubmit={(values) => onSubmit(values)}\n      validationSchema={validationSchema}\n      validateOnChange={true}\n      validateOnMount={false}\n      validateOnBlur={true}\n    >\n      {({ isSubmitting, dirty, isValid, setFieldValue, setErrors }) => {\n        return (\n          <Form style={{ marginTop: \"1rem\" }}>\n            <Alert severity=\"warning\" sx={{ margin: \"1rem 0rem\" }}>\n              <strong>CAUTION - </strong> Uploading a new file may overwrite the\n              current file.\n            </Alert>\n            <Grid container direction=\"column\" space={2}>\n              <Grid item>\n                <DragAndDrop\n                  name=\"testFile\"\n                  maxFiles={1}\n                  hasPreview={false}\n                  uploadFunc={(file) => {\n                    setErrors({});\n                    setFieldValue(\"testFile\", file);\n                  }}\n                />\n              </Grid>\n              <Grid item>\n                <CustomButton\n                  title=\"Upload file\"\n                  width=\"100%\"\n                  type={buttonType}\n                  isSubmitting={isSubmitting}\n                  disabled={isSubmitting}\n                />\n              </Grid>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nUploadListForm.propTypes = {\n  onSubmit: t.func.isRequired,\n  valSchema: t.object,\n};\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/AddEditHMOForm.js",["1402","1403","1404","1405","1406"],"import React from \"react\";\nimport t from \"prop-types\";\nimport { Formik, Form } from \"formik\";\nimport { Grid } from \"@mui/material\";\nimport { useTheme } from \"@mui/material/styles\";\n\nimport useAlert from \"hooks/useAlert\";\nimport { useMutation } from \"@apollo/client\";\nimport { CustomButton } from \"components/Utilities\";\nimport { FormikControl } from \"components/validation\";\nimport { removeEmptyStringValues } from \"helpers/func\";\nimport { hmoValidationSchema } from \"helpers/validationSchemas\";\nimport { addProvider, editprovider } from \"components/graphQL/Mutation\";\n\nconst AddEditHMOForm = ({ type, initialValues, onSuccess }) => {\n  const theme = useTheme();\n  const { displayAlert, getErrorMsg } = useAlert();\n  const [createProvider] = useMutation(addProvider);\n  const [updateProvider] = useMutation(editprovider);\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n  };\n\n  const onCreateProvider = async (values) => {\n    const variables = removeEmptyStringValues(values);\n    try {\n      const response = await createProvider({\n        variables: variables,\n      });\n      if (response.data) {\n        displayAlert(\"success\", \"HMO added succesfully\");\n        onSuccess();\n      }\n    } catch (error) {\n      console.error(error);\n      const errorMsg = getErrorMsg(error);\n      displayAlert(\"error\", errorMsg);\n    }\n  };\n\n  const onUpdateProvider = async (values) => {\n    const variables = removeEmptyStringValues(values);\n    try {\n      const response = await updateProvider({\n        variables: variables,\n      });\n      if (response.data) {\n        displayAlert(\"success\", \"HMO updated succesfully\");\n        onSuccess();\n      }\n    } catch (error) {\n      console.error(error);\n      const errorMsg = getErrorMsg(error);\n      displayAlert(\"error\", errorMsg);\n    }\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={(values) =>\n        type === \"add\" ? onCreateProvider(values) : onUpdateProvider(values)\n      }\n      validationSchema={hmoValidationSchema}\n      validateOnChange={true}\n      validateOnMount={false}\n      validateOnBlur={true}\n    >\n      {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\n        return (\n          <Form style={{ marginTop: \"1rem\" }}>\n            <Grid container direction=\"column\" gap={2}>\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl control=\"input\" id=\"id\" name=\"id\" hidden />\n              </Grid>\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"input\"\n                  label=\"HMO Name\"\n                  id=\"name\"\n                  name=\"name\"\n                  placeholder=\"Enter HMO name\"\n                />\n              </Grid>\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"input\"\n                  type=\"email\"\n                  label=\"Email\"\n                  id=\"email\"\n                  name=\"email\"\n                  placeholder=\"Enter email address\"\n                />\n              </Grid>\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"input\"\n                  label=\"Phone number\"\n                  id=\"phone_number\"\n                  name=\"phone\"\n                  placeholder=\"Enter phone number\"\n                />\n              </Grid>\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"input\"\n                  label=\"Address\"\n                  id=\"address\"\n                  name=\"address\"\n                  placeholder=\"Address\"\n                />\n              </Grid>\n\n              {/* <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"select\"\n                  options={[{ key: \"Plan\", value: \"\" }]}\n                  placeholder=\"Select plan\"\n                  name=\"planId\"\n                  label=\"Plan\"\n                />\n              </Grid> */}\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"file\"\n                  label=\"Upload your logo\"\n                  id=\"logo\"\n                  name=\"icon\"\n                  setFieldValue={setFieldValue}\n                />\n              </Grid>\n              <Grid item container direction=\"column\" gap={1}>\n                <FormikControl\n                  control=\"file\"\n                  label=\"Upload your alt logo\"\n                  id=\"logo\"\n                  name=\"iconAlt\"\n                  setFieldValue={setFieldValue}\n                />\n              </Grid>\n              <Grid item container>\n                <CustomButton\n                  title={type === \"edit\" ? \"Update HMO\" : \"Add HMO\"}\n                  width=\"100%\"\n                  type={buttonType}\n                  isSubmitting={isSubmitting}\n                  disabled={isSubmitting}\n                />\n              </Grid>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nAddEditHMOForm.propTypes = {\n  onSuccess: t.func.isRequired,\n  initialValues: t.object.isRequired,\n  type: t.oneOf([\"add\", \"edit\"]).isRequired,\n};\n\nexport default AddEditHMOForm;\n",{"ruleId":"1407","severity":1,"message":"1408","line":61,"column":3,"nodeType":"1409","messageId":"1410","endLine":61,"endColumn":12},{"ruleId":"1411","severity":1,"message":"1412","line":61,"column":9,"nodeType":"1413","messageId":"1414","endLine":61,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1412","line":133,"column":17,"nodeType":"1413","messageId":"1414","endLine":133,"endColumn":30},{"ruleId":"1411","severity":1,"message":"1412","line":194,"column":17,"nodeType":"1413","messageId":"1414","endLine":194,"endColumn":30},{"ruleId":"1411","severity":1,"message":"1412","line":44,"column":7,"nodeType":"1413","messageId":"1414","endLine":44,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":68,"column":7,"nodeType":"1413","messageId":"1414","endLine":68,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1415","line":89,"column":25,"nodeType":"1409","messageId":"1410","endLine":89,"endColumn":30},{"ruleId":"1407","severity":1,"message":"1416","line":89,"column":32,"nodeType":"1409","messageId":"1410","endLine":89,"endColumn":39},{"ruleId":"1407","severity":1,"message":"1417","line":89,"column":41,"nodeType":"1409","messageId":"1410","endLine":89,"endColumn":54},{"ruleId":"1407","severity":1,"message":"1418","line":89,"column":56,"nodeType":"1409","messageId":"1410","endLine":89,"endColumn":65},{"ruleId":"1411","severity":1,"message":"1412","line":44,"column":7,"nodeType":"1413","messageId":"1414","endLine":44,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":68,"column":7,"nodeType":"1413","messageId":"1414","endLine":68,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1415","line":89,"column":25,"nodeType":"1409","messageId":"1410","endLine":89,"endColumn":30},{"ruleId":"1407","severity":1,"message":"1416","line":89,"column":32,"nodeType":"1409","messageId":"1410","endLine":89,"endColumn":39},{"ruleId":"1407","severity":1,"message":"1417","line":89,"column":41,"nodeType":"1409","messageId":"1410","endLine":89,"endColumn":54},{"ruleId":"1407","severity":1,"message":"1418","line":89,"column":56,"nodeType":"1409","messageId":"1410","endLine":89,"endColumn":65},{"ruleId":"1411","severity":1,"message":"1412","line":41,"column":9,"nodeType":"1413","messageId":"1414","endLine":41,"endColumn":22},{"ruleId":"1407","severity":1,"message":"1415","line":54,"column":25,"nodeType":"1409","messageId":"1410","endLine":54,"endColumn":30},{"ruleId":"1407","severity":1,"message":"1416","line":54,"column":32,"nodeType":"1409","messageId":"1410","endLine":54,"endColumn":39},{"ruleId":"1419","severity":1,"message":"1420","line":25,"column":3,"nodeType":"1421","messageId":"1422","endLine":25,"endColumn":16},{"ruleId":"1423","severity":1,"message":"1424","line":8,"column":1,"nodeType":"1425","messageId":"1426","endLine":8,"endColumn":48},{"ruleId":"1411","severity":1,"message":"1412","line":82,"column":9,"nodeType":"1413","messageId":"1414","endLine":82,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1412","line":93,"column":9,"nodeType":"1413","messageId":"1414","endLine":93,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1412","line":242,"column":13,"nodeType":"1413","messageId":"1414","endLine":242,"endColumn":26},{"ruleId":"1419","severity":1,"message":"1427","line":33,"column":26,"nodeType":"1421","messageId":"1422","endLine":33,"endColumn":36},{"ruleId":"1419","severity":1,"message":"1428","line":44,"column":11,"nodeType":"1421","messageId":"1422","endLine":44,"endColumn":21},{"ruleId":"1419","severity":1,"message":"1429","line":44,"column":23,"nodeType":"1421","messageId":"1422","endLine":44,"endColumn":30},{"ruleId":"1419","severity":1,"message":"1430","line":44,"column":32,"nodeType":"1421","messageId":"1422","endLine":44,"endColumn":36},{"ruleId":"1419","severity":1,"message":"1431","line":44,"column":38,"nodeType":"1421","messageId":"1422","endLine":44,"endColumn":45},{"ruleId":"1419","severity":1,"message":"1432","line":44,"column":47,"nodeType":"1421","messageId":"1422","endLine":44,"endColumn":56},{"ruleId":"1419","severity":1,"message":"1433","line":44,"column":58,"nodeType":"1421","messageId":"1422","endLine":44,"endColumn":70},{"ruleId":"1419","severity":1,"message":"1434","line":62,"column":21,"nodeType":"1409","messageId":"1422","endLine":62,"endColumn":29},{"ruleId":"1419","severity":1,"message":"1435","line":62,"column":30,"nodeType":"1409","messageId":"1422","endLine":62,"endColumn":34},{"ruleId":"1419","severity":1,"message":"1434","line":63,"column":24,"nodeType":"1409","messageId":"1422","endLine":63,"endColumn":32},{"ruleId":"1419","severity":1,"message":"1436","line":63,"column":33,"nodeType":"1409","messageId":"1422","endLine":63,"endColumn":41},{"ruleId":"1419","severity":1,"message":"1434","line":64,"column":13,"nodeType":"1409","messageId":"1422","endLine":64,"endColumn":21},{"ruleId":"1419","severity":1,"message":"1435","line":64,"column":22,"nodeType":"1409","messageId":"1422","endLine":64,"endColumn":26},{"ruleId":"1411","severity":1,"message":"1412","line":99,"column":7,"nodeType":"1413","messageId":"1414","endLine":99,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1437","line":127,"column":29,"nodeType":"1409","messageId":"1410","endLine":127,"endColumn":33},{"ruleId":"1407","severity":1,"message":"1437","line":128,"column":29,"nodeType":"1409","messageId":"1410","endLine":128,"endColumn":33},{"ruleId":"1411","severity":1,"message":"1412","line":36,"column":9,"nodeType":"1413","messageId":"1414","endLine":36,"endColumn":22},{"ruleId":"1407","severity":1,"message":"1438","line":41,"column":3,"nodeType":"1409","messageId":"1410","endLine":41,"endColumn":11},{"ruleId":"1407","severity":1,"message":"1439","line":42,"column":3,"nodeType":"1409","messageId":"1410","endLine":42,"endColumn":7},{"ruleId":"1407","severity":1,"message":"1440","line":44,"column":3,"nodeType":"1409","messageId":"1410","endLine":44,"endColumn":11},{"ruleId":"1407","severity":1,"message":"1441","line":45,"column":6,"nodeType":"1409","messageId":"1410","endLine":45,"endColumn":10},{"ruleId":"1411","severity":1,"message":"1412","line":51,"column":5,"nodeType":"1413","messageId":"1414","endLine":51,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":70,"column":7,"nodeType":"1413","messageId":"1414","endLine":70,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":84,"column":5,"nodeType":"1413","messageId":"1414","endLine":84,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":109,"column":5,"nodeType":"1413","messageId":"1414","endLine":109,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":157,"column":5,"nodeType":"1413","messageId":"1414","endLine":157,"endColumn":16},{"ruleId":"1411","severity":1,"message":"1412","line":236,"column":5,"nodeType":"1413","messageId":"1414","endLine":236,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":255,"column":5,"nodeType":"1413","messageId":"1414","endLine":255,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":284,"column":5,"nodeType":"1413","messageId":"1414","endLine":284,"endColumn":16},{"ruleId":"1411","severity":1,"message":"1412","line":312,"column":5,"nodeType":"1413","messageId":"1414","endLine":312,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":331,"column":5,"nodeType":"1413","messageId":"1414","endLine":331,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":377,"column":5,"nodeType":"1413","messageId":"1414","endLine":377,"endColumn":16},{"ruleId":"1411","severity":1,"message":"1412","line":395,"column":5,"nodeType":"1413","messageId":"1414","endLine":395,"endColumn":16},{"ruleId":"1411","severity":1,"message":"1412","line":410,"column":5,"nodeType":"1413","messageId":"1414","endLine":410,"endColumn":16},{"ruleId":"1411","severity":1,"message":"1412","line":52,"column":7,"nodeType":"1413","messageId":"1414","endLine":52,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":41,"column":5,"nodeType":"1413","messageId":"1414","endLine":41,"endColumn":16},{"ruleId":"1411","severity":1,"message":"1412","line":60,"column":5,"nodeType":"1413","messageId":"1414","endLine":60,"endColumn":16},{"ruleId":"1411","severity":1,"message":"1412","line":105,"column":5,"nodeType":"1413","messageId":"1414","endLine":105,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":116,"column":5,"nodeType":"1413","messageId":"1414","endLine":116,"endColumn":18},{"ruleId":"1419","severity":1,"message":"1442","line":18,"column":35,"nodeType":"1421","messageId":"1422","endLine":18,"endColumn":39},{"ruleId":"1411","severity":1,"message":"1412","line":45,"column":9,"nodeType":"1413","messageId":"1414","endLine":45,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1412","line":68,"column":7,"nodeType":"1413","messageId":"1414","endLine":68,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":89,"column":7,"nodeType":"1413","messageId":"1414","endLine":89,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1415","line":114,"column":25,"nodeType":"1409","messageId":"1410","endLine":114,"endColumn":30},{"ruleId":"1407","severity":1,"message":"1416","line":114,"column":32,"nodeType":"1409","messageId":"1410","endLine":114,"endColumn":39},{"ruleId":"1407","severity":1,"message":"1443","line":24,"column":31,"nodeType":"1409","messageId":"1410","endLine":24,"endColumn":36},{"ruleId":"1411","severity":1,"message":"1412","line":53,"column":7,"nodeType":"1413","messageId":"1414","endLine":53,"endColumn":20},{"ruleId":"1423","severity":1,"message":"1444","line":3,"column":1,"nodeType":"1425","messageId":"1426","endLine":3,"endColumn":42},{"ruleId":"1419","severity":1,"message":"1445","line":132,"column":3,"nodeType":"1421","messageId":"1422","endLine":132,"endColumn":7},{"ruleId":"1419","severity":1,"message":"1446","line":133,"column":3,"nodeType":"1421","messageId":"1422","endLine":133,"endColumn":17},{"ruleId":"1419","severity":1,"message":"1447","line":134,"column":3,"nodeType":"1421","messageId":"1422","endLine":134,"endColumn":21},{"ruleId":"1419","severity":1,"message":"1448","line":135,"column":3,"nodeType":"1421","messageId":"1422","endLine":135,"endColumn":15},{"ruleId":"1419","severity":1,"message":"1449","line":136,"column":3,"nodeType":"1421","messageId":"1422","endLine":136,"endColumn":18},{"ruleId":"1419","severity":1,"message":"1450","line":137,"column":3,"nodeType":"1421","messageId":"1422","endLine":137,"endColumn":10},{"ruleId":"1419","severity":1,"message":"1451","line":138,"column":3,"nodeType":"1421","messageId":"1422","endLine":138,"endColumn":25},{"ruleId":"1419","severity":1,"message":"1452","line":139,"column":3,"nodeType":"1421","messageId":"1422","endLine":139,"endColumn":23},{"ruleId":"1419","severity":1,"message":"1453","line":140,"column":3,"nodeType":"1421","messageId":"1422","endLine":140,"endColumn":11},{"ruleId":"1419","severity":1,"message":"1454","line":144,"column":11,"nodeType":"1421","messageId":"1422","endLine":144,"endColumn":14},{"ruleId":"1419","severity":1,"message":"1455","line":144,"column":16,"nodeType":"1421","messageId":"1422","endLine":144,"endColumn":20},{"ruleId":"1419","severity":1,"message":"1456","line":144,"column":22,"nodeType":"1421","messageId":"1422","endLine":144,"endColumn":30},{"ruleId":"1419","severity":1,"message":"1457","line":144,"column":32,"nodeType":"1421","messageId":"1422","endLine":144,"endColumn":43},{"ruleId":"1407","severity":1,"message":"1458","line":98,"column":29,"nodeType":"1409","messageId":"1410","endLine":98,"endColumn":30},{"ruleId":"1419","severity":1,"message":"1459","line":178,"column":5,"nodeType":"1421","messageId":"1422","endLine":178,"endColumn":21},{"ruleId":"1411","severity":1,"message":"1412","line":81,"column":11,"nodeType":"1413","messageId":"1414","endLine":81,"endColumn":22},{"ruleId":"1407","severity":1,"message":"1443","line":3,"column":38,"nodeType":"1409","messageId":"1410","endLine":3,"endColumn":43},{"ruleId":"1411","severity":1,"message":"1412","line":33,"column":5,"nodeType":"1413","messageId":"1414","endLine":33,"endColumn":16},{"ruleId":"1411","severity":1,"message":"1412","line":71,"column":5,"nodeType":"1413","messageId":"1414","endLine":71,"endColumn":16},{"ruleId":"1423","severity":1,"message":"1424","line":13,"column":1,"nodeType":"1425","messageId":"1426","endLine":13,"endColumn":43},{"ruleId":"1411","severity":1,"message":"1412","line":65,"column":9,"nodeType":"1413","messageId":"1414","endLine":65,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":87,"column":9,"nodeType":"1413","messageId":"1414","endLine":87,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1440","line":43,"column":3,"nodeType":"1409","messageId":"1410","endLine":43,"endColumn":11},{"ruleId":"1407","severity":1,"message":"1441","line":44,"column":6,"nodeType":"1409","messageId":"1410","endLine":44,"endColumn":10},{"ruleId":"1419","severity":1,"message":"1460","line":75,"column":3,"nodeType":"1421","messageId":"1422","endLine":75,"endColumn":14},{"ruleId":"1419","severity":1,"message":"1461","line":76,"column":3,"nodeType":"1421","messageId":"1422","endLine":76,"endColumn":13},{"ruleId":"1419","severity":1,"message":"1462","line":77,"column":3,"nodeType":"1421","messageId":"1422","endLine":77,"endColumn":24},{"ruleId":"1419","severity":1,"message":"1463","line":78,"column":3,"nodeType":"1421","messageId":"1422","endLine":78,"endColumn":16},{"ruleId":"1419","severity":1,"message":"1464","line":79,"column":3,"nodeType":"1421","messageId":"1422","endLine":79,"endColumn":19},{"ruleId":"1419","severity":1,"message":"1465","line":11,"column":29,"nodeType":"1421","messageId":"1422","endLine":11,"endColumn":44},{"ruleId":"1419","severity":1,"message":"1466","line":11,"column":46,"nodeType":"1421","messageId":"1422","endLine":11,"endColumn":57},{"ruleId":"1419","severity":1,"message":"1467","line":11,"column":59,"nodeType":"1421","messageId":"1422","endLine":11,"endColumn":70},{"ruleId":"1419","severity":1,"message":"1468","line":16,"column":11,"nodeType":"1421","messageId":"1422","endLine":16,"endColumn":20},{"ruleId":"1419","severity":1,"message":"1469","line":16,"column":22,"nodeType":"1421","messageId":"1422","endLine":16,"endColumn":36},{"ruleId":"1419","severity":1,"message":"1470","line":16,"column":38,"nodeType":"1421","messageId":"1422","endLine":16,"endColumn":45},{"ruleId":"1411","severity":1,"message":"1412","line":32,"column":9,"nodeType":"1413","messageId":"1414","endLine":32,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1412","line":44,"column":7,"nodeType":"1413","messageId":"1414","endLine":44,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":56,"column":11,"nodeType":"1413","messageId":"1414","endLine":56,"endColumn":24},{"ruleId":"1411","severity":1,"message":"1412","line":62,"column":7,"nodeType":"1413","messageId":"1414","endLine":62,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":80,"column":9,"nodeType":"1413","messageId":"1414","endLine":80,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1412","line":28,"column":27,"nodeType":"1413","messageId":"1414","endLine":28,"endColumn":38},{"ruleId":"1407","severity":1,"message":"1458","line":94,"column":25,"nodeType":"1409","messageId":"1410","endLine":94,"endColumn":26},{"ruleId":"1419","severity":1,"message":"1471","line":27,"column":54,"nodeType":"1421","messageId":"1422","endLine":27,"endColumn":63},{"ruleId":"1419","severity":1,"message":"1472","line":27,"column":65,"nodeType":"1421","messageId":"1422","endLine":27,"endColumn":72},{"ruleId":"1411","severity":1,"message":"1412","line":39,"column":27,"nodeType":"1413","messageId":"1414","endLine":39,"endColumn":38},{"ruleId":"1407","severity":1,"message":"1473","line":19,"column":3,"nodeType":"1409","messageId":"1410","endLine":19,"endColumn":11},{"ruleId":"1407","severity":1,"message":"1443","line":6,"column":31,"nodeType":"1409","messageId":"1410","endLine":6,"endColumn":36},{"ruleId":"1407","severity":1,"message":"1474","line":6,"column":22,"nodeType":"1409","messageId":"1410","endLine":6,"endColumn":27},{"ruleId":"1407","severity":1,"message":"1475","line":23,"column":9,"nodeType":"1409","messageId":"1410","endLine":23,"endColumn":16},{"ruleId":"1407","severity":1,"message":"1476","line":6,"column":8,"nodeType":"1409","messageId":"1410","endLine":6,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1477","line":15,"column":3,"nodeType":"1409","messageId":"1410","endLine":15,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1478","line":58,"column":8,"nodeType":"1409","messageId":"1410","endLine":58,"endColumn":25},{"ruleId":"1411","severity":1,"message":"1412","line":168,"column":9,"nodeType":"1413","messageId":"1414","endLine":168,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1412","line":210,"column":5,"nodeType":"1413","messageId":"1414","endLine":210,"endColumn":16},{"ruleId":"1411","severity":1,"message":"1412","line":230,"column":7,"nodeType":"1413","messageId":"1414","endLine":230,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":235,"column":5,"nodeType":"1413","messageId":"1414","endLine":235,"endColumn":16},{"ruleId":"1411","severity":1,"message":"1412","line":270,"column":7,"nodeType":"1413","messageId":"1414","endLine":270,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":290,"column":7,"nodeType":"1413","messageId":"1414","endLine":290,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1479","line":310,"column":9,"nodeType":"1409","messageId":"1410","endLine":310,"endColumn":27},{"ruleId":"1407","severity":1,"message":"1480","line":329,"column":9,"nodeType":"1409","messageId":"1410","endLine":329,"endColumn":10},{"ruleId":"1423","severity":1,"message":"1424","line":6,"column":1,"nodeType":"1425","messageId":"1426","endLine":6,"endColumn":60},{"ruleId":"1411","severity":1,"message":"1412","line":92,"column":9,"nodeType":"1413","messageId":"1414","endLine":92,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1412","line":157,"column":9,"nodeType":"1413","messageId":"1414","endLine":157,"endColumn":22},{"ruleId":"1407","severity":1,"message":"1481","line":13,"column":8,"nodeType":"1409","messageId":"1410","endLine":13,"endColumn":27},{"ruleId":"1423","severity":1,"message":"1482","line":14,"column":1,"nodeType":"1425","messageId":"1426","endLine":14,"endColumn":52},{"ruleId":"1423","severity":1,"message":"1483","line":20,"column":1,"nodeType":"1425","messageId":"1426","endLine":20,"endColumn":63},{"ruleId":"1407","severity":1,"message":"1484","line":20,"column":10,"nodeType":"1409","messageId":"1410","endLine":20,"endColumn":23},{"ruleId":"1407","severity":1,"message":"1485","line":22,"column":24,"nodeType":"1409","messageId":"1410","endLine":22,"endColumn":35},{"ruleId":"1407","severity":1,"message":"1486","line":29,"column":10,"nodeType":"1409","messageId":"1410","endLine":29,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1487","line":29,"column":30,"nodeType":"1409","messageId":"1410","endLine":29,"endColumn":33},{"ruleId":"1411","severity":1,"message":"1412","line":46,"column":9,"nodeType":"1413","messageId":"1414","endLine":46,"endColumn":22},{"ruleId":"1407","severity":1,"message":"1488","line":69,"column":34,"nodeType":"1409","messageId":"1410","endLine":69,"endColumn":39},{"ruleId":"1407","severity":1,"message":"1489","line":6,"column":3,"nodeType":"1409","messageId":"1410","endLine":6,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1481","line":13,"column":8,"nodeType":"1409","messageId":"1410","endLine":13,"endColumn":27},{"ruleId":"1423","severity":1,"message":"1482","line":14,"column":1,"nodeType":"1425","messageId":"1426","endLine":14,"endColumn":52},{"ruleId":"1423","severity":1,"message":"1483","line":20,"column":1,"nodeType":"1425","messageId":"1426","endLine":20,"endColumn":63},{"ruleId":"1407","severity":1,"message":"1484","line":20,"column":10,"nodeType":"1409","messageId":"1410","endLine":20,"endColumn":23},{"ruleId":"1407","severity":1,"message":"1485","line":22,"column":24,"nodeType":"1409","messageId":"1410","endLine":22,"endColumn":35},{"ruleId":"1407","severity":1,"message":"1486","line":30,"column":10,"nodeType":"1409","messageId":"1410","endLine":30,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1487","line":30,"column":30,"nodeType":"1409","messageId":"1410","endLine":30,"endColumn":33},{"ruleId":"1407","severity":1,"message":"1490","line":32,"column":9,"nodeType":"1409","messageId":"1410","endLine":32,"endColumn":19},{"ruleId":"1411","severity":1,"message":"1412","line":47,"column":9,"nodeType":"1413","messageId":"1414","endLine":47,"endColumn":22},{"ruleId":"1407","severity":1,"message":"1488","line":71,"column":34,"nodeType":"1409","messageId":"1410","endLine":71,"endColumn":39},{"ruleId":"1407","severity":1,"message":"1491","line":77,"column":17,"nodeType":"1409","messageId":"1410","endLine":77,"endColumn":21},{"ruleId":"1423","severity":1,"message":"1482","line":7,"column":1,"nodeType":"1425","messageId":"1426","endLine":7,"endColumn":52},{"ruleId":"1407","severity":1,"message":"1485","line":15,"column":24,"nodeType":"1409","messageId":"1410","endLine":15,"endColumn":35},{"ruleId":"1407","severity":1,"message":"1492","line":21,"column":9,"nodeType":"1409","messageId":"1410","endLine":21,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1486","line":22,"column":10,"nodeType":"1409","messageId":"1410","endLine":22,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1487","line":22,"column":30,"nodeType":"1409","messageId":"1410","endLine":22,"endColumn":33},{"ruleId":"1411","severity":1,"message":"1412","line":38,"column":9,"nodeType":"1413","messageId":"1414","endLine":38,"endColumn":22},{"ruleId":"1407","severity":1,"message":"1488","line":62,"column":34,"nodeType":"1409","messageId":"1410","endLine":62,"endColumn":39},{"ruleId":"1423","severity":1,"message":"1493","line":8,"column":1,"nodeType":"1425","messageId":"1426","endLine":8,"endColumn":47},{"ruleId":"1423","severity":1,"message":"1493","line":9,"column":1,"nodeType":"1425","messageId":"1426","endLine":9,"endColumn":41},{"ruleId":"1423","severity":1,"message":"1494","line":21,"column":1,"nodeType":"1425","messageId":"1426","endLine":21,"endColumn":57},{"ruleId":"1411","severity":1,"message":"1412","line":147,"column":7,"nodeType":"1413","messageId":"1414","endLine":147,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":164,"column":7,"nodeType":"1413","messageId":"1414","endLine":164,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":188,"column":7,"nodeType":"1413","messageId":"1414","endLine":188,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":276,"column":7,"nodeType":"1413","messageId":"1414","endLine":276,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1489","line":9,"column":3,"nodeType":"1409","messageId":"1410","endLine":9,"endColumn":9},{"ruleId":"1407","severity":1,"message":"1495","line":19,"column":8,"nodeType":"1409","messageId":"1410","endLine":19,"endColumn":20},{"ruleId":"1423","severity":1,"message":"1482","line":25,"column":1,"nodeType":"1425","messageId":"1426","endLine":25,"endColumn":52},{"ruleId":"1411","severity":1,"message":"1412","line":92,"column":7,"nodeType":"1413","messageId":"1414","endLine":92,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":104,"column":9,"nodeType":"1413","messageId":"1414","endLine":104,"endColumn":22},{"ruleId":"1407","severity":1,"message":"1496","line":71,"column":41,"nodeType":"1409","messageId":"1410","endLine":71,"endColumn":47},{"ruleId":"1411","severity":1,"message":"1412","line":96,"column":7,"nodeType":"1413","messageId":"1414","endLine":96,"endColumn":18},{"ruleId":"1419","severity":1,"message":"1427","line":33,"column":23,"nodeType":"1421","messageId":"1422","endLine":33,"endColumn":33},{"ruleId":"1419","severity":1,"message":"1428","line":44,"column":11,"nodeType":"1421","messageId":"1422","endLine":44,"endColumn":21},{"ruleId":"1419","severity":1,"message":"1429","line":44,"column":23,"nodeType":"1421","messageId":"1422","endLine":44,"endColumn":30},{"ruleId":"1419","severity":1,"message":"1430","line":44,"column":32,"nodeType":"1421","messageId":"1422","endLine":44,"endColumn":36},{"ruleId":"1419","severity":1,"message":"1431","line":44,"column":38,"nodeType":"1421","messageId":"1422","endLine":44,"endColumn":45},{"ruleId":"1419","severity":1,"message":"1432","line":44,"column":47,"nodeType":"1421","messageId":"1422","endLine":44,"endColumn":56},{"ruleId":"1419","severity":1,"message":"1433","line":44,"column":58,"nodeType":"1421","messageId":"1422","endLine":44,"endColumn":70},{"ruleId":"1419","severity":1,"message":"1434","line":62,"column":21,"nodeType":"1409","messageId":"1422","endLine":62,"endColumn":29},{"ruleId":"1419","severity":1,"message":"1435","line":62,"column":30,"nodeType":"1409","messageId":"1422","endLine":62,"endColumn":34},{"ruleId":"1419","severity":1,"message":"1434","line":63,"column":24,"nodeType":"1409","messageId":"1422","endLine":63,"endColumn":32},{"ruleId":"1419","severity":1,"message":"1436","line":63,"column":33,"nodeType":"1409","messageId":"1422","endLine":63,"endColumn":41},{"ruleId":"1419","severity":1,"message":"1434","line":64,"column":13,"nodeType":"1409","messageId":"1422","endLine":64,"endColumn":21},{"ruleId":"1419","severity":1,"message":"1435","line":64,"column":22,"nodeType":"1409","messageId":"1422","endLine":64,"endColumn":26},{"ruleId":"1411","severity":1,"message":"1412","line":99,"column":7,"nodeType":"1413","messageId":"1414","endLine":99,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1437","line":127,"column":29,"nodeType":"1409","messageId":"1410","endLine":127,"endColumn":33},{"ruleId":"1407","severity":1,"message":"1437","line":128,"column":29,"nodeType":"1409","messageId":"1410","endLine":128,"endColumn":33},{"ruleId":"1407","severity":1,"message":"1497","line":9,"column":8,"nodeType":"1409","messageId":"1410","endLine":9,"endColumn":15},{"ruleId":"1423","severity":1,"message":"1482","line":20,"column":1,"nodeType":"1425","messageId":"1426","endLine":20,"endColumn":64},{"ruleId":"1407","severity":1,"message":"1476","line":30,"column":8,"nodeType":"1409","messageId":"1410","endLine":30,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1498","line":179,"column":9,"nodeType":"1409","messageId":"1410","endLine":179,"endColumn":31},{"ruleId":"1411","severity":1,"message":"1412","line":190,"column":7,"nodeType":"1413","messageId":"1414","endLine":190,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":200,"column":3,"nodeType":"1413","messageId":"1414","endLine":200,"endColumn":14},{"ruleId":"1407","severity":1,"message":"1499","line":223,"column":11,"nodeType":"1409","messageId":"1410","endLine":223,"endColumn":22},{"ruleId":"1407","severity":1,"message":"1500","line":223,"column":38,"nodeType":"1409","messageId":"1410","endLine":223,"endColumn":42},{"ruleId":"1407","severity":1,"message":"1501","line":241,"column":10,"nodeType":"1409","messageId":"1410","endLine":241,"endColumn":15},{"ruleId":"1407","severity":1,"message":"1502","line":242,"column":9,"nodeType":"1409","messageId":"1410","endLine":242,"endColumn":27},{"ruleId":"1407","severity":1,"message":"1503","line":247,"column":28,"nodeType":"1409","messageId":"1410","endLine":247,"endColumn":34},{"ruleId":"1407","severity":1,"message":"1504","line":325,"column":61,"nodeType":"1409","messageId":"1410","endLine":325,"endColumn":69},{"ruleId":"1423","severity":1,"message":"1482","line":15,"column":1,"nodeType":"1425","messageId":"1426","endLine":15,"endColumn":52},{"ruleId":"1411","severity":1,"message":"1412","line":112,"column":7,"nodeType":"1413","messageId":"1414","endLine":112,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":163,"column":7,"nodeType":"1413","messageId":"1414","endLine":163,"endColumn":20},{"ruleId":"1423","severity":1,"message":"1505","line":19,"column":1,"nodeType":"1425","messageId":"1426","endLine":19,"endColumn":59},{"ruleId":"1411","severity":1,"message":"1412","line":90,"column":7,"nodeType":"1413","messageId":"1414","endLine":90,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":92,"column":7,"nodeType":"1413","messageId":"1414","endLine":92,"endColumn":18},{"ruleId":"1423","severity":1,"message":"1424","line":29,"column":1,"nodeType":"1425","messageId":"1426","endLine":29,"endColumn":46},{"ruleId":"1423","severity":1,"message":"1482","line":31,"column":1,"nodeType":"1425","messageId":"1426","endLine":31,"endColumn":57},{"ruleId":"1411","severity":1,"message":"1412","line":152,"column":5,"nodeType":"1413","messageId":"1414","endLine":152,"endColumn":16},{"ruleId":"1407","severity":1,"message":"1506","line":13,"column":3,"nodeType":"1409","messageId":"1410","endLine":13,"endColumn":13},{"ruleId":"1423","severity":1,"message":"1494","line":37,"column":1,"nodeType":"1425","messageId":"1426","endLine":37,"endColumn":65},{"ruleId":"1407","severity":1,"message":"1507","line":40,"column":3,"nodeType":"1409","messageId":"1410","endLine":40,"endColumn":16},{"ruleId":"1411","severity":1,"message":"1412","line":158,"column":7,"nodeType":"1413","messageId":"1414","endLine":158,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":224,"column":5,"nodeType":"1413","messageId":"1414","endLine":224,"endColumn":16},{"ruleId":"1411","severity":1,"message":"1412","line":593,"column":26,"nodeType":"1413","messageId":"1414","endLine":593,"endColumn":37},{"ruleId":"1423","severity":1,"message":"1508","line":13,"column":1,"nodeType":"1425","messageId":"1426","endLine":13,"endColumn":64},{"ruleId":"1423","severity":1,"message":"1424","line":6,"column":1,"nodeType":"1425","messageId":"1426","endLine":6,"endColumn":60},{"ruleId":"1411","severity":1,"message":"1412","line":92,"column":9,"nodeType":"1413","messageId":"1414","endLine":92,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1412","line":157,"column":9,"nodeType":"1413","messageId":"1414","endLine":157,"endColumn":22},{"ruleId":"1407","severity":1,"message":"1506","line":4,"column":3,"nodeType":"1409","messageId":"1410","endLine":4,"endColumn":13},{"ruleId":"1407","severity":1,"message":"1506","line":7,"column":3,"nodeType":"1409","messageId":"1410","endLine":7,"endColumn":13},{"ruleId":"1423","severity":1,"message":"1493","line":25,"column":1,"nodeType":"1425","messageId":"1426","endLine":25,"endColumn":46},{"ruleId":"1407","severity":1,"message":"1474","line":76,"column":27,"nodeType":"1409","messageId":"1410","endLine":76,"endColumn":32},{"ruleId":"1423","severity":1,"message":"1482","line":16,"column":1,"nodeType":"1425","messageId":"1426","endLine":16,"endColumn":52},{"ruleId":"1411","severity":1,"message":"1412","line":116,"column":7,"nodeType":"1413","messageId":"1414","endLine":116,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":139,"column":7,"nodeType":"1413","messageId":"1414","endLine":139,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":156,"column":9,"nodeType":"1413","messageId":"1414","endLine":156,"endColumn":22},{"ruleId":"1407","severity":1,"message":"1496","line":160,"column":41,"nodeType":"1409","messageId":"1410","endLine":160,"endColumn":47},{"ruleId":"1411","severity":1,"message":"1412","line":170,"column":7,"nodeType":"1413","messageId":"1414","endLine":170,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1509","line":12,"column":3,"nodeType":"1409","messageId":"1410","endLine":12,"endColumn":8},{"ruleId":"1423","severity":1,"message":"1482","line":17,"column":1,"nodeType":"1425","messageId":"1426","endLine":17,"endColumn":52},{"ruleId":"1407","severity":1,"message":"1507","line":34,"column":3,"nodeType":"1409","messageId":"1410","endLine":34,"endColumn":16},{"ruleId":"1411","severity":1,"message":"1412","line":215,"column":7,"nodeType":"1413","messageId":"1414","endLine":215,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1501","line":225,"column":10,"nodeType":"1409","messageId":"1410","endLine":225,"endColumn":15},{"ruleId":"1423","severity":1,"message":"1510","line":13,"column":1,"nodeType":"1425","messageId":"1426","endLine":13,"endColumn":51},{"ruleId":"1407","severity":1,"message":"1506","line":2,"column":16,"nodeType":"1409","messageId":"1410","endLine":2,"endColumn":26},{"ruleId":"1423","severity":1,"message":"1494","line":12,"column":1,"nodeType":"1425","messageId":"1426","endLine":12,"endColumn":65},{"ruleId":"1411","severity":1,"message":"1412","line":106,"column":7,"nodeType":"1413","messageId":"1414","endLine":106,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":165,"column":7,"nodeType":"1413","messageId":"1414","endLine":165,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":110,"column":7,"nodeType":"1413","messageId":"1414","endLine":110,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1476","line":6,"column":8,"nodeType":"1409","messageId":"1410","endLine":6,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1477","line":15,"column":3,"nodeType":"1409","messageId":"1410","endLine":15,"endColumn":9},{"ruleId":"1411","severity":1,"message":"1412","line":165,"column":9,"nodeType":"1413","messageId":"1414","endLine":165,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1412","line":206,"column":5,"nodeType":"1413","messageId":"1414","endLine":206,"endColumn":16},{"ruleId":"1411","severity":1,"message":"1412","line":226,"column":7,"nodeType":"1413","messageId":"1414","endLine":226,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":231,"column":5,"nodeType":"1413","messageId":"1414","endLine":231,"endColumn":16},{"ruleId":"1411","severity":1,"message":"1412","line":266,"column":7,"nodeType":"1413","messageId":"1414","endLine":266,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":286,"column":7,"nodeType":"1413","messageId":"1414","endLine":286,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1479","line":306,"column":9,"nodeType":"1409","messageId":"1410","endLine":306,"endColumn":27},{"ruleId":"1407","severity":1,"message":"1480","line":324,"column":9,"nodeType":"1409","messageId":"1410","endLine":324,"endColumn":10},{"ruleId":"1423","severity":1,"message":"1493","line":8,"column":1,"nodeType":"1425","messageId":"1426","endLine":8,"endColumn":47},{"ruleId":"1411","severity":1,"message":"1412","line":125,"column":7,"nodeType":"1413","messageId":"1414","endLine":125,"endColumn":18},{"ruleId":"1423","severity":1,"message":"1482","line":25,"column":1,"nodeType":"1425","messageId":"1426","endLine":25,"endColumn":52},{"ruleId":"1411","severity":1,"message":"1412","line":90,"column":9,"nodeType":"1413","messageId":"1414","endLine":90,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1412","line":102,"column":9,"nodeType":"1413","messageId":"1414","endLine":102,"endColumn":22},{"ruleId":"1423","severity":1,"message":"1511","line":10,"column":1,"nodeType":"1425","messageId":"1426","endLine":10,"endColumn":45},{"ruleId":"1411","severity":1,"message":"1412","line":115,"column":7,"nodeType":"1413","messageId":"1414","endLine":115,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1443","line":26,"column":31,"nodeType":"1409","messageId":"1410","endLine":26,"endColumn":36},{"ruleId":"1411","severity":1,"message":"1412","line":37,"column":9,"nodeType":"1413","messageId":"1414","endLine":37,"endColumn":22},{"ruleId":"1423","severity":1,"message":"1493","line":15,"column":1,"nodeType":"1425","messageId":"1426","endLine":15,"endColumn":46},{"ruleId":"1411","severity":1,"message":"1412","line":181,"column":41,"nodeType":"1413","messageId":"1414","endLine":181,"endColumn":52},{"ruleId":"1411","severity":1,"message":"1412","line":183,"column":36,"nodeType":"1413","messageId":"1414","endLine":183,"endColumn":47},{"ruleId":"1411","severity":1,"message":"1412","line":184,"column":34,"nodeType":"1413","messageId":"1414","endLine":184,"endColumn":45},{"ruleId":"1423","severity":1,"message":"1493","line":7,"column":1,"nodeType":"1425","messageId":"1426","endLine":7,"endColumn":47},{"ruleId":"1411","severity":1,"message":"1412","line":112,"column":7,"nodeType":"1413","messageId":"1414","endLine":112,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1506","line":5,"column":3,"nodeType":"1409","messageId":"1410","endLine":5,"endColumn":13},{"ruleId":"1423","severity":1,"message":"1482","line":16,"column":1,"nodeType":"1425","messageId":"1426","endLine":16,"endColumn":52},{"ruleId":"1411","severity":1,"message":"1412","line":115,"column":7,"nodeType":"1413","messageId":"1414","endLine":115,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":138,"column":7,"nodeType":"1413","messageId":"1414","endLine":138,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":155,"column":9,"nodeType":"1413","messageId":"1414","endLine":155,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1412","line":169,"column":9,"nodeType":"1413","messageId":"1414","endLine":169,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1412","line":78,"column":7,"nodeType":"1413","messageId":"1414","endLine":78,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":101,"column":7,"nodeType":"1413","messageId":"1414","endLine":101,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":118,"column":9,"nodeType":"1413","messageId":"1414","endLine":118,"endColumn":22},{"ruleId":"1423","severity":1,"message":"1505","line":5,"column":1,"nodeType":"1425","messageId":"1426","endLine":5,"endColumn":69},{"ruleId":"1407","severity":1,"message":"1512","line":11,"column":10,"nodeType":"1409","messageId":"1410","endLine":11,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1513","line":45,"column":9,"nodeType":"1409","messageId":"1410","endLine":45,"endColumn":17},{"ruleId":"1407","severity":1,"message":"1514","line":331,"column":15,"nodeType":"1409","messageId":"1410","endLine":331,"endColumn":27},{"ruleId":"1407","severity":1,"message":"1415","line":331,"column":29,"nodeType":"1409","messageId":"1410","endLine":331,"endColumn":34},{"ruleId":"1407","severity":1,"message":"1416","line":331,"column":36,"nodeType":"1409","messageId":"1410","endLine":331,"endColumn":43},{"ruleId":"1411","severity":1,"message":"1412","line":120,"column":7,"nodeType":"1413","messageId":"1414","endLine":120,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1506","line":6,"column":3,"nodeType":"1409","messageId":"1410","endLine":6,"endColumn":13},{"ruleId":"1423","severity":1,"message":"1493","line":23,"column":1,"nodeType":"1425","messageId":"1426","endLine":23,"endColumn":46},{"ruleId":"1407","severity":1,"message":"1443","line":8,"column":31,"nodeType":"1409","messageId":"1410","endLine":8,"endColumn":36},{"ruleId":"1411","severity":1,"message":"1412","line":232,"column":7,"nodeType":"1413","messageId":"1414","endLine":232,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1515","line":31,"column":13,"nodeType":"1409","messageId":"1410","endLine":31,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1443","line":10,"column":31,"nodeType":"1409","messageId":"1410","endLine":10,"endColumn":36},{"ruleId":"1407","severity":1,"message":"1516","line":116,"column":29,"nodeType":"1409","messageId":"1410","endLine":116,"endColumn":49},{"ruleId":"1407","severity":1,"message":"1517","line":128,"column":22,"nodeType":"1409","messageId":"1410","endLine":128,"endColumn":35},{"ruleId":"1407","severity":1,"message":"1518","line":136,"column":10,"nodeType":"1409","messageId":"1410","endLine":136,"endColumn":27},{"ruleId":"1407","severity":1,"message":"1519","line":136,"column":29,"nodeType":"1409","messageId":"1410","endLine":136,"endColumn":49},{"ruleId":"1407","severity":1,"message":"1520","line":164,"column":29,"nodeType":"1409","messageId":"1410","endLine":164,"endColumn":49},{"ruleId":"1407","severity":1,"message":"1521","line":506,"column":23,"nodeType":"1409","messageId":"1410","endLine":506,"endColumn":28},{"ruleId":"1423","severity":1,"message":"1505","line":20,"column":1,"nodeType":"1425","messageId":"1426","endLine":20,"endColumn":72},{"ruleId":"1407","severity":1,"message":"1522","line":262,"column":10,"nodeType":"1409","messageId":"1410","endLine":262,"endColumn":20},{"ruleId":"1419","severity":1,"message":"1523","line":339,"column":18,"nodeType":"1421","messageId":"1422","endLine":339,"endColumn":29},{"ruleId":"1419","severity":1,"message":"1524","line":343,"column":48,"nodeType":"1409","messageId":"1422","endLine":343,"endColumn":54},{"ruleId":"1419","severity":1,"message":"1525","line":343,"column":60,"nodeType":"1409","messageId":"1422","endLine":343,"endColumn":69},{"ruleId":"1419","severity":1,"message":"1524","line":344,"column":49,"nodeType":"1409","messageId":"1422","endLine":344,"endColumn":55},{"ruleId":"1419","severity":1,"message":"1526","line":344,"column":61,"nodeType":"1409","messageId":"1422","endLine":344,"endColumn":70},{"ruleId":"1419","severity":1,"message":"1524","line":368,"column":20,"nodeType":"1409","messageId":"1422","endLine":368,"endColumn":26},{"ruleId":"1419","severity":1,"message":"1527","line":388,"column":24,"nodeType":"1409","messageId":"1422","endLine":388,"endColumn":27},{"ruleId":"1419","severity":1,"message":"1524","line":389,"column":50,"nodeType":"1409","messageId":"1422","endLine":389,"endColumn":56},{"ruleId":"1419","severity":1,"message":"1524","line":391,"column":37,"nodeType":"1409","messageId":"1422","endLine":391,"endColumn":43},{"ruleId":"1407","severity":1,"message":"1528","line":4,"column":8,"nodeType":"1409","messageId":"1410","endLine":4,"endColumn":17},{"ruleId":"1407","severity":1,"message":"1529","line":12,"column":8,"nodeType":"1409","messageId":"1410","endLine":12,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1530","line":13,"column":8,"nodeType":"1409","messageId":"1410","endLine":13,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1531","line":14,"column":8,"nodeType":"1409","messageId":"1410","endLine":14,"endColumn":16},{"ruleId":"1407","severity":1,"message":"1532","line":23,"column":10,"nodeType":"1409","messageId":"1410","endLine":23,"endColumn":19},{"ruleId":"1407","severity":1,"message":"1533","line":23,"column":28,"nodeType":"1409","messageId":"1410","endLine":23,"endColumn":35},{"ruleId":"1407","severity":1,"message":"1534","line":24,"column":8,"nodeType":"1409","messageId":"1410","endLine":24,"endColumn":15},{"ruleId":"1407","severity":1,"message":"1535","line":27,"column":11,"nodeType":"1409","messageId":"1410","endLine":27,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1412","line":157,"column":7,"nodeType":"1413","messageId":"1414","endLine":157,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1536","line":165,"column":9,"nodeType":"1409","messageId":"1410","endLine":165,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1537","line":32,"column":3,"nodeType":"1409","messageId":"1410","endLine":32,"endColumn":8},{"ruleId":"1407","severity":1,"message":"1538","line":35,"column":3,"nodeType":"1409","messageId":"1410","endLine":35,"endColumn":19},{"ruleId":"1407","severity":1,"message":"1495","line":27,"column":8,"nodeType":"1409","messageId":"1410","endLine":27,"endColumn":20},{"ruleId":"1423","severity":1,"message":"1482","line":29,"column":1,"nodeType":"1425","messageId":"1426","endLine":29,"endColumn":49},{"ruleId":"1411","severity":1,"message":"1412","line":151,"column":7,"nodeType":"1413","messageId":"1414","endLine":151,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":49,"column":9,"nodeType":"1413","messageId":"1414","endLine":49,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1412","line":73,"column":7,"nodeType":"1413","messageId":"1414","endLine":73,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":98,"column":7,"nodeType":"1413","messageId":"1414","endLine":98,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":115,"column":9,"nodeType":"1413","messageId":"1414","endLine":115,"endColumn":22},{"ruleId":"1407","severity":1,"message":"1539","line":15,"column":3,"nodeType":"1409","messageId":"1410","endLine":15,"endColumn":12},{"ruleId":"1407","severity":1,"message":"1440","line":16,"column":3,"nodeType":"1409","messageId":"1410","endLine":16,"endColumn":11},{"ruleId":"1407","severity":1,"message":"1441","line":18,"column":6,"nodeType":"1409","messageId":"1410","endLine":18,"endColumn":10},{"ruleId":"1411","severity":1,"message":"1412","line":51,"column":9,"nodeType":"1413","messageId":"1414","endLine":51,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1412","line":68,"column":9,"nodeType":"1413","messageId":"1414","endLine":68,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1412","line":93,"column":7,"nodeType":"1413","messageId":"1414","endLine":93,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":152,"column":7,"nodeType":"1413","messageId":"1414","endLine":152,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":169,"column":9,"nodeType":"1413","messageId":"1414","endLine":169,"endColumn":22},{"ruleId":"1407","severity":1,"message":"1540","line":236,"column":29,"nodeType":"1409","messageId":"1410","endLine":236,"endColumn":36},{"ruleId":"1407","severity":1,"message":"1443","line":7,"column":31,"nodeType":"1409","messageId":"1410","endLine":7,"endColumn":36},{"ruleId":"1407","severity":1,"message":"1537","line":24,"column":3,"nodeType":"1409","messageId":"1410","endLine":24,"endColumn":8},{"ruleId":"1407","severity":1,"message":"1541","line":23,"column":33,"nodeType":"1409","messageId":"1410","endLine":23,"endColumn":40},{"ruleId":"1407","severity":1,"message":"1488","line":29,"column":31,"nodeType":"1409","messageId":"1410","endLine":29,"endColumn":36},{"ruleId":"1423","severity":1,"message":"1493","line":9,"column":1,"nodeType":"1425","messageId":"1426","endLine":9,"endColumn":46},{"ruleId":"1407","severity":1,"message":"1443","line":11,"column":31,"nodeType":"1409","messageId":"1410","endLine":11,"endColumn":36},{"ruleId":"1423","severity":1,"message":"1444","line":4,"column":1,"nodeType":"1425","messageId":"1426","endLine":4,"endColumn":42},{"ruleId":"1407","severity":1,"message":"1439","line":31,"column":37,"nodeType":"1409","messageId":"1410","endLine":31,"endColumn":41},{"ruleId":"1411","severity":1,"message":"1412","line":64,"column":9,"nodeType":"1413","messageId":"1414","endLine":64,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1542","line":18,"column":61,"nodeType":"1409","messageId":"1410","endLine":18,"endColumn":68},{"ruleId":"1407","severity":1,"message":"1443","line":7,"column":31,"nodeType":"1409","messageId":"1410","endLine":7,"endColumn":36},{"ruleId":"1407","severity":1,"message":"1439","line":25,"column":3,"nodeType":"1409","messageId":"1410","endLine":25,"endColumn":7},{"ruleId":"1407","severity":1,"message":"1443","line":4,"column":38,"nodeType":"1409","messageId":"1410","endLine":4,"endColumn":43},{"ruleId":"1407","severity":1,"message":"1443","line":7,"column":31,"nodeType":"1409","messageId":"1410","endLine":7,"endColumn":36},{"ruleId":"1407","severity":1,"message":"1543","line":621,"column":7,"nodeType":"1409","messageId":"1410","endLine":621,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1544","line":637,"column":7,"nodeType":"1409","messageId":"1410","endLine":637,"endColumn":22},{"ruleId":"1407","severity":1,"message":"1545","line":656,"column":7,"nodeType":"1409","messageId":"1410","endLine":656,"endColumn":25},{"ruleId":"1407","severity":1,"message":"1546","line":682,"column":7,"nodeType":"1409","messageId":"1410","endLine":682,"endColumn":11},{"ruleId":"1407","severity":1,"message":"1547","line":705,"column":7,"nodeType":"1409","messageId":"1410","endLine":705,"endColumn":10},{"ruleId":"1411","severity":1,"message":"1412","line":31,"column":7,"nodeType":"1413","messageId":"1414","endLine":31,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":253,"column":15,"nodeType":"1413","messageId":"1414","endLine":253,"endColumn":28},{"ruleId":"1411","severity":1,"message":"1412","line":36,"column":9,"nodeType":"1413","messageId":"1414","endLine":36,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1412","line":46,"column":9,"nodeType":"1413","messageId":"1414","endLine":46,"endColumn":22},{"ruleId":"1411","severity":1,"message":"1412","line":131,"column":17,"nodeType":"1413","messageId":"1414","endLine":131,"endColumn":30},{"ruleId":"1407","severity":1,"message":"1548","line":9,"column":8,"nodeType":"1409","messageId":"1410","endLine":9,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1534","line":10,"column":8,"nodeType":"1409","messageId":"1410","endLine":10,"endColumn":15},{"ruleId":"1407","severity":1,"message":"1549","line":11,"column":8,"nodeType":"1409","messageId":"1410","endLine":11,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1550","line":12,"column":8,"nodeType":"1409","messageId":"1410","endLine":12,"endColumn":17},{"ruleId":"1411","severity":1,"message":"1412","line":48,"column":7,"nodeType":"1413","messageId":"1414","endLine":48,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1415","line":67,"column":25,"nodeType":"1409","messageId":"1410","endLine":67,"endColumn":30},{"ruleId":"1407","severity":1,"message":"1416","line":67,"column":32,"nodeType":"1409","messageId":"1410","endLine":67,"endColumn":39},{"ruleId":"1407","severity":1,"message":"1417","line":67,"column":41,"nodeType":"1409","messageId":"1410","endLine":67,"endColumn":54},{"ruleId":"1407","severity":1,"message":"1418","line":67,"column":56,"nodeType":"1409","messageId":"1410","endLine":67,"endColumn":65},{"ruleId":"1411","severity":1,"message":"1412","line":36,"column":7,"nodeType":"1413","messageId":"1414","endLine":36,"endColumn":18},{"ruleId":"1411","severity":1,"message":"1412","line":46,"column":7,"nodeType":"1413","messageId":"1414","endLine":46,"endColumn":18},{"ruleId":"1407","severity":1,"message":"1417","line":65,"column":41,"nodeType":"1409","messageId":"1410","endLine":65,"endColumn":54},{"ruleId":"1407","severity":1,"message":"1418","line":65,"column":56,"nodeType":"1409","messageId":"1410","endLine":65,"endColumn":65},{"ruleId":"1407","severity":1,"message":"1415","line":34,"column":25,"nodeType":"1409","messageId":"1410","endLine":34,"endColumn":30},{"ruleId":"1407","severity":1,"message":"1416","line":34,"column":32,"nodeType":"1409","messageId":"1410","endLine":34,"endColumn":39},{"ruleId":"1411","severity":1,"message":"1412","line":38,"column":7,"nodeType":"1413","messageId":"1414","endLine":38,"endColumn":20},{"ruleId":"1411","severity":1,"message":"1412","line":55,"column":7,"nodeType":"1413","messageId":"1414","endLine":55,"endColumn":20},{"ruleId":"1407","severity":1,"message":"1415","line":72,"column":25,"nodeType":"1409","messageId":"1410","endLine":72,"endColumn":30},{"ruleId":"1407","severity":1,"message":"1416","line":72,"column":32,"nodeType":"1409","messageId":"1410","endLine":72,"endColumn":39},{"ruleId":"1407","severity":1,"message":"1418","line":72,"column":56,"nodeType":"1409","messageId":"1410","endLine":72,"endColumn":65},"no-unused-vars","'Providers' is defined but never used.","Identifier","unusedVar","no-console","Unexpected console statement.","MemberExpression","unexpected","'dirty' is defined but never used.","'isValid' is defined but never used.","'setFieldValue' is defined but never used.","'setValues' is defined but never used.","react/prop-types","'initialValues' is missing in props validation","Property","missingPropType","no-duplicate-imports","'@apollo/client' import is duplicated.","ImportDeclaration","import","'PlansQuery' is missing in props validation","'PlansQuery.fetchPlans' is missing in props validation","'PlansQuery.loading' is missing in props validation","'PlansQuery.data' is missing in props validation","'PlansQuery.refetch' is missing in props validation","'PlansQuery.variables' is missing in props validation","'PlansQuery.newVariables' is missing in props validation","'PlansQuery.data.getPlans' is missing in props validation","'PlansQuery.data.getPlans.plan' is missing in props validation","'PlansQuery.data.getPlans.pageInfo' is missing in props validation","'data' is defined but never used.","'btnValue' is defined but never used.","'type' is defined but never used.","'onCancel' is defined but never used.","'rest' is defined but never used.","'type' is missing in props validation","'theme' is defined but never used.","'@mui/styles' import is duplicated.","'plan' is missing in props validation","'isItemSelected' is missing in props validation","'handleSelectedRows' is missing in props validation","'selectedRows' is missing in props validation","'setSelectedRows' is missing in props validation","'labelId' is missing in props validation","'handleDeleteOpenDialog' is missing in props validation","'handleEditOpenDialog' is missing in props validation","'deleting' is missing in props validation","'plan._id' is missing in props validation","'plan.name' is missing in props validation","'plan.duration' is missing in props validation","'plan.description' is missing in props validation","'e' is defined but never used.","'disabled' is missing in props validation","'setEditData' is missing in props validation","'isDeleting' is missing in props validation","'setEnrolleeIdToDelete' is missing in props validation","'openEditModal' is missing in props validation","'openConfirmModal' is missing in props validation","'setHmoEnrollees' is missing in props validation","'setPageInfo' is missing in props validation","'queryParams' is missing in props validation","'queryParams.variables' is missing in props validation","'queryParams.fetchEnrollees' is missing in props validation","'queryParams.refetch' is missing in props validation","'startDate' is missing in props validation","'endDate' is missing in props validation","'fontSize' is defined but never used.","'props' is defined but never used.","'classes' is assigned a value but never used.","'DeleteIcon' is defined but never used.","'Button' is defined but never used.","'isFirstDayOfMonth' is defined but never used.","'handleGenerateLink' is assigned a value but never used.","'z' is assigned a value but never used.","'ArrowForwardIosIcon' is defined but never used.","'components/layouts' import is duplicated.","'helpers/filterHelperFunctions' import is duplicated.","'trucateString' is defined but never used.","'getPartners' is defined but never used.","'regenerate' is assigned a value but never used.","'daa' is assigned a value but never used.","'index' is defined but never used.","'Avatar' is defined but never used.","'userTypeId' is assigned a value but never used.","'icon' is assigned a value but never used.","'theme' is assigned a value but never used.","'react-router-dom' import is duplicated.","'components/graphQL/Mutation' import is duplicated.","'displayPhoto' is defined but never used.","'errMsg' is defined but never used.","'AddIcon' is defined but never used.","'handleDeleteOpenDialog' is assigned a value but never used.","'rowsPerPage' is assigned a value but never used.","'page' is assigned a value but never used.","'alert' is assigned a value but never used.","'handleDialogOpens1' is assigned a value but never used.","'values' is defined but never used.","'provider' is assigned a value but never used.","'components/graphQL/useQuery' import is duplicated.","'Typography' is defined but never used.","'fetchMoreData' is defined but never used.","'@mui/material' import is duplicated.","'Alert' is defined but never used.","'components/Utilities/Time' import is duplicated.","'components/Utilities' import is duplicated.","'dropDown' is assigned a value but never used.","'onChange' is assigned a value but never used.","'isSubmitting' is defined but never used.","'field' is defined but never used.","'setConsultationState' is assigned a value but never used.","'setGraphState' is assigned a value but never used.","'subScriptionState' is assigned a value but never used.","'setSubScriptionState' is assigned a value but never used.","'setPartnerGraphState' is assigned a value but never used.","'color' is assigned a value but never used.","'profileAcc' is assigned a value but never used.","'breadcrumbs' is missing in props validation","'breadcrumbs.length' is missing in props validation","'breadcrumbs[].pageTitle' is missing in props validation","'breadcrumbs[].pageIndex' is missing in props validation","'breadcrumbs.map' is missing in props validation","'LabelIcon' is defined but never used.","'ExpandLess' is defined but never used.","'ExpandMore' is defined but never used.","'Collapse' is defined but never used.","'firstMenu' is defined but never used.","'subMenu' is defined but never used.","'HMOIcon' is defined but never used.","'drawerWidth' is assigned a value but never used.","'handleClick' is assigned a value but never used.","'width' is defined but never used.","'placeholderWidth' is defined but never used.","'onConfirm' is defined but never used.","'context' is defined but never used.","'progres' is defined but never used.","'padding' is defined but never used.","'ReferralDiv' is assigned a value but never used.","'SubscriptionDiv' is assigned a value but never used.","'SubscriptionDelete' is assigned a value but never used.","'Div2' is assigned a value but never used.","'Div' is assigned a value but never used.","'PartnersIcon' is defined but never used.","'MessagesIcon' is defined but never used.","'EmailIcon' is defined but never used."]