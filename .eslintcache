[{"/Users/codabae/Documents/ci work/heala/DProject/src/index.js":"1","/Users/codabae/Documents/ci work/heala/DProject/src/accessToken.js":"2","/Users/codabae/Documents/ci work/heala/DProject/src/App.js":"3","/Users/codabae/Documents/ci work/heala/DProject/src/store/index.js":"4","/Users/codabae/Documents/ci work/heala/DProject/src/components/routes/Routes.js":"5","/Users/codabae/Documents/ci work/heala/DProject/src/components/hooks/useActions.js":"6","/Users/codabae/Documents/ci work/heala/DProject/src/components/muiTheme.js":"7","/Users/codabae/Documents/ci work/heala/DProject/src/components/graphQL/Mutation.js":"8","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/index.js":"9","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/index.js":"10","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/index.js":"11","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/WaitingListDetails.js":"12","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/WhiteLabel.js":"13","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Backdrop.js":"14","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HmoPlans.js":"15","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HealaPlans.js":"16","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Hospitals.js":"17","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/SearchInput.js":"18","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/CircularProgress.js":"19","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/SubscriptionPlans.js":"20","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/SubscriptionIncome.js":"21","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ListManagment.js":"22","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/SingleHMO.js":"23","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/TestList.js":"24","/Users/codabae/Documents/ci work/heala/DProject/src/store/action-creators/index.js":"25","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/TableLayout.js":"26","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/CreateEditPlans.js":"27","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/CreateEditHMOPlans.js":"28","/Users/codabae/Documents/ci work/heala/DProject/src/components/Tables/HospitalsTable.js":"29","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/UploadEnrolleeListForm.js":"30","/Users/codabae/Documents/ci work/heala/DProject/src/components/Tables/SingleHMOTable.js":"31","/Users/codabae/Documents/ci work/heala/DProject/src/components/cards/InfoCard.js":"32","/Users/codabae/Documents/ci work/heala/DProject/src/components/cards/SettingsCard.js":"33","/Users/codabae/Documents/ci work/heala/DProject/src/helpers/filterHelperFunctions.js":"34","/Users/codabae/Documents/ci work/heala/DProject/src/helpers/mockData.js":"35","/Users/codabae/Documents/ci work/heala/DProject/src/helpers/isSelected.js":"36","/Users/codabae/Documents/ci work/heala/DProject/src/components/graphQL/useQuery.js":"37","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/tableHeaders.js":"38","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/EnhancedTable.js":"39","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/EditTestForm.js":"40","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/AddTestForm.js":"41","/Users/codabae/Documents/ci work/heala/DProject/src/helpers/selectedRows.js":"42","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/DeleteOrDisable.js":"43","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/AddEditHMOEnrolleeModal.js":"44","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/UploadListModal.js":"45","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/ConfirmModal.js":"46","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/MainModal.js":"47","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Time.js":"48","/Users/codabae/Documents/ci work/heala/DProject/src/hooks/useAlert.js":"49","/Users/codabae/Documents/ci work/heala/DProject/src/components/Rows/TestListRow.js":"50","/Users/codabae/Documents/ci work/heala/DProject/src/store/action-creators/hcp.js":"51","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/DragAndDrop.js":"52","/Users/codabae/Documents/ci work/heala/DProject/src/helpers/func.js":"53","/Users/codabae/Documents/ci work/heala/DProject/src/components/graphQL/fragment.js":"54","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/EnhancedTableToolbar.js":"55","/Users/codabae/Documents/ci work/heala/DProject/src/styles/patientsPageStyles.js":"56","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/EnhancedTableHeader.js":"57","/Users/codabae/Documents/ci work/heala/DProject/src/helpers/validationSchemas.js":"58","/Users/codabae/Documents/ci work/heala/DProject/src/components/Rows/HospitalRow.js":"59","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/CompoundSearch.js":"60","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/EnrolleeProfileModal.js":"61","/Users/codabae/Documents/ci work/heala/DProject/src/components/Rows/SingleHMORow.js":"62","/Users/codabae/Documents/ci work/heala/DProject/src/styles/hmoPageStyles.js":"63","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Select.js":"64","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/UploadListForm.js":"65","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/AddEditHMOEnrolleeForm.js":"66","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/Filters/SingleHMOFilters.js":"67","/Users/codabae/Documents/ci work/heala/DProject/src/components/Buttons/EditDelBtn.js":"68","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/index.js":"69","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/TextError.js":"70","/Users/codabae/Documents/ci work/heala/DProject/src/store/action-types/index.js":"71","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/Filters/index.js":"72","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/ProfileInfo.js":"73","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Calendar.js":"74","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/FormikControl.js":"75","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/StatusPill.js":"76","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/MessageAddIcon.js":"77","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/VerifiedIcon.js":"78","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/Calender2.js":"79","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/ChervonDownIcon.js":"80","/Users/codabae/Documents/ci work/heala/DProject/src/components/Buttons/CloseBtn.js":"81","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/deleteIcon.js":"82","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/EditIcon.js":"83","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/DateTimePicker.js":"84","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/File.js":"85","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Textarea.js":"86","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Date.js":"87","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Checkboxs.js":"88","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Input.js":"89","/Users/codabae/Documents/ci work/heala/DProject/src/components/Typography.js":"90","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/CallIcon.js":"91","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/SmsIcon.js":"92","/Users/codabae/Documents/ci work/heala/DProject/src/styles/hospitalPageStyles.js":"93","/Users/codabae/Documents/ci work/heala/DProject/src/store/action-creators/auth.js":"94","/Users/codabae/Documents/ci work/heala/DProject/src/store/action-creators/patient.js":"95","/Users/codabae/Documents/ci work/heala/DProject/src/store/action-creators/tablesActions.js":"96","/Users/codabae/Documents/ci work/heala/DProject/src/components/Tables/PlansTable.js":"97","/Users/codabae/Documents/ci work/heala/DProject/src/components/Tables/HMOPlansTable.js":"98","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/EmptyTable.js":"99","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/WaitingListTable.js":"100","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/CardItem.js":"101","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/SideMenu.js":"102","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/Notifications.js":"103","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/DashboardChart.js":"104","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/Header.js":"105","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/NoData.js":"106","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/EnhancedTableAction.js":"107","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Search.js":"108","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/PreviousButton.js":"109","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Modal.js":"110","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/HeaderProfile.js":"111","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/HeaderContents.js":"112","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/LinearProgress.js":"113","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Loader.js":"114","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/FormSelect.js":"115","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/FilterList.js":"116","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/FormInput.js":"117","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/DisplayProfile.js":"118","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/ProfileCard.js":"119","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/AvailabilityTable.js":"120","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/DataGrid.js":"121","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/LineChart.js":"122","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/CustomButton.js":"123","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/CheckBox.js":"124","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/CircularChart.js":"125","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Card.js":"126","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Button.js":"127","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/AvailabilityCard.js":"128","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/WaitingList.js":"129","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Illness.js":"130","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ViewReferral.js":"131","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/VideoCall.js":"132","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/UserTypes.js":"133","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ViewHCP.js":"134","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Subscription.js":"135","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/DoctorEarning.js":"136","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/DoctorPayout.js":"137","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/SinglePatient.js":"138","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/SingleHCP.js":"139","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Settings.js":"140","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ReferralTab.js":"141","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Providers.js":"142","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Prescriptions.js":"143","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ViewMessage.js":"144","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Permission.js":"145","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/PendingPayout.js":"146","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/PatientProfile.js":"147","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/PatientAppointment.js":"148","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Partners.js":"149","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Patients.js":"150","/Users/codabae/Documents/ci work/heala/DProject/src/components/Rows/PlanListRow.js":"151","/Users/codabae/Documents/ci work/heala/DProject/src/components/Rows/HMOPlanRow.js":"152","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Messages.js":"153","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Chat.js":"154","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/tableData.js":"155","/Users/codabae/Documents/ci work/heala/DProject/src/helpers/asideMenus.js":"156","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/LogoutIcon.js":"157","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/SearchIcon.js":"158","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/BellIcon.js":"159","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/UserTypeModal.js":"160","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/Success.js":"161","/Users/codabae/Documents/ci work/heala/DProject/src/styles/partnersPageStyles.js":"162","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Medications.js":"163","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/MedicalRecords.js":"164","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/index.js":"165","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Management.js":"166","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpProfile.js":"167","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Hcps.js":"168","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpConsultations.js":"169","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpPatients.js":"170","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HCPChat.js":"171","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Payout.js":"172","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpEarnings.js":"173","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpAvailability.js":"174","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpCaseNote.js":"175","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpAppointments.js":"176","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HCP.js":"177","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Financetable.js":"178","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Finance.js":"179","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Email.js":"180","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/DoctorVerificationProfile.js":"181","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/EditManagement.js":"182","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ViewDoctorVerification.js":"183","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/CreateMessage.js":"184","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Consultations.js":"185","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Appointments.js":"186","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/CaseNotes.js":"187","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Administrator.js":"188","/Users/codabae/Documents/ci work/heala/DProject/src/helpers/breadcrumb.js":"189","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Login.js":"190","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Dashboard.js":"191","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/DataHeader.js":"192","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/Filters/PatientFilters.js":"193","/Users/codabae/Documents/ci work/heala/DProject/src/components/Copy.js":"194","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/IllnessModal.js":"195","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/ReferPatient.js":"196","/Users/codabae/Documents/ci work/heala/DProject/src/styles/doctorsPageStyles.js":"197","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/ProviderModal.js":"198","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/PermissionModal.js":"199","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/Filter.js":"200","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/RoleModal.js":"201","/Users/codabae/Documents/ci work/heala/DProject/src/styles/docVerificationPageStyles.js":"202","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Hmo.js":"203","/Users/codabae/Documents/ci work/heala/DProject/src/components/routes/PrivateRoute.js":"204","/Users/codabae/Documents/ci work/heala/DProject/src/store/store.js":"205","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/LabelIcon.js":"206","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/HMOIcon.js":"207","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/MessagesIcon.js":"208","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/PartnersIcon.js":"209","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/EmailIcon.js":"210","/Users/codabae/Documents/ci work/heala/DProject/src/components/hooks/useCopy.js":"211","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/bMI.js":"212","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/Filters/DoctorsFilters.js":"213","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/PatientsIcon.js":"214","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/DoctorsIcon.js":"215","/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/DashboardIcon.js":"216","/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/LoginInput.js":"217","/Users/codabae/Documents/ci work/heala/DProject/src/styles/loginPageStyles.js":"218","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/AddEditHMOModal.js":"219","/Users/codabae/Documents/ci work/heala/DProject/src/store/reducers/index.js":"220","/Users/codabae/Documents/ci work/heala/DProject/src/store/reducers/hcpReducer.js":"221","/Users/codabae/Documents/ci work/heala/DProject/src/store/reducers/tablesReducer.js":"222","/Users/codabae/Documents/ci work/heala/DProject/src/store/reducers/patientReducer.js":"223","/Users/codabae/Documents/ci work/heala/DProject/src/store/reducers/authReducer.js":"224","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/AddEditHMOForm.js":"225"},{"size":2346,"mtime":1661666214000,"results":"226","hashOfConfig":"227"},{"size":156,"mtime":1661666214000,"results":"228","hashOfConfig":"227"},{"size":4914,"mtime":1661865958935,"results":"229","hashOfConfig":"227"},{"size":37,"mtime":1661666214000,"results":"230","hashOfConfig":"227"},{"size":7641,"mtime":1661666214000,"results":"231","hashOfConfig":"227"},{"size":553,"mtime":1661666214000,"results":"232","hashOfConfig":"227"},{"size":3679,"mtime":1661866575085,"results":"233","hashOfConfig":"227"},{"size":18375,"mtime":1661666214000,"results":"234","hashOfConfig":"227"},{"size":2962,"mtime":1661666214000,"results":"235","hashOfConfig":"227"},{"size":1139,"mtime":1661666214000,"results":"236","hashOfConfig":"227"},{"size":831,"mtime":1661843891461,"results":"237","hashOfConfig":"227"},{"size":3996,"mtime":1661666214000,"results":"238","hashOfConfig":"227"},{"size":1945,"mtime":1661666214000,"results":"239","hashOfConfig":"227"},{"size":530,"mtime":1661666214000,"results":"240","hashOfConfig":"227"},{"size":2437,"mtime":1661666214000,"results":"241","hashOfConfig":"227"},{"size":2455,"mtime":1661666214000,"results":"242","hashOfConfig":"227"},{"size":425,"mtime":1661666214000,"results":"243","hashOfConfig":"227"},{"size":1905,"mtime":1661666214000,"results":"244","hashOfConfig":"227"},{"size":1533,"mtime":1661843891458,"results":"245","hashOfConfig":"227"},{"size":1812,"mtime":1661666214000,"results":"246","hashOfConfig":"227"},{"size":8598,"mtime":1661666214000,"results":"247","hashOfConfig":"227"},{"size":1390,"mtime":1661666214000,"results":"248","hashOfConfig":"227"},{"size":6207,"mtime":1661843891462,"results":"249","hashOfConfig":"227"},{"size":8594,"mtime":1661666214000,"results":"250","hashOfConfig":"227"},{"size":256,"mtime":1661666214000,"results":"251","hashOfConfig":"227"},{"size":931,"mtime":1661666214000,"results":"252","hashOfConfig":"227"},{"size":4386,"mtime":1661666214000,"results":"253","hashOfConfig":"227"},{"size":4456,"mtime":1661666214000,"results":"254","hashOfConfig":"227"},{"size":3614,"mtime":1661666214000,"results":"255","hashOfConfig":"227"},{"size":3091,"mtime":1661666214000,"results":"256","hashOfConfig":"227"},{"size":8880,"mtime":1661666214000,"results":"257","hashOfConfig":"227"},{"size":5259,"mtime":1661666214000,"results":"258","hashOfConfig":"227"},{"size":1593,"mtime":1661666214000,"results":"259","hashOfConfig":"227"},{"size":9185,"mtime":1661666214000,"results":"260","hashOfConfig":"227"},{"size":7387,"mtime":1661666214000,"results":"261","hashOfConfig":"227"},{"size":81,"mtime":1661666214000,"results":"262","hashOfConfig":"227"},{"size":30856,"mtime":1661843891459,"results":"263","hashOfConfig":"227"},{"size":7873,"mtime":1661862543857,"results":"264","hashOfConfig":"227"},{"size":5062,"mtime":1661666214000,"results":"265","hashOfConfig":"227"},{"size":4609,"mtime":1661666214000,"results":"266","hashOfConfig":"227"},{"size":3384,"mtime":1661666214000,"results":"267","hashOfConfig":"227"},{"size":664,"mtime":1661666214000,"results":"268","hashOfConfig":"227"},{"size":4345,"mtime":1661666214000,"results":"269","hashOfConfig":"227"},{"size":2850,"mtime":1661666214000,"results":"270","hashOfConfig":"227"},{"size":2720,"mtime":1661666214000,"results":"271","hashOfConfig":"227"},{"size":3820,"mtime":1661666214000,"results":"272","hashOfConfig":"227"},{"size":2495,"mtime":1661666214000,"results":"273","hashOfConfig":"227"},{"size":4154,"mtime":1661862543856,"results":"274","hashOfConfig":"227"},{"size":2468,"mtime":1661666214000,"results":"275","hashOfConfig":"227"},{"size":1817,"mtime":1661666214000,"results":"276","hashOfConfig":"227"},{"size":203,"mtime":1661666214000,"results":"277","hashOfConfig":"227"},{"size":4693,"mtime":1661666214000,"results":"278","hashOfConfig":"227"},{"size":2766,"mtime":1661666214000,"results":"279","hashOfConfig":"227"},{"size":247,"mtime":1661666214000,"results":"280","hashOfConfig":"227"},{"size":1610,"mtime":1661666214000,"results":"281","hashOfConfig":"227"},{"size":1871,"mtime":1661666214000,"results":"282","hashOfConfig":"227"},{"size":2397,"mtime":1661666214000,"results":"283","hashOfConfig":"227"},{"size":6253,"mtime":1661666214000,"results":"284","hashOfConfig":"227"},{"size":1920,"mtime":1661666214000,"results":"285","hashOfConfig":"227"},{"size":2899,"mtime":1661666214000,"results":"286","hashOfConfig":"227"},{"size":7879,"mtime":1661666214000,"results":"287","hashOfConfig":"227"},{"size":5946,"mtime":1661666214000,"results":"288","hashOfConfig":"227"},{"size":730,"mtime":1661666214000,"results":"289","hashOfConfig":"227"},{"size":6008,"mtime":1661666214000,"results":"290","hashOfConfig":"227"},{"size":2181,"mtime":1661666214000,"results":"291","hashOfConfig":"227"},{"size":7392,"mtime":1661666214000,"results":"292","hashOfConfig":"227"},{"size":3678,"mtime":1661843891457,"results":"293","hashOfConfig":"227"},{"size":2394,"mtime":1661666214000,"results":"294","hashOfConfig":"227"},{"size":255,"mtime":1661666214000,"results":"295","hashOfConfig":"227"},{"size":428,"mtime":1661666214000,"results":"296","hashOfConfig":"227"},{"size":678,"mtime":1661666214000,"results":"297","hashOfConfig":"227"},{"size":1153,"mtime":1661666214000,"results":"298","hashOfConfig":"227"},{"size":814,"mtime":1661666214000,"results":"299","hashOfConfig":"227"},{"size":1106,"mtime":1661666214000,"results":"300","hashOfConfig":"227"},{"size":901,"mtime":1661666214000,"results":"301","hashOfConfig":"227"},{"size":1123,"mtime":1661666214000,"results":"302","hashOfConfig":"227"},{"size":993,"mtime":1661666214000,"results":"303","hashOfConfig":"227"},{"size":1977,"mtime":1661666214000,"results":"304","hashOfConfig":"227"},{"size":1708,"mtime":1661666214000,"results":"305","hashOfConfig":"227"},{"size":490,"mtime":1661666214000,"results":"306","hashOfConfig":"227"},{"size":1209,"mtime":1661666214000,"results":"307","hashOfConfig":"227"},{"size":2118,"mtime":1661666214000,"results":"308","hashOfConfig":"227"},{"size":1592,"mtime":1661666214000,"results":"309","hashOfConfig":"227"},{"size":1927,"mtime":1661666214000,"results":"310","hashOfConfig":"227"},{"size":4703,"mtime":1661666214000,"results":"311","hashOfConfig":"227"},{"size":2276,"mtime":1661666214000,"results":"312","hashOfConfig":"227"},{"size":2280,"mtime":1661666214000,"results":"313","hashOfConfig":"227"},{"size":808,"mtime":1661666214000,"results":"314","hashOfConfig":"227"},{"size":1025,"mtime":1661666214000,"results":"315","hashOfConfig":"227"},{"size":225,"mtime":1661666214000,"results":"316","hashOfConfig":"227"},{"size":2032,"mtime":1661666214000,"results":"317","hashOfConfig":"227"},{"size":881,"mtime":1661666214000,"results":"318","hashOfConfig":"227"},{"size":771,"mtime":1661666214000,"results":"319","hashOfConfig":"227"},{"size":857,"mtime":1661666214000,"results":"320","hashOfConfig":"227"},{"size":208,"mtime":1661666214000,"results":"321","hashOfConfig":"227"},{"size":527,"mtime":1661666214000,"results":"322","hashOfConfig":"227"},{"size":7654,"mtime":1661666214000,"results":"323","hashOfConfig":"227"},{"size":7605,"mtime":1661666214000,"results":"324","hashOfConfig":"227"},{"size":1898,"mtime":1661666214000,"results":"325","hashOfConfig":"227"},{"size":4923,"mtime":1661666214000,"results":"326","hashOfConfig":"227"},{"size":4110,"mtime":1661865958936,"results":"327","hashOfConfig":"227"},{"size":5619,"mtime":1661666214000,"results":"328","hashOfConfig":"227"},{"size":2938,"mtime":1661666214000,"results":"329","hashOfConfig":"227"},{"size":17074,"mtime":1661866942689,"results":"330","hashOfConfig":"227"},{"size":1666,"mtime":1661666214000,"results":"331","hashOfConfig":"227"},{"size":791,"mtime":1661666214000,"results":"332","hashOfConfig":"227"},{"size":2200,"mtime":1661666214000,"results":"333","hashOfConfig":"227"},{"size":2864,"mtime":1661666214000,"results":"334","hashOfConfig":"227"},{"size":732,"mtime":1661666214000,"results":"335","hashOfConfig":"227"},{"size":2244,"mtime":1661666214000,"results":"336","hashOfConfig":"227"},{"size":4523,"mtime":1661843891460,"results":"337","hashOfConfig":"227"},{"size":11592,"mtime":1661862543859,"results":"338","hashOfConfig":"227"},{"size":1061,"mtime":1661666214000,"results":"339","hashOfConfig":"227"},{"size":457,"mtime":1661666214000,"results":"340","hashOfConfig":"227"},{"size":1211,"mtime":1661666214000,"results":"341","hashOfConfig":"227"},{"size":1413,"mtime":1661666214000,"results":"342","hashOfConfig":"227"},{"size":928,"mtime":1661666214000,"results":"343","hashOfConfig":"227"},{"size":3787,"mtime":1661666214000,"results":"344","hashOfConfig":"227"},{"size":1854,"mtime":1661666214000,"results":"345","hashOfConfig":"227"},{"size":14776,"mtime":1661865990919,"results":"346","hashOfConfig":"227"},{"size":3869,"mtime":1661866583550,"results":"347","hashOfConfig":"227"},{"size":7412,"mtime":1661862543856,"results":"348","hashOfConfig":"227"},{"size":3656,"mtime":1661666214000,"results":"349","hashOfConfig":"227"},{"size":1944,"mtime":1661666214000,"results":"350","hashOfConfig":"227"},{"size":3389,"mtime":1661666214000,"results":"351","hashOfConfig":"227"},{"size":1100,"mtime":1661666214000,"results":"352","hashOfConfig":"227"},{"size":1281,"mtime":1661666214000,"results":"353","hashOfConfig":"227"},{"size":2343,"mtime":1661666214000,"results":"354","hashOfConfig":"227"},{"size":736,"mtime":1661666214000,"results":"355","hashOfConfig":"227"},{"size":8884,"mtime":1661666214000,"results":"356","hashOfConfig":"227"},{"size":7221,"mtime":1661666214000,"results":"357","hashOfConfig":"227"},{"size":4023,"mtime":1661666214000,"results":"358","hashOfConfig":"227"},{"size":15016,"mtime":1661666214000,"results":"359","hashOfConfig":"227"},{"size":23355,"mtime":1661666214000,"results":"360","hashOfConfig":"227"},{"size":2468,"mtime":1661666214000,"results":"361","hashOfConfig":"227"},{"size":10630,"mtime":1661666214000,"results":"362","hashOfConfig":"227"},{"size":11108,"mtime":1661666214000,"results":"363","hashOfConfig":"227"},{"size":7355,"mtime":1661666214000,"results":"364","hashOfConfig":"227"},{"size":6934,"mtime":1661666214000,"results":"365","hashOfConfig":"227"},{"size":3215,"mtime":1661666214000,"results":"366","hashOfConfig":"227"},{"size":11358,"mtime":1661666214000,"results":"367","hashOfConfig":"227"},{"size":14786,"mtime":1661666214000,"results":"368","hashOfConfig":"227"},{"size":7941,"mtime":1661666214000,"results":"369","hashOfConfig":"227"},{"size":2975,"mtime":1661666214000,"results":"370","hashOfConfig":"227"},{"size":15984,"mtime":1661666214000,"results":"371","hashOfConfig":"227"},{"size":7078,"mtime":1661666214000,"results":"372","hashOfConfig":"227"},{"size":6000,"mtime":1661666214000,"results":"373","hashOfConfig":"227"},{"size":19640,"mtime":1661666214000,"results":"374","hashOfConfig":"227"},{"size":24888,"mtime":1661666214000,"results":"375","hashOfConfig":"227"},{"size":10458,"mtime":1661843891462,"results":"376","hashOfConfig":"227"},{"size":5347,"mtime":1661666214000,"results":"377","hashOfConfig":"227"},{"size":4910,"mtime":1661666214000,"results":"378","hashOfConfig":"227"},{"size":9824,"mtime":1661666214000,"results":"379","hashOfConfig":"227"},{"size":7572,"mtime":1661666214000,"results":"380","hashOfConfig":"227"},{"size":7642,"mtime":1661666214000,"results":"381","hashOfConfig":"227"},{"size":2484,"mtime":1661666214000,"results":"382","hashOfConfig":"227"},{"size":1010,"mtime":1661666214000,"results":"383","hashOfConfig":"227"},{"size":2021,"mtime":1661666214000,"results":"384","hashOfConfig":"227"},{"size":885,"mtime":1661666214000,"results":"385","hashOfConfig":"227"},{"size":4444,"mtime":1661666214000,"results":"386","hashOfConfig":"227"},{"size":1944,"mtime":1661666214000,"results":"387","hashOfConfig":"227"},{"size":2576,"mtime":1661666214000,"results":"388","hashOfConfig":"227"},{"size":6282,"mtime":1661666214000,"results":"389","hashOfConfig":"227"},{"size":3930,"mtime":1661666214000,"results":"390","hashOfConfig":"227"},{"size":402,"mtime":1661666214000,"results":"391","hashOfConfig":"227"},{"size":12640,"mtime":1661666214000,"results":"392","hashOfConfig":"227"},{"size":4258,"mtime":1661666214000,"results":"393","hashOfConfig":"227"},{"size":17976,"mtime":1661666214000,"results":"394","hashOfConfig":"227"},{"size":9091,"mtime":1661666214000,"results":"395","hashOfConfig":"227"},{"size":6854,"mtime":1661666214000,"results":"396","hashOfConfig":"227"},{"size":7276,"mtime":1661666214000,"results":"397","hashOfConfig":"227"},{"size":11481,"mtime":1661666214000,"results":"398","hashOfConfig":"227"},{"size":9175,"mtime":1661666214000,"results":"399","hashOfConfig":"227"},{"size":1562,"mtime":1661666214000,"results":"400","hashOfConfig":"227"},{"size":22512,"mtime":1661666214000,"results":"401","hashOfConfig":"227"},{"size":12267,"mtime":1661666214000,"results":"402","hashOfConfig":"227"},{"size":11123,"mtime":1661666214000,"results":"403","hashOfConfig":"227"},{"size":9626,"mtime":1661666214000,"results":"404","hashOfConfig":"227"},{"size":10222,"mtime":1661666214000,"results":"405","hashOfConfig":"227"},{"size":8447,"mtime":1661666214000,"results":"406","hashOfConfig":"227"},{"size":7272,"mtime":1661666214000,"results":"407","hashOfConfig":"227"},{"size":11063,"mtime":1661666214000,"results":"408","hashOfConfig":"227"},{"size":26518,"mtime":1661666214000,"results":"409","hashOfConfig":"227"},{"size":8334,"mtime":1661666214000,"results":"410","hashOfConfig":"227"},{"size":9171,"mtime":1661666214000,"results":"411","hashOfConfig":"227"},{"size":2284,"mtime":1661666214000,"results":"412","hashOfConfig":"227"},{"size":22492,"mtime":1661666214000,"results":"413","hashOfConfig":"227"},{"size":13008,"mtime":1661666214000,"results":"414","hashOfConfig":"227"},{"size":3229,"mtime":1661666214000,"results":"415","hashOfConfig":"227"},{"size":10827,"mtime":1661843891461,"results":"416","hashOfConfig":"227"},{"size":2196,"mtime":1661865958936,"results":"417","hashOfConfig":"227"},{"size":19075,"mtime":1661666214000,"results":"418","hashOfConfig":"227"},{"size":8255,"mtime":1661666214000,"results":"419","hashOfConfig":"227"},{"size":481,"mtime":1661666214000,"results":"420","hashOfConfig":"227"},{"size":3683,"mtime":1661666214000,"results":"421","hashOfConfig":"227"},{"size":4170,"mtime":1661666214000,"results":"422","hashOfConfig":"227"},{"size":1593,"mtime":1661666214000,"results":"423","hashOfConfig":"227"},{"size":5786,"mtime":1661666214000,"results":"424","hashOfConfig":"227"},{"size":4589,"mtime":1661666214000,"results":"425","hashOfConfig":"227"},{"size":4006,"mtime":1661666214000,"results":"426","hashOfConfig":"227"},{"size":3201,"mtime":1661666214000,"results":"427","hashOfConfig":"227"},{"size":1253,"mtime":1661666214000,"results":"428","hashOfConfig":"227"},{"size":4704,"mtime":1661666214000,"results":"429","hashOfConfig":"227"},{"size":863,"mtime":1661666214000,"results":"430","hashOfConfig":"227"},{"size":290,"mtime":1661666214000,"results":"431","hashOfConfig":"227"},{"size":2492,"mtime":1661666214000,"results":"432","hashOfConfig":"227"},{"size":913,"mtime":1661666214000,"results":"433","hashOfConfig":"227"},{"size":717,"mtime":1661666214000,"results":"434","hashOfConfig":"227"},{"size":2203,"mtime":1661666214000,"results":"435","hashOfConfig":"227"},{"size":747,"mtime":1661666214000,"results":"436","hashOfConfig":"227"},{"size":1392,"mtime":1661666214000,"results":"437","hashOfConfig":"227"},{"size":158,"mtime":1661666214000,"results":"438","hashOfConfig":"227"},{"size":7542,"mtime":1661666214000,"results":"439","hashOfConfig":"227"},{"size":942,"mtime":1661666214000,"results":"440","hashOfConfig":"227"},{"size":1672,"mtime":1661666214000,"results":"441","hashOfConfig":"227"},{"size":1223,"mtime":1661666214000,"results":"442","hashOfConfig":"227"},{"size":2393,"mtime":1661666214000,"results":"443","hashOfConfig":"227"},{"size":1796,"mtime":1661666214000,"results":"444","hashOfConfig":"227"},{"size":2781,"mtime":1661666214000,"results":"445","hashOfConfig":"227"},{"size":371,"mtime":1661666214000,"results":"446","hashOfConfig":"227"},{"size":375,"mtime":1661666214000,"results":"447","hashOfConfig":"227"},{"size":770,"mtime":1661666214000,"results":"448","hashOfConfig":"227"},{"size":384,"mtime":1661666214000,"results":"449","hashOfConfig":"227"},{"size":2126,"mtime":1661666214000,"results":"450","hashOfConfig":"227"},{"size":5414,"mtime":1661666214000,"results":"451","hashOfConfig":"227"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"15cz30e",{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"456","messages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"458","messages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"460","messages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"462","messages":"463","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"464","messages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"468","messages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"470","messages":"471","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"472","messages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"474","messages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"476","messages":"477","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"478"},{"filePath":"479","messages":"480","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"481","messages":"482","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"483","messages":"484","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"485","messages":"486","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"487","messages":"488","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"489","messages":"490","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"491","messages":"492","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"495","messages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"497","messages":"498","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"499","messages":"500","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"501","messages":"502","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"503","messages":"504","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"505","messages":"506","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"507","messages":"508","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"509","messages":"510","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"511","messages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"513","messages":"514","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"515","messages":"516","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"517","messages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"521","messages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"523","messages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"525","messages":"526","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"527","messages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"531","messages":"532","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"537","messages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"539","messages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"541","messages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"545","messages":"546","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"549","messages":"550","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"551","messages":"552","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"557","messages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559"},{"filePath":"560","messages":"561","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"562","messages":"563","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"564","messages":"565","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"566","messages":"567","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"568","messages":"569","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"570","messages":"571","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"572","messages":"573","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"574","messages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"576","messages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"578","messages":"579","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"580","messages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"582","messages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"584","messages":"585","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"586","messages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"588","messages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"590","messages":"591","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"592","messages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"594","messages":"595","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"596","messages":"597","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"598","messages":"599","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"600","messages":"601","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"602","messages":"603","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"604","messages":"605","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"606","messages":"607","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"608","messages":"609","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"610","messages":"611","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"612","messages":"613","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"614","messages":"615","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"616","messages":"617","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"618","messages":"619","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"620","messages":"621","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"622","messages":"623","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"624","messages":"625","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"626","messages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"628","messages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"630","messages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"632","messages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"634","messages":"635","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"636","messages":"637","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"638","messages":"639","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"640","messages":"641","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"642","messages":"643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"644","messages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"646","messages":"647","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"648","messages":"649","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"650","messages":"651","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"652","messages":"653","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"654","messages":"655","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"656"},{"filePath":"657","messages":"658","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"659"},{"filePath":"660","messages":"661","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"662","messages":"663","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"664"},{"filePath":"665","messages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"667","messages":"668","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"669","messages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"671","messages":"672","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"673","messages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"675","messages":"676","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"677","messages":"678","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"679","messages":"680","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"681"},{"filePath":"682","messages":"683","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"684","messages":"685","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"686","messages":"687","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"688","messages":"689","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"690","messages":"691","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"692","messages":"693","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"694","messages":"695","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"696"},{"filePath":"697","messages":"698","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"699"},{"filePath":"700","messages":"701","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"702","messages":"703","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"704","messages":"705","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"706","messages":"707","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"708","messages":"709","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"710","messages":"711","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"712","messages":"713","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"714","messages":"715","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"716","messages":"717","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"718","messages":"719","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"720","messages":"721","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"722","messages":"723","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"724","messages":"725","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"726","messages":"727","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"728","messages":"729","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"730","messages":"731","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"732","messages":"733","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"734","messages":"735","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"736","messages":"737","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"738","messages":"739","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"740","messages":"741","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"742","messages":"743","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"744"},{"filePath":"745","messages":"746","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"747","messages":"748","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"749","messages":"750","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"751","messages":"752","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"753","messages":"754","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"755"},{"filePath":"756","messages":"757","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"758"},{"filePath":"759","messages":"760","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"761"},{"filePath":"762","messages":"763","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"764","messages":"765","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"766","messages":"767","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"768","messages":"769","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"770","messages":"771","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"772","messages":"773","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"774","messages":"775","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"776","messages":"777","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"778","messages":"779","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"780","messages":"781","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"782","messages":"783","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"784"},{"filePath":"785","messages":"786","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"787","messages":"788","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"789","messages":"790","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"791","messages":"792","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"793","messages":"794","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"795","messages":"796","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"797","messages":"798","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"799","messages":"800","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"801","messages":"802","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"803"},{"filePath":"804","messages":"805","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"806"},{"filePath":"807","messages":"808","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"809","messages":"810","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"811"},{"filePath":"812","messages":"813","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"814","messages":"815","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"816"},{"filePath":"817","messages":"818","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"819","messages":"820","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"821","messages":"822","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"823","messages":"824","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"825","messages":"826","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"827","messages":"828","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"829","messages":"830","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"831","messages":"832","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"833","messages":"834","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"835","messages":"836","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"837","messages":"838","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"839"},{"filePath":"840","messages":"841","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"842","messages":"843","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"844","messages":"845","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"846","messages":"847","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"848","messages":"849","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"850","messages":"851","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"852"},{"filePath":"853","messages":"854","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"855"},{"filePath":"856","messages":"857","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"858","messages":"859","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"860","messages":"861","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"862","messages":"863","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"864","messages":"865","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"866","messages":"867","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"868","messages":"869","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"870","messages":"871","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"872","messages":"873","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"874","messages":"875","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"876","messages":"877","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"878","messages":"879","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"880","messages":"881","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"882","messages":"883","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"884","messages":"885","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"886","messages":"887","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"888","messages":"889","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"890","messages":"891","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"892","messages":"893","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"894","messages":"895","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"896","messages":"897","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"898","messages":"899","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"900","messages":"901","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"902","messages":"903","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"904","messages":"905","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"906","messages":"907","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"908","messages":"909","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"910","messages":"911","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"912","messages":"913","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"914","messages":"915","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"916","messages":"917","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"918","messages":"919","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"920","messages":"921","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/codabae/Documents/ci work/heala/DProject/src/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/accessToken.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/App.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/routes/Routes.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/hooks/useActions.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/muiTheme.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/graphQL/Mutation.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/WaitingListDetails.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/WhiteLabel.js",["922"],"import React from \"react\";\nimport { Grid } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { ReactComponent as Administrator } from \"assets/images/administrator.svg\";\nimport { ReactComponent as ConsulationIcon } from \"assets/images/consultation.svg\";\nimport { Card } from \"components/Utilities\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { Link } from \"react-router-dom\";\n\nconst useStyles = makeStyles((theme) => ({\n  parentGrid: {\n    textDecoration: \"none\",\n    color: theme.palette.primary.main,\n\n    \"& > .MuiGrid-root.MuiGrid-container\": {\n      backgroundColor: \"#ffffff\",\n    },\n  },\n}));\n\nconst WhiteLabel = () => {\n  const theme = useTheme();\n  const classes = useStyles();\n\n  return (\n    <>\n      <Grid\n        container\n        alignItems=\"space-between\"\n        gap=\"5rem\"\n        paddingY=\"2rem\"\n        justifyContent={{ sm: \"center\", md: \"center\" }}\n      >\n        <Grid item container md={5} sm={5} xs={12}>\n          <Grid item container flexDirection=\"column\">\n            <Link to=\"/label/provider\" style={{ textDecoration: \"none\" }}>\n              <Card\n                alt=\"providers \"\n                title=\"Providers\"\n                background={theme.palette.common.lightGreen}\n              >\n                <Administrator fill={theme.palette.common.green} />\n              </Card>\n            </Link>\n          </Grid>\n        </Grid>\n        <Grid item container md={5} sm={5} xs={12}>\n          <Grid item container flexDirection=\"column\">\n            <Link to=\"/label/types\" style={{ textDecoration: \"none\" }}>\n              <Card\n                alt=\"User Types\"\n                title=\"User Types\"\n                background={theme.palette.common.lightRed}\n              >\n                <ConsulationIcon fill={theme.palette.common.red} />\n              </Card>\n            </Link>\n          </Grid>\n        </Grid>\n      </Grid>\n    </>\n  );\n};\n\nexport default WhiteLabel;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Backdrop.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HmoPlans.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HealaPlans.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Hospitals.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/SearchInput.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/CircularProgress.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/SubscriptionPlans.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/SubscriptionIncome.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ListManagment.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/SingleHMO.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/TestList.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/action-creators/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/TableLayout.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/CreateEditPlans.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/CreateEditHMOPlans.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Tables/HospitalsTable.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/UploadEnrolleeListForm.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Tables/SingleHMOTable.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/cards/InfoCard.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/cards/SettingsCard.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/helpers/filterHelperFunctions.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/helpers/mockData.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/helpers/isSelected.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/graphQL/useQuery.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/tableHeaders.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/EnhancedTable.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/EditTestForm.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/AddTestForm.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/helpers/selectedRows.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/DeleteOrDisable.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/AddEditHMOEnrolleeModal.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/UploadListModal.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/ConfirmModal.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/MainModal.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Time.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/hooks/useAlert.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Rows/TestListRow.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/action-creators/hcp.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/DragAndDrop.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/helpers/func.js",["923","924"],"import { format } from \"date-fns\";\nimport moment from \"moment\";\n\nexport const arrangeItems = (array) => {\n  let finalArray = [];\n  let n = 0;\n  let arrayValues = [];\n  let arrayObject = {};\n  arrayObject.name = undefined;\n\n  // array.sort();\n  array.forEach((element) => {\n    let container = element.split(\":\");\n    if (arrayObject.name == container[0]) {\n      arrayValues.push(container[1]);\n      arrayObject.value = arrayValues;\n    } else {\n      finalArray[n] = arrayObject;\n      arrayValues = [];\n      arrayObject = {};\n      arrayObject.name = container[0];\n      arrayValues.push(container[1]);\n      arrayObject.value = arrayValues;\n      n += 1;\n    }\n  });\n  finalArray.shift();\n  return finalArray;\n};\n\nexport const removeEmptyStringValues = (obj) => {\n  try {\n    let newObj = {};\n    for (const key in obj) {\n      if (obj[key] !== \"\") {\n        newObj[key] = obj[key];\n      }\n    }\n    return newObj;\n  } catch (err) {\n    console.err(\"error from removeEmptyStringValues FN\", err);\n    return obj;\n  }\n};\n\nexport const setSideNav = (appNavData, pathname, setNav) => {\n  try {\n    const pathArr = pathname.split(\"/\");\n    if (pathArr.length < 2) {\n      setNav(0);\n      return;\n    }\n\n    appNavData.map((data) => {\n      if (data.path === `/${pathArr[1]}`) {\n        setNav(data?.id);\n      }\n    });\n  } catch (error) {\n    console.log(\"Something sent wrong with setSideNav FN\", error);\n  }\n};\n\nexport const dateMoment = (dateString) => {\n  const formatedDate = moment(dateString).utc().format(\"YYYY-MM-DD\");\n  if (formatedDate === \"Invalid date\") {\n    return null;\n  } else {\n    return formatedDate;\n  }\n};\n\nexport const getSearchPlaceholder = (filterBy) => {\n  return filterBy === \"id\"\n    ? \"Search by ID e.g 7NE6ELLO\"\n    : filterBy === \"firstName\"\n    ? \"Search by first name e.g John\"\n    : filterBy === \"lastName\"\n    ? \"Search by last name e.g Doe\"\n    : \"\";\n};\n\nexport const getDynamicSearchPlaceholder = (\n  filterBy,\n  obj = { hmoId: \"Search by HMO ID\" }\n) => {\n  let placeHolder = \"\";\n  Object.keys(obj).forEach((key) => {\n    if (key === filterBy) placeHolder = obj[key];\n  });\n  return placeHolder;\n};\n\nexport const getInitials = (name) => {\n  try {\n    const splitedNamesArr = name.split(\" \");\n\n    const initailsArr = splitedNamesArr.map((name) => {\n      const splitedNameArr = name.split(\"\");\n      return splitedNameArr[0];\n    });\n\n    return initailsArr.join(\"\");\n  } catch (error) {\n    console.error(\"error from getInitials func.\", error);\n    return \"\";\n  }\n};\n\nexport const formatDate = (date, formatType) => {\n  try {\n    const parsedDate = Date.parse(date);\n    const formatedDate = format(parsedDate, formatType);\n    return formatedDate;\n  } catch (error) {\n    console.error(error);\n    return \"No date\";\n  }\n};\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/graphQL/fragment.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/EnhancedTableToolbar.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/styles/patientsPageStyles.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/EnhancedTableHeader.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/helpers/validationSchemas.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Rows/HospitalRow.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/CompoundSearch.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/EnrolleeProfileModal.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Rows/SingleHMORow.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/styles/hmoPageStyles.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Select.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/UploadListForm.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/AddEditHMOEnrolleeForm.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/Filters/SingleHMOFilters.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Buttons/EditDelBtn.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/TextError.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/action-types/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/Filters/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/ProfileInfo.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Calendar.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/FormikControl.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/StatusPill.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/MessageAddIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/VerifiedIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/Calender2.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/ChervonDownIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Buttons/CloseBtn.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/deleteIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/EditIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/DateTimePicker.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/File.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Textarea.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Date.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Checkboxs.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/Input.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Typography.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/CallIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/SmsIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/styles/hospitalPageStyles.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/action-creators/auth.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/action-creators/patient.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/action-creators/tablesActions.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Tables/PlansTable.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Tables/HMOPlansTable.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/EmptyTable.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/WaitingListTable.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/CardItem.js",["925","926"],"import React from \"react\";\nimport { Card, Grid, Typography } from \"@mui/material\";\nimport ArrowUpwardIcon from \"@mui/icons-material/ArrowUpward\";\nimport PropTypes from \"prop-types\";\nimport { ArrowDownwardOutlined } from \"@mui/icons-material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { ReactComponent as DoctorIcon } from \"assets/images/totalC.svg\";\n// import { ReactComponent as Hug } from \"assets/images/hug.svg\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { ReactComponent as ConsulationIcon } from \"assets/images/consultation.svg\";\nimport { roundUp } from \"components/Utilities/Time\";\nconst useStyles = makeStyles((theme) => ({\n  grid: {\n    \"&.MuiGrid-item\": {\n      paddingLeft: \"0\",\n    },\n  },\n}));\nconst CardItem = ({ value }) => {\n  const theme = useTheme();\n  const { name, value: val, id, percentageValue, icon } = value;\n  const percent = roundUp(percentageValue);\n  const classes = useStyles();\n\n  return (\n    <Card\n      variant=\"outlined\"\n      width=\"100%\"\n      xs={3}\n      sx={{\n        padding: \"22px 20px\",\n        borderRadius: \"15px\",\n        borderColor: \"transparent\",\n      }}\n    >\n      <Grid\n        item\n        container\n        gap=\"1rem\"\n        flexDirection={{ xs: \"row\", sm: \"row\", md: \"row\" }}\n      >\n        <Grid\n          item\n          sx={{\n            height: \"5.4rem\",\n            width: \"5.4rem\",\n            borderRadius: \"100%\",\n            display: \"flex\",\n            alignItems: \"center\",\n            justifyContent: \"center\",\n          }}\n        >\n          {icon}\n        </Grid>\n        <Grid item>\n          <Grid container flexDirection=\"column\" spacing={1}>\n            <Grid item>\n              <Typography\n                sx={{\n                  fontSize: \"1.2rem\",\n                  fontWeight: 400,\n                  lineHeight: 1.5,\n                  color: \"#757886\",\n                }}\n              >\n                {name}\n              </Typography>\n            </Grid>\n            <Grid item className={classes.grid}>\n              <Grid\n                container\n                gap={1}\n                alignItems=\"center\"\n                sx={{\n                  padding: \"3px 8px\",\n                }}\n              >\n                <Typography\n                  sx={{\n                    fontWeight: \"600\",\n                    fontSize: \"24px\",\n                    lineHeight: \"24px\",\n                    letterSpacing: \"-0.28px\",\n\n                    color: \"#2D2F39\",\n                  }}\n                >\n                  {val}\n                </Typography>\n\n                {id < 3 && (\n                  <Grid\n                    item\n                    sx={{\n                      borderRadius: \"100px\",\n                      color:\n                        percentageValue < 1\n                          ? \"#ED3237\"\n                          : theme.palette.success.main,\n                      backgroundColor:\n                        percentageValue < 1\n                          ? \"rgba(237, 50, 55, 0.1)\"\n                          : \"rgba(62, 165, 132, 0.1)\",\n                      padding: \"3px 8px\",\n                    }}\n                  >\n                    <Grid container alignItems=\"center\" justifyContent=\"center\">\n                      <Typography\n                        variant=\"span\"\n                        sx={{ fontWeight: 500, fontSize: \"1rem\" }}\n                      >\n                        {percent}\n                      </Typography>\n                      {percentageValue < 1 ? (\n                        <ArrowDownwardOutlined\n                          sx={{ color: \"inherit\", fontSize: \"1rem\" }}\n                        />\n                      ) : (\n                        <ArrowUpwardIcon\n                          sx={{ color: \"inherit\", fontSize: \"1rem\" }}\n                        />\n                      )}\n                    </Grid>\n                  </Grid>\n                )}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n    </Card>\n  );\n};\nCardItem.propTypes = {\n  value: PropTypes.object,\n};\n\nexport default CardItem;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/SideMenu.js",["927"],"import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@mui/styles\";\nimport {\n  List,\n  ListItemText,\n  ListItemButton,\n  ListItemIcon,\n  Grid,\n} from \"@mui/material\";\n\nimport logo from \"assets/images/logo.svg\";\nimport { setSideNav } from \"helpers/func\";\nimport { useMutation } from \"@apollo/client\";\nimport { Link, useLocation } from \"react-router-dom\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { LOGOUT_USER } from \"components/graphQL/Mutation\";\nimport DeleteOrDisable from \"components/modals/DeleteOrDisable\";\nimport LogoutIcon from \"components/Icons/LogoutIcon\";\nimport { menus } from \"helpers/asideMenus\";\n\nconst SideMenu = (props) => {\n  const { drawerWidth } = props;\n  const location = useLocation();\n  const { logout } = useActions();\n  const [Logout, setLogout] = useState(false);\n  const [logout_user] = useMutation(LOGOUT_USER);\n  const [selectedMenu, setSelectedMenu] = React.useState(0);\n\n  const useStyles = makeStyles((theme) => ({\n    aside: {\n      /* width: `${drawerWidth}`, */\n      width: \"280px\",\n      background: \"#fff\",\n      paddingLeft: \"2em\",\n      paddingRight: \"2em\",\n      paddingTop: \"1em\",\n      minHeight: \"100vh\",\n      height: \"100%\",\n      position: \"fixed\",\n      overflowY: \"hidden\",\n      zIndex: theme.zIndex.appBar + 1,\n\n      \"&:hover\": {\n        overflowY: \"scroll\",\n      },\n\n      \"& .MuiListItemButton-root\": {\n        display: \"flex\",\n        borderRadius: \"10px\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n        marginBottom: \"1em\",\n        padding: \"14px\",\n\n        \"&:hover\": {\n          background: theme.palette.common.lightBlue,\n\n          \"& .MuiSvgIcon-root\": {\n            color: theme.palette.common.blue,\n          },\n\n          \"& .MuiTypography-root\": {\n            color: theme.palette.common.blue,\n          },\n\n          \"& .message-icon\": {\n            color: theme.palette.common.blue,\n          },\n        },\n      },\n\n      \"& .MuiListItemIcon-root\": {\n        display: \"flex\",\n        alignItems: \"center\",\n        minWidth: 22,\n      },\n\n      \"& .MuiSvgIcon-root\": {\n        fontSize: \"2rem\",\n\n        \"&:hover\": {\n          color: theme.palette.common.red,\n        },\n      },\n\n      \"& .MuiTypography-root\": {\n        fontStyle: \"normal\",\n        fontWeight: 400,\n        fontSize: \"14px\",\n        lineHeight: \"20px\",\n        color: theme.palette.common.gray,\n      },\n\n      \"& .MuiListItemButton-root.Mui-selected\": {\n        backgroundColor: theme.palette.common.lightBlue,\n        color: theme.palette.common.blue,\n\n        \"&:hover\": {\n          backgroundColor: theme.palette.common.lightRed,\n        },\n\n        \"& .MuiListItemIcon-root\": {\n          color: theme.palette.common.red,\n        },\n\n        \"& .MuiTypography-root\": {\n          color: theme.palette.common.red,\n          fontWeight: 500,\n        },\n      },\n\n      \"&::-webkit-scrollbar\": {\n        width: \".85rem\",\n      },\n\n      \"&::-webkit-scrollbar-track\": {\n        boxShadow: \"inset 0 0 1rem rgba(0, 0, 0, 0.2)\",\n      },\n\n      \"&::-webkit-scrollbar-thumb\": {\n        borderRadius: \".5rem\",\n        background: theme.palette.common.lightGrey,\n      },\n    },\n    logoWrapper: {\n      paddingTop: \"3em\",\n      paddingBottom: \"2em\",\n      paddingLeft: \"1em\",\n    },\n    logout: {\n      \"&.MuiListItemButton-root\": {\n        marginTop: \"2.5rem\",\n\n        \"& .MuiTypography-root\": {\n          color: \"#ED3237 !important\",\n        },\n      },\n    },\n  }));\n  const classes = useStyles();\n\n  const handleLogout = async () => {\n    try {\n      await logout_user({\n        variables: {\n          user: localStorage.getItem(\"user_id\"),\n        },\n      });\n      logout();\n      setSelectedMenu(13);\n    } catch (err) {\n      console.log(err.message);\n    }\n  };\n\n  React.useEffect(() => {\n    setSideNav(menus, location?.pathname, setSelectedMenu);\n  }, [location?.pathname]);\n\n  return (\n    <>\n      <Grid\n        className={classes.aside}\n        sx={{ borderRight: \"1px solid rgba(229, 229, 229, 0.5)\" }}\n      >\n        <div className={classes.logoWrapper}>\n          <img src={logo} alt=\"logo\" />\n        </div>\n        <List>\n          {menus.map((menu) => {\n            const { icon } = menu;\n            return (\n              <ListItemButton\n                disableRipple\n                key={menu.id}\n                onClick={() => setSelectedMenu(menu.id)}\n                selected={selectedMenu === menu.id}\n                component={Link}\n                to={menu.path}\n              >\n                <ListItemIcon\n                  sx={{ marginRight: \"15px\", height: \"30px\", width: \"30px\" }}\n                >\n                  {icon}\n                </ListItemIcon>\n\n                <ListItemText>{menu.title}</ListItemText>\n              </ListItemButton>\n            );\n          })}\n          <ListItemButton\n            disableRipple\n            classes={{ root: classes.logout }}\n            onClick={() => setLogout(true)}\n          >\n            <ListItemIcon sx={{ marginRight: \"15px\" }}>\n              <LogoutIcon sx={{ height: \"25px\", width: \"25px\" }} />\n            </ListItemIcon>\n\n            <ListItemText>Logout</ListItemText>\n          </ListItemButton>\n        </List>\n      </Grid>\n      <DeleteOrDisable\n        open={Logout}\n        setOpen={setLogout}\n        title=\"Logout\"\n        confirmationMsg=\"logout\"\n        btnValue=\"Logout\"\n        type=\"logout\"\n        onConfirm={handleLogout}\n      />\n    </>\n  );\n};\n\nSideMenu.propTypes = {\n  drawerWidth: PropTypes.number,\n  handleDrawerToggle: PropTypes.func,\n};\n\nexport default SideMenu;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/Notifications.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/DashboardChart.js",["928","929","930","931","932","933","934"],"import React, { useState, useEffect } from \"react\";\nimport { Grid, Card, Typography, Divider } from \"@mui/material\";\nimport PropTypes from \"prop-types\";\nimport { CustomSelect } from \"components/validation/Select\";\nimport ArrowUpwardIcon from \"@mui/icons-material/ArrowUpward\";\nimport { ArrowDownwardOutlined } from \"@mui/icons-material\";\nimport { ReactComponent as ConsultationIcon } from \"assets/images/totalC.svg\";\nimport { ReactComponent as DoctorIcon } from \"assets/images/totalD.svg\";\nimport { ReactComponent as PatientIcon } from \"assets/images/totalP.svg\";\nimport { ReactComponent as PartnerIcon } from \"assets/images/totalPartner.svg\";\n\nimport {\n  consultationsOptions,\n  returnpercent,\n  financeOptions,\n  partnerOptions,\n  partnersOptions,\n  newOptions,\n  formatNumber,\n  selectOptions,\n} from \"components/Utilities/Time\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { LineChart, CircularProgressBar } from \"components/Utilities\";\nimport { CardItem } from \"components/layouts\";\nimport \"chartjs-plugin-style\";\n\nconst useStyles = makeStyles((theme) => ({\n  chartCard: {\n    background: \"#fff\",\n    borderRadius: \"1rem\",\n  },\n  chartImg: {\n    maxWidth: \"100%\",\n  },\n  headerGrid: {\n    background: \"rgb(253, 253, 253)\",\n    width: \"100%\",\n    borderTopLeftRadius: \"1rem\",\n    borderTopRightRadius: \"1rem\",\n    padding: \"1.5rem 2rem\",\n  },\n  overviewGrid: {\n    // padding: \"4rem 2rem 3rem\",\n  },\n  groupIconGrid: {\n    width: \"5rem\",\n    height: \"5rem\",\n    background: theme.palette.common.lightGreen,\n    borderRadius: \"50%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  groupIcon: {\n    \"&.MuiSvgIcon-root\": {\n      fontSize: \"2.5rem\",\n    },\n  },\n  bottomChartGrid: {\n    // padding: \"3rem 2rem\",\n  },\n\n  dottedCircle: {\n    width: 5,\n    height: 5,\n    borderRadius: \"100%\",\n  },\n  red: {\n    background: theme.palette.common.red,\n  },\n  green: {\n    background: theme.palette.common.green,\n  },\n  gold: {\n    borderColor: theme.palette.common.gold,\n  },\n\n  iconWrapper: {\n    width: 40,\n    height: 40,\n    borderRadius: \"50%\",\n    display: \"flex\",\n    justifyContent: \"center\",\n    alignItems: \"center\",\n  },\n  greenIconBg: {\n    background: theme.palette.common.lightGreen,\n  },\n  redIconBg: {\n    background: theme.palette.common.lightRed,\n  },\n\n  greenNotificationBg: {\n    background: theme.palette.common.green,\n  },\n\n  notificationIcon: {\n    \"&.MuiSvgIcon-root\": {\n      color: \"#fff\",\n    },\n  },\n}));\n\nconst DashboardCharts = ({ data }) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [patients, setPatients] = useState([]);\n  const [doctorStats, setDoctorStats] = useState([]);\n\n  const [totalConsultations, setTotalConsultations] = useState(\"\");\n  const [totalEarning, setTotalEarning] = useState(0);\n  const [totalPayouts, setTotalPayouts] = useState(0);\n  const [partnersData, setPartnersData] = useState([]);\n\n  const [consultationState, setConsultationState] = useState({\n    state: \"all\",\n    data: {\n      all: data?.consultationStats.chartData,\n      complete: data?.consultationStats.completedChartData,\n      ongoing: data?.consultationStats.ongoingChartData,\n      accept: data?.consultationStats.acceptedChartData,\n      decline: data?.consultationStats.declinedChartData,\n      cancel: data?.consultationStats.cancelledChartData,\n    },\n  });\n\n  const [graphState, setGraphState] = useState({\n    state: \"all\",\n    data: {\n      all: data?.doctorStats?.chartData,\n      active: data?.doctorStats.activeChartData,\n      inactive: data?.doctorStats.inactiveChartData,\n    },\n  });\n  const [subScriptionState, setSubScriptionState] = useState({\n    state: \"all\",\n    data: {\n      all: data?.subscriptionStats?.chartData,\n      active: data?.subscriptionStats.activeChartData,\n      inactive: data?.subscriptionStats.inactiveChartData,\n    },\n  });\n  const [patientGraphState] = useState({\n    state: \"all\",\n    data: {\n      all: data?.patientStats.chartData,\n      active: data?.patientStats.activeChartData,\n      inactive: data?.patientStats.inactiveChartData,\n    },\n  });\n  const [financialState] = useState({\n    state: \"all\",\n    data: {\n      earning: data?.earningStats?.chartData,\n      payout: data?.payoutStats?.chartData,\n    },\n  });\n\n  const [earningArray] = useState(data?.earningStats?.chartData);\n  const [totalPayoutValue, setPayoutValue] = useState(totalPayouts);\n  const [totalEarningsValue, setEarningsValue] = useState(totalEarning);\n  const [payoutArray] = useState(data?.payoutStats?.chartData);\n  const [partnerGraphState, setPartnerGraphState] = useState({\n    state: \"all\",\n    data: {\n      all: data?.partnerStats.chartData,\n      hospital: data?.partnerStats.hospitalChartData,\n      diagnostic: data?.partnerStats.diagnosticsChartData,\n      pharmacy: data?.partnerStats.pharmacyChartData,\n    },\n  });\n\n  useEffect(() => {\n    const {\n      patientStats,\n      doctorStats,\n      consultationStats,\n      partnerStats,\n      earningStats,\n      payoutStats,\n    } = data;\n    setPatients(patientStats);\n    setDoctorStats(doctorStats);\n    setTotalConsultations(consultationStats);\n    setPartnersData(partnerStats);\n    setTotalEarning(earningStats?.total);\n    setEarningsValue(earningStats?.total);\n    setTotalPayouts(payoutStats?.total);\n\n    //eslint-disable-next-line\n  }, [data]);\n\n  const {\n    totalAccepted,\n    totalCancelled,\n    totalOngoing,\n    totalDeclined,\n    totalCompleted,\n  } = totalConsultations;\n  const total =\n    totalAccepted +\n    totalCancelled +\n    totalOngoing +\n    totalDeclined +\n    totalCompleted;\n  const { totalActive: activeDoctors, totalInactive: inactiveDoctors } =\n    doctorStats;\n  const { totalActive: activePatients, totalInactive: inactivePatients } =\n    patients;\n  const totalDoc = activeDoctors + inactiveDoctors;\n  const totalPatient = activePatients + inactivePatients;\n  const [partnersState, setPartnersState] = useState(\"Patients\");\n  const patientPercentage = returnpercent(activePatients, inactivePatients);\n  const doctorPercentage = returnpercent(activeDoctors, inactiveDoctors);\n  const [amount, setAmount] = useState([\n    {\n      name: \"Total Earnings\",\n      value: 0,\n    },\n    {\n      name: \"Total Payouts\",\n      value: 0,\n    },\n  ]);\n  const [cardState, setCardState] = useState([\n    {\n      id: 1,\n      name: \"Total Doctors\",\n      percentageValue: 0,\n      value: 0,\n    },\n    {\n      id: 2,\n      name: \"Total Patients\",\n      percentageValue: 0,\n      value: 0,\n    },\n    {\n      id: 4,\n      name: \"Total Consultations\",\n      percentageValue: 0,\n      value: 0,\n    },\n    {\n      id: 3,\n      name: \"Total Partners\",\n      percentageValue: 0,\n      value: 0,\n    },\n  ]);\n  const [state, setState] = useState(patientGraphState);\n  const [options, setOptions] = useState(\"all\");\n\n  const handleStateChange = (e) => {\n    const { value } = e.target;\n\n    switch (value) {\n      case \"Patients\":\n        setState(patientGraphState);\n        setPartnersState(\"Patients\");\n        break;\n      case \"Doctors\":\n        setState(graphState);\n        setPartnersState(\"Doctors\");\n        break;\n      case \"Consultations\":\n        setState(consultationState);\n        setPartnersState(\"Consultations\");\n        break;\n      case \"Partners\":\n        setState(partnerGraphState);\n        setPartnersState(\"Partners\");\n        break;\n      case \"Finance\":\n        setState(financialState);\n        setPartnersState(\"Finance\");\n        break;\n      default:\n        setState(patientGraphState);\n        setPartnersState(\"Patients\");\n    }\n  };\n  useEffect(() => {\n    setCardState([\n      {\n        id: 1,\n        name: \"Total Doctors\",\n        percentageValue: doctorPercentage,\n        value: totalDoc,\n        icon: <DoctorIcon />,\n      },\n      {\n        id: 2,\n        name: \"Total Patients\",\n        percentageValue: patientPercentage,\n        value: totalPatient,\n        icon: <PatientIcon />,\n      },\n      {\n        id: 3,\n        name: \"Total Partners\",\n        value: partnersData?.total,\n        icon: <PartnerIcon />,\n      },\n      {\n        id: 4,\n        name: \"Total Consultations\",\n\n        value: total,\n        icon: <ConsultationIcon />,\n      },\n    ]);\n\n    setAmount([\n      {\n        name: \"Total Earnings\",\n        value: formatNumber(totalEarningsValue),\n        color: \"green\",\n      },\n      {\n        name: \"Total Payouts\",\n        value: formatNumber(totalPayoutValue),\n        color: \"red\",\n      },\n    ]);\n  }, [\n    totalPatient,\n    totalPayoutValue,\n    totalEarningsValue,\n    total,\n    patientPercentage,\n    doctorPercentage,\n    partnersData?.total,\n    totalDoc,\n    totalEarning,\n    totalPayouts,\n  ]);\n  const handleOptionChange = (e) => {\n    const { value } = e.target;\n    setOptions(value);\n  };\n  const percentageValue = 0.5;\n  const [financeState, setFinancialStates] = useState(0);\n  const handleFinanceStateChange = (e) => {\n    const { value } = e.target;\n    // eslint-disable-next-line\n    payoutArray?.map((item) => {\n      // eslint-disable-next-line\n      if (value == 0) {\n        setFinancialStates(0);\n        setPayoutValue(totalPayouts);\n        setEarningsValue(totalEarning);\n      }\n      //eslint-disable-next-line\n      if (item.month == value && value > 0) {\n        setFinancialStates(value);\n        setPayoutValue(item.sum);\n      }\n    });\n    earningArray?.map((item) => {\n      // eslint-disable-next-line\n      if (item.month == value) {\n        setEarningsValue(item.sum);\n      }\n    });\n  };\n\n  return (\n    <Grid container gap={2} justifyContent=\"center\">\n      {/* Top cards */}\n      <Grid item container gap={2} flexWrap=\"nowrap\">\n        {cardState?.map((item) => {\n          return (\n            <Grid item xs={3} >\n              <CardItem key={item.id} value={item} />\n            </Grid>\n          );\n        })}\n      </Grid>\n\n      <Grid item container gap={2} flexWrap=\"nowrap\">\n        <Grid item xs={8}>\n          <Card\n            width=\"100%\"\n            variant=\"outlined\"\n            sx={{ p: 2, borderColor: \"transparent\", borderRadius: \"15px\" }}\n          >\n            <Grid\n              item\n              container\n              justifyContent=\"space-between\"\n              flexWrap=\"nowrap\"\n              sx={{ mb: 2 }}\n            >\n              <Grid item xs={2}>\n                <CustomSelect\n                  variant=\"small\"\n                  value={partnersState}\n                  onChange={handleStateChange}\n                  options={partnersOptions}\n                  name=\"partners\"\n                />\n              </Grid>\n              <Grid item xs={2}>\n                <CustomSelect\n                  variant=\"small\"\n                  value={options}\n                  onChange={handleOptionChange}\n                  options={\n                    partnersState === \"Partners\"\n                      ? partnerOptions\n                      : partnersState === \"Consultations\"\n                        ? consultationsOptions\n                        : partnersState === \"Finance\"\n                          ? financeOptions\n                          : newOptions\n                  }\n                  name=\"graph\"\n                />\n              </Grid>\n            </Grid>\n            <LineChart\n              graphState={state}\n              optionsValue={\n                partnersState === \"Partners\"\n                  ? partnerOptions\n                  : partnersState === \"Consultations\"\n                    ? consultationsOptions\n                    : partnersState === \"Finance\"\n                      ? financeOptions\n                      : newOptions\n              }\n              type={\n                partnersState === \"Partners\"\n                  ? \"partners\"\n                  : partnersState === \"Consultations\"\n                    ? \"consultation\"\n                    : partnersState === \"Finance\"\n                      ? \"finance\"\n                      : \"\"\n              }\n              opt={options}\n            />\n          </Card>\n        </Grid>\n        <Grid item xs={4} sx={{ height: \"100%\" }}>\n          <Card\n            variant=\"outlined\"\n            sx={{\n              borderColor: \"transparent\",\n              height: \"100%\",\n              borderRadius: \"15px\",\n              display: \"flex\",\n              flexDirection: \"column\",\n              gap: \"4rem\",\n            }}\n          >\n            {/* <Grid container> */}\n            <Grid item container alignItems=\"center\" sx={{ p: 2.5, pb: 1 }}>\n              <Grid item flex={1}>\n                <Typography\n                  sx={{\n                    fontSize: \"2rem\",\n                    fontWeight: \"500\",\n                    lineHeight: \"25px\",\n                    letterSpacing: \"-0.01em\",\n                    color: \"#010101\",\n                  }}\n                >\n                  Financial Stats\n                </Typography>\n              </Grid>\n              <Grid item>\n                <CustomSelect\n                  variant=\"small\"\n                  value={financeState}\n                  onChange={handleFinanceStateChange}\n                  options={selectOptions}\n                  name=\"partners\"\n                />\n              </Grid>\n            </Grid>\n            <Divider sx={{ paddingBlock: 1 }} />\n            <Grid\n              item\n              alignItems=\"center\"\n              justifyContent=\"center\"\n              container\n              sx={{ p: 3 }}\n            >\n              <CircularProgressBar\n                height=\"15rem\"\n                width=\"15rem\"\n                color={theme.palette.common.green}\n                trailColor={theme.palette.common.red}\n                value={totalEarning}\n              />\n            </Grid>\n\n            {amount.map((item) => {\n              const { color, value, name } = item;\n              return (\n                <Grid\n                  item\n                  container\n                  sx={{ paddingX: 2, paddingY: 0 }}\n                  flexWrap=\"nowrap\"\n                  style={{ marginTop: ' -3%' }}\n                >\n                  <Grid flex={1}>\n                    <Grid container alignItems=\"center\" gap={1}>\n                      <div\n                        className={`${classes.dottedCircle}\n                         ${classes.red}`}\n                      />\n                      <Typography\n                        sx={{\n                          fontWeight: 400,\n                          fontSize: \"1.4rem\",\n                          lineHeight: \"20px\",\n                          color: \"#606060\",\n                        }}\n                      >\n                        {name}\n                      </Typography>\n                      <Grid\n                        item\n                        sx={{\n                          borderRadius: \"100px\",\n                          color:\n                            percentageValue < 1\n                              ? \"#ED3237\"\n                              : theme.palette.success.main,\n                          backgroundColor:\n                            percentageValue < 1\n                              ? \"rgba(237, 50, 55, 0.1)\"\n                              : \"rgba(62, 165, 132, 0.1)\",\n                          padding: \"3px 8px\",\n                        }}\n                      >\n                        <Grid\n                          container\n                          alignItems=\"center\"\n                          justifyContent=\"center\"\n                        >\n                          <Typography\n                            variant=\"span\"\n                            sx={{ fontWeight: 500, fontSize: \"1rem\" }}\n                          >\n                            {\"0.5\"}\n                          </Typography>\n                          {percentageValue < 1 ? (\n                            <ArrowDownwardOutlined\n                              sx={{ color: \"inherit\", fontSize: \"1rem\" }}\n                            />\n                          ) : (\n                            <ArrowUpwardIcon\n                              sx={{ color: \"inherit\", fontSize: \"1rem\" }}\n                            />\n                          )}\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item justifySelf=\"center\">\n                    <Grid container>\n                      <Typography\n                        sx={{\n                          fontWeight: 500,\n                          fontSize: \"1.6rem\",\n                          lineHeight: \"20px\",\n                          color: \"#3F3F3F\",\n                        }}\n                      >\n                        NGN {value}\n                      </Typography>\n                    </Grid>\n                  </Grid>\n                </Grid>\n              );\n            })}\n            {/* </Grid> */}\n          </Card>\n        </Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nDashboardCharts.propTypes = {\n  data: PropTypes.object,\n  refetch: PropTypes.func,\n};\n\nexport default DashboardCharts;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/Header.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/NoData.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/EnhancedTableAction.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Search.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/PreviousButton.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Modal.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/HeaderProfile.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/HeaderContents.js",["935"],"import React, { Fragment, useState, useEffect, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { makeStyles } from \"@mui/styles\";\nimport HeaderProfile from \"./HeaderProfile\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { useTheme } from \"@mui/material/styles\";\n// import { ReactComponent as SearchIcon } from \"assets/images/searchIcon.svg\";\nimport {\n  Typography,\n  Toolbar,\n  Grid,\n  ClickAwayListener,\n  Paper,\n} from \"@mui/material\";\n\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\nimport { findAccounts } from \"components/graphQL/useQuery\";\nimport ArrowUpwardIcon from \"@mui/icons-material/ArrowUpward\";\nimport { Link, useLocation, useHistory } from \"react-router-dom\";\nimport { getPatients, DoctorCount } from \"components/graphQL/useQuery\";\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\nimport { patterns, predicateBreadcrumbFromUrl } from \"helpers/breadcrumb\";\nimport KeyboardArrowRightIcon from \"@mui/icons-material/KeyboardArrowRight\";\n\nconst useStyles = makeStyles((theme) => ({\n  toolbar: {\n    alignItems: \"center\",\n    height: \"100%\",\n    flex: 1,\n    justifyContent: \"space-between\",\n  },\n  text: {\n    fontSize: \"clamp(2rem, 1.2vw, 1.6rem)\",\n    fontWeight: 500,\n    lineHeight: \"2.5rem\",\n    color: \"#2D2F39\",\n    letterSpacing: \"-0.01em\",\n  },\n  name: {\n    fontSize: \"clamp(1.5rem, 1.5vw, 2rem)\", //clamp(1.5rem, 1.5vw, 2.25rem)\n    fontWeight: 300,\n  },\n  titleWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  link: {\n    textDecoration: \"none\",\n  },\n  title: {\n    // fontSize: \"clamp(1.2rem, 1vw+1rem, 2.4rem )\",\n    fontSize: \"clamp(1.5rem, 2vw, 2.25rem)\",\n    color: theme.palette.common.black,\n    \"&.MuiTypography-root\": {\n      marginRight: \".5rem\",\n    },\n  },\n  history: {\n    \"&.MuiTypography-root\": {\n      display: \"flex\",\n      flexDirection: \"row\",\n      alignItems: \"center\",\n      color: \"#3E5EA9\",\n      fontSize: \"14px\",\n      fontWeight: 500,\n      lineHeight: \"20px\",\n    },\n  },\n\n  options: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    backgroundColor: \"#ffffff\",\n    borderRadius: \"8px\",\n    position: \"absolute\",\n    top: 28,\n    right: 5,\n    zIndex: 1,\n\n    \"&>:last-child\": {\n      borderBottom: \"none\",\n    },\n  },\n\n  btn: {\n    display: \"flex\",\n    alignItems: \"center\",\n    backgroundColor: \"#fff\",\n    padding: \"1rem 2rem\",\n    fontSize: \"14px\",\n    fontWeight: 400,\n    color: \"#2D2F39\",\n    border: \"none\",\n    borderBottom: \"1px solid #E5E5E5\",\n    textAlign: \"left\",\n    whiteSpace: \"nowrap\",\n\n    \"&:hover\": {\n      color: \"#ffffff\",\n      backgroundColor: theme.palette.common.blue,\n    },\n  },\n\n  subtitle: {\n    color: theme.palette.common.green,\n    \"&.MuiTypography-root\": {\n      fontSize: \"clamp(0.6rem, 1vw + .5rem, 1.25rem)\",\n      marginLeft: \".5rem\",\n      alignSelf: \"flex-end\",\n    },\n  },\n  customSubHeaderWrapper: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n}));\n\nconst CustomHeaderText = ({ title, total, path }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      container\n      flex={1}\n      flexDirection=\"column\"\n      justifyContent=\"center\"\n      rowGap={1}\n    >\n      <Grid item container flexWrap=\"nowrap\" alignItems=\"center\">\n        <Link to={`/${path}`} className={classes.link}>\n          <Typography variant=\"h3\" classes={{ root: classes.title }}>\n            {title}\n          </Typography>\n        </Link>\n        <ArrowUpwardIcon color=\"success\" />\n      </Grid>\n      <Grid item>\n        <Typography variant=\"h5\" className={classes.subtitle}>\n          {total} total\n        </Typography>\n      </Grid>\n    </Grid>\n  );\n};\n\nCustomHeaderText.propTypes = {\n  title: PropTypes.string,\n  total: PropTypes.number,\n  path: PropTypes.string,\n  data: PropTypes.object,\n};\n\nconst CustomHeaderTitle = ({ title }) => {\n  const classes = useStyles();\n\n  return (\n    <div className={classes.titleWrapper}>\n      {\n        <Grid>\n          <Typography variant=\"h3\" classes={{ root: classes.title }}>\n            {title}\n          </Typography>\n        </Grid>\n      }\n    </div>\n  );\n};\n\nCustomHeaderTitle.propTypes = {\n  title: PropTypes.string,\n};\n\n// SUBMENU HEADERS\nconst CustomSubHeaderText = (props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n\n  const {\n    title,\n    subTitle,\n    subSubTitle,\n    scopedSubTitle,\n    scopedMenu,\n    scopedSubMenu,\n    titleColor = theme.palette.common.red,\n  } = props;\n\n  return (\n    <div className={classes.customSubHeaderWrapper}>\n      <Typography variant=\"h3\" style={{ color: theme.palette.common.grey }}>\n        {title}\n      </Typography>\n      <KeyboardArrowRightIcon\n        style={{\n          fontSize: \"2rem\",\n          color: theme.palette.common.grey,\n        }}\n      />\n      <Typography\n        variant=\"h3\"\n        classes={{ root: classes.title }}\n        style={{\n          color: titleColor,\n        }}\n      >\n        {subTitle}\n      </Typography>\n      {scopedMenu !== 0 && (\n        <Fragment>\n          <KeyboardArrowRightIcon\n            style={{ fontSize: \"2rem\", color: theme.palette.common.grey }}\n          />\n          <Typography\n            variant=\"h3\"\n            classes={{ root: classes.title }}\n            style={{\n              color:\n                scopedSubMenu === 0\n                  ? theme.palette.common.red\n                  : theme.palette.common.grey,\n            }}\n          >\n            {subSubTitle}\n          </Typography>\n        </Fragment>\n      )}\n\n      {scopedSubMenu !== 0 && (\n        <Fragment>\n          <KeyboardArrowRightIcon\n            style={{ fontSize: \"2rem\", color: theme.palette.common.grey }}\n          />\n          <Typography\n            variant=\"h3\"\n            classes={{ root: classes.title }}\n            style={{ color: theme.palette.common.red }}\n          >\n            {scopedSubTitle}\n          </Typography>\n        </Fragment>\n      )}\n    </div>\n  );\n};\n\nCustomSubHeaderText.propTypes = {\n  title: PropTypes.string,\n  subTitle: PropTypes.string,\n  subSubTitle: PropTypes.string,\n  scopedSubTitle: PropTypes.string,\n  titleColor: PropTypes.string,\n  scopedMenu: PropTypes.number,\n  scopedSubMenu: PropTypes.number,\n  data: PropTypes.object,\n};\n\n// HEADER DYNAMIC RENDERING COMPONENT\nconst HeaderText = () => {\n  const classes = useStyles();\n  const { pathname } = useLocation();\n  const email = localStorage.getItem(\"email\");\n  const [profileAcc, setProfileAcc] = useState([]);\n  const [docCount, setDocCount] = useState([]);\n  const [patientCount, setPatientCount] = useState([]);\n\n  const breadcrumbs = useMemo(\n    () => predicateBreadcrumbFromUrl(patterns, pathname.substring(1)),\n    [pathname]\n  );\n\n  const [profile, { data }] = useLazyQuery(findAccounts, {\n    variables: { email },\n  });\n\n  const [patient, patientContent] = useLazyQuery(getPatients);\n  const [doctor, doctorContent] = useLazyQuery(DoctorCount, {\n    fetchPolicy: \"cache-first\",\n  });\n\n  useEffect(() => {\n    (async () => {\n      profile();\n      if (data) {\n        setProfileAcc(data.accounts.data[0]);\n      }\n    })();\n  }, [profile, email, data]);\n\n  useEffect(() => {\n    (async () => {\n      patient();\n      doctor();\n      if (patientContent.data)\n        setPatientCount(patientContent.data.profiles.pageInfo.totalDocs);\n      if (doctorContent.data) setDocCount(doctorContent.data.DoctorCount);\n    })();\n  }, [doctor, patient, patientContent.data, doctorContent.data]);\n\n  const counts = {\n    Doctors: docCount,\n    Patients: patientCount,\n  };\n\n  switch (pathname) {\n    case \"/dashboard\":\n      return (\n        <Typography className={classes.text} gutterBottom>\n          Dashboard\n        </Typography>\n      );\n    case \"/\":\n      return (\n        <Typography className={classes.text} gutterBottom>\n          Dashboard\n        </Typography>\n      );\n    default:\n      return <Breadcrumb breadcrumbs={breadcrumbs} counts={counts} />;\n  }\n};\n\nHeaderText.propTypes = {\n  selectedMenu: PropTypes.number,\n};\n\nconst HeaderContent = () => {\n  const classes = useStyles();\n  return (\n    <Toolbar className={classes.toolbar}>\n      <HeaderText />\n\n      <HeaderProfile />\n    </Toolbar>\n  );\n};\n\nHeaderContent.propTypes = {};\n\nconst Crumb = ({ breadcrumbs }) => {\n  const classes = useStyles();\n  const history = useHistory();\n  const [isOpen, setIsOpen] = useState(false);\n  const previousText = breadcrumbs[breadcrumbs.length - 2].pageTitle;\n  const previousIndex = breadcrumbs[breadcrumbs.length - 2].pageIndex;\n\n  const handleClickAway = () => {\n    setIsOpen(false);\n  };\n\n  return (\n    <Grid container alignItems=\"center\" sx={{ position: \"relative\" }}>\n      <Grid item>\n        <Grid\n          container\n          alignItems=\"center\"\n          onClick={() => history.go(previousIndex)}\n          sx={{ cursor: \"pointer\" }}\n        >\n          <ArrowBackIcon\n            fontSize=\"small\"\n            sx={{ marginRight: \"0.5rem\", color: \"#3E5EA9\" }}\n          />{\" \"}\n          <Typography variant=\"p\" classes={{ root: classes.history }}>\n            Back to {previousText}{\" \"}\n          </Typography>\n        </Grid>\n      </Grid>\n      {breadcrumbs.length > 2 ? (\n        <ClickAwayListener onClickAway={handleClickAway}>\n          <Grid\n            onClick={() => setIsOpen(!isOpen)}\n            sx={{\n              display: \"flex\",\n              alignItems: \"center\",\n              marginLeft: \"0.5rem\",\n              cursor: \"pointer\",\n            }}\n          >\n            <KeyboardArrowDownIcon\n              fontSize=\"medium\"\n              sx={{ color: \"#3E5EA9\" }}\n            />\n          </Grid>\n        </ClickAwayListener>\n      ) : null}\n      {isOpen && (\n        <Paper className={classes.options}>\n          {breadcrumbs.map((crumb, index) => {\n            const isLast = index === breadcrumbs.length - 1;\n            const borderRadius =\n              index === breadcrumbs.length - 2\n                ? \"0px 0px 8px 8px\"\n                : \"8px 8px 0px 0px\";\n            if (isLast) {\n              return null;\n            } else {\n              return (\n                <button\n                  key={index}\n                  className={classes.btn}\n                  style={{ borderRadius: borderRadius }}\n                  onClick={() => history.go(crumb.pageIndex)}\n                >\n                  {crumb.pageTitle}\n                </button>\n              );\n            }\n          })}\n        </Paper>\n      )}\n    </Grid>\n  );\n};\n\nconst Breadcrumb = ({ breadcrumbs = [], counts = {} }) => {\n  const classes = useStyles();\n  const text = breadcrumbs[breadcrumbs.length - 1]?.pageTitle || \"\";\n\n  return (\n    <Grid container justifyContent=\"flex-start\" alignItems=\"center\">\n      {breadcrumbs.length < 2 ? (\n        <Grid container alignContent=\"center\">\n          <Grid item>\n            <CustomHeaderTitle title={text} />\n          </Grid>\n          {counts[text] && (\n            <Grid\n              item\n              sx={{ marginLeft: \"0.5rem\", display: \"flex\" }}\n              alignContent=\"center\"\n            >\n              <Grid container alignContent=\"center\">\n                <ArrowUpwardIcon color=\"success\" />\n                <Typography variant=\"h2\" className={classes.subtitle}>\n                  {counts[text]} total\n                </Typography>\n              </Grid>\n            </Grid>\n          )}\n        </Grid>\n      ) : (\n        <Grid>\n          <Crumb breadcrumbs={breadcrumbs} />\n          <CustomHeaderTitle title={text} />\n        </Grid>\n      )}\n    </Grid>\n  );\n};\n\nBreadcrumb.propTypes = {\n  breadcrumbs: PropTypes.array,\n  counts: PropTypes.object,\n};\n\nexport default HeaderContent;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/LinearProgress.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Loader.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/FormSelect.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/FilterList.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/FormInput.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/DisplayProfile.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/ProfileCard.js",["936"],"import React from \"react\";\nimport { Typography, Grid, Chip } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport PropTypes from \"prop-types\";\n\nconst useStyles = makeStyles((theme) => ({\n  cardGrid: {\n    background: \"#fff\",\n    borderRadius: \"1rem\",\n    // padding: \"4rem 5rem\",\n    height: \"16.1rem\",\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\n  },\n  link: {\n    display: \"flex\",\n    alignItems: \"center\",\n    fontSize: \"1.25rem\",\n    color: theme.palette.common.green,\n    padding: \".75rem\",\n    borderRadius: \"1.5rem\",\n    textDecoration: \"none\",\n  },\n  infoBadge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.25rem\",\n      borderRadius: \"1.5rem\",\n      color: theme.palette.common.green,\n    },\n  },\n}));\nconst ProfileCard = ({ value, text, type }) => {\n  const classes = useStyles();\n\n  return (\n    <Grid\n      item\n      container\n      direction=\"column\"\n      justifyContent=\"center\"\n      rowGap={{ md: 4, sm: 3, xs: 3 }}\n      alignItems=\"center\"\n      className={classes.cardGrid}\n    >\n      <Grid item>\n        <Typography variant=\"h4\">{text}</Typography>\n      </Grid>\n\n      {type === \"alergy\"\n        ? value?.map((i, key) => (\n            <a\n              rel=\"noreferrer\"\n              key={i._id}\n              className={classes.link}\n              href={i.url}\n              target=\"_blank\"\n            ></a>\n          ))\n        : null}\n      <Grid item>\n        {Array.isArray(value) ? (\n          value.map((i, key) => (\n            <Chip variant=\"outlined\" key={key} label={i} className={classes.infoBadge} />\n          ))\n        ) : (\n          <Chip variant=\"outlined\" label={value} className={classes.infoBadge} />\n        )}\n      </Grid>\n    </Grid>\n  );\n};\n\nProfileCard.propTypes = {\n  text: PropTypes.string,\n  value: PropTypes.string,\n  type: PropTypes.string,\n};\nexport default ProfileCard;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/layouts/AvailabilityTable.js",["937","938","939"],"import React, { useState, useEffect, useCallback } from \"react\";\nimport {\n  TableRow,\n  Grid,\n  Typography,\n  TableCell,\n  Card,\n  Chip,\n  Button,\n  Checkbox,\n} from \"@mui/material\";\nimport { NoData } from \"components/layouts\";\nimport { CustomSelect } from \"components/validation/Select\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport { useSelector } from \"react-redux\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport {\n  changeTableLimit,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport EnhancedTable from \"components/layouts/EnhancedTable\";\nimport { Modals, Loader } from \"components/Utilities\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { availabilityHeadCells } from \"components/Utilities/tableHeaders\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport { hours, days, today } from \"components/Utilities/Time\";\nimport { EmptyTable } from \"components/layouts\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { useLazyQuery, useQuery } from \"@apollo/client\";\nimport { defaultPageInfo } from \"helpers/mockData\";\nimport {\n  getAvailabilities,\n  getDoctorAvailabilityForDate,\n  getProviders,\n  getAvailabilities1,\n} from \"components/graphQL/useQuery\";\nconst useStyles = makeStyles((theme) => ({\n  tableCell: {\n    \"&.MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n\n  button: {\n    \"&.MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"1rem\",\n      maxWidth: \"10rem\",\n      whiteSpace: \"nowrap\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.2rem\",\n      },\n\n      \"& .MuiButton-endIcon\": {\n        marginLeft: \".3rem\",\n        marginTop: \"-.2rem\",\n      },\n    },\n  },\n\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.2rem !important\",\n      height: \"2.7rem\",\n      borderRadius: \"1.3rem\",\n    },\n  },\n}));\n\nconst AvailabilityTable = () => {\n  const [pageInfo, setPageInfo] = useState({\n    page: 0,\n    totalPages: 1,\n    hasNextPage: false,\n    hasPrevPage: false,\n    limit: 10,\n    totalDocs: 0,\n  });\n\n  const { data: da } = useQuery(getProviders);\n  const [availabilities, setAvailabilities] = useState([]);\n  const [provider, setProvider] = useState(\"\");\n  const [modal, setModal] = useState(false);\n  const [form, setForm] = useState(\"\");\n  const [dropDown, setDropDown] = useState([]);\n  const [select, setSelect] = useState(today());\n  const [avail, setAvail] = useState(\"\");\n\n  const onChange = async (e) => {\n    setProvider(e.target.value);\n    setForm(e.target.value);\n  };\n\n  const classes = useStyles();\n  const theme = useTheme();\n\n  // redux\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n  //queries\n  const [fetchAvailabilities, { loading: load, data, error }] =\n    useLazyQuery(getAvailabilities);\n  const [fetchAvailabilities1, { loading: load1, data: data1, error: error1 }] =\n    useLazyQuery(getAvailabilities1);\n\n  // providers drop down\n  useEffect(() => {\n    const x = {\n      key: \"All Stats\",\n      value: \"\",\n    };\n    if (da) {\n      const data = da.getProviders.provider;\n      const options = data?.map((i) => {\n        return {\n          key: i.name,\n          value: i._id,\n        };\n      });\n      setDropDown([x, ...options]);\n    }\n  }, [da]);\n\n  const [fetchDay, { loading, data: dt }] = useLazyQuery(\n    getDoctorAvailabilityForDate\n  );\n\n  const setTableData = async (response, errMsg) => {\n    if (response?.data) {\n      setPageInfo(response?.data?.getAvailabilities?.pageInfo || []);\n      setAvailabilities(\n        response?.data?.getAvailabilities?.availability || defaultPageInfo\n      );\n    } else {\n      console.error(errMsg);\n    }\n  };\n\n  useEffect(() => {\n    if (dt) {\n      const { available, day, times } = dt?.getDoctorAvailabilityForDate;\n      setAvail({\n        available,\n        day,\n        times,\n      });\n    } else {\n      setAvail({\n        availale: false,\n        day: \"Not Available\",\n        times: [],\n      });\n    }\n  }, [dt]);\n\n  useEffect(() => {\n    if (provider === \"\") {\n      fetchAvailabilities1({\n        variables: {\n          pageInfo: pageInfo,\n          first: 5,\n          day: select,\n        },\n      });\n    } else {\n      fetchAvailabilities({\n        variables: {\n          first: 5,\n          providerId: provider,\n          day: select,\n        },\n      });\n    }\n\n    if (data) {\n      setPageInfo(data?.getAvailabilities?.pageInfo || []);\n      setAvailabilities(\n        data?.getAvailabilities?.availability || defaultPageInfo\n      );\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data, provider, select]);\n  useEffect(() => {\n    if (data1) {\n      setPageInfo(data1?.getAvailabilities?.pageInfo || []);\n      setAvailabilities(\n        data1?.getAvailabilities?.availability || defaultPageInfo\n      );\n    }\n  }, [select, data1]);\n  const [loadings, setLoading] = useState(false);\n  const handleSelectChange = async (e) => {\n    const { value } = e.target;\n    setLoading(true);\n    await fetchAvailabilities({\n      variables: {\n        first: 5,\n        providerId: provider,\n        day: value,\n      },\n    });\n    setLoading(false);\n    setSelect(value);\n  };\n\n  const handleCheckDay = useCallback((day, doctor) => {\n    setModal(true);\n    fetchDay({\n      variables: {\n        day,\n        doctor,\n      },\n    });\n    //eslint-disable-next-line\n  }, []);\n  if (load || loadings || load1) return <Loader />;\n  if (error || error1) return <NoData />;\n  const { day, available, times } = avail;\n  return (\n    <>\n      <Grid item container direction=\"column\" height=\"100%\">\n        <Card\n          variant=\"outlined\"\n          sx={{\n            width: \"100%\",\n            borderRadius: \"1.5rem\",\n            borderColor: \"transparent\",\n            p: 2,\n          }}\n        >\n          <Grid item container alignItems=\"center\" gap={2}>\n            <Grid item flex={1}>\n              <Typography\n                sx={{\n                  fontWeight: 500,\n                  fontSize: \"20px\",\n                  lineHeight: \"25px\",\n                  letterSpacing: \"-0.01em\",\n                  color: \"#010101\",\n                }}\n              >\n                Availability Table\n              </Typography>\n            </Grid>\n            <Grid item>\n              <CustomSelect\n                value={select}\n                onChange={handleSelectChange}\n                options={days}\n                name=\"select\"\n              />\n            </Grid>\n            <Grid item>\n              <CustomSelect\n                value={form}\n                onChange={onChange}\n                options={dropDown}\n                name=\"availability-dropdown\"\n              />\n            </Grid>\n          </Grid>\n          {availabilities?.length > 0 ? (\n            <Grid\n              item\n              container\n              direction=\"column\"\n              overflow=\"hidden\"\n              sx={{ mt: 2 }}\n              maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\n            >\n              <EnhancedTable\n                headCells={availabilityHeadCells}\n                rows={availabilities}\n                paginationLabel=\"Availabilities per page\"\n                hasCheckbox={true}\n                changeLimit={async (e) => {\n                  const res = await changeTableLimit(fetchAvailabilities, {\n                    first: e,\n                    providerId: provider,\n                  });\n\n                  await setTableData(res, \"Failed to change table limit.\");\n                }}\n                dataPageInfo={pageInfo}\n                handlePagination={async (page) => {\n                  const res = handlePageChange(\n                    fetchAvailabilities,\n                    page,\n                    pageInfo,\n                    {\n                      providerId: provider,\n                      day: select,\n                    }\n                  );\n                  await setTableData(res, \"Failed to change page.\");\n                }}\n              >\n                {availabilities?.map((row, index) => {\n                  const { _id, picture, doctorData, day, times, doctor } = row;\n                  const startTime = hours(times[0].start);\n                  const endTime = hours(times[times.length - 1].stop);\n\n                  if (doctorData?.firstName && doctorData?.lastName) {\n                    const labelId = `enhanced-table-checkbox-${index}`;\n                    const isItemSelected = isSelected(_id, selectedRows);\n\n                    return (\n                      <TableRow hover tabIndex={-1} key={_id}>\n                        <TableCell padding=\"checkbox\">\n                          <Checkbox\n                            onClick={() =>\n                              handleSelectedRows(\n                                _id,\n                                selectedRows,\n                                setSelectedRows\n                              )\n                            }\n                            color=\"primary\"\n                            checked={isItemSelected}\n                            inputProps={{\n                              \"aria-labelledby\": labelId,\n                            }}\n                          />\n                        </TableCell>\n                        <TableCell\n                          id={labelId}\n                          scope=\"row\"\n                          align=\"left\"\n                          className={classes.tableCell}\n                          style={{ color: theme.palette.common.grey }}\n                        >\n                          {doctorData?.dociId?.split(\"-\")[1]}\n                        </TableCell>\n                        <TableCell align=\"left\" className={classes.tableCell}>\n                          <div\n                            style={{\n                              height: \"100%\",\n                              display: \"flex\",\n                              alignItems: \"center\",\n                              textAlign: \"left\",\n                            }}\n                          >\n                            {/* <span style={{ marginRight: \"1rem\" }}>\n                            <Avatar\n                              alt={`${doctorData?.firstName} ${doctorData?.lastName}`}\n                              src={picture ? picture : displayPhoto}\n                              sx={{ width: 24, height: 24 }}\n                            />\n                          </span> */}\n                            <span style={{ fontSize: \"1.25rem\" }}>\n                              {doctorData?.firstName\n                                ? `${doctorData?.firstName} ${doctorData?.lastName}`\n                                : \"no name\"}\n                            </span>\n                          </div>\n                        </TableCell>\n                        <TableCell align=\"left\" className={classes.tableCell}>\n                          {day}\n                        </TableCell>\n                        <TableCell\n                          align=\"left\"\n                          className={classes.tableCell}\n                          style={{\n                            color: theme.palette.common.red,\n                          }}\n                        >\n                          <Chip\n                            label={startTime}\n                            className={classes.badge}\n                            style={{\n                              background: theme.palette.common.lightRed,\n                              color: theme.palette.common.red,\n                            }}\n                          />\n                        </TableCell>\n                        <TableCell\n                          align=\"left\"\n                          className={classes.tableCell}\n                          style={{\n                            color: theme.palette.common.red,\n                          }}\n                        >\n                          <Chip\n                            label={endTime}\n                            className={classes.badge}\n                            style={{\n                              background: theme.palette.common.lightRed,\n                              color: theme.palette.common.red,\n                            }}\n                          />\n                        </TableCell>\n                        <TableCell>\n                          <Button\n                            variant=\"contained\"\n                            className={classes.button}\n                            onClick={() => handleCheckDay(day, doctor)}\n                            endIcon={<ArrowForwardIosIcon />}\n                          >\n                            View Time\n                          </Button>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  }\n                })}\n              </EnhancedTable>\n            </Grid>\n          ) : (\n            <EmptyTable\n              headCells={availabilityHeadCells}\n              paginationLabel=\"Availability  per page\"\n            />\n          )}\n        </Card>\n      </Grid>\n      <Modals\n        isOpen={modal}\n        title=\"Available Day\"\n        rowSpacing={5}\n        width=\"10vw\"\n        handleClose={() => setModal(false)}\n      >\n        {loading && <Loader />}\n        <Grid item container alignItems=\"center\" gap={2}>\n          <Typography variant=\"h4\">{day}</Typography>\n          <div\n            style={{\n              background: available\n                ? theme.palette.common.green\n                : theme.palette.common.red,\n              width: \"20px\",\n              height: \"20px\",\n              borderRadius: \"50%\",\n            }}\n          ></div>\n        </Grid>\n        <Grid item container gap={1}>\n          {times\n            ? times?.map((time, ind) => {\n              const { start, stop } = time;\n              return (\n                <Chip\n                  key={ind}\n                  label={`${hours(start)} - ${hours(stop)} `}\n                  className={classes.badge}\n                  style={{\n                    background: theme.palette.common.lightRed,\n                    color: theme.palette.common.red,\n                  }}\n                />\n              );\n            })\n            : \"No Time\"}\n        </Grid>\n      </Modals>\n    </>\n  );\n};\n\nexport default AvailabilityTable;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/DataGrid.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/LineChart.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/CustomButton.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/CheckBox.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/CircularChart.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Card.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/Button.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/AvailabilityCard.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/WaitingList.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Illness.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ViewReferral.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/VideoCall.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/UserTypes.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ViewHCP.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Subscription.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/DoctorEarning.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/DoctorPayout.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/SinglePatient.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/SingleHCP.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Settings.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ReferralTab.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Providers.js",["940"],"import React, { useState, useEffect } from \"react\";\nimport { useTheme } from \"@mui/material/styles\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport { partnersHeadCells2 } from \"components/Utilities/tableHeaders\";\nimport { NoData, EmptyTable } from \"components/layouts\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport {\n  Grid,\n  TableRow,\n  TableCell,\n  Checkbox,\n  Alert,\n  Button,\n  Avatar,\n} from \"@mui/material\";\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\nimport { EnhancedTable } from \"components/layouts\";\nimport { makeStyles } from \"@mui/styles\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { DeleteOrDisable, ProviderModal } from \"components/modals\";\nimport { useSelector } from \"react-redux\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { isSelected } from \"helpers/isSelected\";\nimport EditIcon from \"@mui/icons-material/Edit\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport { useMutation, useLazyQuery, useQuery } from \"@apollo/client\";\nimport { getProviders /**/ } from \"components/graphQL/useQuery\";\nimport { deletProvider } from \"components/graphQL/Mutation\";\nimport { defaultPageInfo } from \"helpers/mockData\";\nimport {\n  changeTableLimit,\n  fetchMoreData,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport TableLayout from \"components/layouts/TableLayout\";\n\nconst useStyles = makeStyles((theme) => ({\n  FormLabel: {\n    fontSize: \"1.6rem\",\n    color: theme.palette.common.dark,\n  },\n  btn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      width: \"100%\",\n    },\n  },\n  button: {\n    \"&.MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"1rem\",\n      maxWidth: \"10rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.2rem\",\n      },\n\n      \"& .MuiButton-endIcon\": {\n        marginLeft: \".3rem\",\n        marginTop: \"-.2rem\",\n      },\n    },\n  },\n  tableBtn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      height: \"3rem\",\n      fontSize: \"1.25rem\",\n      borderRadius: \"2rem\",\n      boxShadow: \"none\",\n\n      \"&:hover\": {\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n          color: \"#fff\",\n        },\n      },\n\n      \"&:active\": {\n        boxShadow: \"none\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.5rem\",\n      },\n    },\n  },\n  redBtn: {\n    \"&.MuiButton-root\": {\n      background: theme.palette.common.lightRed,\n      color: theme.palette.common.red,\n\n      \"&:hover\": {\n        background: theme.palette.error.light,\n        color: \"#fff\",\n      },\n    },\n  },\n  greenBtn: {\n    \"&.MuiButton-root\": {\n      background: theme.palette.common.lightGreen,\n      color: theme.palette.common.green,\n\n      \"&:hover\": {\n        background: theme.palette.success.light,\n        color: \"#fff\",\n      },\n    },\n  },\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.6rem !important\",\n      height: \"3rem\",\n      borderRadius: \"1.3rem\",\n    },\n  },\n  \"&.MuiButton-root\": {\n    ...theme.typography.btn,\n    background: theme.palette.common.black,\n    width: \"100%\",\n  },\n  checkbox: {\n    \"& .MuiSvgIcon-root\": {\n      fontSize: 28,\n    },\n    \"&.Mui-checked\": {\n      color: \"green !important\",\n    },\n  },\n}));\n\nconst Providers = () => {\n  const classes = useStyles();\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\n  const [fetchProviders, { error, loading, refetch }] =\n    useLazyQuery(getProviders);\n  const { data: dat, error: err, loading: load } = useQuery(getProviders);\n\n  useEffect(() => {\n    fetchProviders({\n      variables: {\n        first: pageInfo?.limit || 10,\n      },\n      notifyOnNetworkStatusChange: true,\n    });\n    //eslint-disable-next-line\n  }, [fetchProviders]);\n\n  // const onChange = async (e) => {\n  //   setSearchHcp(e);\n  //   if (e == \"\") {\n  //     refetch();\n  //   } else refetch({ name: e });\n  // };\n  const [id, setId] = useState(null);\n  const [deleteModal, setdeleteModal] = useState(false);\n  const [deleteProvider] = useMutation(deletProvider);\n  // const [singleProvider] = useLazyQuery(getSingleProvider);\n  const handleDeleteOpenDialog = (id) => {\n    setId(id);\n    setdeleteModal(true);\n  };\n  const [providers, setProviders] = useState([]);\n\n  useEffect(() => {\n    if (dat) {\n      setProviders(dat.getProviders.provider);\n      setPageInfo(dat.getProviders.pageInfo);\n    }\n  }, [dat]);\n\n  const theme = useTheme();\n  const handleDialogOpen = () => setIsOpen(true);\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n\n  const initialValues = {\n    name: \"\",\n    type: \"\",\n    image: null,\n    iconAlt: null,\n  };\n\n  const onConfirm = async () => {\n    try {\n      await deleteProvider({\n        variables: { id },\n        refetchQueries: [{ query: getProviders }],\n      });\n    } catch (error) {\n      console.log(error.message);\n    }\n  };\n\n  // const [searchHcp, setSearchHcp] = useState(\"\");\n  const [editId, setEditId] = useState(null);\n  const [isOpens, setIsOpens] = useState(false);\n  const handleEditCloseDialog = () => {\n    setEdit(false);\n  };\n  const [alert, setAlert] = useState(null);\n  const [edit, setEdit] = useState(false);\n  const [isOpen, setIsOpen] = useState(false);\n  const handleDialogClose = async () => {\n    setIsOpen(false);\n    setEditId(null);\n    setSingleData();\n  };\n\n  /*   const handleDialogOpens1 = () => setIsOpens(true); */\n  const initialValues1 = {\n    name: \"\",\n    userTypeId: \"\",\n  };\n  const onSubmit1 = async (values) => {\n    const { name, userTypeId } = values;\n    await refetch({\n      name,\n      userTypeId,\n    });\n    handleDialogCloses();\n  };\n  const validationSchema1 = Yup.object({\n    name: Yup.string(\"Enter your hospital\").trim(),\n    userTypeId: Yup.string(\"Enter your userTypeId\").trim(),\n  });\n\n  const handleDialogCloses = () => setIsOpens(false);\n  const handleEditOpenDialog = (id) => {\n    setEdit(true);\n    setEditId(id);\n  };\n  const [singleData, setSingleData] = useState();\n\n  if (loading || load) return <Loader />;\n  if (error || err) return <NoData error={error} />;\n  return (\n    <>\n      <Grid\n        container\n        direction=\"column\"\n        gap={2}\n        flexWrap=\"nowrap\"\n        height=\"100%\"\n      >\n        {alert && Object.keys(alert).length > 0 && (\n          <Alert\n            variant=\"filled\"\n            severity={alert.type}\n            sx={{ justifyContent: \"center\", width: \"70%\", margin: \"0 auto\" }}\n          >\n            {alert.message}\n          </Alert>\n        )}\n        <Grid\n          item\n          gap={{ sm: 4, xs: 2 }}\n          container\n          direction={{ md: \"row\", sm: \"column\" }}\n        >\n          <Grid item container justifyContent=\"space-between\">\n            <Grid item></Grid>\n            <Grid item>\n              <CustomButton\n                endIcon={<AddIcon />}\n                title=\"Add new Provider\"\n                type={buttonType}\n                onClick={handleDialogOpen}\n              />\n            </Grid>\n          </Grid>\n        </Grid>\n        <TableLayout>\n          {providers.length > 0 ? (\n            <Grid item container height=\"100%\" direction=\"column\">\n              <EnhancedTable\n                headCells={partnersHeadCells2}\n                rows={providers}\n                paginationLabel=\"Providers per page\"\n                hasCheckbox={true}\n                changeLimit={async (e) => {\n                  await changeTableLimit(fetchProviders, { first: e });\n                }}\n                dataPageInfo={pageInfo}\n                handlePagination={async (page) => {\n                  await handlePageChange(fetchProviders, page, pageInfo, {});\n                }}\n              >\n                {providers.map((row, index) => {\n                  const { _id, name, icon } = row;\n                  const isItemSelected = isSelected(_id, selectedRows);\n\n                  const labelId = `enhanced-table-checkbox-${index}`;\n\n                  return (\n                    <TableRow\n                      hover\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={_id}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          onClick={() =>\n                            handleSelectedRows(\n                              _id,\n                              selectedRows,\n                              setSelectedRows\n                            )\n                          }\n                          color=\"primary\"\n                          checked={isItemSelected}\n                          inputProps={{\n                            \"aria-labelledby\": labelId,\n                          }}\n                        />\n                      </TableCell>\n                      <TableCell align=\"center\" className={classes.tableCell}>\n                        <div\n                          style={{\n                            height: \"100%\",\n                            display: \"flex\",\n                            alignItems: \"center\",\n                          }}\n                        >\n                          <span style={{ marginRight: \"1rem\" }}>\n                            <Avatar src={icon} sx={{ width: 24, height: 24 }} />\n                          </span>\n                          <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\n                        </div>\n                      </TableCell>\n                      <TableCell align=\"center\" className={classes.tableCell}>\n                        <div\n                          style={{\n                            height: \"100%\",\n                            display: \"flex\",\n                            alignItems: \"center\",\n                            justifyContent: \"space-around\",\n                          }}\n                        >\n                          <Button\n                            variant=\"contained\"\n                            disableRipple\n                            className={`${classes.tableBtn} ${classes.greenBtn}`}\n                            onClick={() => handleEditOpenDialog(_id)}\n                            endIcon={<EditIcon color=\"success\" />}\n                          >\n                            Edit Provider\n                          </Button>\n                          <Button\n                            variant=\"contained\"\n                            disableRipple\n                            className={`${classes.tableBtn} ${classes.redBtn}`}\n                            onClick={() => handleDeleteOpenDialog(_id)}\n                            endIcon={<DeleteIcon color=\"error\" />}\n                          >\n                            Delete Provider\n                          </Button>\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </EnhancedTable>\n            </Grid>\n          ) : (\n            <EmptyTable\n              headCells={partnersHeadCells2}\n              paginationLabel=\"Providers  per page\"\n            />\n          )}\n        </TableLayout>\n      </Grid>\n\n      <Modals\n        isOpen={isOpen}\n        title=\"Add new Provider\"\n        rowSpacing={5}\n        handleClose={handleDialogClose}\n      >\n        <ProviderModal\n          handleDialogClose={handleDialogClose}\n          type=\"add\"\n          setAlert={setAlert}\n          editId={editId}\n          setSingleData={setSingleData}\n          initialValues={initialValues}\n        />\n      </Modals>\n      {/* edit Modal */}\n      <Modals\n        isOpen={edit}\n        title=\"Edit Provider\"\n        rowSpacing={5}\n        handleClose={handleEditCloseDialog}\n      >\n        <ProviderModal\n          handleDialogClose={handleEditCloseDialog}\n          type=\"edit\"\n          editId={editId}\n          setAlert={setAlert}\n          initialValues={initialValues}\n          singleData={singleData}\n          setSingleData={setSingleData}\n        />\n      </Modals>\n\n      <DeleteOrDisable\n        open={deleteModal}\n        setOpen={setdeleteModal}\n        title=\"Delete Provider\"\n        onConfirm={onConfirm}\n        confirmationMsg=\"delete provider\"\n        btnValue=\"Delete\"\n      />\n\n      <Modals\n        isOpen={isOpens}\n        title=\"Filter\"\n        rowSpacing={5}\n        handleClose={handleDialogCloses}\n      >\n        <Formik\n          initialValues={initialValues1}\n          onSubmit={onSubmit1}\n          validationSchema={validationSchema1}\n          validateOnChange={false}\n          validateOnMount={false}\n          validateOnBlur={false}\n        >\n          {({ isSubmitting, isValid, dirty }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid item container direction=\"column\">\n                  <Grid item container>\n                    <FormikControl\n                      control=\"input\"\n                      name=\"name\"\n                      label=\"Hospital Name\"\n                      placeholder=\"Enter Hospital Name\"\n                    />\n                  </Grid>\n                  <Grid\n                    item\n                    style={{ marginBottom: \"18rem\", marginTop: \"3rem\" }}\n                  >\n                    <Grid container>\n                      <Grid item container>\n                        <FormikControl\n                          control=\"input\"\n                          name=\"userTypeId\"\n                          label=\"User Type\"\n                          placeholder=\"Enter User Type\"\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item>\n                    <CustomButton\n                      title=\"Apply Filter\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n    </>\n  );\n};\n\nexport default Providers;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Prescriptions.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ViewMessage.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Permission.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/PendingPayout.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/PatientProfile.js",["941"],"import React, { useState, useEffect } from \"react\";\nimport { dateMoment } from \"components/Utilities/Time\";\nimport { NoData } from \"components/layouts\";\nimport { Grid } from \"@mui/material\";\nimport { makeStyles } from \"@mui/styles\";\nimport { CustomButton, Loader, DisplayProfile, ProfileCard } from \"components/Utilities\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport { useTheme } from \"@mui/material/styles\";\nimport PersonRemoveIcon from \"@mui/icons-material/PersonRemove\";\nimport { DeleteOrDisable } from \"components/modals\";\nimport { useParams, useHistory } from \"react-router-dom\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { deleteProfile } from \"components/graphQL/Mutation\";\nimport { getPatients, getProfile, verifiedEmail } from \"components/graphQL/useQuery\";\n\nconst useStyles = makeStyles((theme) => ({\n  gridsWrapper: {\n    background: \"#fff\",\n    borderRadius: \"1rem\",\n    padding: \"1rem\",\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\n  },\n\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.3rem !important\",\n      //   height: \"2.7rem\",\n      background: theme.palette.common.lightGreen,\n      color: theme.palette.common.green,\n      borderRadius: \"1.5rem\",\n    },\n  },\n\n  cardGrid: {\n    background: \"#fff\",\n    borderRadius: \"1rem\",\n    padding: \"4rem 5rem\",\n    height: \"16.1rem\",\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\n  },\n\n  linkIcon: {\n    \"&.MuiSvgIcon-root\": {\n      fontSize: \"1.25rem\",\n      color: theme.palette.common.green,\n      marginLeft: \"1.2rem\",\n    },\n  },\n  link: {\n    textDecoration: \"none\",\n    color: theme.palette.common.green,\n    cursor: \"pointer\",\n  },\n\n  buttonsGridWrapper: {\n    height: \"16.1rem\",\n  },\n}));\n\nconst PatientProfile = () => {\n  const { patientId } = useParams();\n  const doci = localStorage.getItem(\"userDociId\");\n  const { loading, data, error } = useQuery(getProfile, {\n    variables: {\n      profileId: patientId,\n    },\n  });\n  const { data: emailStatus, loading: emailLoading } = useQuery(verifiedEmail, {\n    variables: {\n      dociId: doci,\n    },\n  });\n\n  const [disableUser] = useMutation(deleteProfile);\n\n  const classes = useStyles();\n  const theme = useTheme();\n  const [patientProfile, setPatientProfile] = useState(\"\");\n  const [emailStat, setEmailStat] = useState(false);\n\n  useEffect(() => {\n    if (emailStatus) {\n      setEmailStat(emailStatus.accounts.data[0].isEmailVerified);\n    }\n  }, [emailStatus]);\n  useEffect(() => {\n    if (data) {\n      setPatientProfile(data.profile);\n    }\n  }, [data, patientId]);\n\n  const history = useHistory();\n  const onConfirm = async () => {\n    try {\n      await disableUser({\n        variables: { id: patientId },\n        refetchQueries: [{ query: getPatients }],\n      });\n      history.push(\"/patients\");\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const [openDisablePatient, setOpenDisablePatient] = useState(false);\n\n  const trasparentButton = {\n    background: \"transparent\",\n    hover: \"#fafafa\",\n    active: \"#f4f4f4\",\n  };\n\n  if (loading || emailLoading) return <Loader />;\n  if (error) return <NoData error={error} />;\n  const {\n    firstName,\n    lastName,\n    dociId,\n    status,\n    gender,\n    image,\n    createdAt,\n    provider,\n    phoneNumber,\n    email,\n  } = patientProfile;\n  return (\n    <Grid container direction=\"column\" gap={4}>\n      <Grid item>\n        <DisplayProfile\n          fullName={`${firstName} ${lastName}`}\n          displayPhoto={image ? image : displayPhoto}\n          medicalTitle=\"User ID\"\n          statusId={dociId?.split(\"-\")[1]}\n          status={status ? status : \"No Value\"}\n          chatPath={`/patients/${patientId}/profile/chat`}\n        />\n      </Grid>\n      {/* <Grid item container> */}\n      <Grid item container spacing={4} justifyContent=\"space-between\">\n        <Grid item container md={6} sm={6} xs={12}>\n          <ProfileCard text=\"Gender\" value={gender} />\n        </Grid>\n        <Grid item container md={6} sm={6} xs={12}>\n          <ProfileCard text=\"Created At\" value={dateMoment(createdAt)} />\n        </Grid>\n        <Grid item container md={6} sm={6} xs={12}>\n          <ProfileCard text=\"Provider\" value={provider ? provider : \"No Provider\"} />\n        </Grid>\n        <Grid item container md={6} sm={6} xs={12}>\n          <ProfileCard text=\"Verified\" value={emailStat == \"false\" ? \"Not Verified\" : \"Verified\"} />\n        </Grid>\n        <Grid item container md={6} sm={6} xs={12} mx=\"auto\">\n          <ProfileCard\n            text=\"Email Address\"\n            value={\n              email ? (\n                <a href={`mailto:${email}`} className={classes.link}>\n                  {email}\n                </a>\n              ) : (\n                \"No Email Provided\"\n              )\n            }\n          />\n        </Grid>\n        <Grid item container md={6} sm={6} xs={12}>\n          <ProfileCard\n            text=\"Phone Number\"\n            value={\n              phoneNumber ? (\n                <a href={`tel:+234${phoneNumber}`} className={classes.link}>\n                  {phoneNumber}\n                </a>\n              ) : (\n                \"No Phone Number\"\n              )\n            }\n          />\n        </Grid>\n      </Grid>\n\n      <Grid\n        item\n        container\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        className={`${classes.gridsWrapper} ${classes.buttonsGridWrapper}`}\n      >\n        <Grid item>\n          <CustomButton\n            endIcon={<PersonRemoveIcon />}\n            title=\"Disable Patient\"\n            type={trasparentButton}\n            textColor={theme.palette.common.red}\n            onClick={() => setOpenDisablePatient(true)}\n          />\n        </Grid>\n\n        <DeleteOrDisable\n          open={openDisablePatient}\n          setOpen={setOpenDisablePatient}\n          title=\"Delete Partner\"\n          btnValue=\"disable\"\n          confirmationMsg=\"disable Patient\"\n          onConfirm={onConfirm}\n        />\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default PatientProfile;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/PatientAppointment.js",["942","943"],"import React, { useState, useEffect } from \"react\";\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\nimport {\n  CustomButton,\n  /* FilterList, */ Modals,\n  Loader,\n} from \"components/Utilities\";\nimport { Formik, Form } from \"formik\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport {\n  Grid,\n  Alert,\n  Typography,\n  TableRow,\n  TableCell,\n  Checkbox,\n  Button,\n  Avatar,\n} from \"@mui/material\";\nimport { deleteAppointment } from \"components/graphQL/Mutation\";\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\nimport { getAppoint, getDOCAppoint } from \"components/graphQL/useQuery\";\nimport { DeleteOrDisable } from \"components/modals\";\nimport { consultationsHeadCells2 } from \"components/Utilities/tableHeaders\";\nimport { useSelector } from \"react-redux\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport AssignmentIcon from \"@mui/icons-material/Assignment\";\nimport { useParams } from \"react-router-dom\";\nimport { timeConverter, timeMoment } from \"components/Utilities/Time\";\nimport * as Yup from \"yup\";\nimport { updateAppointment } from \"components/graphQL/Mutation\";\nimport {\n  changeTableLimit,\n  fetchMoreData,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport TableLayout from \"components/layouts/TableLayout\";\nconst useStyles = makeStyles((theme) => ({\n  tableCell: {\n    \"&.css-1jilxo7-MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n  btn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      width: \"100%\",\n    },\n  },\n\n  tableBtn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      height: \"3rem\",\n      fontSize: \"1.25rem\",\n      borderRadius: \"2rem\",\n      boxShadow: \"none\",\n\n      \"&:hover\": {\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n          color: \"#fff\",\n        },\n      },\n\n      \"&:active\": {\n        boxShadow: \"none\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.5rem\",\n      },\n    },\n  },\n\n  redBtn: {\n    \"&.MuiButton-root\": {\n      background: theme.palette.common.lightRed,\n      color: theme.palette.common.red,\n\n      \"&:hover\": {\n        background: theme.palette.error.light,\n        color: \"#fff\",\n      },\n    },\n  },\n\n  greenBtn: {\n    \"&.MuiButton-root\": {\n      background: theme.palette.common.lightGreen,\n      color: theme.palette.common.green,\n\n      \"&:hover\": {\n        background: theme.palette.success.light,\n        color: \"#fff\",\n      },\n    },\n  },\n}));\n\n/* const filterOptions = [\n  { id: 0, value: \"Name\" },\n  { id: 1, value: \"Date\" },\n  { id: 2, value: \"Description\" },\n]; */\n\nconst PatientAppointment = () => {\n  const [updateAppoint] = useMutation(updateAppointment);\n  const [deleteAppointments] = useMutation(deleteAppointment);\n  const [pageInfo, setPageInfo] = useState([]);\n  const [alert, setAlert] = useState(null);\n  const [editId, setEditid] = useState(null);\n  const [doctorId, setDoctorId] = useState(null);\n  const handleDelete = (id) => {\n    setId(id);\n    setdeleteModal(true);\n  };\n\n  const handleSchedule = (id, doctor) => {\n    setIsPatients(true);\n    setEditid(id);\n    setDoctorId(doctor);\n  };\n  const onConfirm = async () => {\n    try {\n      await deleteAppointments({\n        variables: { id },\n        refetchQueries: [\n          {\n            query: getAppoint,\n            variables: {\n              id: patientId,\n              orderBy: \"-createdAt\",\n            },\n          },\n        ],\n      });\n      setAlert({\n        message: \"appointment deleted successfully\",\n        type: \"success\",\n      });\n      setTimeout(() => {\n        setAlert(null);\n      }, 5000);\n    } catch (error) {\n      setAlert({\n        message: \"appointment  not successfully deleted\",\n        type: \"danger\",\n      });\n      setTimeout(() => {\n        setAlert(null);\n      }, 5000);\n      console.log(error);\n    }\n  };\n  const [deleteModal, setdeleteModal] = useState(false);\n  const classes = useStyles();\n  const theme = useTheme();\n  const [isPatient, setIsPatient] = useState(false);\n  const [isPatients, setIsPatients] = useState(false);\n  const [id, setId] = useState(null);\n  /* const handlePatientOpen = () => setIsPatient(true); */\n  const handlePatientClose = () => setIsPatient(false);\n  const handlePatientCloses = () => setIsPatients(false);\n  const { patientId } = useParams();\n  const [patientAppointment, setPatientAppointment] = useState([]);\n  const initialValues = {\n    status: \"\",\n    gender: \"\",\n    date: \"\",\n    plan: \"\",\n  };\n  const initialValues1 = {\n    date: \"\",\n  };\n\n  const validationSchema = Yup.object({\n    date: Yup.string(\"Enter your affliate\").required(\"Date is required\"),\n    plan: Yup.string(\"Select your plan\").required(\"Plan is required\"),\n    gender: Yup.string(\"Select your gender\").required(\"Gender is required\"),\n    status: Yup.string(\"Select your status\").required(\"Status is required\"),\n  });\n  const validationSchema1 = Yup.object({\n    date: Yup.string(\"select date and time \").required(\n      \"Date  and time is required\"\n    ),\n  });\n  const onSubmit1 = async (values) => {\n    const { date } = values;\n    const timeValue = timeMoment(date);\n    const dateValue = timeConverter(date);\n    await updateAppoint({\n      variables: {\n        id: editId,\n        date: dateValue,\n        time: timeValue,\n        doctor: doctorId,\n      },\n      refetchQueries: [\n        {\n          query: getAppoint,\n          variables: {\n            id: patientId,\n            orderBy: \"-createdAt\",\n          },\n        },\n        {\n          query: getDOCAppoint,\n          variables: {\n            id: doctorId,\n            orderBy: \"-createdAt\",\n          },\n        },\n      ],\n    });\n    handlePatientCloses();\n  };\n  const onSubmit = (values) => {\n    console.log(values);\n  };\n\n  const [getPatientsAppointment, { loading, data, error }] =\n    useLazyQuery(getAppoint);\n\n  useEffect(() => {\n    getPatientsAppointment({\n      variables: {\n        id: patientId,\n        orderBy: \"-createdAt\",\n      },\n      notifyOnNetworkStatusChange: true,\n    });\n  }, [getPatientsAppointment, patientId]);\n\n  useEffect(() => {\n    if (data) {\n      setPatientAppointment(data.getAppointments.data);\n      setPageInfo(data.getAppointments.pageInfo);\n    }\n  }, [data, patientId]);\n\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n\n  const genderType = [\n    { key: \"Male\", value: \"Male\" },\n    { key: \"Female\", value: \"Female\" },\n    { key: \"Prefer not to say\", value: \"Prefer not to say\" },\n  ];\n  const plans = [\n    { key: \"Plan 1\", value: \"Plan 1\" },\n    { key: \"Plan 2\", value: \"Plan 2\" },\n    { key: \"Plan 3\", value: \"Plan 3\" },\n    { key: \"Plan 4\", value: \"Plan 4\" },\n  ];\n  const plans1 = [\n    { key: \"Plan 1\", value: \"Plan 1\" },\n    { key: \"Plan 2\", value: \"Plan 2\" },\n    { key: \"Plan 3\", value: \"Plan 3\" },\n    { key: \"Plan 4\", value: \"Plan 4\" },\n  ];\n  const statusType = [\n    { key: \"Active\", value: \"Active\" },\n    { key: \"Blocked\", value: \"Blocked\" },\n  ];\n\n  if (error) return <NoData error={error} />;\n  if (loading) return <Loader />;\n  return (\n    <>\n      {alert && Object.keys(alert).length > 0 && (\n        <Alert\n          variant=\"filled\"\n          severity={alert.type}\n          sx={{ justifyContent: \"center\", width: \"70%\", margin: \"0 auto\" }}\n        >\n          {alert.message}\n        </Alert>\n      )}\n      <Grid\n        container\n        direction=\"column\"\n        gap={2}\n        flexWrap=\"nowrap\"\n        height=\"100%\"\n      >\n        <>\n          <Grid\n            item\n            container\n            flexWrap=\"nowrap\"\n            justifyContent=\"space-between\"\n            alignItems=\"center\"\n          >\n            {/* <Grid item flex={1}>\n              <Typography variant=\"h2\">Appointments</Typography>\n            </Grid>{\" \"}\n            */}\n            {/* <Grid item>\n              <FilterList\n                onClick={handlePatientOpen}\n                options={filterOptions}\n                title=\"Filter\"\n              />\n            </Grid> */}\n          </Grid>\n          <TableLayout>\n            {patientAppointment.length > 0 ? (\n              <Grid item container height=\"100%\" direction=\"column\">\n                <EnhancedTable\n                  headCells={consultationsHeadCells2}\n                  rows={patientAppointment}\n                  paginationLabel=\"Patients per page\"\n                  hasCheckbox={true}\n                  changeLimit={async (e) => {\n                    await changeTableLimit(getPatientsAppointment, {\n                      first: e,\n                    });\n                  }}\n                  dataPageInfo={pageInfo}\n                  handlePagination={async (page) => {\n                    await handlePageChange(\n                      getPatientsAppointment,\n                      page,\n                      pageInfo\n                    );\n                  }}\n                >\n                  {patientAppointment\n                    // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                    .map((row, index) => {\n                      const isItemSelected = isSelected(row._id, selectedRows);\n                      const labelId = `enhanced-table-checkbox-${index}`;\n                      return (\n                        <TableRow\n                          hover\n                          role=\"checkbox\"\n                          aria-checked={isItemSelected}\n                          tabIndex={-1}\n                          key={row._id}\n                          selected={isItemSelected}\n                        >\n                          <TableCell padding=\"checkbox\">\n                            <Checkbox\n                              onClick={() =>\n                                handleSelectedRows(\n                                  row.id,\n                                  selectedRows,\n                                  setSelectedRows\n                                )\n                              }\n                              color=\"primary\"\n                              checked={isItemSelected}\n                              inputProps={{\n                                \"aria-labelledby\": labelId,\n                              }}\n                            />\n                          </TableCell>\n                          <TableCell\n                            align=\"left\"\n                            className={classes.tableCell}\n                            style={{ maxWidth: \"20rem\" }}\n                          >\n                            <div\n                              style={{\n                                height: \"100%\",\n                                display: \"flex\",\n                                alignItems: \"center\",\n                              }}\n                            >\n                              <span style={{ marginRight: \"1rem\" }}>\n                                <Avatar\n                                  alt={`Display Photo of ${row.doctorData.firstName}`}\n                                  src={\n                                    row.doctorData.picture\n                                      ? row.doctorData.picture\n                                      : displayPhoto\n                                  }\n                                  sx={{ width: 24, height: 24 }}\n                                />\n                              </span>\n                              <span style={{ fontSize: \"1.25rem\" }}>\n                                {`${row.doctorData.firstName} \n                             ${row.doctorData.lastName}`}\n                              </span>\n                            </div>\n                          </TableCell>\n                          <TableCell align=\"left\" className={classes.tableCell}>\n                            {row.date}\n                          </TableCell>\n                          <TableCell\n                            align=\"left\"\n                            className={classes.tableCell}\n                            style={{\n                              color: theme.palette.common.grey,\n                              maxWidth: \"20rem\",\n                            }}\n                          >\n                            {/* {hours(}row.time) */} {row.time}\n                          </TableCell>\n                          <TableCell align=\"left\" className={classes.tableCell}>\n                            <Button\n                              variant=\"contained\"\n                              disableRipple\n                              className={`${classes.tableBtn} ${classes.greenBtn}`}\n                              endIcon={<AssignmentIcon color=\"success\" />}\n                              onClick={() =>\n                                handleSchedule(row._id, row.doctor)\n                              }\n                            >\n                              Reschedule\n                            </Button>\n                          </TableCell>\n                          <TableCell align=\"left\" className={classes.tableCell}>\n                            <Button\n                              variant=\"contained\"\n                              disableRipple\n                              onClick={() => handleDelete(row._id)}\n                              className={`${classes.tableBtn} ${classes.redBtn}`}\n                              endIcon={<DeleteIcon color=\"error\" />}\n                            >\n                              Cancel\n                            </Button>\n                          </TableCell>\n                        </TableRow>\n                      );\n                    })}\n                </EnhancedTable>\n              </Grid>\n            ) : (\n              <EmptyTable\n                headCells={consultationsHeadCells2}\n                paginationLabel=\"Appointments per page\"\n              />\n            )}\n          </TableLayout>\n        </>\n      </Grid>\n\n      <Modals\n        isOpen={isPatients}\n        title=\"Reschedule Appointment\"\n        rowSpacing={5}\n        height=\"auto\"\n        handleClose={handlePatientCloses}\n      >\n        <Formik\n          initialValues={initialValues1}\n          onSubmit={onSubmit1}\n          validationSchema={validationSchema1}\n          validateOnChange={false}\n          validateOnMount={false}\n          validateOnBlur={false}\n        >\n          {({ isSubmitting, dirty, isValid, setFieldValue }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid item container direction=\"column\" gap={2}>\n                  <Grid item container>\n                    <Grid container spacing={2}>\n                      <Grid item md>\n                        <FormikControl\n                          control=\"time\"\n                          name=\"date\"\n                          label=\"Date\"\n                          placeholder=\"Choose Date and Time\"\n                          setFieldValue={setFieldValue}\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid\n                    item\n                    container\n                    alignItems=\"flex-end\"\n                    marginTop={5}\n                    xs={12}\n                  >\n                    <CustomButton\n                      title=\"Reschedule Appointment\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n\n      <Modals\n        isOpen={isPatient}\n        title=\"Filter\"\n        rowSpacing={5}\n        height=\"auto\"\n        handleClose={handlePatientClose}\n      >\n        <Formik\n          initialValues={initialValues}\n          onSubmit={onSubmit}\n          validationSchema={validationSchema}\n          validateOnChange={false}\n          validateOnMount={false}\n          validateOnBlur={false}\n        >\n          {({ isSubmitting, dirty, isValid }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid item container direction=\"column\" gap={2}>\n                  <Grid item container>\n                    <Grid container spacing={2}>\n                      <Grid item md>\n                        <FormikControl\n                          control=\"select\"\n                          options={plans}\n                          name=\"date\"\n                          label=\"Date\"\n                          placeholder=\"Choose Date\"\n                        />\n                      </Grid>\n                      <Grid item md>\n                        <FormikControl\n                          control=\"select\"\n                          options={plans1}\n                          name=\"plan\"\n                          label=\"Plan\"\n                          placeholder=\"Select Plan\"\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item container gap={3}>\n                    <Grid container spacing={2}>\n                      <Grid item md>\n                        <FormikControl\n                          control=\"select\"\n                          options={genderType}\n                          name=\"gender\"\n                          label=\"Gender\"\n                          placeholder=\"Choose Gender\"\n                        />\n                      </Grid>\n                      <Grid item md>\n                        <FormikControl\n                          control=\"select\"\n                          options={statusType}\n                          name=\"status\"\n                          label=\"Status\"\n                          placeholder=\"Select status\"\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid\n                    item\n                    container\n                    alignItems=\"flex-end\"\n                    marginTop={5}\n                    xs={12}\n                  >\n                    <CustomButton\n                      title=\" Apply Filter\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n      {/* delete modal */}\n      <DeleteOrDisable\n        open={deleteModal}\n        onConfirm={() => console.log(\"confrimed\")}\n        setOpen={setdeleteModal}\n        title=\"Cancel Consultation\"\n        confirmationMsg=\"cancel appointment\"\n        btnValue=\"cancel\"\n      />\n\n      <DeleteOrDisable\n        open={deleteModal}\n        setOpen={setdeleteModal}\n        title=\"Delete Appointment\"\n        onConfirm={onConfirm}\n        confirmationMsg=\"delete appointment\"\n        btnValue=\"Delete\"\n      />\n    </>\n  );\n};\n\nexport default PatientAppointment;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Partners.js",["944"],"import React, { useState, useEffect } from \"react\";\nimport { Formik, Form } from \"formik\";\nimport { useSnackbar } from \"notistack\";\nimport { useSelector } from \"react-redux\";\nimport { useTheme } from \"@mui/material/styles\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\nimport {\n  Button,\n  Checkbox,\n  TableCell,\n  Avatar,\n  TableRow,\n  Grid,\n  Typography,\n} from \"@mui/material\";\n\nimport useAlert from \"hooks/useAlert\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { categoryFilterOptions, defaultPageInfo } from \"helpers/mockData\";\nimport { useStyles } from \"styles/partnersPageStyles\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport {\n  changeTableLimit,\n  deleteItem,\n  deleteVar,\n  filterData,\n  handlePageChange,\n  trucateProfileLink,\n} from \"helpers/filterHelperFunctions\";\nimport DeletePartner from \"components/modals/DeleteOrDisable\";\nimport { partnersHeadCells } from \"components/Utilities/tableHeaders\";\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\nimport {\n  addPartner,\n  addPartnerCategory,\n  regeneratePartnerProfileUrl,\n} from \"components/graphQL/Mutation\";\nimport {\n  getPartners,\n  getSingleProvider,\n  getProviders,\n  DELETE_PARTNER,\n} from \"components/graphQL/useQuery\";\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\nimport {\n  addNewPartnerValidationSchema,\n  addPartnerValidationSchema,\n  filterPartnersValidationSchema,\n} from \"helpers/validationSchemas\";\nimport Copy from \"components/Copy\";\nimport Filter from \"components/Forms/Filters\";\nimport { PageInfo } from \"components/graphQL/fragment\";\nimport TableLayout from \"components/layouts/TableLayout\";\n\nconst Partners = () => {\n  const theme = useTheme();\n  const classes = useStyles();\n  const { displayAlert } = useAlert();\n  /* const [setCategoryDatas] = useState([]); */\n  const { setSelectedRows } = useActions();\n  const { enqueueSnackbar } = useSnackbar();\n  const [partner, setPartners] = useState([]);\n  const [dropDown, setDropDown] = useState([]);\n  const [addPartners] = useMutation(addPartner);\n  const categoryData = useQuery(getSingleProvider);\n  const [delete_partner] = useLazyQuery(DELETE_PARTNER);\n  /*   const [searchPartner, setSearchPartner] = useState(\"\"); */\n  const [isDeleting, setIsDeleting] = useState({});\n  const [addPartnerCat] = useMutation(addPartnerCategory);\n  const { data: da, loading: load } = useQuery(getProviders);\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\n  const [openAddPartner, setOpenAddPartner] = useState(false);\n  const [openFilterPartner, setOpenFilterPartner] = useState(false);\n  const [openDeletePartner, setOpenDeletePartner] = useState(false);\n  const [partnerToDelete, setPartnerToDelete] = useState(null);\n  const [partnerFilterValues, setPartnerFilterValues] = useState({\n    category: \"\",\n  });\n  const { selectedRows /* page */ } = useSelector((state) => state.tables);\n  const [openAddPartnerCategory, setAddPartnerCategory] = useState(false);\n  const [fetchPartners, { loading, error, refetch, variables }] =\n    useLazyQuery(getPartners);\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\n\n  const specializations = [\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\n    { key: \"Hospital\", value: \"Hospital\" },\n  ];\n  const specializations5 = [\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\n    { key: \"Hospital\", value: \"Hospital\" },\n  ];\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n\n  const darkButtonType = {\n    background: theme.palette.primary.main,\n    hover: theme.palette.primary.light,\n    active: theme.palette.primary.dark,\n  };\n  const initialValues = {\n    Name: \"\",\n    date: \"\",\n    category: \"\",\n  };\n\n  const initialValues1 = {\n    name: \"\",\n    email: \"\",\n    specialization: \"\",\n    image: null,\n    provider: \"\",\n  };\n\n  const initialValues2 = {\n    category: \"\",\n  };\n\n  const setTableData = async (response, errMsg) => {\n    response\n      .then((res) => {\n        const { data } = res;\n        if (data) {\n          setPartners(data?.getPartners?.data || []);\n          setPageInfo(data?.getPartners?.pageInfo || defaultPageInfo);\n        }\n        if (!data) {\n          setPartners(res?.getPartners?.data || []);\n          setPageInfo(res?.getPartners?.pageInfo || defaultPageInfo);\n        }\n      })\n      .catch((error) => {\n        console.error(error);\n        displayAlert(\"error\", errMsg);\n      });\n  };\n\n  const fetchPartnersData = async () => {\n    const res = fetchPartners({\n      variables: {\n        first: pageInfo.limit,\n      },\n    });\n    setTableData(res, \"Couldn't fetch Partners data\");\n  };\n\n  useEffect(() => {\n    fetchPartnersData();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  useEffect(() => {\n    if (da) {\n      const datas = da.getProviders.provider;\n      setDropDown(\n        datas &&\n          datas.map((i) => {\n            return { key: i.name, value: i._id };\n          })\n      );\n    }\n  }, [da]);\n\n  useEffect(() => {\n    (partner || []).map((p) => {\n      const newIsDeleting = isDeleting;\n      setIsDeleting({ [p._id]: false, ...newIsDeleting });\n      return null;\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [partner]);\n\n  const onSubmit = (values) => {\n    console.log(values);\n  };\n\n  const onSubmit2 = async (values, onSubmitProps) => {\n    const { category } = values;\n\n    try {\n      const addCatRes = await addPartnerCat({\n        variables: {\n          name: category,\n        },\n      });\n\n      if (addCatRes?.addPartner?.partner) {\n        setAddPartnerCategory(false);\n        onSubmitProps.resetForm();\n        const res = refetch();\n        setTableData(res, \"Couldn't fetch partners.\");\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  const onSubmit1 = async (values, onSubmitProps) => {\n    let { name, email, specialization, provider, image } = values;\n    name = name.trim();\n\n    try {\n      await addPartners({\n        variables: {\n          name,\n          email,\n          category: specialization,\n          logoImageUrl: image,\n          providerId: provider,\n        },\n        refetchQueries: [{ query: getPartners }],\n      });\n      enqueueSnackbar(\"Partner added successfully\", {\n        variant: \"success\",\n      });\n      onSubmitProps.resetForm();\n      setOpenAddPartner(false);\n    } catch (err) {\n      console.log(err, \"err\");\n      enqueueSnackbar(\"Email is already taken\", {\n        variant: \"error\",\n      });\n    }\n  };\n\n  const onFilterCategoryChange = async (value) => {\n    try {\n      deleteVar(variables);\n      setPartnerFilterValues({ ...partnerFilterValues, category: value });\n      const filterVariables = { category: value };\n\n      const res = filterData(filterVariables, {\n        fetchData: fetchPartners,\n        refetch: refetch,\n        variables: variables,\n      });\n      await setTableData(res, \"couldn't filter table.\");\n    } catch (error) {\n      console.error(error);\n      refresh(setPartnerFilterValues, \"\");\n    }\n  };\n\n  const refresh = async (setFilterValue, defaultVal) => {\n    displayAlert(\"error\", `Something went wrong while filtering. Try again.`);\n    setFilterValue(defaultVal);\n\n    deleteVar(variables);\n\n    const res = refetch();\n    await setTableData(res, \"couldn't filter table.\");\n  };\n  const [newProfileUrl, setNewProfileUrl] = useState(\"\");\n\n  useEffect(() => {\n    setNewProfileUrl(daa?.regeneratePartnerProfileUrl?.partner?.profileUrl);\n  }, [daa]);\n  const [Id, setId] = useState(\"\");\n  const handleGenerateLink = async (id) => {\n    setId(id);\n    await regenerate({\n      variables: {\n        id,\n      },\n      refetchQueries: [\n        {\n          query: getPartners,\n          variables: {\n            variables: pageInfo.page,\n            limit: PageInfo.limit,\n          },\n        },\n      ],\n    });\n  };\n\n  const z = (id) => {\n    let b = \"\";\n    const m = daa?.regeneratePartnerProfileUrl?.partner?._id;\n    if (id === m) {\n      b = m;\n    } else {\n      b = \"\";\n    }\n    return b;\n  };\n  useEffect(() => {\n    partner.map((item) => {\n      if (item._id === Id) {\n        return {\n          ...item,\n          profileUrl: newProfileUrl,\n        };\n      }\n    });\n\n    //eslint-disable-next-line\n  }, [Id, newProfileUrl]);\n  if (error || categoryData.error)\n    return <NoData error={error || categoryData.error} />;\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      gap={{ sm: 4, xs: 2 }}\n      flexWrap=\"nowrap\"\n      height=\"100%\"\n    >\n      <Grid\n        item\n        container\n        gap={2}\n        direction={{ md: \"row\", sm: \"row\", xs: \"column\" }}\n      >\n        <Grid\n          item\n          container\n          justifyContent=\"flex-end\"\n          alignItems=\"center\"\n          flex={{ sm: 1, xs: 1, md: 1 }}\n        >\n          <Grid item>\n            <CustomButton\n              endIcon={<PersonAddAlt1Icon />}\n              title=\"Add  Partner\"\n              type={darkButtonType}\n              onClick={() => setOpenAddPartner(true)}\n            />\n          </Grid>\n        </Grid>\n      </Grid>\n      <TableLayout\n        filters={\n          <Filter\n            onHandleChange={(e) => onFilterCategoryChange(e?.target?.value)}\n            onClickClearBtn={() => onFilterCategoryChange(\"\")}\n            options={[{ key: \"Category\", value: \"\" }, ...categoryFilterOptions]}\n            name=\"category\"\n            placeholder=\"None\"\n            value={partnerFilterValues.category}\n            hasClearBtn={true}\n            disable={loading}\n          />\n        }\n      >\n        {load || loading ? (\n          <Loader />\n        ) : partner.length > 0 ? (\n          <Grid item container height=\"100%\" direction=\"column\">\n            <EnhancedTable\n              headCells={partnersHeadCells}\n              rows={partner}\n              paginationLabel=\"Partner per page\"\n              hasCheckbox={true}\n              changeLimit={async (e) => {\n                const res = changeTableLimit(fetchPartners, {\n                  first: e,\n                });\n                await setTableData(res, \"Failed to change table limit.\");\n              }}\n              dataPageInfo={pageInfo}\n              handlePagination={async (page) => {\n                const res = handlePageChange(fetchPartners, page, pageInfo, {});\n                await setTableData(res, \"Failed to change page.\");\n              }}\n            >\n              {partner.map((row, index) => {\n                const isItemSelected = isSelected(row.id, selectedRows);\n                const labelId = `enhanced-table-checkbox-${index}`;\n                const { _id, logoImageUrl, name, category, profileUrl } = row;\n\n                return (\n                  <TableRow\n                    hover\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={_id}\n                    selected={isItemSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        onClick={() =>\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\n                        }\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          \"aria-labelledby\": labelId,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ maxWidth: \"20rem\" }}\n                    >\n                      <div\n                        style={{\n                          height: \"100%\",\n                          display: \"flex\",\n                          alignItems: \"left\",\n                        }}\n                      >\n                        <span style={{ marginRight: \"1rem\" }}>\n                          <Avatar\n                            alt={`Display Photo of ${name}`}\n                            src={logoImageUrl}\n                            sx={{ width: 24, height: 24 }}\n                          />\n                        </span>\n                        <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                        maxWidth: \"20rem\",\n                      }}\n                    >\n                      {category}\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                        maxWidth: \"20rem\",\n                      }}\n                    >\n                      {profileUrl || z(_id) !== \"\" ? (\n                        <Typography\n                          style={{\n                            color: theme.palette.common.grey,\n                            maxWidth: \"20rem\",\n                          }}\n                          sx={{ display: \"flex\", alignItems: \"center\" }}\n                        >\n                          {trucateProfileLink(profileUrl ? profileUrl : z(_id))}\n                          <div style={{ marginLeft: \"1rem\" }}>\n                            <Copy\n                              name=\"Profile Link\"\n                              text={profileUrl ? profileUrl : z(_id)}\n                            />\n                          </div>\n                        </Typography>\n                      ) : (\n                        <Button\n                          variant=\"contained\"\n                          disableRipple\n                          className={`${classes.tableBtn} ${classes.redBtn}`}\n                          onClick={() => handleGenerateLink(_id)}\n                        >\n                          Generate Link\n                        </Button>\n                      )}\n                    </TableCell>\n                    <TableCell align=\"center\" className={classes.tableCell}>\n                      {isDeleting[_id] ? (\n                        <Loader />\n                      ) : (\n                        <Button\n                          variant=\"contained\"\n                          disableRipple\n                          className={`${classes.tableBtn} ${classes.redBtn}`}\n                          endIcon={<DeleteIcon color=\"error\" />}\n                          onClick={() => {\n                            setPartnerToDelete(_id || \"\");\n                            setOpenDeletePartner(true);\n                          }}\n                        >\n                          Delete partner\n                        </Button>\n                      )}\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </EnhancedTable>\n          </Grid>\n        ) : (\n          <EmptyTable\n            headCells={partnersHeadCells}\n            paginationLabel=\"Doctors per page\"\n          />\n        )}\n      </TableLayout>\n      <Modals\n        isOpen={openFilterPartner}\n        title=\"Filter\"\n        rowSpacing={5}\n        width={{ sm: \"40vw\", xs: \"90vw\", md: \"40vw\" }}\n        handleClose={() => setOpenFilterPartner(false)}\n      >\n        <Formik\n          initialValues={initialValues}\n          onSubmit={onSubmit}\n          validateOnBlur={false}\n          validationSchema={filterPartnersValidationSchema}\n          validateOnChange={false}\n          validateOnMount={false}\n        >\n          {({ isSubmitting, isValid, dirty }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid item container direction=\"column\" gap={3}>\n                  <Grid item marginBottom={3}>\n                    <Grid container spacing={2}>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"input\"\n                          name=\"Name\"\n                          label=\"Name\"\n                          placeholder=\"Select name\"\n                        />\n                      </Grid>\n                      <Grid item xs={6}>\n                        <FormikControl\n                          control=\"select\"\n                          options={specializations}\n                          name=\"date\"\n                          label=\"Date\"\n                          placeholder=\"Choose Date\"\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid\n                  item\n                  container\n                  spacing={2}\n                  style={{ marginBottom: \"10rem\" }}\n                >\n                  <Grid item xs={6}>\n                    <FormikControl\n                      control=\"select\"\n                      options={specializations}\n                      name=\"category\"\n                      label=\"Category\"\n                      placeholder=\"Select Category\"\n                    />\n                  </Grid>\n                  {/* Placeholder grid */}\n                  <Grid item md></Grid>\n                </Grid>\n                <Grid item container xs={12}>\n                  <CustomButton\n                    title=\"Apply Filter\"\n                    width=\"100%\"\n                    type={buttonType}\n                    isSubmitting={isSubmitting}\n                    disabled={!(dirty || isValid)}\n                  />\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n\n      {/* ADD NEW PARTER MODAL */}\n      <Modals\n        isOpen={openAddPartner}\n        title=\"Add Partners\"\n        rowSpacing={5}\n        handleClose={() => setOpenAddPartner(false)}\n      >\n        <Formik\n          initialValues={initialValues1}\n          onSubmit={onSubmit1}\n          validationSchema={addNewPartnerValidationSchema}\n          validateOnChange={false}\n          validateOnMount={false}\n          validateOnBlur={false}\n        >\n          {({ isSubmitting, isValid, dirty, values, setFieldValue }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid container direction=\"column\" gap={4}>\n                  <Grid item container>\n                    <Grid item container direction=\"column\" gap={1}>\n                      <Grid item container>\n                        <Grid item container>\n                          <FormikControl\n                            control=\"input\"\n                            label=\"Name\"\n                            id=\"name\"\n                            name=\"name\"\n                            placeholder=\"Enter Partner name\"\n                          />\n                        </Grid>\n                      </Grid>\n                      <Grid item container>\n                        <Grid item container>\n                          <FormikControl\n                            control=\"input\"\n                            label=\"Email\"\n                            id=\"name\"\n                            name=\"email\"\n                            placeholder=\"Enter Email\"\n                          />\n                        </Grid>\n                      </Grid>\n\n                      <Grid item container>\n                        <Grid item container>\n                          <FormikControl\n                            control=\"select\"\n                            options={\n                              [\n                                { key: \"Diagnostics\", value: \"diagnostics\" },\n                                { key: \"Pharmacy\", value: \"pharmacy\" },\n                                { key: \"Hospital\", value: \"hospital\" },\n                              ] || \"\"\n                            }\n                            name=\"specialization\"\n                            label=\"Category\"\n                            placeholder=\"Category\"\n                          />\n                        </Grid>\n                      </Grid>\n                      {values.specialization === \"hospital\" ? (\n                        <Grid item container>\n                          <Grid item container>\n                            <FormikControl\n                              control=\"select\"\n                              options={dropDown || \"\"}\n                              name=\"provider\"\n                              label=\"Provider\"\n                              id=\"provider\"\n                              placeholder=\"select Provider\"\n                            />\n                          </Grid>\n                        </Grid>\n                      ) : null}\n                      <Grid item container direction=\"column\" gap={2}>\n                        <Grid item container>\n                          <Grid container spacing={2}>\n                            <Grid item md>\n                              <FormikControl\n                                control=\"file\"\n                                name=\"image\"\n                                label=\"Company Logo\"\n                                setFieldValue={setFieldValue}\n                              />\n                            </Grid>\n                          </Grid>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item container>\n                    <CustomButton\n                      title=\"Add Partner\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n\n      {/* Add Partner Category */}\n      <Modals\n        isOpen={openAddPartnerCategory}\n        title=\"Add Partners Category\"\n        rowSpacing={5}\n        handleClose={() => setAddPartnerCategory(false)}\n      >\n        <Formik\n          initialValues={initialValues2}\n          onSubmit={onSubmit2}\n          validationSchema={addPartnerValidationSchema}\n          validateOnChange={false}\n          validateOnMount={false}\n          validateOnBlur={false}\n        >\n          {({ isSubmitting, isValid, dirty }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid container direction=\"column\" gap={3}>\n                  <Grid item container>\n                    <Grid item container direction=\"column\" gap={1}>\n                      <Grid item container>\n                        <FormikControl\n                          control=\"select\"\n                          options={specializations5}\n                          name=\"category\"\n                          label=\"Category\"\n                          placeholder=\"Specialization\"\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item container>\n                    <CustomButton\n                      title=\"Add Partner\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n      <DeletePartner\n        open={openDeletePartner}\n        setOpen={setOpenDeletePartner}\n        title=\"Delete Partner\"\n        btnValue=\"delete\"\n        onConfirm={async () => {\n          const res = deleteItem(\n            delete_partner,\n            partnerToDelete,\n            setPartnerToDelete,\n            refetch,\n            Typography,\n            enqueueSnackbar,\n            setIsDeleting,\n            isDeleting\n          );\n          setOpenDeletePartner(false);\n          await setTableData(res, \"Couldn't refetch Partners\");\n        }}\n        confirmationMsg=\"delete partner\"\n        onCancel={() => {\n          setPartnerToDelete(null);\n        }}\n      />\n    </Grid>\n  );\n};\n\nexport default Partners;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Patients.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Rows/PlanListRow.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Rows/HMOPlanRow.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Messages.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Chat.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/tableData.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/helpers/asideMenus.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/LogoutIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/SearchIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/BellIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/UserTypeModal.js",["945"],"import React, { useEffect } from \"react\";\nimport CustomButton from \"components/Utilities/CustomButton\";\nimport { Formik, Form } from \"formik\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport { Grid } from \"@mui/material\";\nimport PropTypes from \"prop-types\";\nimport { useMutation, useQuery } from \"@apollo/client\";\nimport { getUserTypes, getUserType } from \"components/graphQL/useQuery\";\nimport { createUserType, editUserType } from \"components/graphQL/Mutation\";\nimport * as Yup from \"yup\";\nimport { useTheme } from \"@mui/material/styles\";\n\nexport const UserTypeModal = ({\n  handleDialogClose,\n  type,\n  editId,\n  singleData,\n  setSingleData,\n  initialValues,\n}) => {\n  const theme = useTheme();\n\n  const [createType] = useMutation(createUserType, {\n    refetchQueries: [{ query: getUserTypes }],\n  });\n  const [editType] = useMutation(editUserType, {\n    refetchQueries: [{ query: getUserTypes }],\n  });\n\n  const single = useQuery(getUserType, {\n    variables: {\n      id: editId,\n    },\n  });\n\n  useEffect(() => {\n    if (single.data) {\n      setSingleData({\n        name: single.data.getUserType.name,\n        image: single.data.getUserType.icon,\n        id: single.data.getUserType._id,\n        description: single.data.getUserType.description,\n      });\n    }\n  }, [single.data, setSingleData]);\n  //   const [updatePlan] = useMutation(UPDATE_PLAN);\n\n  //   const single = useQuery(getSinglePlan, {\n  //     variables: {\n  //       id: editId,\n  //     },\n  //   });\n  const validationSchema = Yup.object({\n    name: Yup.string(\"Enter your Name\").trim().required(\"Name is required\"),\n    image: Yup.string(\"Upload a single Image\").required(\"Image is required\"),\n  });\n\n  const onSubmit = async (values, onSubmitProps) => {\n    const { name, image } = values;\n    if (type == \"add\") {\n      try {\n        await createType({ variables: { name, icon: image } });\n      } catch (err) {\n        console.log(err);\n      }\n    }\n    if (type === \"edit\") {\n      const { description, name, image, id } = values;\n      await editType({\n        variables: {\n          id,\n          name,\n          description,\n          icon: image,\n        },\n      });\n    }\n\n    onSubmitProps.resetForm();\n    handleDialogClose();\n  };\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n  return (\n    <Formik\n      initialValues={type === \"edit\" ? singleData : initialValues}\n      enableReinitialize\n      onSubmit={onSubmit}\n      validateOnBlur={false}\n      validationSchema={validationSchema}\n      validateOnChange={false}\n      validateOnMount={false}\n    >\n      {({ isSubmitting, dirty, isValid, setFieldValue }) => {\n        return (\n          <Form style={{ marginTop: \"3rem\" }}>\n            <Grid item container direction=\"column\" gap={1}>\n              <Grid item container rowSpacing={3}>\n                <Grid item container>\n                  <FormikControl\n                    control=\"textarea\"\n                    name=\"description\"\n                    label=\"Description\"\n                    placeholder=\"Description...\"\n                  />\n                </Grid>\n                <Grid item md display=\"flex\" alignItems=\"center\">\n                  <Grid item container md>\n                    <FormikControl\n                      control=\"file\"\n                      name=\"image\"\n                      label=\"Upload Your Logo\"\n                      setFieldValue={setFieldValue}\n                    />\n                  </Grid>\n                </Grid>\n\n                <Grid item xs={12}>\n                  <CustomButton\n                    title={type === \"edit\" ? \"Save UserTypes\" : \"Add UserTypes\"}\n                    width=\"100%\"\n                    isSubmitting={isSubmitting}\n                    disabled={!(dirty || isValid)}\n                    type={buttonType}\n                  />\n                </Grid>\n              </Grid>\n            </Grid>\n          </Form>\n        );\n      }}\n    </Formik>\n  );\n};\n\nUserTypeModal.propTypes = {\n  handleDialogClose: PropTypes.func,\n  setAlert: PropTypes.func,\n  editId: PropTypes.string,\n  type: PropTypes.string,\n  edit: PropTypes.bool,\n  initialValues: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  validationSchema: PropTypes.object,\n  singleData: PropTypes.object,\n  setSingleData: PropTypes.func,\n};\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/Success.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/styles/partnersPageStyles.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Medications.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/MedicalRecords.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Management.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpProfile.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Hcps.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpConsultations.js",["946"],"import React, { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { getDocConsult } from \"components/graphQL/useQuery\";\nimport {\n  Avatar,\n  Typography,\n  TableRow,\n  Button,\n  TableCell,\n  Checkbox,\n  Grid,\n} from \"@mui/material\";\nimport { consultationsHeadCells } from \"components/Utilities/tableHeaders\";\nimport { useSelector } from \"react-redux\";\nimport { NoData, EnhancedTable, EmptyTable } from \"components/layouts\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport { Loader } from \"components/Utilities\";\nimport { useParams } from \"react-router-dom\";\nimport { dateMoment } from \"components/Utilities/Time\";\nimport {\n  changeTableLimit,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport TableLayout from \"components/layouts/TableLayout\";\n\nconst useStyles = makeStyles((theme) => ({\n  tableCell: {\n    \"&.css-1jilxo7-MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n\n  button: {\n    \"&.MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"1rem\",\n      maxWidth: \"12rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.2rem\",\n      },\n\n      \"& .MuiButton-endIcon\": {\n        marginLeft: \".3rem\",\n      },\n    },\n  },\n}));\n\n/* const filterOptions = [\n  { id: 0, value: \"Name\" },\n  { id: 1, value: \"Date\" },\n  { id: 2, value: \"Description\" },\n]; */\n\nconst HcpConsultations = (props) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [pageInfo, setPageInfo] = useState([]);\n  const { hcpId } = useParams();\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n  const [consultations, setConsultations] = useState([]);\n\n  const [fetchDocConsultations, { loading, data, error }] =\n    useLazyQuery(getDocConsult);\n\n  useEffect(() => {\n    fetchDocConsultations({\n      variables: {\n        id: hcpId,\n        orderBy: \"-createdAt\",\n      },\n      notifyOnNetworkStatusChange: true,\n    });\n  }, [fetchDocConsultations, hcpId]);\n\n  useEffect(() => {\n    if (data && data.getConsultations.data) {\n      setConsultations(data.getConsultations.data);\n      setPageInfo(data.getConsultations.pageInfo);\n    }\n  }, [data, hcpId]);\n\n  if (error) return <NoData error={error} />;\n  if (loading) return <Loader />;\n  return (\n    <Grid container direction=\"column\" height=\"100%\" gap={2}>\n      <Grid\n        item\n        container\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n      ></Grid>\n      <TableLayout>\n        {consultations.length > 0 ? (\n          <Grid item>\n            <EnhancedTable\n              headCells={consultationsHeadCells}\n              rows={consultations}\n              paginationLabel=\"Consultations per page\"\n              hasCheckbox={true}\n              changeLimit={async (e) => {\n                await changeTableLimit(fetchDocConsultations, {\n                  first: e,\n                  id: hcpId,\n                });\n              }}\n              dataPageInfo={pageInfo}\n              handlePagination={async (page) => {\n                await handlePageChange(fetchDocConsultations, page, pageInfo, {\n                  id: hcpId,\n                });\n              }}\n            >\n              {consultations.map((row, index) => {\n                // eslint-disable-next-line\n                const {\n                  _id,\n                  createdAt,\n                  symptoms,\n                  status,\n                  type,\n                  contactMedium,\n                  patientData,\n\n                  // eslint-disable-next-line\n                } = row;\n                const isItemSelected = isSelected(row._id, selectedRows);\n                const labelId = `enhanced-table-checkbox-${index}`;\n                return (\n                  <TableRow\n                    hover\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={_id}\n                    selected={isItemSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        onClick={() =>\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\n                        }\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          \"aria-labelledby\": labelId,\n                        }}\n                      />\n                    </TableCell>\n\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      {dateMoment(createdAt)}\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ maxWidth: \"20rem\" }}\n                    >\n                      <div\n                        style={{\n                          height: \"100%\",\n                          display: \"flex\",\n                          alignItems: \"left\",\n                        }}\n                      >\n                        <span style={{ marginRight: \"1rem\" }}>\n                          <Avatar\n                            alt={`Display Photo of ${patientData.firstName}`}\n                            src={\n                              patientData.picture\n                                ? patientData.picture\n                                : displayPhoto\n                            }\n                            sx={{ width: 24, height: 24 }}\n                          />\n                        </span>\n                        <span\n                          style={{ fontSize: \"1.25rem\" }}\n                        >{`${patientData.firstName} ${patientData.lastName}`}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                        maxWidth: \"20rem\",\n                      }}\n                    >\n                      <Grid container gap={1}>\n                        {symptoms\n                          ? symptoms.map((i) => {\n                              return <p key={i.name}>{i.name}</p>;\n                            })\n                          : \"No Value\"}\n                      </Grid>\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                        maxWidth: \"20rem\",\n                      }}\n                    >\n                      {contactMedium}\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                        maxWidth: \"20rem\",\n                      }}\n                    >\n                      {type ? type : \"No Value\"}\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                        maxWidth: \"20rem\",\n                      }}\n                    >\n                      {status ? status : \"No Value\"}\n                    </TableCell>\n                    <TableCell align=\"left\">\n                      <Button\n                        variant=\"contained\"\n                        className={classes.button}\n                        component={Link}\n                        to={`/hcps/${hcpId}/consultations/case-notes/${_id}`}\n                        endIcon={<ArrowForwardIosIcon />}\n                      >\n                        View Details\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </EnhancedTable>\n          </Grid>\n        ) : (\n          <EmptyTable\n            headCells={consultationsHeadCells}\n            paginationLabel=\"Consultation  per page\"\n          />\n        )}\n      </TableLayout>\n    </Grid>\n  );\n};\n\nexport default HcpConsultations;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpPatients.js",["947"],"import React, { useState, useEffect } from \"react\";\nimport {\n  Grid,\n  Typography,\n  Avatar,\n  TableRow,\n  Checkbox,\n  TableCell,\n  Button,\n} from \"@mui/material\";\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport { hcpPatientsHeadCells } from \"components/Utilities/tableHeaders\";\nimport { useSelector } from \"react-redux\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { Link, useParams } from \"react-router-dom\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { Loader } from \"components/Utilities\";\nimport { getDoctorPatients } from \"components/graphQL/useQuery\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport {\n  changeTableLimit,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport TableLayout from \"components/layouts/TableLayout\";\n\nconst useStyles = makeStyles((theme) => ({\n  tableCell: {\n    \"&.MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n\n  button: {\n    \"&.MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"1rem\",\n      whitespace: \"nowrap\",\n      maxWidth: \"15rem\",\n      width: \"100%\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.2rem\",\n      },\n    },\n  },\n}));\n\nconst HcpPatients = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [pageInfo, setPageInfo] = useState([]);\n\n  const { hcpId } = useParams();\n\n  const { setSelectedRows } = useActions();\n  const { selectedRows } = useSelector((state) => state.tables);\n\n  const [fetchDoctorsPatients, { loading, error, data }] =\n    useLazyQuery(getDoctorPatients);\n\n  useEffect(() => {\n    fetchDoctorsPatients({\n      variables: { id: hcpId },\n      notifyOnNetworkStatusChange: true,\n    });\n  }, [fetchDoctorsPatients, hcpId]);\n\n  const [profiles, setProfiles] = useState([]);\n  useEffect(() => {\n    if (data) {\n      setProfiles(data.getDoctorPatients.data);\n      setPageInfo(data.getDoctorPatients.pageInfo);\n    }\n  }, [data]);\n\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error} />;\n  return (\n    <Grid\n      container\n      direction=\"column\"\n      gap={2}\n      flexWrap=\"nowrap\"\n      height=\"100%\"\n      sx={{ margin: \"3rem 0rem\" }}\n    >\n      <TableLayout>\n        {profiles.length > 0 ? (\n          <Grid item container direction=\"column\" height=\"100%\">\n            <EnhancedTable\n              headCells={hcpPatientsHeadCells}\n              rows={profiles}\n              paginationLabel=\"List Per Page\"\n              hasCheckbox={true}\n              changeLimit={async (e) => {\n                await changeTableLimit(fetchDoctorsPatients, {\n                  first: e,\n                  id: hcpId,\n                });\n              }}\n              dataPageInfo={pageInfo}\n              handlePagination={async (page) => {\n                await handlePageChange(fetchDoctorsPatients, page, pageInfo, {\n                  id: hcpId,\n                });\n              }}\n            >\n              {profiles.map((row, index) => {\n                const { _id, patientData } = row;\n                const isItemSelected = isSelected(_id, selectedRows);\n                const labelId = `enhanced-table-checkbox-${index}`;\n\n                return (\n                  <TableRow\n                    hover\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={_id}\n                    selected={isItemSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        onClick={() =>\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\n                        }\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          \"aria-labelledby\": labelId,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell\n                      id={labelId}\n                      scope=\"row\"\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ color: theme.palette.common.grey }}\n                    >\n                      {patientData && patientData?.dociId?.split(\"-\")[1]}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      <div\n                        style={{\n                          height: \"100%\",\n                          display: \"flex\",\n                          alignItems: \"center\",\n                          textAlign: \"left\",\n                        }}\n                      >\n                        <span style={{ marginRight: \"1rem\" }}>\n                          <Avatar\n                            alt=\"\"\n                            src={row.image}\n                            sx={{ width: 24, height: 24 }}\n                          />\n                        </span>\n                        <span style={{ fontSize: \"1.25rem\" }}>\n                          {patientData?.firstName\n                            ? `${patientData?.firstName} ${patientData?.lastName}`\n                            : \"No Patient Name\"}\n                          {row.lastName}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      {patientData?.gender && patientData?.gender}\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        variant=\"contained\"\n                        className={classes.button}\n                        component={Link}\n                        to={`/patients/${patientData?._id}/profile`}\n                        endIcon={<ArrowForwardIosIcon />}\n                      >\n                        View Patient Profile\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </EnhancedTable>\n          </Grid>\n        ) : (\n          <EmptyTable\n            headCells={hcpPatientsHeadCells}\n            paginationLabel=\"List  per page\"\n          />\n        )}\n      </TableLayout>\n    </Grid>\n  );\n};\n\nexport default HcpPatients;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HCPChat.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Payout.js",["948"],"import React, { useEffect, useState } from \"react\";\nimport { NoData, EmptyTable } from \"components/layouts\";\nimport {\n  Grid,\n  Typography,\n  Chip,\n  Checkbox,\n  TableRow,\n  TableCell,\n  Avatar,\n} from \"@mui/material\";\nimport { timeMoment, dateMoment } from \"components/Utilities/Time\";\nimport { Loader } from \"components/Utilities\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { getPayoutData } from \"components/graphQL/useQuery\";\nimport { EnhancedTable } from \"components/layouts\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { payoutHeader } from \"components/Utilities/tableHeaders\";\nimport useAlert from \"hooks/useAlert\";\nimport { useSelector } from \"react-redux\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { isSelected } from \"helpers/isSelected\";\nimport Filter from \"components/Forms/Filters\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport { defaultPageInfo, payoutFilterBy } from \"helpers/mockData\";\nimport {\n  changeTableLimit,\n  deleteVar,\n  fetchMoreData,\n  filterData,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport TableLayout from \"components/layouts/TableLayout\";\n\nconst useStyles = makeStyles((theme) => ({\n  iconWrapper: {\n    width: 20,\n    height: 20,\n    borderRadius: \"50%\",\n    display: \"grid\",\n    placeContent: \"center\",\n    marginLeft: \"1rem\",\n    background: theme.palette.common.lightGreen,\n  },\n  button: {\n    \"&.css-1zf5oc-MuiButtonBase-root-MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"1rem\",\n      maxWidth: \"10rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .css-9tj150-MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.2rem\",\n      },\n\n      \"& .css-9tj150-MuiButton-endIcon\": {\n        marginLeft: \".3rem\",\n        marginTop: \"-.2rem\",\n      },\n    },\n  },\n\n  tableCell: {\n    \"&.css-1jilxo7-MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.6rem !important\",\n      height: \"3rem\",\n      borderRadius: \"1.3rem\",\n    },\n  },\n}));\n\nconst Payout = () => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const { displayAlert } = useAlert();\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n  const [payout, setPayout] = useState([]);\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\n\n  const [statusFilterValue, setStatusFilterValue] = useState(\"\");\n  const [fetchPayout, { loading, error, refetch, variables }] =\n    useLazyQuery(getPayoutData);\n\n  useEffect(() => {\n    try {\n      fetchPayout({ variables: { first: pageInfo?.limit } }).then(\n        ({ data }) => {\n          if (!data) throw Error(\"Couldn't fetch doctors payout data\");\n          setPageInfo(data?.getEarningStats?.payoutData?.PageInfo);\n          setPayout(data?.getEarningStats?.payoutData?.data);\n        }\n      );\n    } catch (error) {\n      console.error(error);\n    }\n  }, [fetchPayout, pageInfo?.limit]);\n\n  const onFilterStatusChange = async (value) => {\n    try {\n      deleteVar(variables);\n      setStatusFilterValue(value);\n      const filterVariables = { status: value };\n\n      filterData(filterVariables, {\n        fetchData: fetchPayout,\n        refetch: refetch,\n        variables: variables,\n      })\n        .then((data) => {\n          setPayout(data?.getEarningStats?.payoutData?.data || []);\n          setPageInfo(data?.getEarningStats?.payoutData?.PageInfo || {});\n        })\n        .catch(() => {\n          refresh(setStatusFilterValue, \"\");\n        });\n    } catch (error) {\n      console.error(error);\n      refresh(setStatusFilterValue, \"\");\n    }\n  };\n\n  const refresh = async (setFilterValue, defaultVal) => {\n    displayAlert(\"error\", `Something went wrong while filtering. Try again.`);\n    setFilterValue(defaultVal);\n\n    deleteVar(variables);\n\n    refetch()\n      .then(({ data }) => {\n        setPayout(data?.getEarningStats?.payoutData?.data || []);\n        setPageInfo(data?.getEarningStats?.payoutData?.PageInfo || {});\n      })\n      .catch((error) => {\n        console.error(error);\n        displayAlert(\"error\", `Failed to get patients data, Try again`);\n      });\n  };\n\n  const setTableData = async (response, errMsg) => {\n    response\n      .then(({ data }) => {\n        setPageInfo(\n          data?.getEarningStats?.payoutData?.PageInfo || defaultPageInfo\n        );\n        setPayout(data?.getEarningStats?.payoutData?.data || []);\n      })\n      .catch((error) => {\n        console.error(error);\n        displayAlert(\"error\", errMsg);\n      });\n  };\n\n  if (error) return <NoData error={error} />;\n\n  return (\n    <Grid container direction=\"column\" rowSpacing={2}>\n      <>\n        <Grid\n          item\n          container\n          justifyContent=\"space-between\"\n          style={{ paddingBottom: \"3rem\" }}\n        ></Grid>\n        <TableLayout\n          filters={\n            <Filter\n              onHandleChange={(e) => onFilterStatusChange(e?.target?.value)}\n              onClickClearBtn={() => onFilterStatusChange(\"\")}\n              options={[{ key: \"Status\", value: \"\" }, ...payoutFilterBy]}\n              name=\"status\"\n              placeholder=\"None\"\n              value={statusFilterValue}\n              hasClearBtn={true}\n            />\n          }\n        >\n          {loading ? (\n            <Loader />\n          ) : payout.length > 0 ? (\n            <Grid item container>\n              <EnhancedTable\n                headCells={payoutHeader}\n                rows={payout}\n                paginationLabel=\"payout per page\"\n                hasCheckbox={true}\n                changeLimit={async (e) => {\n                  const res = await changeTableLimit(fetchPayout, { first: e });\n                  await setTableData(res, \"Failed to change table limit.\");\n                }}\n                dataPageInfo={pageInfo}\n                handlePagination={async (page) => {\n                  const res = await handlePageChange(\n                    fetchPayout,\n                    page,\n                    pageInfo,\n                    {}\n                  );\n                  await setTableData(res, \"Failed to change table page.\");\n                }}\n                fetchData={fetchPayout}\n                handleChangePage={fetchMoreData}\n              >\n                {payout.map((row, index) => {\n                  const { amount, createdAt, status, _id, doctorData } = row;\n                  const data = doctorData || [];\n                  const { firstName, lastName, picture } = data[0] || {};\n                  const isItemSelected = isSelected(_id, selectedRows);\n                  const labelId = `enhanced-table-checkbox-${index}`;\n\n                  return (\n                    <TableRow\n                      hover\n                      role=\"checkbox\"\n                      aria-checked={isItemSelected}\n                      tabIndex={-1}\n                      key={_id}\n                      selected={isItemSelected}\n                    >\n                      <TableCell padding=\"checkbox\">\n                        <Checkbox\n                          onClick={() =>\n                            handleSelectedRows(\n                              _id,\n                              selectedRows,\n                              setSelectedRows\n                            )\n                          }\n                          color=\"primary\"\n                          checked={isItemSelected}\n                          inputProps={{\n                            \"aria-labelledby\": labelId,\n                          }}\n                        />\n                      </TableCell>\n                      <TableCell\n                        id={labelId}\n                        scope=\"row\"\n                        align=\"left\"\n                        className={classes.tableCell}\n                        style={{ color: theme.palette.common.black }}\n                      >\n                        {dateMoment(createdAt)}\n                      </TableCell>\n                      <TableCell\n                        id={labelId}\n                        scope=\"row\"\n                        align=\"left\"\n                        className={classes.tableCell}\n                        style={{ color: theme.palette.common.black }}\n                      >\n                        {timeMoment(createdAt)}\n                      </TableCell>\n                      <TableCell align=\"left\" className={classes.tableCell}>\n                        {row?.doctorData && row?.doctorData[0] !== {} ? (\n                          <div\n                            style={{\n                              height: \"100%\",\n                              display: \"flex\",\n                              alignItems: \"left\",\n                            }}\n                          >\n                            <span style={{ marginRight: \"1rem\" }}>\n                              <Avatar\n                                alt={`Display Photo of ${firstName}`}\n                                src={picture ? picture : displayPhoto}\n                                sx={{ width: 24, height: 24 }}\n                              />\n                            </span>\n                            <span style={{ fontSize: \"1.25rem\" }}>{`${\n                              firstName && firstName\n                            } ${lastName && lastName}`}</span>\n                          </div>\n                        ) : (\n                          \"No Name\"\n                        )}\n                      </TableCell>\n                      <TableCell\n                        align=\"left\"\n                        className={classes.tableCell}\n                        style={{ color: theme.palette.common.red }}\n                      >\n                        {amount}\n                      </TableCell>\n                      <TableCell align=\"left\" className={classes.tableCell}>\n                        <Chip\n                          label={status}\n                          className={classes.badge}\n                          style={{\n                            background:\n                              status === \"Success\"\n                                ? theme.palette.common.lightGreen\n                                : status === \"Failed\"\n                                ? theme.palette.common.lightGreen\n                                : theme.palette.common.lightRed,\n                            color:\n                              status === \"Success\"\n                                ? theme.palette.common.green\n                                : status === \"Failed\"\n                                ? theme.palette.common.danger\n                                : theme.palette.common.red,\n                          }}\n                        />\n                      </TableCell>\n                    </TableRow>\n                  );\n                })}\n              </EnhancedTable>\n            </Grid>\n          ) : (\n            <EmptyTable\n              headCells={payoutHeader}\n              paginationLabel=\"Payout  per page\"\n            />\n          )}\n        </TableLayout>\n      </>\n    </Grid>\n  );\n};\n\nexport default Payout;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpEarnings.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpAvailability.js",["949"],"import React, { useEffect, useState } from \"react\";\nimport { Grid, Typography } from \"@mui/material\";\nimport { AvailabilityCard, Loader } from \"components/Utilities\";\nimport { useParams } from \"react-router-dom\";\nimport { useQuery } from \"@apollo/client\";\nimport { getAvailability } from \"components/graphQL/useQuery\";\nimport { NoData } from \"components/layouts\";\n\nconst HcpAvailability = () => {\n  const [availabiltyArray, setAvailabiltyArray] = useState([]);\n  const { hcpId } = useParams();\n  const { loading, data, error } = useQuery(getAvailability, {\n    variables: {\n      id: hcpId,\n    },\n  });\n  useEffect(() => {\n    if (data) setAvailabiltyArray(data?.getAvailabilities?.availability);\n  }, [data]);\n\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error} />;\n  return (\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\n      <Grid\n        item\n        container\n        direction=\"column\"\n        gap={2}\n        flexWrap=\"nowrap\"\n        height=\"100%\"\n        sx={{ margin: \"2.5rem 0rem\" }}\n      >\n        {availabiltyArray.length > 0 ? (\n          availabiltyArray.map((availability, index) => {\n            if (availability?.times) {\n              return (\n                <Grid item key={index}>\n                  <AvailabilityCard availability={availability} />\n                </Grid>\n              );\n            } else {\n              return null;\n            }\n          })\n        ) : (\n          <NoData />\n        )}\n      </Grid>\n    </Grid>\n  );\n};\n\nexport default HcpAvailability;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpCaseNote.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HcpAppointments.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/HCP.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Financetable.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Finance.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Email.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/DoctorVerificationProfile.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/EditManagement.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/ViewDoctorVerification.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/CreateMessage.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Consultations.js",["950"],"import React, { useEffect, useState } from \"react\";\nimport { dateMoment } from \"components/Utilities/Time\";\nimport { Link } from \"react-router-dom\";\nimport {\n  Grid,\n  Typography,\n  TableRow,\n  TableCell,\n  Checkbox,\n  Button,\n  Avatar,\n} from \"@mui/material\";\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\nimport { consultationsHeadCells4 } from \"components/Utilities/tableHeaders\";\nimport { useSelector } from \"react-redux\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport { useParams } from \"react-router-dom\";\nimport { useLazyQuery } from \"@apollo/client\";\nimport { getConsultations } from \"components/graphQL/useQuery\";\nimport { Loader } from \"components/Utilities\";\nimport {\n  changeTableLimit,\n  handlePageChange,\n} from \"helpers/filterHelperFunctions\";\nimport TableLayout from \"components/layouts/TableLayout\";\n\nconst useStyles = makeStyles((theme) => ({\n  tableCell: {\n    \"&.css-1jilxo7-MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n    },\n  },\n\n  button: {\n    \"&.MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"1rem\",\n      maxWidth: \"12rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.2rem\",\n      },\n\n      \"& .MuiButton-endIcon\": {\n        marginLeft: \".3rem\",\n      },\n    },\n  },\n}));\n\n/* const filterOptions = [\n  { id: 0, value: \"Name\" },\n  { id: 1, value: \"Date\" },\n  { id: 2, value: \"Description\" },\n]; */\n\nconst Consultations = () => {\n  const [pageInfo, setPageInfo] = useState({});\n  const classes = useStyles();\n  const theme = useTheme();\n  const { patientConsultation } = useActions();\n  const { selectedRows } = useSelector((state) => state.tables);\n  const [consultations, setConsultations] = useState([]);\n  const { setSelectedRows } = useActions();\n  const { patientId } = useParams();\n\n  const [fetchConsultations, { loading, data, error }] =\n    useLazyQuery(getConsultations);\n\n  useEffect(() => {\n    fetchConsultations({\n      variables: {\n        id: patientId,\n        orderBy: \"-createdAt\",\n      },\n    });\n  }, [fetchConsultations, patientId]);\n\n  useEffect(() => {\n    if (data) {\n      setConsultations(data.getConsultations.data);\n      patientConsultation(data);\n      setPageInfo(data.getConsultations.pageInfo);\n    }\n  }, [data, consultations, patientConsultation]);\n\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error.message} />;\n\n  return (\n    <Grid container gap={2} flexWrap=\"nowrap\" direction=\"column\" height=\"100%\">\n      <Grid\n        item\n        container\n        flexWrap=\"nowrap\"\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        sx={{ margin: \"1rem 0rem\" }}\n      >\n        {/* <Grid item flex={1}>\n          <Typography variant=\"h2\">Consultations</Typography>\n        </Grid> */}\n        {/* <Grid item>\n          <FilterList options={filterOptions} title=\"Filter\" />\n        </Grid> */}\n      </Grid>\n      <TableLayout>\n        {consultations.length > 0 ? (\n          <Grid item container direction=\"column\" height=\"100%\">\n            <EnhancedTable\n              headCells={consultationsHeadCells4}\n              rows={consultations}\n              paginationLabel=\"Patients per page\"\n              hasCheckbox={true}\n              changeLimit={async (e) => {\n                await changeTableLimit(fetchConsultations, {\n                  first: e,\n                  id: patientId,\n                });\n              }}\n              dataPageInfo={pageInfo}\n              handlePagination={async (page) => {\n                await handlePageChange(fetchConsultations, page, pageInfo, {\n                  id: patientId,\n                });\n              }}\n            >\n              {consultations.map((row, index) => {\n                const { doctorData } = row;\n                const isItemSelected = isSelected(row._id, selectedRows);\n                const labelId = `enhanced-table-checkbox-${index}`;\n                return (\n                  <TableRow\n                    hover\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={row._id}\n                    selected={isItemSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        onClick={() =>\n                          handleSelectedRows(\n                            row._id,\n                            selectedRows,\n                            setSelectedRows\n                          )\n                        }\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          \"aria-labelledby\": labelId,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      {dateMoment(row.createdAt)}\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ maxWidth: \"25rem\" }}\n                    >\n                      <div\n                        style={{\n                          height: \"100%\",\n                          display: \"flex\",\n                          alignItems: \"center\",\n                        }}\n                      >\n                        <span style={{ marginRight: \"1rem\" }}>\n                          <Avatar\n                            alt={`Display Photo of ${doctorData.firstName}`}\n                            src={\n                              doctorData.picture\n                                ? doctorData.picture\n                                : displayPhoto\n                            }\n                            sx={{ width: 24, height: 24 }}\n                          />\n                        </span>\n                        <span style={{ fontSize: \"1.25rem\" }}>\n                          {doctorData.firstName\n                            ? `${doctorData.firstName} ${doctorData.lastName}`\n                            : \"No Doctor\"}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      <Grid container gap={1}>\n                        {row.symptoms\n                          ? row.symptoms.map((i) => {\n                              return <p key={i.name}>{i.name}</p>;\n                            })\n                          : \"No Value\"}\n                      </Grid>\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                        width: \"4rem\",\n                      }}\n                    >\n                      {row.contactMedium ? row.contactMedium : \"No Value\"}\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                      }}\n                    >\n                      {row.type ? row.type : \"No Value\"}\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{\n                        color: theme.palette.common.grey,\n                      }}\n                    >\n                      {row.status ? row.status : \"No Value\"}\n                    </TableCell>\n                    <TableCell align=\"left\">\n                      <Button\n                        variant=\"contained\"\n                        className={classes.button}\n                        component={Link}\n                        to={`/patients/${patientId}/consultations/case-notes/${row._id}`}\n                        endIcon={<ArrowForwardIosIcon />}\n                      >\n                        View Details\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </EnhancedTable>\n          </Grid>\n        ) : (\n          <EmptyTable\n            headCells={consultationsHeadCells4}\n            paginationLabel=\"Patients per page\"\n          />\n        )}\n      </TableLayout>\n    </Grid>\n  );\n};\n\nexport default Consultations;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Appointments.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/CaseNotes.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Administrator.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/helpers/breadcrumb.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Login.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Dashboard.js",["951","952"],"import React, { useEffect, useState } from \"react\";\nimport { Grid } from \"@mui/material\";\nimport { getProviders } from \"components/graphQL/useQuery\";\nimport { useQuery, useLazyQuery } from \"@apollo/client\";\nimport { dashboard, dashboard1 } from \"components/graphQL/useQuery\";\nimport { NoData, AvailabilityTable, DashboardCharts } from \"components/layouts\";\nimport { Loader } from \"components/Utilities\";\n\nconst Dashboard = () => {\n  const [form, setForm] = useState(\"\");\n  const [dropDown, setDropDown] = useState([]);\n  const [state, setState] = useState(\"\");\n  const { data: da } = useQuery(getProviders);\n\n  const [provider, setProvider] = useState(\"\");\n  const [fetchData, { data: newData, error: err, loading: load }] =\n    useLazyQuery(dashboard);\n  const [fetchData2, { data: newData2, error, loading }] =\n    useLazyQuery(dashboard1);\n\n  useEffect(() => {\n    const all = {\n      key: \"All Stats\",\n      value: \"\",\n    };\n    if (da) {\n      const datas = da.getProviders.provider;\n      const options = datas?.map((i) => {\n        return {\n          key: i.name,\n          value: i._id,\n        };\n      });\n\n      setDropDown([all, ...options]);\n    }\n  }, [da]);\n\n  useEffect(() => {\n    if (newData2) {\n      setState(newData2);\n    }\n    //eslint-disable-next-line\n  }, []);\n  const onChange = async (e) => {\n    setProvider(e.target.value);\n    setForm(e.target.value);\n  };\n\n  useEffect(() => {\n    if (provider === \"\") {\n      fetchData2();\n    } else {\n      fetchData({\n        variables: {\n          providerId: provider,\n        },\n      });\n    }\n    //eslint-disable-next-line\n  }, [provider]);\n\n  useEffect(() => {\n    if (newData) {\n      setState(newData);\n    }\n  }, [form, newData, provider]);\n  useEffect(() => {\n    if (newData2) {\n      setState(newData2);\n    }\n  }, [form, newData2, provider]);\n\n  if (loading || load) return <Loader />;\n\n  if (error || err) return <NoData error={error} />;\n\n  return (\n    <Grid container direction=\"column\" gap={2}>\n      {state ? (\n        <>\n          <DashboardCharts data={state?.getStats} />\n          <AvailabilityTable />\n        </>\n      ) : (\n        <NoData />\n      )}\n    </Grid>\n  );\n};\n\nexport default Dashboard;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/DataHeader.js",["953","954","955","956"],"import * as React from \"react\";\nimport Avatar from \"@mui/material/Avatar\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport Styled from \"styled-components\";\n\nexport const columns = [\n  {\n    field: \"entryDate\",\n    headerName: \"Entry Date\",\n    headerClassName: \"entryHeader\",\n    headerAlign: \"center\",\n    flex: 0.1,\n    cellClassName: \"entryDate\",\n    type: \"number\",\n    minWidth: 60,\n    sortable: false,\n  },\n\n  {\n    field: \"fullname\",\n    headerName: \"Name\",\n    headerClassName: \"entryHeader\",\n    sortable: false,\n    cellClassName: \"name\",\n    headerAlign: \"left\",\n    flex: 0.13,\n    minWidth: 100,\n    renderCell: (params) => (\n      <span style={{ display: \"flex\", alignItems: \"center\" }}>\n        <Avatar alt=\"Display avatar\" src={displayPhoto} style={{ marginRight: \"1rem\" }} />\n        {params.getValue(params.id, \"firstName\") || \"\"}\n\n        {params.getValue(params.id, \"lastName\") || \"\"}\n      </span>\n    ),\n  },\n  {\n    field: \"category\",\n    headerName: \"Category\",\n    headerAlign: \"left\",\n    cellClassName: \"category\",\n    // headerClassName: \"categoryHeader\",\n    type: \"number\",\n    minWidth: 100,\n    flex: 0.06,\n    sortable: false,\n  },\n\n  {\n    field: \"email\",\n    headerName: \"Email\",\n    headerClassName: \"entryHeader\",\n    headerAlign: \"center\",\n    cellClassName: \"email\",\n    flex: 0.15,\n    minWidth: 100,\n    renderCell: (params) => (\n      <Div>\n        <a> {params.getValue(params.id, \"email\") || \"\"}</a>\n      </Div>\n    ),\n  },\n];\n\nexport const columns2 = [\n  {\n    field: \"entryDate\",\n    headerName: \"Entry Date\",\n    headerClassName: \"entryHeader\",\n    headerAlign: \"center\",\n    flex: 0.1,\n    cellClassName: \"entryDate\",\n    type: \"number\",\n    minWidth: 110,\n    sortable: false,\n  },\n\n  {\n    field: \"fullname\",\n    headerName: \"Name\",\n    headerClassName: \"entryHeader\",\n    description: \"This column has a value getter and is not sortable.\",\n    sortable: false,\n    cellClassName: \"name\",\n    headerAlign: \"center\",\n    flex: 0.13,\n    minWidth: 150,\n    renderCell: (params) => (\n      <span style={{ display: \"flex\", alignItems: \"center\" }}>\n        <Avatar alt=\"Display avatar\" src={displayPhoto} style={{ marginRight: \"1rem\" }} />\n        {params.getValue(params.id, \"firstName\") || \"\"}\n\n        {params.getValue(params.id, \"lastName\") || \"\"}\n      </span>\n    ),\n  },\n  {\n    field: \"medical\",\n    headerName: \"Medical ID\",\n    headerAlign: \"center\",\n    cellClassName: \"medical\",\n    headerClassName: \"medical\",\n    type: \"number\",\n    minWidth: 120,\n    flex: 0.08,\n    sortable: false,\n  },\n\n  {\n    field: \" \",\n    headerName: \" \",\n    headerClassName: \"entryHeader\",\n    headerAlign: \"center\",\n    cellClassName: \"email\",\n    selectable: false,\n    flex: 0.15,\n    minWidth: 100,\n    renderCell: (params) => (\n      <Div2>\n        <a href=\"/view\">\n          View HCP &nbsp;&nbsp;\n          <svg\n            width=\"6\"\n            height=\"8\"\n            viewBox=\"0 0 6 8\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              d=\"M0.726562 7.06L3.7799 4L0.726562 0.94L1.66656 0L5.66656 4L1.66656 8L0.726562 7.06Z\"\n              fill=\"#757886\"\n            />\n          </svg>\n        </a>\n      </Div2>\n    ),\n  },\n];\nexport const Referralcolumns = [\n  {\n    field: \"entryDate\",\n    headerName: \"Entry Date\",\n    headerClassName: \"entryHeader\",\n    headerAlign: \"center\",\n    flex: 0.09,\n    cellClassName: \"entryDate\",\n    type: \"number\",\n    minWidth: 60,\n    maxWidth: 150,\n    sortable: false,\n  },\n  {\n    field: \"time\",\n    headerName: \"Time\",\n    headerClassName: \"referralTime\",\n    headerAlign: \"center\",\n    flex: 0.077,\n    cellClassName: \"referralTime\",\n    type: \"number\",\n    minWidth: 50,\n    sortable: false,\n  },\n\n  {\n    field: \"HCP Name\",\n    headerName: \"HCP Name\",\n    headerClassName: \"entryHeader\",\n    description: \"This column has a value getter and is not sortable.\",\n    sortable: false,\n    cellClassName: \"name\",\n    headerAlign: \"center\",\n    flex: 0.13,\n    minWidth: 160,\n    renderCell: (params) => (\n      <span style={{ display: \"flex\", alignItems: \"center\" }}>\n        <Avatar alt=\"Display avatar\" src={displayPhoto} style={{ marginRight: \"1rem\" }} />\n        {params.getValue(params.id, \"firstName\") || \"\"}\n\n        {params.getValue(params.id, \"lastName\") || \"\"}\n      </span>\n    ),\n  },\n  {\n    field: \"specialization\",\n    headerName: \"Specialization\",\n    headerAlign: \"left\",\n    cellClassName: \"CellSpecialization\",\n    headerClassName: \"specialization\",\n    type: \"number\",\n    minWidth: 50,\n    flex: 0.11,\n    sortable: false,\n  },\n  {\n    field: \"fullname\",\n    headerName: \"Patient's Name\",\n    headerClassName: \"headerPatientName\",\n    sortable: false,\n    cellClassName: \"PatientName\",\n    headerAlign: \"center\",\n    flex: 0.15,\n    minWidth: 200,\n    renderCell: (params) => (\n      <span style={{ display: \"flex\", alignItems: \"center\" }}>\n        <Avatar alt=\"Display avatar\" src={displayPhoto} style={{ marginRight: \"1rem\" }} />\n        {params.getValue(params.id, \"firstName\") || \"\"}\n        {params.getValue(params.id, \"lastName\") || \"\"}\n      </span>\n    ),\n  },\n\n  {\n    field: \"Status \",\n    headerName: \" Status\",\n    headerClassName: \"status\",\n    headerAlign: \"left\",\n    cellClassName: \"cellStatus\",\n    selectable: false,\n    flex: 0.06,\n    minWidth: 70,\n    renderCell: (params) => (\n      <ReferralDiv>\n        <Div2>\n          <a href=\"\">Active</a>\n        </Div2>\n      </ReferralDiv>\n    ),\n  },\n  {\n    field: \"referral\",\n    headerName: \" \",\n    headerClassName: \"entryHeader\",\n    headerAlign: \"left\",\n    cellClassName: \"refferalHeader\",\n    selectable: false,\n    flex: 0.1,\n    minWidth: 100,\n    renderCell: (params) => (\n      <Div2>\n        <small>View referral</small>\n      </Div2>\n    ),\n  },\n];\nexport const Subscriptioncolumns = [\n  {\n    field: \"planName\",\n    headerName: \"Name of plan\",\n    headerClassName: \"planName\",\n    headerAlign: \"headerPlanName\",\n    flex: 0.1,\n    cellClassName: \"cellPlanName\",\n    type: \"number\",\n    minWidth: 60,\n    sortable: false,\n    checkboxSelection: false,\n  },\n  {\n    field: \"amount\",\n    headerName: \"Amount\",\n    headerClassName: \"headerAmount\",\n    headerAlign: \"center\",\n    flex: 0.086,\n    cellClassName: \"cellAmount\",\n    type: \"number\",\n    minWidth: 50,\n    sortable: false,\n    selectable: false,\n  },\n\n  {\n    field: \"Description\",\n    headerName: \"Description\",\n    headerClassName: \"description\",\n    sortable: false,\n    cellClassName: \"cellDescription\",\n    headerAlign: \"center\",\n    flex: 0.15,\n    minWidth: 200,\n    renderCell: (params) => (\n      <span\n        style={{\n          fontSize: \"1.4rem\",\n          whiteSpace: \"normal\",\n          wordWrap: \"break-word\",\n          lineHeight: \"2.1rem\",\n        }}\n      >\n        {params.getValue(params.id, \"description\") || \"\"}\n      </span>\n    ),\n  },\n  {\n    field: \"editPlan\",\n    headerName: \" \",\n    headerClassName: \"headerEditPlan\",\n    headerAlign: \"left\",\n    cellClassName: \"cellEditPlan\",\n    selectable: false,\n    flex: 0.1,\n    minWidth: 100,\n    renderCell: (params) => (\n      <SubscriptionDiv>\n        <Div>\n          <a>\n            {\" \"}\n            Edit plan\n            <svg\n              style={{ marginLeft: \".7rem\" }}\n              width=\"15\"\n              height=\"15\"\n              viewBox=\"0 0 15 15\"\n              fill=\"none\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n            >\n              <path\n                d=\"M10.586 1.58599C10.7705 1.39497 10.9912 1.24261 11.2352 1.13779C11.4792 1.03297 11.7416 0.977801 12.0072 0.975494C12.2728 0.973186 12.5361 1.02379 12.7819 1.12435C13.0277 1.22491 13.251 1.37342 13.4388 1.5612C13.6266 1.74899 13.7751 1.97229 13.8756 2.21809C13.9762 2.46388 14.0268 2.72724 14.0245 2.9928C14.0222 3.25836 13.967 3.5208 13.8622 3.7648C13.7574 4.00881 13.605 4.2295 13.414 4.41399L12.621 5.20699L9.793 2.37899L10.586 1.58599ZM8.379 3.79299L0 12.172L0 15H2.828L11.208 6.62099L8.378 3.79299H8.379Z\"\n                fill=\"#3EA584\"\n              />\n            </svg>\n          </a>\n        </Div>\n      </SubscriptionDiv>\n    ),\n  },\n  {\n    field: \"\",\n    headerName: \"\",\n    headerClassName: \"headerdeletePlan\",\n    headerAlign: \"left\",\n    cellClassName: \"cellDeletePlan\",\n    selectable: false,\n    flex: 0.1,\n    minWidth: 100,\n    renderCell: (params) => (\n      <SubscriptionDelete>\n        <Div2 style={{ display: \"flex\", alignItems: \"center\" }}>\n          <a>Delete plan </a>\n          <svg\n            style={{ marginLeft: \".4rem\" }}\n            width=\"20\"\n            height=\"20\"\n            viewBox=\"0 0 20 20\"\n            fill=\"none\"\n            xmlns=\"http://www.w3.org/2000/svg\"\n          >\n            <path\n              fillRule=\"evenodd\"\n              clipRule=\"evenodd\"\n              d=\"M9 2C8.81434 2.0001 8.63237 2.05188 8.47447 2.14955C8.31658 2.24722 8.18899 2.38692 8.106 2.553L7.382 4H4C3.73478 4 3.48043 4.10536 3.29289 4.29289C3.10536 4.48043 3 4.73478 3 5C3 5.26522 3.10536 5.51957 3.29289 5.70711C3.48043 5.89464 3.73478 6 4 6L4 16C4 16.5304 4.21071 17.0391 4.58579 17.4142C4.96086 17.7893 5.46957 18 6 18H14C14.5304 18 15.0391 17.7893 15.4142 17.4142C15.7893 17.0391 16 16.5304 16 16V6C16.2652 6 16.5196 5.89464 16.7071 5.70711C16.8946 5.51957 17 5.26522 17 5C17 4.73478 16.8946 4.48043 16.7071 4.29289C16.5196 4.10536 16.2652 4 16 4H12.618L11.894 2.553C11.811 2.38692 11.6834 2.24722 11.5255 2.14955C11.3676 2.05188 11.1857 2.0001 11 2H9ZM7 8C7 7.73478 7.10536 7.48043 7.29289 7.29289C7.48043 7.10536 7.73478 7 8 7C8.26522 7 8.51957 7.10536 8.70711 7.29289C8.89464 7.48043 9 7.73478 9 8V14C9 14.2652 8.89464 14.5196 8.70711 14.7071C8.51957 14.8946 8.26522 15 8 15C7.73478 15 7.48043 14.8946 7.29289 14.7071C7.10536 14.5196 7 14.2652 7 14L7 8ZM12 7C11.7348 7 11.4804 7.10536 11.2929 7.29289C11.1054 7.48043 11 7.73478 11 8V14C11 14.2652 11.1054 14.5196 11.2929 14.7071C11.4804 14.8946 11.7348 15 12 15C12.2652 15 12.5196 14.8946 12.7071 14.7071C12.8946 14.5196 13 14.2652 13 14V8C13 7.73478 12.8946 7.48043 12.7071 7.29289C12.5196 7.10536 12.2652 7 12 7Z\"\n              fill=\"#ED3237\"\n            />\n          </svg>\n        </Div2>\n      </SubscriptionDelete>\n    ),\n  },\n];\nexport const FinanceColumns = [\n  {\n    field: \"entryDate\",\n    headerName: \"Entry Date\",\n    headerClassName: \"financeEntryHeader\",\n    headerAlign: \"center\",\n    flex: 0.1,\n    cellClassName: \"entryDate\",\n    type: \"number\",\n    minWidth: 60,\n    sortable: false,\n  },\n  {\n    field: \"time\",\n    headerName: \"Time\",\n    headerClassName: \"referralTime\",\n    headerAlign: \"center\",\n    flex: 0.1,\n    cellClassName: \"referralTime\",\n    type: \"number\",\n    minWidth: 50,\n    sortable: false,\n  },\n  {\n    field: \"fullname\",\n    headerName: \"Patient's Name\",\n    headerClassName: \"headerPatientName\",\n    sortable: false,\n    cellClassName: \"PatientName\",\n    headerAlign: \"left\",\n    flex: 0.15,\n    type: \"string\",\n    minWidth: 150,\n    renderCell: (params) => (\n      <span style={{ display: \"flex\", alignItems: \"center\" }}>\n        <Avatar alt=\"Display avatar\" src={displayPhoto} style={{ marginRight: \"1rem\" }} />\n        {params.getValue(params.id, \"firstName\") || \"\"}\n        {params.getValue(params.id, \"lastName\") || \"\"}\n      </span>\n    ),\n  },\n  {\n    field: \"planName\",\n    headerName: \"Subscription plan\",\n    headerClassName: \"planName\",\n    headerAlign: \"headerPlanName\",\n    flex: 0.1,\n    cellClassName: \"cellPlanName\",\n    type: \"number\",\n    minWidth: 60,\n    sortable: false,\n    checkboxSelection: false,\n  },\n  {\n    field: \"amount\",\n    headerName: \"Amount\",\n    headerClassName: \"headerAmount\",\n    headerAlign: \"center\",\n    flex: 0.086,\n    cellClassName: \"cellAmount\",\n    type: \"string\",\n    minWidth: 50,\n    sortable: false,\n    selectable: false,\n  },\n];\n\nexport const rows = [\n  {\n    id: 1,\n    lastName: \"Snow\",\n    name: \"Heala\",\n    entryDate: \"July 17, 2021\",\n    firstName: \"Jon\",\n    category: \"HCP\",\n    email: \"sule@gmail.com\",\n    time: \"10:00AM\",\n    medical: 123445,\n    amount: \"₦ 10,000\",\n    bank: \"Kuda MFB\",\n    subject: \"Appreciation message to Heala  team\",\n    status: \"active\",\n    specialization: \"Dentistry\",\n    availableTime: \"10:00AM - 3:30PM\",\n    planName: \"Plan 1\",\n    roleName: \"role 1\",\n    description: \"This is the decription regarding this particular plan\",\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\n    data: [\"create\", \"read\", \"update\", \"delete\"],\n    type: \"Nurse\",\n    account: 2018785545,\n  },\n  {\n    id: 2,\n    lastName: \"Lannister\",\n    roleName: \"role 1\",\n    entryDate: \"July 17, 2021\",\n    firstName: \"Cersei\",\n    category: \"User\",\n    planName: \"Plan 1\",\n    amount: \"₦ 10,000\",\n    name: \"Heala\",\n    medical: 123445,\n    bank: \"Kuda MFB\",\n    status: \"active\",\n    subject: \"Appreciation message to Heala  team\",\n    email: \"sule@gmail.com\",\n    description: \"This is the decription regarding this particular plan\",\n    availableTime: \"10:00AM - 3:30PM\",\n    time: \"10:00AM\",\n    specialization: \"Dentistry\",\n    permission: [\n      \"permission 1\",\n      \"permission 2\",\n      \"permission3\",\n      \"permission4\",\n      \"permission5\",\n      \"permission6\",\n    ],\n    data: [\"create\", \"read\", \"update\", \"delete\"],\n    type: \"Nurse\",\n    account: 2018785545,\n  },\n  {\n    id: 3,\n    lastName: \"Lannister\",\n    account: 2018785545,\n    roleName: \"role 1\",\n    bank: \"Kuda MFB\",\n    entryDate: \"July 17, 2021\",\n    name: \"Heala\",\n    firstName: \"Jaime\",\n    planName: \"Plan 1\",\n    category: \"HCP\",\n    amount: \"₦ 10,000\",\n    status: \"inactive\",\n    medical: 123445,\n    email: \"sule@gmail.com\",\n    availableTime: \"10:00AM - 3:30PM\",\n    time: \"10:00AM\",\n    subject: \"Appreciation message to Heala  team\",\n    specialization: \"Dentistry\",\n    description: \"This is the decription regarding this particular plan\",\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\n    data: [\"create\", \"read\", \"update\", \"delete\"],\n    type: \"Nurse\",\n  },\n  {\n    id: 4,\n    lastName: \"Stark\",\n    entryDate: \"July 17, 2021\",\n    roleName: \"role 1\",\n    firstName: \"Arya\",\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\n    category: \"HCP\",\n    amount: \"₦ 10,000\",\n    email: \"sule@gmail.com\",\n    time: \"10:00AM\",\n    planName: \"Plan 1\",\n    bank: \"Kuda MFB\",\n    availableTime: \"10:00AM - 3:30PM\",\n    medical: 123445,\n    type: \"Doctor\",\n    subject: \"Appreciation message to Heala  team\",\n    status: \"active\",\n    specialization: \"Dentistry\",\n    description: \"This is the decription regarding this particular plan\",\n    data: [\"create\", \"read\", \"update\", \"delete\"],\n    account: 2018785545,\n  },\n  {\n    id: 5,\n    lastName: \"Targaryen\",\n    entryDate: \"July 17, 2021\",\n    firstName: \"Daenerys\",\n    category: \"HSP\",\n    medical: 123445,\n    status: \"active\",\n    bank: \"Kuda MFB\",\n    amount: \"₦ 10,000\",\n    roleName: \"role 1\",\n    account: 2018785545,\n    planName: \"Plan 1\",\n    email: \"sule@gmail.com\",\n    subject: \"Appreciation message to Heala  team\",\n    time: \"10:00AM\",\n    specialization: \"Dentistry\",\n    availableTime: \"10:00AM - 3:30PM\",\n    description: \"This is the decription regarding this particular plan\",\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\n    data: [\"create\", \"read\", \"update\", \"delete\"],\n    type: \"Doctor\",\n  },\n  {\n    id: 6,\n    lastName: \"Melisandre\",\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\n    entryDate: \"July 17, 2021\",\n    roleName: \"role 1\",\n    data: [\"create\", \"read\", \"update\", \"delete\"],\n    firstName: null,\n    status: \"active\",\n    medical: 123445,\n    account: 2018785545,\n    bank: \"Kuda MFB\",\n    subject: \"Appreciation message to Heala  team\",\n    category: \"User\",\n    amount: \"₦ 10,000\",\n    email: \"sule@gmail.com\",\n    time: \"10:00AM\",\n    planName: \"Plan 1\",\n    specialization: \"Dentistry\",\n    description: \"This is the decription regarding this particular plan\",\n    type: \"Nurse\",\n  },\n  {\n    id: 7,\n    lastName: \"Clifford\",\n    entryDate: \"July 17, 2021\",\n    medical: 123445,\n    firstName: \"Ferrara\",\n    roleName: \"role 1\",\n    subject: \"Appreciation message to Heala  team\",\n    category: \"HCP\",\n    status: \"active\",\n    planName: \"Plan 1\",\n    amount: \"₦ 10,000\",\n    bank: \"Kuda MFB\",\n    email: \"sule@gmail.com\",\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\n    data: [\"create\", \"read\", \"update\", \"delete\"],\n    time: \"10:00AM\",\n    specialization: \"Dentistry\",\n    availableTime: \"10:00AM - 3:30PM\",\n    description: \"This is the decription regarding this particular plan\",\n    type: \"Nurse\",\n    account: 2018785545,\n  },\n  {\n    id: 9,\n    lastName: \"Roxie\",\n    entryDate: \"July 17, 2021\",\n    roleName: \"role 1\",\n    firstName: \"Harvey\",\n    category: \"HCP\",\n    data: [\"create\", \"read\", \"update\", \"delete\"],\n    medical: 123445,\n    subject: \"Appreciation message to Heala  team\",\n    status: \"active\",\n    planName: \"Plan 1\",\n    bank: \"Kuda MFB\",\n    amount: \"₦ 10,000\",\n    email: \"sule@gmail.com\",\n    time: \"10:00AM\",\n    specialization: \"Dentistry\",\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\n    availableTime: \"10:00AM - 3:30PM\",\n    description: \"This is the decription regarding this particular plan\",\n    type: \"Nurse\",\n    account: 2018785545,\n  },\n];\nconst ReferralDiv = Styled.div`\n& div{\n  width: 6.2rem !important;\n  padding:0;\n  margin-right:0 !important;\n  padding-left: 1rem !important;\n  background:#ECF6F3;\n  a{\n  width: 4.2rem!important;\n  font-size:1.4rem;\n  color:#49AA8B;\n  line-Height:2.1rem;\n  height:2.2rem;\n  }\n}`;\n\nconst SubscriptionDiv = Styled.div`\n& div{\n  width: 10.1rem !important;\n  padding: .8rem 1rem !important;\n  margin-right:0 !important;\n  padding-left: 1rem !important;\n  border-radius: 2rem !important;\n  background: #ECF6F3;\n  height:3.8rem;\n  \n  a{\n    font-weight:500;\n  font-size:1.4rem;\n  color: #3EA584;\n  line-Height:2.1rem;\n  // height:2.2rem;\n  }\n}\n`;\nconst SubscriptionDelete = Styled.div`\n& div{\n  width: 11.8rem !important;\n  padding: .8rem 1rem !important;\n  border-color:#FEF8F7;\n  border-radius: 2rem !important;\n  background: #FEF8F7;\n  height:3.8rem;\n\n\n  \n  a{\n  font-weight:500;\n  font-size:1.4rem;\n  color: #ED3237;\n  height:2.2rem;\n  font-family: Circular Std;\n  font-style: normal;\n  letter-spacing: 0px;\n  text-align: center;\n  width:10.1rem;\n  margin-right:0\n  }\n}\n`;\n\nconst Div2 = Styled.div`\nwidth: 11rem;\nheight: 3rem;\nmargin: auto 0;\nborder-radius: 2rem;\nborder: 1px solid #F2F2F2;\ndisplay: grid;\nplace-content: center;\ncolor:#757886;\n   & a{\n    text-decoration:none;\n    font-size: 1.4rem;\n    width:6.6rem;\n    height:2.2rem\n    margin:0;\n    line-Height:2.1rem;\n    color:inherit;\n    margin-right:1.25rem\n   } \n   &:hover{\n     cursor:pointer\n   }\n`;\nconst Div = Styled.div`\nwidth: 17.9rem;\nheight: 3rem;\nmargin: auto 0;\nborder-radius: 2rem;\nborder: 1px solid #F2F2F2;\ndisplay: grid;\nplace-content: center;\n   & a{\n    padding: .4rem 1rem;\n    \n   } \n   &:hover{\n     cursor:pointer\n   }\n`;\n","/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/Filters/PatientFilters.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Copy.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/IllnessModal.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/ReferPatient.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/styles/doctorsPageStyles.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/ProviderModal.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/PermissionModal.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/Filter.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/RoleModal.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/styles/docVerificationPageStyles.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/pages/Hmo.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/routes/PrivateRoute.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/store.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/LabelIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/HMOIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/MessagesIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/PartnersIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/EmailIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/hooks/useCopy.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Utilities/bMI.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/Filters/DoctorsFilters.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/PatientsIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/DoctorsIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Icons/DashboardIcon.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/validation/LoginInput.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/styles/loginPageStyles.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/modals/AddEditHMOModal.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/reducers/index.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/reducers/hcpReducer.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/reducers/tablesReducer.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/reducers/patientReducer.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/store/reducers/authReducer.js",[],"/Users/codabae/Documents/ci work/heala/DProject/src/components/Forms/AddEditHMOForm.js",[],{"ruleId":"957","severity":1,"message":"958","line":23,"column":9,"nodeType":"959","messageId":"960","endLine":23,"endColumn":16},{"ruleId":"961","severity":1,"message":"962","line":14,"column":26,"nodeType":"963","messageId":"964","endLine":14,"endColumn":28},{"ruleId":"965","severity":1,"message":"966","line":54,"column":27,"nodeType":"967","messageId":"968","endLine":54,"endColumn":29},{"ruleId":"957","severity":1,"message":"969","line":7,"column":28,"nodeType":"959","messageId":"960","endLine":7,"endColumn":38},{"ruleId":"957","severity":1,"message":"970","line":10,"column":28,"nodeType":"959","messageId":"960","endLine":10,"endColumn":43},{"ruleId":"957","severity":1,"message":"971","line":23,"column":11,"nodeType":"959","messageId":"960","endLine":23,"endColumn":22},{"ruleId":"957","severity":1,"message":"972","line":116,"column":29,"nodeType":"959","messageId":"960","endLine":116,"endColumn":49},{"ruleId":"957","severity":1,"message":"973","line":128,"column":22,"nodeType":"959","messageId":"960","endLine":128,"endColumn":35},{"ruleId":"957","severity":1,"message":"974","line":136,"column":10,"nodeType":"959","messageId":"960","endLine":136,"endColumn":27},{"ruleId":"957","severity":1,"message":"975","line":136,"column":29,"nodeType":"959","messageId":"960","endLine":136,"endColumn":49},{"ruleId":"957","severity":1,"message":"976","line":164,"column":29,"nodeType":"959","messageId":"960","endLine":164,"endColumn":49},{"ruleId":"965","severity":1,"message":"966","line":361,"column":30,"nodeType":"967","messageId":"968","endLine":361,"endColumn":32},{"ruleId":"957","severity":1,"message":"977","line":502,"column":23,"nodeType":"959","messageId":"960","endLine":502,"endColumn":28},{"ruleId":"957","severity":1,"message":"978","line":262,"column":10,"nodeType":"959","messageId":"960","endLine":262,"endColumn":20},{"ruleId":"979","severity":1,"message":"980","line":50,"column":13,"nodeType":"981","endLine":56,"endColumn":14},{"ruleId":"957","severity":1,"message":"982","line":27,"column":8,"nodeType":"959","messageId":"960","endLine":27,"endColumn":20},{"ruleId":"965","severity":1,"message":"983","line":315,"column":51,"nodeType":"967","messageId":"984","endLine":315,"endColumn":53},{"ruleId":"957","severity":1,"message":"985","line":316,"column":32,"nodeType":"959","messageId":"960","endLine":316,"endColumn":39},{"ruleId":"957","severity":1,"message":"986","line":34,"column":3,"nodeType":"959","messageId":"960","endLine":34,"endColumn":16},{"ruleId":"961","severity":1,"message":"962","line":151,"column":57,"nodeType":"963","messageId":"964","endLine":151,"endColumn":59},{"ruleId":"957","severity":1,"message":"987","line":13,"column":3,"nodeType":"959","messageId":"960","endLine":13,"endColumn":13},{"ruleId":"957","severity":1,"message":"986","line":40,"column":3,"nodeType":"959","messageId":"960","endLine":40,"endColumn":16},{"ruleId":"965","severity":1,"message":"983","line":299,"column":24,"nodeType":"967","messageId":"984","endLine":299,"endColumn":26},{"ruleId":"961","severity":1,"message":"962","line":60,"column":14,"nodeType":"963","messageId":"964","endLine":60,"endColumn":16},{"ruleId":"957","severity":1,"message":"987","line":7,"column":3,"nodeType":"959","messageId":"960","endLine":7,"endColumn":13},{"ruleId":"957","severity":1,"message":"987","line":4,"column":3,"nodeType":"959","messageId":"960","endLine":4,"endColumn":13},{"ruleId":"957","severity":1,"message":"987","line":5,"column":3,"nodeType":"959","messageId":"960","endLine":5,"endColumn":13},{"ruleId":"957","severity":1,"message":"987","line":2,"column":16,"nodeType":"959","messageId":"960","endLine":2,"endColumn":26},{"ruleId":"957","severity":1,"message":"987","line":6,"column":3,"nodeType":"959","messageId":"960","endLine":6,"endColumn":13},{"ruleId":"957","severity":1,"message":"988","line":11,"column":10,"nodeType":"959","messageId":"960","endLine":11,"endColumn":18},{"ruleId":"957","severity":1,"message":"989","line":45,"column":9,"nodeType":"959","messageId":"960","endLine":45,"endColumn":17},{"ruleId":"990","severity":1,"message":"991","line":59,"column":9,"nodeType":"981","endLine":59,"endColumn":12},{"ruleId":"990","severity":1,"message":"992","line":224,"column":11,"nodeType":"981","endLine":224,"endColumn":22},{"ruleId":"990","severity":1,"message":"991","line":305,"column":11,"nodeType":"981","endLine":305,"endColumn":14},{"ruleId":"990","severity":1,"message":"991","line":338,"column":11,"nodeType":"981","endLine":338,"endColumn":14},"no-unused-vars","'classes' is assigned a value but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'DoctorIcon' is defined but never used.","'ConsulationIcon' is defined but never used.","'drawerWidth' is assigned a value but never used.","'setConsultationState' is assigned a value but never used.","'setGraphState' is assigned a value but never used.","'subScriptionState' is assigned a value but never used.","'setSubScriptionState' is assigned a value but never used.","'setPartnerGraphState' is assigned a value but never used.","'color' is assigned a value but never used.","'profileAcc' is assigned a value but never used.","jsx-a11y/anchor-has-content","Anchors must have content and the content must be accessible by a screen reader.","JSXOpeningElement","'displayPhoto' is defined but never used.","Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'picture' is assigned a value but never used.","'fetchMoreData' is defined but never used.","'Typography' is defined but never used.","'dropDown' is assigned a value but never used.","'onChange' is assigned a value but never used.","jsx-a11y/anchor-is-valid","The href attribute is required for an anchor to be keyboard accessible. Provide a valid, navigable address as the href value. If you cannot provide an href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/jsx-eslint/eslint-plugin-jsx-a11y/blob/HEAD/docs/rules/anchor-is-valid.md"]