[{"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\index.js":"1","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\App.js":"2","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\accessToken.js":"3","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\index.js":"4","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\graphQL\\Mutation.js":"5","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\routes\\Routes.js":"6","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\muiTheme.js":"7","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\hooks\\useActions.js":"8","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\index.js":"9","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\index.js":"10","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\index.js":"11","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\store.js":"12","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\CircularProgress.js":"13","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HmoPlans.js":"14","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaPlans.js":"15","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Hospitals.js":"16","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SubscriptionPlans.js":"17","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-creators\\index.js":"18","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\reducers\\index.js":"19","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\CreateEditHMOPlans.js":"20","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\CreateEditPlans.js":"21","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Tables\\HospitalsTable.js":"22","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\graphQL\\useQuery.js":"23","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\cards\\InfoCard.js":"24","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Tables\\PlansTable.js":"25","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\MainModal.js":"26","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\reducers\\hcpReducer.js":"27","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\reducers\\patientReducer.js":"28","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\reducers\\authReducer.js":"29","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\reducers\\tablesReducer.js":"30","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-creators\\hcp.js":"31","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-creators\\patient.js":"32","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-creators\\auth.js":"33","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-creators\\tablesActions.js":"34","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\graphQL\\fragment.js":"35","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\mockData.js":"36","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\func.js":"37","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\tableHeaders.js":"38","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\TableLayout.js":"39","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\CompoundSearch.js":"40","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\validationSchemas.js":"41","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\EnhancedTable.js":"42","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\hmoPageStyles.js":"43","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\HospitalRow.js":"44","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\PlanListRow.js":"45","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\isSelected.js":"46","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\filterHelperFunctions.js":"47","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\selectedRows.js":"48","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\hooks\\useAlert.js":"49","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\index.js":"50","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\EnhancedTableToolbar.js":"51","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\index.js":"52","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\EnhancedTableHeader.js":"53","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-types\\index.js":"54","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\IllnessModal.js":"55","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\Filters\\index.js":"56","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\ProfileInfo.js":"57","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\hospitalPageStyles.js":"58","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Time.js":"59","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Buttons\\EditDelBtn.js":"60","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Calendar.js":"61","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\FormikControl.js":"62","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Select.js":"63","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Input.js":"64","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Checkboxs.js":"65","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Tables\\HMOPlansTable.js":"66","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\DateTimePicker.js":"67","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\File.js":"68","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Textarea.js":"69","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Date.js":"70","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\TextError.js":"71","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Buttons\\CloseBtn.js":"72","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\ChervonDownIcon.js":"73","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\HMOPlanRow.js":"74","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Typography.js":"75","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\EditIcon.js":"76","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\deleteIcon.js":"77","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\Filter.js":"78","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\ProviderModal.js":"79","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\ReferPatient.js":"80","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\RoleModal.js":"81","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\PermissionModal.js":"82","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\DeleteOrDisable.js":"83","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\CustomButton.js":"84","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Search.js":"85","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\PreviousButton.js":"86","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Backdrop.js":"87","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\SearchInput.js":"88","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\LineChart.js":"89","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\FilterList.js":"90","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\FormInput.js":"91","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Modal.js":"92","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Loader.js":"93","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Button.js":"94","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\CircularChart.js":"95","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Card.js":"96","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\LinearProgress.js":"97","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\FormSelect.js":"98","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\DisplayProfile.js":"99","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\ProfileCard.js":"100","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\CardItem.js":"101","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\EmptyTable.js":"102","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\SideMenu.js":"103","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\DataGrid.js":"104","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\CheckBox.js":"105","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\AvailabilityCard.js":"106","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\Header.js":"107","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\DashboardChart.js":"108","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\WaitingListTable.js":"109","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\Notifications.js":"110","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\HeaderProfile.js":"111","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\HeaderContents.js":"112","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\EnhancedTableAction.js":"113","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\AvailabilityTable.js":"114","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Subscription.js":"115","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\UserTypes.js":"116","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\WaitingList.js":"117","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\WhiteLabel.js":"118","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\NoData.js":"119","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ViewHCP.js":"120","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\WaitingListDetails.js":"121","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ViewReferral.js":"122","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\VideoCall.js":"123","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Illness.js":"124","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\DoctorEarning.js":"125","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\DoctorPayout.js":"126","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SinglePatient.js":"127","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SingleHCP.js":"128","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Settings.js":"129","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ReferralTab.js":"130","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Providers.js":"131","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Permission.js":"132","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\PatientAppointment.js":"133","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Messages.js":"134","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Management.js":"135","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Hcps.js":"136","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpPatients.js":"137","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpConsultations.js":"138","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Prescriptions.js":"139","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ViewMessage.js":"140","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpCaseNote.js":"141","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpAppointments.js":"142","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpAvailability.js":"143","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\PendingPayout.js":"144","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Financetable.js":"145","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Email.js":"146","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Finance.js":"147","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Patients.js":"148","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\PatientProfile.js":"149","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Partners.js":"150","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Chat.js":"151","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Medications.js":"152","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\MedicalRecords.js":"153","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Login.js":"154","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpProfile.js":"155","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpEarnings.js":"156","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ViewDoctorVerification.js":"157","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Payout.js":"158","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HCPChat.js":"159","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Dashboard.js":"160","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HCP.js":"161","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\DoctorVerificationProfile.js":"162","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\EditManagement.js":"163","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Consultations.js":"164","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\CaseNotes.js":"165","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\CreateMessage.js":"166","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Administrator.js":"167","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Appointments.js":"168","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\SearchIcon.js":"169","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\LogoutIcon.js":"170","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\tableData.js":"171","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\BellIcon.js":"172","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\asideMenus.js":"173","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Copy.js":"174","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\docVerificationPageStyles.js":"175","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\doctorsPageStyles.js":"176","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\bMI.js":"177","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\hooks\\useCopy.js":"178","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\loginPageStyles.js":"179","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\partnersPageStyles.js":"180","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\patientsPageStyles.js":"181","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\LoginInput.js":"182","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\Filters\\PatientFilters.js":"183","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\DataHeader.js":"184","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\LabelIcon.js":"185","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\EmailIcon.js":"186","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\HMOIcon.js":"187","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\PartnersIcon.js":"188","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\PatientsIcon.js":"189","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\DoctorsIcon.js":"190","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\DashboardIcon.js":"191","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\VerifiedIcon.js":"192","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\MessagesIcon.js":"193","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\Filters\\DoctorsFilters.js":"194","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\UserTypeModal.js":"195","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\Success.js":"196","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\breadcrumb.js":"197","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SubscriptionIncome.js":"198","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\TestList.js":"199","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\routes\\PrivateRoute.js":"200","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SingleHMO.js":"201","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ListManagment.js":"202","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Hmo.js":"203","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\UploadListModal.js":"204","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\EditTestForm.js":"205","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\UploadEnrolleeListForm.js":"206","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\ConfirmModal.js":"207","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\AddTestForm.js":"208","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\cards\\SettingsCard.js":"209","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\AddEditHMOModal.js":"210","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\AddEditHMOEnrolleeModal.js":"211","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Tables\\SingleHMOTable.js":"212","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\TestListRow.js":"213","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\DragAndDrop.js":"214","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\UploadListForm.js":"215","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\AddEditHMOForm.js":"216","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\SingleHMORow.js":"217","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\EnrolleeProfileModal.js":"218","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\AddEditHMOEnrolleeForm.js":"219","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\Filters\\SingleHMOFilters.js":"220","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\StatusPill.js":"221","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\SmsIcon.js":"222","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\CallIcon.js":"223","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\MessageAddIcon.js":"224","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\Calender2.js":"225","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Heala.js":"226","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Hm.js":"227","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Hospital.js":"228","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\PatientProvider.js":"229","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\DoctorProvider.js":"230","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\PartnersProvider.js":"231","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\FinanceIcon.js":"232","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\PatientsRow.js":"233","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\SettingsIcon.js":"234","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\RefferalsIcon.js":"235","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\SubscriptionIcon.js":"236","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Healas.js":"237","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaPage.js":"238","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HospitalPage.js":"239","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HMOEnrolle.js":"240","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaFilterPage.js":"241","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaFilterDoctorPage.js":"242","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealerPartner.js":"243","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HospitalUsers.js":"244","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HMODoctorPage.js":"245","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaFilterPartnerPage.js":"246","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HMOUsers.js":"247","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HMOPartners.js":"248","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\AddProviderModal.js":"249","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\AddPartner.js":"250","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaDoctor.js":"251"},{"size":2464,"mtime":1661939671111,"results":"252","hashOfConfig":"253"},{"size":5063,"mtime":1661953976834,"results":"254","hashOfConfig":"253"},{"size":165,"mtime":1661626921825,"results":"255","hashOfConfig":"253"},{"size":38,"mtime":1661626922169,"results":"256","hashOfConfig":"253"},{"size":19812,"mtime":1662650354517,"results":"257","hashOfConfig":"253"},{"size":11290,"mtime":1662703104859,"results":"258","hashOfConfig":"253"},{"size":4057,"mtime":1662198259960,"results":"259","hashOfConfig":"253"},{"size":580,"mtime":1661939670997,"results":"260","hashOfConfig":"253"},{"size":4128,"mtime":1662701657714,"results":"261","hashOfConfig":"253"},{"size":845,"mtime":1661768516851,"results":"262","hashOfConfig":"253"},{"size":1160,"mtime":1661839137159,"results":"263","hashOfConfig":"253"},{"size":308,"mtime":1661939671113,"results":"264","hashOfConfig":"253"},{"size":1598,"mtime":1661839193809,"results":"265","hashOfConfig":"253"},{"size":2532,"mtime":1661626922098,"results":"266","hashOfConfig":"253"},{"size":2549,"mtime":1661626922097,"results":"267","hashOfConfig":"253"},{"size":447,"mtime":1661626922099,"results":"268","hashOfConfig":"253"},{"size":1878,"mtime":1661626922125,"results":"269","hashOfConfig":"253"},{"size":260,"mtime":1661626922165,"results":"270","hashOfConfig":"253"},{"size":385,"mtime":1661626922172,"results":"271","hashOfConfig":"253"},{"size":4608,"mtime":1661626921941,"results":"272","hashOfConfig":"253"},{"size":4539,"mtime":1661626921942,"results":"273","hashOfConfig":"253"},{"size":3727,"mtime":1662929807449,"results":"274","hashOfConfig":"253"},{"size":33929,"mtime":1663061431861,"results":"275","hashOfConfig":"253"},{"size":5475,"mtime":1661626922019,"results":"276","hashOfConfig":"253"},{"size":7941,"mtime":1661939670967,"results":"277","hashOfConfig":"253"},{"size":2592,"mtime":1661626922056,"results":"278","hashOfConfig":"253"},{"size":394,"mtime":1661626922171,"results":"279","hashOfConfig":"253"},{"size":419,"mtime":1662294396536,"results":"280","hashOfConfig":"253"},{"size":2201,"mtime":1661626922170,"results":"281","hashOfConfig":"253"},{"size":806,"mtime":1661626922174,"results":"282","hashOfConfig":"253"},{"size":211,"mtime":1661626922164,"results":"283","hashOfConfig":"253"},{"size":204,"mtime":1662292846529,"results":"284","hashOfConfig":"253"},{"size":897,"mtime":1661626922164,"results":"285","hashOfConfig":"253"},{"size":557,"mtime":1661626922167,"results":"286","hashOfConfig":"253"},{"size":263,"mtime":1661626922024,"results":"287","hashOfConfig":"253"},{"size":7768,"mtime":1662626115166,"results":"288","hashOfConfig":"253"},{"size":3008,"mtime":1662626687976,"results":"289","hashOfConfig":"253"},{"size":9110,"mtime":1662929830609,"results":"290","hashOfConfig":"253"},{"size":972,"mtime":1661626922047,"results":"291","hashOfConfig":"253"},{"size":3086,"mtime":1662626786917,"results":"292","hashOfConfig":"253"},{"size":7053,"mtime":1662649434158,"results":"293","hashOfConfig":"253"},{"size":5335,"mtime":1661939671007,"results":"294","hashOfConfig":"253"},{"size":820,"mtime":1662198260097,"results":"295","hashOfConfig":"253"},{"size":1995,"mtime":1662929548572,"results":"296","hashOfConfig":"253"},{"size":5589,"mtime":1661626921975,"results":"297","hashOfConfig":"253"},{"size":82,"mtime":1661626922156,"results":"298","hashOfConfig":"253"},{"size":11098,"mtime":1662068489725,"results":"299","hashOfConfig":"253"},{"size":682,"mtime":1661939671106,"results":"300","hashOfConfig":"253"},{"size":2613,"mtime":1661939671109,"results":"301","hashOfConfig":"253"},{"size":409,"mtime":1661626922065,"results":"302","hashOfConfig":"253"},{"size":1821,"mtime":1661939671011,"results":"303","hashOfConfig":"253"},{"size":260,"mtime":1661626922150,"results":"304","hashOfConfig":"253"},{"size":2481,"mtime":1661626922038,"results":"305","hashOfConfig":"253"},{"size":737,"mtime":1662291233055,"results":"306","hashOfConfig":"253"},{"size":3809,"mtime":1661626922055,"results":"307","hashOfConfig":"253"},{"size":1207,"mtime":1661626921951,"results":"308","hashOfConfig":"253"},{"size":847,"mtime":1661626922007,"results":"309","hashOfConfig":"253"},{"size":811,"mtime":1661626922180,"results":"310","hashOfConfig":"253"},{"size":4470,"mtime":1662489892303,"results":"311","hashOfConfig":"253"},{"size":2486,"mtime":1661626921935,"results":"312","hashOfConfig":"253"},{"size":1155,"mtime":1661626922140,"results":"313","hashOfConfig":"253"},{"size":935,"mtime":1661626922146,"results":"314","hashOfConfig":"253"},{"size":6461,"mtime":1662489856871,"results":"315","hashOfConfig":"253"},{"size":1068,"mtime":1661626922147,"results":"316","hashOfConfig":"253"},{"size":839,"mtime":1661626922141,"results":"317","hashOfConfig":"253"},{"size":7885,"mtime":1661939670965,"results":"318","hashOfConfig":"253"},{"size":1993,"mtime":1661626922143,"results":"319","hashOfConfig":"253"},{"size":4885,"mtime":1661626922145,"results":"320","hashOfConfig":"253"},{"size":2506,"mtime":1662067242204,"results":"321","hashOfConfig":"253"},{"size":2364,"mtime":1661626922142,"results":"322","hashOfConfig":"253"},{"size":447,"mtime":1661626922011,"results":"323","hashOfConfig":"253"},{"size":1287,"mtime":1661939670930,"results":"324","hashOfConfig":"253"},{"size":505,"mtime":1661939670954,"results":"325","hashOfConfig":"253"},{"size":5136,"mtime":1661626921974,"results":"326","hashOfConfig":"253"},{"size":240,"mtime":1661626921984,"results":"327","hashOfConfig":"253"},{"size":1606,"mtime":1661626921960,"results":"328","hashOfConfig":"253"},{"size":2134,"mtime":1661626921972,"results":"329","hashOfConfig":"253"},{"size":4128,"mtime":1661626922054,"results":"330","hashOfConfig":"253"},{"size":5994,"mtime":1661939671027,"results":"331","hashOfConfig":"253"},{"size":4305,"mtime":1661939671029,"results":"332","hashOfConfig":"253"},{"size":3320,"mtime":1661939671031,"results":"333","hashOfConfig":"253"},{"size":4776,"mtime":1661939671025,"results":"334","hashOfConfig":"253"},{"size":4618,"mtime":1661939671023,"results":"335","hashOfConfig":"253"},{"size":3813,"mtime":1661626921993,"results":"336","hashOfConfig":"253"},{"size":2971,"mtime":1661626922008,"results":"337","hashOfConfig":"253"},{"size":760,"mtime":1661626922004,"results":"338","hashOfConfig":"253"},{"size":553,"mtime":1661626921986,"results":"339","hashOfConfig":"253"},{"size":1979,"mtime":1661626922009,"results":"340","hashOfConfig":"253"},{"size":7679,"mtime":1662216032548,"results":"341","hashOfConfig":"253"},{"size":1484,"mtime":1661626921997,"results":"342","hashOfConfig":"253"},{"size":970,"mtime":1661626921998,"results":"343","hashOfConfig":"253"},{"size":2461,"mtime":1662327334601,"results":"344","hashOfConfig":"253"},{"size":506,"mtime":1661939670983,"results":"345","hashOfConfig":"253"},{"size":1343,"mtime":1661626921987,"results":"346","hashOfConfig":"253"},{"size":3423,"mtime":1661839132049,"results":"347","hashOfConfig":"253"},{"size":1188,"mtime":1662198259942,"results":"348","hashOfConfig":"253"},{"size":1099,"mtime":1661939670981,"results":"349","hashOfConfig":"253"},{"size":1321,"mtime":1661939670979,"results":"350","hashOfConfig":"253"},{"size":4207,"mtime":1661939670977,"results":"351","hashOfConfig":"253"},{"size":2062,"mtime":1661939670987,"results":"352","hashOfConfig":"253"},{"size":4091,"mtime":1661969190836,"results":"353","hashOfConfig":"253"},{"size":1982,"mtime":1661626922035,"results":"354","hashOfConfig":"253"},{"size":5933,"mtime":1662977473168,"results":"355","hashOfConfig":"253"},{"size":4017,"mtime":1661939670974,"results":"356","hashOfConfig":"253"},{"size":2411,"mtime":1661939670972,"results":"357","hashOfConfig":"253"},{"size":2530,"mtime":1661939670970,"results":"358","hashOfConfig":"253"},{"size":1734,"mtime":1661626922041,"results":"359","hashOfConfig":"253"},{"size":17858,"mtime":1662929127864,"results":"360","hashOfConfig":"253"},{"size":5232,"mtime":1661939671020,"results":"361","hashOfConfig":"253"},{"size":3091,"mtime":1661939671018,"results":"362","hashOfConfig":"253"},{"size":4972,"mtime":1662929122881,"results":"363","hashOfConfig":"253"},{"size":12022,"mtime":1662198259954,"results":"364","hashOfConfig":"253"},{"size":2398,"mtime":1661939671009,"results":"365","hashOfConfig":"253"},{"size":14683,"mtime":1663060370949,"results":"366","hashOfConfig":"253"},{"size":2564,"mtime":1661626922123,"results":"367","hashOfConfig":"253"},{"size":16790,"mtime":1662560761343,"results":"368","hashOfConfig":"253"},{"size":760,"mtime":1661626922134,"results":"369","hashOfConfig":"253"},{"size":2010,"mtime":1661626922136,"results":"370","hashOfConfig":"253"},{"size":872,"mtime":1661939671016,"results":"371","hashOfConfig":"253"},{"size":24611,"mtime":1661939671087,"results":"372","hashOfConfig":"253"},{"size":4703,"mtime":1661939671093,"results":"373","hashOfConfig":"253"},{"size":7955,"mtime":1661939671091,"results":"374","hashOfConfig":"253"},{"size":4517,"mtime":1661939671085,"results":"375","hashOfConfig":"253"},{"size":9359,"mtime":1662198260012,"results":"376","hashOfConfig":"253"},{"size":11225,"mtime":1662198259972,"results":"377","hashOfConfig":"253"},{"size":11194,"mtime":1662198259976,"results":"378","hashOfConfig":"253"},{"size":7621,"mtime":1661626922122,"results":"379","hashOfConfig":"253"},{"size":7216,"mtime":1662906476001,"results":"380","hashOfConfig":"253"},{"size":3328,"mtime":1661626922119,"results":"381","hashOfConfig":"253"},{"size":10169,"mtime":1662198260068,"results":"382","hashOfConfig":"253"},{"size":14961,"mtime":1662198260058,"results":"383","hashOfConfig":"253"},{"size":16504,"mtime":1661626922114,"results":"384","hashOfConfig":"253"},{"size":20252,"mtime":1661626922109,"results":"385","hashOfConfig":"253"},{"size":10132,"mtime":1661626922107,"results":"386","hashOfConfig":"253"},{"size":12434,"mtime":1662231376288,"results":"387","hashOfConfig":"253"},{"size":17816,"mtime":1662720575509,"results":"388","hashOfConfig":"253"},{"size":6880,"mtime":1662198259995,"results":"389","hashOfConfig":"253"},{"size":9622,"mtime":1662198259991,"results":"390","hashOfConfig":"253"},{"size":8478,"mtime":1661939671081,"results":"391","hashOfConfig":"253"},{"size":3172,"mtime":1661939671089,"results":"392","hashOfConfig":"253"},{"size":23179,"mtime":1661626922090,"results":"393","hashOfConfig":"253"},{"size":12646,"mtime":1661626922087,"results":"394","hashOfConfig":"253"},{"size":13724,"mtime":1663053065916,"results":"395","hashOfConfig":"253"},{"size":7791,"mtime":1661939671079,"results":"396","hashOfConfig":"253"},{"size":8641,"mtime":1662198259983,"results":"397","hashOfConfig":"253"},{"size":8727,"mtime":1661626922081,"results":"398","hashOfConfig":"253"},{"size":10558,"mtime":1662198259980,"results":"399","hashOfConfig":"253"},{"size":6113,"mtime":1662720102389,"results":"400","hashOfConfig":"253"},{"size":6334,"mtime":1662902970220,"results":"401","hashOfConfig":"253"},{"size":28705,"mtime":1662198260019,"results":"402","hashOfConfig":"253"},{"size":8124,"mtime":1661939671040,"results":"403","hashOfConfig":"253"},{"size":6744,"mtime":1661939671069,"results":"404","hashOfConfig":"253"},{"size":4429,"mtime":1661939671067,"results":"405","hashOfConfig":"253"},{"size":11070,"mtime":1661939671065,"results":"406","hashOfConfig":"253"},{"size":4495,"mtime":1661939671058,"results":"407","hashOfConfig":"253"},{"size":10107,"mtime":1661939671056,"results":"408","hashOfConfig":"253"},{"size":27260,"mtime":1661626922130,"results":"409","hashOfConfig":"253"},{"size":11239,"mtime":1662198260046,"results":"410","hashOfConfig":"253"},{"size":7782,"mtime":1661939671054,"results":"411","hashOfConfig":"253"},{"size":2288,"mtime":1661864966756,"results":"412","hashOfConfig":"253"},{"size":12679,"mtime":1663061186653,"results":"413","hashOfConfig":"253"},{"size":7678,"mtime":1661939671048,"results":"414","hashOfConfig":"253"},{"size":11800,"mtime":1661939671051,"results":"415","hashOfConfig":"253"},{"size":8664,"mtime":1662198259968,"results":"416","hashOfConfig":"253"},{"size":23156,"mtime":1661626922070,"results":"417","hashOfConfig":"253"},{"size":8818,"mtime":1661939671041,"results":"418","hashOfConfig":"253"},{"size":13286,"mtime":1662198259965,"results":"419","hashOfConfig":"253"},{"size":2398,"mtime":1661939671038,"results":"420","hashOfConfig":"253"},{"size":2072,"mtime":1661939670960,"results":"421","hashOfConfig":"253"},{"size":931,"mtime":1662198259902,"results":"422","hashOfConfig":"253"},{"size":8433,"mtime":1661939670991,"results":"423","hashOfConfig":"253"},{"size":906,"mtime":1661939670949,"results":"424","hashOfConfig":"253"},{"size":2851,"mtime":1662198260086,"results":"425","hashOfConfig":"253"},{"size":535,"mtime":1661939670932,"results":"426","hashOfConfig":"253"},{"size":1373,"mtime":1662198260090,"results":"427","hashOfConfig":"253"},{"size":1916,"mtime":1662549866022,"results":"428","hashOfConfig":"253"},{"size":163,"mtime":1661626922014,"results":"429","hashOfConfig":"253"},{"size":1451,"mtime":1661939670999,"results":"430","hashOfConfig":"253"},{"size":1875,"mtime":1661719814162,"results":"431","hashOfConfig":"253"},{"size":3053,"mtime":1662198260099,"results":"432","hashOfConfig":"253"},{"size":2021,"mtime":1662198260102,"results":"433","hashOfConfig":"253"},{"size":2557,"mtime":1661939671097,"results":"434","hashOfConfig":"253"},{"size":8513,"mtime":1661939670943,"results":"435","hashOfConfig":"253"},{"size":19807,"mtime":1661939670976,"results":"436","hashOfConfig":"253"},{"size":973,"mtime":1662198259898,"results":"437","hashOfConfig":"253"},{"size":760,"mtime":1661626921961,"results":"438","hashOfConfig":"253"},{"size":716,"mtime":1662198259891,"results":"439","hashOfConfig":"253"},{"size":2245,"mtime":1662198259908,"results":"440","hashOfConfig":"253"},{"size":1496,"mtime":1662198259914,"results":"441","hashOfConfig":"253"},{"size":1177,"mtime":1662198259872,"results":"442","hashOfConfig":"253"},{"size":1392,"mtime":1662198259857,"results":"443","hashOfConfig":"253"},{"size":1481,"mtime":1662198259931,"results":"444","hashOfConfig":"253"},{"size":731,"mtime":1661939670958,"results":"445","hashOfConfig":"253"},{"size":7762,"mtime":1661939670941,"results":"446","hashOfConfig":"253"},{"size":4594,"mtime":1661626922064,"results":"447","hashOfConfig":"253"},{"size":2053,"mtime":1661939671034,"results":"448","hashOfConfig":"253"},{"size":4356,"mtime":1662703305556,"results":"449","hashOfConfig":"253"},{"size":8512,"mtime":1662198260077,"results":"450","hashOfConfig":"253"},{"size":8858,"mtime":1661626922126,"results":"451","hashOfConfig":"253"},{"size":894,"mtime":1661626922138,"results":"452","hashOfConfig":"253"},{"size":6356,"mtime":1662698973600,"results":"453","hashOfConfig":"253"},{"size":1492,"mtime":1661939671063,"results":"454","hashOfConfig":"253"},{"size":5013,"mtime":1662116979305,"results":"455","hashOfConfig":"253"},{"size":2826,"mtime":1661626922063,"results":"456","hashOfConfig":"253"},{"size":4751,"mtime":1661626921944,"results":"457","hashOfConfig":"253"},{"size":3191,"mtime":1661626921951,"results":"458","hashOfConfig":"253"},{"size":4166,"mtime":1661939671022,"results":"459","hashOfConfig":"253"},{"size":3504,"mtime":1661939670937,"results":"460","hashOfConfig":"253"},{"size":1677,"mtime":1661939670993,"results":"461","hashOfConfig":"253"},{"size":2888,"mtime":1661626922051,"results":"462","hashOfConfig":"253"},{"size":2959,"mtime":1661626922050,"results":"463","hashOfConfig":"253"},{"size":9151,"mtime":1661626921983,"results":"464","hashOfConfig":"253"},{"size":1970,"mtime":1662198259939,"results":"465","hashOfConfig":"253"},{"size":5065,"mtime":1661939670939,"results":"466","hashOfConfig":"253"},{"size":2254,"mtime":1661626921952,"results":"467","hashOfConfig":"253"},{"size":5581,"mtime":1661626921939,"results":"468","hashOfConfig":"253"},{"size":6184,"mtime":1661626921976,"results":"469","hashOfConfig":"253"},{"size":8173,"mtime":1661626922053,"results":"470","hashOfConfig":"253"},{"size":7618,"mtime":1661939670934,"results":"471","hashOfConfig":"253"},{"size":3796,"mtime":1661939670945,"results":"472","hashOfConfig":"253"},{"size":1177,"mtime":1661626922010,"results":"473","hashOfConfig":"253"},{"size":900,"mtime":1661939670961,"results":"474","hashOfConfig":"253"},{"size":2047,"mtime":1661939670953,"results":"475","hashOfConfig":"253"},{"size":1016,"mtime":1661939670956,"results":"476","hashOfConfig":"253"},{"size":1747,"mtime":1661939670951,"results":"477","hashOfConfig":"253"},{"size":9520,"mtime":1662627119574,"results":"478","hashOfConfig":"253"},{"size":5599,"mtime":1662119225815,"results":"479","hashOfConfig":"253"},{"size":6751,"mtime":1662118852157,"results":"480","hashOfConfig":"253"},{"size":11087,"mtime":1662293272551,"results":"481","hashOfConfig":"253"},{"size":18560,"mtime":1662112421842,"results":"482","hashOfConfig":"253"},{"size":26763,"mtime":1662151873312,"results":"483","hashOfConfig":"253"},{"size":2025,"mtime":1662198259875,"results":"484","hashOfConfig":"253"},{"size":3371,"mtime":1662549502861,"results":"485","hashOfConfig":"253"},{"size":1705,"mtime":1662198259920,"results":"486","hashOfConfig":"253"},{"size":1439,"mtime":1662198259916,"results":"487","hashOfConfig":"253"},{"size":1169,"mtime":1662198259927,"results":"488","hashOfConfig":"253"},{"size":7434,"mtime":1662475551007,"results":"489","hashOfConfig":"253"},{"size":9793,"mtime":1662627275488,"results":"490","hashOfConfig":"253"},{"size":9821,"mtime":1662703180655,"results":"491","hashOfConfig":"253"},{"size":9839,"mtime":1662699336166,"results":"492","hashOfConfig":"253"},{"size":12637,"mtime":1662713624108,"results":"493","hashOfConfig":"253"},{"size":19913,"mtime":1662549452938,"results":"494","hashOfConfig":"253"},{"size":29153,"mtime":1662716942587,"results":"495","hashOfConfig":"253"},{"size":12653,"mtime":1662551740064,"results":"496","hashOfConfig":"253"},{"size":19897,"mtime":1662562598025,"results":"497","hashOfConfig":"253"},{"size":29130,"mtime":1662647730865,"results":"498","hashOfConfig":"253"},{"size":12715,"mtime":1662558734361,"results":"499","hashOfConfig":"253"},{"size":22846,"mtime":1662720844988,"results":"500","hashOfConfig":"253"},{"size":2845,"mtime":1662564914979,"results":"501","hashOfConfig":"253"},{"size":10442,"mtime":1662703714471,"results":"502","hashOfConfig":"253"},{"size":19863,"mtime":1662701762069,"results":"503","hashOfConfig":"253"},{"filePath":"504","messages":"505","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},"a6xpel",{"filePath":"507","messages":"508","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"509","messages":"510","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"511","messages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"513","messages":"514","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"515","messages":"516","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"517","usedDeprecatedRules":"506"},{"filePath":"518","messages":"519","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"520","messages":"521","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"522","messages":"523","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"524","messages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"526","messages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"528","messages":"529","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"530","messages":"531","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"532","messages":"533","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"534","messages":"535","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"536","messages":"537","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"538","messages":"539","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"540","messages":"541","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"542","messages":"543","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"544","messages":"545","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"546","usedDeprecatedRules":"506"},{"filePath":"547","messages":"548","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"549","usedDeprecatedRules":"506"},{"filePath":"550","messages":"551","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"552","usedDeprecatedRules":"506"},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"557","messages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"559","usedDeprecatedRules":"506"},{"filePath":"560","messages":"561","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"562","messages":"563","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"564","messages":"565","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"566","messages":"567","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"568","messages":"569","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"570","messages":"571","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"572","messages":"573","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"574","messages":"575","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"576","messages":"577","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"578","messages":"579","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"580","messages":"581","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"582","messages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"584","usedDeprecatedRules":"506"},{"filePath":"585","messages":"586","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"587","messages":"588","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"589","messages":"590","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"591","usedDeprecatedRules":"506"},{"filePath":"592","messages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"594","messages":"595","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"596","usedDeprecatedRules":"506"},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"599","messages":"600","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"601","usedDeprecatedRules":"506"},{"filePath":"602","messages":"603","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"604","usedDeprecatedRules":"506"},{"filePath":"605","messages":"606","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"607","messages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"609","usedDeprecatedRules":"506"},{"filePath":"610","messages":"611","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"612","messages":"613","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"614","usedDeprecatedRules":"506"},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"617","messages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"619","messages":"620","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"621","messages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"623","messages":"624","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"625","messages":"626","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"627","usedDeprecatedRules":"506"},{"filePath":"628","messages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"630","messages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"632","messages":"633","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"634","usedDeprecatedRules":"506"},{"filePath":"635","messages":"636","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"637","messages":"638","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"639","messages":"640","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"641","messages":"642","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"643","messages":"644","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"645","usedDeprecatedRules":"506"},{"filePath":"646","messages":"647","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"648","messages":"649","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"650","messages":"651","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"652","usedDeprecatedRules":"506"},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"655","usedDeprecatedRules":"506"},{"filePath":"656","messages":"657","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"658","usedDeprecatedRules":"506"},{"filePath":"659","messages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"661","messages":"662","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"663","usedDeprecatedRules":"506"},{"filePath":"664","messages":"665","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"666","messages":"667","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"668","messages":"669","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"670","messages":"671","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"672","usedDeprecatedRules":"506"},{"filePath":"673","messages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"675","messages":"676","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"677","messages":"678","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"679","messages":"680","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"681","usedDeprecatedRules":"506"},{"filePath":"682","messages":"683","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"684","usedDeprecatedRules":"506"},{"filePath":"685","messages":"686","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"687","messages":"688","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"689","messages":"690","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"691","usedDeprecatedRules":"506"},{"filePath":"692","messages":"693","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"694","usedDeprecatedRules":"506"},{"filePath":"695","messages":"696","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"697","usedDeprecatedRules":"506"},{"filePath":"698","messages":"699","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"700","usedDeprecatedRules":"506"},{"filePath":"701","messages":"702","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"703","usedDeprecatedRules":"506"},{"filePath":"704","messages":"705","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"706","messages":"707","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"708","usedDeprecatedRules":"506"},{"filePath":"709","messages":"710","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"711","usedDeprecatedRules":"506"},{"filePath":"712","messages":"713","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"714","messages":"715","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"716","messages":"717","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"718","usedDeprecatedRules":"506"},{"filePath":"719","messages":"720","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"721","messages":"722","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"723","usedDeprecatedRules":"506"},{"filePath":"724","messages":"725","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"726","messages":"727","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"728","usedDeprecatedRules":"506"},{"filePath":"729","messages":"730","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"731","usedDeprecatedRules":"506"},{"filePath":"732","messages":"733","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"734","usedDeprecatedRules":"506"},{"filePath":"735","messages":"736","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"737","usedDeprecatedRules":"506"},{"filePath":"738","messages":"739","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"740","usedDeprecatedRules":"506"},{"filePath":"741","messages":"742","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"743","usedDeprecatedRules":"506"},{"filePath":"744","messages":"745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"746","messages":"747","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"748","messages":"749","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"750","messages":"751","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"752","messages":"753","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"754","usedDeprecatedRules":"506"},{"filePath":"755","messages":"756","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"757","messages":"758","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"759","usedDeprecatedRules":"506"},{"filePath":"760","messages":"761","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"762","messages":"763","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"764","messages":"765","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"766","messages":"767","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"768","usedDeprecatedRules":"506"},{"filePath":"769","messages":"770","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"771","messages":"772","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"773","messages":"774","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"775","messages":"776","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"777","usedDeprecatedRules":"506"},{"filePath":"778","messages":"779","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"780","usedDeprecatedRules":"506"},{"filePath":"781","messages":"782","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"783","usedDeprecatedRules":"506"},{"filePath":"784","messages":"785","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"786","messages":"787","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"788","usedDeprecatedRules":"506"},{"filePath":"789","messages":"790","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"791","messages":"792","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"793","messages":"794","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"795","messages":"796","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"797","usedDeprecatedRules":"506"},{"filePath":"798","messages":"799","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"800","usedDeprecatedRules":"506"},{"filePath":"801","messages":"802","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"803","usedDeprecatedRules":"506"},{"filePath":"804","messages":"805","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"806","usedDeprecatedRules":"506"},{"filePath":"807","messages":"808","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"809","usedDeprecatedRules":"506"},{"filePath":"810","messages":"811","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"812","messages":"813","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"814","messages":"815","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"816","usedDeprecatedRules":"506"},{"filePath":"817","messages":"818","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"819","usedDeprecatedRules":"506"},{"filePath":"820","messages":"821","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"822","usedDeprecatedRules":"506"},{"filePath":"823","messages":"824","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"825","usedDeprecatedRules":"506"},{"filePath":"826","messages":"827","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"828","messages":"829","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"830","usedDeprecatedRules":"506"},{"filePath":"831","messages":"832","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"833","usedDeprecatedRules":"506"},{"filePath":"834","messages":"835","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"836","usedDeprecatedRules":"506"},{"filePath":"837","messages":"838","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"839","messages":"840","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"841","messages":"842","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"843","usedDeprecatedRules":"506"},{"filePath":"844","messages":"845","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"846","usedDeprecatedRules":"506"},{"filePath":"847","messages":"848","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"849","messages":"850","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"851","messages":"852","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"853","messages":"854","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"855","usedDeprecatedRules":"506"},{"filePath":"856","messages":"857","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"858","usedDeprecatedRules":"506"},{"filePath":"859","messages":"860","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"861","usedDeprecatedRules":"506"},{"filePath":"862","messages":"863","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"864","usedDeprecatedRules":"506"},{"filePath":"865","messages":"866","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"867","usedDeprecatedRules":"506"},{"filePath":"868","messages":"869","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"870","usedDeprecatedRules":"506"},{"filePath":"871","messages":"872","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"873","usedDeprecatedRules":"506"},{"filePath":"874","messages":"875","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"876","usedDeprecatedRules":"506"},{"filePath":"877","messages":"878","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"879","messages":"880","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"881","messages":"882","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"883","usedDeprecatedRules":"506"},{"filePath":"884","messages":"885","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"886","messages":"887","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"888","usedDeprecatedRules":"506"},{"filePath":"889","messages":"890","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"891","usedDeprecatedRules":"506"},{"filePath":"892","messages":"893","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"894","usedDeprecatedRules":"506"},{"filePath":"895","messages":"896","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"897","messages":"898","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"899","messages":"900","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"901","usedDeprecatedRules":"506"},{"filePath":"902","messages":"903","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"904","usedDeprecatedRules":"506"},{"filePath":"905","messages":"906","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"907","messages":"908","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"909","usedDeprecatedRules":"506"},{"filePath":"910","messages":"911","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"912","usedDeprecatedRules":"506"},{"filePath":"913","messages":"914","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"915","messages":"916","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"917","messages":"918","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"919","messages":"920","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"921","messages":"922","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"923","messages":"924","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"925","usedDeprecatedRules":"506"},{"filePath":"926","messages":"927","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"928","messages":"929","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"930","messages":"931","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"932","messages":"933","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"934","messages":"935","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"936","usedDeprecatedRules":"506"},{"filePath":"937","messages":"938","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"939","usedDeprecatedRules":"506"},{"filePath":"940","messages":"941","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"942","messages":"943","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"944","messages":"945","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"946","messages":"947","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"948","usedDeprecatedRules":"506"},{"filePath":"949","messages":"950","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"951","usedDeprecatedRules":"506"},{"filePath":"952","messages":"953","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"954","messages":"955","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"956"},{"filePath":"957","messages":"958","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"959","messages":"960","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"961","messages":"962","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"963","messages":"964","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"965","messages":"966","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"967","messages":"968","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"969","messages":"970","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"956"},{"filePath":"971","messages":"972","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"973","usedDeprecatedRules":"506"},{"filePath":"974","messages":"975","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"976","usedDeprecatedRules":"506"},{"filePath":"977","messages":"978","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"979","usedDeprecatedRules":"506"},{"filePath":"980","messages":"981","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"982","messages":"983","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"984","messages":"985","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"986","usedDeprecatedRules":"506"},{"filePath":"987","messages":"988","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"989","messages":"990","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"991","usedDeprecatedRules":"506"},{"filePath":"992","messages":"993","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"994","messages":"995","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"996","usedDeprecatedRules":"506"},{"filePath":"997","messages":"998","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"999","messages":"1000","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1001","usedDeprecatedRules":"506"},{"filePath":"1002","messages":"1003","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1004","usedDeprecatedRules":"506"},{"filePath":"1005","messages":"1006","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1007","usedDeprecatedRules":"506"},{"filePath":"1008","messages":"1009","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1010","usedDeprecatedRules":"506"},{"filePath":"1011","messages":"1012","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"1013","messages":"1014","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"1015","messages":"1016","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1017","usedDeprecatedRules":"506"},{"filePath":"1018","messages":"1019","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1020","usedDeprecatedRules":"506"},{"filePath":"1021","messages":"1022","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"1023","messages":"1024","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1025","usedDeprecatedRules":"506"},{"filePath":"1026","messages":"1027","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1028","usedDeprecatedRules":"506"},{"filePath":"1029","messages":"1030","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1031","usedDeprecatedRules":"506"},{"filePath":"1032","messages":"1033","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1034","usedDeprecatedRules":"506"},{"filePath":"1035","messages":"1036","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"1037","messages":"1038","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1039","usedDeprecatedRules":"506"},{"filePath":"1040","messages":"1041","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1042","usedDeprecatedRules":"506"},{"filePath":"1043","messages":"1044","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1045","usedDeprecatedRules":"506"},{"filePath":"1046","messages":"1047","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"1048","messages":"1049","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"1050","messages":"1051","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"1052","messages":"1053","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"1054","messages":"1055","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":2,"source":"1056","usedDeprecatedRules":"506"},{"filePath":"1057","messages":"1058","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1059","usedDeprecatedRules":"506"},{"filePath":"1060","messages":"1061","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1062","usedDeprecatedRules":"506"},{"filePath":"1063","messages":"1064","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1065","usedDeprecatedRules":"506"},{"filePath":"1066","messages":"1067","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1068","usedDeprecatedRules":"506"},{"filePath":"1069","messages":"1070","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1071","usedDeprecatedRules":"506"},{"filePath":"1072","messages":"1073","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"1074","messages":"1075","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"1076","messages":"1077","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"1078","messages":"1079","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"1080","messages":"1081","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"506"},{"filePath":"1082","messages":"1083","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":2,"source":"1084","usedDeprecatedRules":"506"},{"filePath":"1085","messages":"1086","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1087","usedDeprecatedRules":"506"},{"filePath":"1088","messages":"1089","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1090","usedDeprecatedRules":"506"},{"filePath":"1091","messages":"1092","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1093","usedDeprecatedRules":"506"},{"filePath":"1094","messages":"1095","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1096","usedDeprecatedRules":"506"},{"filePath":"1097","messages":"1098","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1099","usedDeprecatedRules":"506"},{"filePath":"1100","messages":"1101","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1102","usedDeprecatedRules":"506"},{"filePath":"1103","messages":"1104","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1105","usedDeprecatedRules":"506"},{"filePath":"1106","messages":"1107","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1108","usedDeprecatedRules":"506"},{"filePath":"1109","messages":"1110","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1111","usedDeprecatedRules":"506"},{"filePath":"1112","messages":"1113","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1114","usedDeprecatedRules":"506"},{"filePath":"1115","messages":"1116","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1117","usedDeprecatedRules":"506"},{"filePath":"1118","messages":"1119","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1120","usedDeprecatedRules":"506"},{"filePath":"1121","messages":"1122","errorCount":0,"fatalErrorCount":0,"warningCount":54,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1123","usedDeprecatedRules":"506"},{"filePath":"1124","messages":"1125","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1126","usedDeprecatedRules":"506"},"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\index.js",[],["1127"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\App.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\accessToken.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\graphQL\\Mutation.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\routes\\Routes.js",["1128"],"import React from \"react\";\r\nimport { Switch } from \"react-router-dom\";\r\nimport PrivateRoute from \"components/routes/PrivateRoute\";\r\nimport { CircularChart } from \"components/Utilities\";\r\nimport {\r\n  ViewHCP,\r\n  Chat,\r\n  Patients,\r\n  Subscription,\r\n  DoctorPayout,\r\n  HospitalUsers,\r\n  HealaPage,\r\n  HMODoctorPage,\r\n  Hospital,\r\n  Hcps,\r\n  HealerPartner,\r\n  HealaFilterDoctorPage,\r\n  HealaFilterPartnerPage,\r\n  DoctorProvider,\r\n  ViewDoctorVerification,\r\n  PartnersProvider,\r\n  SingleHCP,\r\n  HealaDoctor,\r\n  DoctorVerificationProfile,\r\n  Appointments,\r\n  DoctorEarning,\r\n  HcpEarnings,\r\n  HcpAvailability,\r\n  HcpPatients,\r\n  HospitalPage,\r\n  HcpAppointments,\r\n  Healas,\r\n  HcpProfile,\r\n  Medications,\r\n  SinglePatient,\r\n  HMOEnrolle,\r\n  CaseNotes,\r\n  HMOUsers,\r\n  HMOPartners,\r\n  MedicalRecords,\r\n  Prescriptions,\r\n  PatientAppointment,\r\n  HealaFilterPage,\r\n  Email,\r\n  HCP,\r\n  Consultations,\r\n  PatientProfile,\r\n  Dashboard,\r\n  HcpCaseNote,\r\n  HcpConsultations,\r\n  ViewMessage,\r\n  PatientProvider,\r\n  Heala,\r\n  CreateMessage,\r\n  Messages,\r\n  Illness,\r\n  Hm,\r\n  WaitingListDetails,\r\n  WaitingList,\r\n  Permission,\r\n  Management,\r\n  Administrator,\r\n  ViewReferral,\r\n  Settings,\r\n  ReferralTab,\r\n  Partners,\r\n  Finance,\r\n  Payout,\r\n  HCPChat,\r\n  EditManagement,\r\n  PendingPayout,\r\n  WhiteLabel,\r\n  UserTypes,\r\n  Providers,\r\n  Financetable,\r\n} from \"components/pages\";\r\nimport Hmo from \"components/pages/Hmo\";\r\nimport TestList from \"components/pages/TestList\";\r\nimport ListManagment from \"components/pages/ListManagment\";\r\nimport SubscriptionIncome from \"components/pages/SubscriptionIncome\";\r\nimport SingleHMO from \"components/pages/SingleHMO\";\r\nimport SubscriptionPlans from \"components/pages/SubscriptionPlans\";\r\nimport Hospitals from \"components/pages/Hospitals\";\r\nimport HealaPlans from \"components/pages/HealaPlans\";\r\nimport HmoPlans from \"components/pages/HmoPlans\";\r\n\r\nconst Routes = () => {\r\n  return (\r\n    <Switch>\r\n      {/*  =====  DASHBORD ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute path={[\"/\", \"/dashboard\"]} exact component={Dashboard} />\r\n\r\n      {/*  =====  PATENTS ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute exact path=\"/patients\" component={Patients} />\r\n\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/patients/:patientId\"\r\n        component={SinglePatient}\r\n      />\r\n\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/patients/:patientId/profile\"\r\n        component={PatientProfile}\r\n      />\r\n\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/patients/:patientId/profile/chat\"\r\n        component={Chat}\r\n      />\r\n\r\n      <PrivateRoute\r\n        path=\"/patients/:patientId/consultations\"\r\n        exact\r\n        component={Consultations}\r\n      />\r\n\r\n      <PrivateRoute\r\n        path=\"/patients/:patientId/prescriptions\"\r\n        component={Prescriptions}\r\n      />\r\n\r\n      <PrivateRoute\r\n        path=\"/patients/:patientId/appointments\"\r\n        component={PatientAppointment}\r\n      />\r\n\r\n      <PrivateRoute\r\n        path=\"/patients/:patientId/records\"\r\n        component={MedicalRecords}\r\n      />\r\n\r\n      <PrivateRoute\r\n        path=\"/patients/:patientId/consultations/case-notes/:rowId\"\r\n        component={CaseNotes}\r\n      />\r\n\r\n      <PrivateRoute\r\n        path=\"/patients/:patientId/medications\"\r\n        component={Medications}\r\n      />\r\n\r\n      {/*  =====  Heala ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute exact path=\"/heala\" component={Heala} />\r\n      <PrivateRoute exact path=\"/hmos\" component={Hm} />\r\n      <PrivateRoute exact path=\"/user-type\" component={UserTypes} />\r\n      <PrivateRoute exact path=\"/user-type/hmo/:id\" component={HMOEnrolle} />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/user-type/hmo/:id/:ids/users\"\r\n        component={HMOUsers}\r\n      />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/user-type/hmo/:id/:ids/partners\"\r\n        component={HMOPartners}\r\n      />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/user-type/heala/:id/:ids\"\r\n        component={HealaFilterPage}\r\n      />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/user-type/hospital/:id/doctors/:ids\"\r\n        component={HealaFilterDoctorPage}\r\n      />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/user-type/hospital/:id/partners/:ids\"\r\n        component={HealaFilterPartnerPage}\r\n      />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/user-type/heala/partner/:id/:ids\"\r\n        component={HealerPartner}\r\n      />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/user-type/hospital/:id/patients/:ids\"\r\n        component={HospitalUsers}\r\n      />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/user-type/hospital/:id/hcps/:ids\"\r\n        component={HMODoctorPage}\r\n      />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/patients/:id/filter\"\r\n        component={PatientProvider}\r\n      />\r\n      <PrivateRoute exact path=\"/hcps/:id/filter\" component={DoctorProvider} />\r\n      <PrivateRoute exact path=\"/hospital\" component={Hospital} />\r\n      {/*  =====  DOCTORS ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute exact path=\"/hcps\" component={Hcps} />\r\n\r\n      <PrivateRoute exact path=\"/hcps/:hcpId\" component={SingleHCP} />\r\n\r\n      <PrivateRoute exact path=\"/hcps/:hcpId/profile\" component={HcpProfile} />\r\n\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/hcps/:hcpId/profile/chat\"\r\n        component={HCPChat}\r\n      />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/hcps/:hcpId/verification\"\r\n        component={ViewDoctorVerification}\r\n      />\r\n\r\n      <PrivateRoute\r\n        path=\"/hcps/:hcpId/appointments\"\r\n        component={HcpAppointments}\r\n      />\r\n\r\n      <PrivateRoute\r\n        path=\"/hcps/:hcpId/availability\"\r\n        component={HcpAvailability}\r\n      />\r\n\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/hcps/:hcpId/earnings\"\r\n        component={HcpEarnings}\r\n      />\r\n\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/hcps/:hcpId/earnings/payout\"\r\n        component={DoctorPayout}\r\n      />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/hcps/:hcpId/earnings/earn\"\r\n        component={DoctorEarning}\r\n      />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/hcps/:hcpId/earnings\"\r\n        component={HcpEarnings}\r\n      />\r\n\r\n      <PrivateRoute\r\n        path=\"/hcps/:hcpId/doctor-patients\"\r\n        component={HcpPatients}\r\n      />\r\n\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/hcps/:hcpId/consultations\"\r\n        component={HcpConsultations}\r\n      />\r\n\r\n      <PrivateRoute\r\n        path=\"/hcps/:hcpId/consultations/case-notes/:rowId\"\r\n        component={HcpCaseNote}\r\n      />\r\n      {/*  =====  PARTNERS ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute exact path=\"/partners\" component={Partners} />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/user-type/:id/partners\"\r\n        component={PartnersProvider}\r\n      />\r\n\r\n      {/*  =====  HMO ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute exact path=\"/hmo\" component={Hmo} />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/user-type/hmo/:id/:ids/enrollee\"\r\n        component={SingleHMO}\r\n      />\r\n\r\n      {/*  =====  APPOINTMENTS ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute exact path=\"/appointments\" component={Appointments} />\r\n\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/appointments/waiting-list\"\r\n        component={WaitingList}\r\n      />\r\n\r\n      <PrivateRoute\r\n        path=\"/appointments/waiting-list/:listId\"\r\n        component={WaitingListDetails}\r\n      />\r\n\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/appointments/consultation\"\r\n        component={CircularChart}\r\n      />\r\n\r\n      {/*  =====  MESSAGES ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute exact path=\"/messages\" component={Messages} />\r\n\r\n      <PrivateRoute path=\"/messages/create-message\" component={CreateMessage} />\r\n\r\n      <PrivateRoute path=\"/messages/:messageId\" component={ViewMessage} />\r\n\r\n      {/*  =====  EMAILS ROUTES STARTS HERE ===== */}\r\n\r\n      <PrivateRoute path=\"/email\" component={Email} />\r\n\r\n      {/*  =====  DOCTORS VERIFICATION ROUTES STARTS HERE ===== */}\r\n      {/* <PrivateRoute exactProvide path=\"/verification\" component={HCP} /> */}\r\n\r\n      <PrivateRoute exact path=\"/verification\" component={HCP} />\r\n\r\n      {/*  =====  WHITE LABEL ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute exact path=\"/label\" component={WhiteLabel} />\r\n      <PrivateRoute exact path=\"/user-type/:id\" component={Heala} />\r\n      <PrivateRoute exact path=\"/user-type/heala/:id\" component={HealaPage} />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/user-type/heala/doctor/:id/:ids\"\r\n        component={HealaDoctor}\r\n      />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/user-type/hospital/:id\"\r\n        component={HospitalPage}\r\n      />\r\n      <PrivateRoute path=\"/user-types/:id\" component={Healas} />\r\n\r\n      {/* <PrivateRoute path=\"/label/types\" component={UserTypes} /> */}\r\n\r\n      {/*  =====  FINANCE ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute exact path=\"/finance\" component={Finance} />\r\n\r\n      <PrivateRoute exact path=\"/finance/earnings\" component={Financetable} />\r\n\r\n      <PrivateRoute exact path=\"/finance/payouts\" component={Payout} />\r\n\r\n      <PrivateRoute exact path=\"/finance/pending\" component={PendingPayout} />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/finance/sub-income\"\r\n        component={SubscriptionIncome}\r\n      />\r\n\r\n      {/*  =====  REFERRALS ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute path=\"/referrals/:referralId\" component={ViewReferral} />\r\n\r\n      <PrivateRoute path=\"/referrals\" component={ReferralTab} />\r\n\r\n      {/*  =====  SUBSCRIPTION ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute exact path=\"/plans\" component={SubscriptionPlans} />\r\n      <PrivateRoute exact path=\"/plans/heala-plans\" component={HealaPlans} />\r\n      <PrivateRoute exact path=\"/plans/hmo-plans\" component={HmoPlans} />\r\n      <PrivateRoute exact path=\"/plans/hospitals\" component={Hospitals} />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/plans/hospitals/:id\"\r\n        component={Subscription}\r\n      />\r\n\r\n      {/*  =====  VIEW DOCTORS VERIFICATION ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute\r\n        path=\"/verification/view/:viewId\"\r\n        exact\r\n        component={ViewHCP}\r\n      />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/verification/view/:viewId/doctor/:id\"\r\n        component={DoctorVerificationProfile}\r\n      />\r\n\r\n      {/*  =====  SETTINGS ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute exact path=\"/settings\" component={Settings} />\r\n\r\n      <PrivateRoute path=\"/settings/administrator\" component={Administrator} />\r\n\r\n      <PrivateRoute path=\"/settings/permissions\" component={Permission} />\r\n\r\n      <PrivateRoute exact path=\"/settings/management\" component={Management} />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/settings/management/:editId\"\r\n        component={EditManagement}\r\n      />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/settings/list-management\"\r\n        component={ListManagment}\r\n      />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/settings/list-management/tests\"\r\n        component={TestList}\r\n      />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/settings/list-management/illness\"\r\n        component={Illness}\r\n      />\r\n    </Switch>\r\n  );\r\n  // }\r\n};\r\n\r\nexport default Routes;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\muiTheme.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\hooks\\useActions.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\store.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\CircularProgress.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HmoPlans.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaPlans.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Hospitals.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SubscriptionPlans.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-creators\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\reducers\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\CreateEditHMOPlans.js",["1129","1130","1131","1132","1133","1134"],"import React from \"react\";\r\nimport t from \"prop-types\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { FormikControl } from \"components/validation\";\r\nimport { CREATE_PLAN, UPDATE_PLAN } from \"components/graphQL/Mutation\";\r\nimport { addEditPlansValidationSchema } from \"helpers/validationSchemas\";\r\n\r\nconst CreateEditHMOPlans = ({ type, initialValues, onSuccess }) => {\r\n  const theme = useTheme();\r\n  const [createPlan] = useMutation(CREATE_PLAN);\r\n  const [updatePlan] = useMutation(UPDATE_PLAN);\r\n  const { displayAlert, getErrorMsg, watchFunction } = useAlert();\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  const onAddSubmit = async (values) => {\r\n    try {\r\n      const variables = {\r\n        ...values,\r\n        amount: Number(values.amount),\r\n      };\r\n      const createPlanRes = createPlan({\r\n        variables: variables,\r\n      });\r\n\r\n      return watchFunction(\r\n        \"Plan created successfully.\",\r\n        \"Couldn't create plan. Try again.\",\r\n        createPlanRes\r\n      ).then(() => {\r\n        onSuccess();\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n      const errMsg = getErrorMsg(error);\r\n      displayAlert(\"error\", errMsg);\r\n    }\r\n  };\r\n\r\n  const onUpdateSubmit = async (values) => {\r\n    try {\r\n      const variables = {\r\n        ...values,\r\n        amount: Number(values.amount),\r\n      };\r\n      const updatePlanRes = updatePlan({\r\n        variables: variables,\r\n      });\r\n\r\n      return watchFunction(\r\n        \"Plan updated successfully.\",\r\n        \"Couldn't update plan. Try again.\",\r\n        updatePlanRes\r\n      ).then(() => {\r\n        onSuccess();\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n      const errMsg = getErrorMsg(error);\r\n      displayAlert(\"error\", errMsg);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={(values) =>\r\n        type === \"edit\"\r\n          ? onUpdateSubmit({\r\n              ...values,\r\n            })\r\n          : onAddSubmit({ ...values })\r\n      }\r\n      validationSchema={addEditPlansValidationSchema}\r\n      validateOnChange={true}\r\n      validateOnMount={false}\r\n      validateOnBlur={true}\r\n    >\r\n      {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\r\n        return (\r\n          <Form style={{ marginTop: \"1rem\" }}>\r\n            <Grid item container direction=\"column\" gap={1}>\r\n              <Grid item container rowSpacing={2}>\r\n                <Grid item container>\r\n                  <FormikControl\r\n                    hidden\r\n                    control=\"input\"\r\n                    name=\"amount\"\r\n                    placeholder=\"Enter Amount\"\r\n                  />\r\n                </Grid>\r\n                <Grid item container>\r\n                  <FormikControl\r\n                    control=\"input\"\r\n                    name=\"name\"\r\n                    label=\"Name of plan\"\r\n                    placeholder=\"Enter Plan Name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item container>\r\n                  <FormikControl\r\n                    disable={true}\r\n                    control=\"select\"\r\n                    options={[{ key: \"Consultation only\", value: \"\" }, ...[]]}\r\n                    name=\"accessType\"\r\n                    label=\"Access type\"\r\n                  />\r\n                </Grid>\r\n                <Grid item container>\r\n                  <FormikControl\r\n                    control=\"input\"\r\n                    placeholder=\"Enter your Description\"\r\n                    name=\"description\"\r\n                    label=\"Description\"\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <CustomButton\r\n                    title={type === \"edit\" ? \"Save Plan\" : \"Add Plan\"}\r\n                    width=\"100%\"\r\n                    type={buttonType}\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={isSubmitting}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nCreateEditHMOPlans.propTypes = {\r\n  onSuccess: t.func.isRequired,\r\n  initialValues: t.object.isRequired,\r\n  type: t.string.isRequired,\r\n};\r\n\r\nexport default CreateEditHMOPlans;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\CreateEditPlans.js",["1135","1136","1137","1138","1139","1140"],"import React from \"react\";\r\nimport t from \"prop-types\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { FormikControl } from \"components/validation\";\r\nimport { CREATE_PLAN, UPDATE_PLAN } from \"components/graphQL/Mutation\";\r\nimport { addEditPlansValidationSchema } from \"helpers/validationSchemas\";\r\n\r\nconst CreateEditPlans = ({ type, initialValues, onSuccess }) => {\r\n  const theme = useTheme();\r\n  const [createPlan] = useMutation(CREATE_PLAN);\r\n  const [updatePlan] = useMutation(UPDATE_PLAN);\r\n  const { displayAlert, getErrorMsg, watchFunction } = useAlert();\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  const onAddSubmit = async (values) => {\r\n    try {\r\n      const variables = {\r\n        ...values,\r\n        amount: Number(values.amount),\r\n      };\r\n      const createPlanRes = createPlan({\r\n        variables: variables,\r\n      });\r\n\r\n      return watchFunction(\r\n        \"Plan created successfully.\",\r\n        \"Couldn't create plan. Try again.\",\r\n        createPlanRes\r\n      ).then(() => {\r\n        onSuccess();\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n      const errMsg = getErrorMsg(error);\r\n      displayAlert(\"error\", errMsg);\r\n    }\r\n  };\r\n\r\n  const onUpdateSubmit = async (values) => {\r\n    try {\r\n      const variables = {\r\n        ...values,\r\n        amount: Number(values.amount),\r\n      };\r\n      const updatePlanRes = updatePlan({\r\n        variables: variables,\r\n      });\r\n\r\n      return watchFunction(\r\n        \"Plan updated successfully.\",\r\n        \"Couldn't update plan. Try again.\",\r\n        updatePlanRes\r\n      ).then(() => {\r\n        onSuccess();\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n      const errMsg = getErrorMsg(error);\r\n      displayAlert(\"error\", errMsg);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={(values) =>\r\n        type === \"edit\"\r\n          ? onUpdateSubmit({\r\n              ...values,\r\n            })\r\n          : onAddSubmit({ ...values })\r\n      }\r\n      validationSchema={addEditPlansValidationSchema}\r\n      validateOnChange={true}\r\n      validateOnMount={false}\r\n      validateOnBlur={true}\r\n    >\r\n      {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\r\n        return (\r\n          <Form style={{ marginTop: \"1rem\" }}>\r\n            <Grid item container direction=\"column\" gap={1}>\r\n              <Grid item container rowSpacing={2}>\r\n                <Grid item container>\r\n                  <FormikControl\r\n                    control=\"input\"\r\n                    name=\"name\"\r\n                    label=\"Name of plan\"\r\n                    placeholder=\"Enter Plan Name\"\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item container>\r\n                  <FormikControl\r\n                    control=\"input\"\r\n                    name=\"amount\"\r\n                    placeholder=\"Enter Amount\"\r\n                    label=\"Amount\"\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item container>\r\n                  <FormikControl\r\n                    control=\"input\"\r\n                    placeholder=\"Enter Duration\"\r\n                    name=\"duration\"\r\n                    label=\"Duration\"\r\n                  />\r\n                </Grid>\r\n                <Grid item container>\r\n                  <FormikControl\r\n                    control=\"input\"\r\n                    placeholder=\"Enter your Description\"\r\n                    name=\"description\"\r\n                    label=\"Description\"\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <CustomButton\r\n                    title={type === \"edit\" ? \"Save Plan\" : \"Add Plan\"}\r\n                    width=\"100%\"\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={isSubmitting}\r\n                    type={buttonType}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nCreateEditPlans.propTypes = {\r\n  onSuccess: t.func.isRequired,\r\n  initialValues: t.object.isRequired,\r\n  type: t.string.isRequired,\r\n};\r\n\r\nexport default CreateEditPlans;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Tables\\HospitalsTable.js",["1141"],"import React, { useEffect, useState } from \"react\";\r\nimport { EmptyTable, NoData } from \"components/layouts\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { useStyles } from \"styles/hmoPageStyles\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport EnhancedTable from \"components/layouts/EnhancedTable\";\r\nimport { hospitalTableHeadCells20 } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport HospitalRow from \"components/Rows/HospitalRow\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getProviders } from \"components/graphQL/useQuery\";\r\nimport { getDynamicSearchPlaceholder } from \"helpers/func\";\r\nimport { Loader } from \"components/Utilities\";\r\n\r\nconst HospitalsTable = () => {\r\n  const classes = useStyles();\r\n  const [hospitals, setHospitals] = useState([]);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [fetchHospitals, { loading, error, variables }] = useLazyQuery(\r\n    getProviders,\r\n    {\r\n      variables: { userTypeId: \"61ed2354e6091400135e3d94\" },\r\n    }\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetchHospitals()\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setHospitals(data?.getProviders?.provider || []);\r\n          setPageInfo(data?.getProviders?.pageInfo || {});\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, [fetchHospitals]);\r\n\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n      <Grid\r\n        item\r\n        container\r\n        spacing={2}\r\n        className={classes.searchFilterContainer}\r\n      >\r\n        <Grid item container flexWrap=\"wrap\" spacing={4}></Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{\r\n              fetchData: fetchHospitals,\r\n              variables,\r\n              loading,\r\n              newVariables: { provider: \"61db6f8968b248001aec4fcb\" },\r\n            }}\r\n            setPageInfo={(data) =>\r\n              setPageInfo(data?.getProviders?.pageInfo || {})\r\n            }\r\n            searchState={{\r\n              value: \"\",\r\n              filterBy: \"name\",\r\n            }}\r\n            setProfiles={(data) =>\r\n              setHospitals(data?.getProviders?.provider || [])\r\n            }\r\n            getSearchPlaceholder={(filterBy) =>\r\n              getDynamicSearchPlaceholder(filterBy, {\r\n                name: \"Search by name\",\r\n              })\r\n            }\r\n            filterOptions={[{ key: \"By name\", value: \"name\" }]}\r\n          />\r\n        }\r\n      >\r\n        {loading ? (\r\n          <Loader />\r\n        ) : hospitals.length > 0 ? (\r\n          /* ================= HMO TABLE ================= */\r\n          <Grid\r\n            container\r\n            item\r\n            direction=\"column\"\r\n            overflow=\"hidden\"\r\n            maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n          >\r\n            <EnhancedTable\r\n              headCells={hospitalTableHeadCells20}\r\n              rows={hospitals}\r\n              paginationLabel=\"Hospitals per page\"\r\n              hasCheckbox={false}\r\n              dataPageInfo={pageInfo}\r\n            >\r\n              {hospitals.map((row, index) => {\r\n                return <HospitalRow key={index} index={index} rowData={row} />;\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={hospitalTableHeadCells20}\r\n            paginationLabel=\"Hospitals per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HospitalsTable;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\graphQL\\useQuery.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\cards\\InfoCard.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Tables\\PlansTable.js",["1142","1143","1144","1145","1146","1147","1148","1149","1150","1151","1152","1153","1154","1155","1156","1157"],"import React, { useEffect, useState } from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { EmptyTable } from \"components/layouts\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { useStyles } from \"styles/hmoPageStyles\";\r\nimport { DeleteOrDisable } from \"components/modals\";\r\nimport { getPlans } from \"components/graphQL/useQuery\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { DELETE_PLAN } from \"components/graphQL/Mutation\";\r\nimport { PlanListRow } from \"components/Rows/PlanListRow\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport EnhancedTable from \"components/layouts/EnhancedTable\";\r\nimport {\r\n  defaultPageInfo,\r\n  plansSearchFilterOptions,\r\n  plansSearchOptions,\r\n} from \"../../helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport { subscriptionHeader } from \"components/Utilities/tableHeaders\";\r\nimport MainModal from \"components/modals/MainModal\";\r\nimport CreateEditPlans from \"components/Forms/CreateEditPlans\";\r\nimport { getDynamicSearchPlaceholder } from \"helpers/func\";\r\n\r\nconst PlansTable = ({ PlansQuery }) => {\r\n  /* const theme = useTheme(); */\r\n  const classes = useStyles();\r\n  const [id, setId] = useState(null);\r\n  const { watchFunction } = useAlert();\r\n  const [plans, setPlans] = useState([]);\r\n  const [deletePlan] = useMutation(DELETE_PLAN);\r\n  const [editModal, setEditModal] = useState(false);\r\n  const [editPlanData, setEditPlanData] = useState(\"\");\r\n  const [deleteModal, setdeleteModal] = useState(false);\r\n  const [isDeleting, setIsDeleting] = React.useState({});\r\n  const { fetchPlans, loading, data, refetch, variables, newVariables } =\r\n    PlansQuery;\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n\r\n  useEffect(() => {\r\n    fetchPlans({\r\n      variables: {\r\n        first: pageInfo?.limit,\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchPlans, pageInfo]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setPlans(data.getPlans.plan);\r\n      setPageInfo(data.getPlans.pageInfo);\r\n      (data.getPlans.plan || []).map((plan) => {\r\n        const newIsDeleting = isDeleting;\r\n        setIsDeleting({ [plan._id]: false, ...newIsDeleting });\r\n        return null;\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [data]);\r\n\r\n  // delete plan\r\n  const onConfirmDelPlan = async () => {\r\n    const newIsDeleting = isDeleting;\r\n    const stopDeleting = () => {\r\n      setId(null);\r\n      newIsDeleting[id] = false;\r\n      setIsDeleting({ ...newIsDeleting });\r\n    };\r\n    try {\r\n      newIsDeleting[id] = true;\r\n      setIsDeleting({ ...newIsDeleting });\r\n      const deletePlanRes = deletePlan({\r\n        variables: { id },\r\n        refetchQueries: [{ query: getPlans }],\r\n      });\r\n\r\n      watchFunction(\r\n        \"Plan deleted succesfully\",\r\n        \"Couldn't delete plan.\",\r\n        deletePlanRes\r\n      ).then(() => {\r\n        refetch();\r\n        stopDeleting();\r\n      });\r\n    } catch (error) {\r\n      stopDeleting();\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n        <Grid\r\n          item\r\n          container\r\n          spacing={2}\r\n          className={classes.searchFilterContainer}\r\n        >\r\n          <Grid item container flexWrap=\"wrap\" spacing={4}></Grid>\r\n        </Grid>\r\n        <TableLayout\r\n          search={\r\n            <CompoundSearch\r\n              queryParams={{\r\n                fetchData: fetchPlans,\r\n                variables,\r\n                loading,\r\n                newVariables: newVariables,\r\n              }}\r\n              searchState={{\r\n                value: \"\",\r\n                filterBy: \"name\",\r\n              }}\r\n              setPageInfo={(data) => null}\r\n              setProfiles={(data) => null}\r\n              getSearchPlaceholder={(filterBy) =>\r\n                getDynamicSearchPlaceholder(filterBy, plansSearchFilterOptions)\r\n              }\r\n              filterOptions={plansSearchOptions}\r\n            />\r\n          }\r\n        >\r\n          {loading ? (\r\n            <Loader />\r\n          ) : plans.length > 0 ? (\r\n            /* ================= HMO TABLE ================= */\r\n            <Grid\r\n              container\r\n              item\r\n              direction=\"column\"\r\n              overflow=\"hidden\"\r\n              maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n            >\r\n              <EnhancedTable\r\n                headCells={subscriptionHeader}\r\n                rows={plans}\r\n                paginationLabel=\"subscription per page\"\r\n                hasCheckbox={true}\r\n                changeLimit={async (e) => {\r\n                  await changeTableLimit(fetchPlans, { first: e });\r\n                }}\r\n                dataPageInfo={pageInfo}\r\n                handlePagination={async (page) => {\r\n                  await handlePageChange(fetchPlans, page, pageInfo, {});\r\n                }}\r\n              >\r\n                {plans.map((row, index) => {\r\n                  const isItemSelected = isSelected(row?._id, selectedRows);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  const { _id, name, provider, duration, amount, description } =\r\n                    row;\r\n                  const editFormValues = {\r\n                    id: _id,\r\n                    name,\r\n                    provider,\r\n                    duration,\r\n                    amount,\r\n                    description,\r\n                  };\r\n                  return (\r\n                    <PlanListRow\r\n                      key={`${row?._id}-${index}`}\r\n                      plan={row}\r\n                      isItemSelected={isItemSelected}\r\n                      handleSelectedRows={handleSelectedRows}\r\n                      selectedRows={selectedRows}\r\n                      setSelectedRows={setSelectedRows}\r\n                      labelId={labelId}\r\n                      handleDeleteOpenDialog={() => {\r\n                        setId(row?._id);\r\n                        setdeleteModal(true);\r\n                      }}\r\n                      handleEditOpenDialog={() => {\r\n                        setEditPlanData(editFormValues);\r\n                        setEditModal(true);\r\n                      }}\r\n                      deleting={isDeleting[row._id]}\r\n                    />\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={subscriptionHeader}\r\n              paginationLabel=\"Users per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </Grid>\r\n      <Grid>\r\n        {/* EDIT PLAN MODAL */}\r\n        <MainModal\r\n          isOpen={editModal}\r\n          headerText=\"Edit plan\"\r\n          rowSpacing={5}\r\n          setIsOpen={() => setEditModal(false)}\r\n        >\r\n          <CreateEditPlans\r\n            initialValues={editPlanData}\r\n            type=\"edit\"\r\n            onSuccess={() => {\r\n              setEditModal(false);\r\n              refetch();\r\n            }}\r\n          />\r\n        </MainModal>\r\n\r\n        {/* DELETE PLAN MODAL */}\r\n        <DeleteOrDisable\r\n          open={deleteModal}\r\n          setOpen={setdeleteModal}\r\n          title=\"Delete Plan\"\r\n          onConfirm={onConfirmDelPlan}\r\n          confirmationMsg=\"delete plan\"\r\n          btnValue=\"Delete\"\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default PlansTable;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\MainModal.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\reducers\\hcpReducer.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\reducers\\patientReducer.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\reducers\\authReducer.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\reducers\\tablesReducer.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-creators\\hcp.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-creators\\patient.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-creators\\auth.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-creators\\tablesActions.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\graphQL\\fragment.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\mockData.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\func.js",["1158","1159","1160","1161"],"import { format } from \"date-fns\";\r\nimport moment from \"moment\";\r\n\r\nexport const arrangeItems = (array) => {\r\n  let finalArray = [];\r\n  let n = 0;\r\n  let arrayValues = [];\r\n  let arrayObject = {};\r\n  arrayObject.name = undefined;\r\n\r\n  // array.sort();\r\n  array.forEach((element) => {\r\n    let container = element.split(\":\");\r\n    if (arrayObject.name == container[0]) {\r\n      arrayValues.push(container[1]);\r\n      arrayObject.value = arrayValues;\r\n    } else {\r\n      finalArray[n] = arrayObject;\r\n      arrayValues = [];\r\n      arrayObject = {};\r\n      arrayObject.name = container[0];\r\n      arrayValues.push(container[1]);\r\n      arrayObject.value = arrayValues;\r\n      n += 1;\r\n    }\r\n  });\r\n  finalArray.shift();\r\n  return finalArray;\r\n};\r\n\r\nexport const removeEmptyStringValues = (obj) => {\r\n  try {\r\n    let newObj = {};\r\n    for (const key in obj) {\r\n      if (obj[key] !== \"\") {\r\n        newObj[key] = obj[key];\r\n      }\r\n    }\r\n    return newObj;\r\n  } catch (err) {\r\n    console.err(\"error from removeEmptyStringValues FN\", err);\r\n    return obj;\r\n  }\r\n};\r\n\r\nexport const setSideNav = (appNavData, pathname, setNav) => {\r\n  try {\r\n    const pathArr = pathname.split(\"/\");\r\n    if (pathArr.length < 2) {\r\n      setNav(0);\r\n      return;\r\n    }\r\n\r\n    appNavData.map((data) => {\r\n      if (data.path === `/${pathArr[1]}`) {\r\n        setNav(data?.id);\r\n      }\r\n    });\r\n  } catch (error) {\r\n    console.log(\"Something sent wrong with setSideNav FN\", error);\r\n  }\r\n};\r\n\r\nexport const dateMoment = (dateString) => {\r\n  const formatedDate = moment(dateString).utc().format(\"YYYY-MM-DD\");\r\n  if (formatedDate === \"Invalid date\") {\r\n    return null;\r\n  } else {\r\n    return formatedDate;\r\n  }\r\n};\r\n\r\nexport const getSearchPlaceholder = (filterBy) => {\r\n  return filterBy === \"id\"\r\n    ? \"Search by ID e.g 7NE6ELLO\"\r\n    : filterBy === \"firstName\"\r\n    ? \"Search by first name e.g John\"\r\n    : filterBy === \"lastName\"\r\n    ? \"Search by last name e.g Doe\"\r\n    : \"\";\r\n};\r\nexport const HealGgetSearchPlaceholder = (filterBy) => {\r\n  return filterBy === \"id\" ? \"Search by UserTypesId \" : \"\";\r\n};\r\n\r\nexport const getDynamicSearchPlaceholder = (\r\n  filterBy,\r\n  obj = { hmoId: \"Search by HMO ID\" }\r\n) => {\r\n  let placeHolder = \"\";\r\n  Object.keys(obj).forEach((key) => {\r\n    if (key === filterBy) placeHolder = obj[key];\r\n  });\r\n  return placeHolder;\r\n};\r\n\r\nexport const getInitials = (name) => {\r\n  try {\r\n    const splitedNamesArr = name.split(\" \");\r\n\r\n    const initailsArr = splitedNamesArr.map((name) => {\r\n      const splitedNameArr = name.split(\"\");\r\n      return splitedNameArr[0];\r\n    });\r\n\r\n    return initailsArr.join(\"\");\r\n  } catch (error) {\r\n    console.error(\"error from getInitials func.\", error);\r\n    return \"\";\r\n  }\r\n};\r\n\r\nexport const formatDate = (date, formatType) => {\r\n  try {\r\n    const parsedDate = Date.parse(date);\r\n    const formatedDate = format(parsedDate, formatType);\r\n    return formatedDate;\r\n  } catch (error) {\r\n    console.error(error);\r\n    return \"No date\";\r\n  }\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\tableHeaders.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\TableLayout.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\CompoundSearch.js",["1162","1163"],"import React, { useState } from \"react\";\r\nimport t from \"prop-types\";\r\nimport Filter from \"./Filters\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { Search } from \"components/Utilities\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport { deleteVar } from \"helpers/filterHelperFunctions\";\r\n\r\nconst CompoundSearch = ({\r\n  queryParams,\r\n  searchState,\r\n  setPageInfo,\r\n  setProfiles,\r\n  getSearchPlaceholder,\r\n  filterOptions,\r\n  showHeala,\r\n}) => {\r\n  const state = searchState || {\r\n    value: \"\",\r\n    filterBy: \"id\",\r\n  };\r\n  const { displayAlert } = useAlert();\r\n  const { fetchData, variables, loading, newVariables } = queryParams;\r\n  const [searchValue, setSearchValue] = useState(state);\r\n\r\n  const search = async (searchBy, searchVal) => {\r\n    try {\r\n      deleteVar(variables);\r\n      let value = searchVal;\r\n      // if (searchBy === \"id\") value = `HEALA-${searchVal}`;\r\n      if (searchBy === \"ids\") value = searchVal;\r\n\r\n      const searchVariables =\r\n        value === \"\"\r\n          ? {\r\n              ...newVariables,\r\n            }\r\n          : {\r\n              [searchBy]: value,\r\n              ...newVariables,\r\n            };\r\n      fetchData({\r\n        variables: searchVariables,\r\n      }).then(({ data }) => {\r\n        if (!data) {\r\n          deleteVar(variables);\r\n          displayAlert(\"error\", `Couldn't search for ${searchVal}`);\r\n          throw Error(`Couldn't search for ${searchVal}`);\r\n        }\r\n        setProfiles(data); // set outside\r\n        setPageInfo(data); // set outside\r\n        deleteVar(variables);\r\n      });\r\n    } catch (error) {\r\n      deleteVar(variables);\r\n      console.error(error);\r\n      displayAlert(\"error\", `Couldn't search for ${searchVal}`);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={2} flexWrap=\"wrap\">\r\n      <Grid item>\r\n        <Filter\r\n          options={filterOptions}\r\n          name=\"search\"\r\n          onHandleChange={(e) => {\r\n            deleteVar(variables);\r\n            setSearchValue({ ...searchValue, filterBy: e?.target?.value });\r\n          }}\r\n          value={searchValue.filterBy}\r\n          disable={loading}\r\n        />\r\n      </Grid>\r\n      <Grid item flex={1} width=\"100%\">\r\n        <Search\r\n          height=\"48px\"\r\n          hasStartIcon={false}\r\n          onChange={(e) => {\r\n            let value = e.target.value;\r\n            setSearchValue({ ...searchValue, value });\r\n          }}\r\n          placeholder={getSearchPlaceholder(searchValue.filterBy)}\r\n          startIcon={\r\n            searchValue.filterBy === \"id\" && !showHeala ? (\r\n              <Typography sx={{ fontSize: \"14px\" }}>HEALA-</Typography>\r\n            ) : null\r\n          }\r\n          onClickSearchBtn={() =>\r\n            search(searchValue.filterBy, searchValue.value)\r\n          }\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nCompoundSearch.propTypes = {\r\n  queryParams: t.object.isRequired,\r\n  searchState: t.object,\r\n  setPageInfo: t.func.isRequired,\r\n  setProfiles: t.func.isRequired,\r\n  getSearchPlaceholder: t.func,\r\n  filterOptions: t.array,\r\n};\r\n\r\nexport default CompoundSearch;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\validationSchemas.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\EnhancedTable.js",["1164"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport LastPageIcon from \"@mui/icons-material/LastPage\";\r\nimport FirstPageIcon from \"@mui/icons-material/FirstPage\";\r\nimport { KeyboardArrowLeft, KeyboardArrowRight } from \"@mui/icons-material\";\r\nimport {\r\n  Box,\r\n  IconButton,\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TablePagination,\r\n  Paper,\r\n} from \"@mui/material\";\r\nimport EnhancedTableHeader from \"./EnhancedTableHeader\";\r\nimport { paginationActionTypes } from \"helpers/mockData\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport EnhancedTableToolbar from \"./EnhancedTableToolbar\";\r\n//import { handlePageChange } from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  pagination: {\r\n    \"& .MuiTablePagination-selectLabel\": {\r\n      fontSize: \"1.2rem\",\r\n    },\r\n\r\n    \"& .MuiTablePagination-select\": {\r\n      fontSize: \"1.2rem\",\r\n    },\r\n\r\n    \"& .MuiTablePagination-displayedRows\": {\r\n      fontSize: \"1.2rem\",\r\n    },\r\n  },\r\n\r\n  tableToolbar: {\r\n    \"&.MuiToolbar-root\": {\r\n      background: \"#eee\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst EnhancedTable = ({\r\n  rows,\r\n  children,\r\n  headCells,\r\n  paginationLabel,\r\n  title,\r\n  type,\r\n  hasCheckbox,\r\n  changeLimit,\r\n  dataPageInfo,\r\n  hasPagination = true,\r\n  handlePagination,\r\n}) => {\r\n  const classes = useStyles();\r\n  const { setSelectedRows } = useActions();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = rows.map((selected) => selected.id);\r\n      setSelectedRows(newSelecteds);\r\n      return;\r\n    }\r\n    setSelectedRows([]);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ width: \"100%\" }}>\r\n      <Paper sx={{ width: \"100%\", mb: 2 }} elevation={0}>\r\n        <EnhancedTableToolbar numSelected={selectedRows.length} title={title} />\r\n\r\n        <TableContainer>\r\n          <Table sx={{ minWidth: 750 }} aria-labelledby=\"tableTitle\">\r\n            <EnhancedTableHeader\r\n              numSelected={selectedRows.length}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              rowCount={rows.length}\r\n              headCells={headCells}\r\n              hasCheckbox={hasCheckbox}\r\n            />\r\n            <TableBody>{children}</TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        {hasPagination &&\r\n          (type !== \"editRole\" ? (\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 15, 25]}\r\n              component=\"div\"\r\n              count={dataPageInfo?.totalDocs || 0}\r\n              rowsPerPage={dataPageInfo?.limit || 5}\r\n              page={dataPageInfo?.page - 1}\r\n              labelRowsPerPage={paginationLabel}\r\n              onPageChange={(e) => e}\r\n              onRowsPerPageChange={(e) => {\r\n                changeLimit(parseInt(e.target.value, 10));\r\n              }}\r\n              className={classes.pagination}\r\n              ActionsComponent={() => (\r\n                <EnhancedTableAction\r\n                  {...{\r\n                    dataPageInfo,\r\n                    handlePagination,\r\n                  }}\r\n                />\r\n              )}\r\n            />\r\n          ) : null)}\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nEnhancedTable.propTypes = {\r\n  rows: PropTypes.array,\r\n  children: PropTypes.node,\r\n  headCells: PropTypes.array,\r\n  paginationLabel: PropTypes.string,\r\n  title: PropTypes.string,\r\n  type: PropTypes.string,\r\n  hasCheckbox: PropTypes.bool,\r\n  changeLimit: PropTypes.func,\r\n  dataPageInfo: PropTypes.object,\r\n  hasPagination: PropTypes.bool,\r\n  handlePagination: PropTypes.func,\r\n};\r\n\r\nconst EnhancedTableAction = ({ dataPageInfo, handlePagination }) => {\r\n  const theme = useTheme();\r\n  const { FIRSTPAGE, NEXTPAGE, PREVPAGE, LASTPAGE } = paginationActionTypes;\r\n\r\n  return (\r\n    <Box sx={{ flexShrink: 0, ml: 2.5 }}>\r\n      <IconButton\r\n        onClick={() => handlePagination(FIRSTPAGE)}\r\n        disabled={!dataPageInfo?.hasPrevPage}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={() => handlePagination(PREVPAGE)}\r\n        disabled={!dataPageInfo?.hasPrevPage}\r\n        aria-label=\"previous page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? (\r\n          <KeyboardArrowRight />\r\n        ) : (\r\n          <KeyboardArrowLeft />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={() => {\r\n          handlePagination(NEXTPAGE);\r\n        }}\r\n        disabled={!dataPageInfo?.hasNextPage}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? (\r\n          <KeyboardArrowLeft />\r\n        ) : (\r\n          <KeyboardArrowRight />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={() => handlePagination(LASTPAGE)}\r\n        disabled={!dataPageInfo?.hasNextPage}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </Box>\r\n  );\r\n};\r\n\r\nEnhancedTableAction.propTypes = {\r\n  dataPageInfo: PropTypes.object,\r\n  handlePagination: PropTypes.func,\r\n};\r\n\r\nexport default EnhancedTable;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\hmoPageStyles.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\HospitalRow.js",["1165","1166","1167","1168"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useStyles } from \"styles/hospitalPageStyles\";\r\nimport { Button, TableCell, TableRow } from \"@mui/material\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport ProfileInfo from \"components/Utilities/ProfileInfo\";\r\nimport { trucateString } from \"helpers/filterHelperFunctions\";\r\n\r\nconst HospitalRow = ({ index, rowData }) => {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const { _id, name, plans, email, icon } = rowData;\r\n  const labelId = `enhanced-table-checkbox-${index}`;\r\n  return (\r\n    <TableRow hover role=\"checkbox\" tabIndex={-1} key={_id}>\r\n      {/* <TableCell\r\n        id={labelId}\r\n        scope=\"row\"\r\n        align=\"left\"\r\n        className={classes.tableCell}\r\n        style={{\r\n          color: theme.palette.common.grey,\r\n          textAlign: \"left\",\r\n        }}\r\n      >\r\n        {_id ? trucateString(_id, 10, \"front\") : \"No ID\"}\r\n      </TableCell> */}\r\n      <TableCell align=\"left\" className={classes.tableCell}>\r\n        <ProfileInfo\r\n          imgUrl={icon && icon}\r\n          firstName={name ? name : \"No name\"}\r\n          lastName=\"\"\r\n        />\r\n      </TableCell>\r\n      {/* <TableCell align=\"left\" className={classes.tableCell}>\r\n        {email ? email : \"No email\"}\r\n      </TableCell> */}\r\n      <TableCell align=\"left\" className={classes.tableCell}>\r\n        {plans ? plans : \"Null\"}\r\n      </TableCell>\r\n      <TableCell align=\"left\" className={classes.tableCell}>\r\n        <Link to={`/plans/hospitals/${_id}`}>\r\n          <Button className={classes.viewBtn} endIcon={<ArrowForwardIosIcon />}>\r\n            View Plans\r\n          </Button>\r\n        </Link>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n\r\nHospitalRow.propTypes = {\r\n  index: PropTypes.number.isRequired,\r\n  rowData: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default HospitalRow;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\PlanListRow.js",["1169"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useTheme } from \"@mui/styles\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { formatNumber } from \"components/Utilities/Time\";\r\nimport { EditDelBtn } from \"components/Buttons/EditDelBtn\";\r\nimport { Checkbox, TableCell, TableRow } from \"@mui/material\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  FormLabel: {\r\n    \"&.MuiFormLabel-root\": {\r\n      ...theme.typography.FormLabel,\r\n    },\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"15rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n  btn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  closeIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      fontSize: \"2rem \",\r\n      cursor: \"pointer\",\r\n\r\n      \"&:hover\": {\r\n        color: theme.palette.common.red,\r\n      },\r\n    },\r\n  },\r\n  tableBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      height: \"3rem\",\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"2rem\",\r\n      boxShadow: \"none\",\r\n      width: \"12rem\",\r\n\r\n      \"&:hover\": {\r\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.5rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  redBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightRed,\r\n      color: theme.palette.common.red,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.error.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n\r\n  greenBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.success.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n    modal: {\r\n      background: \"red !important\",\r\n      \"& > * \": {\r\n        padding: \"2rem 1rem\",\r\n      },\r\n    },\r\n    \".MuiGrid-root\": {\r\n      background: \"red\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport const PlanListRow = ({\r\n  plan,\r\n  isItemSelected,\r\n  handleSelectedRows,\r\n  selectedRows,\r\n  setSelectedRows,\r\n  labelId,\r\n  handleDeleteOpenDialog,\r\n  handleEditOpenDialog,\r\n  deleting,\r\n}) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { _id, name, amount, duration, description } = plan;\r\n  return (\r\n    <TableRow\r\n      hover\r\n      role=\"checkbox\"\r\n      aria-checked={isItemSelected}\r\n      tabIndex={-1}\r\n      key={_id}\r\n      selected={isItemSelected}\r\n      sx={{ cursor: \"pointer\" }}\r\n      onClick={() => handleEditOpenDialog()}\r\n    >\r\n      <TableCell padding=\"checkbox\">\r\n        <Checkbox\r\n          onClick={() => handleSelectedRows(_id, selectedRows, setSelectedRows)}\r\n          color=\"primary\"\r\n          checked={isItemSelected}\r\n          inputProps={{\r\n            \"aria-labelledby\": labelId,\r\n          }}\r\n        />\r\n      </TableCell>\r\n      <TableCell\r\n        id={labelId}\r\n        scope=\"row\"\r\n        align=\"left\"\r\n        className={classes.tableCell}\r\n        style={{ color: theme.palette.common.black }}\r\n      >\r\n        {name}\r\n      </TableCell>\r\n      <TableCell\r\n        id={labelId}\r\n        scope=\"row\"\r\n        align=\"left\"\r\n        className={classes.tableCell}\r\n        style={{ color: theme.palette.common.red }}\r\n      >\r\n        {formatNumber(amount)}\r\n      </TableCell>\r\n\r\n      <TableCell\r\n        align=\"left\"\r\n        className={classes.tableCell}\r\n        style={{\r\n          color: theme.palette.common.black,\r\n          maxWidth: \"20rem\",\r\n        }}\r\n      >\r\n        {description}\r\n      </TableCell>\r\n      <TableCell\r\n        align=\"left\"\r\n        className={classes.tableCell}\r\n        style={{\r\n          color: theme.palette.common.black,\r\n          maxWidth: \"20rem\",\r\n        }}\r\n      >\r\n        {duration}\r\n      </TableCell>\r\n\r\n      <TableCell align=\"left\" className={classes.tableCell}>\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-around\",\r\n          }}\r\n        >\r\n          {deleting ? (\r\n            <Loader />\r\n          ) : (\r\n            <EditDelBtn\r\n              type=\"delete\"\r\n              text=\"Delete plan\"\r\n              onHandleClick={() => handleDeleteOpenDialog()}\r\n            />\r\n          )}\r\n        </div>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n\r\nPlanListRow.propTypes = {\r\n  plan: PropTypes.object,\r\n  isItemSelected: PropTypes.bool,\r\n  handleSelectedRows: PropTypes.func,\r\n  selectedRows: PropTypes.array,\r\n  setSelectedRows: PropTypes.func,\r\n  labelId: PropTypes.string,\r\n  handleDeleteOpenDialog: PropTypes.func,\r\n  handleEditOpenDialog: PropTypes.func,\r\n  deleting: PropTypes.bool,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\isSelected.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\filterHelperFunctions.js",["1170","1171","1172","1173","1174","1175","1176","1177","1178","1179","1180","1181","1182"],"import axios from \"axios\";\r\nimport t from \"prop-types\";\r\nimport React from \"react\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { removeEmptyStringValues } from \"./func\";\r\n\r\nexport const showErrorMsg = (enqueueSnackbar, errorMsg) => {\r\n  enqueueSnackbar(\r\n    <Typography style={{ fontSize: \"1.2rem\" }}>{`${errorMsg}`}</Typography>,\r\n    {\r\n      variant: \"error\",\r\n      preventDuplicate: true,\r\n      anchorOrigin: {\r\n        horizontal: \"center\",\r\n        vertical: \"top\",\r\n      },\r\n      autoHideDuration: 10000,\r\n    }\r\n  );\r\n};\r\n\r\nexport const showSuccessMsg = (enqueueSnackbar, Typography, successMsg) => {\r\n  enqueueSnackbar(\r\n    <Typography style={{ fontSize: \"1.2rem\" }}>{successMsg}</Typography>,\r\n    {\r\n      variant: \"success\",\r\n      preventDuplicate: true,\r\n      anchorOrigin: {\r\n        horizontal: \"right\",\r\n        vertical: \"top\",\r\n      },\r\n      autoHideDuration: 5000,\r\n    }\r\n  );\r\n};\r\n\r\nexport const getErrorMsg = (error) => {\r\n  try {\r\n    if (error?.graphQLErrors && error?.graphQLErrors?.length > 0) {\r\n      const errMsgs = (error?.graphQLErrors || []).map((err) => err.message);\r\n      return errMsgs || \"Something went wrong. Try again!!!\";\r\n    } else if (error?.networkError) {\r\n      const errMsgs = error?.networkError?.result?.errors?.map(\r\n        (err) => err.message\r\n      );\r\n      return errMsgs || \"Something went wrong. Try again!!!\";\r\n    } else if (error?.message) {\r\n      return error.message;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"error from get error func.\", error);\r\n    return \"Something went wrong. Try again!!!\";\r\n  }\r\n};\r\n\r\nexport const handleError = (error, enqueueSnackbar) => {\r\n  try {\r\n    if (error?.graphQLErrors && error?.graphQLErrors?.length > 0) {\r\n      (error?.graphQLErrors || []).map((err) =>\r\n        showErrorMsg(enqueueSnackbar, err.message)\r\n      );\r\n    } else if (error?.networkError) {\r\n      error.networkError?.result?.errors?.map((err) =>\r\n        showErrorMsg(\r\n          enqueueSnackbar,\r\n          err.message || \"Something went wrong, try again.\"\r\n        )\r\n      );\r\n    } else if (error?.message) {\r\n      console.log(error?.message);\r\n      showErrorMsg(enqueueSnackbar, error.message);\r\n    }\r\n  } catch (error) {\r\n    showErrorMsg(enqueueSnackbar, \"Something went wrong. Try again!!!\");\r\n  }\r\n};\r\n\r\nexport const deleteVar = (variable) => {\r\n  try {\r\n    for (const key in variable) {\r\n      delete variable[key];\r\n    }\r\n  } catch (error) {\r\n    console.error(\"couldn't delete variables\", error);\r\n  }\r\n};\r\n\r\nexport const filterData = async (filterVaribles, queryParams) => {\r\n  try {\r\n    const { fetchData, refetch, variables } = queryParams;\r\n    const newFilterVaribles = removeEmptyStringValues(filterVaribles);\r\n    const getData = () => {\r\n      if (newFilterVaribles === {}) {\r\n        deleteVar(variables);\r\n        return refetch();\r\n      } else {\r\n        return fetchData({ variables: newFilterVaribles });\r\n      }\r\n    };\r\n\r\n    const { data } = await getData();\r\n\r\n    if (!data) {\r\n      throw Error(\"something went wrong while filtering by status\");\r\n    }\r\n\r\n    return data;\r\n  } catch (error) {\r\n    console.error(error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// DON'T USE ...\r\nexport const onFilterValueChange = async (\r\n  e,\r\n  name,\r\n  filterValues,\r\n  setFilterValues,\r\n  fetchData,\r\n  variables,\r\n  refetchData\r\n) => {\r\n  const value = e?.target?.value;\r\n  const newFilterData = { ...filterValues, [name]: value };\r\n  setFilterValues(newFilterData);\r\n  const newData = removeEmptyStringValues(newFilterData);\r\n  if (value !== \"\") {\r\n    fetchData({\r\n      variables: newData,\r\n    });\r\n  } else {\r\n    delete variables?.[name];\r\n    refetchData();\r\n  }\r\n};\r\n\r\nexport const resetFilters = (\r\n  setFilterValues,\r\n  values,\r\n  variables,\r\n  refetchData\r\n) => {\r\n  setFilterValues(values);\r\n  for (const key in variables) {\r\n    delete variables[key];\r\n  }\r\n  refetchData();\r\n};\r\n\r\nexport const changeTableLimit = async (fetchFunc, variables) => {\r\n  try {\r\n    return fetchFunc({\r\n      variables: variables,\r\n    });\r\n  } catch (error) {\r\n    console.log(\"couldn't change table limit\", error);\r\n  }\r\n};\r\nexport const banks = [\r\n  { id: \"1\", key: \"Access Bank\", value: \"044\" },\r\n  { id: \"2\", key: \"Citibank\", value: \"023\" },\r\n  { id: \"3\", key: \"Diamond Bank\", value: \"063\" },\r\n  { id: \"4\", key: \"Dynamic Standard Bank\", value: \"\" },\r\n  { id: \"5\", key: \"Ecobank Nigeria\", value: \"050\" },\r\n  { id: \"6\", key: \"Fidelity Bank Nigeria\", value: \"070\" },\r\n  { id: \"7\", key: \"First Bank of Nigeria\", value: \"011\" },\r\n  { id: \"8\", key: \"First City Monument Bank\", value: \"214\" },\r\n  { id: \"9\", key: \"Guaranty Trust Bank\", value: \"058\" },\r\n  { id: \"10\", key: \"Heritage Bank Plc\", value: \"030\" },\r\n  { id: \"11\", key: \"Jaiz Bank\", value: \"301\" },\r\n  { id: \"12\", key: \"Keystone Bank Limited\", value: \"082\" },\r\n  { id: \"13\", key: \"Providus Bank Plc\", value: \"101\" },\r\n  { id: \"14\", key: \"Polaris Bank\", value: \"076\" },\r\n  { id: \"15\", key: \"Stanbic IBTC Bank Nigeria Limited\", value: \"221\" },\r\n  { id: \"16\", key: \"Standard Chartered Bank\", value: \"068\" },\r\n  { id: \"17\", key: \"Sterling Bank\", value: \"232\" },\r\n  { id: \"18\", key: \"Suntrust Bank Nigeria Limited\", value: \"100\" },\r\n  { id: \"19\", key: \"Union Bank of Nigeria\", value: \"032\" },\r\n  { id: \"20\", key: \"United Bank for Africa\", value: \"033\" },\r\n  { id: \"21\", key: \"Unity Bank Plc\", value: \"215\" },\r\n  { id: \"22\", key: \"Wema Bank\", value: \"035\" },\r\n  { id: \"23\", key: \"Zenith Bank\", value: \"057\" },\r\n];\r\nexport const handlePageChange = (fetchDataFN, type, pageInfo, variables) => {\r\n  const getData = (pageNumber) => {\r\n    return fetchDataFN({\r\n      variables: {\r\n        page: pageNumber,\r\n        first: pageInfo?.limit || 10,\r\n        ...variables,\r\n      },\r\n    });\r\n  };\r\n  switch (type) {\r\n    case \"FIRSTPAGE\":\r\n      return getData(1);\r\n\r\n    case \"NEXTPAGE\":\r\n      return getData(pageInfo?.nextPage || 1);\r\n\r\n    case \"PREVPAGE\":\r\n      return getData(pageInfo?.prevPage || 1);\r\n\r\n    case \"LASTPAGE\":\r\n      return getData(pageInfo?.totalPages || 1);\r\n\r\n    default:\r\n      return;\r\n  }\r\n};\r\n\r\nexport const fetchMoreData = async (newPage, fetchData) => {\r\n  fetchData({\r\n    variables: {\r\n      page: newPage,\r\n    },\r\n  });\r\n};\r\n\r\nexport const trucateString = (word, length, startFrom = \"front\") => {\r\n  try {\r\n    const wordArr = word.split(\"\");\r\n    if (startFrom === \"front\") {\r\n      const newWord = `${wordArr.slice(0, length).join(\"\")}...`;\r\n      return newWord;\r\n    }\r\n\r\n    if (startFrom === \"back\") {\r\n      const newWord = `...${wordArr\r\n        .slice(wordArr.length - length, wordArr.length - 1)\r\n        .join(\"\")}`;\r\n      return newWord;\r\n    }\r\n  } catch (error) {\r\n    console.error(\"Error from trucateString FN\", error);\r\n    return word;\r\n  }\r\n};\r\n\r\ntrucateString.PropTypes = {\r\n  word: t.string.isRequired,\r\n  length: t.number.isRequired,\r\n};\r\n\r\nexport const trucateProfileLink = (word) => {\r\n  try {\r\n    const wordArr = word.split(\"\");\r\n    const start = `${wordArr.slice(0, 8).join(\"\")}`;\r\n    const end = `${wordArr\r\n      .slice(wordArr.length - 7, wordArr.length - 1)\r\n      .join(\"\")}`;\r\n    return `${start}...${end}`;\r\n  } catch (error) {\r\n    console.error(\"Error from trucateString FN\", error);\r\n    return word;\r\n  }\r\n};\r\n\r\nexport const compressAndUploadImage = async (\r\n  img,\r\n  uploadFunc,\r\n  setPreview,\r\n  name,\r\n  setFieldValue,\r\n  setProgress,\r\n  isCompressing,\r\n  setIsCompleted\r\n) => {\r\n  try {\r\n    if (!img) throw new Error(\"No file passed to upload function\");\r\n    const uploadRes = await uploadFunc(img, setProgress);\r\n    if (uploadRes === undefined) {\r\n      throw new Error(\"couldn't upload image\");\r\n    }\r\n    if (uploadRes) {\r\n      setFieldValue(name, uploadRes);\r\n      setIsCompleted(\"passed\");\r\n      setTimeout(() => {\r\n        setIsCompleted(null);\r\n      }, 1500);\r\n    }\r\n  } catch (error) {\r\n    console.log(\"Error while trying to upload image\", error);\r\n    setProgress(100);\r\n    setIsCompleted(\"failed\");\r\n    setTimeout(() => {\r\n      setPreview(undefined);\r\n      setIsCompleted(null);\r\n    }, 1500);\r\n  }\r\n};\r\n\r\nexport const uploadImage = async (file, setProgress) => {\r\n  try {\r\n    const form = new FormData();\r\n    form.append(\"file\", file);\r\n    const data = await axios({\r\n      method: \"post\",\r\n      url: \"https://api.heala.io/rest/media/upload/\",\r\n      headers: {\r\n        \"Content-Type\": `multipart/form-data; boundary=${form._boundary}`,\r\n      },\r\n      data: form,\r\n      onUploadProgress: (data) => {\r\n        //Set the progress value to show the progress bar\r\n        setProgress(Math.round((100 * data.loaded) / data.total));\r\n      },\r\n    });\r\n    return data.data.data.mediaUrl; //data.data.mediaUrl\r\n  } catch (error) {\r\n    console.error(error);\r\n    setProgress(100);\r\n  }\r\n};\r\n\r\nexport const uploadFile = async (file) => {\r\n  try {\r\n    const form = new FormData();\r\n    form.append(\"file\", file);\r\n    const data = await axios({\r\n      method: \"post\",\r\n      url: \"https://api.heala.io/rest/media/upload/\",\r\n      headers: {\r\n        \"Content-Type\": `multipart/form-data; boundary=${form._boundary}`,\r\n      },\r\n      data: form,\r\n    });\r\n    return data.data.data.mediaUrl;\r\n  } catch (error) {\r\n    console.error(error);\r\n  }\r\n};\r\n\r\nexport const deleteItem = async (\r\n  deleteMutation,\r\n  id = \"\",\r\n  resetId,\r\n  refresh,\r\n  Typography,\r\n  enqueueSnackbar,\r\n  setIsDeleting,\r\n  isDeleting\r\n) => {\r\n  const newIsDeleting = isDeleting;\r\n\r\n  try {\r\n    newIsDeleting[id] = true;\r\n    setIsDeleting({ ...newIsDeleting });\r\n    const { data } = await deleteMutation({\r\n      variables: {\r\n        id: id,\r\n      },\r\n    });\r\n\r\n    if (!data) {\r\n      resetId(null);\r\n      newIsDeleting[id] = false;\r\n      setIsDeleting({ ...newIsDeleting });\r\n      showErrorMsg(enqueueSnackbar, Typography, \"Couldn't delete, Try again.\");\r\n      return;\r\n    }\r\n\r\n    showSuccessMsg(\r\n      enqueueSnackbar,\r\n      Typography,\r\n      \"Partner deleted successfully.\"\r\n    );\r\n    resetId(null);\r\n    newIsDeleting[id] = false;\r\n    setIsDeleting({ ...newIsDeleting });\r\n    return refresh();\r\n  } catch (error) {\r\n    resetId(null);\r\n    newIsDeleting[id] = false;\r\n    setIsDeleting({ ...newIsDeleting });\r\n    console.log(\"couldn't delete partner from deletePartner FN\", error);\r\n    handleError(error, enqueueSnackbar);\r\n  }\r\n};\r\n\r\nexport const IsImg = (file) => {\r\n  const imgFormatsRegex = new RegExp(\r\n    /(jpeg|png|jpg|webp|jpg|jpeg|jfif|pjpeg|pjp|svg)/\r\n  );\r\n  try {\r\n    const fileArr = file?.name.split(\".\");\r\n    const lastItem = fileArr[fileArr.length - 1];\r\n    if (imgFormatsRegex.test(lastItem)) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.log(\"couldn't check if file is an image\", error);\r\n    return false;\r\n  }\r\n};\r\n\r\nexport const isFile = (file, fileType) => {\r\n  try {\r\n    const fileArr = file?.name.split(\".\");\r\n    const lastItem = fileArr[fileArr.length - 1];\r\n    if (lastItem === fileType) {\r\n      return true;\r\n    } else {\r\n      return false;\r\n    }\r\n  } catch (error) {\r\n    console.log(\"couldn't check file type\", error);\r\n    return false;\r\n  }\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\selectedRows.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\hooks\\useAlert.js",["1183"],"import { useSnackbar } from \"notistack\";\r\nimport { Typography } from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\nconst useAlert = () => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const showErrorMsg = (errorMsg) => {\r\n    return enqueueSnackbar(\r\n      <Typography style={{ fontSize: \"1.2rem\" }}>{`${errorMsg}`}</Typography>,\r\n      {\r\n        variant: \"error\",\r\n        preventDuplicate: true,\r\n        anchorOrigin: {\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n        autoHideDuration: 10000,\r\n      }\r\n    );\r\n  };\r\n\r\n  const showSuccessMsg = (successMsg) => {\r\n    return enqueueSnackbar(\r\n      <Typography style={{ fontSize: \"1.2rem\" }}>{successMsg}</Typography>,\r\n      {\r\n        variant: \"success\",\r\n        preventDuplicate: true,\r\n        anchorOrigin: {\r\n          horizontal: \"right\",\r\n          vertical: \"top\",\r\n        },\r\n        autoHideDuration: 5000,\r\n      }\r\n    );\r\n  };\r\n\r\n  const getErrorMsg = (error) => {\r\n    try {\r\n      if (error?.graphQLErrors && error?.graphQLErrors?.length > 0) {\r\n        const errMsgs = (error?.graphQLErrors || []).map((err) => err.message);\r\n        return errMsgs || \"Something went wrong. Try again!!!\";\r\n      } else if (error?.networkError) {\r\n        const errMsgs = error?.networkError?.result?.errors?.map(\r\n          (err) => err.message\r\n        );\r\n        return errMsgs || \"Something went wrong. Try again!!!\";\r\n      } else if (error?.message) {\r\n        return error.message;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"error from get error func.\", error);\r\n      return \"Something went wrong. Try again!!!\";\r\n    }\r\n  };\r\n\r\n  const displayAlert = (type, message) => {\r\n    switch (type) {\r\n      case \"success\":\r\n        return showSuccessMsg(message);\r\n\r\n      case \"error\":\r\n        if (typeof message === \"object\") {\r\n          return (message || []).map((msg) => showErrorMsg(msg));\r\n        } else {\r\n          return showErrorMsg(message);\r\n        }\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const watchFunction = (successMsg, errorMsg, promise) =>\r\n    promise\r\n      .then((data) => {\r\n        if (!data) {\r\n          displayAlert(\"error\", \"Something went wrong, try again.\");\r\n          throw Error(\"Something went wrong in watchFunction\");\r\n        }\r\n        displayAlert(\"success\", successMsg);\r\n        return data;\r\n      })\r\n      .catch((error) => {\r\n        const msg = getErrorMsg(error);\r\n        displayAlert(\"error\", msg || errorMsg);\r\n        throw error;\r\n      });\r\n\r\n  return { displayAlert, watchFunction, getErrorMsg };\r\n};\r\nexport default useAlert;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\EnhancedTableToolbar.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\EnhancedTableHeader.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-types\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\IllnessModal.js",["1184"],"import React from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport PropTypes from \"prop-types\";\r\nimport { illnessSchema } from \"helpers/validationSchemas\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { getIllnesses } from \"components/graphQL/useQuery\";\r\nimport { CustomButton, Modals } from \"components/Utilities\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { createIllness, updateIllness } from \"components/graphQL/Mutation\";\r\nimport { useMutation } from \"@apollo/client\";\r\nconst IllnessModal = ({\r\n  open,\r\n  type,\r\n  handleClose,\r\n\r\n  initialValues,\r\n}) => {\r\n  const { displayAlert } = useAlert();\r\n  const theme = useTheme();\r\n  const [create] = useMutation(createIllness);\r\n  const [update] = useMutation(updateIllness);\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const onSubmit = async (values) => {\r\n    const { name, description, id } = values;\r\n\r\n    try {\r\n      if (type === \"add\") {\r\n        await create({\r\n          variables: {\r\n            name,\r\n            description,\r\n          },\r\n          refetchQueries: [{ query: getIllnesses }],\r\n        });\r\n        displayAlert(\"success\", \"Illness successfully created\");\r\n      }\r\n\r\n      if (type === \"edit\") {\r\n        await update({\r\n          variables: {\r\n            id,\r\n            name,\r\n            description,\r\n          },\r\n          refetchQueries: [{ query: getIllnesses }],\r\n        });\r\n        displayAlert(\"success\", \"Illness successfully updated\");\r\n      }\r\n    } catch (err) {\r\n      displayAlert(\"error\", err);\r\n    }\r\n    handleClose();\r\n  };\r\n\r\n  return (\r\n    <Modals\r\n      isOpen={open}\r\n      title={type === \"add\" ? \"Add Illness\" : \"Update Illness\"}\r\n      rowSpacing={5}\r\n      width={{ sm: \"40vw\", xs: \"90vw\", md: \"40vw\" }}\r\n      handleClose={handleClose}\r\n    >\r\n      <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={onSubmit}\r\n        validateOnBlur={false}\r\n        validationSchema={illnessSchema}\r\n        validateOnChange={false}\r\n        validateOnMount={false}\r\n        enableReinitialize\r\n      >\r\n        {({ isSubmitting, isValid, dirty, errors }) => {\r\n          console.log(errors);\r\n          return (\r\n            <Form style={{ marginTop: \"3rem\" }}>\r\n              <Grid item container direction=\"column\" gap={3}>\r\n                <Grid item container>\r\n                  <FormikControl\r\n                    control=\"input\"\r\n                    name=\"name\"\r\n                    label=\"Name\"\r\n                    placeholder=\"Select name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item container>\r\n                  <FormikControl\r\n                    control=\"textarea\"\r\n                    name=\"description\"\r\n                    label=\"Description\"\r\n                    placeholder=\"Description...\"\r\n                  />\r\n                </Grid>\r\n                <Grid item container>\r\n                  <CustomButton\r\n                    title={type === \"add\" ? \"Add Illness\" : \"Update Illness\"}\r\n                    width=\"100%\"\r\n                    type={buttonType}\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </Modals>\r\n  );\r\n};\r\n\r\nIllnessModal.propTypes = {\r\n  initialValues: PropTypes.object,\r\n  validationSchema: PropTypes.object,\r\n  handleClose: PropTypes.func,\r\n  open: PropTypes.bool,\r\n  type: PropTypes.string,\r\n};\r\nexport default IllnessModal;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\Filters\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\ProfileInfo.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\hospitalPageStyles.js",["1185"],"import { makeStyles } from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles((theme) => ({\r\n  viewBtn: {\r\n    \"&.MuiButton-root\": {\r\n      backgroundColor: \"#F8F8F8\",\r\n      color: \"#3E5EA9\",\r\n      fontSize: \"11px\",\r\n      borderRadius: \"8px\",\r\n      textTransform: \"none\",\r\n      padding: \"8px 15px\",\r\n      margin: 0,\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n      textAlign: \"left\",\r\n      padding: \"16px\",\r\n    },\r\n  },\r\n}));\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Time.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Buttons\\EditDelBtn.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Calendar.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\FormikControl.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Select.js",["1186"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\r\nimport { FormControl, FormLabel, Select, MenuItem, Grid } from \"@mui/material\";\r\n\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { TextError } from \"components/Utilities/TextError\";\r\nimport { CloseBtn } from \"components/Buttons/CloseBtn\";\r\nimport ChervonDownIcon from \"components/Icons/ChervonDownIcon\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  FormLabel: {\r\n    \"&.MuiFormLabel-root\": {\r\n      ...theme.typography.FormLabel,\r\n    },\r\n  },\r\n  select: {\r\n    \"&.MuiOutlinedInput-root\": {\r\n      fontWeight: \"200 !important\",\r\n      color: `${theme.palette.common.grey} !important`,\r\n      backgroundColor: \"#FAFAFA\",\r\n      height: ({ height }) => `${height}`,\r\n      fontSize: \"14px !important\",\r\n      borderRadius: \"12px\",\r\n      border: \"1px solid #E0E0E0 !important\",\r\n\r\n      \"&:disabled\": {\r\n        backgroundColor: \"#E0E0E0 !important\",\r\n      },\r\n\r\n      \"&>fieldset\": {\r\n        border: 0,\r\n      },\r\n    },\r\n\r\n    \"&.MuiTypography-root\": {\r\n      fontWeight: \"200 !important\",\r\n      color: `${theme.palette.common.grey} !important`,\r\n      minHeight: 50,\r\n      fontSize: \"14px !important\",\r\n      borderRadius: \"12px\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport const Formiks = ({\r\n  value,\r\n  name,\r\n  onChange,\r\n  onBlur,\r\n  children,\r\n  variant = \"small\",\r\n}) => {\r\n  const height = variant === \"small\" ? \"40px\" : \"60px\";\r\n  const props = {\r\n    height: height,\r\n  };\r\n  const classes = useStyles(props);\r\n  return (\r\n    <FormControl fullWidth>\r\n      <Select\r\n        name={name}\r\n        displayEmpty\r\n        onBlur={onBlur}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={classes.select}\r\n        IconComponent={() => (\r\n          <KeyboardArrowDownIcon\r\n            fontSize=\"large\"\r\n            sx={{ marginRight: \"1rem\" }}\r\n          />\r\n        )}\r\n      >\r\n        {children}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nFormiks.propTypes = {\r\n  value: PropTypes.string,\r\n  label: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  children: PropTypes.node,\r\n  name: PropTypes.string,\r\n  onBlur: PropTypes.func,\r\n  variant: PropTypes.oneOf([\"small\", \"medium\"]),\r\n};\r\n\r\nexport const FromikSelect = ({\r\n  value,\r\n  name,\r\n  onChange,\r\n  onBlur,\r\n  children,\r\n  variant = \"medium\",\r\n}) => {\r\n  const height = variant === \"small\" ? \"40px\" : \"60px\";\r\n  const props = {\r\n    height: height,\r\n  };\r\n  const classes = useStyles(props);\r\n  return (\r\n    <FormControl fullWidth>\r\n      <Select\r\n        name={name}\r\n        displayEmpty\r\n        onBlur={onBlur}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={classes.select}\r\n        IconComponent={() => (\r\n          <KeyboardArrowDownIcon\r\n            fontSize=\"large\"\r\n            sx={{ marginRight: \"1rem\" }}\r\n          />\r\n        )}\r\n      >\r\n        {children}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nFromikSelect.propTypes = {\r\n  value: PropTypes.string,\r\n  label: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  children: PropTypes.node,\r\n  name: PropTypes.string,\r\n  onBlur: PropTypes.func,\r\n  variant: PropTypes.oneOf([\"small\", \"medium\"]),\r\n};\r\n\r\nconst Selects = (props) => {\r\n  const { name, label, options, placeholder } = props;\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container direction=\"column\" gap={1}>\r\n      <FormLabel className={classes.FormLabel}>{label}</FormLabel>\r\n      <Field name={name} as={FromikSelect} label={label}>\r\n        <MenuItem value=\"\">\r\n          <Typography>{placeholder}</Typography>\r\n        </MenuItem>\r\n        {options.map((option) => (\r\n          <MenuItem key={option.key} value={option.value}>\r\n            {option.key}\r\n          </MenuItem>\r\n        ))}\r\n      </Field>\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nSelects.propTypes = {\r\n  label: PropTypes.string,\r\n  name: PropTypes.string,\r\n  options: PropTypes.array,\r\n  placeholder: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport const CustomSelect = (props) => {\r\n  const {\r\n    value,\r\n    options,\r\n    name,\r\n    onChange,\r\n    onBlur,\r\n    placeholder,\r\n    label,\r\n    onClickClearBtn,\r\n    hasClearBtn,\r\n    disabled = false,\r\n    defaultValue,\r\n    variant = \"small\",\r\n  } = props;\r\n\r\n  const height = variant === \"small\" ? \"48px\" : \"60px\";\r\n  const styleProps = {\r\n    height: height,\r\n  };\r\n  const classes = useStyles(styleProps);\r\n  return (\r\n    <Grid container direction=\"column\">\r\n      {label && <FormLabel className={classes.FormLabel}>{label}</FormLabel>}\r\n      <Grid item container direction=\"column\" sx={{ position: \"relative\" }}>\r\n        {hasClearBtn && value !== \"\" ? (\r\n          <Grid\r\n            sx={{\r\n              position: \"absolute\",\r\n              top: \"-10px\",\r\n              right: \"-10px\",\r\n              zIndex: \"5\",\r\n            }}\r\n          >\r\n            <CloseBtn onHandleClick={() => onClickClearBtn()} />\r\n          </Grid>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n        <FormControl fullWidth>\r\n          <Select\r\n            name={name}\r\n            displayEmpty\r\n            onBlur={onBlur}\r\n            disabled={disabled}\r\n            value={value}\r\n            onChange={onChange}\r\n            className={classes.select}\r\n            defaultValue={defaultValue}\r\n            IconComponent={() => (\r\n              <ChervonDownIcon\r\n                sx={{ color: \"transparent\", marginRight: \"0.8rem\" }}\r\n              />\r\n            )}\r\n          >\r\n            <MenuItem value=\"\">\r\n              <Typography>{placeholder}</Typography>\r\n            </MenuItem>\r\n            {options.map((option) => (\r\n              <MenuItem key={option.key} value={option.value}>\r\n                {option.key}\r\n              </MenuItem>\r\n            ))}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nCustomSelect.propTypes = {\r\n  value: PropTypes.string,\r\n  options: PropTypes.string,\r\n  label: PropTypes.string,\r\n  name: PropTypes.func,\r\n  children: PropTypes.node,\r\n  placeholder: PropTypes.string,\r\n  defaultValue: PropTypes.string,\r\n  onBlur: PropTypes.func,\r\n  onChange: PropTypes.func,\r\n  onClickClearBtn: PropTypes.func,\r\n  hasClearBtn: PropTypes.bool,\r\n  variant: PropTypes.oneOf([\"small\", \"medium\"]),\r\n};\r\n\r\nexport default Selects;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Input.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Checkboxs.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Tables\\HMOPlansTable.js",["1187","1188","1189","1190","1191","1192","1193","1194","1195","1196","1197","1198","1199","1200","1201","1202"],"import React, { useEffect, useState } from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { EmptyTable } from \"components/layouts\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { useStyles } from \"styles/hmoPageStyles\";\r\nimport MainModal from \"components/modals/MainModal\";\r\nimport { DeleteOrDisable } from \"components/modals\";\r\nimport { getPlans } from \"components/graphQL/useQuery\";\r\nimport { HMOPlanRow } from \"components/Rows/HMOPlanRow\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { DELETE_PLAN } from \"components/graphQL/Mutation\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { getDynamicSearchPlaceholder } from \"helpers/func\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport EnhancedTable from \"components/layouts/EnhancedTable\";\r\nimport { hmoPlansTableHeader } from \"components/Utilities/tableHeaders\";\r\nimport {\r\n  defaultPageInfo,\r\n  plansSearchFilterOptions,\r\n  plansSearchOptions,\r\n} from \"../../helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport CreateEditHMOPlans from \"components/Forms/CreateEditHMOPlans\";\r\n\r\nconst HMOPlansTable = ({ PlansQuery }) => {\r\n  /* const theme = useTheme(); */\r\n  const classes = useStyles();\r\n  const [id, setId] = useState(null);\r\n  const { watchFunction } = useAlert();\r\n  const [plans, setPlans] = useState([]);\r\n  const [deletePlan] = useMutation(DELETE_PLAN);\r\n  const [editModal, setEditModal] = useState(false);\r\n  const [editPlanData, setEditPlanData] = useState(\"\");\r\n  const [deleteModal, setdeleteModal] = useState(false);\r\n  const [isDeleting, setIsDeleting] = React.useState({});\r\n  const { fetchPlans, loading, data, refetch, variables, newVariables } =\r\n    PlansQuery;\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n\r\n  useEffect(() => {\r\n    fetchPlans({\r\n      variables: {\r\n        first: pageInfo?.limit,\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchPlans, pageInfo]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setPlans(data.getPlans.plan);\r\n      setPageInfo(data.getPlans.pageInfo);\r\n      (data.getPlans.plan || []).map((plan) => {\r\n        const newIsDeleting = isDeleting;\r\n        setIsDeleting({ [plan._id]: false, ...newIsDeleting });\r\n        return null;\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [data]);\r\n\r\n  // delete plan\r\n  const onConfirmDelPlan = async () => {\r\n    const newIsDeleting = isDeleting;\r\n    const stopDeleting = () => {\r\n      setId(null);\r\n      newIsDeleting[id] = false;\r\n      setIsDeleting({ ...newIsDeleting });\r\n    };\r\n    try {\r\n      newIsDeleting[id] = true;\r\n      setIsDeleting({ ...newIsDeleting });\r\n      const deletePlanRes = deletePlan({\r\n        variables: { id },\r\n        refetchQueries: [{ query: getPlans }],\r\n      });\r\n\r\n      watchFunction(\r\n        \"Plan deleted succesfully\",\r\n        \"Couldn't delete plan.\",\r\n        deletePlanRes\r\n      ).then(() => {\r\n        refetch();\r\n        stopDeleting();\r\n      });\r\n    } catch (error) {\r\n      stopDeleting();\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n        <Grid\r\n          item\r\n          container\r\n          spacing={2}\r\n          className={classes.searchFilterContainer}\r\n        >\r\n          <Grid item container flexWrap=\"wrap\" spacing={4}></Grid>\r\n        </Grid>\r\n        <TableLayout\r\n          search={\r\n            <CompoundSearch\r\n              queryParams={{\r\n                fetchData: fetchPlans,\r\n                variables,\r\n                loading,\r\n                newVariables: newVariables,\r\n              }}\r\n              searchState={{\r\n                value: \"\",\r\n                filterBy: \"name\",\r\n              }}\r\n              setPageInfo={(data) => null}\r\n              setProfiles={(data) => null}\r\n              getSearchPlaceholder={(filterBy) =>\r\n                getDynamicSearchPlaceholder(filterBy, plansSearchFilterOptions)\r\n              }\r\n              filterOptions={plansSearchOptions}\r\n            />\r\n          }\r\n        >\r\n          {loading ? (\r\n            <Loader />\r\n          ) : plans.length > 0 ? (\r\n            /* ================= HMO TABLE ================= */\r\n            <Grid\r\n              container\r\n              item\r\n              direction=\"column\"\r\n              overflow=\"hidden\"\r\n              maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n            >\r\n              <EnhancedTable\r\n                headCells={hmoPlansTableHeader}\r\n                rows={plans}\r\n                paginationLabel=\"subscription per page\"\r\n                hasCheckbox={true}\r\n                changeLimit={async (e) => {\r\n                  await changeTableLimit(fetchPlans, { first: e });\r\n                }}\r\n                dataPageInfo={pageInfo}\r\n                handlePagination={async (page) => {\r\n                  await handlePageChange(fetchPlans, page, pageInfo, {});\r\n                }}\r\n              >\r\n                {plans.map((row, index) => {\r\n                  const isItemSelected = isSelected(row?._id, selectedRows);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  const { _id, name, amount, description } = row;\r\n                  const editFormValues = {\r\n                    id: _id,\r\n                    name,\r\n                    amount,\r\n                    description,\r\n                    accessType: \"\",\r\n                  };\r\n                  return (\r\n                    <HMOPlanRow\r\n                      key={`${_id}-${index}`}\r\n                      plan={row}\r\n                      isItemSelected={isItemSelected}\r\n                      handleSelectedRows={handleSelectedRows}\r\n                      selectedRows={selectedRows}\r\n                      setSelectedRows={setSelectedRows}\r\n                      labelId={labelId}\r\n                      handleDeleteOpenDialog={() => {\r\n                        setId(row?._id);\r\n                        setdeleteModal(true);\r\n                      }}\r\n                      handleEditOpenDialog={() => {\r\n                        setEditPlanData(editFormValues);\r\n                        setEditModal(true);\r\n                      }}\r\n                      deleting={isDeleting[row._id]}\r\n                    />\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={hmoPlansTableHeader}\r\n              paginationLabel=\"Users per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </Grid>\r\n      <Grid>\r\n        {/* EDIT PLAN MODAL */}\r\n        <MainModal\r\n          isOpen={editModal}\r\n          headerText=\"Edit plan\"\r\n          rowSpacing={5}\r\n          setIsOpen={() => setEditModal(false)}\r\n        >\r\n          <CreateEditHMOPlans\r\n            initialValues={editPlanData}\r\n            type=\"edit\"\r\n            onSuccess={() => {\r\n              setEditModal(false);\r\n              refetch();\r\n            }}\r\n          />\r\n        </MainModal>\r\n\r\n        {/* DELETE PLAN MODAL */}\r\n        <DeleteOrDisable\r\n          open={deleteModal}\r\n          setOpen={setdeleteModal}\r\n          title=\"Delete Plan\"\r\n          onConfirm={onConfirmDelPlan}\r\n          confirmationMsg=\"delete plan\"\r\n          btnValue=\"Delete\"\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HMOPlansTable;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\DateTimePicker.js",["1203"],"import React from \"react\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport { TextError } from \"components/Utilities/TextError\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid } from \"@mui/material\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\r\nimport DesktopDateTimePicker from \"@mui/lab/DesktopDateTimePicker\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  FormLabel: {\r\n    \"&.MuiFormLabel-root\": {\r\n      ...theme.typography.FormLabel,\r\n    },\r\n  },\r\n}));\r\n\r\nconst Dates = ({ name, value, setFieldValue, onBlur }) => {\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <DesktopDateTimePicker\r\n        name={name}\r\n        onChange={(value) => setFieldValue(name, value)}\r\n        value={value}\r\n        onBlur={onBlur}\r\n        onError={(err) => console.log(err)}\r\n        renderInput={(params) => (\r\n          <TextField {...params} sx={{ padding: \"-12px\" }} />\r\n        )}\r\n      />\r\n    </LocalizationProvider>\r\n  );\r\n};\r\n\r\nDates.propTypes = {\r\n  value: PropTypes.string,\r\n  label: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  setFieldValue: PropTypes.func,\r\n  children: PropTypes.node,\r\n  name: PropTypes.string,\r\n  onBlur: PropTypes.func,\r\n};\r\n\r\nconst DateTimePicker = (props) => {\r\n  const { name, label, ...rest } = props;\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container direction=\"column\" gap={1}>\r\n      <FormLabel className={classes.FormLabel}>{label}</FormLabel>\r\n      <Field name={name} as={Dates} label={label} {...rest} />\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nDateTimePicker.propTypes = {\r\n  label: PropTypes.string,\r\n  name: PropTypes.string,\r\n  options: PropTypes.array,\r\n  placeholder: PropTypes.string,\r\n};\r\n\r\nexport default DateTimePicker;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\File.js",["1204"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport { TextError } from \"components/Utilities/TextError\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Grid,\r\n  Avatar,\r\n  Button,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport { Loader } from \"components/Utilities\";\r\nimport { RequiredIcon } from \"components/Typography\";\r\nimport {\r\n  compressAndUploadImage,\r\n  showErrorMsg,\r\n  showSuccessMsg,\r\n  uploadImage,\r\n} from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  FormLabel: {\r\n    \"&.MuiFormLabel-root\": {\r\n      ...theme.typography.FormLabel,\r\n    },\r\n  },\r\n\r\n  uploadBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      background: \"#f2f2f2\",\r\n      boxShadow: \"none\",\r\n      borderRadius: \"5px\",\r\n      fontSize: \"1.4rem\",\r\n      color: theme.palette.common.black,\r\n\r\n      \"&:hover\": {\r\n        background: \"#f2f3f3\",\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nexport const Formiks = ({ name, setFieldValue, onBlur, value }) => {\r\n  const fileRef = useRef(null);\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [preview, setPreview] = useState(\"\");\r\n  const [isCompleted, setIsCompleted] = React.useState(null);\r\n  const [progress, setProgress] = useState();\r\n  const [isCompressing, setIsCompressing] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    if (value) {\r\n      setPreview(value);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    isCompleted === \"passed\" &&\r\n      showSuccessMsg(enqueueSnackbar, Typography, \"Image upload complete.\");\r\n    if (isCompleted === \"failed\") {\r\n      showErrorMsg(enqueueSnackbar, \"Image upload failed, Try again.\");\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isCompleted]);\r\n\r\n  const onChange = async (e) => {\r\n    const file = e.target.files[0];\r\n    setProgress(1);\r\n    compressAndUploadImage(\r\n      file,\r\n      uploadImage,\r\n      setPreview,\r\n      name,\r\n      setFieldValue,\r\n      setProgress,\r\n      setIsCompressing,\r\n      setIsCompleted\r\n    );\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onloadend = (e) => setPreview(reader.result);\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={2} alignItems=\"center\">\r\n      {progress < 100 || isCompressing ? (\r\n        <Grid\r\n          container\r\n          item\r\n          direction=\"row\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Typography display={\"inline\"}>\r\n            {isCompressing ? \"Compressing image\" : \"Uploading image\"}\r\n          </Typography>\r\n          <Loader />\r\n        </Grid>\r\n      ) : (\r\n        <>\r\n          <Grid item>\r\n            <FormControl fullWidth>\r\n              <Grid item container>\r\n                <input\r\n                  accept=\"image/*\"\r\n                  onChange={onChange}\r\n                  type=\"file\"\r\n                  name={name}\r\n                  onBlur={onBlur}\r\n                  hidden\r\n                  ref={fileRef}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  onClick={() => fileRef.current.click()}\r\n                  component=\"span\"\r\n                  className={classes.uploadBtn}\r\n                >\r\n                  Upload Photo\r\n                </Button>\r\n              </Grid>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item>\r\n            {preview && isCompleted !== \"failed\" ? (\r\n              <Avatar sx={{ backgroundColor: \"#eaeaea\" }} src={preview} />\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nFormiks.propTypes = {\r\n  value: PropTypes.string,\r\n  label: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  children: PropTypes.node.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onBlur: PropTypes.func,\r\n  setFieldValue: PropTypes.func,\r\n};\r\n\r\nconst Files = (props) => {\r\n  const { name, label, isRequired, ...rest } = props;\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container direction=\"column\" gap={1}>\r\n      <FormLabel className={classes.FormLabel}>\r\n        {label} {isRequired && <RequiredIcon />}\r\n      </FormLabel>\r\n      <Field name={name} as={Formiks} label={label} {...rest} />\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nFiles.propTypes = {\r\n  label: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n  options: PropTypes.array.isRequired,\r\n  placeholder: PropTypes.string,\r\n  isRequired: PropTypes.bool,\r\n};\r\n\r\nexport default Files;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Textarea.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Date.js",["1205","1206","1207"],"import React from \"react\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport { TextError } from \"components/Utilities/TextError\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid } from \"@mui/material\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\r\nimport DesktopDatePicker from \"@mui/lab/DesktopDatePicker\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  FormLabel: {\r\n    \"&.MuiFormLabel-root\": {\r\n      ...theme.typography.FormLabel,\r\n    },\r\n  },\r\n\r\n  dateInput: {\r\n    \"&>.MuiOutlinedInput-root\": {\r\n      border: \"none\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Dates = ({ name, value, setFieldValue, onBlur, startDate, endDate }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <DesktopDatePicker\r\n        className={classes.dateInput}\r\n        name={name}\r\n        onChange={(value) => setFieldValue(name, value)}\r\n        value={value}\r\n        onBlur={onBlur}\r\n        minDate={startDate}\r\n        maxDate={endDate}\r\n        onError={(err) => console.log(err)}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            sx={{\r\n              padding: \"-12px\",\r\n              border: \"2px solid #E0E0E0\",\r\n              borderRadius: \"12px\",\r\n            }}\r\n          />\r\n        )}\r\n      />\r\n    </LocalizationProvider>\r\n  );\r\n};\r\n\r\nDates.propTypes = {\r\n  value: PropTypes.string,\r\n  label: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  setFieldValue: PropTypes.func,\r\n  children: PropTypes.node,\r\n  name: PropTypes.string,\r\n  onBlur: PropTypes.func,\r\n};\r\n\r\nconst DateComponent = (props) => {\r\n  const { name, label, ...rest } = props;\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container direction=\"column\" gap={1}>\r\n      <FormLabel className={classes.FormLabel}>{label}</FormLabel>\r\n      <Field name={name} as={Dates} label={label} {...rest} />\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nDateComponent.propTypes = {\r\n  label: PropTypes.string,\r\n  name: PropTypes.string,\r\n  options: PropTypes.array,\r\n  placeholder: PropTypes.string,\r\n};\r\n\r\nexport default DateComponent;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\TextError.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Buttons\\CloseBtn.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\ChervonDownIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\HMOPlanRow.js",["1208","1209","1210","1211","1212","1213","1214","1215","1216","1217","1218","1219","1220","1221"],"import React from \"react\";\r\nimport { useTheme } from \"@mui/styles\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { EditDelBtn } from \"components/Buttons/EditDelBtn\";\r\nimport { Checkbox, TableCell, TableRow } from \"@mui/material\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  FormLabel: {\r\n    \"&.MuiFormLabel-root\": {\r\n      ...theme.typography.FormLabel,\r\n    },\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"15rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n  btn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  closeIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      fontSize: \"2rem \",\r\n      cursor: \"pointer\",\r\n\r\n      \"&:hover\": {\r\n        color: theme.palette.common.red,\r\n      },\r\n    },\r\n  },\r\n  tableBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      height: \"3rem\",\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"2rem\",\r\n      boxShadow: \"none\",\r\n      width: \"12rem\",\r\n\r\n      \"&:hover\": {\r\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.5rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  redBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightRed,\r\n      color: theme.palette.common.red,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.error.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n\r\n  greenBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.success.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n    modal: {\r\n      background: \"red !important\",\r\n      \"& > * \": {\r\n        padding: \"2rem 1rem\",\r\n      },\r\n    },\r\n    \".MuiGrid-root\": {\r\n      background: \"red\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport const HMOPlanRow = ({\r\n  plan,\r\n  isItemSelected,\r\n  handleSelectedRows,\r\n  selectedRows,\r\n  setSelectedRows,\r\n  labelId,\r\n  handleDeleteOpenDialog,\r\n  handleEditOpenDialog,\r\n  deleting,\r\n}) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { _id, name, duration, description } = plan;\r\n  return (\r\n    <TableRow\r\n      hover\r\n      role=\"checkbox\"\r\n      aria-checked={isItemSelected}\r\n      tabIndex={-1}\r\n      key={_id}\r\n      selected={isItemSelected}\r\n      sx={{ cursor: \"pointer\" }}\r\n      onClick={() => handleEditOpenDialog()}\r\n    >\r\n      <TableCell padding=\"checkbox\">\r\n        <Checkbox\r\n          onClick={() => handleSelectedRows(_id, selectedRows, setSelectedRows)}\r\n          color=\"primary\"\r\n          checked={isItemSelected}\r\n          inputProps={{\r\n            \"aria-labelledby\": labelId,\r\n          }}\r\n        />\r\n      </TableCell>\r\n      <TableCell\r\n        id={labelId}\r\n        scope=\"row\"\r\n        align=\"left\"\r\n        className={classes.tableCell}\r\n        style={{ color: theme.palette.common.black }}\r\n      >\r\n        {name}\r\n      </TableCell>\r\n\r\n      <TableCell\r\n        align=\"left\"\r\n        className={classes.tableCell}\r\n        style={{\r\n          color: theme.palette.common.black,\r\n          maxWidth: \"20rem\",\r\n        }}\r\n      >\r\n        {description}\r\n      </TableCell>\r\n      <TableCell\r\n        align=\"left\"\r\n        className={classes.tableCell}\r\n        style={{\r\n          color: theme.palette.common.black,\r\n          maxWidth: \"20rem\",\r\n        }}\r\n      >\r\n        {duration}\r\n      </TableCell>\r\n\r\n      <TableCell align=\"left\" className={classes.tableCell}>\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-around\",\r\n          }}\r\n        >\r\n          {/* <div style={{ marginRight: \"1rem\" }}>\r\n            <EditDelBtn\r\n              type=\"edit\"\r\n              text=\"Edit plan\"\r\n              onHandleClick={() => handleEditOpenDialog()}\r\n            />\r\n          </div> */}\r\n          {deleting ? (\r\n            <Loader />\r\n          ) : (\r\n            <EditDelBtn\r\n              type=\"delete\"\r\n              text=\"Delete plan\"\r\n              onHandleClick={() => handleDeleteOpenDialog()}\r\n            />\r\n          )}\r\n        </div>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Typography.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\EditIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\deleteIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\Filter.js",["1222"],"import React from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport CustomButton from \"components/Utilities/CustomButton\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\nconst Filter = (props) => {\r\n  const checkbox2 = [\r\n    { key: \"create\", value: \"create\" },\r\n    { key: \"update\", value: \"update\" },\r\n    { key: \"read\", value: \"read\" },\r\n    { key: \"delete\", value: \"delete\" },\r\n  ];\r\n  const checkbox5 = [\r\n    { key: \"create\", value: \"create\" },\r\n    { key: \"update\", value: \"update\" },\r\n    { key: \"read\", value: \"read\" },\r\n    { key: \"delete\", value: \"delete\" },\r\n  ];\r\n  const checkbox4 = [\r\n    { key: \"create\", value: \"create\" },\r\n    { key: \"update\", value: \"update\" },\r\n    { key: \"read\", value: \"read\" },\r\n    { key: \"delete\", value: \"delete\" },\r\n  ];\r\n  const { options, validationSchema, initialValues, type } = props;\r\n\r\n  const theme = useTheme();\r\n  const onSubmit = (values, onSubmitProps) => {\r\n    onSubmitProps.setSubmitting(false);\r\n    console.log(values);\r\n    onSubmitProps.resetForm();\r\n  };\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validateOnBlur={false}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n    >\r\n      {({ isSubmitting, dirty, isValid }) => {\r\n        return (\r\n          <Form style={{ marginTop: \"3rem\" }}>\r\n            <Grid container direction=\"column\" gap={3} marginBottom={4}>\r\n              <Grid item container spacing={2}>\r\n                <Grid item xs={6}>\r\n                  <FormikControl\r\n                    control=\"select\"\r\n                    options={options}\r\n                    name={type === \"hcp\" ? \"Name\" : \"Enter Value\"}\r\n                    placeholder=\"Select Name\"\r\n                    label=\"Name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <FormikControl\r\n                    control=\"select\"\r\n                    options={checkbox2}\r\n                    name={type === \"hcp\" ? \"Date\" : \"Enter Value\"}\r\n                    placeholder=\"Choose Date\"\r\n                    label={type === \"hcp\" ? \"Choose Date\" : \"Enter Value\"}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid item container spacing={2}>\r\n                <Grid item xs={6}>\r\n                  <FormikControl\r\n                    control=\"select\"\r\n                    placeholder=\"Select Status\"\r\n                    name=\"Status\"\r\n                    label={type === \"hcp\" ? \"Select Status\" : \"Enter Value\"}\r\n                    options={checkbox4}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <FormikControl\r\n                    control=\"select\"\r\n                    placeholder=\"Select Category\"\r\n                    name={type === \"hcp\" ? \"Specialization\" : \"Enter Value\"}\r\n                    label={type === \"hcp\" ? \"Select Category\" : \"Enter Value\"}\r\n                    options={checkbox5}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs={12} marginTop={24}>\r\n                <CustomButton\r\n                  title={type === \"hcp\" ? \"Save changes\" : \"Add Permission\"}\r\n                  width=\"100%\"\r\n                  type={buttonType}\r\n                  isSubmitting={isSubmitting}\r\n                  disabled={!(dirty || isValid)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  label: PropTypes.string,\r\n  type: PropTypes.string,\r\n  name: PropTypes.string,\r\n  options: PropTypes.array,\r\n  initialValues: PropTypes.object,\r\n  validationSchema: PropTypes.object,\r\n};\r\nexport default Filter;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\ProviderModal.js",["1223"],"import React, { useEffect, useState } from \"react\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport * as Yup from \"yup\";\r\nimport { Grid } from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\nimport { addProvider, editprovider } from \"components/graphQL/Mutation\";\r\nimport {\r\n  getProviders,\r\n  getCategory,\r\n  getUserTypes,\r\n} from \"components/graphQL/useQuery\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\nconst ProviderModal = ({\r\n  handleDialogClose,\r\n  type,\r\n  setSingleData,\r\n  initialValues,\r\n  editId,\r\n  singleData,\r\n}) => {\r\n  const theme = useTheme();\r\n  const [createProvider] = useMutation(addProvider);\r\n  const [editProvider] = useMutation(editprovider);\r\n\r\n  const single = useQuery(getCategory, {\r\n    variables: {\r\n      id: editId,\r\n    },\r\n  });\r\n  const [dropDown, setDropDown] = useState([]);\r\n  const userType = useQuery(getUserTypes);\r\n  useEffect(() => {\r\n    if (userType.data) {\r\n      const data = userType.data.getUserTypes.userType;\r\n      setDropDown(\r\n        data &&\r\n          data.map((i) => {\r\n            return { key: i.name, value: i._id, id: i._id };\r\n          })\r\n      );\r\n    }\r\n  }, [userType.data]);\r\n\r\n  useEffect(() => {\r\n    if (single.data) {\r\n      setSingleData({\r\n        name: single.data.getProvider.name,\r\n        type: single.data.getProvider.userTypeId,\r\n        image: single.data.getProvider.icon,\r\n        id: single.data.getProvider._id,\r\n        iconAlt: single.data.getProvider.iconAlt,\r\n      });\r\n    }\r\n  }, [single.data, setSingleData]);\r\n\r\n  const validationSchema = Yup.object({\r\n    name: Yup.string(\"Enter your Name\").trim().required(\"Name is required\"),\r\n    type: Yup.string(\"Select your type\").required(\"Type is required\"),\r\n    image: Yup.string(\"Upload a single Image\").required(\"Image is required\"),\r\n    iconAlt: Yup.string(\"Upload an alternate Image\").required(\r\n      \"Alt. image is required\"\r\n    ),\r\n  });\r\n\r\n  // const checkbox1 = [{ key: \"61ca1a53cebadf0584e38723\", value: \"61ca1a53cebadf0584e38723\" }];\r\n  const onSubmit = async (values, onSubmitProps) => {\r\n    console.log(values);\r\n    if (type === \"add\") {\r\n      const { name, type, image, iconAlt } = values;\r\n      await createProvider({\r\n        variables: {\r\n          name,\r\n          icon: image,\r\n          iconAlt,\r\n          userTypeId: type,\r\n        },\r\n        refetchQueries: [{ query: getProviders }],\r\n      });\r\n    }\r\n    if (type === \"edit\") {\r\n      const { name, type, image, id, iconAlt } = values;\r\n      await editProvider({\r\n        variables: {\r\n          id,\r\n          name,\r\n          icon: image,\r\n          iconAlt,\r\n          userTypeId: type,\r\n        },\r\n        refetchQueries: [{ query: getProviders }],\r\n      });\r\n    }\r\n    onSubmitProps.resetForm();\r\n    handleDialogClose();\r\n  };\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      onSubmit={onSubmit}\r\n      validateOnBlur={false}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n      initialValues={type === \"edit\" ? singleData : initialValues}\r\n      enableReinitialize\r\n    >\r\n      {({ isSubmitting, dirty, isValid, setFieldValue }) => {\r\n        return (\r\n          <Form style={{ marginTop: \"3rem\" }}>\r\n            <Grid item container direction=\"column\" gap={1}>\r\n              <Grid item container rowSpacing={3}>\r\n                <Grid item container>\r\n                  <FormikControl\r\n                    control=\"input\"\r\n                    name=\"name\"\r\n                    label=\"Name of Provider\"\r\n                    placeholder=\"Enter Provider Name\"\r\n                  />\r\n                </Grid>\r\n                <div style={{ display: \"none\" }} name=\"id\" />\r\n                <Grid item container>\r\n                  <FormikControl\r\n                    control=\"select\"\r\n                    options={dropDown}\r\n                    placeholder=\"Select user types\"\r\n                    name=\"type\"\r\n                    label=\"User Types\"\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item container>\r\n                  <Grid item container md>\r\n                    <FormikControl\r\n                      control=\"file\"\r\n                      name=\"image\"\r\n                      label=\"Upload Your Logo\"\r\n                      setFieldValue={setFieldValue}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item container>\r\n                  <Grid item container md>\r\n                    <FormikControl\r\n                      control=\"file\"\r\n                      name=\"iconAlt\"\r\n                      label=\"Upload Alternate Logo\"\r\n                      setFieldValue={setFieldValue}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <CustomButton\r\n                    title={type === \"edit\" ? \"Save Provider\" : \"Add Provider\"}\r\n                    width=\"100%\"\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                    type={buttonType}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\nexport default ProviderModal;\r\nProviderModal.propTypes = {\r\n  handleDialogClose: PropTypes.func,\r\n  setAlert: PropTypes.func,\r\n  editId: PropTypes.string,\r\n  type: PropTypes.string,\r\n  edit: PropTypes.bool,\r\n  initialValues: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  validationSchema: PropTypes.object,\r\n  singleData: PropTypes.object,\r\n  setSingleData: PropTypes.func,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\ReferPatient.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\RoleModal.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\PermissionModal.js",["1224","1225","1226"],"import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport {\r\n  CREATE_PERMISSION,\r\n  UPDATE_PERMISSION,\r\n} from \"components/graphQL/Mutation\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { getSinglePermissions } from \"components/graphQL/useQuery\";\r\n\r\nconst PermissionModal = ({\r\n  type,\r\n  initialValues,\r\n  validationSchema,\r\n  setAlert,\r\n  handleDialogClose,\r\n  editId,\r\n  setSinglePermission,\r\n  singlePermission,\r\n}) => {\r\n  const theme = useTheme();\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n  const [createPermission] = useMutation(CREATE_PERMISSION);\r\n  const [updatePermission] = useMutation(UPDATE_PERMISSION);\r\n\r\n  const { data } = useQuery(getSinglePermissions, {\r\n    variables: {\r\n      id: editId,\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (data && data.getPermission) {\r\n      setSinglePermission({\r\n        description: data.getPermission.description,\r\n        name: data.getPermission.name,\r\n      });\r\n    }\r\n  }, [data, setSinglePermission]);\r\n\r\n  const onSubmit = async (values, onSubmitProps) => {\r\n    const { description, name } = values;\r\n    if (type === \"add\") {\r\n      try {\r\n        await createPermission({ variables: { description, name } });\r\n\r\n        setAlert({\r\n          message: \"Permission successfully created\",\r\n          type: \"success\",\r\n        });\r\n        setTimeout(() => {\r\n          setAlert(null);\r\n        }, 5000);\r\n      } catch (error) {\r\n        console.log(error);\r\n        setAlert({\r\n          message: \"Permission  not successfully created\",\r\n          type: \"danger\",\r\n        });\r\n        setTimeout(() => {\r\n          setAlert(null);\r\n        }, 5000);\r\n      }\r\n    } else if (type === \"edit\") {\r\n      try {\r\n        await updatePermission({\r\n          variables: { id: editId, description, name },\r\n        });\r\n        setAlert({\r\n          message: \"Permission successfully updated\",\r\n          type: \"success\",\r\n        });\r\n        setTimeout(() => {\r\n          setAlert(null);\r\n        }, 5000);\r\n      } catch (error) {\r\n        console.log(error);\r\n        setAlert({\r\n          message: \"Permission  not successfully updated\",\r\n          type: \"danger\",\r\n        });\r\n        setTimeout(() => {\r\n          setAlert(null);\r\n        }, 5000);\r\n      }\r\n    }\r\n\r\n    handleDialogClose();\r\n\r\n    onSubmitProps.resetForm();\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={type === \"edit\" ? singlePermission : initialValues}\r\n      enableReinitialize\r\n      onSubmit={onSubmit}\r\n      validateOnBlur={false}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n    >\r\n      {({ isSubmitting, dirty, isValid }) => {\r\n        return (\r\n          <Form style={{ marginTop: \"3rem\" }}>\r\n            <Grid item container direction=\"column\" gap={1}>\r\n              <Grid item container rowSpacing={3}>\r\n                <Grid item container>\r\n                  <FormikControl\r\n                    control=\"input\"\r\n                    name=\"name\"\r\n                    label=\"Name of Permission\"\r\n                    placeholder=\"Enter Permission Name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item container>\r\n                  <FormikControl\r\n                    control=\"input\"\r\n                    name=\"description\"\r\n                    label=\"Description\"\r\n                    placeholder=\"Enter Description\"\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} marginTop={10}>\r\n                  <CustomButton\r\n                    title={type === \"edit\" ? \"Save changes\" : \"Add Permission\"}\r\n                    width=\"100%\"\r\n                    type={buttonType}\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\nexport default PermissionModal;\r\nPermissionModal.propTypes = {\r\n  handleDialogClose: PropTypes.func,\r\n  setSinglePermission: PropTypes.func,\r\n  setAlert: PropTypes.func,\r\n  type: PropTypes.string,\r\n  editId: PropTypes.string,\r\n  options: PropTypes.array,\r\n  initialValues: PropTypes.object,\r\n  singlePermission: PropTypes.object,\r\n  validationSchema: PropTypes.object,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\DeleteOrDisable.js",["1227","1228"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid, Modal, Fade, Typography, Box, Backdrop } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { BsExclamationCircle } from \"react-icons/bs\";\r\nimport LogoutRoundedIcon from \"@mui/icons-material/LogoutRounded\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  closeIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      cursor: \"pointer\",\r\n\r\n      \"&:hover\": {\r\n        cursor: \"pointer\",\r\n        color: theme.palette.common.danger,\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  height: \"auto\",\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: 24,\r\n  borderRadius: \"1rem\",\r\n};\r\n\r\nconst DeleteOrDisable = ({\r\n  open,\r\n  setOpen,\r\n  title,\r\n  confirmationMsg,\r\n  btnValue,\r\n  type,\r\n  onConfirm,\r\n  onCancel,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const discardButton = {\r\n    background: theme.palette.info.main,\r\n    hover: theme.palette.common.gold,\r\n    active: theme.palette.info.dark,\r\n  };\r\n\r\n  const disableButton = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.common.danger,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      aria-labelledby=\"transition-modal-title\"\r\n      aria-describedby=\"transition-modal-description\"\r\n      open={open}\r\n      onClose={() => setOpen(false)}\r\n      closeAfterTransition\r\n      BackdropComponent={Backdrop}\r\n      BackdropProps={{\r\n        timeout: 500,\r\n      }}\r\n    >\r\n      <Fade in={open}>\r\n        <Box\r\n          sx={style}\r\n          width={{ md: \"30vw\", sm: \"30vw\", xs: \"80vw\" }}\r\n          padding={{ sm: 2, xs: 2, md: 4 }}\r\n        >\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n          >\r\n            <Grid item alignSelf=\"flex-end\">\r\n              <CloseIcon\r\n                color=\"primary\"\r\n                fontSize=\"large\"\r\n                className={classes.closeIcon}\r\n                onClick={() => setOpen(false)}\r\n              />\r\n            </Grid>\r\n            <Grid item style={{ marginBottom: \"3rem\" }}>\r\n              {type === \"logout\" ? (\r\n                <LogoutRoundedIcon\r\n                  sx={{ fontSize: \"10rem\", color: \"red\" }}\r\n                  color={theme.palette.warning.main}\r\n                />\r\n              ) : (\r\n                <BsExclamationCircle\r\n                  size=\"10rem\"\r\n                  color={theme.palette.warning.main}\r\n                />\r\n              )}\r\n            </Grid>\r\n            <Grid item style={{ marginBottom: \"2rem\" }}>\r\n              <Typography variant=\"h2\">{title}</Typography>\r\n            </Grid>\r\n            <Grid item style={{ marginBottom: \"2rem\" }}>\r\n              <Typography\r\n                textAlign=\"center\"\r\n                variant=\"body1\"\r\n              >{`Are you sure you want to ${confirmationMsg}?`}</Typography>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              container\r\n              justifyContent=\"space-between\"\r\n              rowGap={3}\r\n              spacing={4}\r\n              sx={{ justifyContent: \"space-between\" }}\r\n            >\r\n              <Grid item columms={{ lg: 6, md: 4, sm: 4, xs: 3 }} flex={1}>\r\n                <CustomButton\r\n                  title=\"Cancel\"\r\n                  textColor={theme.palette.common.black}\r\n                  type={discardButton}\r\n                  width=\"100%\"\r\n                  onClick={() => setOpen(false)}\r\n                />\r\n              </Grid>\r\n              <Grid item columms={{ md: 4, sm: 4, xs: 3 }} flex={1}>\r\n                <CustomButton\r\n                  title={`Yes, ${btnValue}`}\r\n                  type={disableButton}\r\n                  width=\"100%\"\r\n                  onClick={() => {\r\n                    setOpen(false);\r\n                    onConfirm();\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Fade>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nDeleteOrDisable.propTypes = {\r\n  open: PropTypes.bool,\r\n  setOpen: PropTypes.func,\r\n  title: PropTypes.string,\r\n  confirmationMsg: PropTypes.string,\r\n  btnValue: PropTypes.string,\r\n  type: PropTypes.string,\r\n  onConfirm: PropTypes.func,\r\n  onCancel: PropTypes.func,\r\n};\r\n\r\nexport default DeleteOrDisable;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\CustomButton.js",["1229"],"import React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Loader from \"components/Utilities/Loader\";\r\nimport SearchOutlinedIcon from \"@mui/icons-material/SearchOutlined\";\r\n\r\nconst CustomButton = ({\r\n  title,\r\n  endIcon,\r\n  width,\r\n  height,\r\n  textColorOnHover,\r\n  borderRadius,\r\n  textColor,\r\n  path,\r\n  role,\r\n  fontSize,\r\n  startIcon,\r\n  type: { background, hover, active, disabled },\r\n  isSubmitting,\r\n  ...rest\r\n}) => {\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      \"&.MuiButton-root\": {\r\n        ...theme.typography.btn,\r\n        backgroundColor: background,\r\n        color: textColor,\r\n        width: width,\r\n        borderRadius: borderRadius ? borderRadius : 10,\r\n        height: height ? height : \"5rem\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        fontSize: \"clamp(1.2rem,2vw, 1.3rem)\",\r\n        boxShadow: \"none\",\r\n\r\n        \"&:hover\": {\r\n          backgroundColor: hover,\r\n          color: textColorOnHover,\r\n\r\n          \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n            color: textColorOnHover,\r\n          },\r\n        },\r\n\r\n        \"&:active\": {\r\n          backgroundColor: active,\r\n          boxShadow: \"none\",\r\n          color: textColor,\r\n        },\r\n\r\n        \"&:disabled\": {\r\n          backgroundColor: disabled,\r\n          color: textColor,\r\n          boxShadow: \"none\",\r\n          cursor: \"no-drop\",\r\n        },\r\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n          fontSize: \"2rem\",\r\n        },\r\n\r\n        \"& .MuiButton-endIcon\": {\r\n          marginLeft: \".5rem\",\r\n          marginTop: \"-.2rem\",\r\n        },\r\n      },\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Button\r\n      startIcon={startIcon}\r\n      variant=\"contained\"\r\n      LinkComponent={Link}\r\n      to={path ? path : \"\"}\r\n      type={role ? \"button\" : \"submit\"}\r\n      endIcon={endIcon}\r\n      className={classes.button}\r\n      {...rest}\r\n    >\r\n      {!isSubmitting && title}{\" \"}\r\n      {isSubmitting && <Loader size={35} color=\"info\" />}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.defaultProps = {\r\n  width: \"auto\",\r\n  textColor: \"#fff\",\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  endIcon: PropTypes.node,\r\n  startIcon: PropTypes.node,\r\n  title: PropTypes.string,\r\n  type: PropTypes.object,\r\n  textColor: PropTypes.string,\r\n  width: PropTypes.string,\r\n  height: PropTypes.string,\r\n  borderRadius: PropTypes.string,\r\n  fontSize: PropTypes.string,\r\n  textColorOnHover: PropTypes.string,\r\n  path: PropTypes.string,\r\n  isSubmitting: PropTypes.bool,\r\n  role: PropTypes.bool,\r\n};\r\n\r\nexport const SearchBtn = ({ isSubmitting, handleClick }) => {\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      color: \"#ffffff\",\r\n      border: \"none\",\r\n      backgroundColor: theme.palette.common.dark,\r\n      borderRadius: \"100%\",\r\n      padding: \"0.75rem\",\r\n      cursor: \"pointer\",\r\n\r\n      \"&:hover\": {\r\n        backgroundColor: theme.palette.common.gray,\r\n      },\r\n\r\n      \"&:disabled\": {\r\n        backgroundColor: theme.palette.common.disable,\r\n        boxShadow: \"none\",\r\n        cursor: \"no-drop\",\r\n      },\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <button\r\n      type={\"submit\"}\r\n      className={classes.button}\r\n      onClick={() => handleClick()}\r\n    >\r\n      {!isSubmitting && <SearchOutlinedIcon fontSize=\"large\" />}{\" \"}\r\n      {isSubmitting && <Loader size={35} color=\"info\" />}\r\n    </button>\r\n  );\r\n};\r\n\r\nSearchBtn.propTypes = {\r\n  isSubmitting: PropTypes.bool,\r\n  handleClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CustomButton;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Search.js",["1230","1231"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { InputAdornment, OutlinedInput, Grid } from \"@mui/material\";\r\nimport SearchIcon from \"components/Icons/SearchIcon\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  inputCont: {\r\n    \"&.MuiOutlinedInput-root\": {\r\n      backgroundColor: \"#FAFAFA\",\r\n      fontWeight: \"200 !important\",\r\n      color: `${theme.palette.common.grey} !important`,\r\n      height: ({ height }) => `${height}`,\r\n      fontSize: \"14px !important\",\r\n      borderRadius: \"12px\",\r\n      border: \"1px solid #E0E0E0 !important\",\r\n\r\n      \"&>fieldset\": {\r\n        border: 0,\r\n      },\r\n    },\r\n    /* \"&.MuiTypography-root\": {\r\n      fontWeight: \"200 !important\",\r\n      color: `${theme.palette.common.grey} !important`,\r\n      minHeight: 50,\r\n      fontSize: \"14px !important\",\r\n      borderRadius: \"12px\",\r\n    }, */\r\n  },\r\n}));\r\nconst SearchContainer = ({\r\n  width,\r\n  placeholder,\r\n  height,\r\n  placeholderWidth,\r\n  value,\r\n  onChange,\r\n  ref,\r\n  hasStartIcon = true,\r\n  startIcon,\r\n  onClickSearchBtn,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container>\r\n      <Grid item>\r\n        <OutlinedInput\r\n          className={classes.inputCont}\r\n          id=\"input-with-icon-adornment\"\r\n          value={value}\r\n          onChange={onChange}\r\n          ref={ref}\r\n          {...rest}\r\n          sx={{\r\n            fontSize: \"14px\",\r\n            height: height,\r\n            border: \"2px solid #E0E0E0\",\r\n            padding: \"0rem 1rem\",\r\n            borderRadius: \"12px\",\r\n          }}\r\n          placeholder={placeholder}\r\n          inputProps={{ \"aria-label\": placeholder }}\r\n          startAdornment={\r\n            <InputAdornment position=\"start\">\r\n              {startIcon\r\n                ? startIcon\r\n                : hasStartIcon && <SearchIcon style={{ fontSize: \"14px\" }} />}\r\n            </InputAdornment>\r\n          }\r\n          endAdornment={\r\n            <button\r\n              style={{\r\n                padding: \"0.5rem\",\r\n                margin: \"1rem 0rem\",\r\n                backgroundColor: \"#2D2F39\",\r\n                border: \"none\",\r\n                borderRadius: \"100%\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                cursor: \"pointer\",\r\n              }}\r\n              onClick={() => onClickSearchBtn()}\r\n            >\r\n              <SearchIcon sx={{ fontSize: \"20px\" }} />\r\n            </button>\r\n          }\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nSearchContainer.propTypes = {\r\n  width: PropTypes.string,\r\n  ref: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  height: PropTypes.string,\r\n  placeholderWidth: PropTypes.string,\r\n  value: PropTypes.string,\r\n  hasStartIcon: PropTypes.bool,\r\n  onChange: PropTypes.func,\r\n  startIcon: PropTypes.node,\r\n  onClickSearchBtn: PropTypes.func,\r\n};\r\n\r\nexport default SearchContainer;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\PreviousButton.js",["1232"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport KeyboardBackspaceIcon from \"@mui/icons-material/KeyboardBackspace\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  icon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      fontSize: \"2.5rem\",\r\n    },\r\n  },\r\n}));\r\nconst PreviousButton = ({ path, ...rest }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <IconButton LinkComponent={Link} to={path} {...rest}>\r\n      <KeyboardBackspaceIcon color=\"error\" className={classes.icon} />\r\n    </IconButton>\r\n  );\r\n};\r\n\r\nPreviousButton.propTypes = {\r\n  path: PropTypes.string,\r\n};\r\n\r\nexport default PreviousButton;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Backdrop.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\SearchInput.js",["1233"],"import React from \"react\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport PropTypes from \"prop-types\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Field } from \"formik\";\r\n\r\nconst Search = ({\r\n  width,\r\n  placeholder,\r\n  height,\r\n  placeholderWidth,\r\n  type,\r\n  name,\r\n  hasStartIcon = true,\r\n  ...rest\r\n}) => {\r\n  const useStyles = makeStyles({\r\n    //   root: {\r\n    //     \"& .css-1u99e1o-MuiInputBase-root-MuiOutlinedInput-root\": {\r\n    //       fontSize: \"1.6rem\",\r\n    //     },\r\n    //   },\r\n  });\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Field name={name}>\r\n        {({ field }) => {\r\n          return (\r\n            <OutlinedInput\r\n              type={type}\r\n              id=\"input-with-icon-adornment\"\r\n              sx={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                width,\r\n                height,\r\n                fontSize: \"16px\",\r\n                placeholderWidth,\r\n                background: \"white\",\r\n                borderRadius: 2,\r\n              }}\r\n              placeholder={placeholder}\r\n              inputProps={{ \"aria-label\": placeholder }}\r\n              startAdornment={\r\n                hasStartIcon && (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon style={{ fontSize: \"3rem\" }} name={name} />\r\n                  </InputAdornment>\r\n                )\r\n              }\r\n              {...rest}\r\n            />\r\n          );\r\n        }}\r\n      </Field>\r\n    </div>\r\n  );\r\n};\r\nSearch.propTypes = {\r\n  width: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  name: PropTypes.string,\r\n  height: PropTypes.string,\r\n  placeholderWidth: PropTypes.string,\r\n  type: PropTypes.string,\r\n  hasStartIcon: PropTypes.bool,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport default Search;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\LineChart.js",["1234","1235"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { monthNames } from \"components/Utilities/Time\";\r\n\r\nconst LineChart2 = ({ graphState, optionsValue, type, opt }) => {\r\n  const theme = useTheme();\r\n  const [state, setState] = useState(\"\");\r\n  // const lightGold = \"rgba(243, 173, 83,.04)\";\r\n  const lightRed = \"linear-gradient(to bottom, #3E5EA9 4%, #FFFFFF 88%)\";\r\n  // const lightGreen = \"rgba(45, 211, 158, .04)\";\r\n  // const gold = theme.palette.common.gold;\r\n  const [arr, setArr] = useState([]);\r\n  useEffect(() => {\r\n    setState(opt);\r\n  }, [opt]);\r\n\r\n  const active = useMemo(\r\n    () => graphState?.data?.active?.map((i) => i?.sum),\r\n    [graphState?.data?.active]\r\n  );\r\n  const all = useMemo(\r\n    () => graphState?.data?.all?.map((i) => i?.sum),\r\n    [graphState?.data?.all]\r\n  );\r\n  const inactive = useMemo(\r\n    () => graphState?.data?.inactive?.map((i) => i?.sum),\r\n    [graphState?.data?.inactive]\r\n  );\r\n  const complete = useMemo(\r\n    () => graphState?.data?.complete?.map((i) => i?.sum),\r\n    [graphState?.data?.complete]\r\n  );\r\n  const accept = useMemo(\r\n    () => graphState?.data?.accept?.map((i) => i?.sum),\r\n    [graphState?.data?.accept]\r\n  );\r\n  const cancel = useMemo(\r\n    () => graphState?.data?.cancel?.map((i) => i?.sum),\r\n    [graphState?.data?.cancel]\r\n  );\r\n  const decline = useMemo(\r\n    () => graphState?.data?.decline?.map((i) => i?.sum),\r\n    [graphState?.data?.decline]\r\n  );\r\n  const pharmacy = useMemo(\r\n    () => graphState?.data?.pharmacy?.map((i) => i?.sum),\r\n    [graphState?.data?.pharmacy]\r\n  );\r\n  const hospital = useMemo(\r\n    () => graphState?.data?.hospital?.map((i) => i?.sum),\r\n    [graphState?.data?.hospital]\r\n  );\r\n  const diagnostic = useMemo(\r\n    () => graphState?.data?.diagnostic?.map((i) => i?.sum),\r\n    [graphState?.data?.diagnostic]\r\n  );\r\n  const earning = useMemo(\r\n    () => graphState?.data?.earning?.map((i) => i?.sum),\r\n    [graphState?.data?.earning]\r\n  );\r\n  const payout = useMemo(\r\n    () => graphState?.data?.payout?.map((i) => i?.sum),\r\n    [graphState?.data?.payout]\r\n  );\r\n  const ongoing = useMemo(\r\n    () => graphState?.data?.ongoing?.map((i) => i?.sum),\r\n    [graphState?.data?.ongoing]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (type === \"consultation\") {\r\n      setArr([accept, complete, decline, ongoing, cancel]);\r\n      switch (state) {\r\n        case \"all\":\r\n          return setArr(accept);\r\n        case \"Accepted\":\r\n          return setArr(accept);\r\n        case \"Completed\":\r\n          return setArr(complete);\r\n        case \"Declined\":\r\n          return setArr(decline);\r\n        case \"Ongoing\":\r\n          return setArr(ongoing);\r\n        case \"Cancelled\":\r\n          return setArr(cancel);\r\n        default:\r\n          return setArr(accept);\r\n        // setArr([active, inactive]);\r\n      }\r\n    } else if (type === \"partners\") {\r\n      setArr([hospital, pharmacy, diagnostic]);\r\n      switch (state) {\r\n        case \"all\":\r\n          return setArr(all);\r\n        case \"hospital\":\r\n          return setArr(hospital);\r\n        case \"pharmacy\":\r\n          return setArr(pharmacy);\r\n        case \"diagnostic\":\r\n          return setArr(diagnostic);\r\n        default:\r\n          return setArr(all);\r\n      }\r\n    } else if (type === \"finance\") {\r\n      setArr([earning, payout]);\r\n      switch (state) {\r\n        case \"all\":\r\n          return setArr(earning);\r\n        case \"Earnings\":\r\n          return setArr(earning);\r\n        case \"Payouts\":\r\n          return setArr(payout);\r\n        default:\r\n          return setArr(earning);\r\n      }\r\n    } else {\r\n      switch (state) {\r\n        case \"all\":\r\n          return setArr(active);\r\n        case \"active\":\r\n          return setArr(active);\r\n        case \"inactive\":\r\n          return setArr(inactive);\r\n        default:\r\n          return setArr(active);\r\n      }\r\n    }\r\n  }, [\r\n    graphState,\r\n    state,\r\n    all,\r\n    diagnostic,\r\n    pharmacy,\r\n    hospital,\r\n    type,\r\n    decline,\r\n    active,\r\n    ongoing,\r\n    cancel,\r\n    earning,\r\n    payout,\r\n    accept,\r\n    complete,\r\n    inactive,\r\n  ]);\r\n\r\n  const lx = optionsValue.map((i) => {\r\n    let x;\r\n    const { value } = i;\r\n\r\n    if (value === opt) {\r\n      x = {\r\n        label: value,\r\n        data: arr,\r\n        fill: true,\r\n        color: \"#f00\",\r\n        borderColor: theme.palette.common.red,\r\n\r\n        pointBackgroundColor: theme.palette.common.red,\r\n        pointBorderColor: \"#fff\",\r\n        pointRadius: 2,\r\n        // backgroundColor:\r\n\r\n        //   lightRed,\r\n        // background: \"rgb(255,255,255)\";\r\n        // background:\r\n        //   \"linear-gradient(356deg, rgba(255,255,255,1) 38%, rgba(252,242,219,1) 38%)\",\r\n        pointHoverRadius: 2,\r\n        pointBorderWidth: 2,\r\n        tension: 0.5,\r\n        backgroundColor: (context) => {\r\n          const ctx = context.chart.ctx;\r\n\r\n          const gradient = ctx.createLinearGradient(0, 0, 0, 330);\r\n          gradient.addColorStop(0, \"rgba(62, 94, 209, .05)\");\r\n          gradient.addColorStop(1, \"rgba(255,255,255,0.3)\");\r\n          return gradient;\r\n        },\r\n      };\r\n    } else return null;\r\n    return x;\r\n  });\r\n  const j = lx.filter((n) => n);\r\n\r\n  const data = {\r\n    labels: monthNames,\r\n    backgroundColor: \"#fff\",\r\n    datasets: [...j],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: true,\r\n    backgroundColor: \"#f3f3f3\",\r\n    locale: \"fr\",\r\n    scales: {\r\n      y: {\r\n        ticks: {\r\n          beginAtZero: true,\r\n          callback: function (value) {\r\n            if (value % 1 === 0) {\r\n              return value;\r\n            }\r\n          },\r\n        },\r\n        min: 0,\r\n        grid: {\r\n          color: \"rgba(0,0,0,0.05)\",\r\n          borderColor: \"rgba(0,0,0,0.05)\",\r\n          borderDash: [10, 10],\r\n          speechSynthesis: true,\r\n          display: true,\r\n        },\r\n      },\r\n      x: {\r\n        grid: {\r\n          color: \"#fff\",\r\n          borderDash: [2, 2],\r\n          borderColor: \"rgba(0,0,0,0.05)\",\r\n          display: false,\r\n        },\r\n        display: true,\r\n      },\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n\r\n      tooltip: {\r\n        backgroundColor: \"#fff\",\r\n        cursor: \"pointer\",\r\n        titleColor: colorItem,\r\n        onHover: hover,\r\n        bodyColor: \"rgba(0, 0, 0, 1)\",\r\n        titleAlign: \"left\",\r\n        bodyAlign: \"left\",\r\n        borderColor: \"rgba(0, 0, 0, 0.05)\",\r\n        borderWidth: 3,\r\n        displayColors: true,\r\n        boxHeight: 0,\r\n        boxWidth: 0,\r\n        yAlign: \"top\",\r\n        usePointStyle: true,\r\n        callbacks: {\r\n          labelPointStyle: (context) => {\r\n            return {\r\n              pointStyle: \"rectangle\",\r\n              rotation: 0,\r\n              cursor: \"pointer\",\r\n            };\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n  function hover(event) {\r\n    const x = (event.target.style.cursor = \"pointer\");\r\n    return x;\r\n  }\r\n  function colorItem(tooltipItem) {\r\n    const tooltipTitleColor =\r\n      tooltipItem.tooltip.labelColors[0].backgroundColor;\r\n\r\n    return tooltipTitleColor;\r\n  }\r\n\r\n  return (\r\n    <Grid item container>\r\n      <Line data={data} options={options} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nLineChart2.propTypes = {\r\n  timeFrames: PropTypes.array,\r\n  optionsValue: PropTypes.array,\r\n  type: PropTypes.string,\r\n  selectedTimeframe: PropTypes.number,\r\n  setSelectedTimeframe: PropTypes.func,\r\n  doctorStats: PropTypes.array,\r\n  graphState: PropTypes.object,\r\n  opt: PropTypes.object,\r\n};\r\n\r\nexport default LineChart2;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\FilterList.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\FormInput.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Modal.js",["1236","1237"],"import React from \"react\";\r\nimport { Modal, Stack, Box, Typography, Grid } from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  closeIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      fontSize: \"2rem\",\r\n      cursor: \"pointer\",\r\n\r\n      \"&:hover\": {\r\n        color: \"red\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst Modals = ({\r\n  isOpen,\r\n  isClose,\r\n  handleClose,\r\n  width,\r\n  title,\r\n  color,\r\n  children,\r\n  rowSpacing,\r\n  height,\r\n}) => {\r\n  const style = {\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    height,\r\n    bgcolor: \"background.paper\",\r\n    borderRadius: \"2rem\",\r\n  };\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <Stack>\r\n      <Modal\r\n        open={isOpen}\r\n        onClose={handleClose}\r\n        aria-labelledby=\"modal-title\"\r\n        closeAfterTransition\r\n        aria-describedby=\"modal-description\"\r\n      >\r\n        <Box\r\n          sx={style}\r\n          width={{ sm: \"40vw\", xs: \"90vw\", md: \"40vw\" }}\r\n          padding={{ sm: 4, xs: 3, md: 4 }}\r\n        >\r\n          <Grid\r\n            container\r\n            rowSpacing={rowSpacing ? rowSpacing : 4}\r\n            className={classes.modal}\r\n            flexDirection=\"column\"\r\n          >\r\n            <Grid\r\n              item\r\n              container\r\n              justifyContent=\"space-between\"\r\n              alignItems=\"center\"\r\n              flex=\"2\"\r\n            >\r\n              <Grid item>\r\n                <Typography variant=\"h3\">{title}</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                {!isClose ? (\r\n                  <CloseIcon\r\n                    color={color ? color : \"secondary\"}\r\n                    className={classes.closeIcon}\r\n                    onClick={handleClose}\r\n                  />\r\n                ) : null}\r\n              </Grid>\r\n            </Grid>\r\n            {children}\r\n          </Grid>\r\n        </Box>\r\n      </Modal>\r\n    </Stack>\r\n  );\r\n};\r\nModals.propTypes = {\r\n  isOpen: PropTypes.bool,\r\n  isClose: PropTypes.bool,\r\n  handleClose: PropTypes.func,\r\n  children: PropTypes.node,\r\n  title: PropTypes.string,\r\n  color: PropTypes.string,\r\n  height: PropTypes.string,\r\n  width: PropTypes.string,\r\n  rowSpacing: PropTypes.number,\r\n};\r\n\r\nModals.defaultProps = {\r\n  height: \"auto\",\r\n};\r\n\r\nexport default Modals;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Loader.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Button.js",["1238","1239"],"import React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@mui/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    textTransform: \"capitalize\",\r\n    fontFamily: \"Circular Std\",\r\n    fontSize: \"1.6rem\",\r\n    fontStyle: \"normal\",\r\n    fontWeight: 500,\r\n    lineHeight: \"2.4rem\",\r\n    letterSpacing: \"0px\",\r\n    textAlign: \"left\",\r\n    height: \"100%\",\r\n  },\r\n}));\r\n\r\nconst IconLabelButtons = ({\r\n  placeholder,\r\n  width,\r\n  backgroundColor,\r\n  type,\r\n  border,\r\n  height,\r\n  endIcon,\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Stack\r\n      direction=\"row\"\r\n      spacing={2}\r\n      sx={{\r\n        width,\r\n        // height: \"100%\",\r\n      }}\r\n    >\r\n      <Button\r\n        sx={{ width, backgroundColor, borderRadius: border, height }}\r\n        variant=\"contained\"\r\n        className={classes.button}\r\n        endIcon={endIcon}\r\n      >\r\n        {placeholder}\r\n      </Button>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nIconLabelButtons.propTypes = {\r\n  width: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  backgroundColor: PropTypes.string,\r\n  type: PropTypes.string,\r\n  border: PropTypes.string,\r\n  height: PropTypes.string,\r\n  endIcon: PropTypes.node,\r\n};\r\n\r\nexport default IconLabelButtons;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\CircularChart.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Card.js",["1240"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { makeStyles } from \"@mui/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridWrapper: {\r\n    ...theme.typography.cardGridWrapper,\r\n    width: \"100%\",\r\n  },\r\n\r\n  iconWrapper: {\r\n    ...theme.typography.cardIconWrapper,\r\n  },\r\n}));\r\n\r\nconst Card = ({ title, background, children, header = \"h2\", padding }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid\r\n      item\r\n      container\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"space-between\"\r\n      className={classes.gridWrapper}\r\n      rowGap={3}\r\n      sx={{ backgroundColor: \"#fff\" }}\r\n    >\r\n      <Grid item className={classes.iconWrapper} style={{ background }}>\r\n        {children}\r\n      </Grid>\r\n      <Grid item>\r\n        <Typography variant={header}>{title}</Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nCard.propTypes = {\r\n  title: PropTypes.string,\r\n  background: PropTypes.string,\r\n  header: PropTypes.string,\r\n  children: PropTypes.node,\r\n  padding: PropTypes.string,\r\n};\r\n\r\nexport default Card;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\LinearProgress.js",["1241"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { LinearProgress, Typography, Box } from \"@mui/material\";\r\n\r\nconst LinearProgressWithLabel = (props) => {\r\n  return (\r\n    <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n      <Box sx={{ width: \"100%\", mr: 1 }}>\r\n        <LinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box sx={{ minWidth: 35 }}>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">{`${Math.round(\r\n          props.value\r\n        )}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\nLinearProgressWithLabel.propTypes = {\r\n  value: PropTypes.number,\r\n};\r\n\r\nconst LinearWithValueLabel = ({ progres }) => {\r\n  const [progress, setProgress] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setProgress((progres) => (progres >= 100 ? 0 : progres + 0));\r\n  }, [progress]);\r\n\r\n  return (\r\n    <Box sx={{ width: \"100%\" }}>\r\n      <LinearProgressWithLabel value={progress} />\r\n    </Box>\r\n  );\r\n};\r\nexport default LinearWithValueLabel;\r\nLinearWithValueLabel.propTypes = {\r\n  progres: PropTypes.number,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\FormSelect.js",["1242"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MenuItem, Select, Typography, FormControl } from \"@mui/material/\";\r\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\r\n\r\nconst FormSelect = ({\r\n  startAdornment,\r\n  value,\r\n  onChange,\r\n  placeholder,\r\n  options,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <FormControl sx={{ width: \"100%\" }}>\r\n      <Select\r\n        value={value}\r\n        onChange={onChange}\r\n        displayEmpty\r\n        startAdornment={startAdornment}\r\n        style={{ minHeight: 50, minWidth: 90 }}\r\n        inputProps={{ \"aria-label\": \"Select Referral Type\" }}\r\n        IconComponent={KeyboardArrowDownIcon}\r\n        {...rest}\r\n      >\r\n        <MenuItem value=\"\">\r\n          <Typography>{placeholder}</Typography>\r\n        </MenuItem>\r\n        {options.map((option, index) => (\r\n          <MenuItem\r\n            key={option.value}\r\n            value={option.value}\r\n            style={{ fontSize: \"1.25rem\" }}\r\n          >\r\n            {option.key}\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nFormSelect.propTypes = {\r\n  options: PropTypes.array,\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  placeholder: PropTypes.string,\r\n  startAdornment: PropTypes.element,\r\n};\r\n\r\nexport default FormSelect;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\DisplayProfile.js",["1243","1244"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Typography, Chip, Avatar, Grid } from \"@mui/material\";\r\nimport CustomButton from \"./CustomButton\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { HiChat } from \"react-icons/hi\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridsWrapper: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    padding: \"2rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.3rem !important\",\r\n      borderRadius: \"1.5rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst DisplayProfile = ({\r\n  fullName,\r\n  displayPhoto,\r\n  medicalTitle,\r\n  statusId,\r\n  specialization,\r\n  status,\r\n  type,\r\n}) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { patientId, hcpId } = useParams();\r\n\r\n  const greenButton = {\r\n    background: theme.palette.success.main,\r\n    hover: theme.palette.success.light,\r\n    active: theme.palette.success.dark,\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      justifyContent=\"space-between\"\r\n      alignItems=\"center\"\r\n      flexWrap=\"wrap\"\r\n      direction=\"row\"\r\n      className={classes.gridsWrapper}\r\n      rowGap={2}\r\n    >\r\n      <Grid item>\r\n        <Grid container gap={2} alignItems=\"center\">\r\n          <Avatar\r\n            alt={\"Display Photo\"}\r\n            src={displayPhoto}\r\n            sx={{ width: 50, height: 50 }}\r\n          />\r\n          <Typography variant=\"h3\">{fullName}</Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item>\r\n        <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n          {specialization ? (\r\n            <Grid item>\r\n              <Typography variant=\"h4\" style={{ fontWeight: 400 }}>\r\n                <span style={{ color: theme.palette.common.lightGrey }}>\r\n                  Specialization:\r\n                </span>{\" \"}\r\n                <Chip\r\n                  label={specialization}\r\n                  color=\"success\"\r\n                  className={classes.badge}\r\n                />\r\n              </Typography>\r\n            </Grid>\r\n          ) : status ? (\r\n            <Grid item>\r\n              <Typography variant=\"h4\">\r\n                <span style={{ color: theme.palette.common.lightGrey }}>\r\n                  Status:\r\n                </span>{\" \"}\r\n                <Chip\r\n                  label={status}\r\n                  color={status === \"Active\" ? \"success\" : \"error\"}\r\n                  className={classes.badge}\r\n                  style={{\r\n                    background:\r\n                      status === \"Active\"\r\n                        ? theme.palette.common.lightGreen\r\n                        : theme.palette.common.lightRed,\r\n                    color:\r\n                      status === \"Active\"\r\n                        ? theme.palette.common.green\r\n                        : theme.palette.common.red,\r\n                  }}\r\n                />\r\n              </Typography>\r\n            </Grid>\r\n          ) : null}\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item>\r\n        <Typography variant=\"h4\" color=\"error\" style={{ fontWeight: 400 }}>\r\n          <span style={{ color: theme.palette.common.lightGrey }}>\r\n            {medicalTitle}:\r\n          </span>{\" \"}\r\n          {statusId}\r\n        </Typography>\r\n      </Grid>\r\n      {type !== \"\" ? (\r\n        <Grid item>\r\n          <CustomButton\r\n            endIcon={<HiChat />}\r\n            title=\"Message\"\r\n            type={greenButton}\r\n            component={Link}\r\n            to={\r\n              type !== \"doctor\"\r\n                ? `/patients/${patientId}/profile/chat`\r\n                : `/hcps/${hcpId}/profile/chat`\r\n            }\r\n          />\r\n        </Grid>\r\n      ) : null}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nDisplayProfile.propTypes = {\r\n  fullName: PropTypes.string,\r\n  displayPhoto: PropTypes.string,\r\n  medicalTitle: PropTypes.string,\r\n  statusId: PropTypes.string,\r\n  specialization: PropTypes.string,\r\n  status: PropTypes.string,\r\n  chatPath: PropTypes.string,\r\n  type: PropTypes.string,\r\n};\r\n\r\nexport default DisplayProfile;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\ProfileCard.js",["1245"],"import React from \"react\";\r\nimport { Typography, Grid, Chip } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardGrid: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    // padding: \"4rem 5rem\",\r\n    height: \"16.1rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\r\n  },\r\n  link: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    fontSize: \"1.25rem\",\r\n    color: theme.palette.common.green,\r\n    padding: \".75rem\",\r\n    borderRadius: \"1.5rem\",\r\n    textDecoration: \"none\",\r\n  },\r\n  infoBadge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"1.5rem\",\r\n      color: theme.palette.common.green,\r\n    },\r\n  },\r\n}));\r\nconst ProfileCard = ({ value, text, type }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid\r\n      item\r\n      container\r\n      direction=\"column\"\r\n      justifyContent=\"center\"\r\n      rowGap={{ md: 4, sm: 3, xs: 3 }}\r\n      alignItems=\"center\"\r\n      className={classes.cardGrid}\r\n    >\r\n      <Grid item>\r\n        <Typography variant=\"h4\">{text}</Typography>\r\n      </Grid>\r\n\r\n      {/* {type === \"alergy\"\r\n        ? value?.map((i, key) => (\r\n            <a\r\n              rel=\"noreferrer\"\r\n              key={i._id}\r\n              className={classes.link}\r\n              href={i.url}\r\n              target=\"_blank\"\r\n            ></a>\r\n          ))\r\n        : null} */}\r\n      <Grid item>\r\n        {Array.isArray(value) ? (\r\n          value.map((i, key) => (\r\n            <Chip\r\n              variant=\"outlined\"\r\n              key={key}\r\n              label={i}\r\n              className={classes.infoBadge}\r\n            />\r\n          ))\r\n        ) : (\r\n          <Chip\r\n            variant=\"outlined\"\r\n            label={value}\r\n            className={classes.infoBadge}\r\n          />\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nProfileCard.propTypes = {\r\n  text: PropTypes.string,\r\n  value: PropTypes.string,\r\n  type: PropTypes.string,\r\n};\r\nexport default ProfileCard;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\CardItem.js",["1246"],"import React from \"react\";\r\nimport { Card, Grid, Typography } from \"@mui/material\";\r\nimport ArrowUpwardIcon from \"@mui/icons-material/ArrowUpward\";\r\nimport PropTypes from \"prop-types\";\r\nimport { ArrowDownwardOutlined } from \"@mui/icons-material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\n\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { roundUp } from \"components/Utilities/Time\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  grid: {\r\n    \"&.MuiGrid-item\": {\r\n      paddingLeft: \"0\",\r\n    },\r\n  },\r\n}));\r\nconst CardItem = ({ value }) => {\r\n  const theme = useTheme();\r\n  const { name, value: val, id, percentageValue, icon } = value;\r\n  const percent = roundUp(percentageValue);\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Card\r\n      variant=\"outlined\"\r\n      width=\"100%\"\r\n      xs={3}\r\n      sx={{\r\n        padding: \"22px 20px\",\r\n        borderRadius: \"15px\",\r\n        borderColor: \"transparent\",\r\n      }}\r\n    >\r\n      <Grid\r\n        item\r\n        container\r\n        gap=\"1rem\"\r\n        flexWrap=\"nowrap\"\r\n        flexDirection={{ xs: \"row\", sm: \"row\", md: \"row\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          sx={{\r\n            minHeight: \"5.4rem\",\r\n            // maxWidth: \"5.4rem\",\r\n            maxWidth: \"100%\",\r\n            borderRadius: \"100%\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n          }}\r\n        >\r\n          {icon}\r\n        </Grid>\r\n        <Grid item>\r\n          <Grid container flexDirection=\"column\" spacing={1}>\r\n            <Grid item>\r\n              <Typography\r\n                sx={{\r\n                  fontSize: \"1.2rem\",\r\n                  fontWeight: 400,\r\n                  lineHeight: 1.5,\r\n                  color: \"#757886\",\r\n                }}\r\n              >\r\n                {name}\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item className={classes.grid}>\r\n              <Grid\r\n                container\r\n                gap={1}\r\n                alignItems=\"center\"\r\n                sx={{\r\n                  padding: \"3px 8px\",\r\n                }}\r\n              >\r\n                <Typography\r\n                  sx={{\r\n                    fontWeight: \"600\",\r\n                    fontSize: \"24px\",\r\n                    lineHeight: \"24px\",\r\n                    letterSpacing: \"-0.28px\",\r\n\r\n                    color: \"#2D2F39\",\r\n                  }}\r\n                >\r\n                  {val}\r\n                </Typography>\r\n\r\n                {id < 3 && (\r\n                  <Grid\r\n                    item\r\n                    sx={{\r\n                      borderRadius: \"100px\",\r\n                      color:\r\n                        percentageValue < 1\r\n                          ? \"#ED3237\"\r\n                          : theme.palette.success.main,\r\n                      backgroundColor:\r\n                        percentageValue < 1\r\n                          ? \"rgba(237, 50, 55, 0.1)\"\r\n                          : \"rgba(62, 165, 132, 0.1)\",\r\n                      padding: \"3px 8px\",\r\n                    }}\r\n                  >\r\n                    <Grid container alignItems=\"center\" justifyContent=\"center\">\r\n                      <Typography\r\n                        variant=\"span\"\r\n                        sx={{ fontWeight: 500, fontSize: \"1rem\" }}\r\n                      >\r\n                        {percent}\r\n                      </Typography>\r\n                      {percentageValue < 1 ? (\r\n                        <ArrowDownwardOutlined\r\n                          sx={{ color: \"inherit\", fontSize: \"1rem\" }}\r\n                        />\r\n                      ) : (\r\n                        <ArrowUpwardIcon\r\n                          sx={{ color: \"inherit\", fontSize: \"1rem\" }}\r\n                        />\r\n                      )}\r\n                    </Grid>\r\n                  </Grid>\r\n                )}\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Card>\r\n  );\r\n};\r\nCardItem.propTypes = {\r\n  value: PropTypes.object,\r\n};\r\n\r\nexport default CardItem;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\EmptyTable.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\SideMenu.js",["1247","1248"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\DataGrid.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\CheckBox.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\AvailabilityCard.js",["1249"],"import React from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Grid, Typography, Divider } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { hours } from \"components/Utilities/Time\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardGrid: {\r\n    background: \"#fff\",\r\n    borderRadius: \"2rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.1)\",\r\n  },\r\n}));\r\n\r\nconst AvailabilityCard = ({ availability }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container direction=\"column\" className={classes.cardGrid}>\r\n      <Grid item style={{ padding: \"2rem\" }}>\r\n        <Grid container justifyContent=\"center\" gap={2}>\r\n          <Grid item>\r\n            <Typography variant=\"body1\">Day:</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"body1\">{availability?.day} </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Divider />\r\n      <Grid item style={{ padding: \"2rem\" }}>\r\n        <Grid item container justifyContent=\"center\">\r\n          <Grid item>\r\n            <Typography variant=\"body1\">Time: </Typography>\r\n          </Grid>\r\n          <Grid container>\r\n            {availability?.times?.map((time, index) => {\r\n              return (\r\n                <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  gap={2}\r\n                  key={index}\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"center\"\r\n                >\r\n                  <Grid item>\r\n                    <Grid item container gap={2}>\r\n                      <Grid item>\r\n                        <Typography variant=\"body1\">{`${hours(\r\n                          time?.start\r\n                        )}`}</Typography>\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography variant=\"body1\">-</Typography>\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography variant=\"body1\">\r\n                          {`${hours(time?.stop)}`}{\" \"}\r\n                        </Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Divider />\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nAvailabilityCard.propTypes = {\r\n  day: PropTypes.string,\r\n  time: PropTypes.string,\r\n  availability: PropTypes.string,\r\n};\r\n\r\nexport default AvailabilityCard;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\Header.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\DashboardChart.js",["1250","1251","1252","1253","1254","1255"],"import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Card, Typography, Divider } from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\nimport { CustomSelect } from \"components/validation/Select\";\r\nimport ArrowUpwardIcon from \"@mui/icons-material/ArrowUpward\";\r\nimport { ArrowDownwardOutlined } from \"@mui/icons-material\";\r\nimport { ReactComponent as ConsultationIcon } from \"assets/images/totalC.svg\";\r\nimport { ReactComponent as DoctorIcon } from \"assets/images/totalD.svg\";\r\nimport { ReactComponent as PatientIcon } from \"assets/images/totalP.svg\";\r\nimport { ReactComponent as PartnerIcon } from \"assets/images/totalPartner.svg\";\r\n\r\nimport {\r\n  consultationsOptions,\r\n  returnpercent,\r\n  financeOptions,\r\n  partnerOptions,\r\n  partnersOptions,\r\n  newOptions,\r\n  formatNumber,\r\n  selectOptions,\r\n} from \"components/Utilities/Time\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { LineChart, CircularProgressBar } from \"components/Utilities\";\r\nimport { CardItem } from \"components/layouts\";\r\nimport \"chartjs-plugin-style\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  chartCard: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n  },\r\n  chartImg: {\r\n    maxWidth: \"100%\",\r\n  },\r\n  headerGrid: {\r\n    background: \"rgb(253, 253, 253)\",\r\n    width: \"100%\",\r\n    borderTopLeftRadius: \"1rem\",\r\n    borderTopRightRadius: \"1rem\",\r\n    padding: \"1.5rem 2rem\",\r\n  },\r\n  overviewGrid: {\r\n    // padding: \"4rem 2rem 3rem\",\r\n  },\r\n  groupIconGrid: {\r\n    width: \"5rem\",\r\n    height: \"5rem\",\r\n    background: theme.palette.common.lightGreen,\r\n    borderRadius: \"50%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  groupIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      fontSize: \"2.5rem\",\r\n    },\r\n  },\r\n  bottomChartGrid: {\r\n    // padding: \"3rem 2rem\",\r\n  },\r\n\r\n  dottedCircle: {\r\n    width: 5,\r\n    height: 5,\r\n    borderRadius: \"100%\",\r\n  },\r\n  red: {\r\n    background: theme.palette.common.red,\r\n  },\r\n  green: {\r\n    background: theme.palette.common.green,\r\n  },\r\n  gold: {\r\n    borderColor: theme.palette.common.gold,\r\n  },\r\n\r\n  iconWrapper: {\r\n    width: 40,\r\n    height: 40,\r\n    borderRadius: \"50%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  greenIconBg: {\r\n    background: theme.palette.common.lightGreen,\r\n  },\r\n  redIconBg: {\r\n    background: theme.palette.common.lightRed,\r\n  },\r\n\r\n  greenNotificationBg: {\r\n    background: theme.palette.common.green,\r\n  },\r\n\r\n  notificationIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      color: \"#fff\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst DashboardCharts = ({ data }) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [patients, setPatients] = useState([]);\r\n  const [doctorStats, setDoctorStats] = useState([]);\r\n\r\n  const [totalConsultations, setTotalConsultations] = useState(\"\");\r\n  const [totalEarning, setTotalEarning] = useState(0);\r\n  const [totalPayouts, setTotalPayouts] = useState(0);\r\n  const [partnersData, setPartnersData] = useState([]);\r\n\r\n  const [consultationState, setConsultationState] = useState({\r\n    state: \"all\",\r\n    data: {\r\n      all: data?.consultationStats.chartData,\r\n      complete: data?.consultationStats.completedChartData,\r\n      ongoing: data?.consultationStats.ongoingChartData,\r\n      accept: data?.consultationStats.acceptedChartData,\r\n      decline: data?.consultationStats.declinedChartData,\r\n      cancel: data?.consultationStats.cancelledChartData,\r\n    },\r\n  });\r\n\r\n  const [graphState, setGraphState] = useState({\r\n    state: \"all\",\r\n    data: {\r\n      all: data?.doctorStats?.chartData,\r\n      active: data?.doctorStats.activeChartData,\r\n      inactive: data?.doctorStats.inactiveChartData,\r\n    },\r\n  });\r\n  const [subScriptionState, setSubScriptionState] = useState({\r\n    state: \"all\",\r\n    data: {\r\n      all: data?.subscriptionStats?.chartData,\r\n      active: data?.subscriptionStats.activeChartData,\r\n      inactive: data?.subscriptionStats.inactiveChartData,\r\n    },\r\n  });\r\n  const [patientGraphState] = useState({\r\n    state: \"all\",\r\n    data: {\r\n      all: data?.patientStats.chartData,\r\n      active: data?.patientStats.activeChartData,\r\n      inactive: data?.patientStats.inactiveChartData,\r\n    },\r\n  });\r\n  const [financialState] = useState({\r\n    state: \"all\",\r\n    data: {\r\n      earning: data?.earningStats?.chartData,\r\n      payout: data?.payoutStats?.chartData,\r\n    },\r\n  });\r\n\r\n  const [earningArray] = useState(data?.earningStats?.chartData);\r\n  const [totalPayoutValue, setPayoutValue] = useState(totalPayouts);\r\n  const [totalEarningsValue, setEarningsValue] = useState(totalEarning);\r\n  const [payoutArray] = useState(data?.payoutStats?.chartData);\r\n  const [partnerGraphState, setPartnerGraphState] = useState({\r\n    state: \"all\",\r\n    data: {\r\n      all: data?.partnerStats.chartData,\r\n      hospital: data?.partnerStats.hospitalChartData,\r\n      diagnostic: data?.partnerStats.diagnosticsChartData,\r\n      pharmacy: data?.partnerStats.pharmacyChartData,\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    const {\r\n      patientStats,\r\n      doctorStats,\r\n      consultationStats,\r\n      partnerStats,\r\n      earningStats,\r\n      payoutStats,\r\n    } = data;\r\n    setPatients(patientStats);\r\n    setDoctorStats(doctorStats);\r\n    setTotalConsultations(consultationStats);\r\n    setPartnersData(partnerStats);\r\n    setTotalEarning(earningStats?.total);\r\n    setEarningsValue(earningStats?.total);\r\n    setTotalPayouts(payoutStats?.total);\r\n\r\n    //eslint-disable-next-line\r\n  }, [data]);\r\n\r\n  const {\r\n    totalAccepted,\r\n    totalCancelled,\r\n    totalOngoing,\r\n    totalDeclined,\r\n    totalCompleted,\r\n  } = totalConsultations;\r\n  const total =\r\n    totalAccepted +\r\n    totalCancelled +\r\n    totalOngoing +\r\n    totalDeclined +\r\n    totalCompleted;\r\n  const { totalActive: activeDoctors, totalInactive: inactiveDoctors } =\r\n    doctorStats;\r\n  const { totalActive: activePatients, totalInactive: inactivePatients } =\r\n    patients;\r\n  const totalDoc = activeDoctors + inactiveDoctors;\r\n  const totalPatient = activePatients + inactivePatients;\r\n  const [partnersState, setPartnersState] = useState(\"Patients\");\r\n  const patientPercentage = returnpercent(activePatients, inactivePatients);\r\n  const doctorPercentage = returnpercent(activeDoctors, inactiveDoctors);\r\n  const [amount, setAmount] = useState([\r\n    {\r\n      name: \"Total Earnings\",\r\n      value: 0,\r\n    },\r\n    {\r\n      name: \"Total Payouts\",\r\n      value: 0,\r\n    },\r\n  ]);\r\n  const [cardState, setCardState] = useState([\r\n    {\r\n      id: 1,\r\n      name: \"Total Doctors\",\r\n      percentageValue: 0,\r\n      value: 0,\r\n    },\r\n    {\r\n      id: 2,\r\n      name: \"Total Patients\",\r\n      percentageValue: 0,\r\n      value: 0,\r\n    },\r\n    {\r\n      id: 4,\r\n      name: \"Total Consultations\",\r\n      percentageValue: 0,\r\n      value: 0,\r\n    },\r\n    {\r\n      id: 3,\r\n      name: \"Total Partners\",\r\n      percentageValue: 0,\r\n      value: 0,\r\n    },\r\n  ]);\r\n  const [state, setState] = useState(patientGraphState);\r\n  const [options, setOptions] = useState(\"all\");\r\n\r\n  const handleStateChange = (e) => {\r\n    const { value } = e.target;\r\n\r\n    switch (value) {\r\n      case \"Patients\":\r\n        setState(patientGraphState);\r\n        setPartnersState(\"Patients\");\r\n        setOptions(\"all\");\r\n        break;\r\n      case \"Doctors\":\r\n        setState(graphState);\r\n        setPartnersState(\"Doctors\");\r\n        setOptions(\"all\");\r\n        break;\r\n      case \"Consultations\":\r\n        setState(consultationState);\r\n        setPartnersState(\"Consultations\");\r\n        setOptions(\"all\");\r\n        break;\r\n      case \"Partners\":\r\n        setState(partnerGraphState);\r\n        setPartnersState(\"Partners\");\r\n        setOptions(\"all\");\r\n        break;\r\n      case \"Finance\":\r\n        setState(financialState);\r\n        setPartnersState(\"Finance\");\r\n        setOptions(\"all\");\r\n        break;\r\n      default:\r\n        setState(patientGraphState);\r\n        setPartnersState(\"Patients\");\r\n        setOptions(\"all\");\r\n    }\r\n  };\r\n  const handleOptionChange = (e) => {\r\n    const { value } = e.target;\r\n    setOptions(value);\r\n  };\r\n  useEffect(() => {\r\n    setCardState([\r\n      {\r\n        id: 1,\r\n        name: \"Total Doctors\",\r\n        percentageValue: doctorPercentage,\r\n        value: totalDoc,\r\n        icon: <DoctorIcon />,\r\n      },\r\n      {\r\n        id: 2,\r\n        name: \"Total Patients\",\r\n        percentageValue: patientPercentage,\r\n        value: totalPatient,\r\n        icon: <PatientIcon />,\r\n      },\r\n      {\r\n        id: 3,\r\n        name: \"Total Partners\",\r\n        value: partnersData?.total,\r\n        icon: <PartnerIcon />,\r\n      },\r\n      {\r\n        id: 4,\r\n        name: \"Total Consultations\",\r\n\r\n        value: total,\r\n        icon: <ConsultationIcon />,\r\n      },\r\n    ]);\r\n\r\n    setAmount([\r\n      {\r\n        name: \"Total Earnings\",\r\n        value: formatNumber(totalEarningsValue),\r\n      },\r\n      {\r\n        name: \"Total Payouts\",\r\n        value: formatNumber(totalPayoutValue),\r\n      },\r\n    ]);\r\n  }, [\r\n    totalPatient,\r\n    totalPayoutValue,\r\n    totalEarningsValue,\r\n    total,\r\n    patientPercentage,\r\n    doctorPercentage,\r\n    partnersData?.total,\r\n    totalDoc,\r\n    totalEarning,\r\n    totalPayouts,\r\n  ]);\r\n\r\n  const percentageValue = 0.5;\r\n  const [financeState, setFinancialStates] = useState(0);\r\n  const handleFinanceStateChange = (e) => {\r\n    const { value } = e.target;\r\n    // eslint-disable-next-line\r\n    payoutArray?.map((item) => {\r\n      // eslint-disable-next-line\r\n      if (value == 0) {\r\n        setFinancialStates(0);\r\n        setPayoutValue(totalPayouts);\r\n        setEarningsValue(totalEarning);\r\n      }\r\n      //eslint-disable-next-line\r\n      if (item.month == value && value > 0) {\r\n        setFinancialStates(value);\r\n        setPayoutValue(item.sum);\r\n      }\r\n    });\r\n    earningArray?.map((item) => {\r\n      // eslint-disable-next-line\r\n      if (item.month == value) {\r\n        setEarningsValue(item.sum);\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Grid container gap={2} justifyContent=\"center\">\r\n      {/* Top cards */}\r\n      <Grid item container gap={1.5} flexWrap=\"nowrap\">\r\n        {cardState?.map((item, index) => {\r\n          return (\r\n            <Grid key={`${item.id}-${index}`} item xs={3}>\r\n              <CardItem key={item.id} value={item} />\r\n            </Grid>\r\n          );\r\n        })}\r\n      </Grid>\r\n\r\n      <Grid item container gap={2} flexWrap=\"nowrap\">\r\n        <Grid item xs={8.5} sx={{ height: \"100%\" }}>\r\n          <Card\r\n            width=\"100%\"\r\n            variant=\"outlined\"\r\n            sx={{\r\n              p: 2,\r\n              height: \"100%\",\r\n              borderColor: \"transparent\",\r\n              borderRadius: \"15px\",\r\n            }}\r\n          >\r\n            <Grid\r\n              item\r\n              container\r\n              justifyContent=\"space-between\"\r\n              flexWrap=\"nowrap\"\r\n              sx={{ mb: 2 }}\r\n            >\r\n              <Grid item>\r\n                <CustomSelect\r\n                  variant=\"small\"\r\n                  value={partnersState}\r\n                  onChange={handleStateChange}\r\n                  options={partnersOptions}\r\n                  name=\"partners\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <CustomSelect\r\n                  variant=\"small\"\r\n                  value={options}\r\n                  onChange={handleOptionChange}\r\n                  options={\r\n                    partnersState === \"Partners\"\r\n                      ? partnerOptions\r\n                      : partnersState === \"Consultations\"\r\n                      ? consultationsOptions\r\n                      : partnersState === \"Finance\"\r\n                      ? financeOptions\r\n                      : newOptions\r\n                  }\r\n                  name=\"graph\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <LineChart\r\n              graphState={state}\r\n              optionsValue={\r\n                partnersState === \"Partners\"\r\n                  ? partnerOptions\r\n                  : partnersState === \"Consultations\"\r\n                  ? consultationsOptions\r\n                  : partnersState === \"Finance\"\r\n                  ? financeOptions\r\n                  : newOptions\r\n              }\r\n              type={\r\n                partnersState === \"Partners\"\r\n                  ? \"partners\"\r\n                  : partnersState === \"Consultations\"\r\n                  ? \"consultation\"\r\n                  : partnersState === \"Finance\"\r\n                  ? \"finance\"\r\n                  : \"\"\r\n              }\r\n              opt={options}\r\n            />\r\n          </Card>\r\n        </Grid>\r\n        <Grid item xs={3.5} sx={{ height: \"100%\" }}>\r\n          <Card\r\n            variant=\"outlined\"\r\n            sx={{\r\n              borderColor: \"transparent\",\r\n              height: \"100%\",\r\n              borderRadius: \"15px\",\r\n              display: \"flex\",\r\n              flexDirection: \"column\",\r\n              pb: 2,\r\n              // gap: \"4rem\",\r\n            }}\r\n          >\r\n            {/* <Grid container> */}\r\n            <Grid item container alignItems=\"center\" sx={{ p: 2.5, pb: 1 }}>\r\n              <Grid item flex={1}>\r\n                <Typography\r\n                  sx={{\r\n                    fontSize: \"1.8rem\",\r\n                    fontWeight: \"500\",\r\n                    lineHeight: \"25px\",\r\n                    letterSpacing: \"-0.01em\",\r\n                    color: \"#010101\",\r\n                  }}\r\n                >\r\n                  Financial Stats\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <CustomSelect\r\n                  variant=\"small\"\r\n                  value={financeState}\r\n                  onChange={handleFinanceStateChange}\r\n                  options={selectOptions}\r\n                  name=\"partners\"\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Divider sx={{ pt: 1 }} />\r\n            <Grid\r\n              item\r\n              alignItems=\"center\"\r\n              justifyContent=\"center\"\r\n              container\r\n              sx={{ m: \"auto\" }}\r\n            >\r\n              <CircularProgressBar\r\n                height=\"15rem\"\r\n                width=\"15rem\"\r\n                color={theme.palette.common.green}\r\n                trailColor={theme.palette.common.red}\r\n                value={totalEarning}\r\n              />\r\n            </Grid>\r\n\r\n            {amount.map((item, index) => {\r\n              const { color, value, name } = item;\r\n              return (\r\n                <Grid\r\n                  key={index}\r\n                  item\r\n                  container\r\n                  sx={{ p: 2 }}\r\n                  flexWrap=\"nowrap\"\r\n                >\r\n                  <Grid flex={1}>\r\n                    <Grid container alignItems=\"center\" gap={1}>\r\n                      <div\r\n                        className={`${classes.dottedCircle}\r\n                         ${classes.red}`}\r\n                      />\r\n                      <Typography\r\n                        sx={{\r\n                          fontWeight: 400,\r\n                          fontSize: \"1.4rem\",\r\n                          lineHeight: \"20px\",\r\n                          color: \"#606060\",\r\n                        }}\r\n                      >\r\n                        {name}\r\n                      </Typography>\r\n                      <Grid\r\n                        item\r\n                        sx={{\r\n                          borderRadius: \"100px\",\r\n                          color:\r\n                            percentageValue < 1\r\n                              ? \"#ED3237\"\r\n                              : theme.palette.success.main,\r\n                          backgroundColor:\r\n                            percentageValue < 1\r\n                              ? \"rgba(237, 50, 55, 0.1)\"\r\n                              : \"rgba(62, 165, 132, 0.1)\",\r\n                          padding: \"3px 8px\",\r\n                        }}\r\n                      >\r\n                        <Grid\r\n                          container\r\n                          alignItems=\"center\"\r\n                          justifyContent=\"center\"\r\n                        >\r\n                          <Typography\r\n                            variant=\"span\"\r\n                            sx={{ fontWeight: 500, fontSize: \"1rem\" }}\r\n                          >\r\n                            {\"0.5\"}\r\n                          </Typography>\r\n                          {percentageValue < 1 ? (\r\n                            <ArrowDownwardOutlined\r\n                              sx={{ color: \"inherit\", fontSize: \"1rem\" }}\r\n                            />\r\n                          ) : (\r\n                            <ArrowUpwardIcon\r\n                              sx={{ color: \"inherit\", fontSize: \"1rem\" }}\r\n                            />\r\n                          )}\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item justifySelf=\"center\">\r\n                    <Grid container>\r\n                      <Typography\r\n                        sx={{\r\n                          fontWeight: 500,\r\n                          fontSize: \"1.6rem\",\r\n                          lineHeight: \"20px\",\r\n                          color: \"#3F3F3F\",\r\n                        }}\r\n                      >\r\n                        NGN {value}\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Card>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nDashboardCharts.propTypes = {\r\n  data: PropTypes.object,\r\n  refetch: PropTypes.func,\r\n};\r\n\r\nexport default DashboardCharts;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\WaitingListTable.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\Notifications.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\HeaderProfile.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\HeaderContents.js",["1256","1257","1258","1259","1260","1261","1262","1263","1264","1265","1266"],"import React, { Fragment, useState, useEffect, useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport HeaderProfile from \"./HeaderProfile\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\nimport {\r\n  Typography,\r\n  Toolbar,\r\n  Grid,\r\n  ClickAwayListener,\r\n  Paper,\r\n} from \"@mui/material\";\r\n\r\nimport ArrowBackIcon from \"@mui/icons-material/ArrowBack\";\r\nimport { findAccounts } from \"components/graphQL/useQuery\";\r\nimport ArrowUpwardIcon from \"@mui/icons-material/ArrowUpward\";\r\nimport { Link, useLocation, useHistory } from \"react-router-dom\";\r\nimport { getPatients, DoctorCount } from \"components/graphQL/useQuery\";\r\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\r\nimport { patterns, predicateBreadcrumbFromUrl } from \"helpers/breadcrumb\";\r\nimport KeyboardArrowRightIcon from \"@mui/icons-material/KeyboardArrowRight\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  toolbar: {\r\n    alignItems: \"center\",\r\n    height: \"100%\",\r\n    flex: 1,\r\n    justifyContent: \"space-between\",\r\n  },\r\n  text: {\r\n    fontSize: \"clamp(2rem, 1.2vw, 1.6rem)\",\r\n    fontWeight: 500,\r\n    lineHeight: \"2.5rem\",\r\n    color: \"#2D2F39\",\r\n    letterSpacing: \"-0.01em\",\r\n  },\r\n  name: {\r\n    fontSize: \"clamp(1.5rem, 1.5vw, 2rem)\", //clamp(1.5rem, 1.5vw, 2.25rem)\r\n    fontWeight: 300,\r\n  },\r\n  titleWrapper: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  link: {\r\n    textDecoration: \"none\",\r\n  },\r\n  title: {\r\n    // fontSize: \"clamp(1.2rem, 1vw+1rem, 2.4rem )\",\r\n    fontSize: \"clamp(1.5rem, 2vw, 2.25rem)\",\r\n    color: theme.palette.common.black,\r\n    \"&.MuiTypography-root\": {\r\n      marginRight: \".5rem\",\r\n    },\r\n  },\r\n  history: {\r\n    \"&.MuiTypography-root\": {\r\n      display: \"flex\",\r\n      flexDirection: \"row\",\r\n      alignItems: \"center\",\r\n      color: \"#3E5EA9\",\r\n      fontSize: \"14px\",\r\n      fontWeight: 500,\r\n      lineHeight: \"20px\",\r\n    },\r\n  },\r\n\r\n  options: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"#ffffff\",\r\n    borderRadius: \"8px\",\r\n    position: \"absolute\",\r\n    top: 28,\r\n    right: 5,\r\n    zIndex: 1,\r\n\r\n    \"&>:last-child\": {\r\n      borderBottom: \"none\",\r\n    },\r\n  },\r\n\r\n  btn: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    backgroundColor: \"#fff\",\r\n    padding: \"1rem 2rem\",\r\n    fontSize: \"14px\",\r\n    fontWeight: 400,\r\n    color: \"#2D2F39\",\r\n    border: \"none\",\r\n    borderBottom: \"1px solid #E5E5E5\",\r\n    textAlign: \"left\",\r\n    whiteSpace: \"nowrap\",\r\n\r\n    \"&:hover\": {\r\n      color: \"#ffffff\",\r\n      backgroundColor: theme.palette.common.blue,\r\n    },\r\n  },\r\n\r\n  subtitle: {\r\n    color: theme.palette.common.green,\r\n    \"&.MuiTypography-root\": {\r\n      fontSize: \"clamp(0.6rem, 1vw + .5rem, 1.25rem)\",\r\n      marginLeft: \".5rem\",\r\n      alignSelf: \"flex-end\",\r\n    },\r\n  },\r\n  customSubHeaderWrapper: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\nconst CustomHeaderText = ({ title, total, path }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      flex={1}\r\n      flexDirection=\"column\"\r\n      justifyContent=\"center\"\r\n      rowGap={1}\r\n    >\r\n      <Grid item container flexWrap=\"nowrap\" alignItems=\"center\">\r\n        <Link to={`/${path}`} className={classes.link}>\r\n          <Typography variant=\"h3\" classes={{ root: classes.title }}>\r\n            {title}\r\n          </Typography>\r\n        </Link>\r\n        <ArrowUpwardIcon color=\"success\" />\r\n      </Grid>\r\n      <Grid item>\r\n        <Typography variant=\"h5\" className={classes.subtitle}>\r\n          {total} total\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nCustomHeaderText.propTypes = {\r\n  title: PropTypes.string,\r\n  total: PropTypes.number,\r\n  path: PropTypes.string,\r\n  data: PropTypes.object,\r\n};\r\n\r\nconst CustomHeaderTitle = ({ title }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.titleWrapper}>\r\n      {\r\n        <Grid>\r\n          <Typography variant=\"h3\" classes={{ root: classes.title }}>\r\n            {title}\r\n          </Typography>\r\n        </Grid>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nCustomHeaderTitle.propTypes = {\r\n  title: PropTypes.string,\r\n};\r\n\r\n// SUBMENU HEADERS\r\nconst CustomSubHeaderText = (props) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const {\r\n    title,\r\n    subTitle,\r\n    subSubTitle,\r\n    scopedSubTitle,\r\n    scopedMenu,\r\n    scopedSubMenu,\r\n    titleColor = theme.palette.common.red,\r\n  } = props;\r\n\r\n  return (\r\n    <div className={classes.customSubHeaderWrapper}>\r\n      <Typography variant=\"h3\" style={{ color: theme.palette.common.grey }}>\r\n        {title}\r\n      </Typography>\r\n      <KeyboardArrowRightIcon\r\n        style={{\r\n          fontSize: \"2rem\",\r\n          color: theme.palette.common.grey,\r\n        }}\r\n      />\r\n      <Typography\r\n        variant=\"h3\"\r\n        classes={{ root: classes.title }}\r\n        style={{\r\n          color: titleColor,\r\n        }}\r\n      >\r\n        {subTitle}\r\n      </Typography>\r\n      {scopedMenu !== 0 && (\r\n        <Fragment>\r\n          <KeyboardArrowRightIcon\r\n            style={{ fontSize: \"2rem\", color: theme.palette.common.grey }}\r\n          />\r\n          <Typography\r\n            variant=\"h3\"\r\n            classes={{ root: classes.title }}\r\n            style={{\r\n              color:\r\n                scopedSubMenu === 0\r\n                  ? theme.palette.common.red\r\n                  : theme.palette.common.grey,\r\n            }}\r\n          >\r\n            {subSubTitle}\r\n          </Typography>\r\n        </Fragment>\r\n      )}\r\n\r\n      {scopedSubMenu !== 0 && (\r\n        <Fragment>\r\n          <KeyboardArrowRightIcon\r\n            style={{ fontSize: \"2rem\", color: theme.palette.common.grey }}\r\n          />\r\n          <Typography\r\n            variant=\"h3\"\r\n            classes={{ root: classes.title }}\r\n            style={{ color: theme.palette.common.red }}\r\n          >\r\n            {scopedSubTitle}\r\n          </Typography>\r\n        </Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nCustomSubHeaderText.propTypes = {\r\n  title: PropTypes.string,\r\n  subTitle: PropTypes.string,\r\n  subSubTitle: PropTypes.string,\r\n  scopedSubTitle: PropTypes.string,\r\n  titleColor: PropTypes.string,\r\n  scopedMenu: PropTypes.number,\r\n  scopedSubMenu: PropTypes.number,\r\n  data: PropTypes.object,\r\n};\r\n\r\n// HEADER DYNAMIC RENDERING COMPONENT\r\nconst HeaderText = () => {\r\n  const classes = useStyles();\r\n  const { pathname } = useLocation();\r\n  const email = localStorage.getItem(\"email\");\r\n  const [profileAcc, setProfileAcc] = useState([]);\r\n  const [docCount, setDocCount] = useState([]);\r\n  const [patientCount, setPatientCount] = useState([]);\r\n\r\n  const breadcrumbs = useMemo(\r\n    () => predicateBreadcrumbFromUrl(patterns, pathname.substring(1)),\r\n    [pathname]\r\n  );\r\n\r\n  const [profile, { data }] = useLazyQuery(findAccounts, {\r\n    variables: { email },\r\n  });\r\n\r\n  const [patient, patientContent] = useLazyQuery(getPatients);\r\n  const [doctor, doctorContent] = useLazyQuery(DoctorCount, {\r\n    fetchPolicy: \"cache-first\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      profile();\r\n      if (data) {\r\n        setProfileAcc(data.accounts.data[0]);\r\n      }\r\n    })();\r\n  }, [profile, email, data]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      patient();\r\n      doctor();\r\n      if (patientContent.data)\r\n        setPatientCount(patientContent.data.profiles.pageInfo.totalDocs);\r\n      if (doctorContent.data) setDocCount(doctorContent.data.DoctorCount);\r\n    })();\r\n  }, [doctor, patient, patientContent.data, doctorContent.data]);\r\n\r\n  const counts = {\r\n    Doctors: docCount,\r\n    Patients: patientCount,\r\n  };\r\n\r\n  switch (pathname) {\r\n    case \"/dashboard\":\r\n      return (\r\n        <Typography className={classes.text} gutterBottom>\r\n          Dashboard\r\n        </Typography>\r\n      );\r\n    case \"/\":\r\n      return (\r\n        <Typography className={classes.text} gutterBottom>\r\n          Dashboard\r\n        </Typography>\r\n      );\r\n    default:\r\n      return <Breadcrumb breadcrumbs={breadcrumbs} counts={counts} />;\r\n  }\r\n};\r\n\r\nHeaderText.propTypes = {\r\n  selectedMenu: PropTypes.number,\r\n};\r\n\r\nconst HeaderContent = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Toolbar className={classes.toolbar}>\r\n      <HeaderText />\r\n\r\n      <HeaderProfile />\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nHeaderContent.propTypes = {};\r\n\r\nconst Crumb = ({ breadcrumbs }) => {\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const previousText = breadcrumbs[breadcrumbs.length - 2].pageTitle;\r\n  const previousIndex = breadcrumbs[breadcrumbs.length - 2].pageIndex;\r\n\r\n  const handleClickAway = () => {\r\n    setIsOpen(false);\r\n  };\r\n\r\n  return (\r\n    <Grid container alignItems=\"center\" sx={{ position: \"relative\" }}>\r\n      <Grid item>\r\n        <Grid\r\n          container\r\n          alignItems=\"center\"\r\n          onClick={() => history.go(previousIndex)}\r\n          sx={{ cursor: \"pointer\" }}\r\n        >\r\n          <ArrowBackIcon\r\n            fontSize=\"small\"\r\n            sx={{ marginRight: \"0.5rem\", color: \"#3E5EA9\" }}\r\n          />{\" \"}\r\n          <Typography variant=\"p\" classes={{ root: classes.history }}>\r\n            Back to {previousText}{\" \"}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n      {breadcrumbs.length > 2 ? (\r\n        <ClickAwayListener onClickAway={handleClickAway}>\r\n          <Grid\r\n            onClick={() => setIsOpen(!isOpen)}\r\n            sx={{\r\n              display: \"flex\",\r\n              alignItems: \"center\",\r\n              marginLeft: \"0.5rem\",\r\n              cursor: \"pointer\",\r\n            }}\r\n          >\r\n            <KeyboardArrowDownIcon\r\n              fontSize=\"medium\"\r\n              sx={{ color: \"#3E5EA9\" }}\r\n            />\r\n          </Grid>\r\n        </ClickAwayListener>\r\n      ) : null}\r\n      {isOpen && (\r\n        <Paper className={classes.options}>\r\n          {breadcrumbs.map((crumb, index) => {\r\n            const isLast = index === breadcrumbs.length - 1;\r\n            const borderRadius =\r\n              index === breadcrumbs.length - 2\r\n                ? \"0px 0px 8px 8px\"\r\n                : index === 0\r\n                ? \"8px 8px 0px 0px\"\r\n                : \"\";\r\n            if (isLast) {\r\n              return null;\r\n            } else {\r\n              return (\r\n                <button\r\n                  key={index}\r\n                  className={classes.btn}\r\n                  style={{ borderRadius: borderRadius }}\r\n                  onClick={() => history.go(crumb.pageIndex)}\r\n                >\r\n                  {crumb.pageTitle}\r\n                </button>\r\n              );\r\n            }\r\n          })}\r\n        </Paper>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nconst Breadcrumb = ({ breadcrumbs = [], counts = {} }) => {\r\n  const classes = useStyles();\r\n  const text = breadcrumbs[breadcrumbs.length - 1]?.pageTitle || \"\";\r\n\r\n  return (\r\n    <Grid container justifyContent=\"flex-start\" alignItems=\"center\">\r\n      {breadcrumbs.length < 2 ? (\r\n        <Grid container alignContent=\"center\">\r\n          <Grid item>\r\n            <CustomHeaderTitle title={text} />\r\n          </Grid>\r\n          {counts[text] && (\r\n            <Grid\r\n              item\r\n              sx={{ marginLeft: \"0.5rem\", display: \"flex\" }}\r\n              alignContent=\"center\"\r\n            >\r\n              <Grid container alignContent=\"center\">\r\n                <ArrowUpwardIcon color=\"success\" />\r\n                <Typography variant=\"h2\" className={classes.subtitle}>\r\n                  {counts[text]} total\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          )}\r\n        </Grid>\r\n      ) : (\r\n        <Grid>\r\n          <Crumb breadcrumbs={breadcrumbs} />\r\n          <CustomHeaderTitle title={text} />\r\n        </Grid>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nBreadcrumb.propTypes = {\r\n  breadcrumbs: PropTypes.array,\r\n  counts: PropTypes.object,\r\n};\r\n\r\nexport default HeaderContent;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\EnhancedTableAction.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\AvailabilityTable.js",["1267","1268","1269","1270","1271","1272","1273","1274","1275","1276","1277","1278","1279","1280","1281"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Subscription.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\UserTypes.js",["1282","1283","1284","1285","1286","1287","1288","1289","1290","1291","1292","1293","1294","1295"],"import React, { useState, useEffect } from \"react\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { partnersHeadCells2 } from \"components/Utilities/tableHeaders\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport * as Yup from \"yup\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { searchOptions } from \"helpers/mockData\";\r\nimport { getSearchPlaceholder } from \"helpers/func\";\r\nimport {\r\n  Grid,\r\n  TableRow,\r\n  Button,\r\n  Avatar,\r\n  Typography,\r\n  TableCell,\r\n  Checkbox,\r\n} from \"@mui/material\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport { EnhancedTable, EmptyTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\n// import AddIcon from \"@mui/icons-material/Add\";\r\nimport { UserTypeModal } from \"components/modals/UserTypeModal\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport DeleteOrDisable from \"components/modals/DeleteOrDisable\";\r\nimport { getUserTypes } from \"components/graphQL/useQuery\";\r\nimport { deleteUserType } from \"components/graphQL/Mutation\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { EditDelBtn } from \"components/Buttons/EditDelBtn\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  FormLabel: {\r\n    fontSize: \"1.6rem\",\r\n    color: theme.palette.common.dark,\r\n  },\r\n  link: {\r\n    textDecoration: \"none\",\r\n  },\r\n  title: {\r\n    fontSize: \"clamp(1rem, 2vw, 1.2rem)\",\r\n    color: theme.palette.common.red,\r\n    \"&:hover\": {\r\n      textDecoration: \"underline\",\r\n    },\r\n  },\r\n  btn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"10rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      color: \"rgb(0 0 0)\",\r\n      fontWeight: 400,\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n  \"&.MuiButton-root\": {\r\n    ...theme.typography.btn,\r\n    background: theme.palette.common.black,\r\n    width: \"100%\",\r\n  },\r\n  tableBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      height: \"3rem\",\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"2rem\",\r\n      boxShadow: \"none\",\r\n\r\n      \"&:hover\": {\r\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.5rem\",\r\n      },\r\n    },\r\n  },\r\n  redBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightRed,\r\n      color: theme.palette.common.red,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.error.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n  greenBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.success.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n\r\n  checkbox: {\r\n    \"& .MuiSvgIcon-root\": {\r\n      fontSize: 28,\r\n    },\r\n    \"&.Mui-checked\": {\r\n      color: \"green !important\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst UserTypes = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n  const [deleteUser] = useMutation(deleteUserType);\r\n  // const handleDialogOpen = () => {\r\n  //   setIsOpen(true);\r\n  // };\r\n  const handleDeleteOpenDialog = (id) => {\r\n    setId(id);\r\n    setdeleteModal(true);\r\n  };\r\n  const onConfirm = async () => {\r\n    try {\r\n      await deleteUser({\r\n        variables: { id },\r\n        refetchQueries: [{ query: getUserTypes }],\r\n      });\r\n    } catch (error) {\r\n      console.error(error.message);\r\n    }\r\n  };\r\n\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [id, setId] = useState(null);\r\n  const [deleteModal, setdeleteModal] = useState(false);\r\n  const [singleData, setSingleData] = useState();\r\n  const [fetchUserTypes, { loading, data, error, variables /*refetch*/ }] =\r\n    useLazyQuery(getUserTypes);\r\n  useEffect(() => {\r\n    fetchUserTypes({\r\n      variables: {\r\n        first: pageInfo?.limit,\r\n      },\r\n    });\r\n  }, [fetchUserTypes, pageInfo]);\r\n\r\n  // const onChange = async (e) => {\r\n  //   setSearchHcp(e);\r\n  //   if (e == \"\") {\r\n  //     refetch();\r\n  //   } else refetch({ recipient: e });\r\n  // };\r\n  const [userType, setUsertypes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setPageInfo(data.getUserTypes.pageInfo);\r\n      setUsertypes(data.getUserTypes.userType);\r\n    }\r\n  }, [data]);\r\n  const { rowsPerPage, selectedRows, page } = useSelector(\r\n    (state) => state.tables\r\n  );\r\n  const { setSelectedRows } = useActions();\r\n  const initialValues = {\r\n    name: \"\",\r\n    type: \"\",\r\n    description: \"\",\r\n  };\r\n\r\n  // const [searchHcp, setSearchHcp] = useState(\"\");\r\n  const [isOpens, setIsOpens] = useState(false);\r\n  const handleDialogCloses = () => setIsOpens(false);\r\n  const [editId, setEditId] = useState(null);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const handleEditCloseDialog = () => {\r\n    setEdit(false);\r\n  };\r\n  const [alert, setAlert] = useState(null);\r\n  const handleDialogOpens1 = () => setIsOpens(true);\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    userTypeId: \"\",\r\n  };\r\n  const onSubmit1 = async (values) => {\r\n    // const { name, userTypeId } = values;\r\n    // await provider.refetch({\r\n    //   name,\r\n    //   userTypeId,\r\n    // });\r\n    handleDialogCloses();\r\n  };\r\n  const validationSchema1 = Yup.object({\r\n    name: Yup.string(\"Enter your hospital\"),\r\n    userTypeId: Yup.string(\"ENter your userTypeId\"),\r\n  });\r\n  const [edit, setEdit] = useState(false);\r\n  const handleDialogClose = async () => {\r\n    setIsOpen(false);\r\n    setEditId(null);\r\n    setSingleData();\r\n  };\r\n  const handleEditOpenDialog = (id) => {\r\n    setEdit(true);\r\n    setEditId(id);\r\n  };\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        height=\"100%\"\r\n      >\r\n        <Grid\r\n          item\r\n          gap={{ sm: 4, xs: 2 }}\r\n          container\r\n          direction={{ sm: \"row\", xs: \"column\" }}\r\n        >\r\n          <Grid\r\n            item\r\n            flex={{ sm: 1, xs: 1 }}\r\n            container\r\n            alignItems=\"center\"\r\n            flexWrap=\"nowrap\"\r\n            gap={1}\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Grid item></Grid>\r\n            {/* <Grid item>\r\n              <CustomButton\r\n                endIcon={<AddIcon />}\r\n                onClick={handleDialogOpens1}\r\n                title=\"Add new User Types\"\r\n                type={buttonType}\r\n              />\r\n            </Grid> */}\r\n          </Grid>\r\n        </Grid>\r\n        <TableLayout\r\n          search={\r\n            <CompoundSearch\r\n              queryParams={{\r\n                fetchData: fetchUserTypes,\r\n                variables,\r\n                loading,\r\n                newVariables: {},\r\n              }}\r\n              setPageInfo={(data) =>\r\n                setPageInfo(data?.profiles?.pageInfo || {})\r\n              }\r\n              setProfiles={(data) => setUsertypes(data?.profiles?.data || [])}\r\n              getSearchPlaceholder={(filterBy) =>\r\n                getSearchPlaceholder(filterBy)\r\n              }\r\n              filterOptions={searchOptions}\r\n            />\r\n          }\r\n        >\r\n          {userType.length > 0 ? (\r\n            <Grid item container height=\"100%\" direction=\"column\">\r\n              <EnhancedTable\r\n                headCells={partnersHeadCells2}\r\n                rows={userType}\r\n                paginationLabel=\"Patients per page\"\r\n                hasCheckbox={true}\r\n                changeLimit={async (e) => {\r\n                  changeTableLimit(fetchUserTypes, { first: e });\r\n                }}\r\n                dataPageInfo={pageInfo}\r\n                handlePagination={async (page) => {\r\n                  await handlePageChange(fetchUserTypes, page, pageInfo, {});\r\n                }}\r\n              >\r\n                {userType\r\n                  // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                  .map((row, index) => {\r\n                    const { _id, icon, name, providerCount, provider } = row;\r\n                    const isItemSelected = isSelected(_id, selectedRows);\r\n                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                    return (\r\n                      <TableRow\r\n                        hover\r\n                        role=\"checkbox\"\r\n                        aria-checked={isItemSelected}\r\n                        tabIndex={-1}\r\n                        key={_id}\r\n                        selected={isItemSelected}\r\n                      >\r\n                        <TableCell padding=\"checkbox\">\r\n                          <Checkbox\r\n                            onClick={() =>\r\n                              handleSelectedRows(\r\n                                _id,\r\n                                selectedRows,\r\n                                setSelectedRows\r\n                              )\r\n                            }\r\n                            color=\"primary\"\r\n                            checked={isItemSelected}\r\n                            inputProps={{\r\n                              \"aria-labelledby\": labelId,\r\n                            }}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" className={classes.tableCell}>\r\n                          <div\r\n                            style={{\r\n                              height: \"100%\",\r\n                              display: \"flex\",\r\n                              alignItems: \"center\",\r\n                            }}\r\n                          >\r\n                            <span style={{ marginRight: \"1rem\" }}>\r\n                              <Avatar\r\n                                src={icon}\r\n                                sx={{ width: 24, height: 24 }}\r\n                              />\r\n                            </span>\r\n                            <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" className={classes.tableCell}>\r\n                          <Link\r\n                            to={\r\n                              name === \"Heala User\"\r\n                                ? `/user-type/heala/${_id}`\r\n                                : name === \"Hospital Enrollee\"\r\n                                ? `/user-type/hospital/${_id}`\r\n                                : name === \"HMO Enrollee\"\r\n                                ? `/user-type/hmo/${_id}`\r\n                                : `/user-type/${_id}`\r\n                            }\r\n                            className={classes.link}\r\n                          >\r\n                            <Typography\r\n                              variant=\"h3\"\r\n                              classes={{ root: classes.title }}\r\n                            >\r\n                              {providerCount ? providerCount : \"NA\"}\r\n                            </Typography>\r\n                          </Link>\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" className={classes.tableCell}>\r\n                          <div\r\n                            style={{\r\n                              height: \"100%\",\r\n                              display: \"flex\",\r\n                              alignItems: \"center\",\r\n                              justifyContent: \"flex-end\",\r\n                            }}\r\n                          >\r\n                            <EditDelBtn\r\n                              onHandleClick={() =>\r\n                                handleEditOpenDialog(row._id)\r\n                              }\r\n                              type=\"edit\"\r\n                              text=\"Edit\"\r\n                            />\r\n                          </div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={partnersHeadCells2}\r\n              paginationLabel=\"Providers  per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </Grid>\r\n      <Modals\r\n        isOpen={isOpen}\r\n        title=\"Add new User Types\"\r\n        rowSpacing={5}\r\n        handleClose={handleDialogClose}\r\n      >\r\n        <UserTypeModal\r\n          handleDialogClose={handleDialogClose}\r\n          type=\"add\"\r\n          setAlert={setAlert}\r\n          editId={editId}\r\n          initialValues={initialValues}\r\n        />\r\n      </Modals>\r\n      {/* edit Modal */}\r\n      <Modals\r\n        isOpen={edit}\r\n        title=\"Edit User Type\"\r\n        rowSpacing={5}\r\n        handleClose={handleEditCloseDialog}\r\n      >\r\n        <UserTypeModal\r\n          handleDialogClose={handleEditCloseDialog}\r\n          type=\"edit\"\r\n          editId={editId}\r\n          setAlert={setAlert}\r\n          initialValues={initialValues}\r\n          setSingleData={setSingleData}\r\n          singleData={singleData}\r\n        />\r\n      </Modals>\r\n\r\n      <DeleteOrDisable\r\n        open={deleteModal}\r\n        setOpen={setdeleteModal}\r\n        title=\"Delete UserTypes\"\r\n        onConfirm={onConfirm}\r\n        confirmationMsg=\"delete usertypes\"\r\n        btnValue=\"Delete\"\r\n      />\r\n\r\n      <Modals\r\n        isOpen={isOpens}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        handleClose={handleDialogCloses}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={validationSchema1}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" rowGap={4}>\r\n                  <Grid item container>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      name=\"name\"\r\n                      label=\"Hospital Name\"\r\n                      placeholder=\"Enter Hospital Name\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item container>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      name=\"userTypeId\"\r\n                      label=\"User Type\"\r\n                      placeholder=\"Enter User Type\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <CustomButton\r\n                      title=\"Apply Filter\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserTypes;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\WaitingList.js",["1296"],"import React from \"react\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport WaitingListTable from \"components/layouts/WaitingListTable\";\r\nimport PreviousButton from \"components/Utilities/PreviousButton\";\r\n\r\nconst WaitingList = (props) => {\r\n  return (\r\n    <Grid container direction=\"column\">\r\n      <Grid item style={{ marginBottom: \"3rem\" }}>\r\n        <PreviousButton path=\"/appointments\" />\r\n      </Grid>\r\n      <Grid item>\r\n        <Typography variant=\"h2\">Waiting List</Typography>\r\n      </Grid>\r\n      <Grid item style={{ marginTop: \"5rem\" }}>\r\n        <WaitingListTable\r\n          path=\"/appointments/waiting-list\" /* onClick={() => setWaitingListMenu(1)} */\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default WaitingList;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\WhiteLabel.js",["1297"],"import React from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { ReactComponent as Administrator } from \"assets/images/administrator.svg\";\r\nimport { ReactComponent as ConsulationIcon } from \"assets/images/consultation.svg\";\r\nimport { Card } from \"components/Utilities\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  parentGrid: {\r\n    textDecoration: \"none\",\r\n    color: theme.palette.primary.main,\r\n\r\n    \"& > .MuiGrid-root.MuiGrid-container\": {\r\n      backgroundColor: \"#ffffff\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst WhiteLabel = () => {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        alignItems=\"space-between\"\r\n        gap=\"5rem\"\r\n        paddingY=\"2rem\"\r\n        justifyContent={{ sm: \"center\", md: \"center\" }}\r\n      >\r\n        <Grid item container md={5} sm={5} xs={12}>\r\n          <Grid item container flexDirection=\"column\">\r\n            <Link to=\"/label/provider\" style={{ textDecoration: \"none\" }}>\r\n              <Card\r\n                alt=\"providers \"\r\n                title=\"Providers\"\r\n                background={theme.palette.common.lightGreen}\r\n              >\r\n                <Administrator fill={theme.palette.common.green} />\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container md={5} sm={5} xs={12}>\r\n          <Grid item container flexDirection=\"column\">\r\n            <Link to=\"/label/types\" style={{ textDecoration: \"none\" }}>\r\n              <Card\r\n                alt=\"User Types\"\r\n                title=\"User Types\"\r\n                background={theme.palette.common.lightRed}\r\n              >\r\n                <ConsulationIcon fill={theme.palette.common.red} />\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WhiteLabel;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\NoData.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ViewHCP.js",["1298","1299","1300","1301","1302","1303","1304"],"import React, { useEffect, useState } from \"react\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport { Grid, Typography, Avatar } from \"@mui/material\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  verification,\r\n  getVerification,\r\n  getCategory,\r\n} from \"components/graphQL/useQuery\"; //\r\nimport {\r\n  rejectVerification,\r\n  updateDoctorProvider,\r\n} from \"components/graphQL/Mutation\";\r\nimport { verifyHCP } from \"components/graphQL/Mutation\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { FormikControl } from \"components/validation\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Success from \"components/modals/Success\";\r\nimport { handleError, showSuccessMsg } from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  parentGridWrapper: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.1)\",\r\n    \"&:not(:last-of-type)\": {\r\n      marginBottom: \"5rem\",\r\n    },\r\n  },\r\n\r\n  cardContainer: {\r\n    \"&.MuiGrid-root\": {\r\n      display: \"grid\",\r\n      rowGap: \"2rem\",\r\n      \"& > *\": {\r\n        flex: 1,\r\n        flexDirection: \"column\",\r\n        gap: \"10px\",\r\n      },\r\n    },\r\n    \"@media (max-width:1200px)\": {\r\n      gap: \"10px\",\r\n    },\r\n  },\r\n  gridsWrapper: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    padding: \"1rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.3rem !important\",\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n      borderRadius: \"1.5rem\",\r\n    },\r\n  },\r\n\r\n  cardGrid: {\r\n    borderRadius: \"1rem\",\r\n    minHeight: \"14.1rem\",\r\n    paddingInline: \"1rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\r\n  },\r\n\r\n  infoBadge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"1.5rem\",\r\n      color: theme.palette.common.green,\r\n    },\r\n  },\r\n\r\n  link: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    fontSize: \"1.25rem\",\r\n    color: theme.palette.common.green,\r\n    border: `1px solid ${theme.palette.common.lightGrey}`,\r\n    padding: \".75rem\",\r\n    borderRadius: \"1.5rem\",\r\n    textDecoration: \"none\",\r\n  },\r\n\r\n  linkIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      fontSize: \"1.25rem\",\r\n      color: theme.palette.common.green,\r\n      marginLeft: \"1.2rem\",\r\n    },\r\n  },\r\n\r\n  buttonsGridWrapper: {\r\n    marginTop: \"5rem !important\",\r\n    height: \"16.1rem\",\r\n  },\r\n\r\n  title: {\r\n    \"&.MuiTypography-root\": {\r\n      color: theme.palette.common.grey,\r\n      // marginRight: \"2rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst ViewHCP = () => {\r\n  const { viewId } = useParams();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const { loading, data, error } = useQuery(verification, {\r\n    variables: { id: viewId },\r\n  });\r\n\r\n  const history = useHistory();\r\n  const [respondData, setRespondData] = useState([]);\r\n\r\n  const [reject] = useMutation(rejectVerification);\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const [updateState, setUpdateState] = useState(\"Update Provider\");\r\n  const [update] = useMutation(updateDoctorProvider);\r\n  const [submit, setSubmit] = useState(false);\r\n  const handleDialogCloses = () => setOpen(false);\r\n  const handleUpdateProVider = async (value) => {\r\n    try {\r\n      setSubmit(true);\r\n      await update({\r\n        variables: {\r\n          dociId: respondData && respondData.doctorData.dociId,\r\n          providerId: value,\r\n        },\r\n      });\r\n      setSubmit(false);\r\n      setUpdateState(\"Updated\");\r\n    } catch (err) {\r\n      setSubmit(false);\r\n      console.log(err);\r\n    }\r\n  };\r\n  const [cancel, setCancel] = useState(false);\r\n  const handleDialogOpen = () => {\r\n    setCancel(true);\r\n  };\r\n  const initialValues = {\r\n    reason: \"\",\r\n  };\r\n  const validationSchema = Yup.object({\r\n    reason: Yup.string(\"Enter Reason \").required(\"Reason is required\"),\r\n  });\r\n  const onSubmit = async (values) => {\r\n    try {\r\n      const { reason } = values;\r\n      const trimedReason = reason.trim();\r\n      console.log(\"trimmed reason\", trimedReason);\r\n      await reject({\r\n        variables: {\r\n          reason: trimedReason,\r\n          id: viewId,\r\n        },\r\n        refetchQueries: [\r\n          {\r\n            query: getVerification,\r\n          },\r\n        ],\r\n      });\r\n      setCancel(false);\r\n      showSuccessMsg(\r\n        enqueueSnackbar,\r\n        Typography,\r\n        \"Reject verification successful.\"\r\n      );\r\n      setOpen(true);\r\n      setTimeout(() => {\r\n        setOpen(false);\r\n        history.push(\"/verification\");\r\n      }, 3000);\r\n    } catch (error) {\r\n      console.log(\"Error from reject verification\", error);\r\n      handleError(error, enqueueSnackbar);\r\n    }\r\n  };\r\n\r\n  const theme = useTheme();\r\n\r\n  const trasparentButton = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: \"#868686\",\r\n  };\r\n  const RedButton = {\r\n    background: \"red\",\r\n    hover: \"red\",\r\n    active: \"red\",\r\n    disabled: \"#FF8484\",\r\n  };\r\n  const [ref, setRef] = useState(null);\r\n  const [get, { data: da }] = useLazyQuery(getCategory);\r\n  useEffect(() => {\r\n    if (data) {\r\n      setRespondData(data.getVerification);\r\n      setRef(data.getVerification.reference?.reference_code);\r\n    }\r\n  }, [data, ref]);\r\n  const [verifyState, setVerifyState] = useState(\r\n    respondData.status ? \"Doctor Verified!\" : \"Verify Doctor\"\r\n  );\r\n  const [process, setProcess] = useState(undefined);\r\n  useEffect(() => {\r\n    if (ref) {\r\n      get({\r\n        variables: {\r\n          id: ref,\r\n        },\r\n      });\r\n    }\r\n    if (da && da.getProvider !== null) {\r\n      setProcess(da?.getProvider.name);\r\n    } else {\r\n      setProcess(undefined);\r\n    }\r\n  }, [ref, da, get]);\r\n\r\n  useEffect(() => {\r\n    if (respondData.status) {\r\n      setVerifyState(\"Doctor Verified!!\");\r\n    }\r\n  }, [verifyState, respondData.status]);\r\n  const {\r\n    qualification,\r\n    license,\r\n    alumni_association,\r\n    reference,\r\n    doctorData,\r\n    yearbook,\r\n    status,\r\n    // eslint-disable-next-line\r\n  } = respondData;\r\n\r\n  const [verify, { data: verifyData }] = useMutation(verifyHCP);\r\n  const [button, setButtonValue] = useState(respondData.status); //button\r\n\r\n  useEffect(() => {\r\n    if (verifyData && verifyData.verifyHCP.status) {\r\n      setVerifyState(\"Doctor Verified!!\");\r\n      setButtonValue(verifyData.verifyHCP.status);\r\n    }\r\n  }, [verify, status, button, verifyState, verifyData]);\r\n\r\n  const handleVerifyDoctor = async () => {\r\n    try {\r\n      await verify({\r\n        variables: {\r\n          id: viewId,\r\n        },\r\n        refetchQueries: [\r\n          {\r\n            query: verification,\r\n            variables: {\r\n              id: viewId,\r\n            },\r\n          },\r\n        ],\r\n      });\r\n    } catch (err) {\r\n      console.error(err);\r\n    }\r\n  };\r\n  const classes = useStyles();\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <>\r\n      <Grid container direction=\"column\" rowGap={4} sx={{ overFlow: \"hidden\" }}>\r\n        <Grid\r\n          item\r\n          direction={{ md: \"row\", xs: \"column\", sm: \"row\" }}\r\n          width=\"100%\"\r\n          justifyContent=\"space-between\"\r\n          gap={{ md: 2, sm: 2, xs: 2 }}\r\n          container\r\n          flexWrap={{ md: \"nowrap\", sm: \"wrap\" }}\r\n          alignItems=\"center\"\r\n          padding={{ sm: \"2.5rem\", xs: \"1.5rem\", md: \"3rem\" }}\r\n          className={`${classes.cardGrid} ${classes.firstContainer}`}\r\n        >\r\n          {/* <Grid item container sx={{ background: \"yellow\" }} justifyContent=\"center\" height=\"100%\"> */}\r\n          <Grid item>\r\n            <Avatar\r\n              src={doctorData ? doctorData.picture : displayPhoto}\r\n              sx={{\r\n                minWidth: \"150px\",\r\n                minHeight: \"150px\",\r\n                marginRight: \"2rem\",\r\n              }}\r\n            />\r\n          </Grid>\r\n          {/* </Grid> */}\r\n          <Grid\r\n            item\r\n            flex={1}\r\n            container\r\n            display=\"grid\"\r\n            gridTemplateColumns={{\r\n              md: \"repeat(4,minmax(15rem,1fr))\",\r\n              sm: \"repeat(3,minmax(15rem,auto))\",\r\n              xs: \"repeat(2,1fr)\",\r\n            }}\r\n            className={classes.cardContainer}\r\n          >\r\n            <Grid item container>\r\n              <Grid item>\r\n                <Typography variant=\"body1\">Doctor Name</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h4\">\r\n                  {doctorData\r\n                    ? `${doctorData.firstName} ${doctorData.lastName}`\r\n                    : \"No Doctor\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container>\r\n              <Grid item>\r\n                <Typography variant=\"body1\">Hospital</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h4\">\r\n                  {doctorData && doctorData.hospital !== \"\"\r\n                    ? doctorData.hospital\r\n                    : \"No Hospital\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container>\r\n              <Grid item>\r\n                <Typography variant=\"body1\">Gender:</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h4\">\r\n                  {doctorData ? `${doctorData.gender} ` : \"Not Specified\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container>\r\n              <Grid item>\r\n                <Typography variant=\"body1\">Medical ID:</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h4\">\r\n                  {doctorData ? `${doctorData.dociId.split(\"-\")[1]}` : \"No ID \"}{\" \"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container>\r\n              <Grid item>\r\n                <Typography variant=\"body1\">Specialization:</Typography>\r\n              </Grid>\r\n              <Grid item width=\"100%\">\r\n                <Typography variant=\"h4\">\r\n                  {doctorData\r\n                    ? `${doctorData.specialization}`\r\n                    : \"No specialization \"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container>\r\n              <Grid item>\r\n                <Typography variant=\"body1\">DOB:</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"h4\">\r\n                  {doctorData ? `${dateMoment(doctorData.dob)}` : \"No DOB\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container>\r\n              <Grid item>\r\n                <Typography variant=\"body1\">Status</Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography\r\n                  variant=\"h4\"\r\n                  style={{\r\n                    color:\r\n                      status === true\r\n                        ? theme.palette.common.green\r\n                        : theme.palette.common.red,\r\n                    width: \"max-content\",\r\n                  }}\r\n                >\r\n                  {status ? \"Verified\" : \"Not Verified\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              container\r\n              className=\"btn\"\r\n              alignItems=\"center\"\r\n              gridColumnStart={{ sm: 2, xs: 2, md: 3 }}\r\n              sx={{ justifyContent: \"center !important\" }}\r\n            >\r\n              <CustomButton\r\n                title=\"View Doctor Profile\"\r\n                type={trasparentButton}\r\n                width=\"100%\"\r\n                component={Link}\r\n                to={`/hcps/${doctorData && doctorData._id}`}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {/* qualifications */}\r\n        <Grid\r\n          container\r\n          display=\"grid\"\r\n          gap={3}\r\n          gridTemplateColumns={{\r\n            md: \"repeat(2,1fr)\",\r\n            sm: \"repeat(2,1fr)\",\r\n            xs: \"repeat(1,1fr)\",\r\n          }}\r\n        >\r\n          <Grid item>\r\n            <Grid\r\n              container\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n              direction=\"column\"\r\n              gap={{ sm: 3, md: 4, xs: 3 }}\r\n              className={classes.cardGrid}\r\n            >\r\n              <Grid item>\r\n                <Typography variant=\"h4\">Qualification</Typography>\r\n              </Grid>\r\n              {qualification?.degree !== \"\" && qualification?.image !== \"\" ? (\r\n                <Grid\r\n                  item\r\n                  container\r\n                  gap={2}\r\n                  justifyContent={{ xs: \"left\", sm: \"center\" }}\r\n                >\r\n                  {qualification?.degree && (\r\n                    <Grid item>\r\n                      <Typography variant=\"h5\" className={classes.link}>\r\n                        {qualification.degree}\r\n                      </Typography>\r\n                    </Grid>\r\n                  )}\r\n                  {qualification?.year && (\r\n                    <Typography variant=\"h5\" item className={classes.link}>\r\n                      {dateMoment(qualification.year).slice(-4)}\r\n                    </Typography>\r\n                  )}\r\n                  {qualification?.image && (\r\n                    <a\r\n                      href={qualification.image}\r\n                      rel=\"noreferrer\"\r\n                      target=\"_blank\"\r\n                      className={classes.link}\r\n                    >\r\n                      <span>Qualification PNG</span>\r\n                    </a>\r\n                  )}\r\n                </Grid>\r\n              ) : (\r\n                <Typography variant=\"h5\" item className={classes.link}>\r\n                  Not Provided\r\n                </Typography>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n          {/* 2 */}\r\n          <Grid item>\r\n            <Grid\r\n              container\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n              direction=\"column\"\r\n              gap={{ sm: 3, md: 4, xs: 3 }}\r\n              className={classes.cardGrid}\r\n            >\r\n              <Grid item>\r\n                <Typography variant=\"h5\">License</Typography>\r\n              </Grid>\r\n              {license && license.number ? (\r\n                <Grid\r\n                  item\r\n                  container\r\n                  alignItems=\"center\"\r\n                  flexWrap=\"wrap\"\r\n                  justifyContent={{\r\n                    md: \"center\",\r\n                    sm: \"center\",\r\n                    xs: \"flex-start\",\r\n                  }}\r\n                  gap={2}\r\n                >\r\n                  {license.number && (\r\n                    <Grid item className={classes.link}>\r\n                      {license.number}\r\n                    </Grid>\r\n                  )}\r\n                  {license.type && (\r\n                    <Grid item className={classes.link}>\r\n                      {license.type}\r\n                    </Grid>\r\n                  )}\r\n                  {license.image && (\r\n                    <Grid item>\r\n                      <a\r\n                        href={license.image}\r\n                        rel=\"noreferrer\"\r\n                        className={classes.link}\r\n                        target=\"_blank\"\r\n                      >\r\n                        <span>IMG</span>\r\n                      </a>\r\n                    </Grid>\r\n                  )}\r\n                </Grid>\r\n              ) : (\r\n                <Grid item className={classes.link}>\r\n                  Not Provided\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n\r\n          {/* 3 */}\r\n          <Grid\r\n            item\r\n            container\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            direction=\"column\"\r\n            gap={{ sm: 3, md: 4, xs: 3 }}\r\n            className={classes.cardGrid}\r\n          >\r\n            <Grid item>\r\n              <Typography variant=\"h4\">Year Book</Typography>\r\n            </Grid>\r\n            {yearbook && Object.keys(yearbook).length > 0 && yearbook.image ? (\r\n              <Grid\r\n                item\r\n                container\r\n                justifyContent={{\r\n                  md: \"center\",\r\n                  sm: \"center\",\r\n                  xs: \"flex-start\",\r\n                }}\r\n                gap={2}\r\n                alignItems=\"center\"\r\n                flexWrap=\"wrap\"\r\n              >\r\n                {yearbook && yearbook?.graduation_year !== \"Invalid date\" ? (\r\n                  <Typography className={classes.link} variant=\"h5\">\r\n                    {yearbook?.graduation_year?.slice(0, 4)}\r\n                  </Typography>\r\n                ) : (\r\n                  <Grid item>\r\n                    <Typography className={classes.link} variant=\"h5\">\r\n                      Not Provided\r\n                    </Typography>\r\n                  </Grid>\r\n                )}\r\n                {yearbook.image && (\r\n                  <Grid item>\r\n                    <a\r\n                      href={yearbook.image}\r\n                      rel=\"noreferrer\"\r\n                      target=\"_blank\"\r\n                      className={classes.link}\r\n                    >\r\n                      <span>Qualification PNG</span>\r\n                    </a>\r\n                  </Grid>\r\n                )}\r\n              </Grid>\r\n            ) : (\r\n              <Grid item>\r\n                <Typography className={classes.link} variant=\"h5\">\r\n                  Not Provided\r\n                </Typography>\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n\r\n          {/* 4 */}\r\n          <Grid\r\n            item\r\n            container\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            direction=\"column\"\r\n            gap={{ sm: 3, md: 4, xs: 3 }}\r\n            className={classes.cardGrid}\r\n          >\r\n            <Grid item>\r\n              <Typography variant=\"h4\">Alumni</Typography>\r\n            </Grid>\r\n            {alumni_association?.facebook_group_name ? (\r\n              <Grid\r\n                item\r\n                container\r\n                justifyContent={{\r\n                  md: \"center\",\r\n                  sm: \"center\",\r\n                  xs: \"flex-start\",\r\n                }}\r\n                gap={2}\r\n              >\r\n                {alumni_association.facebook_group_name && (\r\n                  <a\r\n                    href={alumni_association.image}\r\n                    rel=\"noreferrer\"\r\n                    target=\"_blank\"\r\n                    className={classes.link}\r\n                  >\r\n                    <span>{alumni_association.facebook_group_name}</span>\r\n                  </a>\r\n                )}\r\n                {alumni_association.instagram_handle && (\r\n                  <a\r\n                    href={alumni_association.image}\r\n                    rel=\"noreferrer\"\r\n                    target=\"_blank\"\r\n                    className={classes.link}\r\n                  >\r\n                    <span>{alumni_association.instagram_handle}</span>\r\n                  </a>\r\n                )}\r\n              </Grid>\r\n            ) : (\r\n              <Typography variant=\"h5\" className={classes.link}>\r\n                Not Provided\r\n              </Typography>\r\n            )}\r\n          </Grid>\r\n\r\n          <Grid\r\n            item\r\n            container\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            direction=\"column\"\r\n            gap={{ sm: 3, md: 4, xs: 3 }}\r\n            className={classes.cardGrid}\r\n          >\r\n            <Grid item>\r\n              <Typography variant=\"h4\">Reference ID</Typography>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              container\r\n              // justifyContent=\"center\"\r\n              justifyContent={{\r\n                md: \"center\",\r\n                sm: \"space-between\",\r\n                xs: \"space-around\",\r\n              }}\r\n              gap={2}\r\n              flexWrap=\"nowrap\"\r\n            >\r\n              {reference?.reference_code ? (\r\n                <Typography variant=\"h5\" className={classes.link}>\r\n                  {process ? process : reference?.reference_code}\r\n                </Typography>\r\n              ) : (\r\n                <Typography variant=\"h5\" className={classes.link}>\r\n                  Not Provided\r\n                </Typography>\r\n              )}\r\n              {reference?.reference_code && (\r\n                <Grid item>\r\n                  <CustomButton\r\n                    title={\r\n                      doctorData?.providerId === reference?.reference_code ||\r\n                      updateState === \"Updated\"\r\n                        ? \"Updated\"\r\n                        : \"Update Provider\"\r\n                    }\r\n                    type={trasparentButton}\r\n                    width=\"100%\"\r\n                    isSubmitting={submit}\r\n                    onClick={() =>\r\n                      handleUpdateProVider(reference?.reference_code)\r\n                    }\r\n                    disabled={\r\n                      doctorData?.providerId === reference?.reference_code\r\n                        ? true\r\n                        : false\r\n                    }\r\n                  />\r\n                </Grid>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* 5 */}\r\n\r\n        <Grid\r\n          item\r\n          container\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n          gap={2}\r\n          flexWrap=\"nowrap\"\r\n          className={classes.cardGrid}\r\n        >\r\n          <Grid item>\r\n            <CustomButton\r\n              title=\"Reject Verification\"\r\n              type={RedButton}\r\n              onClick={handleDialogOpen}\r\n              width=\"100%\"\r\n            />\r\n          </Grid>\r\n          <Grid item>\r\n            <CustomButton\r\n              title={verifyState}\r\n              type={trasparentButton}\r\n              disabled={verifyState === \"Doctor Verified!!\"}\r\n              onClick={handleVerifyDoctor}\r\n              width=\"100%\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Modals\r\n        isOpen={cancel}\r\n        width={{ sm: \"30vw\", md: \"30vw\", xs: \"90vw\" }}\r\n        title=\"Reject Doctor\"\r\n        rowSpacing={5}\r\n        handleClose={() => setCancel(false)}\r\n      >\r\n        <Formik\r\n          onSubmit={onSubmit}\r\n          validationSchema={validationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          initialValues={initialValues}\r\n          enableReinitialize\r\n        >\r\n          {({ isSubmitting, dirty, isValid }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid container>\r\n                  <Grid item container>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      label=\"State a Reason\"\r\n                      name=\"reason\"\r\n                      placeholder=\"Enter reason\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item container sx={{ flexGrow: 1, marginTop: \"10rem\" }}>\r\n                    <CustomButton\r\n                      title=\"Reject Verification\"\r\n                      type={trasparentButton}\r\n                      width=\"100%\"\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n      <Success\r\n        open={open}\r\n        handleDialogClose={handleDialogCloses}\r\n        title=\"\"\r\n        type=\"fail\"\r\n        confirmationMsg=\" Doctor Verification failed\"\r\n        btnValue=\"Continue\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ViewHCP;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\WaitingListDetails.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ViewReferral.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\VideoCall.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Illness.js",["1305","1306"],"import React, { useState, useCallback, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport { Button, Checkbox, TableCell, TableRow, Grid } from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport DeleteOrDisable from \"components/modals/DeleteOrDisable\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport { illnesssHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport { getIllness, getIllnesses } from \"components/graphQL/useQuery\";\r\nimport { deleteIllness } from \"components/graphQL/Mutation\";\r\nimport { CustomButton, Loader } from \"components/Utilities\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\nimport { IllnessModal } from \"components/modals\";\r\n\r\nconst Illness = () => {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const { displayAlert } = useAlert();\r\n  const { setSelectedRows } = useActions();\r\n  const [partner, setPartners] = useState([]);\r\n  const [deleteId, setDeleteId] = useState(\"\");\r\n  const [illness, setIllness] = useState(\"\");\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [openEditFilter, setOpenEditFilter] = useState(false);\r\n  const [openDelete, setOpenDelete] = useState(false);\r\n  const [openFilter, setOpenFilter] = useState(false);\r\n  const [fetchIllness, { loading, data, error }] = useLazyQuery(getIllnesses);\r\n  const [getIllnes, { data: illnessData }] = useLazyQuery(getIllness);\r\n  const [deleteIllnes] = useMutation(deleteIllness);\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const handleEditClose = () => setOpenEditFilter(false);\r\n  const handleClose = () => setOpenFilter(false);\r\n\r\n  const confirmDelete = async () => {\r\n    try {\r\n      await deleteIllnes({\r\n        variables: {\r\n          id: deleteId,\r\n        },\r\n        refetchQueries: [{ query: getIllnesses }],\r\n      });\r\n      displayAlert(\"success\", \"Illness deleted\");\r\n      setDeleteId(\"\");\r\n    } catch (err) {\r\n      displayAlert(\"error\", err);\r\n    }\r\n  };\r\n  const darkButtonType = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const initialValues = {\r\n    name: \"\",\r\n    description: \"\",\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    const data = response?.data;\r\n    if (data) {\r\n      setPartners(data?.getIllnesses?.data || []);\r\n      setPageInfo(data?.getIllnesses?.pageInfo || defaultPageInfo);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchIllness({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n      },\r\n    });\r\n    //eslint-disable-next-line\r\n  }, []);\r\n  useEffect(() => {\r\n    if (data) {\r\n      setPartners(data?.getIllnesses?.data || []);\r\n      setPageInfo(data?.getIllnesses?.pageInfo || defaultPageInfo);\r\n    }\r\n  }, [data]);\r\n  const handleEdit = useCallback(\r\n    async (id) => {\r\n      setOpenEditFilter(true);\r\n      console.log(id);\r\n      await getIllnes({\r\n        variables: {\r\n          id,\r\n        },\r\n      });\r\n    },\r\n    //eslint-disable-next-line\r\n    []\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (illnessData) {\r\n      const { name, description, createdAt, _id } = illnessData?.getIllness;\r\n      setIllness({\r\n        id: _id,\r\n        name,\r\n        description,\r\n        createdAt,\r\n      });\r\n    }\r\n  }, [illnessData]);\r\n\r\n  const handleDeleteIllness = (id) => {\r\n    setOpenDelete(true);\r\n    setDeleteId(id);\r\n  };\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={{ sm: 4, xs: 2 }}\r\n        flexWrap=\"nowrap\"\r\n        height=\"100%\"\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          gap={2}\r\n          direction={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n        >\r\n          <Grid\r\n            item\r\n            container\r\n            justifyContent=\"flex-end\"\r\n            alignItems=\"center\"\r\n            flex={{ sm: 1, xs: 1, md: 1 }}\r\n          >\r\n            <Grid item>\r\n              <CustomButton\r\n                endIcon={<PersonAddAlt1Icon />}\r\n                title=\"Create Illness\"\r\n                type={darkButtonType}\r\n                onClick={() => setOpenFilter(true)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {partner?.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={illnesssHeadCells}\r\n              rows={partner}\r\n              paginationLabel=\"Partner per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchIllness, {\r\n                  first: e,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchIllness, page, pageInfo, {});\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {partner.map((row, index) => {\r\n                const isItemSelected = isSelected(row.id, selectedRows);\r\n                const { name, createdAt, _id, description } = row;\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={row._id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(\r\n                            row.id,\r\n                            selectedRows,\r\n                            setSelectedRows\r\n                          )\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ minWidth: \"15rem\" }}\r\n                    >\r\n                      {dateMoment(createdAt)}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      {name}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      {description}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        disableRipple\r\n                        onClick={() => handleEdit(_id)}\r\n                        className={`${classes.tableBtn} ${classes.greenBtn}`}\r\n                        endIcon={<EditIcon color=\"success\" />}\r\n                      >\r\n                        Edit\r\n                      </Button>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        disableRipple\r\n                        className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                        onClick={() => handleDeleteIllness(_id)}\r\n                        endIcon={<DeleteIcon color=\"error\" />}\r\n                      >\r\n                        Delete\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={illnesssHeadCells}\r\n            paginationLabel=\"Doctors per page\"\r\n          />\r\n        )}\r\n      </Grid>\r\n      <IllnessModal\r\n        initialValues={initialValues}\r\n        type=\"add\"\r\n        open={openFilter}\r\n        handleClose={handleClose}\r\n      />\r\n      <IllnessModal\r\n        initialValues={illness}\r\n        type=\"edit\"\r\n        open={openEditFilter}\r\n        handleClose={handleEditClose}\r\n      />\r\n      <DeleteOrDisable\r\n        open={openDelete}\r\n        setOpen={setOpenDelete}\r\n        title=\"Delete Illness\"\r\n        confirmationMsg=\"delete\"\r\n        btnValue=\"Delete\"\r\n        onConfirm={confirmDelete}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Illness;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\DoctorEarning.js",["1307","1308","1309"],"import React, { useEffect, useState } from \"react\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Checkbox,\r\n  TableRow,\r\n  TableCell,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport { timeMoment, dateMoment } from \"components/Utilities/Time\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getMyEarnings } from \"components/graphQL/useQuery\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { payoutHeaders } from \"components/Utilities/tableHeaders\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\n// import Filter from \"components/Forms/Filters\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  fetchMoreData,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  iconWrapper: {\r\n    width: 20,\r\n    height: 20,\r\n    borderRadius: \"50%\",\r\n    display: \"grid\",\r\n    placeContent: \"center\",\r\n    marginLeft: \"1rem\",\r\n    background: theme.palette.common.lightGreen,\r\n  },\r\n  button: {\r\n    \"&.css-1zf5oc-MuiButtonBase-root-MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"10rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.css-1jilxo7-MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst DoctorEarning = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { hcpId } = useParams();\r\n  const { displayAlert } = useAlert();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [payout, setPayout] = useState([]);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n\r\n  // const [statusFilterValue, setStatusFilterValue] = useState(\"\");\r\n  const [fetchPayout, { loading, error }] = useLazyQuery(getMyEarnings);\r\n  // refetch, variables\r\n  useEffect(() => {\r\n    try {\r\n      fetchPayout({\r\n        variables: { first: pageInfo?.limit, doctor: hcpId },\r\n      }).then(({ data }) => {\r\n        if (!data) throw Error(\"Couldn't fetch doctors payout data\");\r\n        setPageInfo(data?.getMyEarnings?.pageInfo);\r\n        setPayout(data?.getMyEarnings?.data);\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }, [fetchPayout, pageInfo?.limit, hcpId]);\r\n\r\n  // const onFilterStatusChange = async (value) => {\r\n  //   try {\r\n  //     deleteVar(variables);\r\n  //     setStatusFilterValue(value);\r\n  //     const filterVariables = { status: value };\r\n\r\n  //     filterData(filterVariables, {\r\n  //       fetchData: fetchPayout,\r\n  //       refetch: refetch,\r\n  //       variables: variables,\r\n  //     })\r\n  //       .then((data) => {\r\n  //         setPayout(data?.getMyEarnings?.data || []);\r\n  //         setPageInfo(data?.getMyEarnings?.pageInfo || {});\r\n  //       })\r\n  //       .catch(() => {\r\n  //         refresh(setStatusFilterValue, \"\");\r\n  //       });\r\n  //   } catch (error) {\r\n  //     console.error(error);\r\n  //     refresh(setStatusFilterValue, \"\");\r\n  //   }\r\n  // };\r\n\r\n  // const refresh = async (setFilterValue, defaultVal) => {\r\n  //   displayAlert(\"error\", `Something went wrong while filtering. Try again.`);\r\n  //   setFilterValue(defaultVal);\r\n  //   deleteVar(variables);\r\n  //   refetch()\r\n  //     .then(({ data }) => {\r\n  //       setPayout(data?.getMyEarnings?.data || []);\r\n  //       setPageInfo(data?.getMyEarnings?.pageInfo || {});\r\n  //     })\r\n  //     .catch((error) => {\r\n  //       console.error(error);\r\n  //       displayAlert(\"error\", `Failed to get patients data, Try again`);\r\n  //     });\r\n  // };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    const data = response?.data;\r\n    try {\r\n      if (data) {\r\n        setPageInfo(data?.getMyEarnings?.pageInfo || defaultPageInfo);\r\n        setPayout(data?.getMyEarnings?.data || []);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      displayAlert(\"error\", errMsg);\r\n    }\r\n  };\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <Grid container direction=\"column\" rowSpacing={2}>\r\n      <>\r\n        <Grid\r\n          item\r\n          container\r\n          justifyContent=\"space-between\"\r\n          style={{ paddingBottom: \"3rem\" }}\r\n        >\r\n          <Grid item container spacing={3} alignItems=\"center\">\r\n            <Grid item flex={1}>\r\n              <Typography noWrap variant=\"h1\" color=\"#2D2F39\">\r\n                Doctors Earnings Table\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {payout.length > 0 ? (\r\n          <Grid item container>\r\n            <EnhancedTable\r\n              headCells={payoutHeaders}\r\n              rows={payout}\r\n              paginationLabel=\"Earning per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = await changeTableLimit(fetchPayout, {\r\n                  first: e,\r\n                  doctor: hcpId,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = await handlePageChange(\r\n                  fetchPayout,\r\n                  page,\r\n                  pageInfo,\r\n                  { doctor: hcpId }\r\n                );\r\n                await setTableData(res, \"Failed to change table page.\");\r\n              }}\r\n              fetchData={fetchPayout}\r\n              handleChangePage={fetchMoreData}\r\n            >\r\n              {payout.map((row, index) => {\r\n                const { balance, createdAt, _id, doctorData } = row;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.black }}\r\n                    >\r\n                      {dateMoment(createdAt)}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.black }}\r\n                    >\r\n                      {timeMoment(createdAt)}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      {doctorData ? (\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ marginRight: \"1rem\" }}>\r\n                            <Avatar\r\n                              alt={`Display Photo of ${doctorData?.firstName}`}\r\n                              src={\r\n                                doctorData ? doctorData?.picture : displayPhoto\r\n                              }\r\n                              sx={{ width: 24, height: 24 }}\r\n                            />\r\n                          </span>\r\n                          <span style={{ fontSize: \"1.25rem\" }}>\r\n                            {doctorData\r\n                              ? `${doctorData?.lastName} ${doctorData?.lastName}`\r\n                              : \"No Value\"}\r\n                          </span>\r\n                        </div>\r\n                      ) : (\r\n                        \"No Name\"\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.red }}\r\n                    >\r\n                      {balance}\r\n                    </TableCell>\r\n                    {/* <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Chip\r\n                        label={status ? status : \"No Value\"}\r\n                        className={classes.badge}\r\n                        style={{\r\n                          background:\r\n                            status === \"Success\"\r\n                              ? theme.palette.common.lightGreen\r\n                              : status === \"Failed\"\r\n                              ? theme.palette.common.lightGreen\r\n                              : theme.palette.common.lightRed,\r\n                          color:\r\n                            status === \"Success\"\r\n                              ? theme.palette.common.green\r\n                              : status === \"Failed\"\r\n                              ? theme.palette.common.danger\r\n                              : theme.palette.common.red,\r\n                        }}\r\n                      />\r\n                    </TableCell> */}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={payoutHeaders}\r\n            paginationLabel=\"Earnings  per page\"\r\n          />\r\n        )}\r\n      </>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default DoctorEarning;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\DoctorPayout.js",["1310","1311","1312","1313","1314","1315"],"import React, { useEffect, useState } from \"react\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Chip,\r\n  Checkbox,\r\n  TableRow,\r\n  TableCell,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport { timeMoment, dateMoment } from \"components/Utilities/Time\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getPayoutData } from \"components/graphQL/useQuery\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { payoutHeader } from \"components/Utilities/tableHeaders\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport Filter from \"components/Forms/Filters\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { defaultPageInfo, payoutFilterBy } from \"helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  deleteVar,\r\n  fetchMoreData,\r\n  filterData,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  iconWrapper: {\r\n    width: 20,\r\n    height: 20,\r\n    borderRadius: \"50%\",\r\n    display: \"grid\",\r\n    placeContent: \"center\",\r\n    marginLeft: \"1rem\",\r\n    background: theme.palette.common.lightGreen,\r\n  },\r\n  button: {\r\n    \"&.css-1zf5oc-MuiButtonBase-root-MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"10rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.css-1jilxo7-MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst DoctorPayout = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { displayAlert } = useAlert();\r\n  const { hcpId } = useParams();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [payout, setPayout] = useState([]);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n\r\n  const [statusFilterValue, setStatusFilterValue] = useState(\"\");\r\n  const [fetchPayout, { loading, error, refetch, variables }] =\r\n    useLazyQuery(getPayoutData);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      fetchPayout({\r\n        variables: { first: pageInfo?.limit, doctor: hcpId },\r\n      }).then(({ data }) => {\r\n        if (!data) throw Error(\"Couldn't fetch doctors payout data\");\r\n        setPageInfo(data?.getEarningStats?.payoutData?.PageInfo);\r\n        setPayout(data?.getEarningStats?.payoutData?.data);\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }, [fetchPayout, pageInfo?.limit, hcpId]);\r\n\r\n  const onFilterStatusChange = async (value) => {\r\n    try {\r\n      deleteVar(variables);\r\n      setStatusFilterValue(value);\r\n      const filterVariables = { status: value };\r\n\r\n      filterData(filterVariables, {\r\n        fetchData: fetchPayout,\r\n        refetch: refetch,\r\n        variables: variables,\r\n      })\r\n        .then((data) => {\r\n          setPayout(data?.getEarningStats?.payoutData?.data || []);\r\n          setPageInfo(data?.getEarningStats?.payoutData?.PageInfo || {});\r\n        })\r\n        .catch(() => {\r\n          refresh(setStatusFilterValue, \"\");\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setStatusFilterValue, \"\");\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\r\n    setFilterValue(defaultVal);\r\n\r\n    deleteVar(variables);\r\n\r\n    refetch()\r\n      .then(({ data }) => {\r\n        setPayout(data?.getEarningStats?.payoutData?.data || []);\r\n        setPageInfo(data?.getEarningStats?.payoutData?.PageInfo || {});\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", \"Failed to get patients data, Try again\");\r\n      });\r\n  };\r\n  const setTableData = async (response, errMsg) => {\r\n    const data = response?.data;\r\n    try {\r\n      if (data) {\r\n        setPageInfo(\r\n          data?.getEarningStats?.payoutData?.PageInfo || defaultPageInfo\r\n        );\r\n        setPayout(data?.getEarningStats?.payoutData?.data || []);\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      displayAlert(\"error\", error.message);\r\n    }\r\n  };\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <Grid container direction=\"column\" rowSpacing={2}>\r\n      <>\r\n        <Grid\r\n          item\r\n          container\r\n          justifyContent=\"space-between\"\r\n          style={{ paddingBottom: \"3rem\" }}\r\n        >\r\n          <Grid item container spacing={3} alignItems=\"center\">\r\n            <Grid item flex={1}>\r\n              <Typography noWrap variant=\"h1\" color=\"#2D2F39\">\r\n                Doctors Payout Table\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Filter\r\n                onHandleChange={(e) => onFilterStatusChange(e?.target?.value)}\r\n                onClickClearBtn={() => onFilterStatusChange(\"\")}\r\n                options={payoutFilterBy}\r\n                name=\"status\"\r\n                placeholder=\"None\"\r\n                value={statusFilterValue}\r\n                hasClearBtn={true}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {payout.length > 0 ? (\r\n          <Grid item container>\r\n            <EnhancedTable\r\n              headCells={payoutHeader}\r\n              rows={payout}\r\n              paginationLabel=\"payout per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = await changeTableLimit(fetchPayout, {\r\n                  first: e,\r\n                  doctor: hcpId,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = await handlePageChange(\r\n                  fetchPayout,\r\n                  page,\r\n                  pageInfo,\r\n                  { doctor: hcpId }\r\n                );\r\n                await setTableData(res, \"Failed to change table page.\");\r\n              }}\r\n              fetchData={fetchPayout}\r\n              handleChangePage={fetchMoreData}\r\n            >\r\n              {payout?.map((row, index) => {\r\n                const { amount, createdAt, status, _id, doctorData } = row;\r\n                const data = doctorData || [];\r\n                const { firstName, lastName, picture } = data[0] || {};\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.black }}\r\n                    >\r\n                      {dateMoment(createdAt)}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.black }}\r\n                    >\r\n                      {timeMoment(createdAt)}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      {row?.doctorData && row?.doctorData[0] !== {} ? (\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ marginRight: \"1rem\" }}>\r\n                            <Avatar\r\n                              alt={`Display Photo of ${firstName}`}\r\n                              src={picture ? picture : displayPhoto}\r\n                              sx={{ width: 24, height: 24 }}\r\n                            />\r\n                          </span>\r\n                          <span style={{ fontSize: \"1.25rem\" }}>{`${\r\n                            firstName && firstName\r\n                          } ${lastName && lastName}`}</span>\r\n                        </div>\r\n                      ) : (\r\n                        \"No Name\"\r\n                      )}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.red }}\r\n                    >\r\n                      {amount}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Chip\r\n                        label={status}\r\n                        className={classes.badge}\r\n                        style={{\r\n                          background:\r\n                            status === \"Success\"\r\n                              ? theme.palette.common.lightGreen\r\n                              : status === \"Failed\"\r\n                              ? theme.palette.common.lightGreen\r\n                              : theme.palette.common.lightRed,\r\n                          color:\r\n                            status === \"Success\"\r\n                              ? theme.palette.common.green\r\n                              : status === \"Failed\"\r\n                              ? theme.palette.common.danger\r\n                              : theme.palette.common.red,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={payoutHeader}\r\n            paginationLabel=\"Payout  per page\"\r\n          />\r\n        )}\r\n      </>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default DoctorPayout;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SinglePatient.js",["1316","1317"],"import React, { useEffect, useState, memo, createElement } from \"react\";\r\nimport { Grid, Typography, Avatar } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport PersonRemoveIcon from \"@mui/icons-material/PersonRemove\";\r\n// import TrendingUpIcon from \"@mui/icons-material/TrendingUp\";\r\nimport { Card, CustomButton, Loader } from \"components/Utilities\";\r\nimport DisablePatient from \"components/modals/DeleteOrDisable\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { findProfile } from \"components/graphQL/useQuery\";\r\nimport { ReactComponent as ConsultationIcon } from \"assets/images/consultation.svg\";\r\nimport { ReactComponent as UserIcon } from \"assets/images/user.svg\";\r\nimport { ReactComponent as PrescriptionIcon } from \"assets/images/prescription.svg\";\r\nimport AssignmentIcon from \"@mui/icons-material/Assignment\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\n// import ReferPatient from \"components/modals/ReferPatient\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { getPatients } from \"components/graphQL/useQuery\";\r\nimport { deleteProfile } from \"components/graphQL/Mutation\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridContainer: {\r\n    paddingBottom: \"10rem\",\r\n  },\r\n\r\n  gridsWrapper: {\r\n    \"@media(max-width:600px)\": {\r\n      \"&.MuiGrid-root\": {\r\n        flexDirection: \"column\",\r\n        rowGap: \"1.5rem\",\r\n        alignItems: \"center\",\r\n        \"& .detailsContainer\": {\r\n          justifyContent: \"space-around\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n  parentGrid: {\r\n    textDecoration: \"none\",\r\n    color: theme.palette.primary.main,\r\n\r\n    \"& > .MuiGrid-root.MuiGrid-container\": {\r\n      backgroundColor: \"#ffffff\",\r\n    },\r\n  },\r\n\r\n  icon: {\r\n    \"&.css-1o5jd4y-MuiSvgIcon-root\": {\r\n      fontSize: \"4rem\",\r\n    },\r\n  },\r\n  \"@media(max-width:600px)\": {\r\n    \"&.MuiGrid-root\": {\r\n      flexDirection: \"column\",\r\n      rowGap: \"1.5rem\",\r\n    },\r\n  },\r\n  container: {\r\n    \"&.MuiGrid-root\": {\r\n      paddingTop: \"5rem\",\r\n      flexWrap: \"wrap\",\r\n      \"@media(max-width:600px)\": {\r\n        \"&\": {\r\n          padding: 0,\r\n          paddingTop: \"1rem\",\r\n          // flexDirection: \"column\",\r\n          rowGap: \"1.5rem\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n}));\r\nconst SinglePatient = () => {\r\n  const history = useHistory();\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { patientId } = useParams();\r\n  const [disableUser] = useMutation(deleteProfile);\r\n  const onConfirm = async () => {\r\n    try {\r\n      await disableUser({\r\n        variables: { id: patientId },\r\n        refetchQueries: [{ query: getPatients }],\r\n      });\r\n\r\n      history.push(\"/patients\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const cards2 = [\r\n    {\r\n      id: 1,\r\n      title: \"Patient Profile\",\r\n      background: theme.palette.common.lightRed,\r\n      path: \"profile\",\r\n      icon: UserIcon,\r\n      fill: theme.palette.common.red,\r\n    },\r\n    {\r\n      id: 4,\r\n      title: \"Medical Records\",\r\n      background: theme.palette.common.lightGreen,\r\n      path: \"records\",\r\n      icon: AssignmentIcon,\r\n      fill: theme.palette.common.green,\r\n    },\r\n    {\r\n      id: 5,\r\n      title: \"Consultations\",\r\n      background: theme.palette.common.lightRed,\r\n      path: \"consultations\",\r\n      icon: UserIcon,\r\n      fill: theme.palette.common.red,\r\n    },\r\n    {\r\n      id: 3,\r\n      title: \"Prescriptions\",\r\n      background: theme.palette.common.lightRed,\r\n      path: \"prescriptions\",\r\n      icon: PrescriptionIcon,\r\n      fill: theme.palette.common.red,\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Appointments\",\r\n      background: theme.palette.common.lightGreen,\r\n      path: \"appointments\",\r\n      icon: ConsultationIcon,\r\n      fill: theme.palette.common.green,\r\n    },\r\n    /* {\r\n      id: 6,\r\n      title: \"Medications\",\r\n      background: theme.palette.common.lightGreen,\r\n      path: \"medications\",\r\n      icon: UserIcon,\r\n      fill: theme.palette.common.green,\r\n    }, */\r\n  ];\r\n\r\n  const trasparentButton = {\r\n    background: \"transparent\",\r\n    hover: theme.palette.common.danger,\r\n    active: \"#f4f4f4\",\r\n  };\r\n\r\n  const [patientProfile, setPatientProfile] = useState(\"\");\r\n  const { loading, error, data } = useQuery(findProfile, {\r\n    variables: {\r\n      id: patientId,\r\n    },\r\n    fetchPolicy: \"cache-and-network\",\r\n    nextFetchPolicy: \"cache-only\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      localStorage.setItem(\"userDociId\", data.profile.dociId);\r\n      setPatientProfile(data.profile);\r\n    }\r\n  }, [data, patientId]);\r\n\r\n  const [openDisablePatient, setOpenDisablePatient] = useState(false);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  else {\r\n    return (\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        className={classes.gridContainer}\r\n        gap={2}\r\n      >\r\n        <Grid\r\n          item\r\n          justifyContent=\"space-between\"\r\n          alignItems=\"center\"\r\n          container\r\n          p={2}\r\n          className={classes.gridsWrapper}\r\n        >\r\n          <Grid\r\n            item\r\n            alignItems=\"center\"\r\n            container\r\n            gap={2}\r\n            className=\"detailsContainer\"\r\n            sx={{ flex: 1 }}\r\n          >\r\n            <Grid item>\r\n              <Avatar\r\n                alt={patientProfile.firstName}\r\n                src={patientProfile.image ? patientProfile.image : displayPhoto}\r\n                sx={{ width: 50, height: 50 }}\r\n              />\r\n            </Grid>\r\n\r\n            <Typography variant=\"h2\">\r\n              {patientProfile.firstName} {patientProfile.lastName}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<PersonRemoveIcon />}\r\n              title=\"Disable Patient\"\r\n              type={trasparentButton}\r\n              textColor={theme.palette.common.danger}\r\n              textColorOnHover=\"#ffffff\"\r\n              onClick={() => setOpenDisablePatient(true)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          <Grid\r\n            container\r\n            justifyContent=\"center\"\r\n            p={2}\r\n            flexWrap=\"wrap\"\r\n            // sx={{ background: \"yellow\" }}\r\n            columnSpacing={{ md: 6, sm: 4, xs: 4 }}\r\n            rowSpacing={{ md: 6, sm: 4, xs: 4 }}\r\n            // spacing={2}\r\n          >\r\n            {cards2.map((card) => (\r\n              <Grid\r\n                key={card.id}\r\n                item\r\n                xs={10}\r\n                sm={6}\r\n                md={4}\r\n                className={classes.parentGrid}\r\n                component={Link}\r\n                // gap={3}\r\n                p={0}\r\n                to={`/patients/${patientId}/${card.path}`}\r\n              >\r\n                <Card title={card.title} header=\"h4\">\r\n                  {createElement(card.icon, {\r\n                    fill: card.fill,\r\n                    color: \"success\",\r\n                    style: { fontSize: \"clamp(2.5rem, 3vw,4rem)\" },\r\n                  })}\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n        <DisablePatient\r\n          open={openDisablePatient}\r\n          setOpen={setOpenDisablePatient}\r\n          title=\"Delete Patient\"\r\n          btnValue=\"delete\"\r\n          onConfirm={onConfirm}\r\n          confirmationMsg=\"disable Patient\"\r\n        />\r\n      </Grid>\r\n    );\r\n  }\r\n};\r\n\r\nexport default memo(SinglePatient);\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SingleHCP.js",["1318","1319"],"import React, { useState, useEffect, createElement } from \"react\";\r\nimport { Grid, Typography, Avatar } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { doctor, getDoctorsProfile } from \"components/graphQL/useQuery\";\r\nimport PersonRemoveIcon from \"@mui/icons-material/PersonRemove\";\r\nimport PaymentsIcon from \"@mui/icons-material/Payments\";\r\nimport { Card, CustomButton, Loader } from \"components/Utilities\";\r\nimport DisablePatient from \"components/modals/DeleteOrDisable\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { ReactComponent as ConsultationIcon } from \"assets/images/consultation.svg\";\r\nimport { ReactComponent as UserIcon } from \"assets/images/user.svg\";\r\nimport { ReactComponent as CalendarIcon } from \"assets/images/calendar.svg\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { deleteDoctor } from \"components/graphQL/Mutation\";\r\n//\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridContainer: {\r\n    paddingBottom: \"10rem\",\r\n  },\r\n\r\n  gridsWrapper: {\r\n    \"@media(max-width:600px)\": {\r\n      \"&.MuiGrid-root\": {\r\n        flexDirection: \"column\",\r\n        rowGap: \"1.5rem\",\r\n        alignItems: \"center\",\r\n        \"& .detailsContainer\": {\r\n          justifyContent: \"space-around\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n  parentGrid: {\r\n    textDecoration: \"none\",\r\n    color: theme.palette.primary.main,\r\n\r\n    \"& > .MuiGrid-root.MuiGrid-container\": {\r\n      backgroundColor: \"#ffffff\",\r\n    },\r\n  },\r\n\r\n  icon: {\r\n    \"&.css-1o5jd4y-MuiSvgIcon-root\": {\r\n      fontSize: \"4rem\",\r\n    },\r\n  },\r\n  \"@media(max-width:600px)\": {\r\n    \"&.MuiGrid-root\": {\r\n      flexDirection: \"column\",\r\n      rowGap: \"1.5rem\",\r\n    },\r\n  },\r\n  container: {\r\n    \"&.MuiGrid-root\": {\r\n      paddingTop: \"5rem\",\r\n      flexWrap: \"wrap\",\r\n      \"@media(max-width:600px)\": {\r\n        \"&\": {\r\n          padding: 0,\r\n          paddingTop: \"1rem\",\r\n          // flexDirection: \"column\",\r\n          rowGap: \"1.5rem\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n}));\r\nconst SingleHCP = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const { hcpId } = useParams();\r\n  const history = useHistory();\r\n  const [disableUser] = useMutation(deleteDoctor);\r\n  const [doctorProfile, setDoctorProfile] = useState(\"\");\r\n  const [openDisableDoctor, setOpenDisableDoctor] = useState(false);\r\n  const profile = useQuery(doctor, {\r\n    variables: {\r\n      id: hcpId,\r\n    },\r\n  });\r\n  const onConfirm = async () => {\r\n    try {\r\n      await disableUser({\r\n        variables: { id: hcpId },\r\n        refetchQueries: [{ query: getDoctorsProfile }],\r\n      });\r\n      history.push(\"/hcps\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (profile.data) {\r\n      setDoctorProfile(profile.data.doctorProfile);\r\n    }\r\n  }, [profile.data, hcpId]);\r\n\r\n  const cards2 = [\r\n    {\r\n      id: 1,\r\n      title: \"Doctor Profile\",\r\n      background: theme.palette.common.lightRed,\r\n      path: \"profile\",\r\n      icon: UserIcon,\r\n      fill: theme.palette.common.red,\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Availability\",\r\n      background: theme.palette.common.lightGreen,\r\n      path: \"availability\",\r\n      icon: ConsultationIcon,\r\n      fill: theme.palette.common.green,\r\n    },\r\n    {\r\n      id: 3,\r\n      title: \"Consultations\",\r\n      background: theme.palette.common.lightRed,\r\n      path: \"consultations\",\r\n      icon: ConsultationIcon,\r\n      fill: theme.palette.common.red,\r\n    },\r\n    {\r\n      id: 4,\r\n      title: \"Earnings\",\r\n      background: theme.palette.common.lightGreen,\r\n      path: \"earnings\",\r\n      icon: PaymentsIcon,\r\n      fill: theme.palette.common.green,\r\n    },\r\n    {\r\n      id: 5,\r\n      title: \"Patients\",\r\n      background: theme.palette.common.lightRed,\r\n      path: \"doctor-patients\",\r\n      icon: UserIcon,\r\n      fill: theme.palette.common.red,\r\n    },\r\n    // {\r\n    //   id: 6,\r\n    //   title: \"Appointments\",\r\n    //   background: theme.palette.common.lightGreen,\r\n    //   path: \"appointments\",\r\n    //   icon: CalendarIcon,\r\n    //   fill: theme.palette.common.green,\r\n    // },\r\n  ];\r\n\r\n  const trasparentButton = {\r\n    background: \"transparent\",\r\n    hover: theme.palette.common.danger,\r\n    active: \"#f4f4f4\",\r\n  };\r\n\r\n  if (profile.loading) return <Loader />;\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        rowSpacing={2}\r\n        className={classes.gridContainer}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          alignItems=\"center\"\r\n          justifyContent=\"space-between\"\r\n          p={2}\r\n          className={classes.gridsWrapper}\r\n        >\r\n          {/* Display photo and profile name grid */}\r\n          <Grid\r\n            item\r\n            alignItems=\"center\"\r\n            container\r\n            gap={2}\r\n            className=\"detailsContainer\"\r\n            sx={{ flex: 1 }}\r\n          >\r\n            <Grid item>\r\n              <Avatar\r\n                alt={doctorProfile?.firstName}\r\n                src={doctorProfile?.picture}\r\n                sx={{ width: 50, height: 50 }}\r\n              />\r\n            </Grid>\r\n\r\n            <Typography variant=\"h2\">{`${doctorProfile.firstName} ${doctorProfile.lastName}`}</Typography>\r\n          </Grid>\r\n          {/* Action Buttons grid */}\r\n\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<PersonRemoveIcon />}\r\n              title=\"Disable Doctor\"\r\n              onClick={() => setOpenDisableDoctor(true)}\r\n              type={trasparentButton}\r\n              textColor={theme.palette.common.danger}\r\n              textColorOnHover=\"#ffffff\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* BOTTOM CARDS SECTION */}\r\n        <Grid item>\r\n          <Grid\r\n            container\r\n            justifyContent=\"center\"\r\n            p={2}\r\n            flexWrap=\"wrap\"\r\n            // sx={{ background: \"yellow\" }}\r\n            columnSpacing={{ md: 6, sm: 4, xs: 4 }}\r\n            rowSpacing={{ md: 6, sm: 4, xs: 4 }}\r\n            // spacing={2}\r\n          >\r\n            {cards2.map((card) => (\r\n              <Grid\r\n                key={card.id}\r\n                item\r\n                xs={10}\r\n                sm={6}\r\n                md={4}\r\n                className={classes.parentGrid}\r\n                component={Link}\r\n                to={`/hcps/${hcpId}/${card.path}`}\r\n              >\r\n                <Card title={card.title} header=\"h4\">\r\n                  {createElement(card.icon, {\r\n                    fill: card.fill,\r\n                    color:\r\n                      card.id === 4 || card.id === 6 ? \"success\" : undefined,\r\n                    style: { fontSize: \"clamp(2.5rem, 3vw,4rem)\" },\r\n                  })}\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <DisablePatient\r\n        open={openDisableDoctor}\r\n        setOpen={setOpenDisableDoctor}\r\n        title=\"Delete Doctor\"\r\n        btnValue=\"delete\"\r\n        confirmationMsg=\"delete Doctor\"\r\n        onConfirm={onConfirm}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleHCP;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Settings.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ReferralTab.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Providers.js",["1320","1321","1322","1323","1324"],"import React, { useState, useEffect } from \"react\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { partnersHeadCells2 } from \"components/Utilities/tableHeaders\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport {\r\n  Grid,\r\n  TableRow,\r\n  TableCell,\r\n  Checkbox,\r\n  Alert,\r\n  Button,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { DeleteOrDisable, ProviderModal } from \"components/modals\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useMutation, useLazyQuery, useQuery } from \"@apollo/client\";\r\nimport { getProviders /**/ } from \"components/graphQL/useQuery\";\r\nimport { deletProvider } from \"components/graphQL/Mutation\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  fetchMoreData,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  FormLabel: {\r\n    fontSize: \"1.6rem\",\r\n    color: theme.palette.common.dark,\r\n  },\r\n  btn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"10rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n  tableBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      height: \"3rem\",\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"2rem\",\r\n      boxShadow: \"none\",\r\n\r\n      \"&:hover\": {\r\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.5rem\",\r\n      },\r\n    },\r\n  },\r\n  redBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightRed,\r\n      color: theme.palette.common.red,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.error.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n  greenBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.success.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n  \"&.MuiButton-root\": {\r\n    ...theme.typography.btn,\r\n    background: theme.palette.common.black,\r\n    width: \"100%\",\r\n  },\r\n  checkbox: {\r\n    \"& .MuiSvgIcon-root\": {\r\n      fontSize: 28,\r\n    },\r\n    \"&.Mui-checked\": {\r\n      color: \"green !important\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Providers = () => {\r\n  const classes = useStyles();\r\n  const { id: ids } = useParams();\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [fetchProviders, { error, loading, refetch }] =\r\n    useLazyQuery(getProviders);\r\n  const { data: dat, error: err, loading: load } = useQuery(getProviders);\r\n\r\n  useEffect(() => {\r\n    fetchProviders({\r\n      variables: {\r\n        first: pageInfo?.limit || 10,\r\n        userTypeId: ids,\r\n      },\r\n    });\r\n    //eslint-disable-next-line\r\n  }, [fetchProviders]);\r\n\r\n  // const onChange = async (e) => {\r\n  //   setSearchHcp(e);\r\n  //   if (e == \"\") {\r\n  //     refetch();\r\n  //   } else refetch({ name: e });\r\n  // };\r\n  const [id, setId] = useState(null);\r\n  const [deleteModal, setdeleteModal] = useState(false);\r\n  const [deleteProvider] = useMutation(deletProvider);\r\n  // const [singleProvider] = useLazyQuery(getSingleProvider);\r\n  const handleDeleteOpenDialog = (id) => {\r\n    setId(id);\r\n    setdeleteModal(true);\r\n  };\r\n  const [providers, setProviders] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (dat) {\r\n      setProviders(dat.getProviders.provider);\r\n      setPageInfo(dat.getProviders.pageInfo);\r\n    }\r\n  }, [dat]);\r\n\r\n  const theme = useTheme();\r\n  const handleDialogOpen = () => setIsOpen(true);\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n\r\n  const initialValues = {\r\n    name: \"\",\r\n    type: \"\",\r\n    image: null,\r\n    iconAlt: null,\r\n  };\r\n\r\n  const onConfirm = async () => {\r\n    try {\r\n      await deleteProvider({\r\n        variables: { id },\r\n        refetchQueries: [{ query: getProviders }],\r\n      });\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n  // const [searchHcp, setSearchHcp] = useState(\"\");\r\n  const [editId, setEditId] = useState(null);\r\n  const [isOpens, setIsOpens] = useState(false);\r\n  const handleEditCloseDialog = () => {\r\n    setEdit(false);\r\n  };\r\n  const [alert, setAlert] = useState(null);\r\n  const [edit, setEdit] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const handleDialogClose = async () => {\r\n    setIsOpen(false);\r\n    setEditId(null);\r\n    setSingleData();\r\n  };\r\n\r\n  /*   const handleDialogOpens1 = () => setIsOpens(true); */\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    userTypeId: \"\",\r\n  };\r\n  const onSubmit1 = async (values) => {\r\n    const { name, userTypeId } = values;\r\n    await refetch({\r\n      name,\r\n      userTypeId,\r\n    });\r\n    handleDialogCloses();\r\n  };\r\n  const validationSchema1 = Yup.object({\r\n    name: Yup.string(\"Enter your hospital\").trim(),\r\n    userTypeId: Yup.string(\"Enter your userTypeId\").trim(),\r\n  });\r\n\r\n  const handleDialogCloses = () => setIsOpens(false);\r\n  const handleEditOpenDialog = (id) => {\r\n    setEdit(true);\r\n    setEditId(id);\r\n  };\r\n  const [singleData, setSingleData] = useState();\r\n\r\n  if (loading || load) return <Loader />;\r\n  if (error || err) return <NoData error={error} />;\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        height=\"100%\"\r\n      >\r\n        <Grid\r\n          item\r\n          gap={{ sm: 4, xs: 2 }}\r\n          container\r\n          direction={{ md: \"row\", sm: \"column\" }}\r\n        >\r\n          <Grid item container justifyContent=\"space-between\">\r\n            <Grid item></Grid>\r\n            <Grid item>\r\n              <CustomButton\r\n                endIcon={<AddIcon />}\r\n                title=\"Add new Provider\"\r\n                type={buttonType}\r\n                onClick={handleDialogOpen}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <TableLayout>\r\n          {providers.length > 0 ? (\r\n            <Grid item container height=\"100%\" direction=\"column\">\r\n              <EnhancedTable\r\n                headCells={partnersHeadCells2}\r\n                rows={providers}\r\n                paginationLabel=\"Providers per page\"\r\n                hasCheckbox={true}\r\n                changeLimit={async (e) => {\r\n                  await changeTableLimit(fetchProviders, {\r\n                    first: e,\r\n                    userTypeId: ids,\r\n                  });\r\n                }}\r\n                dataPageInfo={pageInfo}\r\n                handlePagination={async (page) => {\r\n                  await handlePageChange(fetchProviders, page, pageInfo, {\r\n                    userTypeId: ids,\r\n                  });\r\n                }}\r\n              >\r\n                {providers.map((row, index) => {\r\n                  const { _id, name, icon } = row;\r\n                  const isItemSelected = isSelected(_id, selectedRows);\r\n\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={_id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell align=\"center\" className={classes.tableCell}>\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                          }}\r\n                        >\r\n                          <span style={{ marginRight: \"1rem\" }}>\r\n                            <Avatar src={icon} sx={{ width: 24, height: 24 }} />\r\n                          </span>\r\n                          <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell align=\"center\" className={classes.tableCell}>\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"space-around\",\r\n                          }}\r\n                        >\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            disableRipple\r\n                            className={`${classes.tableBtn} ${classes.greenBtn}`}\r\n                            onClick={() => handleEditOpenDialog(_id)}\r\n                            endIcon={<EditIcon color=\"success\" />}\r\n                          >\r\n                            Edit Provider\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            disableRipple\r\n                            className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                            onClick={() => handleDeleteOpenDialog(_id)}\r\n                            endIcon={<DeleteIcon color=\"error\" />}\r\n                          >\r\n                            Delete Provider\r\n                          </Button>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={partnersHeadCells2}\r\n              paginationLabel=\"Providers  per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </Grid>\r\n\r\n      <Modals\r\n        isOpen={isOpen}\r\n        title=\"Add new Provider\"\r\n        rowSpacing={5}\r\n        handleClose={handleDialogClose}\r\n      >\r\n        <ProviderModal\r\n          handleDialogClose={handleDialogClose}\r\n          type=\"add\"\r\n          setAlert={setAlert}\r\n          editId={editId}\r\n          setSingleData={setSingleData}\r\n          initialValues={initialValues}\r\n        />\r\n      </Modals>\r\n      {/* edit Modal */}\r\n      <Modals\r\n        isOpen={edit}\r\n        title=\"Edit Provider\"\r\n        rowSpacing={5}\r\n        handleClose={handleEditCloseDialog}\r\n      >\r\n        <ProviderModal\r\n          handleDialogClose={handleEditCloseDialog}\r\n          type=\"edit\"\r\n          editId={editId}\r\n          setAlert={setAlert}\r\n          initialValues={initialValues}\r\n          singleData={singleData}\r\n          setSingleData={setSingleData}\r\n        />\r\n      </Modals>\r\n\r\n      <DeleteOrDisable\r\n        open={deleteModal}\r\n        setOpen={setdeleteModal}\r\n        title=\"Delete Provider\"\r\n        onConfirm={onConfirm}\r\n        confirmationMsg=\"delete provider\"\r\n        btnValue=\"Delete\"\r\n      />\r\n\r\n      <Modals\r\n        isOpen={isOpens}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        handleClose={handleDialogCloses}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={validationSchema1}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\">\r\n                  <Grid item container>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      name=\"name\"\r\n                      label=\"Hospital Name\"\r\n                      placeholder=\"Enter Hospital Name\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    style={{ marginBottom: \"18rem\", marginTop: \"3rem\" }}\r\n                  >\r\n                    <Grid container>\r\n                      <Grid item container>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          name=\"userTypeId\"\r\n                          label=\"User Type\"\r\n                          placeholder=\"Enter User Type\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <CustomButton\r\n                      title=\"Apply Filter\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Providers;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Permission.js",["1325","1326","1327"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Loader, CustomButton, Modals } from \"components/Utilities\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  TableRow,\r\n  TableCell,\r\n  Checkbox,\r\n  Alert,\r\n  Chip,\r\n} from \"@mui/material\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { PermissionHeader } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport { PermissionModal, DeleteOrDisable } from \"components/modals\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getPermissions } from \"components/graphQL/useQuery\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { DELETE_PERMISSION } from \"components/graphQL/Mutation\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  flexContainer: {\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    margin: \"auto\",\r\n    width: \"100%\",\r\n    paddingBottom: \"2rem \",\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  FormLabel: {\r\n    \"&.MuiFormLabel-root\": {\r\n      ...theme.typography.FormLabel,\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n  tableBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      height: \"3rem\",\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"2rem\",\r\n      boxShadow: \"none\",\r\n\r\n      \"&:hover\": {\r\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.5rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  redBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightRed,\r\n      color: theme.palette.common.red,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.error.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n\r\n  greenBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.success.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst referralOptions = [\"Hello\", \"World\", \"Goodbye\", \"World\"];\r\nconst Permission = () => {\r\n  const [singlePermission, setSinglePermission] = useState();\r\n\r\n  const checkbox = [\r\n    { key: \"create\", value: \"create\" },\r\n    { key: \"update\", value: \"update\" },\r\n    { key: \"read\", value: \"read\" },\r\n    { key: \"delete\", value: \"delete\" },\r\n  ];\r\n\r\n  const initialValues = {\r\n    name: \"\",\r\n    // checkbox: [],\r\n    description: \"\",\r\n  };\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    date: \"\",\r\n    category: \"\",\r\n  };\r\n\r\n  const validationSchema1 = Yup.object({\r\n    name: Yup.string(\"Enter your Permission\")\r\n      .trim()\r\n      .required(\"permission is required\"),\r\n    date: Yup.string(\"Select Date\").required(\"Date is required\"),\r\n    category: Yup.string(\"Select Category\")\r\n      .trim()\r\n      .required(\"Category is required\"),\r\n  });\r\n  const onSubmit1 = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    // checkbox: Yup.array().min(1, \"Add atleast a permission\"),\r\n    name: Yup.string(\"Enter your Permission\").required(\r\n      \"permission is required\"\r\n    ),\r\n    description: Yup.string(\"Enter Description\").required(\r\n      \"Description is required\"\r\n    ),\r\n  });\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [deleteModal, setdeleteModal] = useState(false);\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [editId, setEditId] = useState(null);\r\n  const handleEditCloseDialog = useCallback(() => {\r\n    setIsEdit(false);\r\n    setSinglePermission(\"\");\r\n  }, []);\r\n  const [editDetails] = useState(null);\r\n  const [deleteId, setDeleteId] = useState(null);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const handleDialogOpen = () => setIsOpen(true);\r\n  const [alert, setAlert] = useState(null);\r\n  const handleDeleteOpenDialog = (id) => {\r\n    setdeleteModal(true);\r\n    setDeleteId(id);\r\n  };\r\n  const handleEditOpenDialog = async (id) => {\r\n    setEditId(id);\r\n    setIsEdit(true);\r\n  };\r\n\r\n  const onConfirm = async () => {\r\n    try {\r\n      const { data } = await deletPlan({\r\n        variables: { id: deleteId },\r\n        refetchQueries: [{ query: getPermissions }],\r\n      });\r\n      setAlert({\r\n        message: data.deletePermission.message,\r\n        type: \"success\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert(null);\r\n      }, 5000);\r\n    } catch (error) {\r\n      setAlert({\r\n        message: \"Plan  not successfully deleted\",\r\n        type: \"danger\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert(null);\r\n      }, 5000);\r\n    }\r\n  };\r\n  const handleDialogClose = () => setIsOpen(false);\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [fetchPermissions, { loading, data, error }] =\r\n    useLazyQuery(getPermissions);\r\n\r\n  useEffect(() => {\r\n    fetchPermissions({\r\n      variables: {\r\n        first: pageInfo?.limit,\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchPermissions, pageInfo]);\r\n\r\n  const [deletPlan] = useMutation(DELETE_PERMISSION);\r\n  const [permission, setPermission] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setPermission(data.getPermissions.permission);\r\n      setPageInfo(data.getPermissions.pageInfo);\r\n    }\r\n  }, [permission, data]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <>\r\n      {alert && Object.keys(alert).length > 0 && (\r\n        <Alert\r\n          variant=\"filled\"\r\n          severity={alert.type}\r\n          sx={{ justifyContent: \"center\", width: \"70%\", margin: \"0 auto\" }}\r\n        >\r\n          {alert.message}\r\n        </Alert>\r\n      )}\r\n      <Grid container direction=\"column\">\r\n        <Grid\r\n          item\r\n          sm\r\n          container\r\n          justifyContent={\"flex-end\"}\r\n          sx={{ marginBottom: \"2rem\" }}\r\n        >\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<AddIcon />}\r\n              title=\"Add New Permission\"\r\n              type={buttonType}\r\n              onClick={handleDialogOpen}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <TableLayout>\r\n          {Permission.length > 0 ? (\r\n            <Grid item container>\r\n              <EnhancedTable\r\n                headCells={PermissionHeader}\r\n                rows={Permission}\r\n                paginationLabel=\"permission per page\"\r\n                hasCheckbox={true}\r\n                changeLimit={async (e) => {\r\n                  changeTableLimit(fetchPermissions, { first: e });\r\n                }}\r\n                dataPageInfo={pageInfo}\r\n                handlePagination={async (page) => {\r\n                  handlePageChange(fetchPermissions, page, pageInfo, {});\r\n                }}\r\n              >\r\n                {permission.map((row, index) => {\r\n                  const isItemSelected = isSelected(row._id, selectedRows);\r\n\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  const data = row.name.split(\":\")[0];\r\n                  const newPerm = row.description.split(\":\")[1];\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row._id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              row.id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                      >\r\n                        <Grid\r\n                          container\r\n                          rowSpacing={2}\r\n                          style={{\r\n                            maxWidth: \"25rem\",\r\n                            display: \"inline-flex\",\r\n                            justifyContent: \"left\",\r\n                            alignItems: \"center\",\r\n                          }}\r\n                        >\r\n                          <Grid item xs={6}>\r\n                            <Chip label={data} className={classes.badge} />\r\n                          </Grid>\r\n                        </Grid>\r\n                      </TableCell>\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                      >\r\n                        <Grid\r\n                          container\r\n                          rowSpacing={2}\r\n                          style={{\r\n                            maxWidth: \"25rem\",\r\n                            display: \"inline-flex\",\r\n                            justifyContent: \"left\",\r\n                            alignItems: \"center\",\r\n                          }}\r\n                        >\r\n                          <Grid item xs={6}>\r\n                            <Chip label={newPerm} className={classes.badge} />\r\n                          </Grid>\r\n                        </Grid>\r\n                      </TableCell>\r\n\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                            justifyContent: \"space-around\",\r\n                          }}\r\n                        >\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            disableRipple\r\n                            onClick={() => handleEditOpenDialog(row._id)}\r\n                            className={`${classes.tableBtn} ${classes.greenBtn}`}\r\n                            endIcon={<EditIcon color=\"success\" />}\r\n                          >\r\n                            Edit\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            disableRipple\r\n                            onClick={() => handleDeleteOpenDialog(row._id)}\r\n                            className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                            to=\"/view\"\r\n                            endIcon={<DeleteIcon color=\"error\" />}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={PermissionHeader}\r\n              paginationLabel=\"Permission  per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </Grid>\r\n\r\n      <Modals\r\n        isOpen={isOpen}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        handleClose={handleDialogClose}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={validationSchema1}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\">\r\n                  <Grid item container spacing={2}>\r\n                    <Grid item xs={6} marginBottom={4}>\r\n                      <FormikControl\r\n                        control=\"select\"\r\n                        options={referralOptions}\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        placeholder=\"Enter Plan Name\"\r\n                      />\r\n                    </Grid>\r\n                    {/* second grid */}\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"select\"\r\n                        options={referralOptions}\r\n                        name=\"date\"\r\n                        label=\"Date\"\r\n                        placeholder=\"Choose Date\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid item container spacing={2}>\r\n                    <FormikControl\r\n                      control=\"select\"\r\n                      options={referralOptions}\r\n                      name=\"category\"\r\n                      label=\"Category\"\r\n                      placeholder=\"Save Category\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item container xs={12} marginTop={20}>\r\n                  <CustomButton\r\n                    title=\"Apply Filter\"\r\n                    width=\"100%\"\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                    type={buttonType}\r\n                  />\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      {/* // modal */}\r\n\r\n      <Modals\r\n        isOpen={isOpen}\r\n        title=\"Add new permission\"\r\n        handleClose={handleDialogClose}\r\n      >\r\n        <PermissionModal\r\n          handleDialogClose={handleDialogClose}\r\n          type=\"add\"\r\n          options={checkbox}\r\n          initialValues={initialValues}\r\n          validationSchema={validationSchema}\r\n          setAlert={setAlert}\r\n        />\r\n      </Modals>\r\n\r\n      {/* edit modala */}\r\n      <Modals\r\n        isOpen={isEdit}\r\n        title=\"Edit permission\"\r\n        handleClose={handleEditCloseDialog}\r\n      >\r\n        <PermissionModal\r\n          handleDialogClose={handleEditCloseDialog}\r\n          type=\"edit\"\r\n          options={checkbox}\r\n          singlePermission={singlePermission}\r\n          editId={editId}\r\n          validationSchema={validationSchema}\r\n          setAlert={setAlert}\r\n          editDetails={editDetails}\r\n          setSinglePermission={setSinglePermission}\r\n        />\r\n      </Modals>\r\n      {/* delete modal */}\r\n      <DeleteOrDisable\r\n        open={deleteModal}\r\n        setOpen={setdeleteModal}\r\n        title=\"Delete Permission\"\r\n        confirmationMsg=\"delete permission\"\r\n        btnValue=\"Delete\"\r\n        onConfirm={onConfirm}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default Permission;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\PatientAppointment.js",["1328","1329","1330","1331","1332","1333"],"import React, { useState, useEffect } from \"react\";\r\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\r\nimport {\r\n  CustomButton,\r\n  /* FilterList, */ Modals,\r\n  Loader,\r\n} from \"components/Utilities\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport {\r\n  Grid,\r\n  Alert,\r\n  Typography,\r\n  TableRow,\r\n  TableCell,\r\n  Checkbox,\r\n  Button,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport { deleteAppointment } from \"components/graphQL/Mutation\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport { getAppoint, getDOCAppoint } from \"components/graphQL/useQuery\";\r\nimport { DeleteOrDisable } from \"components/modals\";\r\nimport { consultationsHeadCells2 } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport AssignmentIcon from \"@mui/icons-material/Assignment\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { timeConverter, timeMoment } from \"components/Utilities/Time\";\r\nimport * as Yup from \"yup\";\r\nimport { updateAppointment } from \"components/graphQL/Mutation\";\r\nimport {\r\n  changeTableLimit,\r\n  fetchMoreData,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableCell: {\r\n    \"&.css-1jilxo7-MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n  btn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n\r\n  tableBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      height: \"3rem\",\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"2rem\",\r\n      boxShadow: \"none\",\r\n\r\n      \"&:hover\": {\r\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.5rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  redBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightRed,\r\n      color: theme.palette.common.red,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.error.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n\r\n  greenBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.success.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\n/* const filterOptions = [\r\n  { id: 0, value: \"Name\" },\r\n  { id: 1, value: \"Date\" },\r\n  { id: 2, value: \"Description\" },\r\n]; */\r\n\r\nconst PatientAppointment = () => {\r\n  const [updateAppoint] = useMutation(updateAppointment);\r\n  const [deleteAppointments] = useMutation(deleteAppointment);\r\n  const [pageInfo, setPageInfo] = useState([]);\r\n  const [alert, setAlert] = useState(null);\r\n  const [editId, setEditid] = useState(null);\r\n  const [doctorId, setDoctorId] = useState(null);\r\n  const handleDelete = (id) => {\r\n    setId(id);\r\n    setdeleteModal(true);\r\n  };\r\n\r\n  const handleSchedule = (id, doctor) => {\r\n    setIsPatients(true);\r\n    setEditid(id);\r\n    setDoctorId(doctor);\r\n  };\r\n  const onConfirm = async () => {\r\n    try {\r\n      await deleteAppointments({\r\n        variables: { id },\r\n        refetchQueries: [\r\n          {\r\n            query: getAppoint,\r\n            variables: {\r\n              id: patientId,\r\n              orderBy: \"-createdAt\",\r\n            },\r\n          },\r\n        ],\r\n      });\r\n      setAlert({\r\n        message: \"appointment deleted successfully\",\r\n        type: \"success\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert(null);\r\n      }, 5000);\r\n    } catch (error) {\r\n      setAlert({\r\n        message: \"appointment  not successfully deleted\",\r\n        type: \"danger\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert(null);\r\n      }, 5000);\r\n      console.log(error);\r\n    }\r\n  };\r\n  const [deleteModal, setdeleteModal] = useState(false);\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [isPatient, setIsPatient] = useState(false);\r\n  const [isPatients, setIsPatients] = useState(false);\r\n  const [id, setId] = useState(null);\r\n  /* const handlePatientOpen = () => setIsPatient(true); */\r\n  const handlePatientClose = () => setIsPatient(false);\r\n  const handlePatientCloses = () => setIsPatients(false);\r\n  const { patientId } = useParams();\r\n  const [patientAppointment, setPatientAppointment] = useState([]);\r\n  const initialValues = {\r\n    status: \"\",\r\n    gender: \"\",\r\n    date: \"\",\r\n    plan: \"\",\r\n  };\r\n  const initialValues1 = {\r\n    date: \"\",\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    date: Yup.string(\"Enter your affliate\").required(\"Date is required\"),\r\n    plan: Yup.string(\"Select your plan\").required(\"Plan is required\"),\r\n    gender: Yup.string(\"Select your gender\").required(\"Gender is required\"),\r\n    status: Yup.string(\"Select your status\").required(\"Status is required\"),\r\n  });\r\n  const validationSchema1 = Yup.object({\r\n    date: Yup.string(\"select date and time \").required(\r\n      \"Date  and time is required\"\r\n    ),\r\n  });\r\n  const onSubmit1 = async (values) => {\r\n    const { date } = values;\r\n    const timeValue = timeMoment(date);\r\n    const dateValue = timeConverter(date);\r\n    await updateAppoint({\r\n      variables: {\r\n        id: editId,\r\n        date: dateValue,\r\n        time: timeValue,\r\n        doctor: doctorId,\r\n      },\r\n      refetchQueries: [\r\n        {\r\n          query: getAppoint,\r\n          variables: {\r\n            id: patientId,\r\n            orderBy: \"-createdAt\",\r\n          },\r\n        },\r\n        {\r\n          query: getDOCAppoint,\r\n          variables: {\r\n            id: doctorId,\r\n            orderBy: \"-createdAt\",\r\n          },\r\n        },\r\n      ],\r\n    });\r\n    handlePatientCloses();\r\n  };\r\n  const onSubmit = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const [getPatientsAppointment, { loading, data, error }] =\r\n    useLazyQuery(getAppoint);\r\n\r\n  useEffect(() => {\r\n    getPatientsAppointment({\r\n      variables: {\r\n        id: patientId,\r\n        orderBy: \"-createdAt\",\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [getPatientsAppointment, patientId]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setPatientAppointment(data.getAppointments.data);\r\n      setPageInfo(data.getAppointments.pageInfo);\r\n    }\r\n  }, [data, patientId]);\r\n\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const genderType = [\r\n    { key: \"Male\", value: \"Male\" },\r\n    { key: \"Female\", value: \"Female\" },\r\n    { key: \"Prefer not to say\", value: \"Prefer not to say\" },\r\n  ];\r\n  const plans = [\r\n    { key: \"Plan 1\", value: \"Plan 1\" },\r\n    { key: \"Plan 2\", value: \"Plan 2\" },\r\n    { key: \"Plan 3\", value: \"Plan 3\" },\r\n    { key: \"Plan 4\", value: \"Plan 4\" },\r\n  ];\r\n  const plans1 = [\r\n    { key: \"Plan 1\", value: \"Plan 1\" },\r\n    { key: \"Plan 2\", value: \"Plan 2\" },\r\n    { key: \"Plan 3\", value: \"Plan 3\" },\r\n    { key: \"Plan 4\", value: \"Plan 4\" },\r\n  ];\r\n  const statusType = [\r\n    { key: \"Active\", value: \"Active\" },\r\n    { key: \"Blocked\", value: \"Blocked\" },\r\n  ];\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <>\r\n      {alert && Object.keys(alert).length > 0 && (\r\n        <Alert\r\n          variant=\"filled\"\r\n          severity={alert.type}\r\n          sx={{ justifyContent: \"center\", width: \"70%\", margin: \"0 auto\" }}\r\n        >\r\n          {alert.message}\r\n        </Alert>\r\n      )}\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        height=\"100%\"\r\n      >\r\n        <>\r\n          <Grid\r\n            item\r\n            container\r\n            flexWrap=\"nowrap\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            {/* <Grid item flex={1}>\r\n              <Typography variant=\"h2\">Appointments</Typography>\r\n            </Grid>{\" \"}\r\n            */}\r\n            {/* <Grid item>\r\n              <FilterList\r\n                onClick={handlePatientOpen}\r\n                options={filterOptions}\r\n                title=\"Filter\"\r\n              />\r\n            </Grid> */}\r\n          </Grid>\r\n          <TableLayout>\r\n            {patientAppointment.length > 0 ? (\r\n              <Grid item container height=\"100%\" direction=\"column\">\r\n                <EnhancedTable\r\n                  headCells={consultationsHeadCells2}\r\n                  rows={patientAppointment}\r\n                  paginationLabel=\"Patients per page\"\r\n                  hasCheckbox={true}\r\n                  changeLimit={async (e) => {\r\n                    await changeTableLimit(getPatientsAppointment, {\r\n                      first: e,\r\n                    });\r\n                  }}\r\n                  dataPageInfo={pageInfo}\r\n                  handlePagination={async (page) => {\r\n                    await handlePageChange(\r\n                      getPatientsAppointment,\r\n                      page,\r\n                      pageInfo\r\n                    );\r\n                  }}\r\n                >\r\n                  {patientAppointment\r\n                    // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                    .map((row, index) => {\r\n                      const isItemSelected = isSelected(row._id, selectedRows);\r\n                      const labelId = `enhanced-table-checkbox-${index}`;\r\n                      return (\r\n                        <TableRow\r\n                          hover\r\n                          role=\"checkbox\"\r\n                          aria-checked={isItemSelected}\r\n                          tabIndex={-1}\r\n                          key={row._id}\r\n                          selected={isItemSelected}\r\n                        >\r\n                          <TableCell padding=\"checkbox\">\r\n                            <Checkbox\r\n                              onClick={() =>\r\n                                handleSelectedRows(\r\n                                  row.id,\r\n                                  selectedRows,\r\n                                  setSelectedRows\r\n                                )\r\n                              }\r\n                              color=\"primary\"\r\n                              checked={isItemSelected}\r\n                              inputProps={{\r\n                                \"aria-labelledby\": labelId,\r\n                              }}\r\n                            />\r\n                          </TableCell>\r\n                          <TableCell\r\n                            align=\"left\"\r\n                            className={classes.tableCell}\r\n                            style={{ maxWidth: \"20rem\" }}\r\n                          >\r\n                            <div\r\n                              style={{\r\n                                height: \"100%\",\r\n                                display: \"flex\",\r\n                                alignItems: \"center\",\r\n                              }}\r\n                            >\r\n                              <span style={{ marginRight: \"1rem\" }}>\r\n                                <Avatar\r\n                                  alt={`Display Photo of ${row.doctorData.firstName}`}\r\n                                  src={\r\n                                    row.doctorData.picture\r\n                                      ? row.doctorData.picture\r\n                                      : displayPhoto\r\n                                  }\r\n                                  sx={{ width: 24, height: 24 }}\r\n                                />\r\n                              </span>\r\n                              <span style={{ fontSize: \"1.25rem\" }}>\r\n                                {`${row.doctorData.firstName} \r\n                             ${row.doctorData.lastName}`}\r\n                              </span>\r\n                            </div>\r\n                          </TableCell>\r\n                          <TableCell align=\"left\" className={classes.tableCell}>\r\n                            {row.date}\r\n                          </TableCell>\r\n                          <TableCell\r\n                            align=\"left\"\r\n                            className={classes.tableCell}\r\n                            style={{\r\n                              color: theme.palette.common.grey,\r\n                              maxWidth: \"20rem\",\r\n                            }}\r\n                          >\r\n                            {/* {hours(}row.time) */} {row.time}\r\n                          </TableCell>\r\n                          <TableCell align=\"left\" className={classes.tableCell}>\r\n                            <Button\r\n                              variant=\"contained\"\r\n                              disableRipple\r\n                              className={`${classes.tableBtn} ${classes.greenBtn}`}\r\n                              endIcon={<AssignmentIcon color=\"success\" />}\r\n                              onClick={() =>\r\n                                handleSchedule(row._id, row.doctor)\r\n                              }\r\n                            >\r\n                              Reschedule\r\n                            </Button>\r\n                          </TableCell>\r\n                          <TableCell align=\"left\" className={classes.tableCell}>\r\n                            <Button\r\n                              variant=\"contained\"\r\n                              disableRipple\r\n                              onClick={() => handleDelete(row._id)}\r\n                              className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                              endIcon={<DeleteIcon color=\"error\" />}\r\n                            >\r\n                              Cancel\r\n                            </Button>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                </EnhancedTable>\r\n              </Grid>\r\n            ) : (\r\n              <EmptyTable\r\n                headCells={consultationsHeadCells2}\r\n                paginationLabel=\"Appointments per page\"\r\n              />\r\n            )}\r\n          </TableLayout>\r\n        </>\r\n      </Grid>\r\n\r\n      <Modals\r\n        isOpen={isPatients}\r\n        title=\"Reschedule Appointment\"\r\n        rowSpacing={5}\r\n        height=\"auto\"\r\n        handleClose={handlePatientCloses}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={validationSchema1}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid, setFieldValue }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={2}>\r\n                  <Grid item container>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item md>\r\n                        <FormikControl\r\n                          control=\"time\"\r\n                          name=\"date\"\r\n                          label=\"Date\"\r\n                          placeholder=\"Choose Date and Time\"\r\n                          setFieldValue={setFieldValue}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    container\r\n                    alignItems=\"flex-end\"\r\n                    marginTop={5}\r\n                    xs={12}\r\n                  >\r\n                    <CustomButton\r\n                      title=\"Reschedule Appointment\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      <Modals\r\n        isOpen={isPatient}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        height=\"auto\"\r\n        handleClose={handlePatientClose}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={onSubmit}\r\n          validationSchema={validationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={2}>\r\n                  <Grid item container>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item md>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={plans}\r\n                          name=\"date\"\r\n                          label=\"Date\"\r\n                          placeholder=\"Choose Date\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={plans1}\r\n                          name=\"plan\"\r\n                          label=\"Plan\"\r\n                          placeholder=\"Select Plan\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container gap={3}>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item md>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={genderType}\r\n                          name=\"gender\"\r\n                          label=\"Gender\"\r\n                          placeholder=\"Choose Gender\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={statusType}\r\n                          name=\"status\"\r\n                          label=\"Status\"\r\n                          placeholder=\"Select status\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    container\r\n                    alignItems=\"flex-end\"\r\n                    marginTop={5}\r\n                    xs={12}\r\n                  >\r\n                    <CustomButton\r\n                      title=\" Apply Filter\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n      {/* delete modal */}\r\n      <DeleteOrDisable\r\n        open={deleteModal}\r\n        onConfirm={() => console.log(\"confrimed\")}\r\n        setOpen={setdeleteModal}\r\n        title=\"Cancel Consultation\"\r\n        confirmationMsg=\"cancel appointment\"\r\n        btnValue=\"cancel\"\r\n      />\r\n\r\n      <DeleteOrDisable\r\n        open={deleteModal}\r\n        setOpen={setdeleteModal}\r\n        title=\"Delete Appointment\"\r\n        onConfirm={onConfirm}\r\n        confirmationMsg=\"delete appointment\"\r\n        btnValue=\"Delete\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PatientAppointment;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Messages.js",["1334"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { debounce } from \"lodash\";\r\nimport { NoData, EnhancedTable, EmptyTable } from \"components/layouts\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { TableRow, TableCell } from \"@mui/material\";\r\nimport { Loader, CustomButton } from \"components/Utilities\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { dateMoment, timeMoment } from \"components/Utilities/Time\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { messagesHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { Avatar, Button, Checkbox, Grid } from \"@mui/material\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getMessage } from \"components/graphQL/useQuery\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"0.5rem\",\r\n      maxWidth: \"10rem\",\r\n      fontSize: \".85rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"0.85rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".2rem\",\r\n      },\r\n    },\r\n  },\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.25rem !important\",\r\n      height: \"2.7rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n  tableBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      height: \"3rem\",\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"2rem\",\r\n      boxShadow: \"none\",\r\n\r\n      \"&:hover\": {\r\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.5rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  redBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightRed,\r\n      color: theme.palette.common.red,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.error.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst Messages = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [pageInfo, setPageInfo] = useState({\r\n    page: 0,\r\n    totalPages: 1,\r\n    hasNextPage: false,\r\n    hasPrevPage: false,\r\n    limit: 10,\r\n    totalDocs: 0,\r\n  });\r\n  const greenButtonType = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  /*   const [searchMessage, setSearchMessage] = useState(\"\"); */\r\n  const [message, setMessage] = useState([]);\r\n\r\n  const [fetchMessages, { loading, data, error }] = useLazyQuery(getMessage);\r\n\r\n  useEffect(() => {\r\n    fetchMessages({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchMessages, pageInfo]);\r\n\r\n  /*   const onChange = async (e) => {\r\n    setSearchMessage(e);\r\n    if (e === \"\") {\r\n      refetch();\r\n    } else refetch({ recipient: e });\r\n  }; */\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setMessage(data.getMessages.messages);\r\n      setPageInfo(data.getMessages.pageInfo);\r\n    }\r\n  }, [message, data]);\r\n\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  //eslint-disable-next-line\r\n  const debouncer = useCallback(debounce(fetchMessages, 3000), []);\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  else {\r\n    return (\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        height=\"100%\"\r\n      >\r\n        <Grid\r\n          item\r\n          gap={{ md: 4, sm: 4, xs: 2 }}\r\n          direction={{ sm: \"row\", xs: \"column\" }}\r\n          container\r\n          justifyContent=\"flex-end\"\r\n        >\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<AddIcon />}\r\n              title=\"New Message\"\r\n              type={greenButtonType}\r\n              component={Link}\r\n              to=\"/messages/create-message\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <TableLayout>\r\n          {message.length > 0 ? (\r\n            <Grid item container height=\"100%\" direction=\"column\">\r\n              <EnhancedTable\r\n                headCells={messagesHeadCells}\r\n                rows={message}\r\n                paginationLabel=\"Message per page\"\r\n                hasCheckbox={true}\r\n                changeLimit={async (e) => {\r\n                  changeTableLimit(fetchMessages, { first: e });\r\n                }}\r\n                fetchData={fetchMessages}\r\n                handlePagination={async (page) => {\r\n                  handlePageChange(fetchMessages, page, pageInfo, {});\r\n                }}\r\n              >\r\n                {message.map((row, index) => {\r\n                  const { subject, createdAt, _id, recipientData } = row;\r\n                  const isItemSelected = isSelected(_id, selectedRows);\r\n\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={_id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"20rem\" }}\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"flex-start\",\r\n                          }}\r\n                        >\r\n                          <span style={{ marginRight: \"1rem\" }}>\r\n                            <Avatar\r\n                              alt={`Display Photo of  ${\r\n                                recipientData && recipientData.firstName\r\n                              }`}\r\n                              src={\r\n                                recipientData && recipientData.image\r\n                                  ? recipientData.image\r\n                                  : displayPhoto\r\n                              }\r\n                              sx={{ width: 24, height: 24 }}\r\n                            />\r\n                          </span>\r\n                          <span style={{ fontSize: \"1.25rem\" }}>\r\n                            {recipientData && recipientData.firstName\r\n                              ? `${recipientData.firstName} ${recipientData.lastName}`\r\n                              : \"No Value\"}\r\n                          </span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"15rem\" }}\r\n                      >\r\n                        {subject}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.grey }}\r\n                      >\r\n                        {dateMoment(createdAt)}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.grey }}\r\n                      >\r\n                        {timeMoment(createdAt)}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          className={classes.button}\r\n                          component={Link}\r\n                          to={`messages/${_id}`}\r\n                          endIcon={<ArrowForwardIosIcon />}\r\n                          /* onClick={() => setSelectedSubMenu(6)} */\r\n                        >\r\n                          View Message\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={messagesHeadCells}\r\n              paginationLabel=\"Messages  per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </Grid>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Messages;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Management.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Hcps.js",["1335","1336","1337","1338","1339","1340","1341","1342"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NetworkStatus, useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  Grid,\r\n  TableRow,\r\n  TableCell,\r\n  Button,\r\n  Checkbox,\r\n  Chip,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { timeConverter } from \"components/Utilities/Time\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { useStyles } from \"../../styles/doctorsPageStyles\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport {\r\n  getDoctorsProfile,\r\n  getDoctorsProfileByStatus,\r\n} from \"components/graphQL/useQuery\";\r\nimport { hcpsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { createDOctorProfile } from \"components/graphQL/Mutation\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\r\nimport { addDoctorValidationSchema } from \"helpers/validationSchemas\";\r\nimport { Loader, Modals, CustomButton } from \"components/Utilities\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport {\r\n  addDocInitialValues,\r\n  /* cadreFilterBy, */\r\n  defaultPageInfo,\r\n  docCadreOptions,\r\n  docSpecializationsOptions,\r\n  doctorsSearchOptions,\r\n  genderType,\r\n} from \"helpers/mockData\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport DoctorFilters from \"components/Forms/Filters/DoctorsFilters\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst Hcps = () => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { displayAlert } = useAlert();\r\n  const [profiles, setProfiles] = useState(\"\");\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const { provider } = useSelector((state) => state.patient);\r\n  const [openAddHcp, setOpenAddHcp] = useState(false);\r\n  const [createDoc] = useMutation(createDOctorProfile);\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [fetchDoctors, { error, loading, refetch, variables, networkStatus }] =\r\n    useLazyQuery(getDoctorsProfile);\r\n  const [\r\n    fetchDoctorsByStatus,\r\n    {\r\n      loading: byStatusLoading,\r\n      refetch: byStatusRefetch,\r\n      variables: byStatusVariables,\r\n    },\r\n  ] = useLazyQuery(getDoctorsProfileByStatus);\r\n\r\n  useEffect(() => {\r\n    fetchDoctors({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setPageInfo(data.doctorProfiles.pageInfo || []);\r\n          setProfiles(data.doctorProfiles.profile || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const onSubmit = async (values) => {\r\n    const {\r\n      createdAt,\r\n      updatedAt,\r\n      firstName,\r\n      lastName,\r\n      gender,\r\n      phone,\r\n      email,\r\n      hospital,\r\n      dociId,\r\n      specialization,\r\n      dob,\r\n      cadre,\r\n      image,\r\n    } = values;\r\n    const correctDOB = timeConverter(dob);\r\n    await createDoc({\r\n      variables: {\r\n        dociId,\r\n        createdAt,\r\n        updatedAt,\r\n        firstName,\r\n        lastName,\r\n        gender,\r\n        phoneNumber: phone,\r\n        email,\r\n        hospital,\r\n        specialization,\r\n        dob: correctDOB,\r\n        cadre,\r\n        image,\r\n        providerId: \"61db6f8968b248001aec4fcb\",\r\n      },\r\n      refetchQueries: [{ query: getDoctorsProfile }],\r\n    });\r\n    setOpenAddHcp(false);\r\n  };\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const getSearchPlaceholder = (filterBy) => {\r\n    return filterBy === \"id\"\r\n      ? \"Search by ID e.g 7NE6ELLO\"\r\n      : filterBy === \"firstName\"\r\n      ? \"Search by first name e.g John\"\r\n      : filterBy === \"lastName\"\r\n      ? \"Search by last name e.g Doe\"\r\n      : \"\";\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(data.doctorProfiles.pageInfo || defaultPageInfo);\r\n        setProfiles(data.doctorProfiles.profile || []);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\r\n      <Grid\r\n        item\r\n        gap={{ md: 4, sm: 4, xs: 2 }}\r\n        direction={{ sm: \"row\", xs: \"column\" }}\r\n        container\r\n        justifyContent=\"flex-end\"\r\n      >\r\n        <Grid item>\r\n          <CustomButton\r\n            endIcon={<AddIcon />}\r\n            title=\"Add Doctor\"\r\n            type={buttonType}\r\n            onClick={() => setOpenAddHcp(true)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      {/* ========= FILTERS =========== */}\r\n\r\n      <TableLayout\r\n        filters={\r\n          <DoctorFilters\r\n            setProfiles={setProfiles}\r\n            setPageInfo={setPageInfo}\r\n            queryParams={{\r\n              doctorsParams: { fetchDoctors, loading, refetch, variables },\r\n              doctorsByStatusParams: {\r\n                byStatusLoading,\r\n                byStatusVariables,\r\n                byStatusRefetch,\r\n                fetchDoctorsByStatus,\r\n              },\r\n            }}\r\n          />\r\n        }\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{ fetchData: fetchDoctors, variables, loading }}\r\n            setPageInfo={(data) =>\r\n              setPageInfo(data.doctorProfiles.pageInfo || {})\r\n            }\r\n            setProfiles={(data) =>\r\n              setProfiles(data.doctorProfiles.profile || [])\r\n            }\r\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\r\n            filterOptions={doctorsSearchOptions}\r\n          />\r\n        }\r\n      >\r\n        {loading ? (\r\n          <Loader />\r\n        ) : byStatusLoading ? (\r\n          <Loader />\r\n        ) : networkStatus === NetworkStatus.refetch ? (\r\n          <Loader />\r\n        ) : profiles.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={hcpsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"Doctors per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchDoctors, {\r\n                  first: e,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchDoctors, page, pageInfo, {});\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const {\r\n                  _id,\r\n                  dociId,\r\n                  firstName,\r\n                  provider,\r\n                  status,\r\n                  specialization,\r\n                  consultations,\r\n                  lastName,\r\n                } = row;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: \"pointer\" }}\r\n                    onClick={(e) => {\r\n                      e.stopPropagation();\r\n                      history.push(`hcps/${_id}`);\r\n                    }}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        minWidth: \"10rem\",\r\n                      }}\r\n                    >\r\n                      {dociId?.split(\"-\")[1]}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"left\",\r\n                        }}\r\n                      >\r\n                        <span style={{ fontSize: \"1.25rem\" }}>\r\n                          {firstName} {lastName}\r\n                        </span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.grey }}\r\n                    >\r\n                      {specialization}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      {consultations ? consultations : 0}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.grey }}\r\n                    >\r\n                      {provider ? provider : \"No Provider\"}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Chip\r\n                        label={\r\n                          status && status === \"Active\" ? \"Active\" : \"Inactive\"\r\n                        }\r\n                        className={classes.badge}\r\n                        style={{\r\n                          background:\r\n                            status === \"Active\"\r\n                              ? theme.palette.common.lightGreen\r\n                              : theme.palette.common.lightRed,\r\n                          color:\r\n                            status === \"Active\"\r\n                              ? theme.palette.common.green\r\n                              : theme.palette.common.red,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={hcpsHeadCells}\r\n            paginationLabel=\"Doctors per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n      {/* ADD Doctor MODAL */}\r\n      <Modals\r\n        isOpen={openAddHcp}\r\n        title=\"Add Doctor\"\r\n        rowSpacing={5}\r\n        height=\"auto\"\r\n        width={{ sm: \"50vw\", xs: \"90vw\" }}\r\n        handleClose={() => setOpenAddHcp(false)}\r\n      >\r\n        <Formik\r\n          initialValues={addDocInitialValues}\r\n          onSubmit={onSubmit}\r\n          validationSchema={addDoctorValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"1rem\" }}>\r\n                <Grid container direction=\"column\" gap={2}>\r\n                  <Grid item container direction=\"column\" gap={1}>\r\n                    <Grid item container spacing={2}>\r\n                      <Grid item container xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"First Name\"\r\n                          id=\"firstName\"\r\n                          name=\"firstName\"\r\n                          placeholder=\"Enter first name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item container xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Last Name\"\r\n                          id=\"lastName\"\r\n                          name=\"lastName\"\r\n                          placeholder=\"Enter last name\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid item container direction=\"column\" gap={2}>\r\n                      <Grid item container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"date\"\r\n                            name=\"dob\"\r\n                            label=\"DOB\"\r\n                            setFieldValue={setFieldValue}\r\n                            setValues={setValues}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <Grid container direction=\"column\">\r\n                            <FormikControl\r\n                              control=\"select\"\r\n                              options={docSpecializationsOptions}\r\n                              name=\"specialization\"\r\n                              label=\"Specialization\"\r\n                              placeholder=\"Specialization\"\r\n                            />\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container direction=\"column\" gap={2}>\r\n                    <Grid item container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          label=\"Gender\"\r\n                          id=\"gender\"\r\n                          name=\"gender\"\r\n                          options={genderType}\r\n                          placeholder=\"Gender\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Phone Number\"\r\n                          id=\"phone\"\r\n                          name=\"phone\"\r\n                          placeholder=\"Enter last Phone number\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item container direction=\"column\" gap={2}>\r\n                      <Grid item container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"input\"\r\n                            label=\"Hospital\"\r\n                            id=\"hospital\"\r\n                            name=\"hospital\"\r\n                            placeholder=\"Enter hospital Name\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6} marginBottom={{ xs: 1 }}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={docCadreOptions}\r\n                            name=\"cadre\"\r\n                            label=\"Cadre\"\r\n                            placeholder=\"Select Cadre\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container spacing={2} alignItems=\"center\">\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"file\"\r\n                        name=\"image\"\r\n                        label=\"Profile Pics\"\r\n                        setFieldValue={setFieldValue}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        label=\"Heala-ID\"\r\n                        id=\"dociId\"\r\n                        name=\"dociId\"\r\n                        placeholder=\"Enter Heala ID\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <CustomButton\r\n                      title=\"Add Doctor\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Hcps;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpPatients.js",["1343"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Avatar,\r\n  TableRow,\r\n  Checkbox,\r\n  TableCell,\r\n  Button,\r\n} from \"@mui/material\";\r\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { hcpPatientsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { getDoctorPatients } from \"components/graphQL/useQuery\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      whitespace: \"nowrap\",\r\n      maxWidth: \"15rem\",\r\n      width: \"100%\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst HcpPatients = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [pageInfo, setPageInfo] = useState([]);\r\n\r\n  const { hcpId } = useParams();\r\n\r\n  const { setSelectedRows } = useActions();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n\r\n  const [fetchDoctorsPatients, { loading, error, data }] =\r\n    useLazyQuery(getDoctorPatients);\r\n\r\n  useEffect(() => {\r\n    fetchDoctorsPatients({\r\n      variables: { id: hcpId },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchDoctorsPatients, hcpId]);\r\n\r\n  const [profiles, setProfiles] = useState([]);\r\n  useEffect(() => {\r\n    if (data) {\r\n      setProfiles(data.getDoctorPatients.data);\r\n      setPageInfo(data.getDoctorPatients.pageInfo);\r\n    }\r\n  }, [data]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      gap={2}\r\n      flexWrap=\"nowrap\"\r\n      height=\"100%\"\r\n      sx={{ margin: \"3rem 0rem\" }}\r\n    >\r\n      <TableLayout>\r\n        {profiles.length > 0 ? (\r\n          <Grid item container direction=\"column\" height=\"100%\">\r\n            <EnhancedTable\r\n              headCells={hcpPatientsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"List Per Page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                await changeTableLimit(fetchDoctorsPatients, {\r\n                  first: e,\r\n                  id: hcpId,\r\n                });\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                await handlePageChange(fetchDoctorsPatients, page, pageInfo, {\r\n                  id: hcpId,\r\n                });\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const { _id, patientData } = row;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.grey }}\r\n                    >\r\n                      {patientData && patientData?.dociId?.split(\"-\")[1]}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                          textAlign: \"left\",\r\n                        }}\r\n                      >\r\n                        <span style={{ marginRight: \"1rem\" }}>\r\n                          <Avatar\r\n                            alt=\"\"\r\n                            src={row.image}\r\n                            sx={{ width: 24, height: 24 }}\r\n                          />\r\n                        </span>\r\n                        <span style={{ fontSize: \"1.25rem\" }}>\r\n                          {patientData?.firstName\r\n                            ? `${patientData?.firstName} ${patientData?.lastName}`\r\n                            : \"No Patient Name\"}\r\n                          {row.lastName}\r\n                        </span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      {patientData?.gender && patientData?.gender}\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        className={classes.button}\r\n                        component={Link}\r\n                        to={`/patients/${patientData?._id}/profile`}\r\n                        endIcon={<ArrowForwardIosIcon />}\r\n                      >\r\n                        View Patient Profile\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={hcpPatientsHeadCells}\r\n            paginationLabel=\"List  per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HcpPatients;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpConsultations.js",["1344","1345","1346"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getDocConsult } from \"components/graphQL/useQuery\";\r\nimport {\r\n  Avatar,\r\n  Typography,\r\n  TableRow,\r\n  Button,\r\n  TableCell,\r\n  Checkbox,\r\n  Grid,\r\n} from \"@mui/material\";\r\nimport { consultationsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NoData, EnhancedTable, EmptyTable } from \"components/layouts\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableCell: {\r\n    \"&.css-1jilxo7-MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"12rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\n/* const filterOptions = [\r\n  { id: 0, value: \"Name\" },\r\n  { id: 1, value: \"Date\" },\r\n  { id: 2, value: \"Description\" },\r\n]; */\r\n\r\nconst HcpConsultations = (props) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [pageInfo, setPageInfo] = useState([]);\r\n  const { hcpId } = useParams();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [consultations, setConsultations] = useState([]);\r\n\r\n  const [fetchDocConsultations, { loading, data, error }] =\r\n    useLazyQuery(getDocConsult);\r\n\r\n  useEffect(() => {\r\n    fetchDocConsultations({\r\n      variables: {\r\n        id: hcpId,\r\n        orderBy: \"-createdAt\",\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchDocConsultations, hcpId]);\r\n\r\n  useEffect(() => {\r\n    if (data && data.getConsultations.data) {\r\n      setConsultations(data.getConsultations.data);\r\n      setPageInfo(data.getConsultations.pageInfo);\r\n    }\r\n  }, [data, hcpId]);\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <Grid container direction=\"column\" height=\"100%\" gap={2}>\r\n      <Grid\r\n        item\r\n        container\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      ></Grid>\r\n      <TableLayout>\r\n        {consultations.length > 0 ? (\r\n          <Grid item>\r\n            <EnhancedTable\r\n              headCells={consultationsHeadCells}\r\n              rows={consultations}\r\n              paginationLabel=\"Consultations per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                await changeTableLimit(fetchDocConsultations, {\r\n                  first: e,\r\n                  id: hcpId,\r\n                });\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                await handlePageChange(fetchDocConsultations, page, pageInfo, {\r\n                  id: hcpId,\r\n                });\r\n              }}\r\n            >\r\n              {consultations.map((row, index) => {\r\n                // eslint-disable-next-line\r\n                const {\r\n                  _id,\r\n                  createdAt,\r\n                  symptoms,\r\n                  status,\r\n                  type,\r\n                  contactMedium,\r\n                  patientData,\r\n\r\n                  // eslint-disable-next-line\r\n                } = row;\r\n                const isItemSelected = isSelected(row._id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      {dateMoment(createdAt)}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ maxWidth: \"20rem\" }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"left\",\r\n                        }}\r\n                      >\r\n                        <span style={{ marginRight: \"1rem\" }}>\r\n                          <Avatar\r\n                            alt={`Display Photo of ${patientData.firstName}`}\r\n                            src={\r\n                              patientData.picture\r\n                                ? patientData.picture\r\n                                : displayPhoto\r\n                            }\r\n                            sx={{ width: 24, height: 24 }}\r\n                          />\r\n                        </span>\r\n                        <span\r\n                          style={{ fontSize: \"1.25rem\" }}\r\n                        >{`${patientData.firstName} ${patientData.lastName}`}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      <Grid container gap={1}>\r\n                        {symptoms\r\n                          ? symptoms.map((i) => {\r\n                              return <p key={i.name}>{i.name}</p>;\r\n                            })\r\n                          : \"No Value\"}\r\n                      </Grid>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {contactMedium}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {type ? type : \"No Value\"}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {status ? status : \"No Value\"}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\">\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        className={classes.button}\r\n                        component={Link}\r\n                        to={`/hcps/${hcpId}/consultations/case-notes/${_id}`}\r\n                        endIcon={<ArrowForwardIosIcon />}\r\n                      >\r\n                        View Details\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={consultationsHeadCells}\r\n            paginationLabel=\"Consultation  per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HcpConsultations;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Prescriptions.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ViewMessage.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpCaseNote.js",["1347"],"import React, { useEffect, Fragment, useState } from \"react\";\r\nimport { Grid, Chip, Avatar, Typography, Divider } from \"@mui/material\";\r\nimport { Modals, Loader, CustomButton } from \"components/Utilities\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { getConsult } from \"components/graphQL/useQuery\";\r\nimport { dateMoment, duration } from \"components/Utilities/Time\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { trucateString } from \"helpers/filterHelperFunctions\";\r\nimport Copy from \"components/Copy\";\r\nimport { daily } from \"components/Utilities/Time\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  parentGridWrapper: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.1)\",\r\n\r\n    \"&:not(:last-of-type)\": {\r\n      marginBottom: \"5rem\",\r\n    },\r\n  },\r\n\r\n  infoBadge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.5rem\",\r\n      borderRadius: \"1.5rem\",\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n    },\r\n  },\r\n\r\n  title: {\r\n    \"&.MuiTypography-root\": {\r\n      color: theme.palette.common.grey,\r\n      // marginRight: \"2rem\",\r\n      whitespace: \"wrap\",\r\n    },\r\n  },\r\n  item: {\r\n    padding: \"2rem 3rem\",\r\n    justifyContent: \"space-between\",\r\n    width: \"100%\",\r\n    flexWrap: \"nowrap\",\r\n    // justifyContent: \"space-between\",\r\n    \"&.MuiGrid-root > *\": {\r\n      flex: 1,\r\n    },\r\n  },\r\n  subItem: {\r\n    \"&.MuiGrid-container\": {\r\n      flexDirection: \"column\",\r\n      wordBreak: \"break-word\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst HcpCaseNotes = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const { rowId } = useParams();\r\n\r\n  const [consult, setConsult] = useState([]);\r\n\r\n  const { loading, data, error } = useQuery(getConsult, {\r\n    variables: {\r\n      id: rowId,\r\n    },\r\n  });\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const handleDialogOpen = () => {\r\n    setIsOpen(true);\r\n  };\r\n  const handleDialogClose = () => {\r\n    setIsOpen(false);\r\n  };\r\n  useEffect(() => {\r\n    if (data) {\r\n      setConsult(data.getConsultation);\r\n    }\r\n  }, [data, rowId]);\r\n  if (error) return <NoData error={error} />;\r\n\r\n  if (loading) return <Loader />;\r\n  const {\r\n    _id,\r\n    prescription,\r\n    type,\r\n    consultationDuration,\r\n    consultationOwner,\r\n    referralId,\r\n    createdAt,\r\n    discomfortLevel,\r\n    status,\r\n    description,\r\n    doctorNote,\r\n    severity,\r\n    firstNotice,\r\n    contactMedium,\r\n    updatedAt,\r\n    patientData,\r\n    doctorData,\r\n    symptoms,\r\n  } = consult;\r\n\r\n  return (\r\n    <>\r\n      <Grid container direction=\"column\" gap={2} sx={{ margin: \"3rem 0rem\" }}>\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          className={classes.parentGridWrapper}\r\n        >\r\n          <Grid\r\n            item\r\n            container\r\n            flexWrap=\"wrap\"\r\n            className={classes.item}\r\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\r\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\r\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\r\n          >\r\n            <Grid item>\r\n              <Grid container className={classes.subItem} gap={2}>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Consultation Date:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item container>\r\n                  <Typography variant=\"h5\">{dateMoment(createdAt)}</Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid item container className={classes.subItem} gap={2}>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Referral:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  {referralId ? (\r\n                    <Grid item container gap={2}>\r\n                      <Typography variant=\"body1\">\r\n                        {trucateString(referralId, 10, \"front\")}\r\n                      </Typography>\r\n                      <Copy text={referralId} name=\"Consultation ID\" />\r\n                    </Grid>\r\n                  ) : (\r\n                    \"No value\"\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid\r\n                item\r\n                container\r\n                flexDirection=\"column\"\r\n                gap={2}\r\n                className={classes.subItem}\r\n              >\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Consultation ID:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  {_id ? (\r\n                    <Grid item container gap={2}>\r\n                      <Typography variant=\"h5\">\r\n                        {trucateString(referralId, 10, \"front\")}\r\n                      </Typography>\r\n                      <Copy text={referralId} name=\"Consultation ID\" />\r\n                    </Grid>\r\n                  ) : (\r\n                    <Typography variant=\"h5\"> No value</Typography>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider color={theme.palette.common.lighterGrey} />\r\n          <Grid\r\n            item\r\n            container\r\n            className={classes.item}\r\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\r\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\r\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\r\n          >\r\n            <Grid item>\r\n              <Grid container className={classes.subItem} gap={2}>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Doctor:\r\n                  </Typography>\r\n                </Grid>\r\n                {patientData && Object.keys(patientData).length > 0 ? (\r\n                  <Grid item container alignItems=\"center\">\r\n                    <Grid item marginRight={2}>\r\n                      <Avatar\r\n                        src={patientData.image}\r\n                        alt={`Display photo of the ${patientData.firstName}`}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Typography variant=\"h5\">{`${patientData.firstName} ${patientData.lastName}`}</Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                ) : (\r\n                  <Typography variant=\"h5\">No Doctor</Typography>\r\n                )}\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid item container className={classes.subItem} gap={2}>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Contact:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\">\r\n                    {contactMedium ? contactMedium : \"No Value\"}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid item container className={classes.subItem} gap={2}>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Owner:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\">\r\n                    {consultationOwner ? consultationOwner : \"No Value\"}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider color={theme.palette.common.lighterGrey} />\r\n\r\n          <Grid\r\n            item\r\n            container\r\n            className={classes.item}\r\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\r\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\r\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\r\n          >\r\n            <Grid item container className={classes.subItem} gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Severity:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Grid container gap={1}>\r\n                  <Typography variant=\"body1\">\r\n                    {severity ? severity : \"No value\"}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container className={classes.subItem} gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  First Notice:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"body1\">\r\n                  {\" \"}\r\n                  {firstNotice ? firstNotice : \"No value\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container className={classes.subItem} gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Discomfort:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"body1\">\r\n                  {discomfortLevel ? discomfortLevel : \"No Value\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Divider color={theme.palette.common.lighterGrey} />\r\n          <Grid\r\n            item\r\n            container\r\n            className={classes.item}\r\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\r\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\r\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\r\n          >\r\n            <Grid item container className={classes.subItem} gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Symptoms:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Grid container gap={1}>\r\n                  {symptoms ? (\r\n                    symptoms.map((symptom, index) => {\r\n                      return (\r\n                        <Typography key={index} variant=\"body1\">\r\n                          {`${symptom.name},`}\r\n                        </Typography>\r\n                      );\r\n                    })\r\n                  ) : (\r\n                    <Typography variant=\"body1\">No Value</Typography>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid\r\n                item\r\n                container\r\n                flexDirection=\"column\"\r\n                className={classes.subItem}\r\n                gap={2}\r\n              >\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Status:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Chip\r\n                    variant=\"contained\"\r\n                    label={status}\r\n                    className={classes.infoBadge}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid item container className={classes.subItem} gap={2}>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Type:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\">\r\n                    {type ? type : \"No Value\"}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider color={theme.palette.common.lighterGrey} />\r\n          <Grid\r\n            item\r\n            container\r\n            className={classes.item}\r\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\r\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\r\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\r\n          >\r\n            <Grid item container className={classes.subItem} gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Description:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}>\r\n                  {description ? description : \"No Value\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container direction=\"column\" gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Doctors Note:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}>\r\n                  {doctorNote ? doctorNote : \"No Value\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container direction=\"column\" gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Updated At:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}>\r\n                  {dateMoment(updatedAt)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider color={theme.palette.common.lighterGrey} />\r\n          <Grid item container justifyContent=\"flex-end\">\r\n            {prescription && (\r\n              <Grid item container width={{ md: \"20%\", xs: \"100%\", sm: \"50%\" }}>\r\n                <CustomButton\r\n                  title=\"View Prescription\"\r\n                  width=\"100%\"\r\n                  type={buttonType}\r\n                  onClick={handleDialogOpen}\r\n                />\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n          <Grid\r\n            item\r\n            container\r\n            className={classes.item}\r\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\r\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\r\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\r\n          >\r\n            <Grid item container className={classes.subItem} gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Duration:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}>\r\n                  {consultationDuration ? consultationDuration : \"No Value\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container direction=\"column\" gap={2}></Grid>\r\n            <Grid item container direction=\"column\" gap={2}></Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Modals\r\n        isOpen={isOpen}\r\n        height={{ xs: \"90vh\" }}\r\n        title=\"Prescription\"\r\n        width={{ md: \"50vw\", sm: \"70vw\", xs: \"90vw\" }}\r\n        rowSpacing={2}\r\n        handleClose={handleDialogClose}\r\n      >\r\n        <Grid item container width=\"100%\" direction=\"row\">\r\n          <Grid\r\n            item\r\n            container\r\n            padding={{ md: \"2rem 0\", sm: \"1rem 0\", xs: \"1rem 0\" }}\r\n            // alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n            width=\"100%\"\r\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\r\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\r\n            rowGap={{ xs: \"1rem\", sm: \"1.5rem\" }}\r\n          >\r\n            <Grid item>\r\n              <Grid\r\n                item\r\n                container\r\n                className={classes.subItem}\r\n                gap={{ md: 2, sm: 2, xs: 0 }}\r\n              >\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Doctor:\r\n                  </Typography>\r\n                </Grid>\r\n                {doctorData && Object.keys(doctorData).length > 0 ? (\r\n                  <Grid container alignItems=\"center\">\r\n                    <Grid item marginRight={2}>\r\n                      <Avatar\r\n                        src={doctorData.image}\r\n                        alt={`Display photo of the ${doctorData.firstName}`}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Typography variant=\"h5\">{`${doctorData.firstName} ${doctorData.lastName}`}</Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                ) : (\r\n                  <Typography variant=\"body1\">No Doctor</Typography>\r\n                )}\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid\r\n                item\r\n                container\r\n                className={classes.subItem}\r\n                gap={{ md: 2, sm: 2, xs: 0 }}\r\n              >\r\n                <Grid>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Prescription Date\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"h5\">{dateMoment(createdAt)}</Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid\r\n                item\r\n                container\r\n                className={classes.subItem}\r\n                gap={{ md: 2, sm: 2, xs: 0 }}\r\n              >\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Symptoms\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Grid container gap={1}>\r\n                    {symptoms ? (\r\n                      symptoms.map((i) => {\r\n                        return (\r\n                          <Typography key={i.name} variant=\"h5\">\r\n                            {i.name}\r\n                          </Typography>\r\n                        );\r\n                      })\r\n                    ) : (\r\n                      <Typography variant=\"h5\">No Value</Typography>\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider color={theme.palette.common.lighterGrey} />\r\n          {prescription && (\r\n            <Fragment>\r\n              <Grid\r\n                item\r\n                container\r\n                style={{ padding: \"2rem 0rem\" }}\r\n                alignItems=\"center\"\r\n                justifyContent=\"space-between\"\r\n                sx={{ flexWrap: \"nowrap\" }}\r\n              >\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Drug\r\n                  </Typography>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Dosage\r\n                  </Typography>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Frequency\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Mode\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n              <Divider color={theme.palette.common.lighterGrey} />\r\n            </Fragment>\r\n          )}\r\n\r\n          {prescription &&\r\n            prescription.map((i, index) => {\r\n              return (\r\n                <>\r\n                  <Grid\r\n                    key={index}\r\n                    item\r\n                    container\r\n                    style={{ color: \"#4f4f4f\" }}\r\n                    alignItems=\"center\"\r\n                    justifyContent=\"space-between\"\r\n                    sx={{ flexWrap: \"nowrap\", textAlign: \"left\" }}\r\n                  >\r\n                    <Grid item>\r\n                      <Typography variant=\"body1\" className={classes.title}>\r\n                        {i.drugName}\r\n                      </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                      <Typography variant=\"body1\" className={classes.title}>\r\n                        {`${i.dosageQuantity} ${i.dosage}`}\r\n                      </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                      <Typography variant=\"body1\" className={classes.title}>\r\n                        {duration(i.dosageFrequency.duration)}{\" \"}\r\n                        {daily(i.dosageFrequency.day)}\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Typography variant=\"body1\" className={classes.title}>\r\n                        {i.mode}\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Divider color={theme.palette.common.lighterGrey} />\r\n                </>\r\n              );\r\n            })}\r\n          <Grid\r\n            item\r\n            container\r\n            padding={{ md: \"2rem 0\", sm: \"1rem 0\", xs: \"1rem 0\" }}\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n            sx={{ flexWrap: \"nowrap\" }}\r\n          >\r\n            <Grid\r\n              item\r\n              container\r\n              direction=\"column\"\r\n              gap={{ md: 2, sm: 2, xs: 0 }}\r\n            >\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Doctors Note:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}>\r\n                  {doctorNote ? doctorNote : \"No Value\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Modals>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HcpCaseNotes;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpAppointments.js",["1348","1349","1350"],"import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Divider, Avatar, Typography } from \"@mui/material\";\r\nimport { Modals, CustomButton, Loader } from \"components/Utilities\";\r\nimport { timeConverter, timeMoment } from \"components/Utilities/Time\";\r\nimport * as Yup from \"yup\";\r\nimport { updateAppointment } from \"components/graphQL/Mutation\";\r\nimport { DeleteOrDisable } from \"components/modals\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { getAppoint, getDOCAppoint } from \"components/graphQL/useQuery\";\r\nimport { deleteAppointment } from \"components/graphQL/Mutation\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { ReactComponent as CalendarIcon } from \"assets/images/calendar.svg\";\r\nimport { ReactComponent as TimerIcon } from \"assets/images/timer.svg\";\r\nimport AssignmentIcon from \"@mui/icons-material/Assignment\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { NoData } from \"components/layouts\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  parentGridWrapper: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.1)\",\r\n\r\n    \"&:not(:last-of-type)\": {\r\n      marginBottom: \"5rem\",\r\n    },\r\n  },\r\n\r\n  infoBadge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.5rem\",\r\n      borderRadius: \"1.5rem\",\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n    },\r\n  },\r\n\r\n  title: {\r\n    \"&.MuiTypography-root\": {\r\n      color: theme.palette.common.grey,\r\n      // marginRight: \"2rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst HcpAppointments = () => {\r\n  const { hcpId } = useParams();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { displayAlert } = useAlert();\r\n  const [appointment, setAppointment] = useState([]);\r\n  const [updateAppoint] = useMutation(updateAppointment);\r\n  const { loading, data, error } = useQuery(getDOCAppoint, {\r\n    variables: {\r\n      id: hcpId,\r\n      orderBy: \"-createdAt\",\r\n    },\r\n  });\r\n  const [deleteAppointments] = useMutation(deleteAppointment);\r\n  useEffect(() => {\r\n    if (data) {\r\n      setAppointment(data.getAppointments.data);\r\n    }\r\n  }, [data, hcpId]);\r\n  const handleDeleteOpenDialog = (id) => {\r\n    setId(id);\r\n    setdeleteModal(true);\r\n  };\r\n\r\n  const greenButton = {\r\n    background: theme.palette.common.lightGreen,\r\n    hover: theme.palette.success.light,\r\n    active: theme.palette.success.dark,\r\n  };\r\n  const [patientId, setPatientId] = useState(null);\r\n  const handleSchedule = (id, patient) => {\r\n    setIsPatients(true);\r\n    setEditid(id);\r\n    setPatientId(patient);\r\n  };\r\n  const [id, setId] = useState(null);\r\n  const [isPatients, setIsPatients] = useState(false);\r\n  const [deleteModal, setdeleteModal] = useState(false);\r\n  const onConfirm = async () => {\r\n    try {\r\n      await deleteAppointments({\r\n        variables: { id },\r\n\r\n        refetchQueries: [\r\n          {\r\n            query: getDOCAppoint,\r\n            variables: {\r\n              id: hcpId,\r\n              orderBy: \"-createdAt\",\r\n            },\r\n          },\r\n        ],\r\n      });\r\n      displayAlert(\"success\", \"Appointment Deleted Successfully\");\r\n    } catch (error) {\r\n      console.log(error);\r\n      displayAlert(\"error\", error);\r\n    }\r\n  };\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n  const handlePatientCloses = () => setIsPatients(false);\r\n  const redButton = {\r\n    background: theme.palette.common.lightRed,\r\n    hover: theme.palette.error.light,\r\n    active: theme.palette.error.dark,\r\n  };\r\n\r\n  const [editId, setEditid] = useState(null);\r\n  const initialValues1 = {\r\n    date: \"\",\r\n  };\r\n  const validationSchema1 = Yup.object({\r\n    date: Yup.string(\"select date and time \").required(\r\n      \"Date  and time is required\"\r\n    ),\r\n  });\r\n  const onSubmit1 = async (values) => {\r\n    const { date } = values;\r\n\r\n    const timeValue = timeMoment(date);\r\n    const dateValue = timeConverter(date);\r\n    try {\r\n      await updateAppoint({\r\n        variables: {\r\n          id: editId,\r\n          date: dateValue,\r\n          time: timeValue,\r\n          doctor: hcpId,\r\n          patient: patientId,\r\n        },\r\n        refetchQueries: [\r\n          {\r\n            query: getAppoint,\r\n            variables: {\r\n              id: patientId,\r\n              orderBy: \"-createdAt\",\r\n            },\r\n          },\r\n          {\r\n            query: getDOCAppoint,\r\n            variables: {\r\n              id: hcpId,\r\n              orderBy: \"-createdAt\",\r\n            },\r\n          },\r\n        ],\r\n      });\r\n      displayAlert(\"success\", \"Appointment Updated Successfully\");\r\n    } catch (error) {\r\n      console.log(error);\r\n      displayAlert(\"error\", error);\r\n    }\r\n    handlePatientCloses();\r\n  };\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        direction=\"column\"\r\n        height=\"100%\"\r\n      >\r\n        {appointment.length > 0 ? (\r\n          appointment.map((appoint) => (\r\n            <Grid\r\n              item\r\n              container\r\n              direction=\"column\"\r\n              key={appoint._id}\r\n              className={classes.parentGridWrapper}\r\n            >\r\n              <Grid\r\n                item\r\n                container\r\n                style={{ maxWidth: \"60rem\", padding: \"4rem 5rem\" }}\r\n              >\r\n                <Grid\r\n                  item\r\n                  container\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"space-between\"\r\n                >\r\n                  <Grid item>\r\n                    <Typography variant=\"body1\" className={classes.title}>\r\n                      Consultation Date:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item style={{ marginRight: \"1.5rem\" }}>\r\n                        <CalendarIcon\r\n                          fill={theme.palette.common.lightGrey}\r\n                          height={14}\r\n                          width={10}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography variant=\"body1\">{appoint.date}</Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item style={{ marginRight: \"1.5rem\" }}>\r\n                        <TimerIcon fill={theme.palette.common.red} />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography variant=\"body1\">{appoint.time}</Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Divider color={theme.palette.common.lighterGrey} />\r\n              <Grid item style={{ padding: \"2rem 5rem\" }}>\r\n                <Grid container gap={2} alignItems=\"center\">\r\n                  <Grid item>\r\n                    <Typography variant=\"body1\" className={classes.title}>\r\n                      Patient:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Avatar\r\n                      src={\r\n                        appoint.patientData.picture\r\n                          ? appoint.patientData.picture\r\n                          : displayPhoto\r\n                      }\r\n                      alt=\"Display Photo of the patient\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography variant=\"body1\">{`${appoint.patientData.firstName} ${appoint.patientData.lastName}`}</Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Divider color={theme.palette.common.lighterGrey} />\r\n              <Grid item style={{ padding: \"3rem 5rem\" }}>\r\n                <Grid container direction=\"column\">\r\n                  <Grid item style={{ marginBottom: \"1rem\" }}>\r\n                    <Typography variant=\"body1\" className={classes.title}>\r\n                      Meeting Details\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography variant=\"body2\">\r\n                      {appoint.details ? appoint.details : \"No Value\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Divider color={theme.palette.common.lighterGrey} />\r\n              <Grid item>\r\n                <Grid\r\n                  container\r\n                  justifyContent=\"flex-end\"\r\n                  style={{ padding: \"2rem 5rem\" }}\r\n                >\r\n                  <Grid item style={{ marginRight: \"3rem\" }}>\r\n                    <CustomButton\r\n                      title=\"Reschedule\"\r\n                      type={greenButton}\r\n                      height=\"3.5rem\"\r\n                      textColorOnHover=\"#fff\"\r\n                      onClick={() =>\r\n                        handleSchedule(appoint._id, appoint.patient)\r\n                      }\r\n                      textColor={theme.palette.common.green}\r\n                      endIcon={<AssignmentIcon color=\"success\" />}\r\n                      borderRadius=\"3rem\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <CustomButton\r\n                      title=\"Cancel\"\r\n                      type={redButton}\r\n                      height=\"3.5rem\"\r\n                      textColorOnHover=\"#fff\"\r\n                      onClick={() => handleDeleteOpenDialog(appoint._id)}\r\n                      textColor={theme.palette.common.red}\r\n                      endIcon={<AssignmentIcon color=\"error\" />}\r\n                      borderRadius=\"3rem\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          ))\r\n        ) : (\r\n          <NoData />\r\n        )}\r\n      </Grid>\r\n\r\n      <DeleteOrDisable\r\n        open={deleteModal}\r\n        setOpen={setdeleteModal}\r\n        title=\"Delete Appointment\"\r\n        onConfirm={onConfirm}\r\n        confirmationMsg=\"delete Appointment\"\r\n        btnValue=\"Delete\"\r\n      />\r\n\r\n      <Modals\r\n        isOpen={isPatients}\r\n        title=\"Reschedule Appointment\"\r\n        rowSpacing={5}\r\n        height=\"auto\"\r\n        handleClose={handlePatientCloses}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={validationSchema1}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid, setFieldValue }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={2}>\r\n                  <Grid item container>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item md>\r\n                        <FormikControl\r\n                          control=\"time\"\r\n                          name=\"date\"\r\n                          label=\"Date\"\r\n                          placeholder=\"Choose Date and Time\"\r\n                          setFieldValue={setFieldValue}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    container\r\n                    alignItems=\"flex-end\"\r\n                    marginTop={5}\r\n                    xs={12}\r\n                  >\r\n                    <CustomButton\r\n                      title=\"Reschedule Appointment\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HcpAppointments;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpAvailability.js",["1351","1352"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\PendingPayout.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Financetable.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Email.js",["1353","1354","1355"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { Loader, CustomButton } from \"components/Utilities\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport {\r\n  TableRow,\r\n  Alert,\r\n  TableCell,\r\n  Checkbox,\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { getEmailList } from \"components/graphQL/useQuery\";\r\nimport { emailHeader } from \"components/Utilities/tableHeaders\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n// import { emailPageDefaultFilterValues } from \"helpers/mockData\";\r\n//roleFilterBy\r\nconst useStyles = makeStyles((theme) => ({\r\n  chip: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.25rem\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n      background: theme.palette.common.white,\r\n      color: theme.palette.common.green,\r\n      \"& .MuiChip-deleteIcon\": {\r\n        color: \"inherit\",\r\n        fontSize: \"inherit\",\r\n      },\r\n    },\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"0.5rem\",\r\n      maxWidth: \"7rem\",\r\n      fontSize: \".85rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"0.85rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".2rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n  btn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  FormLabel: {\r\n    \"&.MuiFormLabel-root\": {\r\n      ...theme.typography.FormLabel,\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Email = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [\r\n    fetchEmails,\r\n    {\r\n      loading,\r\n      error,\r\n      data,\r\n      // refetch, variables\r\n    },\r\n  ] = useLazyQuery(getEmailList);\r\n  const [emails, setEmails] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchEmails();\r\n  }, [fetchEmails]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setEmails(data.getEmailList.data);\r\n    }\r\n  }, [data]);\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [response] = useState(\"\");\r\n  /* const [searchMail, setSearchMail] = useState(\"\"); */\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  // const [filterValues, setFilterValues] = useState(emailPageDefaultFilterValues);\r\n\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        height=\"100%\"\r\n        flexWrap=\"nowrap\"\r\n        gap={2}\r\n      >\r\n        {response ? (\r\n          <Grid\r\n            item\r\n            width={300}\r\n            margin=\"auto\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            textAlign=\"center\"\r\n          >\r\n            <Alert severity=\"success\">\r\n              <Typography variant=\"h1\">{response}</Typography>\r\n            </Alert>\r\n          </Grid>\r\n        ) : null}\r\n        <Grid\r\n          item\r\n          direction={{ sm: \"row\", xs: \"column\" }}\r\n          container\r\n          justifyContent={\"flex-end\"}\r\n          gap={{ md: 4, sm: 4, xs: 2 }}\r\n        >\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<AddIcon />}\r\n              component={Link}\r\n              to=\"/email/create-email\"\r\n              title=\"Add Email\"\r\n              type={buttonType}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <TableLayout>\r\n          {loading ? (\r\n            <Loader />\r\n          ) : emails && emails.length > 0 ? (\r\n            <Grid item container direction=\"column\" height=\"100%\">\r\n              <EnhancedTable\r\n                headCells={emailHeader}\r\n                rows={emails}\r\n                paginationLabel=\"email per page\"\r\n                handleChangePage={() => console.log(\"\")}\r\n                hasCheckbox={true}\r\n                changeLimit={() => console.log(\"\")}\r\n                fetchData={() => console.log(\"\")}\r\n                dataPageInfo={{}}\r\n                hasPagination={false}\r\n              >\r\n                {emails &&\r\n                  emails\r\n                    // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                    .map((row, index) => {\r\n                      const { _id, email, createdAt, role } = row;\r\n                      const isItemSelected = isSelected(_id, selectedRows);\r\n\r\n                      const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                      return (\r\n                        <TableRow\r\n                          hover\r\n                          role=\"checkbox\"\r\n                          aria-checked={isItemSelected}\r\n                          tabIndex={-1}\r\n                          key={_id}\r\n                          selected={isItemSelected}\r\n                        >\r\n                          <TableCell padding=\"checkbox\">\r\n                            <Checkbox\r\n                              onClick={() =>\r\n                                handleSelectedRows(\r\n                                  _id,\r\n                                  selectedRows,\r\n                                  setSelectedRows\r\n                                )\r\n                              }\r\n                              color=\"primary\"\r\n                              checked={isItemSelected}\r\n                              inputProps={{\r\n                                \"aria-labelledby\": labelId,\r\n                              }}\r\n                            />\r\n                          </TableCell>\r\n\r\n                          <TableCell\r\n                            id={labelId}\r\n                            scope=\"row\"\r\n                            align=\"left\"\r\n                            className={classes.tableCell}\r\n                            style={{ color: theme.palette.common.black }}\r\n                          >\r\n                            {dateMoment(createdAt)}\r\n                          </TableCell>\r\n                          <TableCell\r\n                            id={labelId}\r\n                            scope=\"row\"\r\n                            align=\"left\"\r\n                            className={classes.tableCell}\r\n                            style={{ color: theme.palette.common.black }}\r\n                          >\r\n                            {email}\r\n                          </TableCell>\r\n\r\n                          <TableCell\r\n                            align=\"left\"\r\n                            className={classes.tableCell}\r\n                            style={{ color: theme.palette.common.red }}\r\n                          >\r\n                            {role}\r\n                          </TableCell>\r\n\r\n                          <TableCell>\r\n                            <Button\r\n                              variant=\"contained\"\r\n                              className={classes.button}\r\n                              component={Link}\r\n                              disabled\r\n                              to={`email/${index}`}\r\n                              endIcon={<ArrowForwardIosIcon />}\r\n                              /* onClick={() => setSelectedSubMenu(7)} */\r\n                            >\r\n                              View mail\r\n                            </Button>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={emailHeader}\r\n              paginationLabel=\"Email  per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Email;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Finance.js",["1356","1357"],"import React, { useState, useEffect } from \"react\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { Loader, CircularProgressBar, FormSelect } from \"components/Utilities\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport TrendingDownIcon from \"@mui/icons-material/TrendingDown\";\r\nimport TrendingUpIcon from \"@mui/icons-material/TrendingUp\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card } from \"components/Utilities\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getFinanceStats } from \"components/graphQL/useQuery\";\r\nimport {\r\n  financialPercent,\r\n  selectOptions,\r\n  formatNumber,\r\n} from \"components/Utilities/Time\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardContainer: {\r\n    \"&.MuiCard-root\": {\r\n      width: \"100%\",\r\n      height: \"15.8rem\",\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\",\r\n      background: \"white\",\r\n      marginRight: \"5rem\",\r\n      \"&:hover\": {\r\n        boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.15)\",\r\n        cursor: \"pointer\",\r\n      },\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n      \"& .MuiCardContent-root .MuiTypography-h5\": {\r\n        textDecoration: \"none !important\",\r\n        textTransform: \"uppercase\",\r\n      },\r\n    },\r\n  },\r\n\r\n  iconWrapper: {\r\n    width: 60,\r\n    height: 60,\r\n    borderRadius: \"50%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  cardGrid: {\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    height: \"25.8rem\",\r\n  },\r\n  flexContainer: {\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    margin: \"auto\",\r\n    width: \"100%\",\r\n    \"&:first-child\": {\r\n      borderBottom: \".5px solid #F8F8F8\",\r\n    },\r\n  },\r\n  lightGreen: {\r\n    color: theme.palette.common.green,\r\n  },\r\n\r\n  lightRed: {\r\n    color: theme.palette.common.red,\r\n  },\r\n  mainContainer: {\r\n    width: \"100%\",\r\n    background: \"white\",\r\n    borderRadius: \"2rem\",\r\n    boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.15)\",\r\n  },\r\n  parentGrid: {\r\n    textDecoration: \"none\",\r\n    color: theme.palette.primary.main,\r\n\r\n    \"& > .MuiGrid-root.MuiGrid-container\": {\r\n      backgroundColor: \"#ffffff\",\r\n    },\r\n  },\r\n\r\n  cardIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      fontSize: \"3rem\",\r\n    },\r\n  },\r\n}));\r\nconst Finance = () => {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const [range, setRange] = useState(\"365\");\r\n  const [totalIncome, setTotalIncome] = useState(0);\r\n  const [totalExpenditure, setTotalExpenditure] = useState(0);\r\n  const financialValue = financialPercent(totalIncome, totalExpenditure);\r\n  const [finances, setFinances] = useState(financialValue);\r\n  const [fetchFinanceStats, { error, loading }] = useLazyQuery(getFinanceStats);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      fetchFinanceStats({ variables: { q: range } }).then(({ data }) => {\r\n        if (!data) throw Error(\"couldn't fetch data\");\r\n        const { subscriptionIncome, totalPayout } = data.getEarningStats;\r\n        setTotalIncome(subscriptionIncome);\r\n        setTotalExpenditure(totalPayout);\r\n        const value = financialPercent(subscriptionIncome, totalPayout);\r\n        setFinances(value);\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }, [range, fetchFinanceStats]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid container gap={3}>\r\n      <Grid\r\n        item\r\n        container\r\n        rowGap={4}\r\n        padding={{ md: \"2rem 4rem\", sm: \"2rem, 4rem\", xs: \"1rem\" }}\r\n        className={classes.mainContainer}\r\n        flexDirection={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n        sx={{ alignItems: \"center\", justifyContent: \"space-between\" }}\r\n      >\r\n        <Grid item container className={classes.flexContainer}>\r\n          <Grid item>\r\n            <Typography variant=\"h1\" color=\"#2D2F39\">\r\n              Earning\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <FormSelect\r\n              placeholder=\"Select days\"\r\n              value={range}\r\n              onChange={(e) => setRange(e?.target?.value)}\r\n              options={selectOptions}\r\n              name=\"finance\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          container\r\n          alignItems=\"center\"\r\n          flexDirection={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n          spacing={{ md: 2, xs: 2, sm: 2 }}\r\n        >\r\n          <Grid item>\r\n            <CircularProgressBar\r\n              height=\"17rem\"\r\n              width=\"17rem\"\r\n              color={theme.palette.common.green}\r\n              trailColor={theme.palette.common.red}\r\n              value={finances}\r\n              strokeWidth={8}\r\n            />\r\n          </Grid>\r\n          <Grid item flex={1}>\r\n            <Grid\r\n              container\r\n              alignItems=\"center\"\r\n              rowGap={4}\r\n              justifyContent={{\r\n                md: \"space-around\",\r\n                xs: \"flex-start\",\r\n                sm: \"space-around\",\r\n              }}\r\n            >\r\n              <Grid\r\n                item\r\n                spacing={2}\r\n                sx={{ justifyContent: \"center\", alignItems: \"center\" }}\r\n              >\r\n                <Grid\r\n                  container\r\n                  alignItems=\"center\"\r\n                  gap={{ md: 2, sm: 2, xs: 4 }}\r\n                >\r\n                  <Grid\r\n                    className={classes.iconWrapper}\r\n                    sx={{ background: theme.palette.common.lightGreen }}\r\n                  >\r\n                    <Grid item>\r\n                      <TrendingDownIcon\r\n                        color=\"success\"\r\n                        className={classes.cardIcon}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography noWrap variant=\"h2\">\r\n                      <span\r\n                        style={{\r\n                          textDecoration: \"line-through\",\r\n                          textDecorationStyle: \"double\",\r\n                        }}\r\n                      >\r\n                        N{\"\"}\r\n                      </span>\r\n                      {formatNumber(totalIncome)}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      style={{\r\n                        color: theme.palette.common.lightGrey,\r\n                      }}\r\n                    >\r\n                      Subscription Earnings\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              {/* second */}\r\n              <Grid item>\r\n                <Grid\r\n                  container\r\n                  alignItems=\"center\"\r\n                  gap={{ md: 2, sm: 2, xs: 4 }}\r\n                >\r\n                  <Grid\r\n                    className={classes.iconWrapper}\r\n                    sx={{ background: theme.palette.common.lightRed }}\r\n                  >\r\n                    <Grid item>\r\n                      <TrendingUpIcon\r\n                        color=\"error\"\r\n                        className={classes.cardIcon}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography noWrap variant=\"h2\">\r\n                      <span\r\n                        style={{\r\n                          textDecoration: \"line-through\",\r\n                          textDecorationStyle: \"double\",\r\n                        }}\r\n                      >\r\n                        N\r\n                      </span>\r\n                      {formatNumber(+totalExpenditure)}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      style={{\r\n                        color: theme.palette.common.lightGrey,\r\n                      }}\r\n                    >\r\n                      Total Payouts\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              {/* second */}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* iterms */}\r\n      <Grid item container spacing={2} justifyContent=\"space-between\">\r\n        {/* 1 */}\r\n        <Grid item container md={4} sm={4} xs={12}>\r\n          <Grid\r\n            item\r\n            container\r\n            flexDirection=\"column\"\r\n            component={Link}\r\n            to=\"/finance/payouts\"\r\n            className={classes.parentGrid}\r\n          >\r\n            <Card\r\n              title=\"Doctor Payout\"\r\n              background={theme.palette.common.lightGreen}\r\n            >\r\n              <TrendingUpIcon color=\"error\" className={classes.cardIcon} />\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n        {/* 2 */}\r\n        <Grid item container md={4} sm={4} xs={12}>\r\n          <Grid\r\n            item\r\n            container\r\n            flexDirection=\"column\"\r\n            component={Link}\r\n            to=\"/finance/earnings\"\r\n            className={classes.parentGrid}\r\n          >\r\n            <Card\r\n              title=\"Doctor Earnings\"\r\n              background={theme.palette.common.lightGreen}\r\n            >\r\n              <Grid className={classes.iconWrapper}>\r\n                <TrendingDownIcon\r\n                  color=\"success\"\r\n                  className={classes.cardIcon}\r\n                />\r\n              </Grid>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n        {/* 3 */}\r\n        <Grid item container md={4} sm={4} xs={12}>\r\n          <Grid\r\n            item\r\n            container\r\n            flexDirection=\"column\"\r\n            component={Link}\r\n            to=\"/finance/sub-income\"\r\n            className={classes.parentGrid}\r\n          >\r\n            <Card\r\n              title=\"Subscription Income\"\r\n              background={theme.palette.common.lightGreen}\r\n            >\r\n              <Grid className={classes.iconWrapper}>\r\n                <TrendingDownIcon\r\n                  color=\"success\"\r\n                  className={classes.cardIcon}\r\n                />\r\n              </Grid>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nFinance.propTypes = {\r\n  /* setSelectedSubMenu: PropTypes.func, */\r\n};\r\n\r\nexport default Finance;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Patients.js",["1358","1359","1360","1361"],"import React, { useState, useEffect } from \"react\";\r\nimport { useLazyQuery, NetworkStatus } from \"@apollo/client\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport { Grid } from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useStyles } from \"styles/patientsPageStyles\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport PatientFilters from \"components/Forms/Filters/PatientFilters\";\r\nimport { patientsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo, searchOptions } from \"helpers/mockData\";\r\nimport {\r\n  getPatients,\r\n  getPatientsByPlan,\r\n  getPatientsByStatus,\r\n} from \"components/graphQL/useQuery\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { getSearchPlaceholder } from \"helpers/func\";\r\nimport PatientsRow from \"components/Rows/PatientsRow\";\r\n\r\nconst Patients = () => {\r\n  const classes = useStyles();\r\n  const { displayAlert } = useAlert();\r\n  const [profiles, setProfiles] = useState([]);\r\n  const [fetchPatient, { loading, refetch, error, variables, networkStatus }] =\r\n    useLazyQuery(getPatients);\r\n  const { provider } = useSelector((state) => state.patient);\r\n  const [\r\n    fetchPatientByStatus,\r\n    {\r\n      loading: byStatusLoading,\r\n      variables: byStatusVaribles,\r\n      refetch: byStatusRefetch,\r\n    },\r\n  ] = useLazyQuery(getPatientsByStatus);\r\n  const [\r\n    fetchPatientByPlan,\r\n    {\r\n      loading: byPlanLoading,\r\n      variables: byPlanVaribles,\r\n      refetch: byPlanRefetch,\r\n    },\r\n  ] = useLazyQuery(getPatientsByPlan);\r\n\r\n  const [pageInfo, setPageInfo] = useState({\r\n    page: 0,\r\n    totalPages: 1,\r\n    hasNextPage: false,\r\n    hasPrevPage: false,\r\n    limit: 10,\r\n    totalDocs: 0,\r\n  });\r\n  useEffect(() => {\r\n    fetchPatient({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setPageInfo(data?.profiles?.pageInfo || []);\r\n          setProfiles(data?.profiles?.data || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(data?.profiles?.pageInfo || defaultPageInfo);\r\n        setProfiles(data?.profiles?.data || []);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n      <Grid\r\n        item\r\n        container\r\n        spacing={2}\r\n        className={classes.searchFilterContainer}\r\n      >\r\n        <Grid item container flexWrap=\"wrap\" spacing={4}></Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        filters={\r\n          <PatientFilters\r\n            setProfiles={setProfiles}\r\n            setPageInfo={setPageInfo}\r\n            queryParams={{\r\n              patientsParams: { fetchPatient, loading, refetch, variables },\r\n              patientsByStatusParams: {\r\n                byStatusLoading,\r\n                byStatusVaribles,\r\n                byStatusRefetch,\r\n                fetchPatientByStatus,\r\n              },\r\n              patientsByPlanParams: {\r\n                byPlanLoading,\r\n                byPlanVaribles,\r\n                byPlanRefetch,\r\n                fetchPatientByPlan,\r\n              },\r\n            }}\r\n          />\r\n        }\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{\r\n              fetchData: fetchPatient,\r\n              variables,\r\n              loading,\r\n              newVariables: {},\r\n            }}\r\n            setPageInfo={(data) => setPageInfo(data?.profiles?.pageInfo || {})}\r\n            setProfiles={(data) => setProfiles(data?.profiles?.data || [])}\r\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\r\n            filterOptions={searchOptions}\r\n          />\r\n        }\r\n      >\r\n        {loading || byStatusLoading || byPlanLoading ? (\r\n          <Loader />\r\n        ) : networkStatus === NetworkStatus.refetch ? (\r\n          <Loader />\r\n        ) : profiles.length > 0 ? (\r\n          /* ================= PATIENTS TABLE ================= */\r\n          <Grid\r\n            container\r\n            item\r\n            direction=\"column\"\r\n            overflow=\"hidden\"\r\n            maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n          >\r\n            <EnhancedTable\r\n              headCells={patientsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"Patients per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchPatient, {\r\n                  first: e,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchPatient, page, pageInfo, {});\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <PatientsRow\r\n                    key={index}\r\n                    patientData={row}\r\n                    labelId={labelId}\r\n                  />\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={patientsHeadCells}\r\n            paginationLabel=\"Patients per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Patients;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\PatientProfile.js",["1362","1363"],"import React, { useState, useEffect } from \"react\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport {\r\n  CustomButton,\r\n  Loader,\r\n  DisplayProfile,\r\n  ProfileCard,\r\n} from \"components/Utilities\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport PersonRemoveIcon from \"@mui/icons-material/PersonRemove\";\r\nimport { DeleteOrDisable } from \"components/modals\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { deleteProfile } from \"components/graphQL/Mutation\";\r\nimport {\r\n  getPatients,\r\n  getProfile,\r\n  verifiedEmail,\r\n} from \"components/graphQL/useQuery\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridsWrapper: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    padding: \"1rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.3rem !important\",\r\n      //   height: \"2.7rem\",\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n      borderRadius: \"1.5rem\",\r\n    },\r\n  },\r\n\r\n  cardGrid: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    padding: \"4rem 5rem\",\r\n    height: \"16.1rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\r\n  },\r\n\r\n  linkIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      fontSize: \"1.25rem\",\r\n      color: theme.palette.common.green,\r\n      marginLeft: \"1.2rem\",\r\n    },\r\n  },\r\n  link: {\r\n    textDecoration: \"none\",\r\n    color: theme.palette.common.green,\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  buttonsGridWrapper: {\r\n    height: \"16.1rem\",\r\n  },\r\n}));\r\n\r\nconst PatientProfile = () => {\r\n  const { patientId } = useParams();\r\n  const doci = localStorage.getItem(\"userDociId\");\r\n  const { loading, data, error } = useQuery(getProfile, {\r\n    variables: {\r\n      profileId: patientId,\r\n    },\r\n  });\r\n  console.log(data);\r\n  const { data: emailStatus, loading: emailLoading } = useQuery(verifiedEmail, {\r\n    variables: {\r\n      dociId: doci,\r\n    },\r\n  });\r\n\r\n  const [disableUser] = useMutation(deleteProfile);\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [patientProfile, setPatientProfile] = useState(\"\");\r\n  const [emailStat, setEmailStat] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (emailStatus) {\r\n      setEmailStat(emailStatus.accounts.data[0].isEmailVerified);\r\n    }\r\n  }, [emailStatus]);\r\n  useEffect(() => {\r\n    if (data) {\r\n      setPatientProfile(data.profile);\r\n    }\r\n  }, [data, patientId]);\r\n\r\n  const history = useHistory();\r\n  const onConfirm = async () => {\r\n    try {\r\n      await disableUser({\r\n        variables: { id: patientId },\r\n        refetchQueries: [{ query: getPatients }],\r\n      });\r\n      history.push(\"/patients\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const [openDisablePatient, setOpenDisablePatient] = useState(false);\r\n\r\n  const trasparentButton = {\r\n    background: \"transparent\",\r\n    hover: \"#fafafa\",\r\n    active: \"#f4f4f4\",\r\n  };\r\n\r\n  if (loading || emailLoading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  const {\r\n    firstName,\r\n    lastName,\r\n    dociId,\r\n    status,\r\n    gender,\r\n    image,\r\n    createdAt,\r\n    provider,\r\n    phoneNumber,\r\n    email,\r\n  } = patientProfile;\r\n  return (\r\n    <Grid container direction=\"column\" gap={4}>\r\n      <Grid item>\r\n        <DisplayProfile\r\n          fullName={`${firstName} ${lastName}`}\r\n          displayPhoto={image ? image : displayPhoto}\r\n          medicalTitle=\"User ID\"\r\n          statusId={dociId?.split(\"-\")[1]}\r\n          status={status ? status : \"No Value\"}\r\n          chatPath={`/patients/${patientId}/profile/chat`}\r\n        />\r\n      </Grid>\r\n      {/* <Grid item container> */}\r\n      <Grid item container spacing={4} justifyContent=\"space-between\">\r\n        <Grid item container md={6} sm={6} xs={12}>\r\n          <ProfileCard text=\"Gender\" value={gender} />\r\n        </Grid>\r\n        <Grid item container md={6} sm={6} xs={12}>\r\n          <ProfileCard text=\"Created At\" value={dateMoment(createdAt)} />\r\n        </Grid>\r\n        <Grid item container md={6} sm={6} xs={12}>\r\n          <ProfileCard\r\n            text=\"Provider\"\r\n            value={provider ? provider : \"No Provider\"}\r\n          />\r\n        </Grid>\r\n        <Grid item container md={6} sm={6} xs={12}>\r\n          <ProfileCard\r\n            text=\"Verified\"\r\n            value={emailStat == \"false\" ? \"Not Verified\" : \"Verified\"}\r\n          />\r\n        </Grid>\r\n        <Grid item container md={6} sm={6} xs={12} mx=\"auto\">\r\n          <ProfileCard\r\n            text=\"Email Address\"\r\n            value={\r\n              email ? (\r\n                <a href={`mailto:${email}`} className={classes.link}>\r\n                  {email}\r\n                </a>\r\n              ) : (\r\n                \"No Email Provided\"\r\n              )\r\n            }\r\n          />\r\n        </Grid>\r\n        <Grid item container md={6} sm={6} xs={12}>\r\n          <ProfileCard\r\n            text=\"Phone Number\"\r\n            value={\r\n              phoneNumber ? (\r\n                <a href={`tel:+234${phoneNumber}`} className={classes.link}>\r\n                  {phoneNumber}\r\n                </a>\r\n              ) : (\r\n                \"No Phone Number\"\r\n              )\r\n            }\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid\r\n        item\r\n        container\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        className={`${classes.gridsWrapper} ${classes.buttonsGridWrapper}`}\r\n      >\r\n        <Grid item>\r\n          <CustomButton\r\n            endIcon={<PersonRemoveIcon />}\r\n            title=\"Disable Patient\"\r\n            type={trasparentButton}\r\n            textColor={theme.palette.common.red}\r\n            onClick={() => setOpenDisablePatient(true)}\r\n          />\r\n        </Grid>\r\n\r\n        <DeleteOrDisable\r\n          open={openDisablePatient}\r\n          setOpen={setOpenDisablePatient}\r\n          title=\"Delete Partner\"\r\n          btnValue=\"disable\"\r\n          confirmationMsg=\"disable Patient\"\r\n          onConfirm={onConfirm}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default PatientProfile;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Partners.js",["1364","1365","1366","1367","1368","1369","1370","1371","1372","1373"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\r\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  Checkbox,\r\n  TableCell,\r\n  Avatar,\r\n  TableRow,\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { categoryFilterOptions, defaultPageInfo } from \"helpers/mockData\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport {\r\n  changeTableLimit,\r\n  deleteItem,\r\n  deleteVar,\r\n  filterData,\r\n  handlePageChange,\r\n  banks,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport DeletePartner from \"components/modals/DeleteOrDisable\";\r\nimport { partnersHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport {\r\n  addPartner,\r\n  addPartnerCategory,\r\n  regeneratePartnerProfileUrl,\r\n} from \"components/graphQL/Mutation\";\r\nimport {\r\n  getPartners,\r\n  getSingleProvider,\r\n  getProviders,\r\n  DELETE_PARTNER,\r\n} from \"components/graphQL/useQuery\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport {\r\n  addNewPartnerValidationSchema,\r\n  addPartnerValidationSchema,\r\n  filterPartnersValidationSchema,\r\n} from \"helpers/validationSchemas\";\r\nimport Filter from \"components/Forms/Filters\";\r\nimport { PageInfo } from \"components/graphQL/fragment\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst Partners = () => {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const { displayAlert } = useAlert();\r\n  /* const [setCategoryDatas] = useState([]); */\r\n  const { setSelectedRows } = useActions();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [partner, setPartners] = useState([]);\r\n  const [dropDown, setDropDown] = useState([]);\r\n  const [addPartners] = useMutation(addPartner);\r\n  const categoryData = useQuery(getSingleProvider);\r\n  const [delete_partner] = useLazyQuery(DELETE_PARTNER);\r\n  /*   const [searchPartner, setSearchPartner] = useState(\"\"); */\r\n  const [isDeleting, setIsDeleting] = useState({});\r\n  const [addPartnerCat] = useMutation(addPartnerCategory);\r\n  const { data: da, loading: load } = useQuery(getProviders);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [openAddPartner, setOpenAddPartner] = useState(false);\r\n  const [openFilterPartner, setOpenFilterPartner] = useState(false);\r\n  const [openDeletePartner, setOpenDeletePartner] = useState(false);\r\n  const [partnerToDelete, setPartnerToDelete] = useState(null);\r\n  const [partnerFilterValues, setPartnerFilterValues] = useState({\r\n    category: \"\",\r\n  });\r\n  const { selectedRows /* page */ } = useSelector((state) => state.tables);\r\n  const [openAddPartnerCategory, setAddPartnerCategory] = useState(false);\r\n  const [fetchPartners, { loading, error, refetch, variables }] =\r\n    useLazyQuery(getPartners);\r\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\r\n\r\n  const specializations = [\r\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\r\n    { key: \"Hospital\", value: \"Hospital\" },\r\n  ];\r\n  const categoryOptions = [\r\n    { key: \"Diagnostics\", value: \"diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"pharmacy\" },\r\n    { key: \"Hospital\", value: \"hospital\" },\r\n  ];\r\n  const classificationOptions = [\r\n    { key: \"Primary Healthcare\", value: \"Primary Healthcare\" },\r\n    { key: \"Secondary Healthcare\", value: \"Secondary Healthcare\" },\r\n  ];\r\n\r\n  const specializationOptions = [\r\n    { key: \"Dental Care\", value: \"Dental Care\" },\r\n    { key: \"Eye Clinic\", value: \"Eye Clinic\" },\r\n    { key: \"Skin Care\", value: \"Skin Care\" },\r\n    { key: \"Mental Care\", value: \"Mental Care\" },\r\n  ];\r\n  const specializations5 = [\r\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\r\n    { key: \"Hospital\", value: \"Hospital\" },\r\n  ];\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const darkButtonType = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const initialValues = {\r\n    Name: \"\",\r\n    date: \"\",\r\n    category: \"\",\r\n  };\r\n\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    email: \"\",\r\n    specialization: \"\",\r\n    category: \"\",\r\n    account: \"\",\r\n    address: \"\",\r\n    phone: \"\",\r\n    classification: \"\",\r\n    bank: \"\",\r\n    image: null,\r\n    provider: \"\",\r\n  };\r\n\r\n  const initialValues2 = {\r\n    category: \"\",\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then((res) => {\r\n        const { data } = res;\r\n        if (data) {\r\n          setPartners(data?.getPartners?.data || []);\r\n          setPageInfo(data?.getPartners?.pageInfo || defaultPageInfo);\r\n        }\r\n        if (!data) {\r\n          setPartners(res?.getPartners?.data || []);\r\n          setPageInfo(res?.getPartners?.pageInfo || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  const fetchPartnersData = async () => {\r\n    const res = fetchPartners({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n      },\r\n    });\r\n    setTableData(res, \"Couldn't fetch Partners data\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPartnersData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (da) {\r\n      const datas = da.getProviders.provider;\r\n      setDropDown(\r\n        datas &&\r\n          datas.map((i) => {\r\n            return { key: i.name, value: i._id };\r\n          })\r\n      );\r\n    }\r\n  }, [da]);\r\n\r\n  useEffect(() => {\r\n    (partner || []).map((p) => {\r\n      const newIsDeleting = isDeleting;\r\n      setIsDeleting({ [p._id]: false, ...newIsDeleting });\r\n      return null;\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [partner]);\r\n\r\n  const onSubmit = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const onSubmit2 = async (values, onSubmitProps) => {\r\n    const { category } = values;\r\n\r\n    try {\r\n      const addCatRes = await addPartnerCat({\r\n        variables: {\r\n          name: category,\r\n        },\r\n      });\r\n\r\n      if (addCatRes?.addPartner?.partner) {\r\n        setAddPartnerCategory(false);\r\n        onSubmitProps.resetForm();\r\n        const res = refetch();\r\n        setTableData(res, \"Couldn't fetch partners.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const onSubmit1 = async (values, onSubmitProps) => {\r\n    console.log(values);\r\n    let {\r\n      name,\r\n      email,\r\n      category,\r\n      phone,\r\n      bank,\r\n      specialization,\r\n      provider,\r\n      image,\r\n      account,\r\n    } = values;\r\n    name = name.trim();\r\n\r\n    try {\r\n      await addPartners({\r\n        variables: {\r\n          name,\r\n          email,\r\n          category,\r\n          specialization,\r\n          account,\r\n          phone,\r\n          bank,\r\n          logoImageUrl: image,\r\n          providerId: provider,\r\n        },\r\n        refetchQueries: [{ query: getPartners }],\r\n      });\r\n      enqueueSnackbar(\"Partner added successfully\", {\r\n        variant: \"success\",\r\n      });\r\n      onSubmitProps.resetForm();\r\n      setOpenAddPartner(false);\r\n    } catch (err) {\r\n      console.log(err, \"err\");\r\n      enqueueSnackbar(\"Email is already taken\", {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const onFilterCategoryChange = async (value) => {\r\n    try {\r\n      deleteVar(variables);\r\n      setPartnerFilterValues({ ...partnerFilterValues, category: value });\r\n      const filterVariables = { category: value };\r\n\r\n      const res = filterData(filterVariables, {\r\n        fetchData: fetchPartners,\r\n        refetch: refetch,\r\n        variables: variables,\r\n      });\r\n      await setTableData(res, \"couldn't filter table.\");\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setPartnerFilterValues, \"\");\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\r\n    setFilterValue(defaultVal);\r\n\r\n    deleteVar(variables);\r\n\r\n    const res = refetch();\r\n    await setTableData(res, \"couldn't filter table.\");\r\n  };\r\n  const [newProfileUrl, setNewProfileUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setNewProfileUrl(daa?.regeneratePartnerProfileUrl?.partner?.profileUrl);\r\n  }, [daa]);\r\n  const [Id, setId] = useState(\"\");\r\n  const handleGenerateLink = async (id) => {\r\n    setId(id);\r\n    await regenerate({\r\n      variables: {\r\n        id,\r\n      },\r\n      refetchQueries: [\r\n        {\r\n          query: getPartners,\r\n          variables: {\r\n            variables: pageInfo.page,\r\n            limit: PageInfo.limit,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const z = (id) => {\r\n    let b = \"\";\r\n    const m = daa?.regeneratePartnerProfileUrl?.partner?._id;\r\n    if (id === m) {\r\n      b = m;\r\n    } else {\r\n      b = \"\";\r\n    }\r\n    return b;\r\n  };\r\n  useEffect(() => {\r\n    partner.map((item) => {\r\n      if (item._id === Id) {\r\n        return {\r\n          ...item,\r\n          profileUrl: newProfileUrl,\r\n        };\r\n      }\r\n    });\r\n\r\n    //eslint-disable-next-line\r\n  }, [Id, newProfileUrl]);\r\n  if (error || categoryData.error)\r\n    return <NoData error={error || categoryData.error} />;\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      gap={{ sm: 4, xs: 2 }}\r\n      flexWrap=\"nowrap\"\r\n      height=\"100%\"\r\n    >\r\n      <Grid\r\n        item\r\n        container\r\n        gap={2}\r\n        direction={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          justifyContent=\"flex-end\"\r\n          alignItems=\"center\"\r\n          flex={{ sm: 1, xs: 1, md: 1 }}\r\n        >\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<PersonAddAlt1Icon />}\r\n              title=\"Add \"\r\n              type={darkButtonType}\r\n              onClick={() => setOpenAddPartner(true)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        filters={\r\n          <Filter\r\n            onHandleChange={(e) => onFilterCategoryChange(e?.target?.value)}\r\n            onClickClearBtn={() => onFilterCategoryChange(\"\")}\r\n            options={[{ key: \"Category\", value: \"\" }, ...categoryFilterOptions]}\r\n            name=\"category\"\r\n            placeholder=\"None\"\r\n            value={partnerFilterValues.category}\r\n            hasClearBtn={true}\r\n            disable={loading}\r\n          />\r\n        }\r\n      >\r\n        {load || loading ? (\r\n          <Loader />\r\n        ) : partner.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={partnersHeadCells}\r\n              rows={partner}\r\n              paginationLabel=\"Partner per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchPartners, {\r\n                  first: e,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchPartners, page, pageInfo, {});\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {partner.map((row, index) => {\r\n                const isItemSelected = isSelected(row.id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                const { _id, logoImageUrl, name, email, category } = row;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ maxWidth: \"20rem\" }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"left\",\r\n                        }}\r\n                      >\r\n                        <span style={{ marginRight: \"1rem\" }}>\r\n                          <Avatar\r\n                            alt={`Display Photo of ${name}`}\r\n                            src={logoImageUrl}\r\n                            sx={{ width: 24, height: 24 }}\r\n                          />\r\n                        </span>\r\n                        <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {email}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {category}\r\n                    </TableCell>\r\n\r\n                    {/* <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {profileUrl || z(_id) !== \"\" ? (\r\n                        <Typography\r\n                          style={{\r\n                            color: theme.palette.common.grey,\r\n                            maxWidth: \"20rem\",\r\n                          }}\r\n                          sx={{ display: \"flex\", alignItems: \"center\" }}\r\n                        >\r\n                          {trucateProfileLink(profileUrl ? profileUrl : z(_id))}\r\n                          <div style={{ marginLeft: \"1rem\" }}>\r\n                            <Copy\r\n                              name=\"Profile Link\"\r\n                              text={profileUrl ? profileUrl : z(_id)}\r\n                            />\r\n                          </div>\r\n                        </Typography>\r\n                      ) : (\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          disableRipple\r\n                          className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                          onClick={() => handleGenerateLink(_id)}\r\n                        >\r\n                          Generate Link\r\n                        </Button>\r\n                      )}\r\n                    </TableCell> \r\n                    <TableCell align=\"center\" className={classes.tableCell}>\r\n                      {isDeleting[_id] ? (\r\n                        <Loader />\r\n                      ) : (\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          disableRipple\r\n                          className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                          endIcon={<DeleteIcon color=\"error\" />}\r\n                          onClick={() => {\r\n                            setPartnerToDelete(_id || \"\");\r\n                            setOpenDeletePartner(true);\r\n                          }}\r\n                        >\r\n                          Delete partner\r\n                        </Button>\r\n                      )}\r\n                    </TableCell>*/}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={partnersHeadCells}\r\n            paginationLabel=\"Doctors per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n      <Modals\r\n        isOpen={openFilterPartner}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        width={{ sm: \"40vw\", xs: \"90vw\", md: \"40vw\" }}\r\n        handleClose={() => setOpenFilterPartner(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={onSubmit}\r\n          validateOnBlur={false}\r\n          validationSchema={filterPartnersValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={3}>\r\n                  <Grid item marginBottom={3}>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          name=\"Name\"\r\n                          label=\"Name\"\r\n                          placeholder=\"Select name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializations}\r\n                          name=\"date\"\r\n                          label=\"Date\"\r\n                          placeholder=\"Choose Date\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  container\r\n                  spacing={2}\r\n                  style={{ marginBottom: \"10rem\" }}\r\n                >\r\n                  <Grid item xs={6}>\r\n                    <FormikControl\r\n                      control=\"select\"\r\n                      options={specializations}\r\n                      name=\"category\"\r\n                      label=\"Category\"\r\n                      placeholder=\"Select Category\"\r\n                    />\r\n                  </Grid>\r\n                  {/* Placeholder grid */}\r\n                  <Grid item md></Grid>\r\n                </Grid>\r\n                <Grid item container xs={12}>\r\n                  <CustomButton\r\n                    title=\"Apply Filter\"\r\n                    width=\"100%\"\r\n                    type={buttonType}\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                  />\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      {/* ADD NEW PARTER MODAL */}\r\n      <Modals\r\n        isOpen={openAddPartner}\r\n        title=\"Add Partners\"\r\n        rowSpacing={5}\r\n        handleClose={() => setOpenAddPartner(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={addNewPartnerValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty, values, setFieldValue }) => {\r\n            const { classification, category } = values;\r\n            return (\r\n              <Form style={{ marginTop: \"1rem\" }}>\r\n                <Grid container direction=\"column\" gap={1.5}>\r\n                  <Grid item container>\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Name\"\r\n                          id=\"name\"\r\n                          name=\"name\"\r\n                          placeholder=\"Enter Partner name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Email\"\r\n                          id=\"name\"\r\n                          name=\"email\"\r\n                          placeholder=\"Enter Email\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\" Account Number\"\r\n                          id=\"account\"\r\n                          name=\"account\"\r\n                          placeholder=\"Enter Account Number\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Phone Number\"\r\n                          id=\"phone\"\r\n                          name=\"phone\"\r\n                          placeholder=\"Enter Phone Number\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={categoryOptions}\r\n                          name=\"category\"\r\n                          label=\"Category\"\r\n                          placeholder=\"Category\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={banks}\r\n                          name=\"bank\"\r\n                          label=\"Bank\"\r\n                          placeholder=\"Select Bank\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    {category === \"hospital\" && (\r\n                      <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={dropDown}\r\n                            name=\"provider\"\r\n                            label=\"Provider\"\r\n                            id=\"provider\"\r\n                            placeholder=\"Select Provider\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={classificationOptions}\r\n                            name=\"classification\"\r\n                            label=\"Classification\"\r\n                            id=\"classification\"\r\n                            placeholder=\"select classification\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    )}\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"file\"\r\n                          name=\"image\"\r\n                          label=\"Company Logo\"\r\n                          setFieldValue={setFieldValue}\r\n                        />\r\n                      </Grid>\r\n                      {classification === \"Secondary Healthcare\" && (\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={specializationOptions}\r\n                            name=\"specialization\"\r\n                            label=\"Specialization\"\r\n                            id=\"specialization\"\r\n                            placeholder=\"Select Specialization\"\r\n                          />\r\n                        </Grid>\r\n                      )}\r\n                    </Grid>\r\n                    <Grid item container flexWrap=\"nowrap\">\r\n                      <Grid item container>\r\n                        <FormikControl\r\n                          control=\"textarea\"\r\n                          name=\"address\"\r\n                          minRows={3}\r\n                          label=\"Address\"\r\n                          placeholder=\"Enter address\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container sx={{ mt: 1 }}>\r\n                    <CustomButton\r\n                      title=\"Add Partner\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      {/* Add Partner Category */}\r\n      <Modals\r\n        isOpen={openAddPartnerCategory}\r\n        title=\"Add Partners Category\"\r\n        rowSpacing={5}\r\n        handleClose={() => setAddPartnerCategory(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues2}\r\n          onSubmit={onSubmit2}\r\n          validationSchema={addPartnerValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid container direction=\"column\" gap={3}>\r\n                  <Grid item container>\r\n                    <Grid item container direction=\"column\" gap={1}>\r\n                      <Grid item container>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializations5}\r\n                          name=\"category\"\r\n                          label=\"Category\"\r\n                          placeholder=\"Specialization\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <CustomButton\r\n                      title=\"Add Partner\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n      <DeletePartner\r\n        open={openDeletePartner}\r\n        setOpen={setOpenDeletePartner}\r\n        title=\"Delete Partner\"\r\n        btnValue=\"delete\"\r\n        onConfirm={async () => {\r\n          const res = deleteItem(\r\n            delete_partner,\r\n            partnerToDelete,\r\n            setPartnerToDelete,\r\n            refetch,\r\n            Typography,\r\n            enqueueSnackbar,\r\n            setIsDeleting,\r\n            isDeleting\r\n          );\r\n          setOpenDeletePartner(false);\r\n          await setTableData(res, \"Couldn't refetch Partners\");\r\n        }}\r\n        confirmationMsg=\"delete partner\"\r\n        onCancel={() => {\r\n          setPartnerToDelete(null);\r\n        }}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Partners;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Chat.js",["1374","1375"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { Grid, Typography, Divider } from \"@mui/material\";\r\nimport { Loader, CustomButton, PreviousButton } from \"components/Utilities\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { CREATE_MESSAGE } from \"components/graphQL/Mutation\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  showSuccessMsg,\r\n  handleError,\r\n} from \"../../helpers/filterHelperFunctions\";\r\nimport { getMessage, getProfile } from \"components/graphQL/useQuery\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridWrapper: {\r\n    \"&.MuiGrid-item\": {\r\n      borderRadius: \"1rem\",\r\n      background: \"#fff\",\r\n      padding: \"2rem 4rem\",\r\n      maxWidth: \"60rem !important\",\r\n      boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.1)\",\r\n    },\r\n  },\r\n  inputGrid: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n  },\r\n  heading: {\r\n    \"&.MuiTypography-root\": {\r\n      color: theme.palette.common.grey,\r\n      //   fontSize: \"1rem\"\r\n    },\r\n  },\r\n  formInput: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    fontSize: \"1.5rem\",\r\n    padding: \".5rem 1rem\",\r\n    border: \"none\",\r\n    background: \"transparent\",\r\n    color: theme.palette.common.grey,\r\n\r\n    \"&:focus\": {\r\n      outline: \"none\",\r\n    },\r\n  },\r\n  textArea: {\r\n    border: \"1px solid rgba(0, 0, 0, 0.03)\",\r\n    resize: \"none\",\r\n    borderRadius: \"0.5rem\",\r\n  },\r\n  divider: {\r\n    \"&.MuiDivider-root\": {\r\n      borderColor: \"rgba(0, 0, 0, 0.03)\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Chat = () => {\r\n  const { patientId } = useParams();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  let history = useHistory();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [createNewMessage] = useMutation(CREATE_MESSAGE, {\r\n    refetchQueries: [{ query: getMessage }],\r\n  });\r\n  const { data, loading } = useQuery(getProfile, {\r\n    variables: { profileId: patientId },\r\n  });\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n  const [profile, setprofile] = useState(\"\");\r\n  const { firstName, lastName } = profile;\r\n\r\n  const initialValues = {\r\n    subject: \"\",\r\n    recipient: `${firstName} ${lastName} ` || \"\",\r\n    textarea: \"\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setprofile(data.profile);\r\n    }\r\n  }, [data]);\r\n\r\n  const validationSchema = Yup.object({\r\n    subject: Yup.string(\"Enter your subject\")\r\n      .trim()\r\n      .required(\"Subject is required\"),\r\n    textarea: Yup.string(\"Enter your message\")\r\n      .trim()\r\n      .required(\"Message is required\"),\r\n    recipient: Yup.string(\"Enter your recipient\")\r\n      .trim()\r\n      .required(\"recipients is required\"),\r\n  });\r\n  const onSubmit = async (values, onSubmitProps) => {\r\n    const id = localStorage.getItem(\"user_id\");\r\n    const { subject, textarea } = values;\r\n\r\n    try {\r\n      await createNewMessage({\r\n        variables: {\r\n          sender: id,\r\n          recipient: patientId,\r\n          subject,\r\n          body: textarea,\r\n        },\r\n      });\r\n      showSuccessMsg(enqueueSnackbar, Typography, \"Message sent\");\r\n    } catch (error) {\r\n      handleError(error, enqueueSnackbar);\r\n      console.log(error);\r\n    }\r\n    onSubmitProps.resetForm();\r\n    history.push(`/patients/${patientId}/profile`);\r\n    /* setSelectedScopedMenu(0); */\r\n  };\r\n\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validateOnBlur={false}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n      enableReinitialize\r\n    >\r\n      {({ isValid, isSubmitting, dirty }) => {\r\n        return (\r\n          <Form>\r\n            <Grid container direction=\"column\">\r\n              <Grid item style={{ marginBottom: \"3rem\" }}>\r\n                <PreviousButton path={`/patients/${patientId}/profile`} />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" alignItems=\"center\">\r\n                <Grid item>\r\n                  <Typography variant=\"h4\" style={{ marginBottom: \"3rem\" }}>\r\n                    Create New Message\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  container\r\n                  direction=\"column\"\r\n                  className={classes.gridWrapper}\r\n                >\r\n                  <Grid item>\r\n                    <Grid\r\n                      item\r\n                      container\r\n                      alignItems=\"center\"\r\n                      sx={{ gap: \"0!important\" }}\r\n                    >\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Recipient:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item className={classes.inputGrid}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          id=\"message\"\r\n                          name=\"recipient\"\r\n                          disabled\r\n                          variant=\"standard\"\r\n                          className={classes.formInput}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Subject:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item className={classes.inputGrid}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          id=\"subject\"\r\n                          name=\"subject\"\r\n                          variant=\"standard\"\r\n                          className={classes.formInput}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container direction=\"column\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Message:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item style={{ height: \"15rem\" }}>\r\n                        <FormikControl\r\n                          control=\"textarea\"\r\n                          id=\"textarea\"\r\n                          name=\"textarea\"\r\n                          variant=\"standard\"\r\n                          fLabel={true}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    {/* <Divider className={classes.divider} /> */}\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    style={{ alignSelf: \"flex-end\", marginTop: \"2rem\" }}\r\n                  >\r\n                    <CustomButton\r\n                      title=\"Send Message\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                      // endIcon={<ArrowForwardIosIcon style={{ fontSize: \"1.5rem\" }} />}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Medications.js",["1376"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  Avatar,\r\n  Checkbox,\r\n  TableCell,\r\n  TableRow,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { EnhancedTable, EmptyTable, NoData } from \"components/layouts\";\r\nimport { medicationsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { myMedic } from \"components/graphQL/useQuery\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\nimport { changeTableLimit, fetchMoreData } from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Medications = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [pageInfo, setPageInfo] = useState([]);\r\n  const { patientId } = useParams();\r\n\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [medications, setMedications] = useState([]);\r\n\r\n  const [fetchMedications, { loading, error, data }] = useLazyQuery(myMedic);\r\n\r\n  useEffect(() => {\r\n    fetchMedications({\r\n      variables: {\r\n        id: patientId,\r\n        orderBy: \"-createdAt\",\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchMedications, patientId]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setMedications(data.getMedications.medication);\r\n      setPageInfo(data.getMedications.pageInfo);\r\n    }\r\n  }, [data]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\r\n      <Grid item container height=\"100%\" direction=\"column\" gap={2}>\r\n        <Grid item>\r\n          <Typography variant=\"h2\">Medications</Typography>\r\n        </Grid>\r\n        {medications.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={medicationsHeadCells}\r\n              rows={medications}\r\n              paginationLabel=\"Medication per page\"\r\n              handleChangePage={fetchMoreData}\r\n              hasCheckbox={true}\r\n              changeLimit={changeTableLimit}\r\n              fetchData={fetchMedications}\r\n              dataPageInfo={pageInfo}\r\n            >\r\n              {medications\r\n                // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row._id, selectedRows);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row._id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              row.id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.grey }}\r\n                      >\r\n                        {dateMoment(row.createdAt)}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"20rem\" }}\r\n                      >\r\n                        {row.name}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"20rem\" }}\r\n                      >\r\n                        {row.dosage ? row.dosage : \"No Value\"}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"20rem\" }}\r\n                      >\r\n                        {row.interval ? row.interval : \"No Value\"}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"20rem\" }}\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ marginRight: \"1rem\" }}>\r\n                            <Avatar\r\n                              alt={`Display Photo of ${row.caregiver}`}\r\n                              src={displayPhoto}\r\n                              sx={{ width: 24, height: 24 }}\r\n                            />\r\n                          </span>\r\n                          <span style={{ fontSize: \"1.25rem\" }}>\r\n                            {row.doctor}\r\n                          </span>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={medicationsHeadCells}\r\n            paginationLabel=\"Medications per page\"\r\n          />\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Medications;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\MedicalRecords.js",["1377"],"import React, { useEffect, useState } from \"react\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport { Loader, ProfileCard } from \"components/Utilities\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { calculateBMI } from \"components/Utilities/bMI\";\r\nimport {\r\n  getProfile,\r\n  findAllergies,\r\n  getLabResult,\r\n} from \"components/graphQL/useQuery\";\r\nimport { NoData } from \"components/layouts\";\r\n\r\nconst MedicalRecords = () => {\r\n  const { patientId } = useParams();\r\n  const [patientProfile, setPatientProfile] = useState(undefined);\r\n\r\n  const [patients, { loading, data, error }] = useLazyQuery(getProfile);\r\n  const [alergy, allergyResult] = useLazyQuery(findAllergies, {\r\n    variables: { id: patientId },\r\n  });\r\n  const [labResult, labResults] = useLazyQuery(getLabResult, {\r\n    variables: { id: patientId },\r\n  });\r\n  const [alergies, setAlergies] = useState([]);\r\n  const [lab, setLab] = useState([]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        patients({ variables: { profileId: patientId } });\r\n        alergy();\r\n        labResult();\r\n        setAlergies(allergyResult.data.findAllergies.allergies);\r\n        setLab(labResults.data.getLabResults.lab);\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    })();\r\n  }, [\r\n    alergy,\r\n    patients,\r\n    patientId,\r\n    labResult,\r\n    allergyResult.data,\r\n    labResults.data,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (data && data.profile) {\r\n      setPatientProfile(data.profile);\r\n    }\r\n  }, [data]);\r\n\r\n  if (loading || allergyResult.loading) return <Loader />;\r\n  if (error || allergyResult.error)\r\n    return <NoData error={allergyResult.error || error} />;\r\n  if (patientProfile) {\r\n    const value =\r\n      alergies.length > 0 &&\r\n      alergies?.map((alergy) => alergy.name).filter((i) => i !== undefined);\r\n\r\n    const labResult = lab?.map((alergy) => alergy);\r\n\r\n    return (\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={{\r\n          md: 5,\r\n          sm: 4,\r\n          xs: 3,\r\n        }}\r\n        paddingBottom={{ md: 10, sm: 5, xs: 3 }}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h2\">Medical Records</Typography>\r\n        </Grid>\r\n        <Grid item container spacing={4} justifyContent=\"space-between\">\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"Height\"\r\n              value={\r\n                patientProfile.height ? patientProfile.height : \"No Height\"\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"Weight\"\r\n              value={\r\n                patientProfile.weight ? patientProfile.weight : \"No Weight\"\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"Blood Group\"\r\n              value={\r\n                patientProfile.bloodGroup\r\n                  ? patientProfile.bloodGroup\r\n                  : \"No Blood Group\"\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"GenoType\"\r\n              value={\r\n                patientProfile.genotype\r\n                  ? patientProfile.genotype\r\n                  : \"No Genotype\"\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"BMI\"\r\n              value={\r\n                patientProfile.height\r\n                  ? calculateBMI(\r\n                      patientProfile.height,\r\n                      patientProfile.weight\r\n                    ).toFixed(2)\r\n                  : \"No Value\"\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"Allergies\"\r\n              value={value.length > 0 ? value : \"No Allergy\"}\r\n            />\r\n          </Grid>\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"Lab Results\"\r\n              value={value.length > 0 ? labResult : \"No Lab Result\"}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  } else return <NoData />;\r\n};\r\n\r\nexport default MedicalRecords;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Login.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpProfile.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpEarnings.js",["1378"],"import React, { useState, useEffect } from \"react\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\nimport TrendingDownIcon from \"@mui/icons-material/TrendingDown\";\r\nimport TrendingUpIcon from \"@mui/icons-material/TrendingUp\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport {\r\n  CircularProgressBar,\r\n  Card,\r\n  Loader,\r\n  FormSelect,\r\n} from \"components/Utilities\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { getMyEarnings } from \"components/graphQL/useQuery\";\r\nimport {\r\n  financialPercent,\r\n  selectOptions,\r\n  formatNumber,\r\n} from \"components/Utilities/Time\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardContainer: {\r\n    \"&.MuiCard-root\": {\r\n      width: \"100%\",\r\n      height: \"15.8rem\",\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\",\r\n      background: \"white\",\r\n      marginRight: \"5rem\",\r\n      \"&:hover\": {\r\n        boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.15)\",\r\n        cursor: \"pointer\",\r\n      },\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n      \"& .MuiCardContent-root .MuiTypography-h5\": {\r\n        textDecoration: \"none !important\",\r\n        textTransform: \"uppercase\",\r\n      },\r\n    },\r\n  },\r\n\r\n  iconWrapper: {\r\n    width: 60,\r\n    height: 60,\r\n    borderRadius: \"50%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  cardGrid: {\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    height: \"25.8rem\",\r\n  },\r\n  flexContainer: {\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    margin: \"auto\",\r\n    width: \"100%\",\r\n\r\n    // padding: \"2rem 4rem\",\r\n    \"&:first-child\": {\r\n      borderBottom: \".5px solid #F8F8F8\",\r\n    },\r\n  },\r\n  lightGreen: {\r\n    color: theme.palette.common.green,\r\n  },\r\n\r\n  lightRed: {\r\n    color: theme.palette.common.red,\r\n  },\r\n  mainContainer: {\r\n    flexDirection: \"column\",\r\n    width: \"100%\",\r\n    background: \"white\",\r\n    borderRadius: \"2rem\",\r\n    boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.15)\",\r\n  },\r\n  parentGrid: {\r\n    textDecoration: \"none\",\r\n    width: \"24.7rem\",\r\n    color: theme.palette.primary.main,\r\n    \"&.MuiGrid-item\": {\r\n      ...theme.typography.cardParentGrid,\r\n      minWidth: \"20rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n    },\r\n  },\r\n\r\n  cardIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      fontSize: \"3rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst HcpEarnings = () => {\r\n  const classes = useStyles();\r\n  const { hcpId } = useParams();\r\n\r\n  const [form, setForm] = useState(\"\");\r\n  const { data, error, loading, refetch } = useQuery(getMyEarnings, {\r\n    variables: {\r\n      doctor: hcpId,\r\n    },\r\n  });\r\n  // const { data: datas } = useQuery(getMyEarningDoc, {\r\n  //   variables: { doc: hcpId },\r\n  // });\r\n  const [totalEarning, setTotalEarning] = useState([]);\r\n  const [totalPayouts, setTotalPayouts] = useState([]);\r\n  const financialValue = financialPercent(totalEarning, totalPayouts);\r\n  const [finances, setFinances] = useState(financialValue);\r\n  const onChange = async (e) => {\r\n    setForm(e.target.value);\r\n    await refetch({ q: e.target.value });\r\n  };\r\n\r\n  const theme = useTheme();\r\n  useEffect(() => {\r\n    if (data) {\r\n      const { totalEarnings, totalPayouts } = data?.getMyEarnings;\r\n      setTotalEarning(totalEarnings);\r\n      setTotalPayouts(totalPayouts);\r\n      const value = financialPercent(totalEarnings, totalPayouts);\r\n      setFinances(value);\r\n    }\r\n  }, [form, data]);\r\n  // const classes = useStyles();\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid container gap={3}>\r\n      <Grid\r\n        item\r\n        container\r\n        rowGap={4}\r\n        padding={{ md: \"2rem 4rem\", sm: \"2rem, 4rem\", xs: \"1rem\" }}\r\n        className={classes.mainContainer}\r\n        flexDirection={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n        sx={{ alignItems: \"center\", justifyContent: \"space-between\" }}\r\n      >\r\n        <Grid item container className={classes.flexContainer}>\r\n          <Grid item>\r\n            <Typography variant=\"h1\" color=\"#2D2F39\">\r\n              Earning\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <FormSelect\r\n              placeholder=\"Select days\"\r\n              value={form}\r\n              onChange={onChange}\r\n              options={selectOptions}\r\n              name=\"finance\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          container\r\n          alignItems=\"center\"\r\n          flexDirection={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n          spacing={{ md: 2, xs: 2, sm: 2 }}\r\n        >\r\n          <Grid item>\r\n            <CircularProgressBar\r\n              height=\"17rem\"\r\n              width=\"17rem\"\r\n              color={theme.palette.common.green}\r\n              trailColor={theme.palette.common.red}\r\n              value={finances}\r\n              strokeWidth={8}\r\n            />\r\n          </Grid>\r\n          <Grid item flex={1}>\r\n            <Grid\r\n              container\r\n              alignItems=\"center\"\r\n              rowGap={4}\r\n              justifyContent={{\r\n                md: \"space-around\",\r\n                xs: \"flex-start\",\r\n                sm: \"space-around\",\r\n              }}\r\n            >\r\n              <Grid\r\n                item\r\n                spacing={2}\r\n                sx={{ justifyContent: \"center\", alignItems: \"center\" }}\r\n              >\r\n                <Grid\r\n                  container\r\n                  alignItems=\"center\"\r\n                  gap={{ md: 2, sm: 2, xs: 4 }}\r\n                >\r\n                  <Grid\r\n                    className={classes.iconWrapper}\r\n                    sx={{ background: theme.palette.common.lightGreen }}\r\n                  >\r\n                    <Grid item>\r\n                      <TrendingDownIcon\r\n                        color=\"success\"\r\n                        className={classes.cardIcon}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography noWrap variant=\"h2\">\r\n                      <span\r\n                        style={{\r\n                          textDecoration: \"line-through\",\r\n                          textDecorationStyle: \"double\",\r\n                        }}\r\n                      >\r\n                        N{\"\"}\r\n                      </span>\r\n                      {formatNumber(totalEarning)}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      style={{\r\n                        color: theme.palette.common.lightGrey,\r\n                      }}\r\n                    >\r\n                      Total Earnings\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              {/* second */}\r\n              <Grid item>\r\n                <Grid\r\n                  container\r\n                  alignItems=\"center\"\r\n                  gap={{ md: 2, sm: 2, xs: 4 }}\r\n                >\r\n                  <Grid\r\n                    className={classes.iconWrapper}\r\n                    sx={{ background: theme.palette.common.lightRed }}\r\n                  >\r\n                    <Grid item>\r\n                      <TrendingUpIcon\r\n                        color=\"error\"\r\n                        className={classes.cardIcon}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography noWrap variant=\"h2\">\r\n                      <span\r\n                        style={{\r\n                          textDecoration: \"line-through\",\r\n                          textDecorationStyle: \"double\",\r\n                        }}\r\n                      >\r\n                        N{\"\"}\r\n                      </span>\r\n                      {formatNumber(+totalPayouts)}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      style={{\r\n                        color: theme.palette.common.lightGrey,\r\n                      }}\r\n                    >\r\n                      Total Payouts\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              {/* second */}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      {/* iterms */}\r\n      <Grid item container justifyContent=\"space-evenly\">\r\n        {/* 1 */}\r\n        <Grid item container md={4} sm={4} xs={12}>\r\n          <Grid item container flexDirection=\"column\">\r\n            <Link\r\n              to={`/hcps/${hcpId}/earnings/payout`}\r\n              style={{ textDecoration: \"none\" }}\r\n            >\r\n              <Card\r\n                title=\"Total Payout\"\r\n                background={theme.palette.common.lightRed}\r\n              >\r\n                <TrendingUpIcon color=\"error\" className={classes.cardIcon} />\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n        {/* 2 */}\r\n        <Grid item container md={4} sm={4} xs={12}>\r\n          <Grid item container flexDirection=\"column\">\r\n            <Link\r\n              to={`/hcps/${hcpId}/earnings/earn`}\r\n              style={{ textDecoration: \"none\" }}\r\n            >\r\n              <Card\r\n                title=\"Total Earnings\"\r\n                background={theme.palette.common.lightGreen}\r\n              >\r\n                <Grid className={classes.iconWrapper}>\r\n                  <TrendingDownIcon\r\n                    color=\"success\"\r\n                    className={classes.cardIcon}\r\n                  />\r\n                </Grid>\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HcpEarnings;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ViewDoctorVerification.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Payout.js",["1379","1380","1381","1382","1383","1384"],"import React, { useEffect, useState } from \"react\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Chip,\r\n  Checkbox,\r\n  TableRow,\r\n  TableCell,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport { timeMoment, dateMoment } from \"components/Utilities/Time\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getPayoutData } from \"components/graphQL/useQuery\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { payoutHeader } from \"components/Utilities/tableHeaders\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport Filter from \"components/Forms/Filters\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { defaultPageInfo, payoutFilterBy } from \"helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  deleteVar,\r\n  fetchMoreData,\r\n  filterData,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  iconWrapper: {\r\n    width: 20,\r\n    height: 20,\r\n    borderRadius: \"50%\",\r\n    display: \"grid\",\r\n    placeContent: \"center\",\r\n    marginLeft: \"1rem\",\r\n    background: theme.palette.common.lightGreen,\r\n  },\r\n  button: {\r\n    \"&.css-1zf5oc-MuiButtonBase-root-MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"10rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.css-1jilxo7-MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Payout = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { displayAlert } = useAlert();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [payout, setPayout] = useState([]);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n\r\n  const [statusFilterValue, setStatusFilterValue] = useState(\"\");\r\n  const [fetchPayout, { loading, error, refetch, variables }] =\r\n    useLazyQuery(getPayoutData);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      fetchPayout({ variables: { first: pageInfo?.limit } }).then(\r\n        ({ data }) => {\r\n          if (!data) throw Error(\"Couldn't fetch doctors payout data\");\r\n          setPageInfo(data?.getEarningStats?.payoutData?.PageInfo);\r\n          setPayout(data?.getEarningStats?.payoutData?.data);\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }, [fetchPayout, pageInfo?.limit]);\r\n\r\n  const onFilterStatusChange = async (value) => {\r\n    try {\r\n      deleteVar(variables);\r\n      setStatusFilterValue(value);\r\n      const filterVariables = { status: value };\r\n\r\n      filterData(filterVariables, {\r\n        fetchData: fetchPayout,\r\n        refetch: refetch,\r\n        variables: variables,\r\n      })\r\n        .then((data) => {\r\n          setPayout(data?.getEarningStats?.payoutData?.data || []);\r\n          setPageInfo(data?.getEarningStats?.payoutData?.PageInfo || {});\r\n        })\r\n        .catch(() => {\r\n          refresh(setStatusFilterValue, \"\");\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setStatusFilterValue, \"\");\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\r\n    setFilterValue(defaultVal);\r\n\r\n    deleteVar(variables);\r\n\r\n    refetch()\r\n      .then(({ data }) => {\r\n        setPayout(data?.getEarningStats?.payoutData?.data || []);\r\n        setPageInfo(data?.getEarningStats?.payoutData?.PageInfo || {});\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", \"Failed to get patients data, Try again\");\r\n      });\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(\r\n          data?.getEarningStats?.payoutData?.PageInfo || defaultPageInfo\r\n        );\r\n        setPayout(data?.getEarningStats?.payoutData?.data || []);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid container direction=\"column\" rowSpacing={2}>\r\n      <>\r\n        <Grid\r\n          item\r\n          container\r\n          justifyContent=\"space-between\"\r\n          style={{ paddingBottom: \"3rem\" }}\r\n        ></Grid>\r\n        <TableLayout\r\n          filters={\r\n            <Filter\r\n              onHandleChange={(e) => onFilterStatusChange(e?.target?.value)}\r\n              onClickClearBtn={() => onFilterStatusChange(\"\")}\r\n              options={[{ key: \"Status\", value: \"\" }, ...payoutFilterBy]}\r\n              name=\"status\"\r\n              placeholder=\"None\"\r\n              value={statusFilterValue}\r\n              hasClearBtn={true}\r\n            />\r\n          }\r\n        >\r\n          {loading ? (\r\n            <Loader />\r\n          ) : payout.length > 0 ? (\r\n            <Grid item container>\r\n              <EnhancedTable\r\n                headCells={payoutHeader}\r\n                rows={payout}\r\n                paginationLabel=\"payout per page\"\r\n                hasCheckbox={true}\r\n                changeLimit={async (e) => {\r\n                  const res = await changeTableLimit(fetchPayout, { first: e });\r\n                  await setTableData(res, \"Failed to change table limit.\");\r\n                }}\r\n                dataPageInfo={pageInfo}\r\n                handlePagination={async (page) => {\r\n                  const res = await handlePageChange(\r\n                    fetchPayout,\r\n                    page,\r\n                    pageInfo,\r\n                    {}\r\n                  );\r\n                  await setTableData(res, \"Failed to change table page.\");\r\n                }}\r\n                fetchData={fetchPayout}\r\n                handleChangePage={fetchMoreData}\r\n              >\r\n                {payout.map((row, index) => {\r\n                  const { amount, createdAt, status, _id, doctorData } = row;\r\n                  const data = doctorData || [];\r\n                  const { firstName, lastName, picture } = data[0] || {};\r\n                  const isItemSelected = isSelected(_id, selectedRows);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={_id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.black }}\r\n                      >\r\n                        {dateMoment(createdAt)}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.black }}\r\n                      >\r\n                        {timeMoment(createdAt)}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        {row?.doctorData && row?.doctorData[0] !== {} ? (\r\n                          <div\r\n                            style={{\r\n                              height: \"100%\",\r\n                              display: \"flex\",\r\n                              alignItems: \"left\",\r\n                            }}\r\n                          >\r\n                            <span style={{ marginRight: \"1rem\" }}>\r\n                              <Avatar\r\n                                alt={`Display Photo of ${firstName}`}\r\n                                src={picture ? picture : displayPhoto}\r\n                                sx={{ width: 24, height: 24 }}\r\n                              />\r\n                            </span>\r\n                            <span style={{ fontSize: \"1.25rem\" }}>{`${\r\n                              firstName && firstName\r\n                            } ${lastName && lastName}`}</span>\r\n                          </div>\r\n                        ) : (\r\n                          \"No Name\"\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.red }}\r\n                      >\r\n                        {amount}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <Chip\r\n                          label={status}\r\n                          className={classes.badge}\r\n                          style={{\r\n                            background:\r\n                              status === \"Success\"\r\n                                ? theme.palette.common.lightGreen\r\n                                : status === \"Failed\"\r\n                                ? theme.palette.common.lightGreen\r\n                                : theme.palette.common.lightRed,\r\n                            color:\r\n                              status === \"Success\"\r\n                                ? theme.palette.common.green\r\n                                : status === \"Failed\"\r\n                                ? theme.palette.common.danger\r\n                                : theme.palette.common.red,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={payoutHeader}\r\n              paginationLabel=\"Payout  per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Payout;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HCPChat.js",["1385","1386"],"import React, { useEffect, useState } from \"react\";\r\nimport { Grid, Typography, Divider } from \"@mui/material\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { CustomButton, Loader, PreviousButton } from \"components/Utilities\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { CREATE_MESSAGE } from \"components/graphQL/Mutation\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { getMessage, doctor } from \"components/graphQL/useQuery\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridWrapper: {\r\n    \"&.MuiGrid-item\": {\r\n      borderRadius: \"1rem\",\r\n      background: \"#fff\",\r\n      padding: \"2rem 4rem\",\r\n      maxWidth: \"60rem !important\",\r\n      boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.1)\",\r\n    },\r\n  },\r\n  inputGrid: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n  },\r\n  heading: {\r\n    \"&.MuiTypography-root\": {\r\n      color: theme.palette.common.grey,\r\n      //   fontSize: \"1rem\"\r\n    },\r\n  },\r\n  formInput: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    fontSize: \"1.5rem\",\r\n    padding: \".5rem 1rem\",\r\n    border: \"none\",\r\n    background: \"transparent\",\r\n    color: theme.palette.common.grey,\r\n\r\n    \"&:focus\": {\r\n      outline: \"none\",\r\n    },\r\n  },\r\n  textArea: {\r\n    border: \"1px solid rgba(0, 0, 0, 0.03)\",\r\n    resize: \"none\",\r\n    borderRadius: \"0.5rem\",\r\n  },\r\n  divider: {\r\n    \"&.MuiDivider-root\": {\r\n      borderColor: \"rgba(0, 0, 0, 0.03)\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst HCPChat = () => {\r\n  const { hcpId } = useParams();\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  let history = useHistory();\r\n  const [createNewMessage] = useMutation(CREATE_MESSAGE, {\r\n    refetchQueries: [{ query: getMessage }],\r\n  });\r\n  const { data, loading } = useQuery(doctor, { variables: { id: hcpId } });\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n  const [profile, setprofile] = useState(\"\");\r\n  const { firstName, lastName } = profile;\r\n\r\n  const initialValues = {\r\n    subject: \"\",\r\n    recipient: `${firstName} ${lastName} ` || \"\",\r\n    textarea: \"\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setprofile(data.doctorProfile);\r\n    }\r\n  }, [data]);\r\n\r\n  const validationSchema = Yup.object({\r\n    subject: Yup.string(\"Enter your subject\").required(\"Subject is required\"),\r\n    textarea: Yup.string(\"Enter your message\").required(\"Message is required\"),\r\n    recipient: Yup.string(\"Enter your recipient\").required(\r\n      \"recipients is required\"\r\n    ),\r\n  });\r\n  const onSubmit = async (values, onSubmitProps) => {\r\n    const id = localStorage.getItem(\"user_id\");\r\n    const { subject, textarea } = values;\r\n\r\n    try {\r\n      await createNewMessage({\r\n        variables: {\r\n          sender: id,\r\n          recipient: hcpId,\r\n          subject,\r\n          body: textarea,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    onSubmitProps.resetForm();\r\n    history.goBack();\r\n  };\r\n\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validateOnBlur={false}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n      enableReinitialize\r\n    >\r\n      {({ isValid, isSubmitting, dirty }) => {\r\n        return (\r\n          <Form>\r\n            <Grid container direction=\"column\">\r\n              <Grid item style={{ marginBottom: \"3rem\" }}>\r\n                <PreviousButton\r\n                  path={`/hcps/${hcpId}/profile`}\r\n                  /* onClick={() => setSelectedScopedMenu(0)} */\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" alignItems=\"center\">\r\n                <Grid item>\r\n                  <Typography variant=\"h4\" style={{ marginBottom: \"3rem\" }}>\r\n                    Create New Message\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  container\r\n                  direction=\"column\"\r\n                  className={classes.gridWrapper}\r\n                >\r\n                  <Grid item>\r\n                    <Grid\r\n                      item\r\n                      container\r\n                      alignItems=\"center\"\r\n                      sx={{ gap: \"0!important\" }}\r\n                    >\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Recipient:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item className={classes.inputGrid}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          id=\"message\"\r\n                          name=\"recipient\"\r\n                          disabled\r\n                          variant=\"standard\"\r\n                          className={classes.formInput}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Subject:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item className={classes.inputGrid}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          id=\"subject\"\r\n                          name=\"subject\"\r\n                          variant=\"standard\"\r\n                          className={classes.formInput}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container direction=\"column\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Message:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item style={{ height: \"15rem\" }}>\r\n                        <FormikControl\r\n                          control=\"textarea\"\r\n                          id=\"textarea\"\r\n                          name=\"textarea\"\r\n                          variant=\"standard\"\r\n                          fLabel={true}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    {/* <Divider className={classes.divider} /> */}\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    style={{ alignSelf: \"flex-end\", marginTop: \"2rem\" }}\r\n                  >\r\n                    <CustomButton\r\n                      title=\"Send Message\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                      // endIcon={<ArrowForwardIosIcon style={{ fontSize: \"1.5rem\" }} />}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default HCPChat;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Dashboard.js",["1387","1388","1389"],"import React, { useEffect, useState } from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { getProviders } from \"components/graphQL/useQuery\";\r\nimport { useQuery, useLazyQuery } from \"@apollo/client\";\r\nimport { dashboard, dashboard1 } from \"components/graphQL/useQuery\";\r\nimport { NoData, AvailabilityTable, DashboardCharts } from \"components/layouts\";\r\nimport { Loader } from \"components/Utilities\";\r\n\r\nconst Dashboard = () => {\r\n  const [form, setForm] = useState(\"\");\r\n  const [dropDown, setDropDown] = useState([]);\r\n  const [state, setState] = useState(\"\");\r\n  const { data: da } = useQuery(getProviders);\r\n\r\n  const [provider, setProvider] = useState(\"\");\r\n  const [fetchData, { data: newData, error: err, loading: load }] =\r\n    useLazyQuery(dashboard);\r\n  const [fetchData2, { data: newData2, error, loading }] =\r\n    useLazyQuery(dashboard1);\r\n\r\n  useEffect(() => {\r\n    const all = {\r\n      key: \"All Stats\",\r\n      value: \"\",\r\n    };\r\n    if (da) {\r\n      const datas = da.getProviders.provider;\r\n      const options = datas?.map((i) => {\r\n        return {\r\n          key: i.name,\r\n          value: i._id,\r\n        };\r\n      });\r\n\r\n      setDropDown([all, ...options]);\r\n    }\r\n  }, [da]);\r\n\r\n  useEffect(() => {\r\n    if (newData2) {\r\n      setState(newData2);\r\n    }\r\n    //eslint-disable-next-line\r\n  }, []);\r\n  const onChange = async (e) => {\r\n    setProvider(e.target.value);\r\n    setForm(e.target.value);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (provider === \"\") {\r\n      fetchData2();\r\n    } else {\r\n      fetchData({\r\n        variables: {\r\n          providerId: provider,\r\n        },\r\n      });\r\n    }\r\n    //eslint-disable-next-line\r\n  }, [provider]);\r\n\r\n  useEffect(() => {\r\n    if (newData) {\r\n      setState(newData);\r\n    }\r\n  }, [form, newData, provider]);\r\n  useEffect(() => {\r\n    if (newData2) {\r\n      setState(newData2);\r\n    }\r\n  }, [form, newData2, provider]);\r\n\r\n  if (loading || load) return <Loader />;\r\n\r\n  if (error || err) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid container direction=\"column\" gap={2}>\r\n      {state ? (\r\n        <>\r\n          <DashboardCharts data={state?.getStats} />\r\n          <AvailabilityTable />\r\n        </>\r\n      ) : (\r\n        <NoData />\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HCP.js",["1390","1391","1392","1393","1394"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\DoctorVerificationProfile.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\EditManagement.js",["1395","1396","1397"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { EnhancedTable, NoData } from \"components/layouts\";\r\nimport { editManagement } from \"components/Utilities/tableHeaders\";\r\nimport {\r\n  PreviousButton,\r\n  CustomButton,\r\n  Loader,\r\n  Modals,\r\n} from \"components/Utilities\";\r\nimport { editRole } from \"components/graphQL/Mutation\";\r\nimport { getRoles, getRole } from \"components/graphQL/useQuery\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { TableRow, TableCell, Grid, Typography } from \"@mui/material\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { arrangeItems } from \"../../helpers/func\";\r\nimport { handleError, showSuccessMsg } from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  filterBtnGrid: {\r\n    \"&.MuiGrid-root\": {\r\n      marginRight: \"3rem\",\r\n    },\r\n  },\r\n  chip: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.25rem\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n      background: theme.palette.common.white,\r\n      color: theme.palette.common.green,\r\n      \"& .MuiChip-deleteIcon\": {\r\n        color: \"inherit\",\r\n        fontSize: \"inherit\",\r\n      },\r\n    },\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"0.5rem\",\r\n      maxWidth: \"7rem\",\r\n      fontSize: \".85rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"0.85rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".2rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n  btn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n      gap: \"4rem\",\r\n    },\r\n  },\r\n}));\r\nconst EditManagement = () => {\r\n  let history = useHistory();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const { editId } = useParams();\r\n  const [last, setLast] = useState([]);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const handleDialogOpen = () => setIsOpen(true);\r\n  const [role, setRole] = useState([]);\r\n  const [state, setState] = useState({\r\n    description: \"\",\r\n    name: \"\",\r\n  });\r\n  const { data, loading, error } = useQuery(getRole, {\r\n    variables: { id: editId },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      const { name, description, permissions } = data.getRole;\r\n      setState({\r\n        name,\r\n        description,\r\n      });\r\n\r\n      setLast(permissions);\r\n      setRole(permissions === null ? [] : arrangeItems(permissions)); //h);  arrangeItems(\r\n    }\r\n  }, [data]);\r\n  const handleDialogClose = () => setIsOpen(false);\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    value: \"\",\r\n  };\r\n\r\n  const onSubmit1 = (values, onSubmitProps) => {\r\n    const { name, value } = values;\r\n\r\n    const z = role.filter((i) => i.name === name);\r\n    const index = role.findIndex((object) => object.name === z[0].name);\r\n    const j = role[index];\r\n    j.value = [value, ...j.value];\r\n\r\n    setRole(role);\r\n    setLast([`${name}:${value}`, ...last]);\r\n    onSubmitProps.resetForm();\r\n  };\r\n\r\n  const [editRoles] = useMutation(editRole, {\r\n    refetchQueries: [{ query: getRoles }],\r\n  });\r\n  const onSubmit = async (values) => {\r\n    try {\r\n      const { name, description, permissions } = values;\r\n      await editRoles({\r\n        variables: {\r\n          id: editId,\r\n          name,\r\n          description,\r\n          permissions,\r\n        },\r\n      });\r\n      showSuccessMsg(\r\n        enqueueSnackbar,\r\n        Typography,\r\n        \"Premissions updated successfully.\"\r\n      );\r\n      history.push(\"/settings/management\");\r\n    } catch (error) {\r\n      handleError(error, enqueueSnackbar);\r\n    }\r\n  };\r\n\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { name, description } = state;\r\n\r\n  const initialValues = {\r\n    permissions: last,\r\n    name,\r\n    description,\r\n  };\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <>\r\n      <Grid container direction=\"column\" rowSpacing={2}>\r\n        <Grid item>\r\n          <PreviousButton path=\"/settings/management\" />\r\n        </Grid>\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={onSubmit}\r\n          // validationSchema={validationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n          enableReinitialize\r\n        >\r\n          {({ isSubmitting }) => {\r\n            return (\r\n              <>\r\n                <Form>\r\n                  <Grid\r\n                    item\r\n                    container\r\n                    flexWrap=\"nowrap\"\r\n                    alignItems=\"center\"\r\n                    style={{ paddingBottom: \"3rem\" }}\r\n                  >\r\n                    <Grid item container alignItems=\"center\">\r\n                      <Typography\r\n                        noWrap\r\n                        variant=\"h1\"\r\n                        component=\"div\"\r\n                        color=\"#2D2F39\"\r\n                      >\r\n                        User Permissions\r\n                      </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid\r\n                      item\r\n                      container\r\n                      gap={2}\r\n                      justifyContent=\"end\"\r\n                      alignItems=\"center\"\r\n                      justifySelf=\"flex-end\"\r\n                    >\r\n                      <Grid item>\r\n                        <CustomButton\r\n                          endIcon={<AddIcon />}\r\n                          title=\"Add New Permission\"\r\n                          type={buttonType}\r\n                          onClick={handleDialogOpen}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <CustomButton\r\n                          title=\"Save Permission\"\r\n                          type={buttonType}\r\n                          isSubmitting={isSubmitting}\r\n                          maxWidth=\"100%\"\r\n                          className={classes.btn}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid item container>\r\n                    <EnhancedTable\r\n                      headCells={editManagement}\r\n                      rows={role}\r\n                      type=\"editRole\"\r\n                      hasCheckbox={false}\r\n                    >\r\n                      {role.map((row, index) => {\r\n                        const isItemSelected = isSelected(index, selectedRows);\r\n                        const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            role=\"checkbox\"\r\n                            aria-checked={isItemSelected}\r\n                            tabIndex={-1}\r\n                            key={index}\r\n                            selected={isItemSelected}\r\n                          >\r\n                            <TableCell\r\n                              role=\"checkbox\"\r\n                              sx={{ padding: \"0 5rem\" }}\r\n                            ></TableCell>\r\n                            <TableCell\r\n                              id={labelId}\r\n                              scope=\"row\"\r\n                              align=\"left\"\r\n                              className={classes.tableCell}\r\n                              style={{ color: theme.palette.common.black }}\r\n                            >\r\n                              {row.name}\r\n                            </TableCell>\r\n                            <TableCell\r\n                              id={labelId}\r\n                              scope=\"row\"\r\n                              align=\"left\"\r\n                              style={{\r\n                                color: theme.palette.common.black,\r\n                                display: \"flex\",\r\n                              }}\r\n                            >\r\n                              {[\r\n                                row.name === \"account\" ? \"count\" : \"create\",\r\n                                \"get-all\",\r\n                                \"get\",\r\n                                \"delete\",\r\n                                \"update\",\r\n                              ].map((type, index) => {\r\n                                const value = row.value.includes(type)\r\n                                  ? `${row.name}:${type}`\r\n                                  : \"\";\r\n                                return (\r\n                                  <FormikControl\r\n                                    control=\"check\"\r\n                                    name=\"permissions\"\r\n                                    label={type}\r\n                                    key={index}\r\n                                    value={value}\r\n                                  />\r\n                                );\r\n                              })}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      })}\r\n                    </EnhancedTable>\r\n                  </Grid>\r\n                </Form>\r\n              </>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Grid>\r\n      <Modals\r\n        isOpen={isOpen}\r\n        title=\"Add New Role\"\r\n        rowSpacing={5}\r\n        handleClose={handleDialogClose}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container gap={4} direction=\"column\">\r\n                  <Grid item container spacing={2}>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      name=\"name\"\r\n                      label=\"Name\"\r\n                      placeholder=\"Enter Plan Name\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item container spacing={2}>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      name=\"value\"\r\n                      label=\"Value\"\r\n                      placeholder=\"Enter Value\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item container xs={12} marginTop={20}>\r\n                  <CustomButton\r\n                    title=\"Add New Role\"\r\n                    width=\"100%\"\r\n                    type={buttonType}\r\n                  />\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditManagement;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Consultations.js",["1398","1399"],"import React, { useEffect, useState } from \"react\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  TableRow,\r\n  TableCell,\r\n  Checkbox,\r\n  Button,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport { consultationsHeadCells4 } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getConsultations } from \"components/graphQL/useQuery\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableCell: {\r\n    \"&.css-1jilxo7-MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"12rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\n/* const filterOptions = [\r\n  { id: 0, value: \"Name\" },\r\n  { id: 1, value: \"Date\" },\r\n  { id: 2, value: \"Description\" },\r\n]; */\r\n\r\nconst Consultations = () => {\r\n  const [pageInfo, setPageInfo] = useState({});\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { patientConsultation } = useActions();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const [consultations, setConsultations] = useState([]);\r\n  const { setSelectedRows } = useActions();\r\n  const { patientId } = useParams();\r\n\r\n  const [fetchConsultations, { loading, data, error }] =\r\n    useLazyQuery(getConsultations);\r\n\r\n  useEffect(() => {\r\n    fetchConsultations({\r\n      variables: {\r\n        id: patientId,\r\n        orderBy: \"-createdAt\",\r\n      },\r\n    });\r\n  }, [fetchConsultations, patientId]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setConsultations(data.getConsultations.data);\r\n      patientConsultation(data);\r\n      setPageInfo(data.getConsultations.pageInfo);\r\n    }\r\n  }, [data, consultations, patientConsultation]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error.message} />;\r\n\r\n  return (\r\n    <Grid container gap={2} flexWrap=\"nowrap\" direction=\"column\" height=\"100%\">\r\n      <Grid\r\n        item\r\n        container\r\n        flexWrap=\"nowrap\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        sx={{ margin: \"1rem 0rem\" }}\r\n      >\r\n        {/* <Grid item flex={1}>\r\n          <Typography variant=\"h2\">Consultations</Typography>\r\n        </Grid> */}\r\n        {/* <Grid item>\r\n          <FilterList options={filterOptions} title=\"Filter\" />\r\n        </Grid> */}\r\n      </Grid>\r\n      <TableLayout>\r\n        {consultations.length > 0 ? (\r\n          <Grid item container direction=\"column\" height=\"100%\">\r\n            <EnhancedTable\r\n              headCells={consultationsHeadCells4}\r\n              rows={consultations}\r\n              paginationLabel=\"Patients per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                await changeTableLimit(fetchConsultations, {\r\n                  first: e,\r\n                  id: patientId,\r\n                });\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                await handlePageChange(fetchConsultations, page, pageInfo, {\r\n                  id: patientId,\r\n                });\r\n              }}\r\n            >\r\n              {consultations.map((row, index) => {\r\n                const { doctorData } = row;\r\n                const isItemSelected = isSelected(row._id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={row._id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(\r\n                            row._id,\r\n                            selectedRows,\r\n                            setSelectedRows\r\n                          )\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      {dateMoment(row.createdAt)}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ maxWidth: \"25rem\" }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                        }}\r\n                      >\r\n                        <span style={{ marginRight: \"1rem\" }}>\r\n                          <Avatar\r\n                            alt={`Display Photo of ${doctorData.firstName}`}\r\n                            src={\r\n                              doctorData.picture\r\n                                ? doctorData.picture\r\n                                : displayPhoto\r\n                            }\r\n                            sx={{ width: 24, height: 24 }}\r\n                          />\r\n                        </span>\r\n                        <span style={{ fontSize: \"1.25rem\" }}>\r\n                          {doctorData.firstName\r\n                            ? `${doctorData.firstName} ${doctorData.lastName}`\r\n                            : \"No Doctor\"}\r\n                        </span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Grid container gap={1}>\r\n                        {row.symptoms\r\n                          ? row.symptoms.map((i) => {\r\n                              return <p key={i.name}>{i.name}</p>;\r\n                            })\r\n                          : \"No Value\"}\r\n                      </Grid>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        width: \"4rem\",\r\n                      }}\r\n                    >\r\n                      {row.contactMedium ? row.contactMedium : \"No Value\"}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                      }}\r\n                    >\r\n                      {row.type ? row.type : \"No Value\"}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                      }}\r\n                    >\r\n                      {row.status ? row.status : \"No Value\"}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\">\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        className={classes.button}\r\n                        component={Link}\r\n                        to={`/patients/${patientId}/consultations/case-notes/${row._id}`}\r\n                        endIcon={<ArrowForwardIosIcon />}\r\n                      >\r\n                        View Details\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={consultationsHeadCells4}\r\n            paginationLabel=\"Patients per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Consultations;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\CaseNotes.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\CreateMessage.js",["1400"],"import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { CustomButton, PreviousButton } from \"components/Utilities\";\r\nimport { Divider, Grid, Typography } from \"@mui/material\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { CREATE_MESSAGE } from \"components/graphQL/Mutation\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  getMessage,\r\n  getProfileByDociId,\r\n  getDoctorByDociId,\r\n} from \"components/graphQL/useQuery\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridWrapper: {\r\n    \"&.MuiGrid-item\": {\r\n      borderRadius: \"1rem\",\r\n      background: \"#fff\",\r\n      padding: \"2rem 4rem\",\r\n      maxWidth: \"60rem !important\",\r\n      boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.1)\",\r\n    },\r\n  },\r\n  inputGrid: {\r\n    flex: 1,\r\n  },\r\n  heading: {\r\n    \"&.MuiTypography-root\": {\r\n      color: theme.palette.common.grey,\r\n      //   fontSize: \"1rem\"\r\n    },\r\n  },\r\n  formInput: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    fontSize: \"1.5rem\",\r\n    padding: \".5rem 1rem\",\r\n    border: \"none\",\r\n    background: \"transparent\",\r\n    color: theme.palette.common.grey,\r\n\r\n    \"&:focus\": {\r\n      outline: \"none\",\r\n    },\r\n  },\r\n  textArea: {\r\n    border: \"1px solid rgba(0, 0, 0, 0.03)\",\r\n    resize: \"none\",\r\n    borderRadius: \"0.5rem\",\r\n  },\r\n  divider: {\r\n    \"&.MuiDivider-root\": {\r\n      borderColor: \"rgba(0, 0, 0, 0.03)\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst CreateMessage = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  let history = useHistory();\r\n  const [createNewMessage] = useMutation(CREATE_MESSAGE, {\r\n    refetchQueries: [{ query: getMessage }],\r\n  });\r\n  const [recipientValue, setRecipientvalue] = useState(\"\");\r\n  const { data, refetch, error } = useQuery(getProfileByDociId, {\r\n    fetchPolicy: \"network-only\",\r\n    nextFetchPolicy: \"network-only\",\r\n  });\r\n  const { data: doctorProfile, refetch: refetch2 } = useQuery(\r\n    getDoctorByDociId,\r\n    {\r\n      fetchPolicy: \"network-only\",\r\n      nextFetchPolicy: \"network-only\",\r\n    }\r\n  );\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    subject: Yup.string(\"Enter your subject\")\r\n      .trim()\r\n      .required(\"Subject is required\"),\r\n    textarea: Yup.string(\"Enter your message\")\r\n      .trim()\r\n      .required(\"Message is required\"),\r\n    recipient: Yup.string(\"Enter your recipient\")\r\n      .trim()\r\n      .required(\"recipients is required\"),\r\n  });\r\n\r\n  const [recipient, setRecipient] = useState(\"\");\r\n  const { firstName, lastName, _id } = recipient.length > 0 && recipient[0];\r\n\r\n  const onSubmit = async (values, onSubmitProps) => {\r\n    const id = localStorage.getItem(\"user_id\");\r\n    const { subject, textarea, recipient } = values;\r\n\r\n    try {\r\n      await createNewMessage({\r\n        variables: {\r\n          sender: id,\r\n          recipient: _id ? _id : recipient,\r\n          subject,\r\n          body: textarea,\r\n        },\r\n      });\r\n\r\n      history.push(\"/messages\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    onSubmitProps.resetForm();\r\n  };\r\n  const onChange = useCallback(\r\n    async (e) => {\r\n      setRecipientvalue(e);\r\n      await refetch({\r\n        dociId: `HEALA-${e.toUpperCase()}`,\r\n      });\r\n      if ((data && data.profiles.data.length < 1) || error) {\r\n        await refetch2({ dociId: `HEALA-${e.toUpperCase()}` });\r\n      }\r\n    },\r\n    [refetch, refetch2, data, error]\r\n  );\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (data && data.profiles.data.length > 0) {\r\n        setRecipient(data.profiles.data);\r\n      }\r\n    })();\r\n  }, [data, recipientValue, onChange]);\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (doctorProfile && doctorProfile.doctorProfiles.profile.length > 0) {\r\n        setRecipient(doctorProfile.doctorProfiles.profile);\r\n      }\r\n    })();\r\n  }, [doctorProfile, onChange, recipientValue]);\r\n  const initialValues = {\r\n    subject: \"\",\r\n    recipient: recipient ? `${firstName} ${lastName} ` : \"\",\r\n    textarea: \"\",\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n      validateOnBlur={false}\r\n      enableReinitialize\r\n    >\r\n      {({ isValid, isSubmitting, dirty, values }) => {\r\n        return (\r\n          <Form onChange={setRecipientvalue(values.recipient)}>\r\n            {/* /*setRecipientvalue(values.recipient)*/}\r\n            <Grid container direction=\"column\">\r\n              <Grid item style={{ marginBottom: \"3rem\" }}>\r\n                <PreviousButton path={\"/messages\"} />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" alignItems=\"center\">\r\n                <Grid item>\r\n                  <Typography variant=\"h4\" style={{ marginBottom: \"3rem\" }}>\r\n                    Create New Message\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  container\r\n                  direction=\"column\"\r\n                  className={classes.gridWrapper}\r\n                >\r\n                  <Grid item style={{ marginBottom: \"3rem\" }}>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Recipient:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item className={classes.inputGrid}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          id=\"message\"\r\n                          onBlur={() => onChange(values.recipient)}\r\n                          name=\"recipient\"\r\n                          variant=\"standard\"\r\n                          className={classes.formInput}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid item style={{ marginBottom: \"3rem\" }}>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Subject:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item className={classes.inputGrid}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          id=\"subject\"\r\n                          name=\"subject\"\r\n                          variant=\"standard\"\r\n                          className={classes.formInput}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container direction=\"column\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Message:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item style={{ height: \"15rem\" }}>\r\n                        <FormikControl\r\n                          control=\"textarea\"\r\n                          id=\"textarea\"\r\n                          name=\"textarea\"\r\n                          variant=\"standard\"\r\n                          fLabel={true}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    {/* <Divider className={classes.divider} /> */}\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    style={{ alignSelf: \"flex-end\", marginTop: \"2rem\" }}\r\n                  >\r\n                    <CustomButton\r\n                      title=\"Send Message\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                      // endIcon={<ArrowForwardIosIcon style={{ fontSize: \"1.5rem\" }} />}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n\r\n  // );\r\n};\r\n\r\nexport default CreateMessage;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Administrator.js",["1401"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport {\r\n  Loader,\r\n  /* Button, */\r\n  Modals,\r\n  CustomButton,\r\n} from \"components/Utilities\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Grid, Checkbox, TableRow, TableCell } from \"@mui/material\";\r\nimport { signup } from \"components/graphQL/Mutation\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { adminHeader } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport { findAdmin } from \"components/graphQL/useQuery\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport { changeTableLimit } from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n//\r\nconst useStyles = makeStyles((theme) => ({\r\n  FormLabel: {\r\n    fontSize: \"1.6rem\",\r\n    color: theme.palette.common.dark,\r\n  },\r\n  btn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"10rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n  redBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightRed,\r\n      color: theme.palette.common.red,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.error.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n  greenBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.success.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      color: \"rgb(0 0 0)\",\r\n      fontWeight: 400,\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n  \"&.MuiButton-root\": {\r\n    ...theme.typography.btn,\r\n    background: theme.palette.common.black,\r\n    width: \"100%\",\r\n  },\r\n\r\n  checkboxContainer: {\r\n    \"&.MuiBox-root\": {\r\n      padding: \"2rem 0\",\r\n      border: \"1px solid #E0E0E0\",\r\n      borderRadius: \".4rem\",\r\n      \"&:active\": {\r\n        border: \"2px solid black\",\r\n      },\r\n    },\r\n  },\r\n  checkbox: {\r\n    \"& .MuiSvgIcon-root\": {\r\n      fontSize: 28,\r\n    },\r\n    \"&.Mui-checked\": {\r\n      color: \"green !important\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Administrator = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [addAdminUser] = useMutation(signup);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [fetchAdmins, { loading, data, error, refetch }] =\r\n    useLazyQuery(findAdmin);\r\n\r\n  useEffect(() => {\r\n    fetchAdmins({\r\n      variables: {\r\n        first: pageInfo?.limit,\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchAdmins, pageInfo]);\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n  /*   const onChange = async (e) => {\r\n    setSearchMail(e);\r\n    if (e == \"\") {\r\n      refetch();\r\n    } else refetch({ role: e });\r\n  }; */\r\n  const specializations = [\r\n    { key: \"Doctor\", value: \"doctor\" },\r\n    { key: \"Super-admin\", value: \"super-admin\" },\r\n  ];\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n\r\n  const initialValues = {\r\n    email: \"\",\r\n    role: \"\",\r\n  };\r\n  const [admins, setAdmins] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setAdmins(data.accounts.data);\r\n      setPageInfo(data.accounts.pageInfo);\r\n    }\r\n  }, [data]);\r\n\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string().email(\"Enter a valid email\").trim(),\r\n    role: Yup.string(\"Select your role\"),\r\n  });\r\n  const onSubmit = async (values) => {\r\n    const { email, role } = values;\r\n    await refetch({\r\n      email,\r\n      role,\r\n    });\r\n    handleDialogClose();\r\n  };\r\n  const initialValues1 = {\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const validationSchema1 = Yup.object({\r\n    password: Yup.string()\r\n      .required(\"password is required\")\r\n      .min(8, \"Password is too short - should be 8 chars minimum.\"),\r\n    email: Yup.string()\r\n      .email(\"Enter a valid email\")\r\n      .required(\"Email is required\"),\r\n  });\r\n  const onSubmit1 = async (values, onSubmitProps) => {\r\n    const { email, password } = values;\r\n    try {\r\n      await addAdminUser({\r\n        variables: {\r\n          email,\r\n          password,\r\n          role: \"admin\",\r\n          authType: \"normal\",\r\n        },\r\n        refetchQueries: [{ query: findAdmin }],\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    handleAdminClose();\r\n    onSubmitProps.resetForm();\r\n  };\r\n\r\n  /*   const [searchMail, setSearchMail] = useState(\"\"); */\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  const handleAdminClose = () => setIsAdmin(false);\r\n  /*   const handleDialogOpen = () => setIsOpen(true); */\r\n  const handleAdminOpen = () => setIsAdmin(true);\r\n  const handleDialogClose = () => setIsOpen(false);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        height=\"100%\"\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          flex={{ md: 1, sm: 1, xs: 1 }}\r\n          justifyContent=\"space-between\"\r\n        >\r\n          <Grid\r\n            item\r\n            container\r\n            flex={{ md: 1, sm: 1, xs: 1 }}\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Grid item></Grid>\r\n            <Grid item>\r\n              <CustomButton\r\n                endIcon={<AddIcon />}\r\n                title=\"Add Admin\"\r\n                type={buttonType}\r\n                onClick={handleAdminOpen}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <TableLayout>\r\n          {admins.length > 0 ? (\r\n            <Grid item container height=\"100%\" direction=\"column\">\r\n              <EnhancedTable\r\n                headCells={adminHeader}\r\n                rows={admins}\r\n                paginationLabel=\"admin per page\"\r\n                hasCheckbox={true}\r\n                changeLimit={changeTableLimit}\r\n                fetchData={fetchAdmins}\r\n                dataPageInfo={pageInfo}\r\n              >\r\n                {admins.map((row, index) => {\r\n                  const { _id, email, role } = row;\r\n                  const isItemSelected = isSelected(_id, selectedRows);\r\n\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={_id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        {email}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.black }}\r\n                      >\r\n                        {role}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={adminHeader}\r\n              paginationLabel=\"Admin  per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </Grid>\r\n      <Modals\r\n        isOpen={isOpen}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        handleClose={handleDialogClose}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={onSubmit}\r\n          validateOnBlur={false}\r\n          validationSchema={validationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container gap={4}>\r\n                  <Grid item container direction=\"column\">\r\n                    <Grid item container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          name=\"email\"\r\n                          label=\"Admin Email\"\r\n                          placeholder=\"Enter Admin Email\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          name=\"role\"\r\n                          label=\"Role\"\r\n                          options={specializations}\r\n                          placeholder=\"Select Role\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container xs={12}>\r\n                    <CustomButton\r\n                      title=\"Apply Filter\"\r\n                      width=\"100%\"\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                      type={buttonType}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      <Modals\r\n        isOpen={isAdmin}\r\n        title=\"Add Admin\"\r\n        rowSpacing={5}\r\n        height=\"auto\"\r\n        handleClose={handleAdminClose}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={validationSchema1}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isValid, isSubmitting, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={2}>\r\n                  <Grid item>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      label=\"Email\"\r\n                      id=\"email\"\r\n                      placeholder=\"Enter email\"\r\n                      name=\"email\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      label=\"Password\"\r\n                      type=\"password\"\r\n                      id=\"password\"\r\n                      name=\"password\"\r\n                      placeholder=\"Enter Password\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item container xs={12} marginTop={5}>\r\n                    <CustomButton\r\n                      title=\"Add Admin\"\r\n                      width=\"100%\"\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                      type={buttonType}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Administrator;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Appointments.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\SearchIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\LogoutIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\tableData.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\BellIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\asideMenus.js",["1402","1403","1404","1405"],"import React from \"react\";\r\nimport HMOIcon from \"components/Icons/HMOIcon\";\r\nimport LabelIcon from \"components/Icons/LabelIcon\";\r\nimport DoctorsIcon from \"components/Icons/DoctorsIcon\";\r\nimport FinanceIcon from \"components/Icons/FinanceIcon\";\r\nimport PatientsIcon from \"components/Icons/PatientsIcon\";\r\nimport VerifiedIcon from \"components/Icons/VerifiedIcon\";\r\nimport PartnersIcon from \"components/Icons/PartnersIcon\";\r\nimport SettingsIcon from \"components/Icons/SettingsIcon\";\r\nimport RefferalsIcon from \"components/Icons/RefferalsIcon\";\r\nimport DashboardIcon from \"components/Icons/DashboardIcon\";\r\nimport SubscriptionIcon from \"components/Icons/SubscriptionIcon\";\r\n\r\nexport const menus = [\r\n  {\r\n    id: 0,\r\n    title: \"Dashboard\",\r\n    icon: <DashboardIcon />,\r\n    path: \"/dashboard\",\r\n  },\r\n  {\r\n    id: 1,\r\n    title: \"Patients\",\r\n    icon: <PatientsIcon />,\r\n    path: \"/patients\",\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Doctors\",\r\n    icon: <DoctorsIcon />,\r\n    path: \"/hcps\",\r\n  },\r\n  {\r\n    id: 12,\r\n    title: \"Provider Services\",\r\n    icon: <LabelIcon />,\r\n    path: \"/user-type\",\r\n  },\r\n  // {\r\n  //   id: 3,\r\n  //   title: \"Partners\",\r\n  //   icon: <PartnersIcon sx={{ height: \"25px\", width: \"25px\" }} />,\r\n  //   path: \"/partners\",\r\n  // },\r\n  {\r\n    id: 7,\r\n    title: \"Doctor Verification\",\r\n    icon: <VerifiedIcon />,\r\n    path: \"/verification\",\r\n  },\r\n  {\r\n    id: 8,\r\n    title: \"Finance\",\r\n    icon: <FinanceIcon />,\r\n    path: \"/finance\",\r\n  },\r\n  {\r\n    id: 9,\r\n    title: \"Referrals\",\r\n    icon: <RefferalsIcon />,\r\n    path: \"/referrals\",\r\n  },\r\n  {\r\n    id: 10,\r\n    title: \"Subscription Plans\",\r\n    icon: <SubscriptionIcon />,\r\n    path: \"/plans\",\r\n  },\r\n  {\r\n    id: 11,\r\n    title: \"Settings\",\r\n    icon: <SettingsIcon />,\r\n    path: \"/settings\",\r\n  },\r\n];\r\nexport const firstMenu = [\r\n  // {\r\n  //   id: 13,\r\n  //   title: \"HMO\",\r\n  //   icon: <HMOIcon sx={{ height: \"25px\", width: \"25px\" }} />,\r\n  //   path: \"/hmo\",\r\n  // },\r\n  // {\r\n  //   id: 5,\r\n  //   title: \"Messages\",\r\n  //   icon: <MessagesIcon sx={{ height: \"25px\", width: \"25px\" }} />,\r\n  //   path: \"/messages\",\r\n  // },\r\n  // {\r\n  //   id: 6,\r\n  //   title: \"Emails\",\r\n  //   icon: <EmailIcon sx={{ height: \"25px\", width: \"25px\" }} />,\r\n  //   path: \"/email\",\r\n  // },\r\n];\r\n\r\n//\r\nexport const subMenu = [\r\n  {\r\n    id: 100,\r\n    title: \"Heala\",\r\n    // icon: <HMOIcon sx={{ height: \"25px\", width: \"25px\" }} />,\r\n    path: \"/heala\",\r\n  },\r\n  {\r\n    id: 1100,\r\n    title: \"Hospital\",\r\n    // icon: <HMOIcon sx={{ height: \"25px\", width: \"25px\" }} />,\r\n    path: \"/hospital\",\r\n  },\r\n  {\r\n    id: 111,\r\n    title: \"HMO\",\r\n    // icon: <HMOIcon sx={{ height: \"25px\", width: \"25px\" }} />,\r\n    path: \"/hmos\",\r\n  },\r\n  {\r\n    id: 1101,\r\n    title: \"UserTypes\",\r\n    // icon: <HMOIcon sx={{ height: \"25px\", width: \"25px\" }} />,\r\n    path: \"/user-type\",\r\n  },\r\n];\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Copy.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\docVerificationPageStyles.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\doctorsPageStyles.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\bMI.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\hooks\\useCopy.js",["1406"],"import React from \"react\";\r\nimport t from \"prop-types\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { Typography } from \"@mui/material\";\r\n\r\nexport const useCopy = () => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const copyToClipBoard = (text, name) => {\r\n    try {\r\n      navigator.clipboard.writeText(text);\r\n      enqueueSnackbar(\r\n        <Typography\r\n          style={{\r\n            fontSize: \"1.2rem\",\r\n            color: \"ffffff\",\r\n            fontWeight: \"bold\",\r\n            cursor: \"pointer\",\r\n          }}\r\n        >{`${name ? name : \"Text\"} copied!!!`}</Typography>,\r\n        {\r\n          variant: \"success\",\r\n          preventDuplicate: true,\r\n          anchorOrigin: {\r\n            horizontal: \"right\",\r\n            vertical: \"top\",\r\n          },\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(error);\r\n      enqueueSnackbar(\r\n        <Typography\r\n          style={{\r\n            fontSize: \"1.2rem\",\r\n            color: \"ffffff\",\r\n            fontWeight: \"bold\",\r\n            cursor: \"pointer\",\r\n          }}\r\n        >{`Couldn't copy ${name ? name : \"Text\"}!!!`}</Typography>,\r\n        {\r\n          variant: \"error\",\r\n          preventDuplicate: true,\r\n          anchorOrigin: {\r\n            horizontal: \"right\",\r\n            vertical: \"top\",\r\n          },\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  return {\r\n    copyToClipBoard,\r\n  };\r\n};\r\n\r\nuseCopy.PropTypes = {\r\n  text: t.string,\r\n  name: t.string,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\loginPageStyles.js",["1407"],"import { makeStyles } from \"@mui/styles\";\r\n/* import loginBackground from \"../assets/images/login-background.svg\"; */\r\n\r\nexport const useStyles = makeStyles((theme) => ({\r\n  gridContainer: {\r\n    \"&.MuiGrid-root\": {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      justifyContent: \"center\",\r\n      backgroundColor: \"#f8f8f8\",\r\n      minHeight: \"100vh\",\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  overlay: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    position: \"absolute\",\r\n    top: 0,\r\n    left: 0,\r\n  },\r\n  peopleBgImage: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    backgroundSize: \"cover\",\r\n    overflow: \"hidden\",\r\n    backgroundPosition: \"25% 50%\",\r\n  },\r\n  heading: {\r\n    \"&.MuiTypography-root\": {\r\n      fontSize: \"clamp(1em, 3.2em, 5em)\",\r\n      textAlign: \"center\",\r\n      lineHeight: \"28px\",\r\n      fontWeight: \"500 !important\",\r\n      padding: \"23px\",\r\n      color: \"#333333\",\r\n    },\r\n  },\r\n  logoAlign: {\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexGrow: 0,\r\n    paddingBottom: \"2rem\",\r\n  },\r\n\r\n  logo: {\r\n    width: \"clamp(100px, 150px, 200px)\",\r\n    position: \"relative\",\r\n    textAlign: \"center\",\r\n  },\r\n  rightParentGrid: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"#FCFCFC\",\r\n    borderRadius: \"11px\",\r\n  },\r\n\r\n  link: {\r\n    textDecoration: \"none\",\r\n  },\r\n  loginBtn: {\r\n    width: \"100%\",\r\n    height: \"54.62px\",\r\n    border: \"none\",\r\n    fontWeight: \"500 !important\",\r\n    fontSize: \"1.6rem !important\",\r\n    textTransform: \"initial !important\",\r\n    color: \"#ffffff !important\",\r\n    lineHeight: \"20px\",\r\n    background: \"linear-gradient(98.44deg, #3E5EA9 1.92%, #7EEDBA 122.04%)\",\r\n    borderRadius: \"7px\",\r\n    cursor: \"pointer\",\r\n    \"&:hover\": {\r\n      boxShadow: \"0px 6.82771px 20.4831px rgba(62, 165, 132, 0.15)\",\r\n    },\r\n  },\r\n}));\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\partnersPageStyles.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\patientsPageStyles.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\LoginInput.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\Filters\\PatientFilters.js",["1408","1409","1410","1411","1412"],"import React, { useEffect, useState } from \"react\";\r\nimport t from \"prop-types\";\r\nimport { Grid } from \"@mui/material\";\r\n\r\nimport Filter from \".\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getPlans, getProviders } from \"components/graphQL/useQuery\";\r\nimport { deleteVar, filterData } from \"helpers/filterHelperFunctions\";\r\nimport {\r\n  genderType,\r\n  patientsProfileDefaultFilterByValues,\r\n  /* statusFilterBy, */\r\n} from \"helpers/mockData\";\r\n\r\nconst PatientFilters = ({ setProfiles, setPageInfo, queryParams }) => {\r\n  const { displayAlert } = useAlert();\r\n  const [plans, setPlans] = useState([]);\r\n  const [fetchPlans] = useLazyQuery(getPlans);\r\n  const [providers, setProviders] = useState([]);\r\n  const [fetchProviders] = useLazyQuery(getProviders);\r\n  const [providerId, setProviderId] = useState(null);\r\n  const [filterPlanValue, setFilterPlanValue] = useState(\"\");\r\n  const [, setStatusFilterValue] = useState(\"\");\r\n  const { patientsParams, patientsByStatusParams, patientsByPlanParams } =\r\n    queryParams;\r\n  const { fetchPatient, loading, refetch, variables } = patientsParams;\r\n  const [profileFilterValues, setProfileFilterValues] = useState(\r\n    patientsProfileDefaultFilterByValues\r\n  );\r\n  const {\r\n    byStatusLoading,\r\n    /* byStatusVaribles,\r\n    byStatusRefetch,\r\n    fetchPatientByStatus, */\r\n  } = patientsByStatusParams;\r\n  const { byPlanLoading, byPlanVaribles, byPlanRefetch, fetchPatientByPlan } =\r\n    patientsByPlanParams;\r\n\r\n  useEffect(() => {\r\n    fetchProviders()\r\n      .then(({ data }) => {\r\n        if (!data) throw Error(\"Couldn't get list of providers\");\r\n        const providersList = (data?.getProviders?.provider).map((provider) => {\r\n          const { _id, name } = provider;\r\n          return { key: name, value: _id };\r\n        });\r\n        setProviders(providersList);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (providerId === \"\" || providerId === null) return;\r\n    fetchPlans({ variables: { provider: providerId } })\r\n      .then(({ data }) => {\r\n        if (!data) throw Error(\"Couldn't get list of plans\");\r\n        const planList = (data?.getPlans?.plan || []).map((plan) => {\r\n          const { _id, name } = plan;\r\n          return { key: name, value: _id };\r\n        });\r\n        setPlans(planList);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [providerId]);\r\n\r\n  const onFilterProfileChange = async (name, value) => {\r\n    try {\r\n      if (name === \"provider\") setProviderId(value);\r\n      setStatusFilterValue(\"\");\r\n      deleteVar(variables);\r\n      const filterValues = { ...profileFilterValues, [name]: value };\r\n      setProfileFilterValues(filterValues);\r\n      filterData(filterValues, {\r\n        fetchData: fetchPatient,\r\n        refetch,\r\n        variables,\r\n      })\r\n        .then((data) => {\r\n          setProfiles(data?.profiles?.data || []);\r\n          setPageInfo(data?.profiles?.pageInfo || {});\r\n        })\r\n        .catch(() => {\r\n          refresh(setProfileFilterValues, patientsProfileDefaultFilterByValues);\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setProfileFilterValues, patientsProfileDefaultFilterByValues);\r\n    }\r\n  };\r\n\r\n  /*   const onFilterStatusChange = async (value) => {\r\n    try {\r\n      setProfileFilterValues({ gender: \"\", provider: \"\" });\r\n      deleteVar(byStatusVaribles);\r\n      setStatusFilterValue(value);\r\n      const filterVariables = { status: value };\r\n\r\n      filterData(filterVariables, {\r\n        fetchData: fetchPatientByStatus,\r\n        refetch: byStatusRefetch,\r\n        variables: byStatusVaribles,\r\n      })\r\n        .then((data) => {\r\n          setProfiles(data?.profilesByStatus?.data || []);\r\n          setPageInfo(data?.profilesByStatus?.pageInfo || {});\r\n        })\r\n        .catch(() => {\r\n          refresh(setStatusFilterValue, \"\");\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setStatusFilterValue, \"\");\r\n    }\r\n  }; */\r\n\r\n  const onFilterPlanChange = async (value) => {\r\n    try {\r\n      if (value === \"\") {\r\n        setProfileFilterValues({\r\n          ...patientsProfileDefaultFilterByValues,\r\n        });\r\n      } else {\r\n        setProfileFilterValues({\r\n          ...patientsProfileDefaultFilterByValues,\r\n          provider: profileFilterValues.provider,\r\n        });\r\n      }\r\n      deleteVar(byPlanVaribles);\r\n      setFilterPlanValue(value);\r\n      const filterVariables = { planId: value };\r\n\r\n      filterData(filterVariables, {\r\n        fetchData: fetchPatientByPlan,\r\n        refetch: byPlanRefetch,\r\n        variables: byPlanVaribles,\r\n      })\r\n        .then((data) => {\r\n          setProfiles(data?.profilesByPlan?.data || []);\r\n          setPageInfo(data?.profilesByPlan?.pageInfo || {});\r\n        })\r\n        .catch(() => {\r\n          refresh(setStatusFilterValue, \"\");\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setStatusFilterValue, \"\");\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\r\n    setFilterValue(defaultVal);\r\n\r\n    deleteVar(variables);\r\n\r\n    refetch()\r\n      .then(({ data }) => {\r\n        setProfiles(data?.profiles?.data || []);\r\n        setPageInfo(data?.profiles?.pageInfo || {});\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", \"Failed to get patients data, Try again\");\r\n      });\r\n  };\r\n  return (\r\n    <Grid item container flexWrap=\"wrap\" spacing={2} alignItems=\"flex-end\">\r\n      {/* FILTER BY GENDER */}\r\n      <Grid item>\r\n        <Filter\r\n          onHandleChange={(e) =>\r\n            onFilterProfileChange(\"gender\", e?.target?.value)\r\n          }\r\n          onClickClearBtn={() => onFilterProfileChange(\"gender\", \"\")}\r\n          options={[{ key: \"Gender\", value: \"\" }, ...genderType]}\r\n          name=\"gender\"\r\n          value={profileFilterValues.gender}\r\n          hasClearBtn={true}\r\n          disable={loading || byStatusLoading || byPlanLoading}\r\n          variant=\"small\"\r\n        />\r\n      </Grid>\r\n\r\n      {/* FILTER BY PROVIDER AND PLAN */}\r\n      <Grid item>\r\n        <Filter\r\n          onHandleChange={(e) =>\r\n            onFilterProfileChange(\"provider\", e?.target?.value)\r\n          }\r\n          onClickClearBtn={() => onFilterProfileChange(\"provider\", \"\")}\r\n          options={[{ key: \"Provider\", value: \"\" }, ...providers]}\r\n          name=\"provider\"\r\n          value={profileFilterValues.provider}\r\n          hasClearBtn={true}\r\n          disable={loading || byStatusLoading || byPlanLoading}\r\n        />\r\n      </Grid>\r\n      {profileFilterValues.provider === \"\" ? null : (\r\n        <Grid item>\r\n          <Filter\r\n            label=\"\"\r\n            onHandleChange={(e) => onFilterPlanChange(e?.target?.value)}\r\n            onClickClearBtn={() => onFilterPlanChange(\"\")}\r\n            options={plans}\r\n            name=\"plan\"\r\n            placeholder=\"Provider Plan\"\r\n            value={filterPlanValue}\r\n            hasClearBtn={true}\r\n            disable={loading || byStatusLoading || byPlanLoading}\r\n          />\r\n        </Grid>\r\n      )}\r\n\r\n      {/* FILTER BY STATUS */}\r\n      {/* <Grid item>\r\n        <Filter\r\n          label=\"By Status\"\r\n          onHandleChange={(e) => onFilterStatusChange(e?.target?.value)}\r\n          onClickClearBtn={() => onFilterStatusChange(\"\")}\r\n          options={statusFilterBy}\r\n          name=\"status\"\r\n          placeholder=\"None\"\r\n          value={statusFilterValue}\r\n          hasClearBtn={true}\r\n          disable={loading || byStatusLoading || byPlanLoading}\r\n        />\r\n      </Grid> */}\r\n      {/* ==== CLEAR FILTERS BUTTON ===== */}\r\n      {/* <Grid item>\r\n            <ClearFiltersBtn\r\n              title=\"Clear filters\"\r\n              onHandleClick={() => {\r\n                resetFilters(\r\n                  setFilterValues,\r\n                  patientsPageDefaultFilterValues,\r\n                  variables,\r\n                  fetchPatient\r\n                );\r\n              }}\r\n            />\r\n          </Grid> */}\r\n    </Grid>\r\n  );\r\n};\r\nPatientFilters.propTypes = {\r\n  setProfiles: t.func.isRequired,\r\n  setPageInfo: t.func.isRequired,\r\n  queryParams: t.object.isRequired,\r\n};\r\n\r\nexport default PatientFilters;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\DataHeader.js",["1413","1414","1415","1416","1417"],"/* import * as React from \"react\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport displayPhoto from \"assets/images/avatar.svg\"; */\r\nimport Styled from \"styled-components\";\r\n\r\n/* export const columns = [\r\n  {\r\n    field: \"entryDate\",\r\n    headerName: \"Entry Date\",\r\n    headerClassName: \"entryHeader\",\r\n    headerAlign: \"center\",\r\n    flex: 0.1,\r\n    cellClassName: \"entryDate\",\r\n    type: \"number\",\r\n    minWidth: 60,\r\n    sortable: false,\r\n  },\r\n\r\n  {\r\n    field: \"fullname\",\r\n    headerName: \"Name\",\r\n    headerClassName: \"entryHeader\",\r\n    sortable: false,\r\n    cellClassName: \"name\",\r\n    headerAlign: \"left\",\r\n    flex: 0.13,\r\n    minWidth: 100,\r\n    renderCell: (params) => (\r\n      <span style={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <Avatar alt=\"Display avatar\" src={displayPhoto} style={{ marginRight: \"1rem\" }} />\r\n        {params.getValue(params.id, \"firstName\") || \"\"}\r\n\r\n        {params.getValue(params.id, \"lastName\") || \"\"}\r\n      </span>\r\n    ),\r\n  },\r\n  {\r\n    field: \"category\",\r\n    headerName: \"Category\",\r\n    headerAlign: \"left\",\r\n    cellClassName: \"category\",\r\n    // headerClassName: \"categoryHeader\",\r\n    type: \"number\",\r\n    minWidth: 100,\r\n    flex: 0.06,\r\n    sortable: false,\r\n  },\r\n\r\n  {\r\n    field: \"email\",\r\n    headerName: \"Email\",\r\n    headerClassName: \"entryHeader\",\r\n    headerAlign: \"center\",\r\n    cellClassName: \"email\",\r\n    flex: 0.15,\r\n    minWidth: 100,\r\n    renderCell: (params) => (\r\n      <Div>\r\n        <a> {params.getValue(params.id, \"email\") || \"\"}</a>\r\n      </Div>\r\n    ),\r\n  },\r\n];\r\n\r\nexport const columns2 = [\r\n  {\r\n    field: \"entryDate\",\r\n    headerName: \"Entry Date\",\r\n    headerClassName: \"entryHeader\",\r\n    headerAlign: \"center\",\r\n    flex: 0.1,\r\n    cellClassName: \"entryDate\",\r\n    type: \"number\",\r\n    minWidth: 110,\r\n    sortable: false,\r\n  },\r\n\r\n  {\r\n    field: \"fullname\",\r\n    headerName: \"Name\",\r\n    headerClassName: \"entryHeader\",\r\n    description: \"This column has a value getter and is not sortable.\",\r\n    sortable: false,\r\n    cellClassName: \"name\",\r\n    headerAlign: \"center\",\r\n    flex: 0.13,\r\n    minWidth: 150,\r\n    renderCell: (params) => (\r\n      <span style={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <Avatar alt=\"Display avatar\" src={displayPhoto} style={{ marginRight: \"1rem\" }} />\r\n        {params.getValue(params.id, \"firstName\") || \"\"}\r\n\r\n        {params.getValue(params.id, \"lastName\") || \"\"}\r\n      </span>\r\n    ),\r\n  },\r\n  {\r\n    field: \"medical\",\r\n    headerName: \"Medical ID\",\r\n    headerAlign: \"center\",\r\n    cellClassName: \"medical\",\r\n    headerClassName: \"medical\",\r\n    type: \"number\",\r\n    minWidth: 120,\r\n    flex: 0.08,\r\n    sortable: false,\r\n  },\r\n\r\n  {\r\n    field: \" \",\r\n    headerName: \" \",\r\n    headerClassName: \"entryHeader\",\r\n    headerAlign: \"center\",\r\n    cellClassName: \"email\",\r\n    selectable: false,\r\n    flex: 0.15,\r\n    minWidth: 100,\r\n    renderCell: (params) => (\r\n      <Div2>\r\n        <a href=\"/view\">\r\n          View HCP &nbsp;&nbsp;\r\n          <svg\r\n            width=\"6\"\r\n            height=\"8\"\r\n            viewBox=\"0 0 6 8\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              d=\"M0.726562 7.06L3.7799 4L0.726562 0.94L1.66656 0L5.66656 4L1.66656 8L0.726562 7.06Z\"\r\n              fill=\"#757886\"\r\n            />\r\n          </svg>\r\n        </a>\r\n      </Div2>\r\n    ),\r\n  },\r\n];\r\nexport const Referralcolumns = [\r\n  {\r\n    field: \"entryDate\",\r\n    headerName: \"Entry Date\",\r\n    headerClassName: \"entryHeader\",\r\n    headerAlign: \"center\",\r\n    flex: 0.09,\r\n    cellClassName: \"entryDate\",\r\n    type: \"number\",\r\n    minWidth: 60,\r\n    maxWidth: 150,\r\n    sortable: false,\r\n  },\r\n  {\r\n    field: \"time\",\r\n    headerName: \"Time\",\r\n    headerClassName: \"referralTime\",\r\n    headerAlign: \"center\",\r\n    flex: 0.077,\r\n    cellClassName: \"referralTime\",\r\n    type: \"number\",\r\n    minWidth: 50,\r\n    sortable: false,\r\n  },\r\n\r\n  {\r\n    field: \"HCP Name\",\r\n    headerName: \"HCP Name\",\r\n    headerClassName: \"entryHeader\",\r\n    description: \"This column has a value getter and is not sortable.\",\r\n    sortable: false,\r\n    cellClassName: \"name\",\r\n    headerAlign: \"center\",\r\n    flex: 0.13,\r\n    minWidth: 160,\r\n    renderCell: (params) => (\r\n      <span style={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <Avatar alt=\"Display avatar\" src={displayPhoto} style={{ marginRight: \"1rem\" }} />\r\n        {params.getValue(params.id, \"firstName\") || \"\"}\r\n\r\n        {params.getValue(params.id, \"lastName\") || \"\"}\r\n      </span>\r\n    ),\r\n  },\r\n  {\r\n    field: \"specialization\",\r\n    headerName: \"Specialization\",\r\n    headerAlign: \"left\",\r\n    cellClassName: \"CellSpecialization\",\r\n    headerClassName: \"specialization\",\r\n    type: \"number\",\r\n    minWidth: 50,\r\n    flex: 0.11,\r\n    sortable: false,\r\n  },\r\n  {\r\n    field: \"fullname\",\r\n    headerName: \"Patient's Name\",\r\n    headerClassName: \"headerPatientName\",\r\n    sortable: false,\r\n    cellClassName: \"PatientName\",\r\n    headerAlign: \"center\",\r\n    flex: 0.15,\r\n    minWidth: 200,\r\n    renderCell: (params) => (\r\n      <span style={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <Avatar alt=\"Display avatar\" src={displayPhoto} style={{ marginRight: \"1rem\" }} />\r\n        {params.getValue(params.id, \"firstName\") || \"\"}\r\n        {params.getValue(params.id, \"lastName\") || \"\"}\r\n      </span>\r\n    ),\r\n  },\r\n\r\n  {\r\n    field: \"Status \",\r\n    headerName: \" Status\",\r\n    headerClassName: \"status\",\r\n    headerAlign: \"left\",\r\n    cellClassName: \"cellStatus\",\r\n    selectable: false,\r\n    flex: 0.06,\r\n    minWidth: 70,\r\n    renderCell: (params) => (\r\n      <ReferralDiv>\r\n        <Div2>\r\n          <a href=\"\">Active</a>\r\n        </Div2>\r\n      </ReferralDiv>\r\n    ),\r\n  },\r\n  {\r\n    field: \"referral\",\r\n    headerName: \" \",\r\n    headerClassName: \"entryHeader\",\r\n    headerAlign: \"left\",\r\n    cellClassName: \"refferalHeader\",\r\n    selectable: false,\r\n    flex: 0.1,\r\n    minWidth: 100,\r\n    renderCell: (params) => (\r\n      <Div2>\r\n        <small>View referral</small>\r\n      </Div2>\r\n    ),\r\n  },\r\n];\r\nexport const Subscriptioncolumns = [\r\n  {\r\n    field: \"planName\",\r\n    headerName: \"Name of plan\",\r\n    headerClassName: \"planName\",\r\n    headerAlign: \"headerPlanName\",\r\n    flex: 0.1,\r\n    cellClassName: \"cellPlanName\",\r\n    type: \"number\",\r\n    minWidth: 60,\r\n    sortable: false,\r\n    checkboxSelection: false,\r\n  },\r\n  {\r\n    field: \"amount\",\r\n    headerName: \"Amount\",\r\n    headerClassName: \"headerAmount\",\r\n    headerAlign: \"center\",\r\n    flex: 0.086,\r\n    cellClassName: \"cellAmount\",\r\n    type: \"number\",\r\n    minWidth: 50,\r\n    sortable: false,\r\n    selectable: false,\r\n  },\r\n\r\n  {\r\n    field: \"Description\",\r\n    headerName: \"Description\",\r\n    headerClassName: \"description\",\r\n    sortable: false,\r\n    cellClassName: \"cellDescription\",\r\n    headerAlign: \"center\",\r\n    flex: 0.15,\r\n    minWidth: 200,\r\n    renderCell: (params) => (\r\n      <span\r\n        style={{\r\n          fontSize: \"1.4rem\",\r\n          whiteSpace: \"normal\",\r\n          wordWrap: \"break-word\",\r\n          lineHeight: \"2.1rem\",\r\n        }}\r\n      >\r\n        {params.getValue(params.id, \"description\") || \"\"}\r\n      </span>\r\n    ),\r\n  },\r\n  {\r\n    field: \"editPlan\",\r\n    headerName: \" \",\r\n    headerClassName: \"headerEditPlan\",\r\n    headerAlign: \"left\",\r\n    cellClassName: \"cellEditPlan\",\r\n    selectable: false,\r\n    flex: 0.1,\r\n    minWidth: 100,\r\n    renderCell: (params) => (\r\n      <SubscriptionDiv>\r\n        <Div>\r\n          <a>\r\n            {\" \"}\r\n            Edit plan\r\n            <svg\r\n              style={{ marginLeft: \".7rem\" }}\r\n              width=\"15\"\r\n              height=\"15\"\r\n              viewBox=\"0 0 15 15\"\r\n              fill=\"none\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <path\r\n                d=\"M10.586 1.58599C10.7705 1.39497 10.9912 1.24261 11.2352 1.13779C11.4792 1.03297 11.7416 0.977801 12.0072 0.975494C12.2728 0.973186 12.5361 1.02379 12.7819 1.12435C13.0277 1.22491 13.251 1.37342 13.4388 1.5612C13.6266 1.74899 13.7751 1.97229 13.8756 2.21809C13.9762 2.46388 14.0268 2.72724 14.0245 2.9928C14.0222 3.25836 13.967 3.5208 13.8622 3.7648C13.7574 4.00881 13.605 4.2295 13.414 4.41399L12.621 5.20699L9.793 2.37899L10.586 1.58599ZM8.379 3.79299L0 12.172L0 15H2.828L11.208 6.62099L8.378 3.79299H8.379Z\"\r\n                fill=\"#3EA584\"\r\n              />\r\n            </svg>\r\n          </a>\r\n        </Div>\r\n      </SubscriptionDiv>\r\n    ),\r\n  },\r\n  {\r\n    field: \"\",\r\n    headerName: \"\",\r\n    headerClassName: \"headerdeletePlan\",\r\n    headerAlign: \"left\",\r\n    cellClassName: \"cellDeletePlan\",\r\n    selectable: false,\r\n    flex: 0.1,\r\n    minWidth: 100,\r\n    renderCell: (params) => (\r\n      <SubscriptionDelete>\r\n        <Div2 style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <a>Delete plan </a>\r\n          <svg\r\n            style={{ marginLeft: \".4rem\" }}\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 20 20\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              fillRule=\"evenodd\"\r\n              clipRule=\"evenodd\"\r\n              d=\"M9 2C8.81434 2.0001 8.63237 2.05188 8.47447 2.14955C8.31658 2.24722 8.18899 2.38692 8.106 2.553L7.382 4H4C3.73478 4 3.48043 4.10536 3.29289 4.29289C3.10536 4.48043 3 4.73478 3 5C3 5.26522 3.10536 5.51957 3.29289 5.70711C3.48043 5.89464 3.73478 6 4 6L4 16C4 16.5304 4.21071 17.0391 4.58579 17.4142C4.96086 17.7893 5.46957 18 6 18H14C14.5304 18 15.0391 17.7893 15.4142 17.4142C15.7893 17.0391 16 16.5304 16 16V6C16.2652 6 16.5196 5.89464 16.7071 5.70711C16.8946 5.51957 17 5.26522 17 5C17 4.73478 16.8946 4.48043 16.7071 4.29289C16.5196 4.10536 16.2652 4 16 4H12.618L11.894 2.553C11.811 2.38692 11.6834 2.24722 11.5255 2.14955C11.3676 2.05188 11.1857 2.0001 11 2H9ZM7 8C7 7.73478 7.10536 7.48043 7.29289 7.29289C7.48043 7.10536 7.73478 7 8 7C8.26522 7 8.51957 7.10536 8.70711 7.29289C8.89464 7.48043 9 7.73478 9 8V14C9 14.2652 8.89464 14.5196 8.70711 14.7071C8.51957 14.8946 8.26522 15 8 15C7.73478 15 7.48043 14.8946 7.29289 14.7071C7.10536 14.5196 7 14.2652 7 14L7 8ZM12 7C11.7348 7 11.4804 7.10536 11.2929 7.29289C11.1054 7.48043 11 7.73478 11 8V14C11 14.2652 11.1054 14.5196 11.2929 14.7071C11.4804 14.8946 11.7348 15 12 15C12.2652 15 12.5196 14.8946 12.7071 14.7071C12.8946 14.5196 13 14.2652 13 14V8C13 7.73478 12.8946 7.48043 12.7071 7.29289C12.5196 7.10536 12.2652 7 12 7Z\"\r\n              fill=\"#ED3237\"\r\n            />\r\n          </svg>\r\n        </Div2>\r\n      </SubscriptionDelete>\r\n    ),\r\n  },\r\n];\r\nexport const FinanceColumns = [\r\n  {\r\n    field: \"entryDate\",\r\n    headerName: \"Entry Date\",\r\n    headerClassName: \"financeEntryHeader\",\r\n    headerAlign: \"center\",\r\n    flex: 0.1,\r\n    cellClassName: \"entryDate\",\r\n    type: \"number\",\r\n    minWidth: 60,\r\n    sortable: false,\r\n  },\r\n  {\r\n    field: \"time\",\r\n    headerName: \"Time\",\r\n    headerClassName: \"referralTime\",\r\n    headerAlign: \"center\",\r\n    flex: 0.1,\r\n    cellClassName: \"referralTime\",\r\n    type: \"number\",\r\n    minWidth: 50,\r\n    sortable: false,\r\n  },\r\n  {\r\n    field: \"fullname\",\r\n    headerName: \"Patient's Name\",\r\n    headerClassName: \"headerPatientName\",\r\n    sortable: false,\r\n    cellClassName: \"PatientName\",\r\n    headerAlign: \"left\",\r\n    flex: 0.15,\r\n    type: \"string\",\r\n    minWidth: 150,\r\n    renderCell: (params) => (\r\n      <span style={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <Avatar alt=\"Display avatar\" src={displayPhoto} style={{ marginRight: \"1rem\" }} />\r\n        {params.getValue(params.id, \"firstName\") || \"\"}\r\n        {params.getValue(params.id, \"lastName\") || \"\"}\r\n      </span>\r\n    ),\r\n  },\r\n  {\r\n    field: \"planName\",\r\n    headerName: \"Subscription plan\",\r\n    headerClassName: \"planName\",\r\n    headerAlign: \"headerPlanName\",\r\n    flex: 0.1,\r\n    cellClassName: \"cellPlanName\",\r\n    type: \"number\",\r\n    minWidth: 60,\r\n    sortable: false,\r\n    checkboxSelection: false,\r\n  },\r\n  {\r\n    field: \"amount\",\r\n    headerName: \"Amount\",\r\n    headerClassName: \"headerAmount\",\r\n    headerAlign: \"center\",\r\n    flex: 0.086,\r\n    cellClassName: \"cellAmount\",\r\n    type: \"string\",\r\n    minWidth: 50,\r\n    sortable: false,\r\n    selectable: false,\r\n  },\r\n]; */\r\n\r\nexport const rows = [\r\n  {\r\n    id: 1,\r\n    lastName: \"Snow\",\r\n    name: \"Heala\",\r\n    entryDate: \"July 17, 2021\",\r\n    firstName: \"Jon\",\r\n    category: \"HCP\",\r\n    email: \"sule@gmail.com\",\r\n    time: \"10:00AM\",\r\n    medical: 123445,\r\n    amount: \"₦ 10,000\",\r\n    bank: \"Kuda MFB\",\r\n    subject: \"Appreciation message to Heala  team\",\r\n    status: \"active\",\r\n    specialization: \"Dentistry\",\r\n    availableTime: \"10:00AM - 3:30PM\",\r\n    planName: \"Plan 1\",\r\n    roleName: \"role 1\",\r\n    description: \"This is the decription regarding this particular plan\",\r\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\r\n    data: [\"create\", \"read\", \"update\", \"delete\"],\r\n    type: \"Nurse\",\r\n    account: 2018785545,\r\n  },\r\n  {\r\n    id: 2,\r\n    lastName: \"Lannister\",\r\n    roleName: \"role 1\",\r\n    entryDate: \"July 17, 2021\",\r\n    firstName: \"Cersei\",\r\n    category: \"User\",\r\n    planName: \"Plan 1\",\r\n    amount: \"₦ 10,000\",\r\n    name: \"Heala\",\r\n    medical: 123445,\r\n    bank: \"Kuda MFB\",\r\n    status: \"active\",\r\n    subject: \"Appreciation message to Heala  team\",\r\n    email: \"sule@gmail.com\",\r\n    description: \"This is the decription regarding this particular plan\",\r\n    availableTime: \"10:00AM - 3:30PM\",\r\n    time: \"10:00AM\",\r\n    specialization: \"Dentistry\",\r\n    permission: [\r\n      \"permission 1\",\r\n      \"permission 2\",\r\n      \"permission3\",\r\n      \"permission4\",\r\n      \"permission5\",\r\n      \"permission6\",\r\n    ],\r\n    data: [\"create\", \"read\", \"update\", \"delete\"],\r\n    type: \"Nurse\",\r\n    account: 2018785545,\r\n  },\r\n  {\r\n    id: 3,\r\n    lastName: \"Lannister\",\r\n    account: 2018785545,\r\n    roleName: \"role 1\",\r\n    bank: \"Kuda MFB\",\r\n    entryDate: \"July 17, 2021\",\r\n    name: \"Heala\",\r\n    firstName: \"Jaime\",\r\n    planName: \"Plan 1\",\r\n    category: \"HCP\",\r\n    amount: \"₦ 10,000\",\r\n    status: \"inactive\",\r\n    medical: 123445,\r\n    email: \"sule@gmail.com\",\r\n    availableTime: \"10:00AM - 3:30PM\",\r\n    time: \"10:00AM\",\r\n    subject: \"Appreciation message to Heala  team\",\r\n    specialization: \"Dentistry\",\r\n    description: \"This is the decription regarding this particular plan\",\r\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\r\n    data: [\"create\", \"read\", \"update\", \"delete\"],\r\n    type: \"Nurse\",\r\n  },\r\n  {\r\n    id: 4,\r\n    lastName: \"Stark\",\r\n    entryDate: \"July 17, 2021\",\r\n    roleName: \"role 1\",\r\n    firstName: \"Arya\",\r\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\r\n    category: \"HCP\",\r\n    amount: \"₦ 10,000\",\r\n    email: \"sule@gmail.com\",\r\n    time: \"10:00AM\",\r\n    planName: \"Plan 1\",\r\n    bank: \"Kuda MFB\",\r\n    availableTime: \"10:00AM - 3:30PM\",\r\n    medical: 123445,\r\n    type: \"Doctor\",\r\n    subject: \"Appreciation message to Heala  team\",\r\n    status: \"active\",\r\n    specialization: \"Dentistry\",\r\n    description: \"This is the decription regarding this particular plan\",\r\n    data: [\"create\", \"read\", \"update\", \"delete\"],\r\n    account: 2018785545,\r\n  },\r\n  {\r\n    id: 5,\r\n    lastName: \"Targaryen\",\r\n    entryDate: \"July 17, 2021\",\r\n    firstName: \"Daenerys\",\r\n    category: \"HSP\",\r\n    medical: 123445,\r\n    status: \"active\",\r\n    bank: \"Kuda MFB\",\r\n    amount: \"₦ 10,000\",\r\n    roleName: \"role 1\",\r\n    account: 2018785545,\r\n    planName: \"Plan 1\",\r\n    email: \"sule@gmail.com\",\r\n    subject: \"Appreciation message to Heala  team\",\r\n    time: \"10:00AM\",\r\n    specialization: \"Dentistry\",\r\n    availableTime: \"10:00AM - 3:30PM\",\r\n    description: \"This is the decription regarding this particular plan\",\r\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\r\n    data: [\"create\", \"read\", \"update\", \"delete\"],\r\n    type: \"Doctor\",\r\n  },\r\n  {\r\n    id: 6,\r\n    lastName: \"Melisandre\",\r\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\r\n    entryDate: \"July 17, 2021\",\r\n    roleName: \"role 1\",\r\n    data: [\"create\", \"read\", \"update\", \"delete\"],\r\n    firstName: null,\r\n    status: \"active\",\r\n    medical: 123445,\r\n    account: 2018785545,\r\n    bank: \"Kuda MFB\",\r\n    subject: \"Appreciation message to Heala  team\",\r\n    category: \"User\",\r\n    amount: \"₦ 10,000\",\r\n    email: \"sule@gmail.com\",\r\n    time: \"10:00AM\",\r\n    planName: \"Plan 1\",\r\n    specialization: \"Dentistry\",\r\n    description: \"This is the decription regarding this particular plan\",\r\n    type: \"Nurse\",\r\n  },\r\n  {\r\n    id: 7,\r\n    lastName: \"Clifford\",\r\n    entryDate: \"July 17, 2021\",\r\n    medical: 123445,\r\n    firstName: \"Ferrara\",\r\n    roleName: \"role 1\",\r\n    subject: \"Appreciation message to Heala  team\",\r\n    category: \"HCP\",\r\n    status: \"active\",\r\n    planName: \"Plan 1\",\r\n    amount: \"₦ 10,000\",\r\n    bank: \"Kuda MFB\",\r\n    email: \"sule@gmail.com\",\r\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\r\n    data: [\"create\", \"read\", \"update\", \"delete\"],\r\n    time: \"10:00AM\",\r\n    specialization: \"Dentistry\",\r\n    availableTime: \"10:00AM - 3:30PM\",\r\n    description: \"This is the decription regarding this particular plan\",\r\n    type: \"Nurse\",\r\n    account: 2018785545,\r\n  },\r\n  {\r\n    id: 9,\r\n    lastName: \"Roxie\",\r\n    entryDate: \"July 17, 2021\",\r\n    roleName: \"role 1\",\r\n    firstName: \"Harvey\",\r\n    category: \"HCP\",\r\n    data: [\"create\", \"read\", \"update\", \"delete\"],\r\n    medical: 123445,\r\n    subject: \"Appreciation message to Heala  team\",\r\n    status: \"active\",\r\n    planName: \"Plan 1\",\r\n    bank: \"Kuda MFB\",\r\n    amount: \"₦ 10,000\",\r\n    email: \"sule@gmail.com\",\r\n    time: \"10:00AM\",\r\n    specialization: \"Dentistry\",\r\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\r\n    availableTime: \"10:00AM - 3:30PM\",\r\n    description: \"This is the decription regarding this particular plan\",\r\n    type: \"Nurse\",\r\n    account: 2018785545,\r\n  },\r\n];\r\nconst ReferralDiv = Styled.div`\r\n& div{\r\n  width: 6.2rem !important;\r\n  padding:0;\r\n  margin-right:0 !important;\r\n  padding-left: 1rem !important;\r\n  background:#ECF6F3;\r\n  a{\r\n  width: 4.2rem!important;\r\n  font-size:1.4rem;\r\n  color:#49AA8B;\r\n  line-Height:2.1rem;\r\n  height:2.2rem;\r\n  }\r\n}`;\r\n\r\nconst SubscriptionDiv = Styled.div`\r\n& div{\r\n  width: 10.1rem !important;\r\n  padding: .8rem 1rem !important;\r\n  margin-right:0 !important;\r\n  padding-left: 1rem !important;\r\n  border-radius: 2rem !important;\r\n  background: #ECF6F3;\r\n  height:3.8rem;\r\n  \r\n  a{\r\n    font-weight:500;\r\n  font-size:1.4rem;\r\n  color: #3EA584;\r\n  line-Height:2.1rem;\r\n  // height:2.2rem;\r\n  }\r\n}\r\n`;\r\nconst SubscriptionDelete = Styled.div`\r\n& div{\r\n  width: 11.8rem !important;\r\n  padding: .8rem 1rem !important;\r\n  border-color:#FEF8F7;\r\n  border-radius: 2rem !important;\r\n  background: #FEF8F7;\r\n  height:3.8rem;\r\n\r\n\r\n  \r\n  a{\r\n  font-weight:500;\r\n  font-size:1.4rem;\r\n  color: #ED3237;\r\n  height:2.2rem;\r\n  font-family: Circular Std;\r\n  font-style: normal;\r\n  letter-spacing: 0px;\r\n  text-align: center;\r\n  width:10.1rem;\r\n  margin-right:0\r\n  }\r\n}\r\n`;\r\n\r\nconst Div2 = Styled.div`\r\nwidth: 11rem;\r\nheight: 3rem;\r\nmargin: auto 0;\r\nborder-radius: 2rem;\r\nborder: 1px solid #F2F2F2;\r\ndisplay: grid;\r\nplace-content: center;\r\ncolor:#757886;\r\n   & a{\r\n    text-decoration:none;\r\n    font-size: 1.4rem;\r\n    width:6.6rem;\r\n    height:2.2rem\r\n    margin:0;\r\n    line-Height:2.1rem;\r\n    color:inherit;\r\n    margin-right:1.25rem\r\n   } \r\n   &:hover{\r\n     cursor:pointer\r\n   }\r\n`;\r\nconst Div = Styled.div`\r\nwidth: 17.9rem;\r\nheight: 3rem;\r\nmargin: auto 0;\r\nborder-radius: 2rem;\r\nborder: 1px solid #F2F2F2;\r\ndisplay: grid;\r\nplace-content: center;\r\n   & a{\r\n    padding: .4rem 1rem;\r\n    \r\n   } \r\n   &:hover{\r\n     cursor:pointer\r\n   }\r\n`;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\LabelIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\EmailIcon.js",[],["1418"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\HMOIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\PartnersIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\PatientsIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\DoctorsIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\DashboardIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\VerifiedIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\MessagesIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\Filters\\DoctorsFilters.js",["1419","1420","1421","1422"],"import React, { useEffect, useState } from \"react\";\r\nimport ProPtypes from \"prop-types\";\r\nimport { Grid } from \"@mui/material\";\r\n\r\nimport Filter from \".\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport {\r\n  cadreOptions,\r\n  defaultPageInfo,\r\n  doctorsProfileDefaultFilterByValues,\r\n  genderType,\r\n  specializationOptions,\r\n  statusFilterBy,\r\n} from \"helpers/mockData\";\r\nimport { deleteVar, filterData } from \"helpers/filterHelperFunctions\";\r\nimport { getProviders } from \"components/graphQL/useQuery\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\n\r\nconst DoctorFilters = ({ setProfiles, setPageInfo, queryParams }) => {\r\n  const { displayAlert } = useAlert();\r\n  const [statusFilterValue, setStatusFilterValue] = useState(\"\");\r\n  const [providers, setProviders] = useState([]);\r\n  const [profileFilterValues, setProfileFilterValues] = useState(\r\n    doctorsProfileDefaultFilterByValues\r\n  ); // gender cadre specialization providerId\r\n  const [fetchProviders] = useLazyQuery(getProviders);\r\n  const { doctorsParams, doctorsByStatusParams } = queryParams;\r\n  const { fetchDoctors, loading, refetch, variables } = doctorsParams;\r\n  const {\r\n    byStatusLoading,\r\n    byStatusVaribles,\r\n    byStatusRefetch,\r\n    fetchDoctorsByStatus,\r\n  } = doctorsByStatusParams;\r\n\r\n  useEffect(() => {\r\n    fetchProviders()\r\n      .then(({ data }) => {\r\n        if (!data) throw Error(\"Couldn'ProPtypes get list of providers\");\r\n        const providersList = (data?.getProviders?.provider || []).map(\r\n          (provider) => {\r\n            const { _id, name } = provider;\r\n            return { key: name, value: _id };\r\n          }\r\n        );\r\n        setProviders(providersList);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const onFilterProfileChange = async (name, value) => {\r\n    try {\r\n      setStatusFilterValue(\"\");\r\n      deleteVar(variables);\r\n      const filterValues = { ...profileFilterValues, [name]: value };\r\n      setProfileFilterValues(filterValues);\r\n      filterData(filterValues, {\r\n        fetchData: fetchDoctors,\r\n        refetch,\r\n        variables,\r\n      })\r\n        .then((data) => {\r\n          setPageInfo(data.doctorProfiles.pageInfo || []);\r\n          setProfiles(data.doctorProfiles.profile || defaultPageInfo);\r\n        })\r\n        .catch(() => {\r\n          refresh(setProfileFilterValues, doctorsProfileDefaultFilterByValues);\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setProfileFilterValues, doctorsProfileDefaultFilterByValues);\r\n    }\r\n  };\r\n\r\n  const onFilterStatusChange = async (value) => {\r\n    try {\r\n      setProfileFilterValues(doctorsProfileDefaultFilterByValues);\r\n      deleteVar(byStatusVaribles);\r\n      setStatusFilterValue(value);\r\n      const filterVariables = { status: value };\r\n\r\n      filterData(filterVariables, {\r\n        fetchData: fetchDoctorsByStatus,\r\n        refetch: byStatusRefetch,\r\n        variables: byStatusVaribles,\r\n      })\r\n        .then((data) => {\r\n          setProfiles(data?.doctorProfilesByStatus?.profile || []);\r\n          setPageInfo(data?.doctorProfilesByStatus?.pageInfo || {});\r\n        })\r\n        .catch(() => {\r\n          refresh(setStatusFilterValue, \"\");\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setStatusFilterValue, \"\");\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\r\n    setFilterValue(defaultVal);\r\n\r\n    deleteVar(variables);\r\n\r\n    refetch()\r\n      .then(({ data }) => {\r\n        setProfiles(data?.profiles?.data || []);\r\n        setPageInfo(data?.profiles?.pageInfo || {});\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", \"Failed to get patients data, Try again\");\r\n      });\r\n  };\r\n  return (\r\n    <Grid item container flexWrap=\"wrap\" spacing={4}>\r\n      {/* FILTER BY PROFILE */}\r\n      <Grid item>\r\n        <Grid container flexWrap=\"wrap\" spacing={2} alignItems=\"flex-end\">\r\n          {[\r\n            {\r\n              label: \"\",\r\n              onHandleChange: (e) =>\r\n                onFilterProfileChange(\"gender\", e?.target?.value),\r\n              onClickClearBtn: () => onFilterProfileChange(\"gender\", \"\"),\r\n              options: [{ key: \"Gender\", value: \"\" }, ...genderType],\r\n              name: \"gender\",\r\n              placeholder: \"By gender\",\r\n              value: profileFilterValues.gender,\r\n              hasClearBtn: true,\r\n              disavle: loading || byStatusLoading,\r\n            },\r\n            {\r\n              label: \"\",\r\n              onHandleChange: (e) =>\r\n                onFilterProfileChange(\"cadre\", e?.target?.value),\r\n              onClickClearBtn: () => onFilterProfileChange(\"cadre\", \"\"),\r\n              options: [{ key: \"Cadre\", value: \"\" }, ...cadreOptions],\r\n              name: \"cadre\",\r\n              placeholder: \"By cadre\",\r\n              value: profileFilterValues.cadre,\r\n              hasClearBtn: true,\r\n              disavle: loading || byStatusLoading,\r\n            },\r\n            {\r\n              label: \"\",\r\n              onHandleChange: (e) =>\r\n                onFilterProfileChange(\"specialization\", e?.target?.value),\r\n              onClickClearBtn: () =>\r\n                onFilterProfileChange(\"specialization\", \"\"),\r\n              options: [\r\n                { key: \"Specialization\", value: \"\" },\r\n                ...specializationOptions,\r\n              ],\r\n              name: \"specialization\",\r\n              placeholder: \"By specialization\",\r\n              value: profileFilterValues.specialization,\r\n              hasClearBtn: true,\r\n              disavle: loading || byStatusLoading,\r\n            },\r\n            {\r\n              label: \"\",\r\n              onHandleChange: (e) =>\r\n                onFilterProfileChange(\"providerId\", e?.target?.value),\r\n              onClickClearBtn: () => onFilterProfileChange(\"providerId\", \"\"),\r\n              options: [{ key: \"Provider\", value: \"\" }, ...providers],\r\n              name: \"providerId\",\r\n              placeholder: \"By provider\",\r\n              value: profileFilterValues.providerId,\r\n              hasClearBtn: true,\r\n              disavle: loading || byStatusLoading,\r\n            },\r\n          ].map((filter, idx) => {\r\n            return (\r\n              <Grid item key={`${idx}-${filter.name}`}>\r\n                <Filter\r\n                  label={filter.label}\r\n                  onHandleChange={(e) => filter.onHandleChange(e)}\r\n                  onClickClearBtn={() => filter.onClickClearBtn()}\r\n                  options={filter.options}\r\n                  name={filter.name}\r\n                  placeholder={filter.placeholder}\r\n                  value={filter.value}\r\n                  hasClearBtn={true}\r\n                  disable={loading || byStatusLoading}\r\n                />\r\n              </Grid>\r\n            );\r\n          })}\r\n\r\n          {/* FILTER BY STATUS */}\r\n          <Grid item>\r\n            <Filter\r\n              label=\"\"\r\n              onHandleChange={(e) => onFilterStatusChange(e?.target?.value)}\r\n              onClickClearBtn={() => onFilterStatusChange(\"\")}\r\n              options={[{ key: \"Status\", value: \"\" }, ...statusFilterBy]}\r\n              name=\"status\"\r\n              placeholder=\"None\"\r\n              value={statusFilterValue}\r\n              hasClearBtn={true}\r\n              disable={loading || byStatusLoading}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nDoctorFilters.propTypes = {\r\n  setProfiles: ProPtypes.func,\r\n  setPageInfo: ProPtypes.func,\r\n  queryParams: ProPtypes.object,\r\n};\r\n\r\nexport default DoctorFilters;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\UserTypeModal.js",["1423"],"import React, { useEffect } from \"react\";\r\nimport CustomButton from \"components/Utilities/CustomButton\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { Grid } from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { getUserTypes, getUserType } from \"components/graphQL/useQuery\";\r\nimport { createUserType, editUserType } from \"components/graphQL/Mutation\";\r\nimport * as Yup from \"yup\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\nexport const UserTypeModal = ({\r\n  handleDialogClose,\r\n  type,\r\n  editId,\r\n  singleData,\r\n  setSingleData,\r\n  initialValues,\r\n}) => {\r\n  const theme = useTheme();\r\n\r\n  const [createType] = useMutation(createUserType, {\r\n    refetchQueries: [{ query: getUserTypes }],\r\n  });\r\n  const [editType] = useMutation(editUserType, {\r\n    refetchQueries: [{ query: getUserTypes }],\r\n  });\r\n\r\n  const single = useQuery(getUserType, {\r\n    variables: {\r\n      id: editId,\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (single.data) {\r\n      setSingleData({\r\n        name: single.data.getUserType.name,\r\n        image: single.data.getUserType.icon,\r\n        id: single.data.getUserType._id,\r\n        description: single.data.getUserType.description,\r\n      });\r\n    }\r\n  }, [single.data, setSingleData]);\r\n  //   const [updatePlan] = useMutation(UPDATE_PLAN);\r\n\r\n  //   const single = useQuery(getSinglePlan, {\r\n  //     variables: {\r\n  //       id: editId,\r\n  //     },\r\n  //   });\r\n  const validationSchema = Yup.object({\r\n    name: Yup.string(\"Enter your Name\").trim().required(\"Name is required\"),\r\n    image: Yup.string(\"Upload a single Image\").required(\"Image is required\"),\r\n  });\r\n\r\n  const onSubmit = async (values, onSubmitProps) => {\r\n    const { name, image } = values;\r\n    if (type == \"add\") {\r\n      try {\r\n        await createType({ variables: { name, icon: image } });\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n    if (type === \"edit\") {\r\n      const { description, name, image, id } = values;\r\n      await editType({\r\n        variables: {\r\n          id,\r\n          name,\r\n          description,\r\n          icon: image,\r\n        },\r\n      });\r\n    }\r\n\r\n    onSubmitProps.resetForm();\r\n    handleDialogClose();\r\n  };\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n  return (\r\n    <Formik\r\n      initialValues={type === \"edit\" ? singleData : initialValues}\r\n      enableReinitialize\r\n      onSubmit={onSubmit}\r\n      validateOnBlur={false}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n    >\r\n      {({ isSubmitting, dirty, isValid, setFieldValue }) => {\r\n        return (\r\n          <Form style={{ marginTop: \"3rem\" }}>\r\n            <Grid item container direction=\"column\" gap={1}>\r\n              <Grid item container rowSpacing={3}>\r\n                <Grid item container>\r\n                  <FormikControl\r\n                    control=\"textarea\"\r\n                    name=\"description\"\r\n                    label=\"Description\"\r\n                    placeholder=\"Description...\"\r\n                  />\r\n                </Grid>\r\n                <Grid item md display=\"flex\" alignItems=\"center\">\r\n                  <Grid item container md>\r\n                    <FormikControl\r\n                      control=\"file\"\r\n                      name=\"image\"\r\n                      label=\"Upload Your Logo\"\r\n                      setFieldValue={setFieldValue}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <CustomButton\r\n                    title={type === \"edit\" ? \"Save UserTypes\" : \"Add UserTypes\"}\r\n                    width=\"100%\"\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                    type={buttonType}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nUserTypeModal.propTypes = {\r\n  handleDialogClose: PropTypes.func,\r\n  setAlert: PropTypes.func,\r\n  editId: PropTypes.string,\r\n  type: PropTypes.string,\r\n  edit: PropTypes.bool,\r\n  initialValues: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  validationSchema: PropTypes.object,\r\n  singleData: PropTypes.object,\r\n  setSingleData: PropTypes.func,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\Success.js",["1424","1425","1426"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Typography, Grid } from \"@mui/material\";\r\nimport { Modals, CustomButton } from \"components/Utilities\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport CheckCircleSharpIcon from \"@mui/icons-material/CheckCircleSharp\";\r\nimport CancelIcon from \"@mui/icons-material/Cancel\";\r\n\r\nconst Success = ({\r\n  open,\r\n  handleDialogClose,\r\n  title,\r\n  confirmationMsg,\r\n  btnValue,\r\n  onConfirm,\r\n  onCancel,\r\n  type,\r\n  ...rest\r\n}) => {\r\n  const theme = useTheme();\r\n\r\n  const disableButton = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  return (\r\n    <Modals\r\n      isOpen={open}\r\n      title=\"\"\r\n      isClose\r\n      rowSpacing={5}\r\n      handleClose={handleDialogClose}\r\n    >\r\n      <Grid item container direction=\"column\" rowSpacing={5} marginTop={2}>\r\n        <Grid item container justifyContent=\"center\">\r\n          {type !== \"fail\" ? (\r\n            <CheckCircleSharpIcon sx={{ fontSize: \"15rem\", color: \"green\" }} />\r\n          ) : (\r\n            <CancelIcon sx={{ fontSize: \"15rem\", color: \"red\" }} />\r\n          )}\r\n        </Grid>\r\n        <Grid item container justifyContent=\"center\">\r\n          <Typography variant=\"h2\">{title}</Typography>\r\n        </Grid>\r\n        <Grid item container justifyContent=\"center\">\r\n          <Typography variant=\"body1\">{confirmationMsg}</Typography>\r\n        </Grid>\r\n        <Grid item container marginTop={4}>\r\n          <CustomButton\r\n            title={btnValue}\r\n            type={disableButton}\r\n            width=\"100%\"\r\n            onClick={handleDialogClose}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Modals>\r\n  );\r\n};\r\n\r\nSuccess.propTypes = {\r\n  open: PropTypes.bool,\r\n  handleDialogClose: PropTypes.func,\r\n  title: PropTypes.string,\r\n  confirmationMsg: PropTypes.string,\r\n  btnValue: PropTypes.string,\r\n  type: PropTypes.string,\r\n  onConfirm: PropTypes.func,\r\n  onCancel: PropTypes.func,\r\n};\r\n\r\nexport default Success;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\breadcrumb.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SubscriptionIncome.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\TestList.js",["1427"],"import React, { useState, useEffect } from \"react\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\n\r\nimport useAlert from \"hooks/useAlert\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { TestListRow } from \"components/Rows/TestListRow\";\r\nimport ConfirmModal from \"components/modals/ConfirmModal\";\r\nimport { AddTestForm } from \"components/Forms/AddTestForm\";\r\nimport EnhancedTable from \"components/layouts/EnhancedTable\";\r\nimport { EditTestForm } from \"components/Forms/EditTestForm\";\r\nimport ConfirmDelete from \"components/modals/DeleteOrDisable\";\r\nimport UploadListModal from \"components/modals/UploadListModal\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport { deleteItem, uploadFile } from \"helpers/filterHelperFunctions\";\r\nimport { testTableHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { DELETE_TEST, getListOfLabTests } from \"components/graphQL/useQuery\";\r\nimport { uploadTests } from \"components/graphQL/Mutation\";\r\n\r\nconst TestList = () => {\r\n  const theme = useTheme();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [list, setList] = useState([]);\r\n  const [delete_test] = useLazyQuery(DELETE_TEST);\r\n  const { displayAlert, getErrorMsg } = useAlert();\r\n  const [uploadTestFile] = useMutation(uploadTests);\r\n  const [editData, setEditData] = React.useState(null);\r\n  const [isDeleting, setIsDeleting] = React.useState({});\r\n  const [addTestModal, setAddTestModal] = React.useState(false);\r\n  const [confirmModal, setConfirmModal] = React.useState(false);\r\n  const [testToDelete, setTestToDelete] = React.useState(null);\r\n  const [editTestModal, setEditTestModal] = React.useState(false);\r\n  const [uploadListModal, setUploadListModal] = React.useState(false);\r\n  const [confirmDeleteModal, setConfirmDeleteModal] = React.useState(false);\r\n  const [fetchLabTestList, { loading, error, data, refetch }] =\r\n    useLazyQuery(getListOfLabTests);\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchLabTestList();\r\n  }, [fetchLabTestList]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setList(data?.getDiagnosticLabTests?.data);\r\n    }\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      (data?.getDiagnosticLabTests?.data || []).map((test) => {\r\n        const newIsDeleting = isDeleting;\r\n        setIsDeleting({ [test?._id]: false, ...newIsDeleting });\r\n        return null;\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [data]);\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        height=\"100%\"\r\n      >\r\n        <Grid item container justifyContent=\"flex-end\">\r\n          {/* === ADD BUTTONS === */}\r\n          <Grid item>\r\n            <Grid container>\r\n              <CustomButton\r\n                endIcon={<AddIcon />}\r\n                title=\"Add Test\"\r\n                type={buttonType}\r\n                onClick={() => setAddTestModal(true)}\r\n                sx={{ marginRight: \"1rem\" }}\r\n              />\r\n              <CustomButton\r\n                endIcon={<AddIcon />}\r\n                title=\"Upload list\"\r\n                type={buttonType}\r\n                onClick={() => setConfirmModal(true)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <TableLayout>\r\n          {error ? (\r\n            <NoData error={error} />\r\n          ) : loading ? (\r\n            <Loader />\r\n          ) : !list ? (\r\n            <EmptyTable\r\n              headCells={testTableHeadCells}\r\n              paginationLabel=\"Test per page\"\r\n            />\r\n          ) : list.length > 0 ? (\r\n            /* ================= TESTS TABLE ================= */\r\n            <Grid item container height=\"100%\" direction=\"column\">\r\n              <EnhancedTable\r\n                headCells={testTableHeadCells}\r\n                rows={list}\r\n                hasCheckbox={false}\r\n                fetchData={fetchLabTestList}\r\n                hasPagination={false}\r\n              >\r\n                {list.map((row, index) => {\r\n                  const { _id } = row;\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  return (\r\n                    <TestListRow\r\n                      key={_id}\r\n                      data={row}\r\n                      labelId={labelId}\r\n                      setEditData={setEditData}\r\n                      isDeleting={isDeleting[_id]}\r\n                      setTestIdToDelete={setTestToDelete}\r\n                      openEditModal={() => setEditTestModal(true)}\r\n                      openConfirmModal={() => setConfirmDeleteModal(true)}\r\n                    />\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={testTableHeadCells}\r\n              paginationLabel=\"Patients per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n\r\n        {/* ==== ADD TEST MODAL ==== */}\r\n        <Modals\r\n          isOpen={addTestModal}\r\n          title=\"Add Test\"\r\n          rowSpacing={5}\r\n          height=\"auto\"\r\n          handleClose={() => setAddTestModal(false)}\r\n        >\r\n          <AddTestForm\r\n            onSuccess={() => {\r\n              setAddTestModal(false);\r\n              refetch();\r\n            }}\r\n          />\r\n        </Modals>\r\n\r\n        {/* ==== EDIT TEST MODAL ==== */}\r\n        <Modals\r\n          isOpen={editTestModal}\r\n          title=\"Edit Test\"\r\n          rowSpacing={5}\r\n          height=\"auto\"\r\n          handleClose={() => setEditTestModal(false)}\r\n        >\r\n          <EditTestForm\r\n            data={editData}\r\n            onSuccess={() => {\r\n              setEditTestModal(false);\r\n              refetch();\r\n            }}\r\n          />\r\n        </Modals>\r\n\r\n        {/* ======== CONFIRM UPLOAD TEST MODAL ========= */}\r\n        <ConfirmModal\r\n          open={confirmModal}\r\n          setOpen={setConfirmModal}\r\n          title=\"Confirm Upload Tests\"\r\n          confirmationMsg=\"Uploading a new test JSON file will overwrite the current file.\"\r\n          onConfirm={() => {\r\n            setUploadListModal(false);\r\n            setUploadListModal(true);\r\n          }}\r\n          onCancel={() => {\r\n            setUploadListModal(false);\r\n          }}\r\n        />\r\n\r\n        {/*  ======= CONFIRM DELETE ======== */}\r\n        <ConfirmDelete\r\n          open={confirmDeleteModal}\r\n          setOpen={setConfirmDeleteModal}\r\n          title=\"Delete Test\"\r\n          btnValue=\"delete\"\r\n          onConfirm={() => {\r\n            deleteItem(\r\n              delete_test,\r\n              testToDelete,\r\n              setTestToDelete,\r\n              refetch,\r\n              Typography,\r\n              enqueueSnackbar,\r\n              setIsDeleting,\r\n              isDeleting\r\n            );\r\n            setUploadListModal(false);\r\n          }}\r\n          confirmationMsg=\"Are you sure you want to delete\"\r\n          onCancel={() => {\r\n            setUploadListModal(false);\r\n          }}\r\n        />\r\n\r\n        {/* ==== UPLOAD TEST MODAL ==== */}\r\n        <UploadListModal\r\n          isOpen={uploadListModal}\r\n          setIsOpen={setUploadListModal}\r\n          handleSubmit={async (values) => {\r\n            const throwError = () =>\r\n              displayAlert(\r\n                \"error\",\r\n                \"Something went wrong while uploading file.\"\r\n              );\r\n            try {\r\n              const { testFile: file } = values;\r\n              const fileUrl = await uploadFile(file);\r\n\r\n              if (typeof fileUrl !== \"string\") {\r\n                throwError();\r\n                return;\r\n              }\r\n\r\n              const { data } = await uploadTestFile({\r\n                variables: {\r\n                  fileUrl: fileUrl,\r\n                },\r\n              });\r\n\r\n              if (!data) {\r\n                throwError();\r\n                return;\r\n              }\r\n\r\n              const testAdded =\r\n                data?.uploadDiagnosticLabTests?.result?.totalInserted;\r\n              displayAlert(\"success\", `${testAdded && testAdded} Tests Added.`);\r\n              setUploadListModal(false);\r\n            } catch (error) {\r\n              console.error(\"Error from onSubmit Test JSON file\", error);\r\n              const errMsg = getErrorMsg(error);\r\n              displayAlert(\"error\", errMsg);\r\n            }\r\n          }}\r\n        />\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TestList;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\routes\\PrivateRoute.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SingleHMO.js",["1428","1429","1430"],"import React, { useEffect, useState } from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { useTheme } from \"@mui/styles\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport MainModal from \"components/modals/MainModal\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport ConfirmModal from \"components/modals/ConfirmModal\";\r\nimport { getEnrolles } from \"components/graphQL/useQuery\";\r\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport { uploadFile } from \"helpers/filterHelperFunctions\";\r\nimport SingleHMOTable from \"components/Tables/SingleHMOTable\";\r\nimport { uploadHMOEnrollees } from \"components/graphQL/Mutation\";\r\nimport AddEditHMOEnrolleeModal from \"components/modals/AddEditHMOEnrolleeModal\";\r\nimport { UploadEnrolleeListForm } from \"components/Forms/UploadEnrolleeListForm\";\r\n\r\nconst SingleHMO = () => {\r\n  const theme = useTheme();\r\n  const { ids: id } = useParams();\r\n  const { displayAlert, getErrorMsg } = useAlert();\r\n  const [hmoEnrollees, setHmoEnrollees] = useState([]);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [uploadEnrollees] = useMutation(uploadHMOEnrollees);\r\n  const [uploadListModal, setUploadListModal] = useState(false);\r\n  const [addEnrolleeModal, setAddEnrolleeModal] = useState(false);\r\n  const [confirmUploadModal, setConfirmUploadModal] = useState(false);\r\n  const [\r\n    fetchEnrollees,\r\n    { error, loading, refetch, variables, networkStatus },\r\n  ] = useLazyQuery(getEnrolles);\r\n\r\n  const enrolleesParams = {\r\n    hmoEnrollees,\r\n    setHmoEnrollees,\r\n    pageInfo,\r\n    setPageInfo,\r\n    fetchEnrollees,\r\n    error,\r\n    loading,\r\n    refetch,\r\n    variables,\r\n    networkStatus,\r\n  };\r\n\r\n  const fetchData = (fetch) => {\r\n    fetch({\r\n      variables: {\r\n        providerId: id,\r\n        first: 10,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        setHmoEnrollees(data?.getEnrollees?.data || []);\r\n        setPageInfo(data?.getEnrollees?.pageInfo || {});\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData(fetchEnrollees);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [fetchEnrollees, id]);\r\n\r\n  const darkButton = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  const lightButton = {\r\n    background: \"#fff\",\r\n\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid\r\n        container\r\n        spacing={3}\r\n        justifyContent=\"end\"\r\n        marginBottom=\"2rem\"\r\n        marginTop=\"2rem\"\r\n      >\r\n        <Grid item>\r\n          <CustomButton\r\n            startIcon={<AddIcon />}\r\n            title=\"Upload List\"\r\n            type={lightButton}\r\n            textColor=\"#2D2F39\"\r\n            textColorOnHover=\"#ffffff\"\r\n            onClick={() => setConfirmUploadModal(true)}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <CustomButton\r\n            startIcon={<AddIcon />}\r\n            title=\"Add  Enrollee\"\r\n            type={darkButton}\r\n            onClick={() => setAddEnrolleeModal(true)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid>\r\n        <SingleHMOTable enrolleesParams={enrolleesParams} />\r\n      </Grid>\r\n\r\n      {/* MODALS */}\r\n      <Grid>\r\n        {/* ADD ENROLLEE MODAL */}\r\n        <AddEditHMOEnrolleeModal\r\n          isOpen={addEnrolleeModal}\r\n          setIsOpen={setAddEnrolleeModal}\r\n          refetchData={() =>\r\n            refetch({\r\n              variables: {\r\n                providerId: id,\r\n                first: 10,\r\n              },\r\n            })\r\n              .then(({ data }) => {\r\n                setHmoEnrollees(data?.getEnrollees?.data || []);\r\n                setPageInfo(data?.getEnrollees?.pageInfo || {});\r\n              })\r\n              .catch((error) => {\r\n                console.error(error);\r\n              })\r\n          }\r\n        />\r\n\r\n        {/* ======== CONFIRM UPLOAD ENROLLEE MODAL ========= */}\r\n        <ConfirmModal\r\n          open={confirmUploadModal}\r\n          setOpen={setConfirmUploadModal}\r\n          title=\"Confirm Upload Enrollee list\"\r\n          confirmationMsg=\"Uploading a new Enrollee JSON file will overwrite the current file.\"\r\n          onConfirm={() => {\r\n            setConfirmUploadModal(false);\r\n            setUploadListModal(true);\r\n          }}\r\n          onCancel={() => {\r\n            setConfirmUploadModal(false);\r\n          }}\r\n        />\r\n\r\n        {/* UPLOAD LIST MODAL */}\r\n        <MainModal isOpen={uploadListModal} setIsOpen={setUploadListModal}>\r\n          <UploadEnrolleeListForm\r\n            onSubmit={async (values) => {\r\n              const throwError = () =>\r\n                displayAlert(\r\n                  \"error\",\r\n                  \"Something went wrong while uploading file.\"\r\n                );\r\n              try {\r\n                const { file } = values;\r\n                const fileUrl = await uploadFile(file);\r\n\r\n                if (typeof fileUrl !== \"string\") {\r\n                  throwError();\r\n                  return;\r\n                }\r\n\r\n                const { data } = await uploadEnrollees({\r\n                  variables: {\r\n                    planId: values?.planId,\r\n                    fileUrl: fileUrl,\r\n                    providerId: id,\r\n                  },\r\n                });\r\n\r\n                if (!data) {\r\n                  throwError();\r\n                  return;\r\n                }\r\n\r\n                const enrolleesAdded =\r\n                  data?.uploadEnrollees?.result?.totalInserted;\r\n\r\n                displayAlert(\r\n                  \"success\",\r\n                  `${enrolleesAdded && enrolleesAdded} Tests Added.`\r\n                );\r\n                fetchData(refetch);\r\n                setUploadListModal(false);\r\n              } catch (error) {\r\n                console.error(\"Error from onSubmit Test JSON file\", error);\r\n                const errMsg = getErrorMsg(error);\r\n                displayAlert(\"error\", errMsg);\r\n              }\r\n            }}\r\n          />\r\n        </MainModal>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SingleHMO;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ListManagment.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Hmo.js",["1431","1432","1433"],"import React, { useEffect, useState } from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { addHMOInitialValues } from \"helpers/mockData\";\r\nimport { getProviders } from \"components/graphQL/useQuery\";\r\nimport DeletePartner from \"components/modals/DeleteOrDisable\";\r\nimport AddEditHMOModal from \"components/modals/AddEditHMOModal\";\r\nimport InfoCard, { AddHmoCard } from \"components/cards/InfoCard\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { deletProvider } from \"components/graphQL/Mutation\";\r\n\r\nconst Hmo = () => {\r\n  const { displayAlert, getErrorMsg } = useAlert();\r\n  const [hmos, setHmos] = useState([]);\r\n  const [deleteHMO] = useMutation(deletProvider);\r\n  const [addModal, setAddModal] = useState(false);\r\n  const [editModal, setEditModal] = useState(false);\r\n  const [editHMOData, setEditHMOData] = useState({});\r\n  const [deleteModal, setDeleteModal] = useState(false);\r\n  const [hmoIdToDelete, setHmoIdToDelete] = useState(null);\r\n  const [fetchAllHMO, { error, loading, refetch }] = useLazyQuery(\r\n    getProviders,\r\n    {\r\n      variables: { userTypeId: \"61ed2b68e6091400135e3dba\" },\r\n    }\r\n  );\r\n\r\n  const refetchData = () => {\r\n    refetch()\r\n      .then(({ data }) => {\r\n        setHmos(data?.getProviders?.provider);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchAllHMO()\r\n      .then(({ data }) => {\r\n        setHmos(data?.getProviders?.provider);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, [fetchAllHMO]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid>\r\n      <Grid container spacing={2} flexWrap=\"wrap\">\r\n        {hmos.map((hmo, idx) => {\r\n          const {\r\n            _id,\r\n            name,\r\n            icon,\r\n            address,\r\n            phone,\r\n            email,\r\n            iconAlt,\r\n            userTypeId,\r\n          } = hmo;\r\n\r\n          const editInitialValues = {\r\n            id: _id,\r\n            name: name,\r\n            icon: icon,\r\n            address: address || \"\",\r\n            phone: phone || \"\",\r\n            email: email || \"\",\r\n            iconAlt: iconAlt || \"\",\r\n            userTypeId: userTypeId || \"61ed2b68e6091400135e3dba\",\r\n          };\r\n          return (\r\n            <Grid key={idx} item>\r\n              <InfoCard\r\n                imgUrl={hmo?.icon}\r\n                imgAlt={hmo?.name}\r\n                linkTo={`hmo/${hmo?._id}`}\r\n                subTitle={\"15 Enrollees\"}\r\n                title={hmo?.name}\r\n                onClickEdit={() => {\r\n                  setEditHMOData(editInitialValues);\r\n                  setEditModal(true);\r\n                }}\r\n                onClickDelete={() => {\r\n                  setHmoIdToDelete(_id);\r\n                  setDeleteModal(true);\r\n                }}\r\n              />\r\n            </Grid>\r\n          );\r\n        })}\r\n        <Grid item>\r\n          <button\r\n            sx={{\r\n              cursor: \"pointer\",\r\n              border: \"none\",\r\n              background: \"transparent\",\r\n            }}\r\n            onClick={() => setAddModal(true)}\r\n          >\r\n            <AddHmoCard />\r\n          </button>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid>\r\n        {/* CONFIRM DELETE MODAL */}\r\n        <DeletePartner\r\n          open={deleteModal}\r\n          setOpen={setDeleteModal}\r\n          title=\"Delete HMO\"\r\n          btnValue=\"delete\"\r\n          onConfirm={async () => {\r\n            setDeleteModal(false);\r\n            deleteHMO({\r\n              variables: {\r\n                id: hmoIdToDelete,\r\n              },\r\n            })\r\n              .then(({ data }) => {\r\n                if (data) {\r\n                  displayAlert(\"success\", \"HMO deleted successfully\");\r\n                  refetchData();\r\n                }\r\n              })\r\n              .catch((error) => {\r\n                console.error(error);\r\n                const errMsg = getErrorMsg(error);\r\n                displayAlert(\"error\", errMsg);\r\n              });\r\n          }}\r\n          confirmationMsg=\"delete HMO\"\r\n          onCancel={() => {\r\n            setHmoIdToDelete(null);\r\n          }}\r\n        />\r\n\r\n        {/* ADD MODAL */}\r\n        <AddEditHMOModal\r\n          isOpen={addModal}\r\n          setIsOpen={setAddModal}\r\n          type=\"add\"\r\n          initialValues={addHMOInitialValues}\r\n          onSuccess={() => {\r\n            setAddModal(false);\r\n            refetchData();\r\n          }}\r\n        />\r\n\r\n        {/* EDIT MODAL */}\r\n        <AddEditHMOModal\r\n          isOpen={editModal}\r\n          setIsOpen={setEditModal}\r\n          type=\"edit\"\r\n          initialValues={editHMOData}\r\n          onSuccess={() => {\r\n            setEditModal(false);\r\n            refetchData();\r\n          }}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Hmo;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\UploadListModal.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\EditTestForm.js",["1434","1435","1436","1437","1438"],"import React from \"react\";\r\nimport t from \"prop-types\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { FormikControl } from \"components/validation\";\r\nimport { UPDATE_TEST } from \"components/graphQL/Mutation\";\r\nimport { editTestValidation } from \"helpers/validationSchemas\";\r\nimport { handleError, showSuccessMsg } from \"helpers/filterHelperFunctions\";\r\nimport { CustomSelect } from \"components/validation/Select\";\r\n\r\nexport const EditTestForm = ({ onSuccess, data }) => {\r\n  const theme = useTheme();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [updateTest] = useMutation(UPDATE_TEST);\r\n  const [value, setValue] = React.useState(\"Hours\");\r\n  const tatArr = data.tat.split(\" \");\r\n  const initialValues = {\r\n    id: data?._id,\r\n    name: data?.name,\r\n    price: data.price,\r\n    tatNumber: tatArr[0],\r\n    tatDuration: tatArr[1],\r\n  };\r\n\r\n  const onSubmit = async (values) => {\r\n    try {\r\n      const { id, name, price, tatNumber, tatDuration } = values;\r\n      const variables = {\r\n        id: id,\r\n        name: name,\r\n        price: Number(price),\r\n        tat: `${tatNumber} ${tatDuration}`,\r\n      };\r\n\r\n      const { data } = await updateTest({\r\n        variables: variables,\r\n      });\r\n      if (data) {\r\n        showSuccessMsg(enqueueSnackbar, Typography, \"Test Updated.\");\r\n        onSuccess();\r\n      }\r\n    } catch (err) {\r\n      handleError(err, enqueueSnackbar);\r\n      console.log(\"failed to update test\", err);\r\n    }\r\n  };\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validationSchema={editTestValidation}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n      validateOnBlur={false}\r\n    >\r\n      {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\r\n        /* setValues(initialValues); */\r\n        return (\r\n          <Form style={{ marginTop: \"1rem\" }}>\r\n            <Grid container direction=\"column\" gap={2}>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl control=\"input\" id=\"id\" name=\"id\" hidden />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Test Name\"\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  placeholder=\"Enter Test name\"\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Test price\"\r\n                  id=\"price\"\r\n                  name=\"price\"\r\n                  placeholder=\"Enter Test price\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Grid container spacing={2}>\r\n                  <Grid item flexGrow={1}>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      label=\"Turnaround time (TAT)\"\r\n                      id=\"tat\"\r\n                      name=\"tatNumber\"\r\n                      placeholder=\"48\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sx={{ display: \"flex\", alignItems: \"flex-end\" }}>\r\n                    <CustomSelect\r\n                      Control\r\n                      name=\"tatDuration\"\r\n                      disable={false}\r\n                      value={value}\r\n                      options={[\r\n                        { key: \"Minutes\", value: \"Minutes\" },\r\n                        { key: \"Hours\", value: \"Hours\" },\r\n                        { key: \"Days\", value: \"Days\" },\r\n                      ]}\r\n                      onChange={(e) => {\r\n                        setValue(e?.target?.value);\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item container>\r\n                <CustomButton\r\n                  title=\"Update Test\"\r\n                  width=\"100%\"\r\n                  type={buttonType}\r\n                  isSubmitting={isSubmitting}\r\n                  disabled={isSubmitting}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nEditTestForm.propTypes = {\r\n  onSuccess: t.func.isRequired,\r\n  data: t.object,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\UploadEnrolleeListForm.js",["1439","1440","1441"],"import React, { useEffect, useState } from \"react\";\r\nimport t from \"prop-types\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Alert, Grid } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\nimport DragAndDrop from \"./DragAndDrop\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { FormikControl } from \"components/validation\";\r\nimport { getPlans } from \"components/graphQL/useQuery\";\r\nimport { uploadEnrolleeFileValidationSchema } from \"helpers/validationSchemas\";\r\n\r\nexport const UploadEnrolleeListForm = ({ onSubmit }) => {\r\n  const theme = useTheme();\r\n  const [fetchPlans] = useLazyQuery(getPlans);\r\n  const [planOptions, setPlanOptions] = useState([]);\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  const initialValues = {\r\n    planId: \"\",\r\n    file: null,\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPlans({\r\n      variables: { type: \"hmo\" },\r\n    })\r\n      .then(({ data }) => {\r\n        const options = (data?.getPlans?.plan || []).map((option) => {\r\n          return { key: option?.name, value: option?._id };\r\n        });\r\n        setPlanOptions(options);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, [fetchPlans]);\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={(values) => onSubmit(values)}\r\n      validationSchema={uploadEnrolleeFileValidationSchema}\r\n      validateOnChange={true}\r\n      validateOnMount={false}\r\n      validateOnBlur={true}\r\n    >\r\n      {({ isSubmitting, dirty, isValid, setFieldValue, setErrors }) => {\r\n        return (\r\n          <Form style={{ marginTop: \"1rem\" }}>\r\n            <Alert severity=\"warning\" sx={{ margin: \"1rem 0rem\" }}>\r\n              <strong>CAUTION - </strong> Uploading a new file may overwrite the\r\n              current file.\r\n            </Alert>\r\n            <Grid container direction=\"column\" spacing={3}>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"select\"\r\n                  options={[{ key: \"Plan\", value: \"\" }, ...planOptions]}\r\n                  placeholder=\"Select Heala Plan\"\r\n                  name=\"planId\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <DragAndDrop\r\n                  name=\"file\"\r\n                  maxFiles={1}\r\n                  hasPreview={false}\r\n                  uploadFunc={(file) => {\r\n                    setErrors({});\r\n                    setFieldValue(\"file\", file);\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <CustomButton\r\n                  title=\"Upload file\"\r\n                  width=\"100%\"\r\n                  type={buttonType}\r\n                  isSubmitting={isSubmitting}\r\n                  disabled={isSubmitting}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nUploadEnrolleeListForm.propTypes = {\r\n  onSubmit: t.func.isRequired,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\ConfirmModal.js",["1442","1443","1444","1445"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid, Modal, Fade, Typography, Box, Backdrop } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { BsExclamationCircle } from \"react-icons/bs\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  closeIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      cursor: \"pointer\",\r\n\r\n      \"&:hover\": {\r\n        color: theme.palette.common.danger,\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: \"auto\",\r\n  minWidth: \"40rem\",\r\n  height: \"auto\",\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: 24,\r\n  borderRadius: \"1rem\",\r\n  padding: \"3rem\",\r\n};\r\n\r\nconst ConfirmModal = ({\r\n  open,\r\n  setOpen,\r\n  title,\r\n  confirmationMsg,\r\n  btnValue,\r\n  type,\r\n  onConfirm,\r\n  onCancel,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const rejectBtn = {\r\n    background: theme.palette.disabled.main,\r\n    hover: theme.palette.common.gold,\r\n    active: theme.palette.info.dark,\r\n  };\r\n\r\n  const acceptBtn = {\r\n    background: theme.palette.primary.light,\r\n    hover: theme.palette.success.main,\r\n    active: theme.palette.disabled.main,\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      aria-labelledby=\"transition-modal-title\"\r\n      aria-describedby=\"transition-modal-description\"\r\n      open={open}\r\n      onClose={() => setOpen(false)}\r\n      closeAfterTransition\r\n      BackdropComponent={Backdrop}\r\n      BackdropProps={{\r\n        timeout: 500,\r\n      }}\r\n    >\r\n      <Fade in={open}>\r\n        <Box sx={style}>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n          >\r\n            <Grid item alignSelf=\"flex-end\">\r\n              <CloseIcon\r\n                color=\"primary\"\r\n                fontSize=\"medium\"\r\n                className={classes.closeIcon}\r\n                onClick={() => setOpen(false)}\r\n              />\r\n            </Grid>\r\n            <Grid item style={{ marginBottom: \"3rem\" }}>\r\n              <BsExclamationCircle\r\n                size=\"10rem\"\r\n                color={theme.palette.warning.main}\r\n              />\r\n            </Grid>\r\n            <Grid item style={{ marginBottom: \"2rem\" }}>\r\n              <Typography variant=\"h2\">{title}</Typography>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              style={{ marginBottom: \"2rem\" }}\r\n              sx={{ textAlign: \"center\" }}\r\n            >\r\n              <Typography variant=\"body1\">\r\n                {\"Are you sure you want to continue?\"}\r\n              </Typography>\r\n              <Typography variant=\"body1\">{`${confirmationMsg}`}</Typography>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              container\r\n              justifyContent=\"space-between\"\r\n              gap={3}\r\n              sx={{ justifyContent: \"space-between\" }}\r\n            >\r\n              <Grid item md>\r\n                <CustomButton\r\n                  title=\"Cancel\"\r\n                  type={rejectBtn}\r\n                  width=\"100%\"\r\n                  onClick={() => setOpen(false)}\r\n                />\r\n              </Grid>\r\n              <Grid item md>\r\n                <CustomButton\r\n                  title={\"Confirm\"}\r\n                  type={acceptBtn}\r\n                  width=\"100%\"\r\n                  onClick={() => {\r\n                    setOpen(false);\r\n                    onConfirm();\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Fade>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nConfirmModal.propTypes = {\r\n  open: PropTypes.bool.isRequired,\r\n  setOpen: PropTypes.func.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  confirmationMsg: PropTypes.string.isRequired,\r\n  btnValue: PropTypes.string,\r\n  type: PropTypes.string,\r\n  onConfirm: PropTypes.func,\r\n  onCancel: PropTypes.func,\r\n};\r\n\r\nexport default ConfirmModal;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\AddTestForm.js",["1446","1447","1448","1449"],"import React from \"react\";\r\nimport t from \"prop-types\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { FormikControl } from \"components/validation\";\r\nimport { addTest } from \"components/graphQL/Mutation\";\r\nimport { addTestValidation } from \"helpers/validationSchemas\";\r\nimport {\r\n  handleError,\r\n  showSuccessMsg,\r\n} from \"../../helpers/filterHelperFunctions\";\r\n\r\nexport const AddTestForm = ({ onSuccess }) => {\r\n  const theme = useTheme();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [addSingleTest] = useMutation(addTest);\r\n\r\n  const addTestIntialValues = {\r\n    name: \"\",\r\n    price: null,\r\n    tat: \"\",\r\n  };\r\n\r\n  const onSubmit = async (values) => {\r\n    try {\r\n      const { name, price, tat } = values;\r\n      const variables = {\r\n        name: name,\r\n        price: Number(price),\r\n        tat: parseInt(tat) > 1 ? `${tat} Hours` : `${tat} Hour`,\r\n      };\r\n      console.log(\"add test values\", variables);\r\n      const { data } = await addSingleTest({\r\n        variables: variables,\r\n      });\r\n      if (data) {\r\n        showSuccessMsg(enqueueSnackbar, Typography, \"Test added.\");\r\n        onSuccess();\r\n      }\r\n    } catch (err) {\r\n      handleError(err, enqueueSnackbar);\r\n      console.log(\"failed to add test\", err);\r\n    }\r\n  };\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={addTestIntialValues}\r\n      onSubmit={onSubmit}\r\n      validationSchema={addTestValidation}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n      validateOnBlur={false}\r\n    >\r\n      {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\r\n        return (\r\n          <Form style={{ marginTop: \"1rem\" }}>\r\n            <Grid container direction=\"column\" gap={2}>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Test Name\"\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  placeholder=\"Enter Test name\"\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Test price\"\r\n                  id=\"price\"\r\n                  name=\"price\"\r\n                  placeholder=\"Enter Test price\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Turnaround time (TAT) - (hours)\"\r\n                  id=\"tat\"\r\n                  name=\"tat\"\r\n                  placeholder=\"48\"\r\n                />\r\n              </Grid>\r\n              <Grid item container>\r\n                <CustomButton\r\n                  title=\"Add Test\"\r\n                  width=\"100%\"\r\n                  type={buttonType}\r\n                  isSubmitting={isSubmitting}\r\n                  disabled={!dirty || !isValid || isSubmitting}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nAddTestForm.propTypes = {\r\n  onSuccess: t.func,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\cards\\SettingsCard.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\AddEditHMOModal.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\AddEditHMOEnrolleeModal.js",["1450"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { Grid, Modal, Fade, Typography, Box, Backdrop } from \"@mui/material\";\r\nimport AddEditHMOEnrolleeForm from \"components/Forms/AddEditHMOEnrolleeForm\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  closeIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      cursor: \"pointer\",\r\n\r\n      \"&:hover\": {\r\n        cursor: \"pointer\",\r\n        color: theme.palette.common.danger,\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst AddEditHMOEnrolleeModal = ({\r\n  isOpen,\r\n  setIsOpen,\r\n  refetchData,\r\n  initialValues,\r\n  type,\r\n}) => {\r\n  const classes = useStyles();\r\n\r\n  const style = {\r\n    height: \"95vh\",\r\n    position: \"absolute\",\r\n    top: \"50%\",\r\n    left: \"50%\",\r\n    transform: \"translate(-50%, -50%)\",\r\n    bgcolor: \"background.paper\",\r\n    boxShadow: 24,\r\n    borderRadius: \"1rem\",\r\n    overflowY: \"auto\",\r\n  };\r\n  return (\r\n    <Modal\r\n      aria-labelledby=\"transition-modal-title\"\r\n      aria-describedby=\"transition-modal-description\"\r\n      open={isOpen}\r\n      onClose={() => setIsOpen(false)}\r\n      closeAfterTransition\r\n      BackdropComponent={Backdrop}\r\n      BackdropProps={{\r\n        timeout: 500,\r\n      }}\r\n    >\r\n      <Fade in={isOpen}>\r\n        <Box\r\n          sx={style}\r\n          width={{ md: \"70vw\", sm: \"90vw\", lg: \"40vw\", xs: \"40vw\" }}\r\n          padding={{ sm: 2, xs: 2, md: 4 }}\r\n        >\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n          >\r\n            <Grid\r\n              container\r\n              item\r\n              justifyContent=\"space-between\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Grid item>\r\n                <Typography sx={{ fontSize: \"24px\", fontWeight: 500 }}>\r\n                  {type === \"add\" ? \"Add New Enrollee\" : \"Edit Enrollee\"}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <CloseIcon\r\n                  color=\"primary\"\r\n                  fontSize=\"large\"\r\n                  className={classes.closeIcon}\r\n                  onClick={() => setIsOpen(false)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item style={{ marginBottom: \"3rem\", width: \"100%\" }}>\r\n              <AddEditHMOEnrolleeForm\r\n                type={type}\r\n                editInitialValues={initialValues}\r\n                onSuccess={() => {\r\n                  setIsOpen(false);\r\n                  refetchData();\r\n                }}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Fade>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nAddEditHMOEnrolleeModal.propTypes = {\r\n  isOpen: PropTypes.bool.isRequired,\r\n  setIsOpen: PropTypes.func.isRequired,\r\n  refetchData: PropTypes.func,\r\n  type: PropTypes.string,\r\n};\r\n\r\nexport default AddEditHMOEnrolleeModal;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Tables\\SingleHMOTable.js",["1451","1452","1453","1454"],"import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid } from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { NetworkStatus } from \"@apollo/client\";\r\nimport { useStyles } from \"styles/hmoPageStyles\";\r\nimport { EmptyTable, NoData } from \"components/layouts\";\r\nimport SingleHMORow from \"components/Rows/SingleHMORow\";\r\n\r\nimport { getDynamicSearchPlaceholder } from \"helpers/func\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { getEnrolles } from \"components/graphQL/useQuery\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport EnhancedTable from \"components/layouts/EnhancedTable\";\r\nimport { deleteEnrollee } from \"components/graphQL/Mutation\";\r\nimport ConfirmDelete from \"components/modals/DeleteOrDisable\";\r\nimport SingleHMOFilters from \"components/Forms/Filters/SingleHMOFilters\";\r\nimport {\r\n  defaultPageInfo,\r\n  hmoSearchFilterOptions,\r\n  hmoSearchOptions,\r\n} from \"../../helpers/mockData\";\r\nimport { singleHmoTableHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport AddEditHMOEnrolleeModal from \"components/modals/AddEditHMOEnrolleeModal\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport EnrolleeProfileModal from \"components/modals/EnrolleeProfileModal\";\r\n\r\nconst SingleHMOTable = ({ enrolleesParams }) => {\r\n  const classes = useStyles();\r\n  const { hmoId } = useParams();\r\n  const { displayAlert, getErrorMsg } = useAlert();\r\n  const [editData, setEditData] = React.useState(null);\r\n  const [isDeleting, setIsDeleting] = React.useState({});\r\n  const [profileDetails, setProfileDetails] = useState({});\r\n  const [editEnrolleeModal, setEditEnrolleeModal] = useState(false);\r\n  const [profileDetailModal, setProfileDetailModal] = useState(false);\r\n  const [enrolleeToDelete, setEnrolleeToDelete] = React.useState(null);\r\n  const [confirmDeleteModal, setConfirmDeleteModal] = React.useState(false);\r\n  const [deleteHMOEnrollee] = useMutation(deleteEnrollee, {\r\n    refetchQueries: [{ query: getEnrolles }],\r\n  });\r\n  const {\r\n    hmoEnrollees,\r\n    setHmoEnrollees,\r\n    pageInfo,\r\n    setPageInfo,\r\n    fetchEnrollees,\r\n    error,\r\n    loading,\r\n    refetch,\r\n    variables,\r\n    networkStatus,\r\n  } = enrolleesParams;\r\n\r\n  React.useEffect(() => {\r\n    (hmoEnrollees || []).map((enrollee) => {\r\n      const newIsDeleting = isDeleting;\r\n      setIsDeleting({ [enrollee?._id]: false, ...newIsDeleting });\r\n      return null;\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [hmoEnrollees]);\r\n\r\n  const refreshData = () => {\r\n    refetch({\r\n      variables: {\r\n        providerId: hmoId,\r\n        first: 10,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        setHmoEnrollees(data?.getEnrollees?.data || []);\r\n        setPageInfo(data?.getEnrollees?.pageInfo || {});\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setHmoEnrollees(data?.getEnrollees?.data || []);\r\n        setPageInfo(data?.getEnrollees?.pageInfo || defaultPageInfo);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n      <Grid\r\n        item\r\n        container\r\n        spacing={2}\r\n        className={classes.searchFilterContainer}\r\n      >\r\n        <Grid item container flexWrap=\"wrap\" spacing={4}></Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        filters={\r\n          <SingleHMOFilters\r\n            setHmoEnrollees={setHmoEnrollees}\r\n            setPageInfo={setPageInfo}\r\n            queryParams={{ variables, fetchEnrollees, refetch }}\r\n          />\r\n        }\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{\r\n              fetchData: fetchEnrollees,\r\n              variables,\r\n              loading,\r\n              newVariables: { providerId: hmoId },\r\n            }}\r\n            searchState={{\r\n              value: \"\",\r\n              filterBy: \"hmoId\",\r\n            }}\r\n            setPageInfo={(data) =>\r\n              setPageInfo(data?.getEnrollees?.pageInfo || {})\r\n            }\r\n            setProfiles={(data) =>\r\n              setHmoEnrollees(data?.getEnrollees?.data || [])\r\n            }\r\n            getSearchPlaceholder={(filterBy) =>\r\n              getDynamicSearchPlaceholder(filterBy, hmoSearchFilterOptions)\r\n            }\r\n            filterOptions={hmoSearchOptions}\r\n          />\r\n        }\r\n      >\r\n        {loading ? (\r\n          <Loader />\r\n        ) : networkStatus === NetworkStatus.refetch ? (\r\n          <Loader />\r\n        ) : hmoEnrollees.length > 0 ? (\r\n          /* ================= HMO TABLE ================= */\r\n          <Grid\r\n            container\r\n            item\r\n            direction=\"column\"\r\n            overflow=\"hidden\"\r\n            maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n          >\r\n            <EnhancedTable\r\n              headCells={singleHmoTableHeadCells}\r\n              rows={hmoEnrollees}\r\n              paginationLabel=\"Enrollees per page\"\r\n              hasCheckbox={false}\r\n              dataPageInfo={pageInfo}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchEnrollees, {\r\n                  first: e,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(\r\n                  fetchEnrollees,\r\n                  page,\r\n                  pageInfo,\r\n                  {}\r\n                );\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {hmoEnrollees.map((row, index) => {\r\n                const { _id } = row;\r\n                return (\r\n                  <SingleHMORow\r\n                    key={index}\r\n                    index={index}\r\n                    rowData={row}\r\n                    setEditData={setEditData}\r\n                    isDeleting={isDeleting[_id]}\r\n                    setEnrolleeIdToDelete={() => setEnrolleeToDelete(_id)}\r\n                    openEditModal={() => setEditEnrolleeModal(true)}\r\n                    openConfirmModal={() => setConfirmDeleteModal(true)}\r\n                    openProfileDetailsModal={() => {\r\n                      setProfileDetailModal(true);\r\n                      setProfileDetails(row);\r\n                    }}\r\n                  />\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={singleHmoTableHeadCells}\r\n            paginationLabel=\"Enrollees per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n\r\n      {/* ==== PROFILE DETAILS MODAL ===== */}\r\n      <EnrolleeProfileModal\r\n        isOpen={profileDetailModal}\r\n        setIsOpen={setProfileDetailModal}\r\n        profileData={profileDetails}\r\n      />\r\n\r\n      {/*  ======= CONFIRM DELETE ======== */}\r\n      <ConfirmDelete\r\n        open={confirmDeleteModal}\r\n        setOpen={setConfirmDeleteModal}\r\n        title=\"Delete Enrollee\"\r\n        btnValue=\"delete\"\r\n        onConfirm={async () => {\r\n          setConfirmDeleteModal(false);\r\n          const newIsDeleting = isDeleting;\r\n\r\n          try {\r\n            newIsDeleting[enrolleeToDelete] = true;\r\n            setIsDeleting({ ...newIsDeleting });\r\n            const { data } = await deleteHMOEnrollee({\r\n              variables: {\r\n                id: enrolleeToDelete,\r\n              },\r\n            });\r\n\r\n            if (!data) {\r\n              newIsDeleting[enrolleeToDelete] = false;\r\n              setIsDeleting({ ...newIsDeleting });\r\n              throw Error(\"Couldn't delete enrollee\");\r\n            }\r\n            displayAlert(\"success\", \"Deleted enrollee successfully.\");\r\n            refreshData();\r\n            newIsDeleting[enrolleeToDelete] = false;\r\n            setIsDeleting({ ...newIsDeleting });\r\n          } catch (error) {\r\n            console.error(error);\r\n            const errMsg = getErrorMsg(error);\r\n            displayAlert(\"error\", errMsg);\r\n            newIsDeleting[enrolleeToDelete] = false;\r\n            setIsDeleting({ ...newIsDeleting });\r\n          }\r\n        }}\r\n        confirmationMsg=\"Are you sure you want to delete\"\r\n        onCancel={() => {\r\n          setConfirmDeleteModal(false);\r\n        }}\r\n      />\r\n\r\n      {/* EDIT ENROLLEE MODAL */}\r\n      <AddEditHMOEnrolleeModal\r\n        isOpen={editEnrolleeModal}\r\n        setIsOpen={setEditEnrolleeModal}\r\n        type=\"edit\"\r\n        initialValues={editData}\r\n        refetchData={() => refreshData()}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nSingleHMOTable.propTypes = {\r\n  enrolleesParams: PropTypes.object.isRequired,\r\n};\r\n\r\nexport default SingleHMOTable;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\TestListRow.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\DragAndDrop.js",["1455"],"import React from \"react\";\r\nimport t from \"prop-types\";\r\nimport { ErrorMessage } from \"formik\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { TextError } from \"components/Utilities/TextError\";\r\nimport { CustomButton, Loader } from \"components/Utilities\";\r\nimport { IsImg } from \"helpers/filterHelperFunctions\";\r\n\r\nconst getColor = (props) => {\r\n  if (props.isDragAccept) {\r\n    return \"#00e676\";\r\n  }\r\n  if (props.isDragReject) {\r\n    return \"#ff1744\";\r\n  }\r\n  if (props.isFocused) {\r\n    return \"#2196f3\";\r\n  }\r\n  return \"#eeeeee\";\r\n};\r\n\r\nconst Container = styled.div`\r\n  min-height: 250px;\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 20px;\r\n  border-width: 2px;\r\n  border-radius: 2px;\r\n  border-color: ${(props) => getColor(props)};\r\n  border-style: dashed;\r\n  background-color: #fafafa;\r\n  color: #777171;\r\n  outline: none;\r\n  transition: border 0.24s ease-in-out;\r\n`;\r\n\r\nconst thumb = {\r\n  display: \"inline-flex\",\r\n  borderRadius: 2,\r\n  backgroundColor: \"#eaeaea\",\r\n  border: \"1px solid #eaeaea\",\r\n  marginBottom: 8,\r\n  marginRight: 8,\r\n  width: 100,\r\n  height: 100,\r\n  padding: 4,\r\n  boxSizing: \"border-box\",\r\n};\r\n\r\nconst thumbInner = {\r\n  display: \"flex\",\r\n  backgroundColor: \"#eaeaea\",\r\n  minWidth: 0,\r\n  overflow: \"hidden\",\r\n};\r\n\r\nconst img = {\r\n  display: \"block\",\r\n  backgroundColor: \"#eaeaea\",\r\n  width: \"auto\",\r\n  height: \"100%\",\r\n};\r\n\r\nconst errorContainer = {\r\n  margin: \"1rem 0rem\",\r\n};\r\n\r\nconst DragAndDrop = ({ name, maxFiles, hasPreview, uploadFunc }) => {\r\n  const theme = useTheme();\r\n  const [preview, setPreview] = React.useState(\"\");\r\n  const [progress] = React.useState();\r\n  const [isCompleted] = React.useState(null);\r\n  const [isCompressing] = React.useState(false);\r\n  const [file, setFile] = React.useState(null);\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isFocused,\r\n    isDragAccept,\r\n    isDragReject,\r\n    open,\r\n  } = useDropzone({\r\n    accept: \"application/json\",\r\n    maxFiles: maxFiles,\r\n    autoFocus: true,\r\n    onDropAccepted: (acceptedFiles) => {\r\n      setFile(acceptedFiles[0]);\r\n      if (hasPreview || IsImg(acceptedFiles[0])) {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(acceptedFiles[0]);\r\n        reader.onloadend = (e) => setPreview(reader.result);\r\n        // call the upload func\r\n        /* compressAndUploadImage(\r\n          acceptedFiles[0],\r\n          uploadImage,\r\n          setPreview,\r\n          name,\r\n          setFieldValue,\r\n          setProgress,\r\n          setIsCompressing,\r\n          setIsCompleted\r\n        ); */\r\n      } else {\r\n        uploadFunc(acceptedFiles[0]);\r\n      }\r\n    },\r\n  });\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"\">\r\n        <Container {...getRootProps({ isFocused, isDragAccept, isDragReject })}>\r\n          <input {...getInputProps()} />\r\n          <Typography>\r\n            Drag and drop your file(s), or click to select files or Click on the\r\n            button below\r\n          </Typography>\r\n          <Grid\r\n            item\r\n            container\r\n            justifyContent=\"center\"\r\n            style={{ marginTop: \"15px\" }}\r\n          >\r\n            <CustomButton\r\n              variant=\"contained\"\r\n              title=\" Select file(s)\"\r\n              type={buttonType}\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                open();\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n      <div style={errorContainer}>\r\n        <ErrorMessage name={name} component={TextError} />\r\n      </div>\r\n      <aside style={{ marginTop: \"1.5rem\" }}>\r\n        <Grid item>\r\n          {progress < 100 || isCompressing ? (\r\n            <Grid\r\n              container\r\n              item\r\n              direction=\"row\"\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Typography display={\"inline\"}>\r\n                {isCompressing ? \"Compressing file\" : \"Uploading file\"}\r\n              </Typography>\r\n              <Loader />\r\n            </Grid>\r\n          ) : preview && isCompleted !== \"failed\" && IsImg(file) ? (\r\n            <div style={thumb}>\r\n              <div style={thumbInner}>\r\n                <img src={preview} alt=\"preview\" style={img} />\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <Typography sx={{ marginBottom: \"1rem\", color: \"green\" }}>\r\n              {file && file.name}\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n      </aside>\r\n    </div>\r\n  );\r\n};\r\n\r\nDragAndDrop.propTypes = {\r\n  name: t.string.isRequired,\r\n  maxFiles: t.number.isRequired,\r\n  hasPreview: t.bool.isRequired,\r\n  uploadFunc: t.func.isRequired,\r\n};\r\n\r\nexport default DragAndDrop;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\UploadListForm.js",["1456","1457"],"import React from \"react\";\r\nimport t from \"prop-types\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Alert, Grid } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\nimport DragAndDrop from \"./DragAndDrop\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { uploadFileValidationSchema } from \"helpers/validationSchemas\";\r\n\r\nexport const UploadListForm = ({ onSubmit, valSchema }) => {\r\n  const theme = useTheme();\r\n  const validationSchema = valSchema ? valSchema : uploadFileValidationSchema;\r\n\r\n  const addTestIntialValues = {\r\n    testFile: null,\r\n  };\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={addTestIntialValues}\r\n      onSubmit={(values) => onSubmit(values)}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={true}\r\n      validateOnMount={false}\r\n      validateOnBlur={true}\r\n    >\r\n      {({ isSubmitting, dirty, isValid, setFieldValue, setErrors }) => {\r\n        return (\r\n          <Form style={{ marginTop: \"1rem\" }}>\r\n            <Alert severity=\"warning\" sx={{ margin: \"1rem 0rem\" }}>\r\n              <strong>CAUTION - </strong> Uploading a new file may overwrite the\r\n              current file.\r\n            </Alert>\r\n            <Grid container direction=\"column\" space={2}>\r\n              <Grid item>\r\n                <DragAndDrop\r\n                  name=\"testFile\"\r\n                  maxFiles={1}\r\n                  hasPreview={false}\r\n                  uploadFunc={(file) => {\r\n                    setErrors({});\r\n                    setFieldValue(\"testFile\", file);\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <CustomButton\r\n                  title=\"Upload file\"\r\n                  width=\"100%\"\r\n                  type={buttonType}\r\n                  isSubmitting={isSubmitting}\r\n                  disabled={isSubmitting}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nUploadListForm.propTypes = {\r\n  onSubmit: t.func.isRequired,\r\n  valSchema: t.object,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\AddEditHMOForm.js",["1458","1459","1460","1461","1462"],"import React from \"react\";\r\nimport t from \"prop-types\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { FormikControl } from \"components/validation\";\r\nimport { removeEmptyStringValues } from \"helpers/func\";\r\nimport { hmoValidationSchema } from \"helpers/validationSchemas\";\r\nimport { addProvider, editprovider } from \"components/graphQL/Mutation\";\r\n\r\nconst AddEditHMOForm = ({ type, initialValues, onSuccess }) => {\r\n  const theme = useTheme();\r\n  const { displayAlert, getErrorMsg } = useAlert();\r\n  const [createProvider] = useMutation(addProvider);\r\n  const [updateProvider] = useMutation(editprovider);\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  const onCreateProvider = async (values) => {\r\n    const variables = removeEmptyStringValues(values);\r\n    try {\r\n      const response = await createProvider({\r\n        variables: variables,\r\n      });\r\n      if (response.data) {\r\n        displayAlert(\"success\", \"HMO added succesfully\");\r\n        onSuccess();\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      const errorMsg = getErrorMsg(error);\r\n      displayAlert(\"error\", errorMsg);\r\n    }\r\n  };\r\n\r\n  const onUpdateProvider = async (values) => {\r\n    const variables = removeEmptyStringValues(values);\r\n    try {\r\n      const response = await updateProvider({\r\n        variables: variables,\r\n      });\r\n      if (response.data) {\r\n        displayAlert(\"success\", \"HMO updated succesfully\");\r\n        onSuccess();\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      const errorMsg = getErrorMsg(error);\r\n      displayAlert(\"error\", errorMsg);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={(values) =>\r\n        type === \"add\" ? onCreateProvider(values) : onUpdateProvider(values)\r\n      }\r\n      validationSchema={hmoValidationSchema}\r\n      validateOnChange={true}\r\n      validateOnMount={false}\r\n      validateOnBlur={true}\r\n    >\r\n      {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\r\n        return (\r\n          <Form style={{ marginTop: \"1rem\" }}>\r\n            <Grid container direction=\"column\" gap={2}>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl control=\"input\" id=\"id\" name=\"id\" hidden />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"HMO Name\"\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  placeholder=\"Enter HMO name\"\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  type=\"email\"\r\n                  label=\"Email\"\r\n                  id=\"email\"\r\n                  name=\"email\"\r\n                  placeholder=\"Enter email address\"\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Phone number\"\r\n                  id=\"phone_number\"\r\n                  name=\"phone\"\r\n                  placeholder=\"Enter phone number\"\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Address\"\r\n                  id=\"address\"\r\n                  name=\"address\"\r\n                  placeholder=\"Address\"\r\n                />\r\n              </Grid>\r\n\r\n              {/* <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"select\"\r\n                  options={[{ key: \"Plan\", value: \"\" }]}\r\n                  placeholder=\"Select plan\"\r\n                  name=\"planId\"\r\n                  label=\"Plan\"\r\n                />\r\n              </Grid> */}\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"file\"\r\n                  label=\"Upload your logo\"\r\n                  id=\"logo\"\r\n                  name=\"icon\"\r\n                  setFieldValue={setFieldValue}\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"file\"\r\n                  label=\"Upload your alt logo\"\r\n                  id=\"logo\"\r\n                  name=\"iconAlt\"\r\n                  setFieldValue={setFieldValue}\r\n                />\r\n              </Grid>\r\n              <Grid item container>\r\n                <CustomButton\r\n                  title={type === \"edit\" ? \"Update HMO\" : \"Add HMO\"}\r\n                  width=\"100%\"\r\n                  type={buttonType}\r\n                  isSubmitting={isSubmitting}\r\n                  disabled={isSubmitting}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nAddEditHMOForm.propTypes = {\r\n  onSuccess: t.func.isRequired,\r\n  initialValues: t.object.isRequired,\r\n  type: t.oneOf([\"add\", \"edit\"]).isRequired,\r\n};\r\n\r\nexport default AddEditHMOForm;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\SingleHMORow.js",["1463","1464","1465","1466","1467"],"import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { formatDate } from \"helpers/func\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport EditIcon from \"components/Icons/EditIcon\";\r\nimport { useStyles } from \"styles/hmoPageStyles\";\r\nimport DeleteIcon from \"components/Icons/deleteIcon\";\r\nimport StatusPill from \"components/Utilities/StatusPill\";\r\nimport MoreHorizIcon from \"@mui/icons-material/MoreHoriz\";\r\nimport {\r\n  ClickAwayListener,\r\n  Grid,\r\n  Paper,\r\n  TableCell,\r\n  TableRow,\r\n} from \"@mui/material\";\r\n\r\nconst useEditStyles = makeStyles((theme) => ({\r\n  btn: {\r\n    backgroundColor: \"transparent\",\r\n    border: \"none\",\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  options: {\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    backgroundColor: \"#ffffff\",\r\n    borderRadius: \"8px\",\r\n    position: \"absolute\",\r\n    top: 28,\r\n    right: 0,\r\n    zIndex: 20,\r\n\r\n    \"&>button\": {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem 2rem\",\r\n      fontSize: \"14px\",\r\n      fontWeight: 400,\r\n      color: \"#2D2F39\",\r\n      borderBottom: \"1px solid #E5E5E5\",\r\n      textAlign: \"left\",\r\n      whiteSpace: \"nowrap\",\r\n\r\n      \"&:hover\": {\r\n        color: \"#ffffff\",\r\n      },\r\n    },\r\n\r\n    \"&>:last-child\": {\r\n      borderBottom: \"none\",\r\n    },\r\n  },\r\n\r\n  editBtn: {\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.common.blue,\r\n    },\r\n  },\r\n\r\n  delBtn: {\r\n    borderRadius: \"0px 0px 8px 8px\",\r\n    \"&:hover\": {\r\n      backgroundColor: theme.palette.common.danger,\r\n    },\r\n  },\r\n}));\r\n\r\nconst SingleHMORow = ({\r\n  index,\r\n  rowData,\r\n  setEditData,\r\n  isDeleting,\r\n  setEnrolleeIdToDelete,\r\n  openEditModal,\r\n  openConfirmModal,\r\n  openProfileDetailsModal,\r\n}) => {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const editClasses = useEditStyles();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const handleClickAway = () => {\r\n    setOpen(false);\r\n  };\r\n\r\n  const {\r\n    _id,\r\n    hmoId,\r\n    firstName,\r\n    lastName,\r\n    noc,\r\n    plan,\r\n    expiryDate,\r\n    status,\r\n    planId,\r\n    email,\r\n    phone,\r\n    photo,\r\n  } = rowData;\r\n  const editEnrolleeData = {\r\n    id: _id,\r\n    hmoId: hmoId || \"\",\r\n    firstName: firstName || \"\",\r\n    lastName: lastName || \"\",\r\n    noc: noc || \"\",\r\n    plan: plan || \"\",\r\n    planId: planId || \"\",\r\n    expiryDate: expiryDate || \"\",\r\n    email: email || \"\",\r\n    phone: phone || \"\",\r\n    photo: photo || \"\",\r\n  };\r\n  const labelId = `enhanced-table-checkbox-${index}`;\r\n  return (\r\n    <TableRow\r\n      hover\r\n      role=\"checkbox\"\r\n      sx={{ position: \"relative\", cursor: \"pointer\" }}\r\n      tabIndex={-1}\r\n      key={hmoId}\r\n      onClick={() => {\r\n        openProfileDetailsModal();\r\n      }}\r\n    >\r\n      <TableCell\r\n        id={labelId}\r\n        scope=\"row\"\r\n        align=\"left\"\r\n        className={classes.tableCell}\r\n        style={{\r\n          color: theme.palette.common.grey,\r\n          textAlign: \"left\",\r\n        }}\r\n      >\r\n        {hmoId}\r\n      </TableCell>\r\n      <TableCell align=\"left\" className={classes.tableCell}>\r\n        {`${firstName && firstName} ${lastName && lastName}`}\r\n      </TableCell>\r\n      <TableCell align=\"left\" className={classes.tableCell}>\r\n        {noc ? noc : 0}\r\n      </TableCell>\r\n      <TableCell align=\"left\" className={classes.tableCell}>\r\n        {plan ? plan : \"No Plan\"}\r\n      </TableCell>\r\n      <TableCell align=\"left\" className={classes.tableCell}>\r\n        {expiryDate ? formatDate(expiryDate, \"P\") : \"Nil\"}\r\n      </TableCell>\r\n      <TableCell align=\"left\" className={classes.tableCell}>\r\n        <StatusPill\r\n          type={status === true ? \"success\" : \"normal\"}\r\n          label={status === true ? \"VERIFIED\" : \"INACTIVE\"}\r\n        />\r\n      </TableCell>\r\n      <TableCell\r\n        align=\"left\"\r\n        sx={{ position: \"relative\" }}\r\n        className={classes.tableCell}\r\n      >\r\n        <Grid container>\r\n          <ClickAwayListener\r\n            onClickAway={() => {\r\n              handleClickAway();\r\n            }}\r\n          >\r\n            {isDeleting ? (\r\n              <Loader />\r\n            ) : (\r\n              <button\r\n                onClick={(e) => {\r\n                  e.stopPropagation();\r\n                  setOpen(!open);\r\n                }}\r\n                style={{\r\n                  display: \"flex\",\r\n                  justifyContent: \"center\",\r\n                  alignItems: \"center\",\r\n                  cursor: \"pointer\",\r\n                  backgroundColor: \"transparent\",\r\n                  border: \"none\",\r\n                }}\r\n              >\r\n                <MoreHorizIcon fontSize=\"large\" />\r\n              </button>\r\n            )}\r\n          </ClickAwayListener>\r\n        </Grid>\r\n      </TableCell>\r\n      {open ? (\r\n        <Paper className={editClasses.options} elavation={4}>\r\n          <button\r\n            className={`${editClasses.btn} ${editClasses.editBtn}`}\r\n            style={{ borderRadius: \"8px 8px 0px 0px\" }}\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              openProfileDetailsModal();\r\n            }}\r\n          >\r\n            View profile\r\n          </button>\r\n          <button\r\n            className={`${editClasses.btn} ${editClasses.editBtn}`}\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              setEditData(editEnrolleeData);\r\n              openEditModal();\r\n            }}\r\n          >\r\n            Edit <EditIcon sx={{ marginLeft: \"0.7rem\" }} />\r\n          </button>\r\n          <button\r\n            className={`${editClasses.btn} ${editClasses.delBtn}`}\r\n            onClick={(e) => {\r\n              e.stopPropagation();\r\n              setEnrolleeIdToDelete();\r\n              openConfirmModal();\r\n            }}\r\n          >\r\n            Delete <DeleteIcon sx={{ marginLeft: \"0.7rem\" }} />\r\n          </button>\r\n        </Paper>\r\n      ) : null}\r\n    </TableRow>\r\n  );\r\n};\r\n\r\nSingleHMORow.propTypes = {\r\n  index: PropTypes.number.isRequired,\r\n  rowData: PropTypes.object.isRequired,\r\n  openProfileDetailsModal: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default SingleHMORow;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\EnrolleeProfileModal.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\AddEditHMOEnrolleeForm.js",["1468","1469","1470","1471","1472","1473"],"import React, { useEffect, useState } from \"react\";\r\nimport t from \"prop-types\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { FormikControl } from \"components/validation\";\r\nimport { dateMoment, removeEmptyStringValues } from \"helpers/func\";\r\nimport { addHMOEnrolleInitialValues } from \"helpers/mockData\";\r\nimport { addHMOEnrolleeValidationSchema } from \"helpers/validationSchemas\";\r\nimport { createEnrollee, updateEnrollee } from \"components/graphQL/Mutation\";\r\nimport { getPlans } from \"components/graphQL/useQuery\";\r\n\r\nconst AddEditHMOEnrolleeForm = ({ type, editInitialValues, onSuccess }) => {\r\n  const theme = useTheme();\r\n  const { hmoId } = useParams();\r\n  const [date, setDate] = useState(\"\");\r\n  const [fetchPlans] = useLazyQuery(getPlans);\r\n  const { displayAlert, getErrorMsg } = useAlert();\r\n  const [planOptions, setPlanOptions] = useState([]);\r\n  const [addHMOEnrollee] = useMutation(createEnrollee);\r\n  const [updateHMOEnrollee] = useMutation(updateEnrollee);\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPlans({\r\n      variables: { type: \"hmo\" },\r\n    })\r\n      .then(({ data }) => {\r\n        const options = (data?.getPlans?.plan || []).map((option) => {\r\n          return { key: option?.name, value: option?._id };\r\n        });\r\n        setPlanOptions(options);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, [fetchPlans]);\r\n\r\n  useEffect(() => {\r\n    setDate(Date.now());\r\n  }, []);\r\n\r\n  const onAddSubmit = async (values) => {\r\n    const formatedDate = dateMoment(values.expiryDate);\r\n    const variables = removeEmptyStringValues(values);\r\n    try {\r\n      if (!variables.providerId) {\r\n        throw Error(\"Provider ID not found!\");\r\n      }\r\n      const { data } = await addHMOEnrollee({\r\n        variables: { expiryDate: formatedDate, ...variables },\r\n      });\r\n      if (data) {\r\n        displayAlert(\"success\", \"Enrollee added successfully\");\r\n        onSuccess();\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      const errMsg = getErrorMsg(error);\r\n      displayAlert(\"error\", errMsg);\r\n    }\r\n  };\r\n\r\n  const onUpdateSubmit = async (values) => {\r\n    const formatedDate = dateMoment(values.expiryDate);\r\n    const variables = removeEmptyStringValues(values);\r\n    try {\r\n      if (!variables?.providerId && !variables?.id) {\r\n        throw Error(\"Provider ID or Enrollee ID found!\");\r\n      }\r\n      const { data } = await updateHMOEnrollee({\r\n        variables: { expiryDate: formatedDate, ...variables },\r\n      });\r\n      if (data) {\r\n        displayAlert(\"success\", \"Enrollee updated successfully\");\r\n        onSuccess();\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      const errMsg = getErrorMsg(error);\r\n      displayAlert(\"error\", errMsg);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={\r\n        type === \"edit\" ? editInitialValues : addHMOEnrolleInitialValues\r\n      }\r\n      onSubmit={(values) =>\r\n        type === \"edit\"\r\n          ? onUpdateSubmit({\r\n              id: editInitialValues._id,\r\n              providerId: hmoId,\r\n              ...values,\r\n            })\r\n          : onAddSubmit({ providerId: hmoId, ...values })\r\n      }\r\n      validationSchema={addHMOEnrolleeValidationSchema}\r\n      validateOnChange={true}\r\n      validateOnMount={false}\r\n      validateOnBlur={true}\r\n    >\r\n      {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\r\n        return (\r\n          <Form style={{ marginTop: \"1rem\" }}>\r\n            <Grid container direction=\"column\" gap={2}>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"First Name\"\r\n                  id=\"firstName\"\r\n                  name=\"firstName\"\r\n                  placeholder=\"Enter first name\"\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Last Name\"\r\n                  id=\"lastName\"\r\n                  name=\"lastName\"\r\n                  placeholder=\"Enter last name\"\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"HMO ID\"\r\n                  id=\"hmoID\"\r\n                  name=\"hmoId\"\r\n                  placeholder=\"Enter HMO ID\"\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Email\"\r\n                  id=\"email\"\r\n                  name=\"email\"\r\n                  placeholder=\"Enter email address\"\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Phone number\"\r\n                  id=\"phone_number\"\r\n                  name=\"phone\"\r\n                  placeholder=\"Enter phone number\"\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"HMO Plan\"\r\n                  id=\"plan\"\r\n                  name=\"plan\"\r\n                  placeholder=\"Enter HMO Plan\"\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"date\"\r\n                  label=\"Expiry date (for HMO plan)\"\r\n                  id=\"expiry\"\r\n                  name=\"expiryDate\"\r\n                  setFieldValue={setFieldValue}\r\n                  setValues={setValues}\r\n                  startDate={date}\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"select\"\r\n                  options={[{ key: \"Plan\", value: \"\" }, ...planOptions]}\r\n                  placeholder=\"Select Plan\"\r\n                  name=\"planId\"\r\n                  label=\"Access Heala Plan\"\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"file\"\r\n                  label=\"Upload photo\"\r\n                  id=\"photo\"\r\n                  name=\"photo\"\r\n                  setFieldValue={setFieldValue}\r\n                />\r\n              </Grid>\r\n\r\n              <Grid item container>\r\n                <CustomButton\r\n                  title={type === \"edit\" ? \"Update HMO\" : \"Add HMO\"}\r\n                  width=\"100%\"\r\n                  type={buttonType}\r\n                  isSubmitting={isSubmitting}\r\n                  disabled={isSubmitting}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nAddEditHMOEnrolleeForm.propTypes = {\r\n  onSuccess: t.func.isRequired,\r\n  editInitialValues: t.object,\r\n};\r\n\r\nexport default AddEditHMOEnrolleeForm;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\Filters\\SingleHMOFilters.js",["1474","1475","1476","1477","1478","1479","1480","1481","1482","1483","1484"],"import React, { useEffect, useState } from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\n\r\nimport Filter from \".\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { deleteVar, filterData } from \"helpers/filterHelperFunctions\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { getPlans } from \"components/graphQL/useQuery\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\n\r\nconst SingleHMOFilters = ({ setHmoEnrollees, setPageInfo, queryParams }) => {\r\n  const { hmoId } = useParams();\r\n  const [fetchPlans] = useLazyQuery(getPlans);\r\n  const { displayAlert, getErrorMsg } = useAlert();\r\n  const [planOptions, setPlanOptions] = useState([]);\r\n  const { variables, fetchEnrollees, refetch } = queryParams;\r\n  const [hmoEnrolleeFilterValue, setHmoEnrolleeFilterValue] = useState({\r\n    planId: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchPlans({\r\n      variables: { type: \"hmo\" },\r\n    })\r\n      .then(({ data }) => {\r\n        const options = (data?.getPlans?.plan || []).map((option) => {\r\n          return { key: option?.name, value: option?._id };\r\n        });\r\n        setPlanOptions(options);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, [fetchPlans]);\r\n\r\n  const onFilterChange = async (name, value) => {\r\n    try {\r\n      deleteVar(variables);\r\n      const filterValues = {\r\n        ...hmoEnrolleeFilterValue,\r\n        [name]: value,\r\n        providerId: hmoId,\r\n      };\r\n      console.log(filterValues);\r\n      setHmoEnrolleeFilterValue(filterValues);\r\n      filterData(filterValues, {\r\n        fetchData: fetchEnrollees,\r\n        refetch,\r\n        variables,\r\n      })\r\n        .then((data) => {\r\n          setHmoEnrollees(data?.getEnrollees?.data || []);\r\n          setPageInfo(data?.getEnrollees?.pageInfo || {});\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n          const errMsg = getErrorMsg(error);\r\n          displayAlert(\"error\", errMsg);\r\n          refresh(setHmoEnrolleeFilterValue, { plan: \"\" });\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      const errMsg = getErrorMsg(error);\r\n      displayAlert(\"error\", errMsg);\r\n      refresh(setHmoEnrolleeFilterValue, { plan: \"\" });\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\r\n    setFilterValue(defaultVal);\r\n    deleteVar(variables);\r\n\r\n    refetch({ variables: { providerId: hmoId } })\r\n      .then(({ data }) => {\r\n        setHmoEnrollees(data?.getEnrollees?.data || []);\r\n        setPageInfo(data?.getEnrollees?.pageInfo || {});\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", \"Failed to get HMO enrollees data, Try again\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Grid item container flexWrap=\"wrap\" spacing={2} alignItems=\"flex-end\">\r\n      {/* FILTER BY PLAN */}\r\n      <Grid item>\r\n        <Filter\r\n          onHandleChange={(e) => onFilterChange(\"planId\", e?.target?.value)}\r\n          onClickClearBtn={() => onFilterChange(\"planId\", \"\")}\r\n          options={[{ key: \"Access Type\", value: \"\" }, ...planOptions]}\r\n          name=\"planId\"\r\n          value={hmoEnrolleeFilterValue.planId}\r\n          hasClearBtn={true}\r\n          disable={true}\r\n          variant=\"small\"\r\n        />\r\n      </Grid>\r\n      {/* <Grid item>\r\n        <Filter\r\n          onHandleChange={(e) => null}\r\n          onClickClearBtn={() => null}\r\n          options={[{ key: \"Gender\", value: \"\" }, ...genderType]}\r\n          name=\"gender\"\r\n          placeholder=\"Gender\"\r\n          value={profileFilterValues.gender}\r\n          hasClearBtn={true}\r\n          disable={true}\r\n          variant=\"small\"\r\n        />\r\n      </Grid> */}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SingleHMOFilters;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\StatusPill.js",["1485"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Chip } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"12px !important\",\r\n      height: \"2.7rem\",\r\n      borderRadius: \"1.3rem\",\r\n      fontWeight: 500,\r\n    },\r\n  },\r\n}));\r\n\r\nconst StatusPill = ({ type, label }) => {\r\n  const classes = useStyles();\r\n  const bgColor =\r\n    type === \"success\"\r\n      ? \"rgba(62, 165, 132, 0.1)\"\r\n      : type === \"normal\"\r\n      ? \"rgba(240, 240, 240, 1)\"\r\n      : type === \"error\"\r\n      ? \"rgba(242, 24, 24, 0.1)\"\r\n      : \"\";\r\n\r\n  const textColor =\r\n    type === \"success\"\r\n      ? \"#3EA584\"\r\n      : type === \"normal\"\r\n      ? \"#757886\"\r\n      : type === \"error\"\r\n      ? \"#f21818\"\r\n      : \"\";\r\n\r\n  return (\r\n    <Chip\r\n      label={label}\r\n      className={classes.badge}\r\n      sx={{\r\n        backgroundColor: bgColor,\r\n        color: textColor,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nStatusPill.propTypes = {\r\n  type: PropTypes.oneOf([\"success\", \"normal\", \"error\"]).isRequired,\r\n  label: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default StatusPill;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\SmsIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\CallIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\MessageAddIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\Calender2.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Heala.js",["1486","1487","1488","1489","1490","1491","1492","1493","1494","1495","1496","1497","1498","1499","1500","1501","1502","1503","1504"],"import React, { useEffect, useState } from \"react\";\r\nimport { EmptyTable, NoData } from \"components/layouts\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Avatar,\r\n  Typography,\r\n  TableCell,\r\n  TableRow,\r\n} from \"@mui/material\";\r\nimport AddProviderModal from \"components/Forms/AddProviderModal\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { addDoctorValidationSchema } from \"helpers/validationSchemas\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport Copy from \"components/Copy\";\r\nimport { trucateProfileLink } from \"helpers/filterHelperFunctions\";\r\nimport { hospitalTableHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport { trucateString } from \"helpers/filterHelperFunctions\";\r\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport { getProviders, getPartners } from \"components/graphQL/useQuery\";\r\nimport { regeneratePartnerProfileUrl } from \"components/graphQL/Mutation\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { searchOptions } from \"helpers/mockData\";\r\nimport { getSearchPlaceholder } from \"helpers/func\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst Heala = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { id } = useParams();\r\n  const { patientConsultation } = useActions();\r\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\r\n  const [hospitals, setHospitals] = useState([]);\r\n  const darkButtonType = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [fetchHospitals, { loading, error, variables }] = useLazyQuery(\r\n    getProviders,\r\n    {\r\n      variables: { userTypeId: id },\r\n    }\r\n  );\r\n  const onSubmit = () => console.log(\"onSubmit\");\r\n  const [openAddHcp, setOpenAddHcp] = useState(false);\r\n  useEffect(() => {\r\n    fetchHospitals()\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setHospitals(data?.getProviders?.provider || []);\r\n          setPageInfo(data?.getProviders?.pageInfo || {});\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, [fetchHospitals]);\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <>\r\n      <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n        <Grid item container justifyContent=\"flex-end\">\r\n          <CustomButton\r\n            endIcon={<PersonAddAlt1Icon />}\r\n            title=\"Add Provider \"\r\n            type={darkButtonType}\r\n            onClick={() => setOpenAddHcp(true)}\r\n          />\r\n        </Grid>\r\n        <TableLayout\r\n          search={\r\n            <CompoundSearch\r\n              queryParams={{\r\n                fetchData: fetchHospitals,\r\n                variables,\r\n                loading,\r\n                newVariables: {},\r\n              }}\r\n              setPageInfo={(data) =>\r\n                setPageInfo(data?.profiles?.pageInfo || {})\r\n              }\r\n              setProfiles={(data) => setHospitals(data?.profiles?.data || [])}\r\n              getSearchPlaceholder={(filterBy) =>\r\n                getSearchPlaceholder(filterBy)\r\n              }\r\n              filterOptions={searchOptions}\r\n            />\r\n          }\r\n        >\r\n          {hospitals.length > 0 ? (\r\n            /* ================= HMO TABLE ================= */\r\n            <Grid\r\n              container\r\n              item\r\n              direction=\"column\"\r\n              overflow=\"hidden\"\r\n              maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n            >\r\n              <EnhancedTable\r\n                headCells={hospitalTableHeadCells}\r\n                rows={hospitals}\r\n                paginationLabel=\"Hospitals per page\"\r\n                hasCheckbox={false}\r\n                dataPageInfo={pageInfo}\r\n              >\r\n                {hospitals.map((row) => {\r\n                  const {\r\n                    _id,\r\n                    profileUrl,\r\n                    doctorsCount,\r\n                    userCount,\r\n                    partnersCount,\r\n                    name,\r\n                  } = row;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      tabIndex={-1}\r\n                      key={_id}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      onClick={() => patientConsultation(_id)}\r\n                    >\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"20rem\" }}\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <Link to={`/patients`} className={classes.link}>\r\n                          <Typography\r\n                            variant=\"h3\"\r\n                            classes={{ root: classes.title }}\r\n                          >\r\n                            {userCount ? userCount : \"NA\"}\r\n                          </Typography>\r\n                        </Link>\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <Link to={`/hcps`} className={classes.link}>\r\n                          <Typography\r\n                            variant=\"h3\"\r\n                            classes={{ root: classes.title }}\r\n                          >\r\n                            {doctorsCount ? doctorsCount : \"NA\"}\r\n                          </Typography>\r\n                        </Link>\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <Link\r\n                          to={`/user-type/${_id}/partners`}\r\n                          className={classes.link}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h3\"\r\n                            classes={{ root: classes.title }}\r\n                          >\r\n                            {partnersCount ? partnersCount : \"NA\"}\r\n                          </Typography>\r\n                        </Link>\r\n                      </TableCell>\r\n\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{\r\n                          color: theme.palette.common.grey,\r\n\r\n                          width: \"15%\",\r\n                        }}\r\n                      >\r\n                        {profileUrl ? (\r\n                          <Typography\r\n                            style={{\r\n                              color: theme.palette.common.grey,\r\n                              maxWidth: \"3rem\",\r\n                            }}\r\n                            sx={{ display: \"flex\", alignItems: \"center\" }}\r\n                          >\r\n                            {trucateProfileLink(profileUrl)}\r\n                            <div style={{ marginLeft: \"1rem\" }}>\r\n                              <Copy name=\"Profile Link\" text={profileUrl} />\r\n                            </div>\r\n                          </Typography>\r\n                        ) : (\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            disableRipple\r\n                            sx={{ width: \"50%\" }}\r\n                            className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                            // onClick={() => handleGenerateLink(_id)}\r\n                          >\r\n                            Generate Link\r\n                          </Button>\r\n                        )}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={hospitalTableHeadCells}\r\n              paginationLabel=\"Hospitals per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </Grid>\r\n\r\n      <AddProviderModal\r\n        openAddHcp={openAddHcp}\r\n        handleClose={() => setOpenAddHcp(false)}\r\n        buttonType={buttonType}\r\n        id={id}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Heala;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Hm.js",["1505","1506","1507","1508","1509","1510","1511"],"import React, { useEffect, useState } from \"react\";\r\nimport { EmptyTable, NoData } from \"components/layouts\";\r\nimport { Grid, Avatar, Typography, TableCell, TableRow } from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n// import ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\n// import Copy from \"components/Copy\";\r\n// import { trucateProfileLink } from \"helpers/filterHelperFunctions\";\r\nimport { hospitalTableHeadCells5 } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\n// import { trucateString } from \"helpers/filterHelperFunctions\";\r\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport { getProviders, getPartners } from \"components/graphQL/useQuery\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { regeneratePartnerProfileUrl } from \"components/graphQL/Mutation\";\r\n\r\nconst Hm = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\r\n  const [hospitals, setHospitals] = useState([]);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [fetchHospitals, { loading, error }] = useLazyQuery(getProviders, {\r\n    variables: { userTypeId: \"61ed2354e6091400135e3d94\" },\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchHospitals()\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setHospitals(data?.getProviders?.provider || []);\r\n          setPageInfo(data?.getProviders?.pageInfo || {});\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, [fetchHospitals]);\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n      {hospitals.length > 0 ? (\r\n        /* ================= HMO TABLE ================= */\r\n        <Grid\r\n          container\r\n          item\r\n          direction=\"column\"\r\n          overflow=\"hidden\"\r\n          maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n        >\r\n          <EnhancedTable\r\n            headCells={hospitalTableHeadCells5}\r\n            rows={hospitals}\r\n            paginationLabel=\"Hospitals per page\"\r\n            hasCheckbox={false}\r\n            dataPageInfo={pageInfo}\r\n          >\r\n            {hospitals.map((row, index) => {\r\n              const {\r\n                _id,\r\n                icon,\r\n                name,\r\n                userCount,\r\n                enrolleeCount,\r\n                partnersCount,\r\n              } = row;\r\n              // const labelId = `enhanced-table-checkbox-${index}`;\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={_id}>\r\n                  <TableCell\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{ maxWidth: \"20rem\" }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        height: \"100%\",\r\n                        display: \"flex\",\r\n                        alignItems: \"left\",\r\n                      }}\r\n                    >\r\n                      <span style={{ marginRight: \"1rem\" }}>\r\n                        <Avatar\r\n                          alt={`Display Photo of ${name}`}\r\n                          src={icon}\r\n                          sx={{ width: 24, height: 24 }}\r\n                        />\r\n                      </span>\r\n                      <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Link\r\n                      to={`/patients/${_id}/filter`}\r\n                      className={classes.link}\r\n                    >\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        classes={{ root: classes.title }}\r\n                      >\r\n                        {userCount ? userCount : \"NA\"}\r\n                      </Typography>\r\n                    </Link>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Link to={`/hmo/${_id}`} className={classes.link}>\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        classes={{ root: classes.title }}\r\n                      >\r\n                        {enrolleeCount ? enrolleeCount : \"NA\"}\r\n                      </Typography>\r\n                    </Link>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Link\r\n                      to={`/partners/${_id}/filter`}\r\n                      className={classes.link}\r\n                    >\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        classes={{ root: classes.title }}\r\n                      >\r\n                        {partnersCount ? partnersCount : \"NA\"}\r\n                      </Typography>\r\n                    </Link>\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </EnhancedTable>\r\n        </Grid>\r\n      ) : (\r\n        <EmptyTable\r\n          headCells={hospitalTableHeadCells5}\r\n          paginationLabel=\"HMO per page\"\r\n        />\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Hm;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Hospital.js",["1512","1513","1514","1515","1516","1517","1518","1519","1520"],"import React, { useEffect, useState } from \"react\";\r\nimport { EmptyTable, NoData } from \"components/layouts\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Typography,\r\n  Avatar,\r\n  TableCell,\r\n  TableRow,\r\n} from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport Copy from \"components/Copy\";\r\nimport { trucateProfileLink } from \"helpers/filterHelperFunctions\";\r\nimport { hospitalTableHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport { trucateString } from \"helpers/filterHelperFunctions\";\r\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport { getProviders, getPartners } from \"components/graphQL/useQuery\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { regeneratePartnerProfileUrl } from \"components/graphQL/Mutation\";\r\n\r\nconst Hospital = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\r\n  const [hospitals, setHospitals] = useState([]);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const userTypeId = \"61ed2354e6091400135e3d94\";\r\n  const [fetchHospitals, { loading, error }] = useLazyQuery(getProviders, {\r\n    variables: { userTypeId },\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchHospitals()\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setHospitals(data?.getProviders?.provider || []);\r\n          setPageInfo(data?.getProviders?.pageInfo || {});\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, [fetchHospitals]);\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n      {hospitals.length > 0 ? (\r\n        <Grid\r\n          container\r\n          item\r\n          direction=\"column\"\r\n          overflow=\"hidden\"\r\n          maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n        >\r\n          <EnhancedTable\r\n            headCells={hospitalTableHeadCells}\r\n            rows={hospitals}\r\n            paginationLabel=\"Hospitals per page\"\r\n            hasCheckbox={false}\r\n            dataPageInfo={pageInfo}\r\n          >\r\n            {hospitals.map((row, index) => {\r\n              const { _id, name, icon, profileUrl, userCount, doctorCount } =\r\n                row;\r\n\r\n              //   const labelId = `enhanced-table-checkbox-${index}`;\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={_id}>\r\n                  <TableCell\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{ maxWidth: \"20rem\" }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        height: \"100%\",\r\n                        display: \"flex\",\r\n                        alignItems: \"left\",\r\n                      }}\r\n                    >\r\n                      <span style={{ marginRight: \"1rem\" }}>\r\n                        <Avatar\r\n                          alt={`Display Photo of ${name}`}\r\n                          src={icon}\r\n                          sx={{ width: 24, height: 24 }}\r\n                        />\r\n                      </span>\r\n                      <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Link\r\n                      to={`/patients/${_id}/filter`}\r\n                      className={classes.link}\r\n                    >\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        classes={{ root: classes.title }}\r\n                      >\r\n                        {userCount ? userCount : \"NA\"}\r\n                      </Typography>\r\n                    </Link>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Link to={`/hcps/${_id}/filter`} className={classes.link}>\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        classes={{ root: classes.title }}\r\n                      >\r\n                        {doctorCount ? doctorCount : \"NA\"}\r\n                      </Typography>\r\n                    </Link>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Link\r\n                      to={`/partners/${_id}/filter`}\r\n                      className={classes.link}\r\n                    >\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        classes={{ root: classes.title }}\r\n                      >\r\n                        {doctorCount ? doctorCount : \"NA\"}\r\n                      </Typography>\r\n                    </Link>\r\n                  </TableCell>\r\n\r\n                  <TableCell\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{\r\n                      color: theme.palette.common.grey,\r\n                      maxWidth: \"8rem\",\r\n                    }}\r\n                  >\r\n                    {profileUrl ? (\r\n                      <Typography\r\n                        style={{\r\n                          color: theme.palette.common.grey,\r\n                          maxWidth: \"8rem\",\r\n                        }}\r\n                        sx={{ display: \"flex\", alignItems: \"center\" }}\r\n                      >\r\n                        {trucateProfileLink(profileUrl)}\r\n                        <div style={{ marginLeft: \"1rem\" }}>\r\n                          <Copy name=\"Profile Link\" text={profileUrl} />\r\n                        </div>\r\n                      </Typography>\r\n                    ) : (\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        disableRipple\r\n                        className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                      >\r\n                        Generate Link\r\n                      </Button>\r\n                    )}\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </EnhancedTable>\r\n        </Grid>\r\n      ) : (\r\n        <EmptyTable\r\n          headCells={hospitalTableHeadCells}\r\n          paginationLabel=\"Hospitals per page\"\r\n        />\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Hospital;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\PatientProvider.js",["1521","1522","1523","1524","1525","1526","1527","1528","1529","1530","1531","1532","1533","1534","1535","1536","1537"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useLazyQuery, NetworkStatus } from \"@apollo/client\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\n\r\nimport PatientsRow from \"components/Rows/PatientsRow\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\n// import displayPhoto from \"assets/images/avatar.svg\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useStyles } from \"styles/patientsPageStyles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport PatientFilters from \"components/Forms/Filters/PatientFilters\";\r\nimport { patientsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo, searchOptions } from \"../../helpers/mockData\";\r\nimport {\r\n  getPatients,\r\n  getPatientsByPlan,\r\n  getPatientsByStatus,\r\n} from \"components/graphQL/useQuery\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\n\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { getSearchPlaceholder } from \"helpers/func\";\r\n\r\nconst PatientProvider = () => {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const { displayAlert } = useAlert();\r\n  const { setSelectedRows } = useActions();\r\n  const { provider } = useSelector((state) => state.patient);\r\n  const [profiles, setProfiles] = useState([]);\r\n  const { id } = useParams();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const [fetchPatient, { loading, refetch, error, variables, networkStatus }] =\r\n    useLazyQuery(getPatients);\r\n  const [\r\n    fetchPatientByStatus,\r\n    {\r\n      loading: byStatusLoading,\r\n      variables: byStatusVaribles,\r\n      refetch: byStatusRefetch,\r\n    },\r\n  ] = useLazyQuery(getPatientsByStatus);\r\n  const [\r\n    fetchPatientByPlan,\r\n    {\r\n      loading: byPlanLoading,\r\n      variables: byPlanVaribles,\r\n      refetch: byPlanRefetch,\r\n    },\r\n  ] = useLazyQuery(getPatientsByPlan);\r\n\r\n  const [pageInfo, setPageInfo] = useState({\r\n    page: 0,\r\n    totalPages: 1,\r\n    hasNextPage: false,\r\n    hasPrevPage: false,\r\n    limit: 10,\r\n    totalDocs: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchPatient({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        provider: id,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setPageInfo(data?.profiles?.pageInfo || []);\r\n          setProfiles(data?.profiles?.data || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  console.log(provider);\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(data?.profiles?.pageInfo || defaultPageInfo);\r\n        setProfiles(data?.profiles?.data || []);\r\n      })\r\n      .catch((error) => {\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n      <Grid\r\n        item\r\n        container\r\n        spacing={2}\r\n        className={classes.searchFilterContainer}\r\n      >\r\n        <Grid item container flexWrap=\"wrap\" spacing={4}></Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        filters={\r\n          <PatientFilters\r\n            setProfiles={setProfiles}\r\n            setPageInfo={setPageInfo}\r\n            queryParams={{\r\n              patientsParams: { fetchPatient, loading, refetch, variables },\r\n              patientsByStatusParams: {\r\n                byStatusLoading,\r\n                byStatusVaribles,\r\n                byStatusRefetch,\r\n                fetchPatientByStatus,\r\n              },\r\n              patientsByPlanParams: {\r\n                byPlanLoading,\r\n                byPlanVaribles,\r\n                byPlanRefetch,\r\n                fetchPatientByPlan,\r\n              },\r\n            }}\r\n          />\r\n        }\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{\r\n              fetchData: fetchPatient,\r\n              variables,\r\n              loading,\r\n              newVariables: {},\r\n            }}\r\n            setPageInfo={(data) => setPageInfo(data?.profiles?.pageInfo || {})}\r\n            setProfiles={(data) => setProfiles(data?.profiles?.data || [])}\r\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\r\n            filterOptions={searchOptions}\r\n          />\r\n        }\r\n      >\r\n        {loading || byStatusLoading || byPlanLoading ? (\r\n          <Loader />\r\n        ) : networkStatus === NetworkStatus.refetch ? (\r\n          <Loader />\r\n        ) : profiles.length > 0 ? (\r\n          /* ================= PATIENTS TABLE ================= */\r\n          <Grid\r\n            container\r\n            item\r\n            direction=\"column\"\r\n            overflow=\"hidden\"\r\n            maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n          >\r\n            <EnhancedTable\r\n              headCells={patientsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"Patients per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchPatient, {\r\n                  first: e,\r\n                  provider: id,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchPatient, page, pageInfo, {});\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const {\r\n                  dociId,\r\n                  firstName,\r\n                  lastName,\r\n                  plan,\r\n                  provider,\r\n\r\n                  consultations,\r\n                  _id,\r\n                  status,\r\n                } = row;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <PatientsRow\r\n                    key={index}\r\n                    patientData={row}\r\n                    labelId={labelId}\r\n                  />\r\n                );\r\n                // return (\r\n                //   <TableRow\r\n                //     hover\r\n                //     role=\"checkbox\"\r\n                //     aria-checked={isItemSelected}\r\n                //     tabIndex={-1}\r\n                //     key={_id}\r\n                //     style={{cursor: \"pointer\"}}\r\n                //     selected={isItemSelected}\r\n                //   >\r\n                //     <TableCell padding=\"checkbox\">\r\n                //       <Checkbox\r\n                //         onClick={() =>\r\n                //           handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                //         }\r\n                //         color=\"primary\"\r\n                //         checked={isItemSelected}\r\n                //         inputProps={{\r\n                //           \"aria-labelledby\": labelId,\r\n                //         }}\r\n                //       />\r\n                //     </TableCell>\r\n                //     <TableCell\r\n                //       id={labelId}\r\n                //       scope=\"row\"\r\n                //       align=\"left\"\r\n                //       className={classes.tableCell}\r\n                //       style={{\r\n                //         color: theme.palette.common.grey,\r\n                //         textAlign: \"left\",\r\n                //       }}\r\n                //     >\r\n                //       {dociId?.split(\"-\")[1]}\r\n                //     </TableCell>\r\n                //     <TableCell align=\"left\" className={classes.tableCell}>\r\n                //       <div\r\n                //         style={{\r\n                //           height: \"100%\",\r\n                //           display: \"flex\",\r\n                //           alignItems: \"left\",\r\n                //         }}\r\n                //       >\r\n                //         <span\r\n                //           style={{ fontSize: \"1.25rem\" }}\r\n                //         >{`${firstName} ${lastName}`}</span>\r\n                //       </div>\r\n                //     </TableCell>\r\n                //     <TableCell align=\"left\" className={classes.tableCell}>\r\n                //       {plan ? plan : \"No Plan\"}\r\n                //     </TableCell>\r\n                //     <TableCell align=\"left\" className={classes.tableCell}>\r\n                //       {provider ? provider : \"No Provider\"}\r\n                //     </TableCell>\r\n                //     <TableCell align=\"left\" className={classes.tableCell}>\r\n                //       {consultations ? consultations : 0}\r\n                //     </TableCell>\r\n                //     <TableCell align=\"left\" className={classes.tableCell}>\r\n                //       <Chip\r\n                //         label={\r\n                //           status && status === \"Active\" ? \"Active\" : \"Inactive\"\r\n                //         }\r\n                //         className={classes.badge}\r\n                //         style={{\r\n                //           background:\r\n                //             status === \"Active\"\r\n                //               ? theme.palette.common.lightGreen\r\n                //               : theme.palette.common.lightRed,\r\n                //           color:\r\n                //             status === \"Active\"\r\n                //               ? theme.palette.common.green\r\n                //               : theme.palette.common.red,\r\n                //         }}\r\n                //       />\r\n                //     </TableCell>\r\n                //     <TableCell>\r\n                //       <Button\r\n                //         variant=\"contained\"\r\n                //         className={classes.button}\r\n                //         component={Link}\r\n                //         to={`patients/${_id}`}\r\n                //         endIcon={<ArrowForwardIosIcon />}\r\n                //       >\r\n                //         View Profile\r\n                //       </Button>\r\n                //     </TableCell>\r\n                //   </TableRow>\r\n                // );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={patientsHeadCells}\r\n            paginationLabel=\"Patients per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default PatientProvider;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\DoctorProvider.js",["1538","1539","1540"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NetworkStatus } from \"@apollo/client\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  Grid,\r\n  TableRow,\r\n  TableCell,\r\n  Button,\r\n  Checkbox,\r\n  Chip,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { timeConverter } from \"components/Utilities/Time\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { useStyles } from \"../../styles/doctorsPageStyles\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport {\r\n  getDoctorsProfile,\r\n  getDoctorsProfileByStatus,\r\n} from \"components/graphQL/useQuery\";\r\nimport { hcpsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { createDOctorProfile } from \"components/graphQL/Mutation\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\r\nimport { addDoctorValidationSchema } from \"helpers/validationSchemas\";\r\nimport { Loader, Modals, CustomButton } from \"components/Utilities\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport {\r\n  addDocInitialValues,\r\n  /* cadreFilterBy, */\r\n  defaultPageInfo,\r\n  docCadreOptions,\r\n  docSpecializationsOptions,\r\n  doctorsSearchOptions,\r\n  genderType,\r\n  /*  providerFilterBy,\r\n  specializationFilterBy,\r\n  statusFilterBy, */\r\n} from \"helpers/mockData\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport DoctorFilters from \"components/Forms/Filters/DoctorsFilters\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst DoctorProvider = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { displayAlert } = useAlert();\r\n  const { id } = useParams();\r\n  const [profiles, setProfiles] = useState(\"\");\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [openAddHcp, setOpenAddHcp] = useState(false);\r\n  const [createDoc] = useMutation(createDOctorProfile);\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [fetchDoctors, { error, loading, refetch, variables, networkStatus }] =\r\n    useLazyQuery(getDoctorsProfile);\r\n  const [\r\n    fetchDoctorsByStatus,\r\n    {\r\n      loading: byStatusLoading,\r\n      refetch: byStatusRefetch,\r\n      variables: byStatusVariables,\r\n    },\r\n  ] = useLazyQuery(getDoctorsProfileByStatus);\r\n\r\n  useEffect(() => {\r\n    fetchDoctors({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        providerId: id,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setPageInfo(data.doctorProfiles.pageInfo || []);\r\n          setProfiles(data.doctorProfiles.profile || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const onSubmit = async (values) => {\r\n    const {\r\n      createdAt,\r\n      updatedAt,\r\n      firstName,\r\n      lastName,\r\n      gender,\r\n      phone,\r\n      email,\r\n      hospital,\r\n      dociId,\r\n      specialization,\r\n      dob,\r\n      cadre,\r\n      image,\r\n    } = values;\r\n    const correctDOB = timeConverter(dob);\r\n    await createDoc({\r\n      variables: {\r\n        dociId,\r\n        createdAt,\r\n        updatedAt,\r\n        firstName,\r\n        lastName,\r\n        gender,\r\n        phoneNumber: phone,\r\n        email,\r\n        hospital,\r\n        specialization,\r\n        dob: correctDOB,\r\n        cadre,\r\n        image,\r\n        providerId: \"61db6f8968b248001aec4fcb\",\r\n      },\r\n      refetchQueries: [{ query: getDoctorsProfile }],\r\n    });\r\n    setOpenAddHcp(false);\r\n  };\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const getSearchPlaceholder = (filterBy) => {\r\n    return filterBy === \"id\"\r\n      ? \"Search by ID e.g 7NE6ELLO\"\r\n      : filterBy === \"firstName\"\r\n      ? \"Search by first name e.g John\"\r\n      : filterBy === \"lastName\"\r\n      ? \"Search by last name e.g Doe\"\r\n      : \"\";\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(data.doctorProfiles.pageInfo || defaultPageInfo);\r\n        setProfiles(data.doctorProfiles.profile || []);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\r\n      <Grid\r\n        item\r\n        gap={{ md: 4, sm: 4, xs: 2 }}\r\n        direction={{ sm: \"row\", xs: \"column\" }}\r\n        container\r\n        justifyContent=\"flex-end\"\r\n      >\r\n        <Grid item>\r\n          <CustomButton\r\n            endIcon={<AddIcon />}\r\n            title=\"Add Doctor\"\r\n            type={buttonType}\r\n            onClick={() => setOpenAddHcp(true)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      {/* ========= FILTERS =========== */}\r\n\r\n      <TableLayout\r\n        filters={\r\n          <DoctorFilters\r\n            setProfiles={setProfiles}\r\n            setPageInfo={setPageInfo}\r\n            queryParams={{\r\n              doctorsParams: { fetchDoctors, loading, refetch, variables },\r\n              doctorsByStatusParams: {\r\n                byStatusLoading,\r\n                byStatusVariables,\r\n                byStatusRefetch,\r\n                fetchDoctorsByStatus,\r\n              },\r\n            }}\r\n          />\r\n        }\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{ fetchData: fetchDoctors, variables, loading }}\r\n            setPageInfo={(data) =>\r\n              setPageInfo(data.doctorProfiles.pageInfo || {})\r\n            }\r\n            setProfiles={(data) =>\r\n              setProfiles(data.doctorProfiles.profile || [])\r\n            }\r\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\r\n            filterOptions={doctorsSearchOptions}\r\n          />\r\n        }\r\n      >\r\n        {loading ? (\r\n          <Loader />\r\n        ) : byStatusLoading ? (\r\n          <Loader />\r\n        ) : networkStatus === NetworkStatus.refetch ? (\r\n          <Loader />\r\n        ) : profiles.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={hcpsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"Doctors per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchDoctors, {\r\n                  first: e,\r\n                  providerId: id,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchDoctors, page, pageInfo, id);\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const {\r\n                  _id,\r\n                  dociId,\r\n                  firstName,\r\n                  provider,\r\n                  status,\r\n                  specialization,\r\n                  consultations,\r\n                  picture,\r\n                  lastName,\r\n                } = row;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        minWidth: \"10rem\",\r\n                      }}\r\n                    >\r\n                      {dociId && dociId.split(\"-\")[1]}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"left\",\r\n                        }}\r\n                      >\r\n                        <span style={{ marginRight: \"1rem\" }}>\r\n                          <Avatar\r\n                            alt={`Display Photo of ${firstName}`}\r\n                            src={picture ? picture : displayPhoto}\r\n                            sx={{ width: 24, height: 24 }}\r\n                          />\r\n                        </span>\r\n                        <span style={{ fontSize: \"1.25rem\" }}>\r\n                          {firstName} {lastName}\r\n                        </span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.grey }}\r\n                    >\r\n                      {specialization}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      {consultations ? consultations : 0}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.grey }}\r\n                    >\r\n                      {provider ? provider : \"No Provider\"}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Chip\r\n                        label={\r\n                          status && status === \"Active\" ? \"Active\" : \"Inactive\"\r\n                        }\r\n                        className={classes.badge}\r\n                        style={{\r\n                          background:\r\n                            status === \"Active\"\r\n                              ? theme.palette.common.lightGreen\r\n                              : theme.palette.common.lightRed,\r\n                          color:\r\n                            status === \"Active\"\r\n                              ? theme.palette.common.green\r\n                              : theme.palette.common.red,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        className={classes.button}\r\n                        component={Link}\r\n                        to={`hcps/${_id}`}\r\n                        endIcon={<ArrowForwardIosIcon />}\r\n                      >\r\n                        View Doctor\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={hcpsHeadCells}\r\n            paginationLabel=\"Doctors per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n      {/* ADD Doctor MODAL */}\r\n      <Modals\r\n        isOpen={openAddHcp}\r\n        title=\"Add Doctor\"\r\n        rowSpacing={5}\r\n        height=\"auto\"\r\n        width={{ sm: \"50vw\", xs: \"90vw\" }}\r\n        handleClose={() => setOpenAddHcp(false)}\r\n      >\r\n        <Formik\r\n          initialValues={addDocInitialValues}\r\n          onSubmit={onSubmit}\r\n          validationSchema={addDoctorValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"1rem\" }}>\r\n                <Grid container direction=\"column\" gap={2}>\r\n                  <Grid item container direction=\"column\" gap={1}>\r\n                    <Grid item container spacing={2}>\r\n                      <Grid item container xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"First Name\"\r\n                          id=\"firstName\"\r\n                          name=\"firstName\"\r\n                          placeholder=\"Enter first name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item container xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Last Name\"\r\n                          id=\"lastName\"\r\n                          name=\"lastName\"\r\n                          placeholder=\"Enter last name\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid item container direction=\"column\" gap={2}>\r\n                      <Grid item container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"date\"\r\n                            name=\"dob\"\r\n                            label=\"DOB\"\r\n                            setFieldValue={setFieldValue}\r\n                            setValues={setValues}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <Grid container direction=\"column\">\r\n                            <FormikControl\r\n                              control=\"select\"\r\n                              options={docSpecializationsOptions}\r\n                              name=\"specialization\"\r\n                              label=\"Specialization\"\r\n                              placeholder=\"Specialization\"\r\n                            />\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container direction=\"column\" gap={2}>\r\n                    <Grid item container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          label=\"Gender\"\r\n                          id=\"gender\"\r\n                          name=\"gender\"\r\n                          options={genderType}\r\n                          placeholder=\"Gender\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Phone Number\"\r\n                          id=\"phone\"\r\n                          name=\"phone\"\r\n                          placeholder=\"Enter last Phone number\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item container direction=\"column\" gap={2}>\r\n                      <Grid item container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"input\"\r\n                            label=\"Hospital\"\r\n                            id=\"hospital\"\r\n                            name=\"hospital\"\r\n                            placeholder=\"Enter hospital Name\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6} marginBottom={{ xs: 1 }}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={docCadreOptions}\r\n                            name=\"cadre\"\r\n                            label=\"Cadre\"\r\n                            placeholder=\"Select Cadre\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container spacing={2} alignItems=\"center\">\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"file\"\r\n                        name=\"image\"\r\n                        label=\"Profile Pics\"\r\n                        setFieldValue={setFieldValue}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        label=\"Heala-ID\"\r\n                        id=\"dociId\"\r\n                        name=\"dociId\"\r\n                        placeholder=\"Enter Heala ID\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <CustomButton\r\n                      title=\"Add Doctor\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default DoctorProvider;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\PartnersProvider.js",["1541","1542","1543","1544","1545","1546","1547","1548","1549","1550","1551"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\r\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  Checkbox,\r\n  TableCell,\r\n  Avatar,\r\n  TableRow,\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { categoryFilterOptions, defaultPageInfo } from \"helpers/mockData\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport {\r\n  changeTableLimit,\r\n  deleteItem,\r\n  deleteVar,\r\n  filterData,\r\n  handlePageChange,\r\n  banks,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport DeletePartner from \"components/modals/DeleteOrDisable\";\r\nimport { partnersHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport {\r\n  addPartner,\r\n  addPartnerCategory,\r\n  regeneratePartnerProfileUrl,\r\n} from \"components/graphQL/Mutation\";\r\nimport {\r\n  getPartners,\r\n  getSingleProvider,\r\n  getProviders,\r\n  DELETE_PARTNER,\r\n} from \"components/graphQL/useQuery\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport {\r\n  addNewPartnerValidationSchema,\r\n  addPartnerValidationSchema,\r\n  filterPartnersValidationSchema,\r\n} from \"helpers/validationSchemas\";\r\nimport Filter from \"components/Forms/Filters\";\r\nimport { PageInfo } from \"components/graphQL/fragment\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport isFirstDayOfMonth from \"date-fns/isFirstDayOfMonth/index\";\r\n\r\nconst PartnersProvider = () => {\r\n  const theme = useTheme();\r\n  const { id } = useParams();\r\n  const classes = useStyles();\r\n  const { displayAlert } = useAlert();\r\n  /* const [setCategoryDatas] = useState([]); */\r\n  const { setSelectedRows } = useActions();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [partner, setPartners] = useState([]);\r\n  const [dropDown, setDropDown] = useState([]);\r\n  const [addPartners] = useMutation(addPartner);\r\n  const categoryData = useQuery(getSingleProvider);\r\n  const [delete_partner] = useLazyQuery(DELETE_PARTNER);\r\n  /*   const [searchPartner, setSearchPartner] = useState(\"\"); */\r\n  const [isDeleting, setIsDeleting] = useState({});\r\n  const [addPartnerCat] = useMutation(addPartnerCategory);\r\n  const { data: da, loading: load } = useQuery(getProviders);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [openAddPartner, setOpenAddPartner] = useState(false);\r\n  const [openFilterPartner, setOpenFilterPartner] = useState(false);\r\n  const [openDeletePartner, setOpenDeletePartner] = useState(false);\r\n  const [partnerToDelete, setPartnerToDelete] = useState(null);\r\n  const [partnerFilterValues, setPartnerFilterValues] = useState({\r\n    category: \"\",\r\n  });\r\n  const { selectedRows /* page */ } = useSelector((state) => state.tables);\r\n  const [openAddPartnerCategory, setAddPartnerCategory] = useState(false);\r\n  const [fetchPartners, { loading, error, refetch, variables }] =\r\n    useLazyQuery(getPartners);\r\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\r\n\r\n  const specializations = [\r\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\r\n    { key: \"Hospital\", value: \"Hospital\" },\r\n  ];\r\n  const categoryOptions = [\r\n    { key: \"Diagnostics\", value: \"diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"pharmacy\" },\r\n    { key: \"Hospital\", value: \"hospital\" },\r\n  ];\r\n  const classificationOptions = [\r\n    { key: \"Primary Healthcare\", value: \"Primary Healthcare\" },\r\n    { key: \"Secondary Healthcare\", value: \"Secondary Healthcare\" },\r\n  ];\r\n\r\n  const specializationOptions = [\r\n    { key: \"Dental Care\", value: \"Dental Care\" },\r\n    { key: \"Eye Clinic\", value: \"Eye Clinic\" },\r\n    { key: \"Skin Care\", value: \"Skin Care\" },\r\n    { key: \"Mental Care\", value: \"Mental Care\" },\r\n  ];\r\n  const specializations5 = [\r\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\r\n    { key: \"Hospital\", value: \"Hospital\" },\r\n  ];\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const darkButtonType = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const initialValues = {\r\n    Name: \"\",\r\n    date: \"\",\r\n    category: \"\",\r\n  };\r\n\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    email: \"\",\r\n    specialization: \"\",\r\n    category: \"\",\r\n    account: \"\",\r\n    address: \"\",\r\n    phone: \"\",\r\n    classification: \"\",\r\n    bank: \"\",\r\n    image: null,\r\n    provider: \"\",\r\n  };\r\n\r\n  const initialValues2 = {\r\n    category: \"\",\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then((res) => {\r\n        const { data } = res;\r\n        if (data) {\r\n          setPartners(data?.getPartners?.data || []);\r\n          setPageInfo(data?.getPartners?.pageInfo || defaultPageInfo);\r\n        }\r\n        if (!data) {\r\n          setPartners(res?.getPartners?.data || []);\r\n          setPageInfo(res?.getPartners?.pageInfo || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  const fetchPartnersData = async () => {\r\n    const res = fetchPartners({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        provider: id,\r\n      },\r\n    });\r\n    setTableData(res, \"Couldn't fetch Partners data\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPartnersData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (da) {\r\n      const datas = da.getProviders.provider;\r\n      setDropDown(\r\n        datas &&\r\n          datas.map((i) => {\r\n            return { key: i.name, value: i._id };\r\n          })\r\n      );\r\n    }\r\n  }, [da]);\r\n\r\n  useEffect(() => {\r\n    (partner || []).map((p) => {\r\n      const newIsDeleting = isDeleting;\r\n      setIsDeleting({ [p._id]: false, ...newIsDeleting });\r\n      return null;\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [partner]);\r\n\r\n  const onSubmit = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const onSubmit2 = async (values, onSubmitProps) => {\r\n    const { category } = values;\r\n\r\n    try {\r\n      const addCatRes = await addPartnerCat({\r\n        variables: {\r\n          name: category,\r\n        },\r\n      });\r\n\r\n      if (addCatRes?.addPartner?.partner) {\r\n        setAddPartnerCategory(false);\r\n        onSubmitProps.resetForm();\r\n        const res = refetch();\r\n        setTableData(res, \"Couldn't fetch partners.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const onSubmit1 = async (values, onSubmitProps) => {\r\n    console.log(values);\r\n    let {\r\n      name,\r\n      email,\r\n      category,\r\n      phone,\r\n      bank,\r\n      specialization,\r\n      provider,\r\n      image,\r\n      account,\r\n    } = values;\r\n    name = name.trim();\r\n\r\n    try {\r\n      await addPartners({\r\n        variables: {\r\n          name,\r\n          email,\r\n          category,\r\n          specialization,\r\n          account,\r\n          phone,\r\n          bank,\r\n          logoImageUrl: image,\r\n          providerId: provider,\r\n        },\r\n        refetchQueries: [{ query: getPartners }],\r\n      });\r\n      enqueueSnackbar(\"Partner added successfully\", {\r\n        variant: \"success\",\r\n      });\r\n      onSubmitProps.resetForm();\r\n      setOpenAddPartner(false);\r\n    } catch (err) {\r\n      console.log(err, \"err\");\r\n      enqueueSnackbar(\"Email is already taken\", {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const onFilterCategoryChange = async (value) => {\r\n    try {\r\n      deleteVar(variables);\r\n      setPartnerFilterValues({ ...partnerFilterValues, category: value });\r\n      const filterVariables = { category: value };\r\n\r\n      const res = filterData(filterVariables, {\r\n        fetchData: fetchPartners,\r\n        refetch: refetch,\r\n        variables: variables,\r\n      });\r\n      await setTableData(res, \"couldn't filter table.\");\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setPartnerFilterValues, \"\");\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\r\n    setFilterValue(defaultVal);\r\n\r\n    deleteVar(variables);\r\n\r\n    const res = refetch();\r\n    await setTableData(res, \"couldn't filter table.\");\r\n  };\r\n  const [newProfileUrl, setNewProfileUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setNewProfileUrl(daa?.regeneratePartnerProfileUrl?.partner?.profileUrl);\r\n  }, [daa]);\r\n  const [Id, setId] = useState(\"\");\r\n  const handleGenerateLink = async (id) => {\r\n    setId(id);\r\n    await regenerate({\r\n      variables: {\r\n        id,\r\n      },\r\n      refetchQueries: [\r\n        {\r\n          query: getPartners,\r\n          variables: {\r\n            variables: pageInfo.page,\r\n            limit: PageInfo.limit,\r\n            provider: id,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const z = (id) => {\r\n    let b = \"\";\r\n    const m = daa?.regeneratePartnerProfileUrl?.partner?._id;\r\n    if (id === m) {\r\n      b = m;\r\n    } else {\r\n      b = \"\";\r\n    }\r\n    return b;\r\n  };\r\n  useEffect(() => {\r\n    partner.map((item) => {\r\n      if (item._id === Id) {\r\n        return {\r\n          ...item,\r\n          profileUrl: newProfileUrl,\r\n        };\r\n      }\r\n    });\r\n\r\n    //eslint-disable-next-line\r\n  }, [Id, newProfileUrl]);\r\n  if (error || categoryData.error)\r\n    return <NoData error={error || categoryData.error} />;\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      gap={{ sm: 4, xs: 2 }}\r\n      flexWrap=\"nowrap\"\r\n      height=\"100%\"\r\n    >\r\n      <Grid\r\n        item\r\n        container\r\n        gap={2}\r\n        direction={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          justifyContent=\"flex-end\"\r\n          alignItems=\"center\"\r\n          flex={{ sm: 1, xs: 1, md: 1 }}\r\n        >\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<PersonAddAlt1Icon />}\r\n              title=\"Add \"\r\n              type={darkButtonType}\r\n              onClick={() => setOpenAddPartner(true)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        filters={\r\n          <Filter\r\n            onHandleChange={(e) => onFilterCategoryChange(e?.target?.value)}\r\n            onClickClearBtn={() => onFilterCategoryChange(\"\")}\r\n            options={[{ key: \"Category\", value: \"\" }, ...categoryFilterOptions]}\r\n            name=\"category\"\r\n            placeholder=\"None\"\r\n            value={partnerFilterValues.category}\r\n            hasClearBtn={true}\r\n            disable={loading}\r\n          />\r\n        }\r\n      >\r\n        {load || loading ? (\r\n          <Loader />\r\n        ) : partner.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={partnersHeadCells}\r\n              rows={partner}\r\n              paginationLabel=\"Partner per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchPartners, {\r\n                  first: e,\r\n                  provider: id,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchPartners, page, pageInfo, id);\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {partner.map((row, index) => {\r\n                const isItemSelected = isSelected(row.id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                const { _id, logoImageUrl, name, email, category } = row;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ maxWidth: \"20rem\" }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"left\",\r\n                        }}\r\n                      >\r\n                        <span style={{ marginRight: \"1rem\" }}>\r\n                          <Avatar\r\n                            alt={`Display Photo of ${name}`}\r\n                            src={logoImageUrl}\r\n                            sx={{ width: 24, height: 24 }}\r\n                          />\r\n                        </span>\r\n                        <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {email}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {category}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={partnersHeadCells}\r\n            paginationLabel=\"Doctors per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n      <Modals\r\n        isOpen={openFilterPartner}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        width={{ sm: \"40vw\", xs: \"90vw\", md: \"40vw\" }}\r\n        handleClose={() => setOpenFilterPartner(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={onSubmit}\r\n          validateOnBlur={false}\r\n          validationSchema={filterPartnersValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={3}>\r\n                  <Grid item marginBottom={3}>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          name=\"Name\"\r\n                          label=\"Name\"\r\n                          placeholder=\"Select name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializations}\r\n                          name=\"date\"\r\n                          label=\"Date\"\r\n                          placeholder=\"Choose Date\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  container\r\n                  spacing={2}\r\n                  style={{ marginBottom: \"10rem\" }}\r\n                >\r\n                  <Grid item xs={6}>\r\n                    <FormikControl\r\n                      control=\"select\"\r\n                      options={specializations}\r\n                      name=\"category\"\r\n                      label=\"Category\"\r\n                      placeholder=\"Select Category\"\r\n                    />\r\n                  </Grid>\r\n                  {/* Placeholder grid */}\r\n                  <Grid item md></Grid>\r\n                </Grid>\r\n                <Grid item container xs={12}>\r\n                  <CustomButton\r\n                    title=\"Apply Filter\"\r\n                    width=\"100%\"\r\n                    type={buttonType}\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                  />\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      {/* ADD NEW PARTER MODAL */}\r\n      <Modals\r\n        isOpen={openAddPartner}\r\n        title=\"Add Partners\"\r\n        rowSpacing={5}\r\n        handleClose={() => setOpenAddPartner(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={addNewPartnerValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty, values, setFieldValue }) => {\r\n            const { classification, category } = values;\r\n            return (\r\n              <Form style={{ marginTop: \"1rem\" }}>\r\n                <Grid container direction=\"column\" gap={1.5}>\r\n                  <Grid item container>\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Name\"\r\n                          id=\"name\"\r\n                          name=\"name\"\r\n                          placeholder=\"Enter Partner name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Email\"\r\n                          id=\"name\"\r\n                          name=\"email\"\r\n                          placeholder=\"Enter Email\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\" Account Number\"\r\n                          id=\"account\"\r\n                          name=\"account\"\r\n                          placeholder=\"Enter Account Number\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Phone Number\"\r\n                          id=\"phone\"\r\n                          name=\"phone\"\r\n                          placeholder=\"Enter Phone Number\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={categoryOptions}\r\n                          name=\"category\"\r\n                          label=\"Category\"\r\n                          placeholder=\"Category\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={banks}\r\n                          name=\"bank\"\r\n                          label=\"Bank\"\r\n                          placeholder=\"Select Bank\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    {category === \"hospital\" && (\r\n                      <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={dropDown}\r\n                            name=\"provider\"\r\n                            label=\"Provider\"\r\n                            id=\"provider\"\r\n                            placeholder=\"Select Provider\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={classificationOptions}\r\n                            name=\"classification\"\r\n                            label=\"Classification\"\r\n                            id=\"classification\"\r\n                            placeholder=\"select classification\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    )}\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"file\"\r\n                          name=\"image\"\r\n                          label=\"Company Logo\"\r\n                          setFieldValue={setFieldValue}\r\n                        />\r\n                      </Grid>\r\n                      {classification === \"Secondary Healthcare\" && (\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={specializationOptions}\r\n                            name=\"specialization\"\r\n                            label=\"Specialization\"\r\n                            id=\"specialization\"\r\n                            placeholder=\"Select Specialization\"\r\n                          />\r\n                        </Grid>\r\n                      )}\r\n                    </Grid>\r\n                    <Grid item container flexWrap=\"nowrap\">\r\n                      <Grid item container>\r\n                        <FormikControl\r\n                          control=\"textarea\"\r\n                          name=\"address\"\r\n                          minRows={3}\r\n                          label=\"Address\"\r\n                          placeholder=\"Enter address\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container sx={{ mt: 1 }}>\r\n                    <CustomButton\r\n                      title=\"Add Partner\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      {/* Add Partner Category */}\r\n      <Modals\r\n        isOpen={openAddPartnerCategory}\r\n        title=\"Add Partners Category\"\r\n        rowSpacing={5}\r\n        handleClose={() => setAddPartnerCategory(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues2}\r\n          onSubmit={onSubmit2}\r\n          validationSchema={addPartnerValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid container direction=\"column\" gap={3}>\r\n                  <Grid item container>\r\n                    <Grid item container direction=\"column\" gap={1}>\r\n                      <Grid item container>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializations5}\r\n                          name=\"category\"\r\n                          label=\"Category\"\r\n                          placeholder=\"Specialization\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <CustomButton\r\n                      title=\"Add Partner\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n      <DeletePartner\r\n        open={openDeletePartner}\r\n        setOpen={setOpenDeletePartner}\r\n        title=\"Delete Partner\"\r\n        btnValue=\"delete\"\r\n        onConfirm={async () => {\r\n          const res = deleteItem(\r\n            delete_partner,\r\n            partnerToDelete,\r\n            setPartnerToDelete,\r\n            refetch,\r\n            Typography,\r\n            enqueueSnackbar,\r\n            setIsDeleting,\r\n            isDeleting\r\n          );\r\n          setOpenDeletePartner(false);\r\n          await setTableData(res, \"Couldn't refetch Partners\");\r\n        }}\r\n        confirmationMsg=\"delete partner\"\r\n        onCancel={() => {\r\n          setPartnerToDelete(null);\r\n        }}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default PartnersProvider;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\FinanceIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\PatientsRow.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\SettingsIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\RefferalsIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\SubscriptionIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Healas.js",["1552","1553","1554","1555","1556","1557","1558","1559","1560","1561","1562","1563"],"import React, { useEffect, useState } from \"react\";\r\nimport { EmptyTable, NoData } from \"components/layouts\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Avatar,\r\n  Typography,\r\n  TableCell,\r\n  TableRow,\r\n} from \"@mui/material\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport Copy from \"components/Copy\";\r\nimport { trucateProfileLink } from \"helpers/filterHelperFunctions\";\r\nimport { hospitalTableHeadCells2 } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport { trucateString } from \"helpers/filterHelperFunctions\";\r\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport { getProviders, getPartners } from \"components/graphQL/useQuery\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { regeneratePartnerProfileUrl } from \"components/graphQL/Mutation\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\n\r\nconst Healas = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { id } = useParams();\r\n  const { patientConsultation } = useActions();\r\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\r\n  const [hospitals, setHospitals] = useState([]);\r\n\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [fetchHospitals, { loading, error }] = useLazyQuery(getProviders, {\r\n    variables: { userTypeId: id },\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchHospitals()\r\n      .then(({ data }) => {\r\n        console.log(data);\r\n        if (data) {\r\n          setHospitals(data?.getProviders?.provider || []);\r\n          setPageInfo(data?.getProviders?.pageInfo || {});\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, [fetchHospitals]);\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n      {hospitals.length > 0 ? (\r\n        /* ================= HMO TABLE ================= */\r\n        <Grid\r\n          container\r\n          item\r\n          direction=\"column\"\r\n          overflow=\"hidden\"\r\n          maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n        >\r\n          <EnhancedTable\r\n            headCells={hospitalTableHeadCells2}\r\n            rows={hospitals}\r\n            paginationLabel=\"Hospitals per page\"\r\n            hasCheckbox={false}\r\n            dataPageInfo={pageInfo}\r\n          >\r\n            {hospitals.map((row) => {\r\n              const {\r\n                _id,\r\n                profileUrl,\r\n                doctorsCount,\r\n                userCount,\r\n                partnersCount,\r\n                name,\r\n                enrolleCount,\r\n              } = row;\r\n\r\n              return (\r\n                <TableRow\r\n                  hover\r\n                  role=\"checkbox\"\r\n                  tabIndex={-1}\r\n                  key={_id}\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={() => patientConsultation(_id)}\r\n                >\r\n                  <TableCell\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{ maxWidth: \"20rem\" }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        height: \"100%\",\r\n                        display: \"flex\",\r\n                        alignItems: \"left\",\r\n                      }}\r\n                    >\r\n                      <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Link to={`/patients`} className={classes.link}>\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        classes={{ root: classes.title }}\r\n                      >\r\n                        {userCount ? userCount : \"NA\"}\r\n                      </Typography>\r\n                    </Link>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Link to={`/hcps`} className={classes.link}>\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        classes={{ root: classes.title }}\r\n                      >\r\n                        {doctorsCount ? doctorsCount : \"NA\"}\r\n                      </Typography>\r\n                    </Link>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Link\r\n                      to={`/user-type/${_id}/partners`}\r\n                      className={classes.link}\r\n                    >\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        classes={{ root: classes.title }}\r\n                      >\r\n                        {partnersCount ? partnersCount : \"NA\"}\r\n                      </Typography>\r\n                    </Link>\r\n                  </TableCell>\r\n\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Link to={`/hmo/${_id}`} className={classes.link}>\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        classes={{ root: classes.title }}\r\n                      >\r\n                        {enrolleCount ? enrolleCount : \"NA\"}\r\n                      </Typography>\r\n                    </Link>\r\n                  </TableCell>\r\n\r\n                  <TableCell\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{\r\n                      color: theme.palette.common.grey,\r\n                      // maxWidth: \"2rem\",\r\n                      width: \"15%\",\r\n                    }}\r\n                  >\r\n                    {profileUrl ? (\r\n                      <Typography\r\n                        style={{\r\n                          color: theme.palette.common.grey,\r\n                          maxWidth: \"3rem\",\r\n                        }}\r\n                        sx={{ display: \"flex\", alignItems: \"center\" }}\r\n                      >\r\n                        {trucateProfileLink(profileUrl)}\r\n                        <div style={{ marginLeft: \"1rem\" }}>\r\n                          <Copy name=\"Profile Link\" text={profileUrl} />\r\n                        </div>\r\n                      </Typography>\r\n                    ) : (\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        disableRipple\r\n                        sx={{ width: \"50%\" }}\r\n                        className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                        // onClick={() => handleGenerateLink(_id)}\r\n                      >\r\n                        Generate Link\r\n                      </Button>\r\n                    )}\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </EnhancedTable>\r\n        </Grid>\r\n      ) : (\r\n        <EmptyTable\r\n          headCells={hospitalTableHeadCells2}\r\n          paginationLabel=\"Hospitals per page\"\r\n        />\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Healas;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaPage.js",["1564","1565","1566","1567","1568","1569","1570","1571","1572","1573","1574","1575","1576","1577","1578"],"import React, { useEffect, useState } from \"react\";\r\nimport { EmptyTable, NoData } from \"components/layouts\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Avatar,\r\n  Typography,\r\n  TableCell,\r\n  TableRow,\r\n} from \"@mui/material\";\r\nimport AddProviderModal from \"components/Forms/AddProviderModal\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { addDoctorValidationSchema } from \"helpers/validationSchemas\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport Copy from \"components/Copy\";\r\nimport { trucateProfileLink } from \"helpers/filterHelperFunctions\";\r\nimport { hospitalTableHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport { trucateString } from \"helpers/filterHelperFunctions\";\r\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport { getProviders, getPartners } from \"components/graphQL/useQuery\";\r\nimport { regeneratePartnerProfileUrl } from \"components/graphQL/Mutation\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { HealaSearchOptions } from \"helpers/mockData\";\r\nimport { HealGgetSearchPlaceholder } from \"helpers/func\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst HealaPage = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { id } = useParams();\r\n  const { patientConsultation } = useActions();\r\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\r\n  const [hospitals, setHospitals] = useState([]);\r\n  const darkButtonType = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [fetchHospitals, { loading, error, variables }] = useLazyQuery(\r\n    getProviders,\r\n    {\r\n      variables: { userTypeId: id },\r\n    }\r\n  );\r\n  const [openAddHcp, setOpenAddHcp] = useState(false);\r\n  useEffect(() => {\r\n    fetchHospitals()\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setHospitals(data?.getProviders?.provider || []);\r\n          setPageInfo(data?.getProviders?.pageInfo || {});\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, [fetchHospitals]);\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <>\r\n      <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n        <Grid item container justifyContent=\"flex-end\">\r\n          <CustomButton\r\n            endIcon={<PersonAddAlt1Icon />}\r\n            title=\"Add Provider\"\r\n            type={darkButtonType}\r\n            onClick={() => setOpenAddHcp(true)}\r\n          />\r\n        </Grid>\r\n        <TableLayout\r\n          search={\r\n            <CompoundSearch\r\n              queryParams={{\r\n                fetchData: fetchHospitals,\r\n                variables,\r\n                loading,\r\n                newVariables: {},\r\n              }}\r\n              setPageInfo={(data) =>\r\n                setPageInfo(data?.profiles?.pageInfo || {})\r\n              }\r\n              setProfiles={(data) => setHospitals(data?.profiles?.data || [])}\r\n              getSearchPlaceholder={(filterBy) =>\r\n                HealGgetSearchPlaceholder(filterBy)\r\n              }\r\n              filterOptions={HealaSearchOptions}\r\n              showHeala={true}\r\n            />\r\n          }\r\n        >\r\n          {hospitals.length > 0 ? (\r\n            /* ================= HMO TABLE ================= */\r\n            <Grid\r\n              container\r\n              item\r\n              direction=\"column\"\r\n              overflow=\"hidden\"\r\n              maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n            >\r\n              <EnhancedTable\r\n                headCells={hospitalTableHeadCells}\r\n                rows={hospitals}\r\n                paginationLabel=\"Hospitals per page\"\r\n                hasCheckbox={false}\r\n                dataPageInfo={pageInfo}\r\n              >\r\n                {hospitals.map((row) => {\r\n                  const {\r\n                    _id,\r\n                    profileUrl,\r\n                    doctorsCount,\r\n                    userCount,\r\n                    partnersCount,\r\n                    name,\r\n                  } = row;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      tabIndex={-1}\r\n                      key={_id}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      onClick={() => patientConsultation(_id)}\r\n                    >\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"20rem\" }}\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <Link\r\n                          to={`/user-type/heala/${id}/${_id}`}\r\n                          className={classes.link}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h3\"\r\n                            classes={{ root: classes.title }}\r\n                          >\r\n                            {userCount ? userCount : \"NA\"}\r\n                          </Typography>\r\n                        </Link>\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <Link\r\n                          to={`/user-type/heala/doctor/${id}/${_id}`}\r\n                          className={classes.link}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h3\"\r\n                            classes={{ root: classes.title }}\r\n                          >\r\n                            {doctorsCount ? doctorsCount : \"NA\"}\r\n                          </Typography>\r\n                        </Link>\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <Link\r\n                          to={`/user-type/heala/partner/${id}/${_id}`}\r\n                          className={classes.link}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h3\"\r\n                            classes={{ root: classes.title }}\r\n                          >\r\n                            {partnersCount ? partnersCount : \"NA\"}\r\n                          </Typography>\r\n                        </Link>\r\n                      </TableCell>\r\n\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{\r\n                          color: theme.palette.common.grey,\r\n\r\n                          width: \"15%\",\r\n                        }}\r\n                      >\r\n                        {profileUrl ? (\r\n                          <Typography\r\n                            style={{\r\n                              color: theme.palette.common.grey,\r\n                              maxWidth: \"3rem\",\r\n                            }}\r\n                            sx={{ display: \"flex\", alignItems: \"center\" }}\r\n                          >\r\n                            {trucateProfileLink(profileUrl)}\r\n                            <div style={{ marginLeft: \"1rem\" }}>\r\n                              <Copy name=\"Profile Link\" text={profileUrl} />\r\n                            </div>\r\n                          </Typography>\r\n                        ) : (\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            disableRipple\r\n                            sx={{ width: \"50%\" }}\r\n                            className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                            // onClick={() => handleGenerateLink(_id)}\r\n                          >\r\n                            Generate Link\r\n                          </Button>\r\n                        )}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={hospitalTableHeadCells}\r\n              paginationLabel=\"Hospitals per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </Grid>\r\n\r\n      <AddProviderModal\r\n        openAddHcp={openAddHcp}\r\n        handleClose={() => setOpenAddHcp(false)}\r\n        buttonType={buttonType}\r\n        id={id}\r\n        pushTo={`/user-type/heala/${id}`}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HealaPage;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HospitalPage.js",["1579","1580","1581","1582","1583","1584","1585","1586","1587","1588","1589","1590","1591","1592","1593","1594","1595"],"import React, { useEffect, useState } from \"react\";\r\nimport { EmptyTable, NoData } from \"components/layouts\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Avatar,\r\n  Typography,\r\n  TableCell,\r\n  TableRow,\r\n} from \"@mui/material\";\r\nimport AddProviderModal from \"components/Forms/AddProviderModal\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { addDoctorValidationSchema } from \"helpers/validationSchemas\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport Copy from \"components/Copy\";\r\nimport { trucateProfileLink } from \"helpers/filterHelperFunctions\";\r\nimport { hospitalTableHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport { trucateString } from \"helpers/filterHelperFunctions\";\r\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport { getProviders, getPartners } from \"components/graphQL/useQuery\";\r\nimport { regeneratePartnerProfileUrl } from \"components/graphQL/Mutation\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { searchOptions } from \"helpers/mockData\";\r\nimport { getSearchPlaceholder } from \"helpers/func\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst HospitalPage = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { id } = useParams();\r\n  const { patientConsultation } = useActions();\r\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\r\n  const [hospitals, setHospitals] = useState([]);\r\n  const darkButtonType = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [fetchHospitals, { loading, error, variables }] = useLazyQuery(\r\n    getProviders,\r\n    {\r\n      variables: { userTypeId: id },\r\n    }\r\n  );\r\n  const onSubmit = () => console.log(\"onSubmit\");\r\n  const [openAddHcp, setOpenAddHcp] = useState(false);\r\n  useEffect(() => {\r\n    fetchHospitals()\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setHospitals(data?.getProviders?.provider || []);\r\n          setPageInfo(data?.getProviders?.pageInfo || {});\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, [fetchHospitals]);\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <>\r\n      <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n        <Grid item container justifyContent=\"flex-end\">\r\n          <CustomButton\r\n            endIcon={<PersonAddAlt1Icon />}\r\n            title=\"Add Provider\"\r\n            type={darkButtonType}\r\n            onClick={() => setOpenAddHcp(true)}\r\n          />\r\n        </Grid>\r\n        <TableLayout\r\n          search={\r\n            <CompoundSearch\r\n              queryParams={{\r\n                fetchData: fetchHospitals,\r\n                variables,\r\n                loading,\r\n                newVariables: {},\r\n              }}\r\n              setPageInfo={(data) =>\r\n                setPageInfo(data?.profiles?.pageInfo || {})\r\n              }\r\n              setProfiles={(data) => setHospitals(data?.profiles?.data || [])}\r\n              getSearchPlaceholder={(filterBy) =>\r\n                getSearchPlaceholder(filterBy)\r\n              }\r\n              filterOptions={searchOptions}\r\n            />\r\n          }\r\n        >\r\n          {hospitals.length > 0 ? (\r\n            /* ================= HMO TABLE ================= */\r\n            <Grid\r\n              container\r\n              item\r\n              direction=\"column\"\r\n              overflow=\"hidden\"\r\n              maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n            >\r\n              <EnhancedTable\r\n                headCells={hospitalTableHeadCells}\r\n                rows={hospitals}\r\n                paginationLabel=\"Hospitals per page\"\r\n                hasCheckbox={false}\r\n                dataPageInfo={pageInfo}\r\n              >\r\n                {hospitals.map((row) => {\r\n                  const {\r\n                    _id,\r\n                    profileUrl,\r\n                    doctorsCount,\r\n                    userCount,\r\n                    partnersCount,\r\n                    name,\r\n                  } = row;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      tabIndex={-1}\r\n                      key={_id}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      onClick={() => patientConsultation(_id)}\r\n                    >\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"20rem\" }}\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <Link\r\n                          to={`/user-type/hospital/${id}/patients/${_id}`}\r\n                          className={classes.link}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h3\"\r\n                            classes={{ root: classes.title }}\r\n                          >\r\n                            {userCount ? userCount : \"NA\"}\r\n                          </Typography>\r\n                        </Link>\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <Link\r\n                          to={`/user-type/hospital/${id}/doctors/${_id}`}\r\n                          className={classes.link}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h3\"\r\n                            classes={{ root: classes.title }}\r\n                          >\r\n                            {doctorsCount ? doctorsCount : \"NA\"}\r\n                          </Typography>\r\n                        </Link>\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <Link\r\n                          to={`/user-type/hospital/${id}/partners/${_id}`}\r\n                          className={classes.link}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h3\"\r\n                            classes={{ root: classes.title }}\r\n                          >\r\n                            {partnersCount ? partnersCount : \"NA\"}\r\n                          </Typography>\r\n                        </Link>\r\n                      </TableCell>\r\n\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{\r\n                          color: theme.palette.common.grey,\r\n\r\n                          width: \"15%\",\r\n                        }}\r\n                      >\r\n                        {profileUrl ? (\r\n                          <Typography\r\n                            style={{\r\n                              color: theme.palette.common.grey,\r\n                              maxWidth: \"3rem\",\r\n                            }}\r\n                            sx={{ display: \"flex\", alignItems: \"center\" }}\r\n                          >\r\n                            {trucateProfileLink(profileUrl)}\r\n                            <div style={{ marginLeft: \"1rem\" }}>\r\n                              <Copy name=\"Profile Link\" text={profileUrl} />\r\n                            </div>\r\n                          </Typography>\r\n                        ) : (\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            disableRipple\r\n                            sx={{ width: \"50%\" }}\r\n                            className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                            // onClick={() => handleGenerateLink(_id)}\r\n                          >\r\n                            Generate Link\r\n                          </Button>\r\n                        )}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={hospitalTableHeadCells}\r\n              paginationLabel=\"Hospitals per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </Grid>\r\n\r\n      <AddProviderModal\r\n        openAddHcp={openAddHcp}\r\n        handleClose={() => setOpenAddHcp(false)}\r\n        buttonType={buttonType}\r\n        id={id}\r\n        pushTo={`/user-type/hospital/${id}`}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HospitalPage;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HMOEnrolle.js",["1596","1597","1598","1599","1600","1601","1602","1603","1604","1605","1606","1607","1608","1609","1610","1611","1612","1613","1614","1615","1616","1617"],"import React, { useEffect, useState } from \"react\";\r\nimport { EmptyTable, NoData } from \"components/layouts\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Avatar,\r\n  Typography,\r\n  TableCell,\r\n  TableRow,\r\n} from \"@mui/material\";\r\nimport AddProviderModal from \"components/Forms/AddProviderModal\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { addDoctorValidationSchema } from \"helpers/validationSchemas\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport Copy from \"components/Copy\";\r\nimport { trucateProfileLink } from \"helpers/filterHelperFunctions\";\r\nimport { hospitalTableHeadCells10 } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport { trucateString } from \"helpers/filterHelperFunctions\";\r\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport { getProviders, getPartners } from \"components/graphQL/useQuery\";\r\nimport { regeneratePartnerProfileUrl } from \"components/graphQL/Mutation\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { searchOptions } from \"helpers/mockData\";\r\nimport { getSearchPlaceholder } from \"helpers/func\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst HMOEnrolle = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { id } = useParams();\r\n  const { patientConsultation } = useActions();\r\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\r\n  const [hospitals, setHospitals] = useState([]);\r\n  const darkButtonType = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [fetchHospitals, { loading, error, variables }] = useLazyQuery(\r\n    getProviders,\r\n    {\r\n      variables: { userTypeId: id },\r\n    }\r\n  );\r\n  const onSubmit = () => console.log(\"onSubmit\");\r\n  const [openAddHcp, setOpenAddHcp] = useState(false);\r\n  useEffect(() => {\r\n    fetchHospitals()\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setHospitals(data?.getProviders?.provider || []);\r\n          setPageInfo(data?.getProviders?.pageInfo || {});\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, [fetchHospitals]);\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <>\r\n      <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n        <Grid item container justifyContent=\"flex-end\">\r\n          <CustomButton\r\n            endIcon={<PersonAddAlt1Icon />}\r\n            title=\"Add Provider\"\r\n            type={darkButtonType}\r\n            onClick={() => setOpenAddHcp(true)}\r\n          />\r\n        </Grid>\r\n        <TableLayout\r\n          search={\r\n            <CompoundSearch\r\n              queryParams={{\r\n                fetchData: fetchHospitals,\r\n                variables,\r\n                loading,\r\n                newVariables: {},\r\n              }}\r\n              setPageInfo={(data) =>\r\n                setPageInfo(data?.profiles?.pageInfo || {})\r\n              }\r\n              setProfiles={(data) => setHospitals(data?.profiles?.data || [])}\r\n              getSearchPlaceholder={(filterBy) =>\r\n                getSearchPlaceholder(filterBy)\r\n              }\r\n              filterOptions={searchOptions}\r\n            />\r\n          }\r\n        >\r\n          {hospitals.length > 0 ? (\r\n            /* ================= HMO TABLE ================= */\r\n            <Grid\r\n              container\r\n              item\r\n              direction=\"column\"\r\n              overflow=\"hidden\"\r\n              maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n            >\r\n              <EnhancedTable\r\n                headCells={hospitalTableHeadCells10}\r\n                rows={hospitals}\r\n                paginationLabel=\"Hospitals per page\"\r\n                hasCheckbox={false}\r\n                dataPageInfo={pageInfo}\r\n              >\r\n                {hospitals.map((row) => {\r\n                  const {\r\n                    _id,\r\n                    profileUrl,\r\n                    doctorsCount,\r\n                    userCount,\r\n                    partnersCount,\r\n                    name,\r\n                  } = row;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      tabIndex={-1}\r\n                      key={_id}\r\n                      style={{ cursor: \"pointer\" }}\r\n                      //   onClick={() => patientConsultation(_id)}\r\n                    >\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"20rem\" }}\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <Link\r\n                          to={`/user-type/hmo/${id}/${_id}/users`}\r\n                          className={classes.link}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h3\"\r\n                            classes={{ root: classes.title }}\r\n                          >\r\n                            {userCount ? userCount : \"NA\"}\r\n                          </Typography>\r\n                        </Link>\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <Link\r\n                          to={`/user-type/hmo/${id}/${_id}/enrollee`}\r\n                          className={classes.link}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h3\"\r\n                            classes={{ root: classes.title }}\r\n                          >\r\n                            {doctorsCount ? doctorsCount : \"NA\"}\r\n                          </Typography>\r\n                        </Link>\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <Link\r\n                          to={`/user-type/hmo/${id}/${_id}/partners`}\r\n                          className={classes.link}\r\n                        >\r\n                          <Typography\r\n                            variant=\"h3\"\r\n                            classes={{ root: classes.title }}\r\n                          >\r\n                            {partnersCount ? partnersCount : \"NA\"}\r\n                          </Typography>\r\n                        </Link>\r\n                      </TableCell>\r\n                      {/* \r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{\r\n                          color: theme.palette.common.grey,\r\n\r\n                          width: \"15%\",\r\n                        }}\r\n                      >\r\n                        {profileUrl ? (\r\n                          <Typography\r\n                            style={{\r\n                              color: theme.palette.common.grey,\r\n                              maxWidth: \"3rem\",\r\n                            }}\r\n                            sx={{ display: \"flex\", alignItems: \"center\" }}\r\n                          >\r\n                            {trucateProfileLink(profileUrl)}\r\n                            <div style={{ marginLeft: \"1rem\" }}>\r\n                              <Copy name=\"Profile Link\" text={profileUrl} />\r\n                            </div>\r\n                          </Typography>\r\n                        ) : (\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            disableRipple\r\n                            sx={{ width: \"50%\" }}\r\n                            className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                            // onClick={() => handleGenerateLink(_id)}\r\n                          >\r\n                            Generate Link\r\n                          </Button>\r\n                        )}\r\n                      </TableCell> */}\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={hospitalTableHeadCells10}\r\n              paginationLabel=\"Hmo Enrollee per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </Grid>\r\n\r\n      <AddProviderModal\r\n        openAddHcp={openAddHcp}\r\n        handleClose={() => setOpenAddHcp(false)}\r\n        buttonType={buttonType}\r\n        id={id}\r\n        pushTo={`/user-type/hmo/${id}`}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HMOEnrolle;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaFilterPage.js",["1618","1619","1620","1621","1622","1623","1624","1625","1626","1627","1628"],"import React, { useState, useEffect } from \"react\";\r\nimport { useLazyQuery, NetworkStatus } from \"@apollo/client\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport { Grid } from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useStyles } from \"styles/patientsPageStyles\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport PatientFilters from \"components/Forms/Filters/PatientFilters\";\r\nimport { patientsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo, searchOptions } from \"helpers/mockData\";\r\nimport {\r\n  getPatients,\r\n  getPatientsByPlan,\r\n  getPatientsByStatus,\r\n} from \"components/graphQL/useQuery\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport { useParams, Link, NavLink, Redirect } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { getSearchPlaceholder } from \"helpers/func\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { Checkbox, Chip, TableCell, TableRow } from \"@mui/material\";\r\n\r\nconst HealaFilterPage = () => {\r\n  const classes = useStyles();\r\n  const { id, ids } = useParams();\r\n  const history = useHistory();\r\n  const theme = useTheme();\r\n  const { setSelectedRows } = useActions();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n\r\n  const { displayAlert } = useAlert();\r\n  const [profiles, setProfiles] = useState([]);\r\n  const [fetchPatient, { loading, refetch, error, variables, networkStatus }] =\r\n    useLazyQuery(getPatients);\r\n\r\n  const [\r\n    fetchPatientByStatus,\r\n    {\r\n      loading: byStatusLoading,\r\n      variables: byStatusVaribles,\r\n      refetch: byStatusRefetch,\r\n    },\r\n  ] = useLazyQuery(getPatientsByStatus);\r\n  const [\r\n    fetchPatientByPlan,\r\n    {\r\n      loading: byPlanLoading,\r\n      variables: byPlanVaribles,\r\n      refetch: byPlanRefetch,\r\n    },\r\n  ] = useLazyQuery(getPatientsByPlan);\r\n\r\n  const [pageInfo, setPageInfo] = useState({\r\n    page: 0,\r\n    totalPages: 1,\r\n    hasNextPage: false,\r\n    hasPrevPage: false,\r\n    limit: 10,\r\n    totalDocs: 0,\r\n  });\r\n  useEffect(() => {\r\n    fetchPatient({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        provider: ids,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setPageInfo(data?.profiles?.pageInfo || []);\r\n          setProfiles(data?.profiles?.data || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(data?.profiles?.pageInfo || defaultPageInfo);\r\n        setProfiles(data?.profiles?.data || []);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  // if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n      <Grid\r\n        item\r\n        container\r\n        spacing={2}\r\n        className={classes.searchFilterContainer}\r\n      >\r\n        <Grid item container flexWrap=\"wrap\" spacing={4}></Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        filters={\r\n          <PatientFilters\r\n            setProfiles={setProfiles}\r\n            setPageInfo={setPageInfo}\r\n            queryParams={{\r\n              patientsParams: { fetchPatient, loading, refetch, variables },\r\n              patientsByStatusParams: {\r\n                byStatusLoading,\r\n                byStatusVaribles,\r\n                byStatusRefetch,\r\n                fetchPatientByStatus,\r\n              },\r\n              patientsByPlanParams: {\r\n                byPlanLoading,\r\n                byPlanVaribles,\r\n                byPlanRefetch,\r\n                fetchPatientByPlan,\r\n              },\r\n            }}\r\n          />\r\n        }\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{\r\n              fetchData: fetchPatient,\r\n              variables,\r\n              loading,\r\n              newVariables: { provider: ids },\r\n            }}\r\n            setPageInfo={(data) => setPageInfo(data?.profiles?.pageInfo || {})}\r\n            setProfiles={(data) => setProfiles(data?.profiles?.data || [])}\r\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\r\n            filterOptions={searchOptions}\r\n          />\r\n        }\r\n      >\r\n        {loading || byStatusLoading || byPlanLoading ? (\r\n          <Loader />\r\n        ) : networkStatus === NetworkStatus.refetch ? (\r\n          <Loader />\r\n        ) : profiles.length > 0 ? (\r\n          /* ================= PATIENTS TABLE ================= */\r\n          <Grid\r\n            container\r\n            item\r\n            direction=\"column\"\r\n            overflow=\"hidden\"\r\n            maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n          >\r\n            <EnhancedTable\r\n              headCells={patientsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"Patients per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchPatient, {\r\n                  first: e,\r\n                  provider: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchPatient, page, pageInfo, {\r\n                  provider: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const {\r\n                  _id,\r\n                  dociId,\r\n                  firstName,\r\n                  lastName,\r\n                  plan,\r\n                  provider,\r\n                  consultations,\r\n                  status,\r\n                } = row;\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: \"pointer\" }}\r\n                    onClick={(e) => {\r\n                      <Redirect\r\n                        to={{\r\n                          pathname: `/patients/${_id}`,\r\n                          state: { from: `/user-type/heala/${id}/${_id}` },\r\n                        }}\r\n                      />;\r\n                    }}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    {/* </NavLink> */}\r\n\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        textAlign: \"left\",\r\n                      }}\r\n                    >\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        {dociId?.split(\"-\")[1]}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ fontSize: \"1.25rem\" }}>{`${\r\n                            firstName && firstName\r\n                          } ${lastName && lastName}`}</span>\r\n                        </div>\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        {plan ? plan : \"No Plan\"}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\", textColor: \"red\" }}\r\n                      >\r\n                        {provider ? provider : \"No Provider\"}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\", textColor: \"inherit\" }}\r\n                      >\r\n                        {consultations ? consultations : 0}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\", textColor: \"inherit\" }}\r\n                      >\r\n                        <Chip\r\n                          label={\r\n                            status && status === \"Active\"\r\n                              ? \"Active\"\r\n                              : \"Inactive\"\r\n                          }\r\n                          className={classes.badge}\r\n                          style={{\r\n                            background:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.lightGreen\r\n                                : theme.palette.common.lightRed,\r\n                            color:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.green\r\n                                : theme.palette.common.red,\r\n                          }}\r\n                        />\r\n                      </NavLink>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={patientsHeadCells}\r\n            paginationLabel=\"Patients per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HealaFilterPage;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaFilterDoctorPage.js",["1629","1630","1631","1632","1633","1634","1635","1636","1637","1638","1639"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NetworkStatus } from \"@apollo/client\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  Grid,\r\n  TableRow,\r\n  TableCell,\r\n  Button,\r\n  Checkbox,\r\n  Chip,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { timeConverter } from \"components/Utilities/Time\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { useStyles } from \"../../styles/doctorsPageStyles\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport {\r\n  getDoctorsProfile,\r\n  getDoctorsProfileByStatus,\r\n} from \"components/graphQL/useQuery\";\r\nimport { hcpsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { createDOctorProfile } from \"components/graphQL/Mutation\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\r\nimport { addDoctorValidationSchema } from \"helpers/validationSchemas\";\r\nimport { Loader, Modals, CustomButton } from \"components/Utilities\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport {\r\n  addDocInitialValues,\r\n  /* cadreFilterBy, */\r\n  defaultPageInfo,\r\n  docCadreOptions,\r\n  docSpecializationsOptions,\r\n  doctorsSearchOptions,\r\n  genderType,\r\n} from \"helpers/mockData\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport DoctorFilters from \"components/Forms/Filters/DoctorsFilters\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst HealaFilterDoctorPage = () => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { displayAlert } = useAlert();\r\n  const [profiles, setProfiles] = useState(\"\");\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const { provider } = useSelector((state) => state.patient);\r\n  const { id, ids } = useParams();\r\n  console.log(provider);\r\n  const [openAddHcp, setOpenAddHcp] = useState(false);\r\n  const [createDoc] = useMutation(createDOctorProfile);\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [fetchDoctors, { error, loading, refetch, variables, networkStatus }] =\r\n    useLazyQuery(getDoctorsProfile);\r\n  const [\r\n    fetchDoctorsByStatus,\r\n    {\r\n      loading: byStatusLoading,\r\n      refetch: byStatusRefetch,\r\n      variables: byStatusVariables,\r\n    },\r\n  ] = useLazyQuery(getDoctorsProfileByStatus);\r\n\r\n  useEffect(() => {\r\n    fetchDoctors({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        providerId: ids,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data && provider === \"\") {\r\n          setPageInfo(data.doctorProfiles.pageInfo || []);\r\n          setProfiles(data.doctorProfiles.profile || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  useEffect(() => {\r\n    fetchDoctors({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        providerId: ids,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data && provider !== \"\") {\r\n          setPageInfo(data.doctorProfiles.pageInfo || []);\r\n          setProfiles(data.doctorProfiles.profile || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [provider]);\r\n\r\n  const onSubmit = async (values) => {\r\n    const {\r\n      createdAt,\r\n      updatedAt,\r\n      firstName,\r\n      lastName,\r\n      gender,\r\n      phone,\r\n      email,\r\n      hospital,\r\n      dociId,\r\n      specialization,\r\n      dob,\r\n      cadre,\r\n      image,\r\n    } = values;\r\n    const correctDOB = timeConverter(dob);\r\n    await createDoc({\r\n      variables: {\r\n        dociId,\r\n        createdAt,\r\n        updatedAt,\r\n        firstName,\r\n        lastName,\r\n        gender,\r\n        phoneNumber: phone,\r\n        email,\r\n        hospital,\r\n        specialization,\r\n        dob: correctDOB,\r\n        cadre,\r\n        image,\r\n        providerId: \"61db6f8968b248001aec4fcb\",\r\n      },\r\n      refetchQueries: [{ query: getDoctorsProfile }],\r\n    });\r\n    setOpenAddHcp(false);\r\n  };\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const getSearchPlaceholder = (filterBy) => {\r\n    return filterBy === \"id\"\r\n      ? \"Search by ID e.g 7NE6ELLO\"\r\n      : filterBy === \"firstName\"\r\n      ? \"Search by first name e.g John\"\r\n      : filterBy === \"lastName\"\r\n      ? \"Search by last name e.g Doe\"\r\n      : \"\";\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(data.doctorProfiles.pageInfo || defaultPageInfo);\r\n        setProfiles(data.doctorProfiles.profile || []);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\r\n      <Grid\r\n        item\r\n        gap={{ md: 4, sm: 4, xs: 2 }}\r\n        direction={{ sm: \"row\", xs: \"column\" }}\r\n        container\r\n        justifyContent=\"flex-end\"\r\n      >\r\n        <Grid item>\r\n          <CustomButton\r\n            endIcon={<AddIcon />}\r\n            title=\"Add Doctor\"\r\n            type={buttonType}\r\n            onClick={() => setOpenAddHcp(true)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      {/* ========= FILTERS =========== */}\r\n\r\n      <TableLayout\r\n        filters={\r\n          <DoctorFilters\r\n            setProfiles={setProfiles}\r\n            setPageInfo={setPageInfo}\r\n            queryParams={{\r\n              doctorsParams: { fetchDoctors, loading, refetch, variables },\r\n              doctorsByStatusParams: {\r\n                byStatusLoading,\r\n                byStatusVariables,\r\n                byStatusRefetch,\r\n                fetchDoctorsByStatus,\r\n              },\r\n            }}\r\n          />\r\n        }\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{ fetchData: fetchDoctors, variables, loading }}\r\n            setPageInfo={(data) =>\r\n              setPageInfo(data.doctorProfiles.pageInfo || {})\r\n            }\r\n            setProfiles={(data) =>\r\n              setProfiles(data.doctorProfiles.profile || [])\r\n            }\r\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\r\n            filterOptions={doctorsSearchOptions}\r\n          />\r\n        }\r\n      >\r\n        {loading ? (\r\n          <Loader />\r\n        ) : byStatusLoading ? (\r\n          <Loader />\r\n        ) : networkStatus === NetworkStatus.refetch ? (\r\n          <Loader />\r\n        ) : profiles.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={hcpsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"Doctors per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchDoctors, {\r\n                  first: e,\r\n                  providerId: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchDoctors, page, pageInfo, {\r\n                  providerId: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const {\r\n                  _id,\r\n                  dociId,\r\n                  firstName,\r\n                  provider,\r\n                  status,\r\n                  specialization,\r\n                  consultations,\r\n                  lastName,\r\n                } = row;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: \"pointer\" }}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        minWidth: \"10rem\",\r\n                      }}\r\n                    >\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        {dociId?.split(\"-\")[1]}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Link to={`/hcps/${_id}`} className={classes.link}>\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ fontSize: \"1.25rem\" }}>\r\n                            {firstName} {lastName}\r\n                          </span>\r\n                        </div>\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.grey }}\r\n                    >\r\n                      <Link to={`/hcps/${_id}`} className={classes.link}>\r\n                        {specialization}{\" \"}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        {consultations ? consultations : 0}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.grey }}\r\n                    >\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        {provider ? provider : \"No Provider\"}{\" \"}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        <Chip\r\n                          label={\r\n                            status && status === \"Active\"\r\n                              ? \"Active\"\r\n                              : \"Inactive\"\r\n                          }\r\n                          className={classes.badge}\r\n                          style={{\r\n                            background:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.lightGreen\r\n                                : theme.palette.common.lightRed,\r\n                            color:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.green\r\n                                : theme.palette.common.red,\r\n                          }}\r\n                        />\r\n                      </Link>\r\n                    </TableCell>\r\n                    {/* <TableCell>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        className={classes.button}\r\n                        component={Link}\r\n                        to={`hcps/${_id}`}\r\n                        endIcon={<ArrowForwardIosIcon />}\r\n                      >\r\n                        View Doctor\r\n                      </Button>\r\n                    </TableCell> */}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={hcpsHeadCells}\r\n            paginationLabel=\"Doctors per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n      {/* ADD Doctor MODAL */}\r\n      <Modals\r\n        isOpen={openAddHcp}\r\n        title=\"Add Doctor\"\r\n        rowSpacing={5}\r\n        height=\"auto\"\r\n        width={{ sm: \"50vw\", xs: \"90vw\" }}\r\n        handleClose={() => setOpenAddHcp(false)}\r\n      >\r\n        <Formik\r\n          initialValues={addDocInitialValues}\r\n          onSubmit={onSubmit}\r\n          validationSchema={addDoctorValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"1rem\" }}>\r\n                <Grid container direction=\"column\" gap={2}>\r\n                  <Grid item container direction=\"column\" gap={1}>\r\n                    <Grid item container spacing={2}>\r\n                      <Grid item container xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"First Name\"\r\n                          id=\"firstName\"\r\n                          name=\"firstName\"\r\n                          placeholder=\"Enter first name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item container xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Last Name\"\r\n                          id=\"lastName\"\r\n                          name=\"lastName\"\r\n                          placeholder=\"Enter last name\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid item container direction=\"column\" gap={2}>\r\n                      <Grid item container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"date\"\r\n                            name=\"dob\"\r\n                            label=\"DOB\"\r\n                            setFieldValue={setFieldValue}\r\n                            setValues={setValues}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <Grid container direction=\"column\">\r\n                            <FormikControl\r\n                              control=\"select\"\r\n                              options={docSpecializationsOptions}\r\n                              name=\"specialization\"\r\n                              label=\"Specialization\"\r\n                              placeholder=\"Specialization\"\r\n                            />\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container direction=\"column\" gap={2}>\r\n                    <Grid item container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          label=\"Gender\"\r\n                          id=\"gender\"\r\n                          name=\"gender\"\r\n                          options={genderType}\r\n                          placeholder=\"Gender\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Phone Number\"\r\n                          id=\"phone\"\r\n                          name=\"phone\"\r\n                          placeholder=\"Enter last Phone number\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item container direction=\"column\" gap={2}>\r\n                      <Grid item container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"input\"\r\n                            label=\"Hospital\"\r\n                            id=\"hospital\"\r\n                            name=\"hospital\"\r\n                            placeholder=\"Enter hospital Name\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6} marginBottom={{ xs: 1 }}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={docCadreOptions}\r\n                            name=\"cadre\"\r\n                            label=\"Cadre\"\r\n                            placeholder=\"Select Cadre\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container spacing={2} alignItems=\"center\">\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"file\"\r\n                        name=\"image\"\r\n                        label=\"Profile Pics\"\r\n                        setFieldValue={setFieldValue}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        label=\"Heala-ID\"\r\n                        id=\"dociId\"\r\n                        name=\"dociId\"\r\n                        placeholder=\"Enter Heala ID\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <CustomButton\r\n                      title=\"Add Doctor\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HealaFilterDoctorPage;\r\n2;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealerPartner.js",["1640","1641","1642","1643","1644","1645","1646","1647","1648","1649","1650","1651","1652","1653","1654","1655","1656","1657","1658","1659","1660"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\r\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport AddPartner from \"components/Forms/AddPartner\";\r\nimport {\r\n  Checkbox,\r\n  TableCell,\r\n  Avatar,\r\n  TableRow,\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { categoryFilterOptions, defaultPageInfo } from \"helpers/mockData\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport {\r\n  changeTableLimit,\r\n  deleteItem,\r\n  deleteVar,\r\n  filterData,\r\n  handlePageChange,\r\n  banks,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport DeletePartner from \"components/modals/DeleteOrDisable\";\r\nimport { partnersHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport {\r\n  addPartner,\r\n  addPartnerCategory,\r\n  regeneratePartnerProfileUrl,\r\n} from \"components/graphQL/Mutation\";\r\nimport {\r\n  getPartners,\r\n  getSingleProvider,\r\n  getProviders,\r\n  DELETE_PARTNER,\r\n} from \"components/graphQL/useQuery\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport {\r\n  addNewPartnerValidationSchema,\r\n  addPartnerValidationSchema,\r\n  filterPartnersValidationSchema,\r\n} from \"helpers/validationSchemas\";\r\nimport Filter from \"components/Forms/Filters\";\r\nimport { PageInfo } from \"components/graphQL/fragment\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { EditDelBtn } from \"components/Buttons/EditDelBtn\";\r\n\r\nconst HealerPartner = () => {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const { id, ids } = useParams();\r\n  const { displayAlert } = useAlert();\r\n  /* const [setCategoryDatas] = useState([]); */\r\n  const { setSelectedRows } = useActions();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [partner, setPartners] = useState([]);\r\n  const [dropDown, setDropDown] = useState([]);\r\n  const [addPartners] = useMutation(addPartner);\r\n  const categoryData = useQuery(getSingleProvider);\r\n  const [delete_partner] = useLazyQuery(DELETE_PARTNER);\r\n  /*   const [searchPartner, setSearchPartner] = useState(\"\"); */\r\n  const [isDeleting, setIsDeleting] = useState({});\r\n  const [addPartnerCat] = useMutation(addPartnerCategory);\r\n  const { data: da, loading: load } = useQuery(getProviders);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [openAddPartner, setOpenAddPartner] = useState(false);\r\n  const [openFilterPartner, setOpenFilterPartner] = useState(false);\r\n  const [openDeletePartner, setOpenDeletePartner] = useState(false);\r\n  const [partnerToDelete, setPartnerToDelete] = useState(null);\r\n  const [partnerFilterValues, setPartnerFilterValues] = useState({\r\n    category: \"\",\r\n  });\r\n  const { selectedRows /* page */ } = useSelector((state) => state.tables);\r\n  const [openAddPartnerCategory, setAddPartnerCategory] = useState(false);\r\n  const [fetchPartners, { loading, error, refetch, variables }] =\r\n    useLazyQuery(getPartners);\r\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\r\n\r\n  const specializations = [\r\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\r\n    { key: \"Hospital\", value: \"Hospital\" },\r\n  ];\r\n  const categoryOptions = [\r\n    { key: \"Diagnostics\", value: \"diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"pharmacy\" },\r\n    { key: \"Hospital\", value: \"hospital\" },\r\n  ];\r\n  const classificationOptions = [\r\n    { key: \"Primary Healthcare\", value: \"Primary Healthcare\" },\r\n    { key: \"Secondary Healthcare\", value: \"Secondary Healthcare\" },\r\n  ];\r\n\r\n  const specializationOptions = [\r\n    { key: \"Dental Care\", value: \"Dental Care\" },\r\n    { key: \"Eye Clinic\", value: \"Eye Clinic\" },\r\n    { key: \"Skin Care\", value: \"Skin Care\" },\r\n    { key: \"Mental Care\", value: \"Mental Care\" },\r\n  ];\r\n  const specializations5 = [\r\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\r\n    { key: \"Hospital\", value: \"Hospital\" },\r\n  ];\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const darkButtonType = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const initialValues = {\r\n    Name: \"\",\r\n    date: \"\",\r\n    category: \"\",\r\n  };\r\n\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    email: \"\",\r\n    specialization: \"\",\r\n    category: \"\",\r\n    account: \"\",\r\n    address: \"\",\r\n    phone: \"\",\r\n    classification: \"\",\r\n    bank: \"\",\r\n    image: null,\r\n    provider: \"\",\r\n  };\r\n\r\n  const initialValues2 = {\r\n    category: \"\",\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then((res) => {\r\n        const { data } = res;\r\n        if (data) {\r\n          setPartners(data?.getPartners?.data || []);\r\n          setPageInfo(data?.getPartners?.pageInfo || defaultPageInfo);\r\n        }\r\n        if (!data) {\r\n          setPartners(res?.getPartners?.data || []);\r\n          setPageInfo(res?.getPartners?.pageInfo || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  const fetchPartnersData = async () => {\r\n    const res = fetchPartners({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        provider: ids,\r\n      },\r\n    });\r\n    setTableData(res, \"Couldn't fetch Partners data\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPartnersData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (da) {\r\n      const datas = da.getProviders.provider;\r\n      setDropDown(\r\n        datas?.map((i) => {\r\n          return { key: i.name, value: i._id };\r\n        })\r\n      );\r\n    }\r\n  }, [da]);\r\n\r\n  useEffect(() => {\r\n    (partner || []).map((p) => {\r\n      const newIsDeleting = isDeleting;\r\n      setIsDeleting({ [p._id]: false, ...newIsDeleting });\r\n      return null;\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [partner]);\r\n\r\n  const onSubmit = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const onSubmit2 = async (values, onSubmitProps) => {\r\n    const { category } = values;\r\n\r\n    try {\r\n      const addCatRes = await addPartnerCat({\r\n        variables: {\r\n          name: category,\r\n        },\r\n      });\r\n\r\n      if (addCatRes?.addPartner?.partner) {\r\n        setAddPartnerCategory(false);\r\n        onSubmitProps.resetForm();\r\n        const res = refetch();\r\n        setTableData(res, \"Couldn't fetch partners.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const onSubmit1 = async (values, onSubmitProps) => {\r\n    console.log(values);\r\n    let {\r\n      name,\r\n      email,\r\n      category,\r\n      phone,\r\n      bank,\r\n      specialization,\r\n      provider,\r\n      image,\r\n      account,\r\n    } = values;\r\n    name = name.trim();\r\n\r\n    try {\r\n      await addPartners({\r\n        variables: {\r\n          name,\r\n          email,\r\n          category,\r\n          specialization,\r\n          account,\r\n          phone,\r\n          bank,\r\n          logoImageUrl: image,\r\n          providerId: provider,\r\n        },\r\n        refetchQueries: [{ query: getPartners }],\r\n      });\r\n      enqueueSnackbar(\"Partner added successfully\", {\r\n        variant: \"success\",\r\n      });\r\n      onSubmitProps.resetForm();\r\n      setOpenAddPartner(false);\r\n    } catch (err) {\r\n      console.log(err, \"err\");\r\n      enqueueSnackbar(\"Email is already taken\", {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const onFilterCategoryChange = async (value) => {\r\n    try {\r\n      deleteVar(variables);\r\n      setPartnerFilterValues({ ...partnerFilterValues, category: value });\r\n      const filterVariables = { category: value };\r\n\r\n      const res = filterData(filterVariables, {\r\n        fetchData: fetchPartners,\r\n        refetch: refetch,\r\n        variables: variables,\r\n      });\r\n      await setTableData(res, \"couldn't filter table.\");\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setPartnerFilterValues, \"\");\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\r\n    setFilterValue(defaultVal);\r\n\r\n    deleteVar(variables);\r\n\r\n    const res = refetch();\r\n    await setTableData(res, \"couldn't filter table.\");\r\n  };\r\n  const [newProfileUrl, setNewProfileUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setNewProfileUrl(daa?.regeneratePartnerProfileUrl?.partner?.profileUrl);\r\n  }, [daa]);\r\n  const [Id, setId] = useState(\"\");\r\n  const handleGenerateLink = async (id) => {\r\n    setId(id);\r\n    await regenerate({\r\n      variables: {\r\n        id,\r\n      },\r\n      refetchQueries: [\r\n        {\r\n          query: getPartners,\r\n          variables: {\r\n            variables: pageInfo.page,\r\n            limit: PageInfo.limit,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const z = (id) => {\r\n    let b = \"\";\r\n    const m = daa?.regeneratePartnerProfileUrl?.partner?._id;\r\n    if (id === m) {\r\n      b = m;\r\n    } else {\r\n      b = \"\";\r\n    }\r\n    return b;\r\n  };\r\n  useEffect(() => {\r\n    partner.map((item) => {\r\n      if (item._id === Id) {\r\n        return {\r\n          ...item,\r\n          profileUrl: newProfileUrl,\r\n        };\r\n      }\r\n    });\r\n\r\n    //eslint-disable-next-line\r\n  }, [Id, newProfileUrl]);\r\n  if (error || categoryData.error)\r\n    return <NoData error={error || categoryData.error} />;\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      gap={{ sm: 4, xs: 2 }}\r\n      flexWrap=\"nowrap\"\r\n      height=\"100%\"\r\n    >\r\n      <Grid\r\n        item\r\n        container\r\n        gap={2}\r\n        direction={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          justifyContent=\"flex-end\"\r\n          alignItems=\"center\"\r\n          flex={{ sm: 1, xs: 1, md: 1 }}\r\n        >\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<PersonAddAlt1Icon />}\r\n              title=\"Add Partner\"\r\n              type={darkButtonType}\r\n              onClick={() => setOpenAddPartner(true)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        filters={\r\n          <Filter\r\n            onHandleChange={(e) => onFilterCategoryChange(e?.target?.value)}\r\n            onClickClearBtn={() => onFilterCategoryChange(\"\")}\r\n            options={[{ key: \"Category\", value: \"\" }, ...categoryFilterOptions]}\r\n            name=\"category\"\r\n            placeholder=\"None\"\r\n            value={partnerFilterValues.category}\r\n            hasClearBtn={true}\r\n            disable={loading}\r\n          />\r\n        }\r\n      >\r\n        {load || loading ? (\r\n          <Loader />\r\n        ) : partner.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={partnersHeadCells}\r\n              rows={partner}\r\n              paginationLabel=\"Partner per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchPartners, {\r\n                  first: e,\r\n                  provider: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchPartners, page, pageInfo, {\r\n                  provider: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {partner.map((row, index) => {\r\n                const isItemSelected = isSelected(row.id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                const { _id, logoImageUrl, name, email, category } = row;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ maxWidth: \"20rem\" }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"left\",\r\n                        }}\r\n                      >\r\n                        {/* <span style={{ marginRight: \"1rem\" }}>\r\n                          <Avatar\r\n                            alt={`Display Photo of ${name}`}\r\n                            src={logoImageUrl}\r\n                            sx={{ width: 24, height: 24 }}\r\n                          />\r\n                        </span> */}\r\n                        <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {email}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {category}\r\n                    </TableCell>\r\n\r\n                    {/* <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {profileUrl || z(_id) !== \"\" ? (\r\n                        <Typography\r\n                          style={{\r\n                            color: \"rgb(0 0 0)\",\r\n                            fontWeight: 400,\r\n                            fontSize: \"1.25rem\",\r\n                            maxWidth: \"20rem\",\r\n                          }}\r\n                          sx={{ display: \"flex\", alignItems: \"center\" }}\r\n                        >\r\n                          {trucateProfileLink(profileUrl ? profileUrl : z(_id))}\r\n                          <div style={{ marginLeft: \"1rem\" }}>\r\n                            <Copy\r\n                              name=\"Profile Link\"\r\n                              text={profileUrl ? profileUrl : z(_id)}\r\n                            />\r\n                          </div>\r\n                        </Typography>\r\n                      ) : (\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          disableRipple\r\n                          className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                          onClick={() => handleGenerateLink(_id)}\r\n                        >\r\n                          Generate Link\r\n                        </Button>\r\n                      )}\r\n                    </TableCell> \r\n                    <TableCell align=\"center\" className={classes.tableCell}>\r\n                      {isDeleting[_id] ? (\r\n                        <Loader />\r\n                      ) : (\r\n                        <EditDelBtn\r\n                          onHandleClick={() => {\r\n                            setPartnerToDelete(_id || \"\");\r\n                            setOpenDeletePartner(true);\r\n                          }}\r\n                          type=\"delete\"\r\n                          text=\"Delete partner\"\r\n                        />\r\n                      )}\r\n                    </TableCell>*/}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={partnersHeadCells}\r\n            paginationLabel=\"Doctors per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n      <Modals\r\n        isOpen={openFilterPartner}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        width={{ sm: \"40vw\", xs: \"90vw\", md: \"40vw\" }}\r\n        handleClose={() => setOpenFilterPartner(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={onSubmit}\r\n          validateOnBlur={false}\r\n          validationSchema={filterPartnersValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={3}>\r\n                  <Grid item marginBottom={3}>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          name=\"Name\"\r\n                          label=\"Name\"\r\n                          placeholder=\"Select name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializations}\r\n                          name=\"date\"\r\n                          label=\"Date\"\r\n                          placeholder=\"Choose Date\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  container\r\n                  spacing={2}\r\n                  style={{ marginBottom: \"10rem\" }}\r\n                >\r\n                  <Grid item xs={6}>\r\n                    <FormikControl\r\n                      control=\"select\"\r\n                      options={specializations}\r\n                      name=\"category\"\r\n                      label=\"Category\"\r\n                      placeholder=\"Select Category\"\r\n                    />\r\n                  </Grid>\r\n                  {/* Placeholder grid */}\r\n                  <Grid item md></Grid>\r\n                </Grid>\r\n                <Grid item container xs={12}>\r\n                  <CustomButton\r\n                    title=\"Apply Filter\"\r\n                    width=\"100%\"\r\n                    type={buttonType}\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                  />\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      {/* ADD NEW PARTER MODAL */}\r\n      <AddPartner\r\n        category={false}\r\n        id={ids}\r\n        open={openAddPartner}\r\n        handleClose={() => setOpenAddPartner(false)}\r\n        initialValues={initialValues1}\r\n      />\r\n      {/* <Modals\r\n        isOpen={openAddPartner}\r\n        title=\"Add Partners\"\r\n        rowSpacing={5}\r\n        handleClose={() => setOpenAddPartner(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={addNewPartnerValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty, values, setFieldValue }) => {\r\n            const { classification, category } = values;\r\n            return (\r\n              <Form style={{ marginTop: \"1rem\" }}>\r\n                <Grid container direction=\"column\" gap={1.5}>\r\n                  <Grid item container>\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Name\"\r\n                          id=\"name\"\r\n                          name=\"name\"\r\n                          placeholder=\"Enter Partner name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Email\"\r\n                          id=\"name\"\r\n                          name=\"email\"\r\n                          placeholder=\"Enter Email\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\" Account Number\"\r\n                          id=\"account\"\r\n                          name=\"account\"\r\n                          placeholder=\"Enter Account Number\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Phone Number\"\r\n                          id=\"phone\"\r\n                          name=\"phone\"\r\n                          placeholder=\"Enter Phone Number\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={categoryOptions}\r\n                          name=\"category\"\r\n                          label=\"Category\"\r\n                          placeholder=\"Category\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={banks}\r\n                          name=\"bank\"\r\n                          label=\"Bank\"\r\n                          placeholder=\"Select Bank\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    {category === \"hospital\" && (\r\n                      <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={dropDown}\r\n                            name=\"provider\"\r\n                            label=\"Provider\"\r\n                            id=\"provider\"\r\n                            placeholder=\"Select Provider\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={classificationOptions}\r\n                            name=\"classification\"\r\n                            label=\"Classification\"\r\n                            id=\"classification\"\r\n                            placeholder=\"select classification\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    )}\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"file\"\r\n                          name=\"image\"\r\n                          label=\"Company Logo\"\r\n                          setFieldValue={setFieldValue}\r\n                        />\r\n                      </Grid>\r\n                      {classification === \"Secondary Healthcare\" && (\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={specializationOptions}\r\n                            name=\"specialization\"\r\n                            label=\"Specialization\"\r\n                            id=\"specialization\"\r\n                            placeholder=\"Select Specialization\"\r\n                          />\r\n                        </Grid>\r\n                      )}\r\n                    </Grid>\r\n                    <Grid item container flexWrap=\"nowrap\">\r\n                      <Grid item container>\r\n                        <FormikControl\r\n                          control=\"textarea\"\r\n                          name=\"address\"\r\n                          minRows={3}\r\n                          label=\"Address\"\r\n                          placeholder=\"Enter address\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container sx={{ mt: 1 }}>\r\n                    <CustomButton\r\n                      title=\"Add Partner\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals> */}\r\n\r\n      {/* Add Partner Category */}\r\n      <Modals\r\n        isOpen={openAddPartnerCategory}\r\n        title=\"Add Partners Category\"\r\n        rowSpacing={5}\r\n        handleClose={() => setAddPartnerCategory(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues2}\r\n          onSubmit={onSubmit2}\r\n          validationSchema={addPartnerValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid container direction=\"column\" gap={3}>\r\n                  <Grid item container>\r\n                    <Grid item container direction=\"column\" gap={1}>\r\n                      <Grid item container>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializations5}\r\n                          name=\"category\"\r\n                          label=\"Category\"\r\n                          placeholder=\"Specialization\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <CustomButton\r\n                      title=\"Add Partner\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n      <DeletePartner\r\n        open={openDeletePartner}\r\n        setOpen={setOpenDeletePartner}\r\n        title=\"Delete Partner\"\r\n        btnValue=\"delete\"\r\n        onConfirm={async () => {\r\n          const res = deleteItem(\r\n            delete_partner,\r\n            partnerToDelete,\r\n            setPartnerToDelete,\r\n            refetch,\r\n            Typography,\r\n            enqueueSnackbar,\r\n            setIsDeleting,\r\n            isDeleting\r\n          );\r\n          setOpenDeletePartner(false);\r\n          await setTableData(res, \"Couldn't refetch Partners\");\r\n        }}\r\n        confirmationMsg=\"delete partner\"\r\n        onCancel={() => {\r\n          setPartnerToDelete(null);\r\n        }}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HealerPartner;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HospitalUsers.js",["1661","1662","1663","1664","1665","1666","1667","1668","1669","1670","1671"],"import React, { useState, useEffect } from \"react\";\r\nimport { useLazyQuery, NetworkStatus } from \"@apollo/client\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport { Grid } from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useStyles } from \"styles/patientsPageStyles\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport PatientFilters from \"components/Forms/Filters/PatientFilters\";\r\nimport { patientsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo, searchOptions } from \"helpers/mockData\";\r\nimport {\r\n  getPatients,\r\n  getPatientsByPlan,\r\n  getPatientsByStatus,\r\n} from \"components/graphQL/useQuery\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport { useParams, Link, NavLink, Redirect } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { getSearchPlaceholder } from \"helpers/func\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { Checkbox, Chip, TableCell, TableRow } from \"@mui/material\";\r\n\r\nconst HospitalUsers = () => {\r\n  const classes = useStyles();\r\n  const { ids: id } = useParams();\r\n  const history = useHistory();\r\n  const theme = useTheme();\r\n  const { setSelectedRows } = useActions();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  // const navigate = useNavigate();\r\n\r\n  const { displayAlert } = useAlert();\r\n  const [profiles, setProfiles] = useState([]);\r\n  const [fetchPatient, { loading, refetch, error, variables, networkStatus }] =\r\n    useLazyQuery(getPatients);\r\n\r\n  const [\r\n    fetchPatientByStatus,\r\n    {\r\n      loading: byStatusLoading,\r\n      variables: byStatusVaribles,\r\n      refetch: byStatusRefetch,\r\n    },\r\n  ] = useLazyQuery(getPatientsByStatus);\r\n  const [\r\n    fetchPatientByPlan,\r\n    {\r\n      loading: byPlanLoading,\r\n      variables: byPlanVaribles,\r\n      refetch: byPlanRefetch,\r\n    },\r\n  ] = useLazyQuery(getPatientsByPlan);\r\n\r\n  const [pageInfo, setPageInfo] = useState({\r\n    page: 0,\r\n    totalPages: 1,\r\n    hasNextPage: false,\r\n    hasPrevPage: false,\r\n    limit: 10,\r\n    totalDocs: 0,\r\n  });\r\n  useEffect(() => {\r\n    fetchPatient({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        provider: id,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setPageInfo(data?.profiles?.pageInfo || []);\r\n          setProfiles(data?.profiles?.data || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(data?.profiles?.pageInfo || defaultPageInfo);\r\n        setProfiles(data?.profiles?.data || []);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  // if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n      <Grid\r\n        item\r\n        container\r\n        spacing={2}\r\n        className={classes.searchFilterContainer}\r\n      >\r\n        <Grid item container flexWrap=\"wrap\" spacing={4}></Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        filters={\r\n          <PatientFilters\r\n            setProfiles={setProfiles}\r\n            setPageInfo={setPageInfo}\r\n            queryParams={{\r\n              patientsParams: { fetchPatient, loading, refetch, variables },\r\n              patientsByStatusParams: {\r\n                byStatusLoading,\r\n                byStatusVaribles,\r\n                byStatusRefetch,\r\n                fetchPatientByStatus,\r\n              },\r\n              patientsByPlanParams: {\r\n                byPlanLoading,\r\n                byPlanVaribles,\r\n                byPlanRefetch,\r\n                fetchPatientByPlan,\r\n              },\r\n            }}\r\n          />\r\n        }\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{\r\n              fetchData: fetchPatient,\r\n              variables,\r\n              loading,\r\n              newVariables: {},\r\n            }}\r\n            setPageInfo={(data) => setPageInfo(data?.profiles?.pageInfo || {})}\r\n            setProfiles={(data) => setProfiles(data?.profiles?.data || [])}\r\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\r\n            filterOptions={searchOptions}\r\n          />\r\n        }\r\n      >\r\n        {loading || byStatusLoading || byPlanLoading ? (\r\n          <Loader />\r\n        ) : networkStatus === NetworkStatus.refetch ? (\r\n          <Loader />\r\n        ) : profiles.length > 0 ? (\r\n          /* ================= PATIENTS TABLE ================= */\r\n          <Grid\r\n            container\r\n            item\r\n            direction=\"column\"\r\n            overflow=\"hidden\"\r\n            maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n          >\r\n            <EnhancedTable\r\n              headCells={patientsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"Patients per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchPatient, {\r\n                  first: e,\r\n                  provider: id,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchPatient, page, pageInfo, {\r\n                  provider: id,\r\n                });\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const {\r\n                  _id,\r\n                  dociId,\r\n                  firstName,\r\n                  lastName,\r\n                  plan,\r\n                  provider,\r\n                  consultations,\r\n                  status,\r\n                } = row;\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: \"pointer\" }}\r\n                    onClick={(e) => {\r\n                      <Redirect\r\n                        to={{\r\n                          pathname: `/patients/${_id}`,\r\n                          state: { from: `/user-type/heala/${id}/${_id}` },\r\n                        }}\r\n                      />;\r\n                    }}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    {/* </NavLink> */}\r\n\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        textAlign: \"left\",\r\n                      }}\r\n                    >\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        {dociId?.split(\"-\")[1]}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ fontSize: \"1.25rem\" }}>{`${\r\n                            firstName && firstName\r\n                          } ${lastName && lastName}`}</span>\r\n                        </div>\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        {plan ? plan : \"No Plan\"}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\", textColor: \"red\" }}\r\n                      >\r\n                        {provider ? provider : \"No Provider\"}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\", textColor: \"inherit\" }}\r\n                      >\r\n                        {consultations ? consultations : 0}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\", textColor: \"inherit\" }}\r\n                      >\r\n                        <Chip\r\n                          label={\r\n                            status && status === \"Active\"\r\n                              ? \"Active\"\r\n                              : \"Inactive\"\r\n                          }\r\n                          className={classes.badge}\r\n                          style={{\r\n                            background:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.lightGreen\r\n                                : theme.palette.common.lightRed,\r\n                            color:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.green\r\n                                : theme.palette.common.red,\r\n                          }}\r\n                        />\r\n                      </NavLink>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={patientsHeadCells}\r\n            paginationLabel=\"Patients per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HospitalUsers;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HMODoctorPage.js",["1672","1673","1674","1675","1676","1677","1678","1679","1680","1681","1682"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NetworkStatus } from \"@apollo/client\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  Grid,\r\n  TableRow,\r\n  TableCell,\r\n  Button,\r\n  Checkbox,\r\n  Chip,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { timeConverter } from \"components/Utilities/Time\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { useStyles } from \"../../styles/doctorsPageStyles\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport {\r\n  getDoctorsProfile,\r\n  getDoctorsProfileByStatus,\r\n} from \"components/graphQL/useQuery\";\r\nimport { hcpsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { createDOctorProfile } from \"components/graphQL/Mutation\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\r\nimport { addDoctorValidationSchema } from \"helpers/validationSchemas\";\r\nimport { Loader, Modals, CustomButton } from \"components/Utilities\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport {\r\n  addDocInitialValues,\r\n  /* cadreFilterBy, */\r\n  defaultPageInfo,\r\n  docCadreOptions,\r\n  docSpecializationsOptions,\r\n  doctorsSearchOptions,\r\n  genderType,\r\n} from \"helpers/mockData\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport DoctorFilters from \"components/Forms/Filters/DoctorsFilters\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst HMODoctorPage = () => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { displayAlert } = useAlert();\r\n  const [profiles, setProfiles] = useState(\"\");\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const { provider } = useSelector((state) => state.patient);\r\n  const { id, ids } = useParams();\r\n  console.log(provider);\r\n  const [openAddHcp, setOpenAddHcp] = useState(false);\r\n  const [createDoc] = useMutation(createDOctorProfile);\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [fetchDoctors, { error, loading, refetch, variables, networkStatus }] =\r\n    useLazyQuery(getDoctorsProfile);\r\n  const [\r\n    fetchDoctorsByStatus,\r\n    {\r\n      loading: byStatusLoading,\r\n      refetch: byStatusRefetch,\r\n      variables: byStatusVariables,\r\n    },\r\n  ] = useLazyQuery(getDoctorsProfileByStatus);\r\n\r\n  useEffect(() => {\r\n    fetchDoctors({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        providerId: ids,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data && provider === \"\") {\r\n          setPageInfo(data.doctorProfiles.pageInfo || []);\r\n          setProfiles(data.doctorProfiles.profile || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  useEffect(() => {\r\n    fetchDoctors({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        providerId: ids,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data && provider !== \"\") {\r\n          setPageInfo(data.doctorProfiles.pageInfo || []);\r\n          setProfiles(data.doctorProfiles.profile || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [provider]);\r\n\r\n  const onSubmit = async (values) => {\r\n    const {\r\n      createdAt,\r\n      updatedAt,\r\n      firstName,\r\n      lastName,\r\n      gender,\r\n      phone,\r\n      email,\r\n      hospital,\r\n      dociId,\r\n      specialization,\r\n      dob,\r\n      cadre,\r\n      image,\r\n    } = values;\r\n    const correctDOB = timeConverter(dob);\r\n    await createDoc({\r\n      variables: {\r\n        dociId,\r\n        createdAt,\r\n        updatedAt,\r\n        firstName,\r\n        lastName,\r\n        gender,\r\n        phoneNumber: phone,\r\n        email,\r\n        hospital,\r\n        specialization,\r\n        dob: correctDOB,\r\n        cadre,\r\n        image,\r\n        providerId: \"61db6f8968b248001aec4fcb\",\r\n      },\r\n      refetchQueries: [{ query: getDoctorsProfile }],\r\n    });\r\n    setOpenAddHcp(false);\r\n  };\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const getSearchPlaceholder = (filterBy) => {\r\n    return filterBy === \"id\"\r\n      ? \"Search by ID e.g 7NE6ELLO\"\r\n      : filterBy === \"firstName\"\r\n      ? \"Search by first name e.g John\"\r\n      : filterBy === \"lastName\"\r\n      ? \"Search by last name e.g Doe\"\r\n      : \"\";\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(data.doctorProfiles.pageInfo || defaultPageInfo);\r\n        setProfiles(data.doctorProfiles.profile || []);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\r\n      <Grid\r\n        item\r\n        gap={{ md: 4, sm: 4, xs: 2 }}\r\n        direction={{ sm: \"row\", xs: \"column\" }}\r\n        container\r\n        justifyContent=\"flex-end\"\r\n      >\r\n        <Grid item>\r\n          <CustomButton\r\n            endIcon={<AddIcon />}\r\n            title=\"Add Doctor\"\r\n            type={buttonType}\r\n            onClick={() => setOpenAddHcp(true)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      {/* ========= FILTERS =========== */}\r\n\r\n      <TableLayout\r\n        filters={\r\n          <DoctorFilters\r\n            setProfiles={setProfiles}\r\n            setPageInfo={setPageInfo}\r\n            queryParams={{\r\n              doctorsParams: { fetchDoctors, loading, refetch, variables },\r\n              doctorsByStatusParams: {\r\n                byStatusLoading,\r\n                byStatusVariables,\r\n                byStatusRefetch,\r\n                fetchDoctorsByStatus,\r\n              },\r\n            }}\r\n          />\r\n        }\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{ fetchData: fetchDoctors, variables, loading }}\r\n            setPageInfo={(data) =>\r\n              setPageInfo(data.doctorProfiles.pageInfo || {})\r\n            }\r\n            setProfiles={(data) =>\r\n              setProfiles(data.doctorProfiles.profile || [])\r\n            }\r\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\r\n            filterOptions={doctorsSearchOptions}\r\n          />\r\n        }\r\n      >\r\n        {loading ? (\r\n          <Loader />\r\n        ) : byStatusLoading ? (\r\n          <Loader />\r\n        ) : networkStatus === NetworkStatus.refetch ? (\r\n          <Loader />\r\n        ) : profiles.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={hcpsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"Doctors per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchDoctors, {\r\n                  first: e,\r\n                  providerId: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchDoctors, page, pageInfo, {\r\n                  providerId: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const {\r\n                  _id,\r\n                  dociId,\r\n                  firstName,\r\n                  provider,\r\n                  status,\r\n                  specialization,\r\n                  consultations,\r\n                  lastName,\r\n                } = row;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: \"pointer\" }}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        minWidth: \"10rem\",\r\n                      }}\r\n                    >\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        {dociId?.split(\"-\")[1]}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Link to={`/hcps/${_id}`} className={classes.link}>\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ fontSize: \"1.25rem\" }}>\r\n                            {firstName} {lastName}\r\n                          </span>\r\n                        </div>\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.grey }}\r\n                    >\r\n                      <Link to={`/hcps/${_id}`} className={classes.link}>\r\n                        {specialization}{\" \"}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        {consultations ? consultations : 0}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.grey }}\r\n                    >\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        {provider ? provider : \"No Provider\"}{\" \"}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        <Chip\r\n                          label={\r\n                            status && status === \"Active\"\r\n                              ? \"Active\"\r\n                              : \"Inactive\"\r\n                          }\r\n                          className={classes.badge}\r\n                          style={{\r\n                            background:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.lightGreen\r\n                                : theme.palette.common.lightRed,\r\n                            color:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.green\r\n                                : theme.palette.common.red,\r\n                          }}\r\n                        />\r\n                      </Link>\r\n                    </TableCell>\r\n                    {/* <TableCell>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        className={classes.button}\r\n                        component={Link}\r\n                        to={`hcps/${_id}`}\r\n                        endIcon={<ArrowForwardIosIcon />}\r\n                      >\r\n                        View Doctor\r\n                      </Button>\r\n                    </TableCell> */}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={hcpsHeadCells}\r\n            paginationLabel=\"Doctors per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n      {/* ADD Doctor MODAL */}\r\n      <Modals\r\n        isOpen={openAddHcp}\r\n        title=\"Add Doctor\"\r\n        rowSpacing={5}\r\n        height=\"auto\"\r\n        width={{ sm: \"50vw\", xs: \"90vw\" }}\r\n        handleClose={() => setOpenAddHcp(false)}\r\n      >\r\n        <Formik\r\n          initialValues={addDocInitialValues}\r\n          onSubmit={onSubmit}\r\n          validationSchema={addDoctorValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"1rem\" }}>\r\n                <Grid container direction=\"column\" gap={2}>\r\n                  <Grid item container direction=\"column\" gap={1}>\r\n                    <Grid item container spacing={2}>\r\n                      <Grid item container xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"First Name\"\r\n                          id=\"firstName\"\r\n                          name=\"firstName\"\r\n                          placeholder=\"Enter first name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item container xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Last Name\"\r\n                          id=\"lastName\"\r\n                          name=\"lastName\"\r\n                          placeholder=\"Enter last name\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid item container direction=\"column\" gap={2}>\r\n                      <Grid item container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"date\"\r\n                            name=\"dob\"\r\n                            label=\"DOB\"\r\n                            setFieldValue={setFieldValue}\r\n                            setValues={setValues}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <Grid container direction=\"column\">\r\n                            <FormikControl\r\n                              control=\"select\"\r\n                              options={docSpecializationsOptions}\r\n                              name=\"specialization\"\r\n                              label=\"Specialization\"\r\n                              placeholder=\"Specialization\"\r\n                            />\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container direction=\"column\" gap={2}>\r\n                    <Grid item container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          label=\"Gender\"\r\n                          id=\"gender\"\r\n                          name=\"gender\"\r\n                          options={genderType}\r\n                          placeholder=\"Gender\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Phone Number\"\r\n                          id=\"phone\"\r\n                          name=\"phone\"\r\n                          placeholder=\"Enter last Phone number\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item container direction=\"column\" gap={2}>\r\n                      <Grid item container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"input\"\r\n                            label=\"Hospital\"\r\n                            id=\"hospital\"\r\n                            name=\"hospital\"\r\n                            placeholder=\"Enter hospital Name\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6} marginBottom={{ xs: 1 }}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={docCadreOptions}\r\n                            name=\"cadre\"\r\n                            label=\"Cadre\"\r\n                            placeholder=\"Select Cadre\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container spacing={2} alignItems=\"center\">\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"file\"\r\n                        name=\"image\"\r\n                        label=\"Profile Pics\"\r\n                        setFieldValue={setFieldValue}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        label=\"Heala-ID\"\r\n                        id=\"dociId\"\r\n                        name=\"dociId\"\r\n                        placeholder=\"Enter Heala ID\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <CustomButton\r\n                      title=\"Add Doctor\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HMODoctorPage;\r\n2;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaFilterPartnerPage.js",["1683","1684","1685","1686","1687","1688","1689","1690","1691","1692","1693","1694","1695","1696","1697","1698","1699","1700","1701","1702","1703","1704"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\r\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport AddPartner from \"components/Forms/AddPartner\";\r\nimport {\r\n  Checkbox,\r\n  TableCell,\r\n  Avatar,\r\n  TableRow,\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { categoryFilterOptions, defaultPageInfo } from \"helpers/mockData\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport {\r\n  changeTableLimit,\r\n  deleteItem,\r\n  deleteVar,\r\n  filterData,\r\n  handlePageChange,\r\n  banks,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport DeletePartner from \"components/modals/DeleteOrDisable\";\r\nimport { partnersHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport {\r\n  addPartner,\r\n  addPartnerCategory,\r\n  regeneratePartnerProfileUrl,\r\n} from \"components/graphQL/Mutation\";\r\nimport {\r\n  getPartners,\r\n  getSingleProvider,\r\n  getProviders,\r\n  DELETE_PARTNER,\r\n} from \"components/graphQL/useQuery\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport {\r\n  addNewPartnerValidationSchema,\r\n  addPartnerValidationSchema,\r\n  filterPartnersValidationSchema,\r\n} from \"helpers/validationSchemas\";\r\nimport Filter from \"components/Forms/Filters\";\r\nimport { PageInfo } from \"components/graphQL/fragment\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { EditDelBtn } from \"components/Buttons/EditDelBtn\";\r\n\r\nconst HealaFilterPartnerPage = () => {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const { id, ids } = useParams();\r\n  const { displayAlert } = useAlert();\r\n  /* const [setCategoryDatas] = useState([]); */\r\n  const { setSelectedRows } = useActions();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [partner, setPartners] = useState([]);\r\n  const [dropDown, setDropDown] = useState([]);\r\n  const [addPartners] = useMutation(addPartner);\r\n  const categoryData = useQuery(getSingleProvider);\r\n  const [delete_partner] = useLazyQuery(DELETE_PARTNER);\r\n  /*   const [searchPartner, setSearchPartner] = useState(\"\"); */\r\n  const [isDeleting, setIsDeleting] = useState({});\r\n  const [addPartnerCat] = useMutation(addPartnerCategory);\r\n  const { data: da, loading: load } = useQuery(getProviders);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [openAddPartner, setOpenAddPartner] = useState(false);\r\n  const [openFilterPartner, setOpenFilterPartner] = useState(false);\r\n  const [openDeletePartner, setOpenDeletePartner] = useState(false);\r\n  const [partnerToDelete, setPartnerToDelete] = useState(null);\r\n  const [partnerFilterValues, setPartnerFilterValues] = useState({\r\n    category: \"\",\r\n  });\r\n  const { selectedRows /* page */ } = useSelector((state) => state.tables);\r\n  const [openAddPartnerCategory, setAddPartnerCategory] = useState(false);\r\n  const [fetchPartners, { loading, error, refetch, variables }] =\r\n    useLazyQuery(getPartners);\r\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\r\n\r\n  const specializations = [\r\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\r\n    { key: \"Hospital\", value: \"Hospital\" },\r\n  ];\r\n  const categoryOptions = [\r\n    { key: \"Diagnostics\", value: \"diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"pharmacy\" },\r\n    { key: \"Hospital\", value: \"hospital\" },\r\n  ];\r\n  const classificationOptions = [\r\n    { key: \"Primary Healthcare\", value: \"Primary Healthcare\" },\r\n    { key: \"Secondary Healthcare\", value: \"Secondary Healthcare\" },\r\n  ];\r\n\r\n  const specializationOptions = [\r\n    { key: \"Dental Care\", value: \"Dental Care\" },\r\n    { key: \"Eye Clinic\", value: \"Eye Clinic\" },\r\n    { key: \"Skin Care\", value: \"Skin Care\" },\r\n    { key: \"Mental Care\", value: \"Mental Care\" },\r\n  ];\r\n  const specializations5 = [\r\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\r\n    { key: \"Hospital\", value: \"Hospital\" },\r\n  ];\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const darkButtonType = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const initialValues = {\r\n    Name: \"\",\r\n    date: \"\",\r\n    category: \"\",\r\n  };\r\n\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    email: \"\",\r\n    specialization: \"\",\r\n    category: \"\",\r\n    account: \"\",\r\n    address: \"\",\r\n    phone: \"\",\r\n    classification: \"\",\r\n    bank: \"\",\r\n    image: null,\r\n    provider: \"\",\r\n  };\r\n\r\n  const initialValues2 = {\r\n    category: \"\",\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then((res) => {\r\n        const { data } = res;\r\n        if (data) {\r\n          setPartners(data?.getPartners?.data || []);\r\n          setPageInfo(data?.getPartners?.pageInfo || defaultPageInfo);\r\n        }\r\n        if (!data) {\r\n          setPartners(res?.getPartners?.data || []);\r\n          setPageInfo(res?.getPartners?.pageInfo || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  const fetchPartnersData = async () => {\r\n    const res = fetchPartners({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        provider: ids,\r\n      },\r\n    });\r\n    setTableData(res, \"Couldn't fetch Partners data\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPartnersData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (da) {\r\n      const datas = da.getProviders.provider;\r\n      setDropDown(\r\n        datas?.map((i) => {\r\n          return { key: i.name, value: i._id };\r\n        })\r\n      );\r\n    }\r\n  }, [da]);\r\n\r\n  useEffect(() => {\r\n    (partner || []).map((p) => {\r\n      const newIsDeleting = isDeleting;\r\n      setIsDeleting({ [p._id]: false, ...newIsDeleting });\r\n      return null;\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [partner]);\r\n\r\n  const onSubmit = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const onSubmit2 = async (values, onSubmitProps) => {\r\n    const { category } = values;\r\n\r\n    try {\r\n      const addCatRes = await addPartnerCat({\r\n        variables: {\r\n          name: category,\r\n        },\r\n      });\r\n\r\n      if (addCatRes?.addPartner?.partner) {\r\n        setAddPartnerCategory(false);\r\n        onSubmitProps.resetForm();\r\n        const res = refetch();\r\n        setTableData(res, \"Couldn't fetch partners.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const onSubmit1 = async (values, onSubmitProps) => {\r\n    console.log(values);\r\n    let {\r\n      name,\r\n      email,\r\n      category,\r\n      phone,\r\n      bank,\r\n      specialization,\r\n      provider,\r\n      image,\r\n      account,\r\n    } = values;\r\n    name = name.trim();\r\n\r\n    try {\r\n      await addPartners({\r\n        variables: {\r\n          name,\r\n          email,\r\n          category,\r\n          specialization,\r\n          account,\r\n          phone,\r\n          bank,\r\n          logoImageUrl: image,\r\n          providerId: provider,\r\n        },\r\n        refetchQueries: [{ query: getPartners }],\r\n      });\r\n      enqueueSnackbar(\"Partner added successfully\", {\r\n        variant: \"success\",\r\n      });\r\n      onSubmitProps.resetForm();\r\n      setOpenAddPartner(false);\r\n    } catch (err) {\r\n      console.log(err, \"err\");\r\n      enqueueSnackbar(\"Email is already taken\", {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const onFilterCategoryChange = async (value) => {\r\n    try {\r\n      deleteVar(variables);\r\n      setPartnerFilterValues({ ...partnerFilterValues, category: value });\r\n      const filterVariables = { category: value };\r\n\r\n      const res = filterData(filterVariables, {\r\n        fetchData: fetchPartners,\r\n        refetch: refetch,\r\n        variables: variables,\r\n      });\r\n      await setTableData(res, \"couldn't filter table.\");\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setPartnerFilterValues, \"\");\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\r\n    setFilterValue(defaultVal);\r\n\r\n    deleteVar(variables);\r\n\r\n    const res = refetch();\r\n    await setTableData(res, \"couldn't filter table.\");\r\n  };\r\n  const [newProfileUrl, setNewProfileUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setNewProfileUrl(daa?.regeneratePartnerProfileUrl?.partner?.profileUrl);\r\n  }, [daa]);\r\n  const [Id, setId] = useState(\"\");\r\n  const handleGenerateLink = async (id) => {\r\n    setId(id);\r\n    await regenerate({\r\n      variables: {\r\n        id,\r\n      },\r\n      refetchQueries: [\r\n        {\r\n          query: getPartners,\r\n          variables: {\r\n            variables: pageInfo.page,\r\n            limit: PageInfo.limit,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const z = (id) => {\r\n    let b = \"\";\r\n    const m = daa?.regeneratePartnerProfileUrl?.partner?._id;\r\n    if (id === m) {\r\n      b = m;\r\n    } else {\r\n      b = \"\";\r\n    }\r\n    return b;\r\n  };\r\n  useEffect(() => {\r\n    partner.map((item) => {\r\n      if (item._id === Id) {\r\n        return {\r\n          ...item,\r\n          profileUrl: newProfileUrl,\r\n        };\r\n      }\r\n    });\r\n\r\n    //eslint-disable-next-line\r\n  }, [Id, newProfileUrl]);\r\n  if (error || categoryData.error)\r\n    return <NoData error={error || categoryData.error} />;\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      gap={{ sm: 4, xs: 2 }}\r\n      flexWrap=\"nowrap\"\r\n      height=\"100%\"\r\n    >\r\n      <Grid\r\n        item\r\n        container\r\n        gap={2}\r\n        direction={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          justifyContent=\"flex-end\"\r\n          alignItems=\"center\"\r\n          flex={{ sm: 1, xs: 1, md: 1 }}\r\n        >\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<PersonAddAlt1Icon />}\r\n              title=\"Add Partner\"\r\n              type={darkButtonType}\r\n              onClick={() => setOpenAddPartner(true)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        filters={\r\n          <Filter\r\n            onHandleChange={(e) => onFilterCategoryChange(e?.target?.value)}\r\n            onClickClearBtn={() => onFilterCategoryChange(\"\")}\r\n            options={[{ key: \"Category\", value: \"\" }, ...categoryFilterOptions]}\r\n            name=\"category\"\r\n            placeholder=\"None\"\r\n            value={partnerFilterValues.category}\r\n            hasClearBtn={true}\r\n            disable={loading}\r\n          />\r\n        }\r\n      >\r\n        {load || loading ? (\r\n          <Loader />\r\n        ) : partner.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={partnersHeadCells}\r\n              rows={partner}\r\n              paginationLabel=\"Partner per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchPartners, {\r\n                  first: e,\r\n                  provider: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchPartners, page, pageInfo, {\r\n                  provider: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {partner.map((row, index) => {\r\n                const isItemSelected = isSelected(row.id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                const { _id, logoImageUrl, name, email, category } = row;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ maxWidth: \"20rem\" }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"left\",\r\n                        }}\r\n                      >\r\n                        {/* <span style={{ marginRight: \"1rem\" }}>\r\n                          <Avatar\r\n                            alt={`Display Photo of ${name}`}\r\n                            src={logoImageUrl}\r\n                            sx={{ width: 24, height: 24 }}\r\n                          />\r\n                        </span> */}\r\n                        <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {email}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {category}\r\n                    </TableCell>\r\n\r\n                    {/* <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {profileUrl || z(_id) !== \"\" ? (\r\n                        <Typography\r\n                          style={{\r\n                            color: \"rgb(0 0 0)\",\r\n                            fontWeight: 400,\r\n                            fontSize: \"1.25rem\",\r\n                            maxWidth: \"20rem\",\r\n                          }}\r\n                          sx={{ display: \"flex\", alignItems: \"center\" }}\r\n                        >\r\n                          {trucateProfileLink(profileUrl ? profileUrl : z(_id))}\r\n                          <div style={{ marginLeft: \"1rem\" }}>\r\n                            <Copy\r\n                              name=\"Profile Link\"\r\n                              text={profileUrl ? profileUrl : z(_id)}\r\n                            />\r\n                          </div>\r\n                        </Typography>\r\n                      ) : (\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          disableRipple\r\n                          className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                          onClick={() => handleGenerateLink(_id)}\r\n                        >\r\n                          Generate Link\r\n                        </Button>\r\n                      )}\r\n                    </TableCell> \r\n                    <TableCell align=\"center\" className={classes.tableCell}>\r\n                      {isDeleting[_id] ? (\r\n                        <Loader />\r\n                      ) : (\r\n                        <EditDelBtn\r\n                          onHandleClick={() => {\r\n                            setPartnerToDelete(_id || \"\");\r\n                            setOpenDeletePartner(true);\r\n                          }}\r\n                          type=\"delete\"\r\n                          text=\"Delete partner\"\r\n                        />\r\n                      )}\r\n                    </TableCell>*/}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={partnersHeadCells}\r\n            paginationLabel=\"Doctors per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n      <Modals\r\n        isOpen={openFilterPartner}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        width={{ sm: \"40vw\", xs: \"90vw\", md: \"40vw\" }}\r\n        handleClose={() => setOpenFilterPartner(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={onSubmit}\r\n          validateOnBlur={false}\r\n          validationSchema={filterPartnersValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={3}>\r\n                  <Grid item marginBottom={3}>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          name=\"Name\"\r\n                          label=\"Name\"\r\n                          placeholder=\"Select name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializations}\r\n                          name=\"date\"\r\n                          label=\"Date\"\r\n                          placeholder=\"Choose Date\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  container\r\n                  spacing={2}\r\n                  style={{ marginBottom: \"10rem\" }}\r\n                >\r\n                  <Grid item xs={6}>\r\n                    <FormikControl\r\n                      control=\"select\"\r\n                      options={specializations}\r\n                      name=\"category\"\r\n                      label=\"Category\"\r\n                      placeholder=\"Select Category\"\r\n                    />\r\n                  </Grid>\r\n                  {/* Placeholder grid */}\r\n                  <Grid item md></Grid>\r\n                </Grid>\r\n                <Grid item container xs={12}>\r\n                  <CustomButton\r\n                    title=\"Apply Filter\"\r\n                    width=\"100%\"\r\n                    type={buttonType}\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                  />\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      {/* ADD NEW PARTER MODAL */}\r\n      <AddPartner\r\n        id={ids}\r\n        open={openAddPartner}\r\n        handleClose={() => setOpenAddPartner(false)}\r\n        category={true}\r\n      />\r\n      {/* <Modals\r\n        isOpen={openAddPartner}\r\n        title=\"Add Partners\"\r\n        rowSpacing={5}\r\n        handleClose={() => setOpenAddPartner(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={addNewPartnerValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty, values, setFieldValue }) => {\r\n            const { classification, category } = values;\r\n            return (\r\n              <Form style={{ marginTop: \"1rem\" }}>\r\n                <Grid container direction=\"column\" gap={1.5}>\r\n                  <Grid item container>\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Name\"\r\n                          id=\"name\"\r\n                          name=\"name\"\r\n                          placeholder=\"Enter Partner name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Email\"\r\n                          id=\"name\"\r\n                          name=\"email\"\r\n                          placeholder=\"Enter Email\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\" Account Number\"\r\n                          id=\"account\"\r\n                          name=\"account\"\r\n                          placeholder=\"Enter Account Number\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Phone Number\"\r\n                          id=\"phone\"\r\n                          name=\"phone\"\r\n                          placeholder=\"Enter Phone Number\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={categoryOptions}\r\n                          name=\"category\"\r\n                          label=\"Category\"\r\n                          placeholder=\"Category\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={banks}\r\n                          name=\"bank\"\r\n                          label=\"Bank\"\r\n                          placeholder=\"Select Bank\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    {category === \"hospital\" && (\r\n                      <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={dropDown}\r\n                            name=\"provider\"\r\n                            label=\"Provider\"\r\n                            id=\"provider\"\r\n                            placeholder=\"Select Provider\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={classificationOptions}\r\n                            name=\"classification\"\r\n                            label=\"Classification\"\r\n                            id=\"classification\"\r\n                            placeholder=\"select classification\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    )}\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"file\"\r\n                          name=\"image\"\r\n                          label=\"Company Logo\"\r\n                          setFieldValue={setFieldValue}\r\n                        />\r\n                      </Grid>\r\n                      {classification === \"Secondary Healthcare\" && (\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={specializationOptions}\r\n                            name=\"specialization\"\r\n                            label=\"Specialization\"\r\n                            id=\"specialization\"\r\n                            placeholder=\"Select Specialization\"\r\n                          />\r\n                        </Grid>\r\n                      )}\r\n                    </Grid>\r\n                    <Grid item container flexWrap=\"nowrap\">\r\n                      <Grid item container>\r\n                        <FormikControl\r\n                          control=\"textarea\"\r\n                          name=\"address\"\r\n                          minRows={3}\r\n                          label=\"Address\"\r\n                          placeholder=\"Enter address\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container sx={{ mt: 1 }}>\r\n                    <CustomButton\r\n                      title=\"Add Partner\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals> */}\r\n\r\n      {/* Add Partner Category */}\r\n      <Modals\r\n        isOpen={openAddPartnerCategory}\r\n        title=\"Add Partners Category\"\r\n        rowSpacing={5}\r\n        handleClose={() => setAddPartnerCategory(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues2}\r\n          onSubmit={onSubmit2}\r\n          validationSchema={addPartnerValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid container direction=\"column\" gap={3}>\r\n                  <Grid item container>\r\n                    <Grid item container direction=\"column\" gap={1}>\r\n                      <Grid item container>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializations5}\r\n                          name=\"category\"\r\n                          label=\"Category\"\r\n                          placeholder=\"Specialization\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <CustomButton\r\n                      title=\"Add Partner\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n      <DeletePartner\r\n        open={openDeletePartner}\r\n        setOpen={setOpenDeletePartner}\r\n        title=\"Delete Partner\"\r\n        btnValue=\"delete\"\r\n        onConfirm={async () => {\r\n          const res = deleteItem(\r\n            delete_partner,\r\n            partnerToDelete,\r\n            setPartnerToDelete,\r\n            refetch,\r\n            Typography,\r\n            enqueueSnackbar,\r\n            setIsDeleting,\r\n            isDeleting\r\n          );\r\n          setOpenDeletePartner(false);\r\n          await setTableData(res, \"Couldn't refetch Partners\");\r\n        }}\r\n        confirmationMsg=\"delete partner\"\r\n        onCancel={() => {\r\n          setPartnerToDelete(null);\r\n        }}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HealaFilterPartnerPage;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HMOUsers.js",["1705","1706","1707","1708","1709","1710","1711","1712","1713","1714","1715","1716"],"import React, { useState, useEffect } from \"react\";\r\nimport { useLazyQuery, NetworkStatus } from \"@apollo/client\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport { Grid } from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useStyles } from \"styles/patientsPageStyles\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport PatientFilters from \"components/Forms/Filters/PatientFilters\";\r\nimport { patientsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo, searchOptions } from \"helpers/mockData\";\r\nimport {\r\n  getPatients,\r\n  getPatientsByPlan,\r\n  getPatientsByStatus,\r\n} from \"components/graphQL/useQuery\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport { useParams, Link, NavLink, Redirect } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { getSearchPlaceholder } from \"helpers/func\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { Checkbox, Chip, TableCell, TableRow } from \"@mui/material\";\r\n\r\nconst HMOUsers = () => {\r\n  const classes = useStyles();\r\n  const { id, ids } = useParams();\r\n  const history = useHistory();\r\n  const theme = useTheme();\r\n  const { setSelectedRows } = useActions();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  // const navigate = useNavigate();\r\n  console.log(ids);\r\n  const { displayAlert } = useAlert();\r\n  const [profiles, setProfiles] = useState([]);\r\n  const [fetchPatient, { loading, refetch, error, variables, networkStatus }] =\r\n    useLazyQuery(getPatients);\r\n\r\n  const [\r\n    fetchPatientByStatus,\r\n    {\r\n      loading: byStatusLoading,\r\n      variables: byStatusVaribles,\r\n      refetch: byStatusRefetch,\r\n    },\r\n  ] = useLazyQuery(getPatientsByStatus);\r\n  const [\r\n    fetchPatientByPlan,\r\n    {\r\n      loading: byPlanLoading,\r\n      variables: byPlanVaribles,\r\n      refetch: byPlanRefetch,\r\n    },\r\n  ] = useLazyQuery(getPatientsByPlan);\r\n\r\n  const [pageInfo, setPageInfo] = useState({\r\n    page: 0,\r\n    totalPages: 1,\r\n    hasNextPage: false,\r\n    hasPrevPage: false,\r\n    limit: 10,\r\n    totalDocs: 0,\r\n  });\r\n  useEffect(() => {\r\n    fetchPatient({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        provider: ids,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setPageInfo(data?.profiles?.pageInfo || []);\r\n          setProfiles(data?.profiles?.data || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(data?.profiles?.pageInfo || defaultPageInfo);\r\n        setProfiles(data?.profiles?.data || []);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  // if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n      <Grid\r\n        item\r\n        container\r\n        spacing={2}\r\n        className={classes.searchFilterContainer}\r\n      >\r\n        <Grid item container flexWrap=\"wrap\" spacing={4}></Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        filters={\r\n          <PatientFilters\r\n            setProfiles={setProfiles}\r\n            setPageInfo={setPageInfo}\r\n            queryParams={{\r\n              patientsParams: { fetchPatient, loading, refetch, variables },\r\n              patientsByStatusParams: {\r\n                byStatusLoading,\r\n                byStatusVaribles,\r\n                byStatusRefetch,\r\n                fetchPatientByStatus,\r\n              },\r\n              patientsByPlanParams: {\r\n                byPlanLoading,\r\n                byPlanVaribles,\r\n                byPlanRefetch,\r\n                fetchPatientByPlan,\r\n              },\r\n            }}\r\n          />\r\n        }\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{\r\n              fetchData: fetchPatient,\r\n              variables,\r\n              loading,\r\n              newVariables: { provider: ids },\r\n            }}\r\n            setPageInfo={(data) => setPageInfo(data?.profiles?.pageInfo || {})}\r\n            setProfiles={(data) => setProfiles(data?.profiles?.data || [])}\r\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\r\n            filterOptions={searchOptions}\r\n          />\r\n        }\r\n      >\r\n        {loading || byStatusLoading || byPlanLoading ? (\r\n          <Loader />\r\n        ) : networkStatus === NetworkStatus.refetch ? (\r\n          <Loader />\r\n        ) : profiles.length > 0 ? (\r\n          /* ================= PATIENTS TABLE ================= */\r\n          <Grid\r\n            container\r\n            item\r\n            direction=\"column\"\r\n            overflow=\"hidden\"\r\n            maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n          >\r\n            <EnhancedTable\r\n              headCells={patientsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"Patients per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchPatient, {\r\n                  first: e,\r\n                  provider: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchPatient, page, pageInfo, {\r\n                  provider: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const {\r\n                  _id,\r\n                  dociId,\r\n                  firstName,\r\n                  lastName,\r\n                  plan,\r\n                  provider,\r\n                  consultations,\r\n                  status,\r\n                } = row;\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: \"pointer\" }}\r\n                    // onClick={(e) => {\r\n                    //   <Redirect\r\n                    //     to={{\r\n                    //       pathname: `/patients/${_id}`,\r\n                    //       state: { from: `/user-type/heala/${id}/${_id}` },\r\n                    //     }}\r\n                    //   />;\r\n                    // }}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <NavLink\r\n                        to={`/user-type/hmo/${id}/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    {/* </NavLink> */}\r\n\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        textAlign: \"left\",\r\n                      }}\r\n                    >\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        {dociId?.split(\"-\")[1]}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ fontSize: \"1.25rem\" }}>{`${\r\n                            firstName && firstName\r\n                          } ${lastName && lastName}`}</span>\r\n                        </div>\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        {plan ? plan : \"No Plan\"}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\", textColor: \"red\" }}\r\n                      >\r\n                        {provider ? provider : \"No Provider\"}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\", textColor: \"inherit\" }}\r\n                      >\r\n                        {consultations ? consultations : 0}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\", textColor: \"inherit\" }}\r\n                      >\r\n                        <Chip\r\n                          label={\r\n                            status && status === \"Active\"\r\n                              ? \"Active\"\r\n                              : \"Inactive\"\r\n                          }\r\n                          className={classes.badge}\r\n                          style={{\r\n                            background:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.lightGreen\r\n                                : theme.palette.common.lightRed,\r\n                            color:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.green\r\n                                : theme.palette.common.red,\r\n                          }}\r\n                        />\r\n                      </NavLink>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={patientsHeadCells}\r\n            paginationLabel=\"Patients per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HMOUsers;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HMOPartners.js",["1717","1718","1719","1720","1721","1722","1723","1724","1725","1726","1727","1728","1729","1730","1731","1732","1733","1734","1735","1736","1737","1738"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\r\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  Checkbox,\r\n  TableCell,\r\n  Avatar,\r\n  TableRow,\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { categoryFilterOptions, defaultPageInfo } from \"helpers/mockData\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport {\r\n  changeTableLimit,\r\n  deleteItem,\r\n  deleteVar,\r\n  filterData,\r\n  handlePageChange,\r\n  banks,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport DeletePartner from \"components/modals/DeleteOrDisable\";\r\nimport { partnersHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport {\r\n  addPartner,\r\n  addPartnerCategory,\r\n  regeneratePartnerProfileUrl,\r\n} from \"components/graphQL/Mutation\";\r\nimport {\r\n  getPartners,\r\n  getSingleProvider,\r\n  getProviders,\r\n  DELETE_PARTNER,\r\n} from \"components/graphQL/useQuery\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport {\r\n  addNewPartnerValidationSchema,\r\n  addPartnerValidationSchema,\r\n  filterPartnersValidationSchema,\r\n} from \"helpers/validationSchemas\";\r\nimport Filter from \"components/Forms/Filters\";\r\nimport { PageInfo } from \"components/graphQL/fragment\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { EditDelBtn } from \"components/Buttons/EditDelBtn\";\r\nimport AddPartner from \"components/Forms/AddPartner\";\r\n\r\nconst HMOPartners = () => {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const { id, ids } = useParams();\r\n  const { displayAlert } = useAlert();\r\n  /* const [setCategoryDatas] = useState([]); */\r\n  const { setSelectedRows } = useActions();\r\n  const [partner, setPartners] = useState([]);\r\n  const [dropDown, setDropDown] = useState([]);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [addPartners] = useMutation(addPartner);\r\n  const categoryData = useQuery(getSingleProvider);\r\n  const [delete_partner] = useLazyQuery(DELETE_PARTNER);\r\n  /*   const [searchPartner, setSearchPartner] = useState(\"\"); */\r\n  const [isDeleting, setIsDeleting] = useState({});\r\n  const [addPartnerCat] = useMutation(addPartnerCategory);\r\n  const { data: da, loading: load } = useQuery(getProviders);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [openAddPartner, setOpenAddPartner] = useState(false);\r\n  const [openFilterPartner, setOpenFilterPartner] = useState(false);\r\n  const [openDeletePartner, setOpenDeletePartner] = useState(false);\r\n  const [partnerToDelete, setPartnerToDelete] = useState(null);\r\n  const [partnerFilterValues, setPartnerFilterValues] = useState({\r\n    category: \"\",\r\n  });\r\n  const { selectedRows /* page */ } = useSelector((state) => state.tables);\r\n  const [openAddPartnerCategory, setAddPartnerCategory] = useState(false);\r\n  const [fetchPartners, { loading, error, refetch, variables }] =\r\n    useLazyQuery(getPartners);\r\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\r\n\r\n  const specializations = [\r\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\r\n    { key: \"Hospital\", value: \"Hospital\" },\r\n  ];\r\n  const categoryOptions = [\r\n    { key: \"Diagnostics\", value: \"diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"pharmacy\" },\r\n    { key: \"Hospital\", value: \"hospital\" },\r\n  ];\r\n  const classificationOptions = [\r\n    { key: \"Primary Healthcare\", value: \"Primary Healthcare\" },\r\n    { key: \"Secondary Healthcare\", value: \"Secondary Healthcare\" },\r\n  ];\r\n\r\n  const specializationOptions = [\r\n    { key: \"Dental Care\", value: \"Dental Care\" },\r\n    { key: \"Eye Clinic\", value: \"Eye Clinic\" },\r\n    { key: \"Skin Care\", value: \"Skin Care\" },\r\n    { key: \"Mental Care\", value: \"Mental Care\" },\r\n  ];\r\n  const specializations5 = [\r\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\r\n    { key: \"Hospital\", value: \"Hospital\" },\r\n  ];\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const darkButtonType = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const initialValues = {\r\n    Name: \"\",\r\n    date: \"\",\r\n    category: \"\",\r\n  };\r\n\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    email: \"\",\r\n    specialization: \"\",\r\n    category: \"\",\r\n    account: \"\",\r\n    address: \"\",\r\n    phone: \"\",\r\n    classification: \"\",\r\n    bank: \"\",\r\n    image: null,\r\n    provider: \"\",\r\n  };\r\n\r\n  const initialValues2 = {\r\n    category: \"\",\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then((res) => {\r\n        const { data } = res;\r\n\r\n        if (data) {\r\n          setPartners(data?.getPartners?.data || []);\r\n          setPageInfo(data?.getPartners?.pageInfo || defaultPageInfo);\r\n        }\r\n        if (!data) {\r\n          setPartners(res?.getPartners?.data || []);\r\n          setPageInfo(res?.getPartners?.pageInfo || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  const fetchPartnersData = async () => {\r\n    const res = fetchPartners({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        provider: ids,\r\n      },\r\n    });\r\n    setTableData(res, \"Couldn't fetch Partners data\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPartnersData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (da) {\r\n      const datas = da.getProviders.provider;\r\n      setDropDown(\r\n        datas?.map((i) => {\r\n          return { key: i.name, value: i._id };\r\n        })\r\n      );\r\n    }\r\n  }, [da]);\r\n\r\n  useEffect(() => {\r\n    (partner || []).map((p) => {\r\n      const newIsDeleting = isDeleting;\r\n      setIsDeleting({ [p._id]: false, ...newIsDeleting });\r\n      return null;\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [partner]);\r\n\r\n  const onSubmit = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const onSubmit2 = async (values, onSubmitProps) => {\r\n    const { category } = values;\r\n\r\n    try {\r\n      const addCatRes = await addPartnerCat({\r\n        variables: {\r\n          name: category,\r\n        },\r\n      });\r\n\r\n      if (addCatRes?.addPartner?.partner) {\r\n        setAddPartnerCategory(false);\r\n        onSubmitProps.resetForm();\r\n        const res = refetch();\r\n        setTableData(res, \"Couldn't fetch partners.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const onSubmit1 = async (values, onSubmitProps) => {\r\n    console.log(values);\r\n    let {\r\n      name,\r\n      email,\r\n      category,\r\n      phone,\r\n      bank,\r\n      specialization,\r\n      provider,\r\n      image,\r\n      account,\r\n    } = values;\r\n    name = name.trim();\r\n\r\n    try {\r\n      await addPartners({\r\n        variables: {\r\n          name,\r\n          email,\r\n          category,\r\n          specialization,\r\n          account,\r\n          phone,\r\n          bank,\r\n          logoImageUrl: image,\r\n          providerId: provider,\r\n        },\r\n        refetchQueries: [{ query: getPartners }],\r\n      });\r\n      enqueueSnackbar(\"Partner added successfully\", {\r\n        variant: \"success\",\r\n      });\r\n      onSubmitProps.resetForm();\r\n      setOpenAddPartner(false);\r\n    } catch (err) {\r\n      console.log(err, \"err\");\r\n      enqueueSnackbar(\"Email is already taken\", {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const onFilterCategoryChange = async (value) => {\r\n    try {\r\n      deleteVar(variables);\r\n      setPartnerFilterValues({ ...partnerFilterValues, category: value });\r\n      const filterVariables = { category: value };\r\n\r\n      const res = filterData(filterVariables, {\r\n        fetchData: fetchPartners,\r\n        refetch: refetch,\r\n        variables: variables,\r\n      });\r\n      await setTableData(res, \"couldn't filter table.\");\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setPartnerFilterValues, \"\");\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\r\n    setFilterValue(defaultVal);\r\n\r\n    deleteVar(variables);\r\n\r\n    const res = refetch();\r\n    await setTableData(res, \"couldn't filter table.\");\r\n  };\r\n  const [newProfileUrl, setNewProfileUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setNewProfileUrl(daa?.regeneratePartnerProfileUrl?.partner?.profileUrl);\r\n  }, [daa]);\r\n  const [Id, setId] = useState(\"\");\r\n  const handleGenerateLink = async (id) => {\r\n    setId(id);\r\n    await regenerate({\r\n      variables: {\r\n        id,\r\n      },\r\n      refetchQueries: [\r\n        {\r\n          query: getPartners,\r\n          variables: {\r\n            variables: pageInfo.page,\r\n            limit: PageInfo.limit,\r\n            providerId: ids,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const z = (id) => {\r\n    let b = \"\";\r\n    const m = daa?.regeneratePartnerProfileUrl?.partner?._id;\r\n    if (id === m) {\r\n      b = m;\r\n    } else {\r\n      b = \"\";\r\n    }\r\n    return b;\r\n  };\r\n  useEffect(() => {\r\n    partner.map((item) => {\r\n      if (item._id === Id) {\r\n        return {\r\n          ...item,\r\n          profileUrl: newProfileUrl,\r\n        };\r\n      }\r\n    });\r\n\r\n    //eslint-disable-next-line\r\n  }, [Id, newProfileUrl]);\r\n  if (error || categoryData.error)\r\n    return <NoData error={error || categoryData.error} />;\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      gap={{ sm: 4, xs: 2 }}\r\n      flexWrap=\"nowrap\"\r\n      height=\"100%\"\r\n    >\r\n      <Grid\r\n        item\r\n        container\r\n        gap={2}\r\n        direction={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          justifyContent=\"flex-end\"\r\n          alignItems=\"center\"\r\n          flex={{ sm: 1, xs: 1, md: 1 }}\r\n        >\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<PersonAddAlt1Icon />}\r\n              title=\"Add Partner\"\r\n              type={darkButtonType}\r\n              onClick={() => setOpenAddPartner(true)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        filters={\r\n          <Filter\r\n            onHandleChange={(e) => onFilterCategoryChange(e?.target?.value)}\r\n            onClickClearBtn={() => onFilterCategoryChange(\"\")}\r\n            options={[{ key: \"Category\", value: \"\" }, ...categoryFilterOptions]}\r\n            name=\"category\"\r\n            placeholder=\"None\"\r\n            value={partnerFilterValues.category}\r\n            hasClearBtn={true}\r\n            disable={loading}\r\n          />\r\n        }\r\n      >\r\n        {load || loading ? (\r\n          <Loader />\r\n        ) : partner.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={partnersHeadCells}\r\n              rows={partner}\r\n              paginationLabel=\"Partner per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchPartners, {\r\n                  first: e,\r\n                  provider: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchPartners, page, pageInfo, {\r\n                  provider: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {partner.map((row, index) => {\r\n                const isItemSelected = isSelected(row.id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                const { _id, logoImageUrl, name, email, category } = row;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ maxWidth: \"20rem\" }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"left\",\r\n                        }}\r\n                      >\r\n                        {/* <span style={{ marginRight: \"1rem\" }}>\r\n                          <Avatar\r\n                            alt={`Display Photo of ${name}`}\r\n                            src={logoImageUrl}\r\n                            sx={{ width: 24, height: 24 }}\r\n                          />\r\n                        </span> */}\r\n                        <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {email}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {category}\r\n                    </TableCell>\r\n\r\n                    {/* <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {profileUrl || z(_id) !== \"\" ? (\r\n                        <Typography\r\n                          style={{\r\n                            color: \"rgb(0 0 0)\",\r\n                            fontWeight: 400,\r\n                            fontSize: \"1.25rem\",\r\n                            maxWidth: \"20rem\",\r\n                          }}\r\n                          sx={{ display: \"flex\", alignItems: \"center\" }}\r\n                        >\r\n                          {trucateProfileLink(profileUrl ? profileUrl : z(_id))}\r\n                          <div style={{ marginLeft: \"1rem\" }}>\r\n                            <Copy\r\n                              name=\"Profile Link\"\r\n                              text={profileUrl ? profileUrl : z(_id)}\r\n                            />\r\n                          </div>\r\n                        </Typography>\r\n                      ) : (\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          disableRipple\r\n                          className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                          onClick={() => handleGenerateLink(_id)}\r\n                        >\r\n                          Generate Link\r\n                        </Button>\r\n                      )}\r\n                    </TableCell> \r\n                    <TableCell align=\"center\" className={classes.tableCell}>\r\n                      {isDeleting[_id] ? (\r\n                        <Loader />\r\n                      ) : (\r\n                        <EditDelBtn\r\n                          onHandleClick={() => {\r\n                            setPartnerToDelete(_id || \"\");\r\n                            setOpenDeletePartner(true);\r\n                          }}\r\n                          type=\"delete\"\r\n                          text=\"Delete partner\"\r\n                        />\r\n                      )}\r\n                    </TableCell>*/}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={partnersHeadCells}\r\n            paginationLabel=\"Doctors per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n      <Modals\r\n        isOpen={openFilterPartner}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        width={{ sm: \"40vw\", xs: \"90vw\", md: \"40vw\" }}\r\n        handleClose={() => setOpenFilterPartner(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={onSubmit}\r\n          validateOnBlur={false}\r\n          validationSchema={filterPartnersValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={3}>\r\n                  <Grid item marginBottom={3}>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          name=\"Name\"\r\n                          label=\"Name\"\r\n                          placeholder=\"Select name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializations}\r\n                          name=\"date\"\r\n                          label=\"Date\"\r\n                          placeholder=\"Choose Date\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  container\r\n                  spacing={2}\r\n                  style={{ marginBottom: \"10rem\" }}\r\n                >\r\n                  <Grid item xs={6}>\r\n                    <FormikControl\r\n                      control=\"select\"\r\n                      options={specializations}\r\n                      name=\"category\"\r\n                      label=\"Category\"\r\n                      placeholder=\"Select Category\"\r\n                    />\r\n                  </Grid>\r\n                  {/* Placeholder grid */}\r\n                  <Grid item md></Grid>\r\n                </Grid>\r\n                <Grid item container xs={12}>\r\n                  <CustomButton\r\n                    title=\"Apply Filter\"\r\n                    width=\"100%\"\r\n                    type={buttonType}\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                  />\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      {/* ADD NEW PARTER MODAL */}\r\n      <AddPartner\r\n        category={false}\r\n        id={ids}\r\n        open={openAddPartner}\r\n        handleClose={() => setOpenAddPartner(false)}\r\n      />\r\n\r\n      {/* Add Partner Category */}\r\n      <Modals\r\n        isOpen={openAddPartnerCategory}\r\n        title=\"Add Partners Category\"\r\n        rowSpacing={5}\r\n        handleClose={() => setAddPartnerCategory(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues2}\r\n          onSubmit={onSubmit2}\r\n          validationSchema={addPartnerValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid container direction=\"column\" gap={3}>\r\n                  <Grid item container>\r\n                    <Grid item container direction=\"column\" gap={1}>\r\n                      <Grid item container>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializations5}\r\n                          name=\"category\"\r\n                          label=\"Category\"\r\n                          placeholder=\"Specialization\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <CustomButton\r\n                      title=\"Add Partner\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n      <DeletePartner\r\n        open={openDeletePartner}\r\n        setOpen={setOpenDeletePartner}\r\n        title=\"Delete Partner\"\r\n        btnValue=\"delete\"\r\n        onConfirm={async () => {\r\n          const res = deleteItem(\r\n            delete_partner,\r\n            partnerToDelete,\r\n            setPartnerToDelete,\r\n            refetch,\r\n            Typography,\r\n            enqueueSnackbar,\r\n            setIsDeleting,\r\n            isDeleting\r\n          );\r\n          setOpenDeletePartner(false);\r\n          await setTableData(res, \"Couldn't refetch Partners\");\r\n        }}\r\n        confirmationMsg=\"delete partner\"\r\n        onCancel={() => {\r\n          setPartnerToDelete(null);\r\n        }}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HMOPartners;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\AddProviderModal.js",["1739","1740","1741","1742","1743"],"import React from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { Grid } from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { getProviders } from \"components/graphQL/useQuery\";\r\nimport { createProvider } from \"components/graphQL/Mutation\";\r\nimport { addProviderValidation } from \"helpers/validationSchemas\";\r\nimport { Modals, CustomButton } from \"components/Utilities\";\r\n\r\nconst AddProviderModal = ({\r\n  openAddHcp,\r\n  handleClose,\r\n  buttonType,\r\n  id,\r\n  pushTo,\r\n}) => {\r\n  const [add] = useMutation(createProvider);\r\n  const { displayAlert } = useAlert();\r\n  const history = useHistory();\r\n  const onSubmit = async (values) => {\r\n    const { name } = values;\r\n    try {\r\n      await add({\r\n        variables: {\r\n          name,\r\n          userTypeId: id,\r\n        },\r\n        refetchQueries: [\r\n          {\r\n            query: getProviders,\r\n            variables: {\r\n              userTypeId: id,\r\n            },\r\n          },\r\n        ],\r\n      });\r\n      displayAlert(\"success\", \"Provider added\");\r\n      history.push(pushTo);\r\n    } catch (err) {\r\n      displayAlert(\"error\", err);\r\n    }\r\n    handleClose();\r\n  };\r\n  return (\r\n    <Modals\r\n      isOpen={openAddHcp}\r\n      title=\"Add Provider\"\r\n      rowSpacing={5}\r\n      height=\"auto\"\r\n      width={{ sm: \"20vw\", xs: \"90vw\" }}\r\n      handleClose={handleClose}\r\n    >\r\n      <Formik\r\n        initialValues={{ name: \"\" }}\r\n        onSubmit={onSubmit}\r\n        validationSchema={addProviderValidation}\r\n        validateOnChange={false}\r\n        validateOnMount={false}\r\n        validateOnBlur={false}\r\n      >\r\n        {({ isSubmitting, dirty, isValid }) => {\r\n          return (\r\n            <Form style={{ marginTop: \"1rem\" }}>\r\n              <Grid container direction=\"column\" gap={2}>\r\n                <Grid item container direction=\"column\" gap={1}>\r\n                  <Grid item container>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      label=\"Name\"\r\n                      id=\"name\"\r\n                      name=\"name\"\r\n                      placeholder=\"Enter Provider's Name\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid item container>\r\n                  <CustomButton\r\n                    title=\"Add Provider\"\r\n                    width=\"100%\"\r\n                    type={buttonType}\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </Modals>\r\n  );\r\n};\r\n\r\nexport default AddProviderModal;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\AddPartner.js",["1744","1745","1746","1747","1748","1749","1750","1751","1752","1753","1754","1755","1756","1757","1758","1759","1760","1761","1762","1763","1764","1765","1766","1767","1768","1769","1770","1771","1772","1773","1774","1775","1776","1777","1778","1779","1780","1781","1782","1783","1784","1785","1786","1787","1788","1789","1790","1791","1792","1793","1794","1795","1796","1797"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\r\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  Checkbox,\r\n  TableCell,\r\n  Avatar,\r\n  TableRow,\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { categoryFilterOptions, defaultPageInfo } from \"helpers/mockData\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport {\r\n  changeTableLimit,\r\n  deleteItem,\r\n  deleteVar,\r\n  filterData,\r\n  handlePageChange,\r\n  banks,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport DeletePartner from \"components/modals/DeleteOrDisable\";\r\nimport { partnersHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport {\r\n  addPartner,\r\n  addPartnerCategory,\r\n  regeneratePartnerProfileUrl,\r\n} from \"components/graphQL/Mutation\";\r\nimport {\r\n  getPartners,\r\n  getSingleProvider,\r\n  getProviders,\r\n  DELETE_PARTNER,\r\n} from \"components/graphQL/useQuery\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport {\r\n  addNewPartnerValidationSchema,\r\n  addPartnerValidationSchema,\r\n  filterPartnersValidationSchema,\r\n} from \"helpers/validationSchemas\";\r\nimport Filter from \"components/Forms/Filters\";\r\nimport { PageInfo } from \"components/graphQL/fragment\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { EditDelBtn } from \"components/Buttons/EditDelBtn\";\r\n\r\nconst AddPartner = ({ open, handleClose, category, CategoryValue, id }) => {\r\n  const theme = useTheme();\r\n  const onSubmit = () => {};\r\n  const { data: da, loading: load } = useQuery(getProviders);\r\n  // const initialValues = {};\r\n  const categoryOptions = [\r\n    { key: \"Diagnostics\", value: \"diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"pharmacy\" },\r\n    { key: \"Hospital\", value: \"hospital\" },\r\n  ];\r\n  const classificationOptions = [\r\n    { key: \"Primary Healthcare\", value: \"Primary Healthcare\" },\r\n    { key: \"Secondary Healthcare\", value: \"Secondary Healthcare\" },\r\n  ];\r\n\r\n  const specializationOptions = [\r\n    { key: \"Dental Care\", value: \"Dental Care\" },\r\n    { key: \"Eye Clinic\", value: \"Eye Clinic\" },\r\n    { key: \"Skin Care\", value: \"Skin Care\" },\r\n    { key: \"Mental Care\", value: \"Mental Care\" },\r\n  ];\r\n\r\n  const initialValues = {\r\n    name: \"\",\r\n    email: \"\",\r\n    specialization: \"\",\r\n    category: \"\",\r\n    account: \"\",\r\n    address: \"\",\r\n    phone: \"\",\r\n    classification: \"\",\r\n    bank: \"\",\r\n    image: null,\r\n  };\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  //   const onSubmit = (values) => {\r\n  //     console.log(values);\r\n  //   };\r\n\r\n  // const onSubmit2 = async (values, onSubmitProps) => {\r\n  //   const { category } = values;\r\n\r\n  //   try {\r\n  //     const addCatRes = await addPartnerCat({\r\n  //       variables: {\r\n  //         name: category,\r\n  //       },\r\n  //     });\r\n\r\n  //     if (addCatRes?.addPartner?.partner) {\r\n  //       setAddPartnerCategory(false);\r\n  //       onSubmitProps.resetForm();\r\n  //       const res = refetch();\r\n  //       setTableData(res, \"Couldn't fetch partners.\");\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.error(error);\r\n  //   }\r\n  // };\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const { displayAlert } = useAlert();\r\n  const [addPartners] = useMutation(addPartner);\r\n  const onSubmit1 = async (values, onSubmitProps) => {\r\n    console.log(values);\r\n    let { name, email, phone, category, bank, specialization, image, account } =\r\n      values;\r\n    name = name.trim();\r\n\r\n    try {\r\n      await addPartners({\r\n        variables: {\r\n          name,\r\n          email,\r\n          category,\r\n          specialization,\r\n          account,\r\n          phone,\r\n          bank,\r\n          logoImageUrl: image,\r\n          providerId: id,\r\n        },\r\n        refetchQueries: [\r\n          {\r\n            query: getPartners,\r\n            variables: {\r\n              providerId: id,\r\n            },\r\n          },\r\n        ],\r\n      });\r\n      displayAlert(\"success\", \"Partner added successfully\");\r\n      onSubmitProps.resetForm();\r\n      handleClose();\r\n    } catch (err) {\r\n      console.log(err, \"err\");\r\n      displayAlert(\"error\", err);\r\n    }\r\n  };\r\n  return (\r\n    <Modals\r\n      isOpen={open}\r\n      title=\"Add Partner\"\r\n      rowSpacing={5}\r\n      handleClose={handleClose}\r\n    >\r\n      <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={onSubmit1}\r\n        validationSchema={addNewPartnerValidationSchema}\r\n        validateOnChange={false}\r\n        validateOnMount={false}\r\n        validateOnBlur={false}\r\n      >\r\n        {({ isSubmitting, isValid, dirty, values, errors, setFieldValue }) => {\r\n          console.log(errors);\r\n          const { classification, category: cat } = values;\r\n          return (\r\n            <Form style={{ marginTop: \"1rem\" }}>\r\n              <Grid container direction=\"column\" gap={1.5}>\r\n                <Grid item container>\r\n                  <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        label=\"Name\"\r\n                        id=\"name\"\r\n                        name=\"name\"\r\n                        placeholder=\"Enter Partner name\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        label=\"Email\"\r\n                        id=\"name\"\r\n                        name=\"email\"\r\n                        placeholder=\"Enter Email\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        label=\" Account Number\"\r\n                        id=\"account\"\r\n                        name=\"account\"\r\n                        placeholder=\"Enter Account Number\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        label=\"Phone Number\"\r\n                        id=\"phone\"\r\n                        name=\"phone\"\r\n                        placeholder=\"Enter Phone Number\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"select\"\r\n                        options={banks}\r\n                        name=\"bank\"\r\n                        label=\"Bank\"\r\n                        placeholder=\"Select Bank\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"select\"\r\n                        options={categoryOptions}\r\n                        name=\"category\"\r\n                        label=\"Category\"\r\n                        placeholder=\"Category\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"file\"\r\n                        name=\"image\"\r\n                        label=\"Company Logo\"\r\n                        setFieldValue={setFieldValue}\r\n                      />\r\n                    </Grid>\r\n                    {cat === \"hospital\" && (\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={classificationOptions}\r\n                          name=\"classification\"\r\n                          label=\"Classification\"\r\n                          id=\"classification\"\r\n                          placeholder=\"select classification\"\r\n                        />\r\n                      </Grid>\r\n                    )}\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    {classification === \"Secondary Healthcare\" && (\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializationOptions}\r\n                          name=\"specialization\"\r\n                          label=\"Specialization\"\r\n                          id=\"specialization\"\r\n                          placeholder=\"Select Specialization\"\r\n                        />\r\n                      </Grid>\r\n                    )}\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <FormikControl\r\n                      control=\"textarea\"\r\n                      name=\"address\"\r\n                      minRows={3}\r\n                      label=\"Address\"\r\n                      placeholder=\"Enter address\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item container sx={{ mt: 1 }}>\r\n                  <CustomButton\r\n                    title=\"Add Partner\"\r\n                    width=\"100%\"\r\n                    type={buttonType}\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </Modals>\r\n  );\r\n};\r\n\r\nexport default AddPartner;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaDoctor.js",["1798","1799","1800","1801","1802","1803","1804","1805","1806","1807"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NetworkStatus } from \"@apollo/client\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  Grid,\r\n  TableRow,\r\n  TableCell,\r\n  Button,\r\n  Checkbox,\r\n  Chip,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { timeConverter } from \"components/Utilities/Time\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { useStyles } from \"../../styles/doctorsPageStyles\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport {\r\n  getDoctorsProfile,\r\n  getDoctorsProfileByStatus,\r\n} from \"components/graphQL/useQuery\";\r\nimport { hcpsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { createDOctorProfile } from \"components/graphQL/Mutation\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\r\nimport { addDoctorValidationSchema } from \"helpers/validationSchemas\";\r\nimport { Loader, Modals, CustomButton } from \"components/Utilities\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport {\r\n  addDocInitialValues,\r\n  /* cadreFilterBy, */\r\n  defaultPageInfo,\r\n  docCadreOptions,\r\n  docSpecializationsOptions,\r\n  doctorsSearchOptions,\r\n  genderType,\r\n} from \"helpers/mockData\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport DoctorFilters from \"components/Forms/Filters/DoctorsFilters\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst HealaDoctor = () => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { displayAlert } = useAlert();\r\n  const [profiles, setProfiles] = useState(\"\");\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const { provider } = useSelector((state) => state.patient);\r\n  const { id, ids } = useParams();\r\n  const [openAddHcp, setOpenAddHcp] = useState(false);\r\n  const [createDoc] = useMutation(createDOctorProfile);\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [fetchDoctors, { error, loading, refetch, variables, networkStatus }] =\r\n    useLazyQuery(getDoctorsProfile);\r\n  const [\r\n    fetchDoctorsByStatus,\r\n    {\r\n      loading: byStatusLoading,\r\n      refetch: byStatusRefetch,\r\n      variables: byStatusVariables,\r\n    },\r\n  ] = useLazyQuery(getDoctorsProfileByStatus);\r\n\r\n  useEffect(() => {\r\n    fetchDoctors({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        providerId: ids,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data && provider === \"\") {\r\n          setPageInfo(data.doctorProfiles.pageInfo || []);\r\n          setProfiles(data.doctorProfiles.profile || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  useEffect(() => {\r\n    fetchDoctors({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        providerId: ids,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data && provider !== \"\") {\r\n          setPageInfo(data.doctorProfiles.pageInfo || []);\r\n          setProfiles(data.doctorProfiles.profile || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [provider]);\r\n\r\n  const onSubmit = async (values) => {\r\n    const {\r\n      createdAt,\r\n      updatedAt,\r\n      firstName,\r\n      lastName,\r\n      gender,\r\n      phone,\r\n      email,\r\n      hospital,\r\n      dociId,\r\n      specialization,\r\n      dob,\r\n      cadre,\r\n      image,\r\n    } = values;\r\n    const correctDOB = timeConverter(dob);\r\n    await createDoc({\r\n      variables: {\r\n        dociId,\r\n        createdAt,\r\n        updatedAt,\r\n        firstName,\r\n        lastName,\r\n        gender,\r\n        phoneNumber: phone,\r\n        email,\r\n        hospital,\r\n        specialization,\r\n        dob: correctDOB,\r\n        cadre,\r\n        image,\r\n        providerId: \"61db6f8968b248001aec4fcb\",\r\n      },\r\n      refetchQueries: [{ query: getDoctorsProfile }],\r\n    });\r\n    setOpenAddHcp(false);\r\n  };\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const getSearchPlaceholder = (filterBy) => {\r\n    return filterBy === \"id\"\r\n      ? \"Search by ID e.g 7NE6ELLO\"\r\n      : filterBy === \"firstName\"\r\n      ? \"Search by first name e.g John\"\r\n      : filterBy === \"lastName\"\r\n      ? \"Search by last name e.g Doe\"\r\n      : \"\";\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(data.doctorProfiles.pageInfo || defaultPageInfo);\r\n        setProfiles(data.doctorProfiles.profile || []);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\r\n      <Grid\r\n        item\r\n        gap={{ md: 4, sm: 4, xs: 2 }}\r\n        direction={{ sm: \"row\", xs: \"column\" }}\r\n        container\r\n        justifyContent=\"flex-end\"\r\n      >\r\n        <Grid item>\r\n          <CustomButton\r\n            endIcon={<AddIcon />}\r\n            title=\"Add Doctor\"\r\n            type={buttonType}\r\n            onClick={() => setOpenAddHcp(true)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      {/* ========= FILTERS =========== */}\r\n\r\n      <TableLayout\r\n        filters={\r\n          <DoctorFilters\r\n            setProfiles={setProfiles}\r\n            setPageInfo={setPageInfo}\r\n            queryParams={{\r\n              doctorsParams: { fetchDoctors, loading, refetch, variables },\r\n              doctorsByStatusParams: {\r\n                byStatusLoading,\r\n                byStatusVariables,\r\n                byStatusRefetch,\r\n                fetchDoctorsByStatus,\r\n              },\r\n            }}\r\n          />\r\n        }\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{ fetchData: fetchDoctors, variables, loading }}\r\n            setPageInfo={(data) =>\r\n              setPageInfo(data.doctorProfiles.pageInfo || {})\r\n            }\r\n            setProfiles={(data) =>\r\n              setProfiles(data.doctorProfiles.profile || [])\r\n            }\r\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\r\n            filterOptions={doctorsSearchOptions}\r\n          />\r\n        }\r\n      >\r\n        {loading ? (\r\n          <Loader />\r\n        ) : byStatusLoading ? (\r\n          <Loader />\r\n        ) : networkStatus === NetworkStatus.refetch ? (\r\n          <Loader />\r\n        ) : profiles.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={hcpsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"Doctors per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchDoctors, {\r\n                  first: e,\r\n                  providerId: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchDoctors, page, pageInfo, {\r\n                  providerId: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const {\r\n                  _id,\r\n                  dociId,\r\n                  firstName,\r\n                  provider,\r\n                  status,\r\n                  specialization,\r\n                  consultations,\r\n                  lastName,\r\n                } = row;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: \"pointer\" }}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        minWidth: \"10rem\",\r\n                      }}\r\n                    >\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        {dociId?.split(\"-\")[1]}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Link to={`/hcps/${_id}`} className={classes.link}>\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ fontSize: \"1.25rem\" }}>\r\n                            {firstName} {lastName}\r\n                          </span>\r\n                        </div>\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.grey }}\r\n                    >\r\n                      <Link to={`/hcps/${_id}`} className={classes.link}>\r\n                        {specialization}{\" \"}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        {consultations ? consultations : 0}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.grey }}\r\n                    >\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        {provider ? provider : \"No Provider\"}{\" \"}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        <Chip\r\n                          label={\r\n                            status && status === \"Active\"\r\n                              ? \"Active\"\r\n                              : \"Inactive\"\r\n                          }\r\n                          className={classes.badge}\r\n                          style={{\r\n                            background:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.lightGreen\r\n                                : theme.palette.common.lightRed,\r\n                            color:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.green\r\n                                : theme.palette.common.red,\r\n                          }}\r\n                        />\r\n                      </Link>\r\n                    </TableCell>\r\n                    {/* <TableCell>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        className={classes.button}\r\n                        component={Link}\r\n                        to={`hcps/${_id}`}\r\n                        endIcon={<ArrowForwardIosIcon />}\r\n                      >\r\n                        View Doctor\r\n                      </Button>\r\n                    </TableCell> */}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={hcpsHeadCells}\r\n            paginationLabel=\"Doctors per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n      {/* ADD Doctor MODAL */}\r\n      <Modals\r\n        isOpen={openAddHcp}\r\n        title=\"Add Doctor\"\r\n        rowSpacing={5}\r\n        height=\"auto\"\r\n        width={{ sm: \"50vw\", xs: \"90vw\" }}\r\n        handleClose={() => setOpenAddHcp(false)}\r\n      >\r\n        <Formik\r\n          initialValues={addDocInitialValues}\r\n          onSubmit={onSubmit}\r\n          validationSchema={addDoctorValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"1rem\" }}>\r\n                <Grid container direction=\"column\" gap={2}>\r\n                  <Grid item container direction=\"column\" gap={1}>\r\n                    <Grid item container spacing={2}>\r\n                      <Grid item container xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"First Name\"\r\n                          id=\"firstName\"\r\n                          name=\"firstName\"\r\n                          placeholder=\"Enter first name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item container xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Last Name\"\r\n                          id=\"lastName\"\r\n                          name=\"lastName\"\r\n                          placeholder=\"Enter last name\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid item container direction=\"column\" gap={2}>\r\n                      <Grid item container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"date\"\r\n                            name=\"dob\"\r\n                            label=\"DOB\"\r\n                            setFieldValue={setFieldValue}\r\n                            setValues={setValues}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <Grid container direction=\"column\">\r\n                            <FormikControl\r\n                              control=\"select\"\r\n                              options={docSpecializationsOptions}\r\n                              name=\"specialization\"\r\n                              label=\"Specialization\"\r\n                              placeholder=\"Specialization\"\r\n                            />\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container direction=\"column\" gap={2}>\r\n                    <Grid item container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          label=\"Gender\"\r\n                          id=\"gender\"\r\n                          name=\"gender\"\r\n                          options={genderType}\r\n                          placeholder=\"Gender\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Phone Number\"\r\n                          id=\"phone\"\r\n                          name=\"phone\"\r\n                          placeholder=\"Enter last Phone number\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item container direction=\"column\" gap={2}>\r\n                      <Grid item container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"input\"\r\n                            label=\"Hospital\"\r\n                            id=\"hospital\"\r\n                            name=\"hospital\"\r\n                            placeholder=\"Enter hospital Name\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6} marginBottom={{ xs: 1 }}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={docCadreOptions}\r\n                            name=\"cadre\"\r\n                            label=\"Cadre\"\r\n                            placeholder=\"Select Cadre\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container spacing={2} alignItems=\"center\">\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"file\"\r\n                        name=\"image\"\r\n                        label=\"Profile Pics\"\r\n                        setFieldValue={setFieldValue}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        label=\"Heala-ID\"\r\n                        id=\"dociId\"\r\n                        name=\"dociId\"\r\n                        placeholder=\"Enter Heala ID\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <CustomButton\r\n                      title=\"Add Doctor\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HealaDoctor;\r\n",{"ruleId":"1808","replacedBy":"1809"},{"ruleId":"1810","severity":1,"message":"1811","line":74,"column":3,"nodeType":"1812","messageId":"1813","endLine":74,"endColumn":12},{"ruleId":"1814","severity":1,"message":"1815","line":44,"column":7,"nodeType":"1816","messageId":"1817","endLine":44,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":68,"column":7,"nodeType":"1816","messageId":"1817","endLine":68,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1818","line":89,"column":25,"nodeType":"1812","messageId":"1813","endLine":89,"endColumn":30},{"ruleId":"1810","severity":1,"message":"1819","line":89,"column":32,"nodeType":"1812","messageId":"1813","endLine":89,"endColumn":39},{"ruleId":"1810","severity":1,"message":"1820","line":89,"column":41,"nodeType":"1812","messageId":"1813","endLine":89,"endColumn":54},{"ruleId":"1810","severity":1,"message":"1821","line":89,"column":56,"nodeType":"1812","messageId":"1813","endLine":89,"endColumn":65},{"ruleId":"1814","severity":1,"message":"1815","line":44,"column":7,"nodeType":"1816","messageId":"1817","endLine":44,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":68,"column":7,"nodeType":"1816","messageId":"1817","endLine":68,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1818","line":89,"column":25,"nodeType":"1812","messageId":"1813","endLine":89,"endColumn":30},{"ruleId":"1810","severity":1,"message":"1819","line":89,"column":32,"nodeType":"1812","messageId":"1813","endLine":89,"endColumn":39},{"ruleId":"1810","severity":1,"message":"1820","line":89,"column":41,"nodeType":"1812","messageId":"1813","endLine":89,"endColumn":54},{"ruleId":"1810","severity":1,"message":"1821","line":89,"column":56,"nodeType":"1812","messageId":"1813","endLine":89,"endColumn":65},{"ruleId":"1814","severity":1,"message":"1815","line":36,"column":9,"nodeType":"1816","messageId":"1817","endLine":36,"endColumn":22},{"ruleId":"1822","severity":1,"message":"1823","line":33,"column":23,"nodeType":"1824","messageId":"1825","endLine":33,"endColumn":33},{"ruleId":"1822","severity":1,"message":"1826","line":44,"column":11,"nodeType":"1824","messageId":"1825","endLine":44,"endColumn":21},{"ruleId":"1822","severity":1,"message":"1827","line":44,"column":23,"nodeType":"1824","messageId":"1825","endLine":44,"endColumn":30},{"ruleId":"1822","severity":1,"message":"1828","line":44,"column":32,"nodeType":"1824","messageId":"1825","endLine":44,"endColumn":36},{"ruleId":"1822","severity":1,"message":"1829","line":44,"column":38,"nodeType":"1824","messageId":"1825","endLine":44,"endColumn":45},{"ruleId":"1822","severity":1,"message":"1830","line":44,"column":47,"nodeType":"1824","messageId":"1825","endLine":44,"endColumn":56},{"ruleId":"1822","severity":1,"message":"1831","line":44,"column":58,"nodeType":"1824","messageId":"1825","endLine":44,"endColumn":70},{"ruleId":"1822","severity":1,"message":"1832","line":62,"column":21,"nodeType":"1812","messageId":"1825","endLine":62,"endColumn":29},{"ruleId":"1822","severity":1,"message":"1833","line":62,"column":30,"nodeType":"1812","messageId":"1825","endLine":62,"endColumn":34},{"ruleId":"1822","severity":1,"message":"1832","line":63,"column":24,"nodeType":"1812","messageId":"1825","endLine":63,"endColumn":32},{"ruleId":"1822","severity":1,"message":"1834","line":63,"column":33,"nodeType":"1812","messageId":"1825","endLine":63,"endColumn":41},{"ruleId":"1822","severity":1,"message":"1832","line":64,"column":13,"nodeType":"1812","messageId":"1825","endLine":64,"endColumn":21},{"ruleId":"1822","severity":1,"message":"1833","line":64,"column":22,"nodeType":"1812","messageId":"1825","endLine":64,"endColumn":26},{"ruleId":"1814","severity":1,"message":"1815","line":99,"column":7,"nodeType":"1816","messageId":"1817","endLine":99,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1835","line":127,"column":29,"nodeType":"1812","messageId":"1813","endLine":127,"endColumn":33},{"ruleId":"1810","severity":1,"message":"1835","line":128,"column":29,"nodeType":"1812","messageId":"1813","endLine":128,"endColumn":33},{"ruleId":"1814","severity":1,"message":"1815","line":41,"column":5,"nodeType":"1816","messageId":"1817","endLine":41,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":60,"column":5,"nodeType":"1816","messageId":"1817","endLine":60,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":108,"column":5,"nodeType":"1816","messageId":"1817","endLine":108,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":119,"column":5,"nodeType":"1816","messageId":"1817","endLine":119,"endColumn":18},{"ruleId":"1822","severity":1,"message":"1836","line":16,"column":3,"nodeType":"1824","messageId":"1825","endLine":16,"endColumn":12},{"ruleId":"1814","severity":1,"message":"1815","line":56,"column":7,"nodeType":"1816","messageId":"1817","endLine":56,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1837","line":24,"column":31,"nodeType":"1812","messageId":"1813","endLine":24,"endColumn":36},{"ruleId":"1810","severity":1,"message":"1838","line":9,"column":10,"nodeType":"1812","messageId":"1813","endLine":9,"endColumn":23},{"ruleId":"1810","severity":1,"message":"1839","line":12,"column":9,"nodeType":"1812","messageId":"1813","endLine":12,"endColumn":14},{"ruleId":"1810","severity":1,"message":"1840","line":14,"column":29,"nodeType":"1812","messageId":"1813","endLine":14,"endColumn":34},{"ruleId":"1810","severity":1,"message":"1841","line":15,"column":9,"nodeType":"1812","messageId":"1813","endLine":15,"endColumn":16},{"ruleId":"1842","severity":1,"message":"1843","line":4,"column":1,"nodeType":"1844","messageId":"1845","endLine":4,"endColumn":42},{"ruleId":"1814","severity":1,"message":"1815","line":51,"column":5,"nodeType":"1816","messageId":"1817","endLine":51,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":70,"column":7,"nodeType":"1816","messageId":"1817","endLine":70,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":84,"column":5,"nodeType":"1816","messageId":"1817","endLine":84,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":109,"column":5,"nodeType":"1816","messageId":"1817","endLine":109,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":157,"column":5,"nodeType":"1816","messageId":"1817","endLine":157,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":212,"column":5,"nodeType":"1816","messageId":"1817","endLine":212,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":231,"column":5,"nodeType":"1816","messageId":"1817","endLine":231,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":260,"column":5,"nodeType":"1816","messageId":"1817","endLine":260,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":288,"column":5,"nodeType":"1816","messageId":"1817","endLine":288,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":307,"column":5,"nodeType":"1816","messageId":"1817","endLine":307,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":353,"column":5,"nodeType":"1816","messageId":"1817","endLine":353,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":371,"column":5,"nodeType":"1816","messageId":"1817","endLine":371,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":386,"column":5,"nodeType":"1816","messageId":"1817","endLine":386,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":52,"column":7,"nodeType":"1816","messageId":"1817","endLine":52,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":81,"column":11,"nodeType":"1816","messageId":"1817","endLine":81,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1837","line":3,"column":38,"nodeType":"1812","messageId":"1813","endLine":3,"endColumn":43},{"ruleId":"1822","severity":1,"message":"1846","line":178,"column":5,"nodeType":"1824","messageId":"1825","endLine":178,"endColumn":21},{"ruleId":"1822","severity":1,"message":"1823","line":33,"column":26,"nodeType":"1824","messageId":"1825","endLine":33,"endColumn":36},{"ruleId":"1822","severity":1,"message":"1826","line":44,"column":11,"nodeType":"1824","messageId":"1825","endLine":44,"endColumn":21},{"ruleId":"1822","severity":1,"message":"1827","line":44,"column":23,"nodeType":"1824","messageId":"1825","endLine":44,"endColumn":30},{"ruleId":"1822","severity":1,"message":"1828","line":44,"column":32,"nodeType":"1824","messageId":"1825","endLine":44,"endColumn":36},{"ruleId":"1822","severity":1,"message":"1829","line":44,"column":38,"nodeType":"1824","messageId":"1825","endLine":44,"endColumn":45},{"ruleId":"1822","severity":1,"message":"1830","line":44,"column":47,"nodeType":"1824","messageId":"1825","endLine":44,"endColumn":56},{"ruleId":"1822","severity":1,"message":"1831","line":44,"column":58,"nodeType":"1824","messageId":"1825","endLine":44,"endColumn":70},{"ruleId":"1822","severity":1,"message":"1832","line":62,"column":21,"nodeType":"1812","messageId":"1825","endLine":62,"endColumn":29},{"ruleId":"1822","severity":1,"message":"1833","line":62,"column":30,"nodeType":"1812","messageId":"1825","endLine":62,"endColumn":34},{"ruleId":"1822","severity":1,"message":"1832","line":63,"column":24,"nodeType":"1812","messageId":"1825","endLine":63,"endColumn":32},{"ruleId":"1822","severity":1,"message":"1834","line":63,"column":33,"nodeType":"1812","messageId":"1825","endLine":63,"endColumn":41},{"ruleId":"1822","severity":1,"message":"1832","line":64,"column":13,"nodeType":"1812","messageId":"1825","endLine":64,"endColumn":21},{"ruleId":"1822","severity":1,"message":"1833","line":64,"column":22,"nodeType":"1812","messageId":"1825","endLine":64,"endColumn":26},{"ruleId":"1814","severity":1,"message":"1815","line":99,"column":7,"nodeType":"1816","messageId":"1817","endLine":99,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1835","line":127,"column":29,"nodeType":"1812","messageId":"1813","endLine":127,"endColumn":33},{"ruleId":"1810","severity":1,"message":"1835","line":128,"column":29,"nodeType":"1812","messageId":"1813","endLine":128,"endColumn":33},{"ruleId":"1814","severity":1,"message":"1815","line":28,"column":27,"nodeType":"1816","messageId":"1817","endLine":28,"endColumn":38},{"ruleId":"1810","severity":1,"message":"1847","line":94,"column":25,"nodeType":"1812","messageId":"1813","endLine":94,"endColumn":26},{"ruleId":"1822","severity":1,"message":"1848","line":27,"column":54,"nodeType":"1824","messageId":"1825","endLine":27,"endColumn":63},{"ruleId":"1822","severity":1,"message":"1849","line":27,"column":65,"nodeType":"1824","messageId":"1825","endLine":27,"endColumn":72},{"ruleId":"1814","severity":1,"message":"1815","line":39,"column":27,"nodeType":"1816","messageId":"1817","endLine":39,"endColumn":38},{"ruleId":"1842","severity":1,"message":"1843","line":3,"column":1,"nodeType":"1844","messageId":"1845","endLine":3,"endColumn":42},{"ruleId":"1822","severity":1,"message":"1850","line":132,"column":3,"nodeType":"1824","messageId":"1825","endLine":132,"endColumn":7},{"ruleId":"1822","severity":1,"message":"1851","line":133,"column":3,"nodeType":"1824","messageId":"1825","endLine":133,"endColumn":17},{"ruleId":"1822","severity":1,"message":"1852","line":134,"column":3,"nodeType":"1824","messageId":"1825","endLine":134,"endColumn":21},{"ruleId":"1822","severity":1,"message":"1853","line":135,"column":3,"nodeType":"1824","messageId":"1825","endLine":135,"endColumn":15},{"ruleId":"1822","severity":1,"message":"1854","line":136,"column":3,"nodeType":"1824","messageId":"1825","endLine":136,"endColumn":18},{"ruleId":"1822","severity":1,"message":"1855","line":137,"column":3,"nodeType":"1824","messageId":"1825","endLine":137,"endColumn":10},{"ruleId":"1822","severity":1,"message":"1856","line":138,"column":3,"nodeType":"1824","messageId":"1825","endLine":138,"endColumn":25},{"ruleId":"1822","severity":1,"message":"1857","line":139,"column":3,"nodeType":"1824","messageId":"1825","endLine":139,"endColumn":23},{"ruleId":"1822","severity":1,"message":"1858","line":140,"column":3,"nodeType":"1824","messageId":"1825","endLine":140,"endColumn":11},{"ruleId":"1822","severity":1,"message":"1859","line":144,"column":11,"nodeType":"1824","messageId":"1825","endLine":144,"endColumn":14},{"ruleId":"1822","severity":1,"message":"1860","line":144,"column":16,"nodeType":"1824","messageId":"1825","endLine":144,"endColumn":20},{"ruleId":"1822","severity":1,"message":"1861","line":144,"column":22,"nodeType":"1824","messageId":"1825","endLine":144,"endColumn":30},{"ruleId":"1822","severity":1,"message":"1862","line":144,"column":32,"nodeType":"1824","messageId":"1825","endLine":144,"endColumn":43},{"ruleId":"1814","severity":1,"message":"1815","line":33,"column":5,"nodeType":"1816","messageId":"1817","endLine":33,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":71,"column":5,"nodeType":"1816","messageId":"1817","endLine":71,"endColumn":16},{"ruleId":"1842","severity":1,"message":"1863","line":13,"column":1,"nodeType":"1844","messageId":"1845","endLine":13,"endColumn":43},{"ruleId":"1814","severity":1,"message":"1815","line":65,"column":9,"nodeType":"1816","messageId":"1817","endLine":65,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":87,"column":9,"nodeType":"1816","messageId":"1817","endLine":87,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1864","line":43,"column":3,"nodeType":"1812","messageId":"1813","endLine":43,"endColumn":11},{"ruleId":"1810","severity":1,"message":"1865","line":44,"column":6,"nodeType":"1812","messageId":"1813","endLine":44,"endColumn":10},{"ruleId":"1810","severity":1,"message":"1866","line":19,"column":3,"nodeType":"1812","messageId":"1813","endLine":19,"endColumn":11},{"ruleId":"1810","severity":1,"message":"1867","line":32,"column":3,"nodeType":"1812","messageId":"1813","endLine":32,"endColumn":8},{"ruleId":"1810","severity":1,"message":"1868","line":35,"column":3,"nodeType":"1812","messageId":"1813","endLine":35,"endColumn":19},{"ruleId":"1810","severity":1,"message":"1837","line":8,"column":31,"nodeType":"1812","messageId":"1813","endLine":8,"endColumn":36},{"ruleId":"1810","severity":1,"message":"1869","line":31,"column":13,"nodeType":"1812","messageId":"1813","endLine":31,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1870","line":12,"column":9,"nodeType":"1812","messageId":"1813","endLine":12,"endColumn":17},{"ruleId":"1810","severity":1,"message":"1871","line":249,"column":29,"nodeType":"1812","messageId":"1813","endLine":249,"endColumn":36},{"ruleId":"1810","severity":1,"message":"1837","line":7,"column":31,"nodeType":"1812","messageId":"1813","endLine":7,"endColumn":36},{"ruleId":"1810","severity":1,"message":"1867","line":24,"column":3,"nodeType":"1812","messageId":"1813","endLine":24,"endColumn":8},{"ruleId":"1810","severity":1,"message":"1837","line":7,"column":31,"nodeType":"1812","messageId":"1813","endLine":7,"endColumn":36},{"ruleId":"1810","severity":1,"message":"1872","line":25,"column":3,"nodeType":"1812","messageId":"1813","endLine":25,"endColumn":7},{"ruleId":"1810","severity":1,"message":"1873","line":18,"column":61,"nodeType":"1812","messageId":"1813","endLine":18,"endColumn":68},{"ruleId":"1810","severity":1,"message":"1874","line":23,"column":33,"nodeType":"1812","messageId":"1813","endLine":23,"endColumn":40},{"ruleId":"1810","severity":1,"message":"1875","line":29,"column":31,"nodeType":"1812","messageId":"1813","endLine":29,"endColumn":36},{"ruleId":"1842","severity":1,"message":"1876","line":9,"column":1,"nodeType":"1844","messageId":"1845","endLine":9,"endColumn":46},{"ruleId":"1810","severity":1,"message":"1837","line":11,"column":31,"nodeType":"1812","messageId":"1813","endLine":11,"endColumn":36},{"ruleId":"1810","severity":1,"message":"1872","line":31,"column":37,"nodeType":"1812","messageId":"1813","endLine":31,"endColumn":41},{"ruleId":"1810","severity":1,"message":"1837","line":10,"column":31,"nodeType":"1812","messageId":"1813","endLine":10,"endColumn":36},{"ruleId":"1810","severity":1,"message":"1877","line":22,"column":11,"nodeType":"1812","messageId":"1813","endLine":22,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":162,"column":7,"nodeType":"1816","messageId":"1817","endLine":162,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1837","line":7,"column":31,"nodeType":"1812","messageId":"1813","endLine":7,"endColumn":36},{"ruleId":"1810","severity":1,"message":"1878","line":116,"column":29,"nodeType":"1812","messageId":"1813","endLine":116,"endColumn":49},{"ruleId":"1810","severity":1,"message":"1879","line":128,"column":22,"nodeType":"1812","messageId":"1813","endLine":128,"endColumn":35},{"ruleId":"1810","severity":1,"message":"1880","line":136,"column":10,"nodeType":"1812","messageId":"1813","endLine":136,"endColumn":27},{"ruleId":"1810","severity":1,"message":"1881","line":136,"column":29,"nodeType":"1812","messageId":"1813","endLine":136,"endColumn":49},{"ruleId":"1810","severity":1,"message":"1882","line":164,"column":29,"nodeType":"1812","messageId":"1813","endLine":164,"endColumn":49},{"ruleId":"1810","severity":1,"message":"1883","line":513,"column":23,"nodeType":"1812","messageId":"1813","endLine":513,"endColumn":28},{"ruleId":"1842","severity":1,"message":"1884","line":20,"column":1,"nodeType":"1844","messageId":"1845","endLine":20,"endColumn":72},{"ruleId":"1810","severity":1,"message":"1885","line":262,"column":10,"nodeType":"1812","messageId":"1813","endLine":262,"endColumn":20},{"ruleId":"1822","severity":1,"message":"1886","line":339,"column":18,"nodeType":"1824","messageId":"1825","endLine":339,"endColumn":29},{"ruleId":"1822","severity":1,"message":"1887","line":343,"column":48,"nodeType":"1812","messageId":"1825","endLine":343,"endColumn":54},{"ruleId":"1822","severity":1,"message":"1888","line":343,"column":60,"nodeType":"1812","messageId":"1825","endLine":343,"endColumn":69},{"ruleId":"1822","severity":1,"message":"1887","line":344,"column":49,"nodeType":"1812","messageId":"1825","endLine":344,"endColumn":55},{"ruleId":"1822","severity":1,"message":"1889","line":344,"column":61,"nodeType":"1812","messageId":"1825","endLine":344,"endColumn":70},{"ruleId":"1822","severity":1,"message":"1887","line":368,"column":20,"nodeType":"1812","messageId":"1825","endLine":368,"endColumn":26},{"ruleId":"1822","severity":1,"message":"1890","line":388,"column":24,"nodeType":"1812","messageId":"1825","endLine":388,"endColumn":27},{"ruleId":"1822","severity":1,"message":"1887","line":389,"column":50,"nodeType":"1812","messageId":"1825","endLine":389,"endColumn":56},{"ruleId":"1822","severity":1,"message":"1887","line":391,"column":37,"nodeType":"1812","messageId":"1825","endLine":391,"endColumn":43},{"ruleId":"1810","severity":1,"message":"1891","line":9,"column":3,"nodeType":"1812","messageId":"1813","endLine":9,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1892","line":14,"column":8,"nodeType":"1812","messageId":"1813","endLine":14,"endColumn":27},{"ruleId":"1810","severity":1,"message":"1893","line":26,"column":8,"nodeType":"1812","messageId":"1813","endLine":26,"endColumn":20},{"ruleId":"1842","severity":1,"message":"1894","line":29,"column":1,"nodeType":"1844","messageId":"1845","endLine":29,"endColumn":49},{"ruleId":"1810","severity":1,"message":"1895","line":31,"column":24,"nodeType":"1812","messageId":"1813","endLine":31,"endColumn":32},{"ruleId":"1810","severity":1,"message":"1896","line":36,"column":3,"nodeType":"1812","messageId":"1813","endLine":36,"endColumn":15},{"ruleId":"1810","severity":1,"message":"1897","line":99,"column":10,"nodeType":"1812","messageId":"1813","endLine":99,"endColumn":14},{"ruleId":"1810","severity":1,"message":"1898","line":100,"column":10,"nodeType":"1812","messageId":"1813","endLine":100,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1899","line":100,"column":20,"nodeType":"1812","messageId":"1813","endLine":100,"endColumn":31},{"ruleId":"1810","severity":1,"message":"1900","line":104,"column":9,"nodeType":"1812","messageId":"1813","endLine":104,"endColumn":17},{"ruleId":"1814","severity":1,"message":"1815","line":111,"column":3,"nodeType":"1816","messageId":"1817","endLine":111,"endColumn":14},{"ruleId":"1810","severity":1,"message":"1901","line":118,"column":10,"nodeType":"1812","messageId":"1813","endLine":118,"endColumn":30},{"ruleId":"1810","severity":1,"message":"1902","line":118,"column":56,"nodeType":"1812","messageId":"1813","endLine":118,"endColumn":61},{"ruleId":"1814","severity":1,"message":"1815","line":138,"column":7,"nodeType":"1816","messageId":"1817","endLine":138,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":297,"column":19,"nodeType":"1816","messageId":"1817","endLine":297,"endColumn":30},{"ruleId":"1810","severity":1,"message":"1903","line":9,"column":8,"nodeType":"1812","messageId":"1813","endLine":9,"endColumn":15},{"ruleId":"1810","severity":1,"message":"1891","line":15,"column":3,"nodeType":"1812","messageId":"1813","endLine":15,"endColumn":9},{"ruleId":"1842","severity":1,"message":"1894","line":22,"column":1,"nodeType":"1844","messageId":"1845","endLine":22,"endColumn":64},{"ruleId":"1810","severity":1,"message":"1904","line":28,"column":8,"nodeType":"1812","messageId":"1813","endLine":28,"endColumn":16},{"ruleId":"1810","severity":1,"message":"1905","line":32,"column":8,"nodeType":"1812","messageId":"1813","endLine":32,"endColumn":18},{"ruleId":"1842","severity":1,"message":"1906","line":36,"column":1,"nodeType":"1844","messageId":"1845","endLine":36,"endColumn":52},{"ruleId":"1810","severity":1,"message":"1907","line":184,"column":9,"nodeType":"1812","messageId":"1813","endLine":184,"endColumn":31},{"ruleId":"1814","severity":1,"message":"1815","line":195,"column":7,"nodeType":"1816","messageId":"1817","endLine":195,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1908","line":227,"column":11,"nodeType":"1812","messageId":"1813","endLine":227,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1909","line":227,"column":38,"nodeType":"1812","messageId":"1813","endLine":227,"endColumn":42},{"ruleId":"1810","severity":1,"message":"1910","line":245,"column":10,"nodeType":"1812","messageId":"1813","endLine":245,"endColumn":15},{"ruleId":"1810","severity":1,"message":"1911","line":246,"column":9,"nodeType":"1812","messageId":"1813","endLine":246,"endColumn":27},{"ruleId":"1810","severity":1,"message":"1912","line":251,"column":28,"nodeType":"1812","messageId":"1813","endLine":251,"endColumn":34},{"ruleId":"1810","severity":1,"message":"1913","line":348,"column":61,"nodeType":"1812","messageId":"1813","endLine":348,"endColumn":69},{"ruleId":"1810","severity":1,"message":"1914","line":6,"column":22,"nodeType":"1812","messageId":"1813","endLine":6,"endColumn":27},{"ruleId":"1810","severity":1,"message":"1915","line":23,"column":9,"nodeType":"1812","messageId":"1813","endLine":23,"endColumn":16},{"ruleId":"1842","severity":1,"message":"1876","line":8,"column":1,"nodeType":"1844","messageId":"1845","endLine":8,"endColumn":47},{"ruleId":"1842","severity":1,"message":"1876","line":9,"column":1,"nodeType":"1844","messageId":"1845","endLine":9,"endColumn":41},{"ruleId":"1842","severity":1,"message":"1916","line":21,"column":1,"nodeType":"1844","messageId":"1845","endLine":21,"endColumn":57},{"ruleId":"1814","severity":1,"message":"1815","line":147,"column":7,"nodeType":"1816","messageId":"1817","endLine":147,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":164,"column":7,"nodeType":"1816","messageId":"1817","endLine":164,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":188,"column":7,"nodeType":"1816","messageId":"1817","endLine":188,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":276,"column":7,"nodeType":"1816","messageId":"1817","endLine":276,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1917","line":71,"column":41,"nodeType":"1812","messageId":"1813","endLine":71,"endColumn":47},{"ruleId":"1814","severity":1,"message":"1815","line":96,"column":7,"nodeType":"1816","messageId":"1817","endLine":96,"endColumn":18},{"ruleId":"1842","severity":1,"message":"1894","line":15,"column":1,"nodeType":"1844","messageId":"1845","endLine":15,"endColumn":52},{"ruleId":"1814","severity":1,"message":"1815","line":112,"column":7,"nodeType":"1816","messageId":"1817","endLine":112,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":163,"column":7,"nodeType":"1816","messageId":"1817","endLine":163,"endColumn":20},{"ruleId":"1842","severity":1,"message":"1894","line":16,"column":1,"nodeType":"1844","messageId":"1845","endLine":16,"endColumn":52},{"ruleId":"1814","severity":1,"message":"1815","line":116,"column":7,"nodeType":"1816","messageId":"1817","endLine":116,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":139,"column":7,"nodeType":"1816","messageId":"1817","endLine":139,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":156,"column":9,"nodeType":"1816","messageId":"1817","endLine":156,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1917","line":160,"column":41,"nodeType":"1812","messageId":"1813","endLine":160,"endColumn":47},{"ruleId":"1814","severity":1,"message":"1815","line":170,"column":7,"nodeType":"1816","messageId":"1817","endLine":170,"endColumn":20},{"ruleId":"1842","severity":1,"message":"1884","line":19,"column":1,"nodeType":"1844","messageId":"1845","endLine":19,"endColumn":59},{"ruleId":"1814","severity":1,"message":"1815","line":90,"column":7,"nodeType":"1816","messageId":"1817","endLine":90,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1918","line":13,"column":28,"nodeType":"1812","messageId":"1813","endLine":13,"endColumn":40},{"ruleId":"1814","severity":1,"message":"1815","line":92,"column":7,"nodeType":"1816","messageId":"1817","endLine":92,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1919","line":12,"column":3,"nodeType":"1812","messageId":"1813","endLine":12,"endColumn":8},{"ruleId":"1842","severity":1,"message":"1894","line":17,"column":1,"nodeType":"1844","messageId":"1845","endLine":17,"endColumn":52},{"ruleId":"1810","severity":1,"message":"1920","line":34,"column":3,"nodeType":"1812","messageId":"1813","endLine":34,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":215,"column":7,"nodeType":"1816","messageId":"1817","endLine":215,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1910","line":225,"column":10,"nodeType":"1812","messageId":"1813","endLine":225,"endColumn":15},{"ruleId":"1842","severity":1,"message":"1863","line":29,"column":1,"nodeType":"1844","messageId":"1845","endLine":29,"endColumn":46},{"ruleId":"1842","severity":1,"message":"1894","line":31,"column":1,"nodeType":"1844","messageId":"1845","endLine":31,"endColumn":57},{"ruleId":"1814","severity":1,"message":"1815","line":152,"column":5,"nodeType":"1816","messageId":"1817","endLine":152,"endColumn":16},{"ruleId":"1810","severity":1,"message":"1921","line":13,"column":3,"nodeType":"1812","messageId":"1813","endLine":13,"endColumn":13},{"ruleId":"1842","severity":1,"message":"1916","line":37,"column":1,"nodeType":"1844","messageId":"1845","endLine":37,"endColumn":65},{"ruleId":"1810","severity":1,"message":"1920","line":40,"column":3,"nodeType":"1812","messageId":"1813","endLine":40,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":158,"column":7,"nodeType":"1816","messageId":"1817","endLine":158,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":224,"column":5,"nodeType":"1816","messageId":"1817","endLine":224,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":593,"column":26,"nodeType":"1816","messageId":"1817","endLine":593,"endColumn":37},{"ruleId":"1842","severity":1,"message":"1922","line":13,"column":1,"nodeType":"1844","messageId":"1845","endLine":13,"endColumn":64},{"ruleId":"1810","severity":1,"message":"1923","line":3,"column":10,"nodeType":"1812","messageId":"1813","endLine":3,"endColumn":14},{"ruleId":"1810","severity":1,"message":"1891","line":10,"column":3,"nodeType":"1812","messageId":"1813","endLine":10,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1924","line":13,"column":3,"nodeType":"1812","messageId":"1813","endLine":13,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1893","line":19,"column":8,"nodeType":"1812","messageId":"1813","endLine":19,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1892","line":31,"column":8,"nodeType":"1812","messageId":"1813","endLine":31,"endColumn":27},{"ruleId":"1810","severity":1,"message":"1913","line":59,"column":11,"nodeType":"1812","messageId":"1813","endLine":59,"endColumn":19},{"ruleId":"1814","severity":1,"message":"1815","line":88,"column":9,"nodeType":"1816","messageId":"1817","endLine":88,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":153,"column":9,"nodeType":"1816","messageId":"1817","endLine":153,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1921","line":4,"column":3,"nodeType":"1812","messageId":"1813","endLine":4,"endColumn":13},{"ruleId":"1810","severity":1,"message":"1921","line":7,"column":3,"nodeType":"1812","messageId":"1813","endLine":7,"endColumn":13},{"ruleId":"1842","severity":1,"message":"1876","line":25,"column":1,"nodeType":"1844","messageId":"1845","endLine":25,"endColumn":46},{"ruleId":"1810","severity":1,"message":"1914","line":76,"column":27,"nodeType":"1812","messageId":"1813","endLine":76,"endColumn":32},{"ruleId":"1842","severity":1,"message":"1925","line":13,"column":1,"nodeType":"1844","messageId":"1845","endLine":13,"endColumn":51},{"ruleId":"1842","severity":1,"message":"1916","line":12,"column":1,"nodeType":"1844","messageId":"1845","endLine":12,"endColumn":65},{"ruleId":"1814","severity":1,"message":"1815","line":106,"column":7,"nodeType":"1816","messageId":"1817","endLine":106,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":165,"column":7,"nodeType":"1816","messageId":"1817","endLine":165,"endColumn":18},{"ruleId":"1842","severity":1,"message":"1894","line":10,"column":1,"nodeType":"1844","messageId":"1845","endLine":10,"endColumn":45},{"ruleId":"1814","severity":1,"message":"1815","line":136,"column":7,"nodeType":"1816","messageId":"1817","endLine":136,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":181,"column":41,"nodeType":"1816","messageId":"1817","endLine":181,"endColumn":52},{"ruleId":"1814","severity":1,"message":"1815","line":183,"column":36,"nodeType":"1816","messageId":"1817","endLine":183,"endColumn":47},{"ruleId":"1814","severity":1,"message":"1815","line":184,"column":34,"nodeType":"1816","messageId":"1817","endLine":184,"endColumn":45},{"ruleId":"1842","severity":1,"message":"1926","line":10,"column":1,"nodeType":"1844","messageId":"1845","endLine":10,"endColumn":45},{"ruleId":"1814","severity":1,"message":"1815","line":115,"column":7,"nodeType":"1816","messageId":"1817","endLine":115,"endColumn":20},{"ruleId":"1842","severity":1,"message":"1894","line":9,"column":1,"nodeType":"1844","messageId":"1845","endLine":9,"endColumn":52},{"ruleId":"1810","severity":1,"message":"1913","line":34,"column":11,"nodeType":"1812","messageId":"1813","endLine":34,"endColumn":19},{"ruleId":"1814","severity":1,"message":"1815","line":73,"column":9,"nodeType":"1816","messageId":"1817","endLine":73,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":85,"column":9,"nodeType":"1816","messageId":"1817","endLine":85,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":77,"column":3,"nodeType":"1816","messageId":"1817","endLine":77,"endColumn":14},{"ruleId":"1814","severity":1,"message":"1815","line":111,"column":7,"nodeType":"1816","messageId":"1817","endLine":111,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1905","line":6,"column":8,"nodeType":"1812","messageId":"1813","endLine":6,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1891","line":15,"column":3,"nodeType":"1812","messageId":"1813","endLine":15,"endColumn":9},{"ruleId":"1814","severity":1,"message":"1815","line":165,"column":9,"nodeType":"1816","messageId":"1817","endLine":165,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":206,"column":5,"nodeType":"1816","messageId":"1817","endLine":206,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":226,"column":7,"nodeType":"1816","messageId":"1817","endLine":226,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":231,"column":5,"nodeType":"1816","messageId":"1817","endLine":231,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":266,"column":7,"nodeType":"1816","messageId":"1817","endLine":266,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":286,"column":7,"nodeType":"1816","messageId":"1817","endLine":286,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1927","line":306,"column":9,"nodeType":"1812","messageId":"1813","endLine":306,"endColumn":27},{"ruleId":"1810","severity":1,"message":"1928","line":324,"column":9,"nodeType":"1812","messageId":"1813","endLine":324,"endColumn":10},{"ruleId":"1842","severity":1,"message":"1876","line":8,"column":1,"nodeType":"1844","messageId":"1845","endLine":8,"endColumn":47},{"ruleId":"1814","severity":1,"message":"1815","line":125,"column":7,"nodeType":"1816","messageId":"1817","endLine":125,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1837","line":26,"column":31,"nodeType":"1812","messageId":"1813","endLine":26,"endColumn":36},{"ruleId":"1814","severity":1,"message":"1815","line":37,"column":9,"nodeType":"1816","messageId":"1817","endLine":37,"endColumn":22},{"ruleId":"1842","severity":1,"message":"1876","line":15,"column":1,"nodeType":"1844","messageId":"1845","endLine":15,"endColumn":46},{"ruleId":"1810","severity":1,"message":"1921","line":5,"column":3,"nodeType":"1812","messageId":"1813","endLine":5,"endColumn":13},{"ruleId":"1842","severity":1,"message":"1894","line":16,"column":1,"nodeType":"1844","messageId":"1845","endLine":16,"endColumn":52},{"ruleId":"1814","severity":1,"message":"1815","line":115,"column":7,"nodeType":"1816","messageId":"1817","endLine":115,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":138,"column":7,"nodeType":"1816","messageId":"1817","endLine":138,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":155,"column":9,"nodeType":"1816","messageId":"1817","endLine":155,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":169,"column":9,"nodeType":"1816","messageId":"1817","endLine":169,"endColumn":22},{"ruleId":"1842","severity":1,"message":"1876","line":7,"column":1,"nodeType":"1844","messageId":"1845","endLine":7,"endColumn":47},{"ruleId":"1814","severity":1,"message":"1815","line":112,"column":7,"nodeType":"1816","messageId":"1817","endLine":112,"endColumn":18},{"ruleId":"1842","severity":1,"message":"1884","line":5,"column":1,"nodeType":"1844","messageId":"1845","endLine":5,"endColumn":69},{"ruleId":"1810","severity":1,"message":"1898","line":11,"column":10,"nodeType":"1812","messageId":"1813","endLine":11,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1900","line":45,"column":9,"nodeType":"1812","messageId":"1813","endLine":45,"endColumn":17},{"ruleId":"1814","severity":1,"message":"1815","line":73,"column":7,"nodeType":"1816","messageId":"1817","endLine":73,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":96,"column":7,"nodeType":"1816","messageId":"1817","endLine":96,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":119,"column":7,"nodeType":"1816","messageId":"1817","endLine":119,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":136,"column":9,"nodeType":"1816","messageId":"1817","endLine":136,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":214,"column":21,"nodeType":"1816","messageId":"1817","endLine":214,"endColumn":32},{"ruleId":"1810","severity":1,"message":"1929","line":331,"column":15,"nodeType":"1812","messageId":"1813","endLine":331,"endColumn":27},{"ruleId":"1810","severity":1,"message":"1818","line":331,"column":29,"nodeType":"1812","messageId":"1813","endLine":331,"endColumn":34},{"ruleId":"1810","severity":1,"message":"1819","line":331,"column":36,"nodeType":"1812","messageId":"1813","endLine":331,"endColumn":43},{"ruleId":"1810","severity":1,"message":"1921","line":6,"column":3,"nodeType":"1812","messageId":"1813","endLine":6,"endColumn":13},{"ruleId":"1842","severity":1,"message":"1876","line":23,"column":1,"nodeType":"1844","messageId":"1845","endLine":23,"endColumn":46},{"ruleId":"1814","severity":1,"message":"1815","line":120,"column":7,"nodeType":"1816","messageId":"1817","endLine":120,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":219,"column":7,"nodeType":"1816","messageId":"1817","endLine":219,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1930","line":9,"column":8,"nodeType":"1812","messageId":"1813","endLine":9,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1931","line":10,"column":8,"nodeType":"1812","messageId":"1813","endLine":10,"endColumn":15},{"ruleId":"1810","severity":1,"message":"1932","line":11,"column":8,"nodeType":"1812","messageId":"1813","endLine":11,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1933","line":12,"column":8,"nodeType":"1812","messageId":"1813","endLine":12,"endColumn":17},{"ruleId":"1814","severity":1,"message":"1815","line":31,"column":7,"nodeType":"1816","messageId":"1817","endLine":31,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1837","line":4,"column":38,"nodeType":"1812","messageId":"1813","endLine":4,"endColumn":43},{"ruleId":"1814","severity":1,"message":"1815","line":51,"column":9,"nodeType":"1816","messageId":"1817","endLine":51,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":68,"column":9,"nodeType":"1816","messageId":"1817","endLine":68,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":93,"column":7,"nodeType":"1816","messageId":"1817","endLine":93,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":152,"column":7,"nodeType":"1816","messageId":"1817","endLine":152,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":169,"column":9,"nodeType":"1816","messageId":"1817","endLine":169,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1934","line":621,"column":7,"nodeType":"1812","messageId":"1813","endLine":621,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1935","line":637,"column":7,"nodeType":"1812","messageId":"1813","endLine":637,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1936","line":656,"column":7,"nodeType":"1812","messageId":"1813","endLine":656,"endColumn":25},{"ruleId":"1810","severity":1,"message":"1937","line":682,"column":7,"nodeType":"1812","messageId":"1813","endLine":682,"endColumn":11},{"ruleId":"1810","severity":1,"message":"1938","line":705,"column":7,"nodeType":"1812","messageId":"1813","endLine":705,"endColumn":10},{"ruleId":"1808","replacedBy":"1939"},{"ruleId":"1814","severity":1,"message":"1815","line":49,"column":9,"nodeType":"1816","messageId":"1817","endLine":49,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":73,"column":7,"nodeType":"1816","messageId":"1817","endLine":73,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":98,"column":7,"nodeType":"1816","messageId":"1817","endLine":98,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":115,"column":9,"nodeType":"1816","messageId":"1817","endLine":115,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":64,"column":9,"nodeType":"1816","messageId":"1817","endLine":64,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1940","line":15,"column":3,"nodeType":"1812","messageId":"1813","endLine":15,"endColumn":12},{"ruleId":"1810","severity":1,"message":"1864","line":16,"column":3,"nodeType":"1812","messageId":"1813","endLine":16,"endColumn":11},{"ruleId":"1810","severity":1,"message":"1865","line":18,"column":6,"nodeType":"1812","messageId":"1813","endLine":18,"endColumn":10},{"ruleId":"1814","severity":1,"message":"1815","line":253,"column":15,"nodeType":"1816","messageId":"1817","endLine":253,"endColumn":28},{"ruleId":"1814","severity":1,"message":"1815","line":59,"column":9,"nodeType":"1816","messageId":"1817","endLine":59,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":131,"column":17,"nodeType":"1816","messageId":"1817","endLine":131,"endColumn":30},{"ruleId":"1814","severity":1,"message":"1815","line":192,"column":17,"nodeType":"1816","messageId":"1817","endLine":192,"endColumn":30},{"ruleId":"1814","severity":1,"message":"1815","line":36,"column":9,"nodeType":"1816","messageId":"1817","endLine":36,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":46,"column":9,"nodeType":"1816","messageId":"1817","endLine":46,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":131,"column":17,"nodeType":"1816","messageId":"1817","endLine":131,"endColumn":30},{"ruleId":"1814","severity":1,"message":"1815","line":48,"column":7,"nodeType":"1816","messageId":"1817","endLine":48,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1818","line":67,"column":25,"nodeType":"1812","messageId":"1813","endLine":67,"endColumn":30},{"ruleId":"1810","severity":1,"message":"1819","line":67,"column":32,"nodeType":"1812","messageId":"1813","endLine":67,"endColumn":39},{"ruleId":"1810","severity":1,"message":"1820","line":67,"column":41,"nodeType":"1812","messageId":"1813","endLine":67,"endColumn":54},{"ruleId":"1810","severity":1,"message":"1821","line":67,"column":56,"nodeType":"1812","messageId":"1813","endLine":67,"endColumn":65},{"ruleId":"1814","severity":1,"message":"1815","line":41,"column":9,"nodeType":"1816","messageId":"1817","endLine":41,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1818","line":54,"column":25,"nodeType":"1812","messageId":"1813","endLine":54,"endColumn":30},{"ruleId":"1810","severity":1,"message":"1819","line":54,"column":32,"nodeType":"1812","messageId":"1813","endLine":54,"endColumn":39},{"ruleId":"1810","severity":1,"message":"1941","line":41,"column":3,"nodeType":"1812","messageId":"1813","endLine":41,"endColumn":11},{"ruleId":"1810","severity":1,"message":"1872","line":42,"column":3,"nodeType":"1812","messageId":"1813","endLine":42,"endColumn":7},{"ruleId":"1810","severity":1,"message":"1864","line":44,"column":3,"nodeType":"1812","messageId":"1813","endLine":44,"endColumn":11},{"ruleId":"1810","severity":1,"message":"1865","line":45,"column":6,"nodeType":"1812","messageId":"1813","endLine":45,"endColumn":10},{"ruleId":"1814","severity":1,"message":"1815","line":36,"column":7,"nodeType":"1816","messageId":"1817","endLine":36,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":46,"column":7,"nodeType":"1816","messageId":"1817","endLine":46,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1820","line":65,"column":41,"nodeType":"1812","messageId":"1813","endLine":65,"endColumn":54},{"ruleId":"1810","severity":1,"message":"1821","line":65,"column":56,"nodeType":"1812","messageId":"1813","endLine":65,"endColumn":65},{"ruleId":"1822","severity":1,"message":"1942","line":25,"column":3,"nodeType":"1824","messageId":"1825","endLine":25,"endColumn":16},{"ruleId":"1842","severity":1,"message":"1863","line":8,"column":1,"nodeType":"1844","messageId":"1845","endLine":8,"endColumn":48},{"ruleId":"1814","severity":1,"message":"1815","line":82,"column":9,"nodeType":"1816","messageId":"1817","endLine":82,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":93,"column":9,"nodeType":"1816","messageId":"1817","endLine":93,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":242,"column":13,"nodeType":"1816","messageId":"1817","endLine":242,"endColumn":26},{"ruleId":"1810","severity":1,"message":"1847","line":98,"column":29,"nodeType":"1812","messageId":"1813","endLine":98,"endColumn":30},{"ruleId":"1810","severity":1,"message":"1818","line":34,"column":25,"nodeType":"1812","messageId":"1813","endLine":34,"endColumn":30},{"ruleId":"1810","severity":1,"message":"1819","line":34,"column":32,"nodeType":"1812","messageId":"1813","endLine":34,"endColumn":39},{"ruleId":"1814","severity":1,"message":"1815","line":38,"column":7,"nodeType":"1816","messageId":"1817","endLine":38,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":55,"column":7,"nodeType":"1816","messageId":"1817","endLine":55,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1818","line":72,"column":25,"nodeType":"1812","messageId":"1813","endLine":72,"endColumn":30},{"ruleId":"1810","severity":1,"message":"1819","line":72,"column":32,"nodeType":"1812","messageId":"1813","endLine":72,"endColumn":39},{"ruleId":"1810","severity":1,"message":"1821","line":72,"column":56,"nodeType":"1812","messageId":"1813","endLine":72,"endColumn":65},{"ruleId":"1822","severity":1,"message":"1943","line":75,"column":3,"nodeType":"1824","messageId":"1825","endLine":75,"endColumn":14},{"ruleId":"1822","severity":1,"message":"1944","line":76,"column":3,"nodeType":"1824","messageId":"1825","endLine":76,"endColumn":13},{"ruleId":"1822","severity":1,"message":"1945","line":77,"column":3,"nodeType":"1824","messageId":"1825","endLine":77,"endColumn":24},{"ruleId":"1822","severity":1,"message":"1946","line":78,"column":3,"nodeType":"1824","messageId":"1825","endLine":78,"endColumn":16},{"ruleId":"1822","severity":1,"message":"1947","line":79,"column":3,"nodeType":"1824","messageId":"1825","endLine":79,"endColumn":19},{"ruleId":"1822","severity":1,"message":"1948","line":18,"column":35,"nodeType":"1824","messageId":"1825","endLine":18,"endColumn":39},{"ruleId":"1814","severity":1,"message":"1815","line":45,"column":9,"nodeType":"1816","messageId":"1817","endLine":45,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":68,"column":7,"nodeType":"1816","messageId":"1817","endLine":68,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":89,"column":7,"nodeType":"1816","messageId":"1817","endLine":89,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1818","line":114,"column":25,"nodeType":"1812","messageId":"1813","endLine":114,"endColumn":30},{"ruleId":"1810","severity":1,"message":"1819","line":114,"column":32,"nodeType":"1812","messageId":"1813","endLine":114,"endColumn":39},{"ruleId":"1822","severity":1,"message":"1949","line":11,"column":29,"nodeType":"1824","messageId":"1825","endLine":11,"endColumn":44},{"ruleId":"1822","severity":1,"message":"1950","line":11,"column":46,"nodeType":"1824","messageId":"1825","endLine":11,"endColumn":57},{"ruleId":"1822","severity":1,"message":"1951","line":11,"column":59,"nodeType":"1824","messageId":"1825","endLine":11,"endColumn":70},{"ruleId":"1822","severity":1,"message":"1952","line":16,"column":11,"nodeType":"1824","messageId":"1825","endLine":16,"endColumn":20},{"ruleId":"1822","severity":1,"message":"1953","line":16,"column":22,"nodeType":"1824","messageId":"1825","endLine":16,"endColumn":36},{"ruleId":"1822","severity":1,"message":"1954","line":16,"column":38,"nodeType":"1824","messageId":"1825","endLine":16,"endColumn":45},{"ruleId":"1814","severity":1,"message":"1815","line":32,"column":9,"nodeType":"1816","messageId":"1817","endLine":32,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":44,"column":7,"nodeType":"1816","messageId":"1817","endLine":44,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":56,"column":11,"nodeType":"1816","messageId":"1817","endLine":56,"endColumn":24},{"ruleId":"1814","severity":1,"message":"1815","line":62,"column":7,"nodeType":"1816","messageId":"1817","endLine":62,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":80,"column":9,"nodeType":"1816","messageId":"1817","endLine":80,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1837","line":6,"column":31,"nodeType":"1812","messageId":"1813","endLine":6,"endColumn":36},{"ruleId":"1810","severity":1,"message":"1924","line":6,"column":3,"nodeType":"1812","messageId":"1813","endLine":6,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1955","line":12,"column":8,"nodeType":"1812","messageId":"1813","endLine":12,"endColumn":21},{"ruleId":"1810","severity":1,"message":"1956","line":13,"column":10,"nodeType":"1812","messageId":"1813","endLine":13,"endColumn":16},{"ruleId":"1810","severity":1,"message":"1957","line":13,"column":18,"nodeType":"1812","messageId":"1813","endLine":13,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1958","line":14,"column":10,"nodeType":"1812","messageId":"1813","endLine":14,"endColumn":35},{"ruleId":"1810","severity":1,"message":"1959","line":17,"column":32,"nodeType":"1812","messageId":"1813","endLine":17,"endColumn":38},{"ruleId":"1810","severity":1,"message":"1892","line":20,"column":8,"nodeType":"1812","messageId":"1813","endLine":20,"endColumn":27},{"ruleId":"1842","severity":1,"message":"1894","line":21,"column":1,"nodeType":"1844","messageId":"1845","endLine":21,"endColumn":52},{"ruleId":"1842","severity":1,"message":"1960","line":27,"column":1,"nodeType":"1844","messageId":"1845","endLine":27,"endColumn":63},{"ruleId":"1810","severity":1,"message":"1838","line":27,"column":10,"nodeType":"1812","messageId":"1813","endLine":27,"endColumn":23},{"ruleId":"1810","severity":1,"message":"1961","line":29,"column":24,"nodeType":"1812","messageId":"1813","endLine":29,"endColumn":35},{"ruleId":"1842","severity":1,"message":"1906","line":32,"column":1,"nodeType":"1844","messageId":"1845","endLine":32,"endColumn":50},{"ruleId":"1810","severity":1,"message":"1962","line":41,"column":10,"nodeType":"1812","messageId":"1813","endLine":41,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1963","line":41,"column":30,"nodeType":"1812","messageId":"1813","endLine":41,"endColumn":33},{"ruleId":"1810","severity":1,"message":"1964","line":60,"column":9,"nodeType":"1812","messageId":"1813","endLine":60,"endColumn":17},{"ruleId":"1814","severity":1,"message":"1815","line":60,"column":26,"nodeType":"1816","messageId":"1817","endLine":60,"endColumn":37},{"ruleId":"1814","severity":1,"message":"1815","line":71,"column":9,"nodeType":"1816","messageId":"1817","endLine":71,"endColumn":22},{"ruleId":"1965","severity":1,"message":"1966","line":159,"column":35,"nodeType":"1967","messageId":"1968","endLine":159,"endColumn":46,"fix":"1969"},{"ruleId":"1965","severity":1,"message":"1966","line":169,"column":35,"nodeType":"1967","messageId":"1968","endLine":169,"endColumn":42,"fix":"1970"},{"ruleId":"1842","severity":1,"message":"1894","line":7,"column":1,"nodeType":"1844","messageId":"1845","endLine":7,"endColumn":52},{"ruleId":"1810","severity":1,"message":"1961","line":15,"column":24,"nodeType":"1812","messageId":"1813","endLine":15,"endColumn":35},{"ruleId":"1810","severity":1,"message":"1839","line":21,"column":9,"nodeType":"1812","messageId":"1813","endLine":21,"endColumn":14},{"ruleId":"1810","severity":1,"message":"1962","line":22,"column":10,"nodeType":"1812","messageId":"1813","endLine":22,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1963","line":22,"column":30,"nodeType":"1812","messageId":"1813","endLine":22,"endColumn":33},{"ruleId":"1814","severity":1,"message":"1815","line":38,"column":9,"nodeType":"1816","messageId":"1817","endLine":38,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1875","line":62,"column":34,"nodeType":"1812","messageId":"1813","endLine":62,"endColumn":39},{"ruleId":"1810","severity":1,"message":"1892","line":13,"column":8,"nodeType":"1812","messageId":"1813","endLine":13,"endColumn":27},{"ruleId":"1842","severity":1,"message":"1894","line":14,"column":1,"nodeType":"1844","messageId":"1845","endLine":14,"endColumn":52},{"ruleId":"1842","severity":1,"message":"1960","line":20,"column":1,"nodeType":"1844","messageId":"1845","endLine":20,"endColumn":63},{"ruleId":"1810","severity":1,"message":"1838","line":20,"column":10,"nodeType":"1812","messageId":"1813","endLine":20,"endColumn":23},{"ruleId":"1810","severity":1,"message":"1961","line":22,"column":24,"nodeType":"1812","messageId":"1813","endLine":22,"endColumn":35},{"ruleId":"1810","severity":1,"message":"1962","line":29,"column":10,"nodeType":"1812","messageId":"1813","endLine":29,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1963","line":29,"column":30,"nodeType":"1812","messageId":"1813","endLine":29,"endColumn":33},{"ruleId":"1814","severity":1,"message":"1815","line":46,"column":9,"nodeType":"1816","messageId":"1817","endLine":46,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1875","line":69,"column":34,"nodeType":"1812","messageId":"1813","endLine":69,"endColumn":39},{"ruleId":"1810","severity":1,"message":"1923","line":2,"column":10,"nodeType":"1812","messageId":"1813","endLine":2,"endColumn":14},{"ruleId":"1810","severity":1,"message":"1892","line":6,"column":8,"nodeType":"1812","messageId":"1813","endLine":6,"endColumn":27},{"ruleId":"1810","severity":1,"message":"1971","line":17,"column":10,"nodeType":"1812","messageId":"1813","endLine":17,"endColumn":28},{"ruleId":"1842","severity":1,"message":"1894","line":19,"column":1,"nodeType":"1844","messageId":"1845","endLine":19,"endColumn":52},{"ruleId":"1810","severity":1,"message":"1839","line":37,"column":9,"nodeType":"1812","messageId":"1813","endLine":37,"endColumn":14},{"ruleId":"1810","severity":1,"message":"1972","line":40,"column":11,"nodeType":"1812","messageId":"1813","endLine":40,"endColumn":26},{"ruleId":"1814","severity":1,"message":"1815","line":87,"column":9,"nodeType":"1816","messageId":"1817","endLine":87,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":91,"column":3,"nodeType":"1816","messageId":"1817","endLine":91,"endColumn":14},{"ruleId":"1810","severity":1,"message":"1973","line":98,"column":15,"nodeType":"1812","messageId":"1813","endLine":98,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1974","line":185,"column":19,"nodeType":"1812","messageId":"1813","endLine":185,"endColumn":25},{"ruleId":"1810","severity":1,"message":"1975","line":186,"column":19,"nodeType":"1812","messageId":"1813","endLine":186,"endColumn":28},{"ruleId":"1810","severity":1,"message":"1976","line":187,"column":19,"nodeType":"1812","messageId":"1813","endLine":187,"endColumn":27},{"ruleId":"1810","severity":1,"message":"1977","line":188,"column":19,"nodeType":"1812","messageId":"1813","endLine":188,"endColumn":23},{"ruleId":"1810","severity":1,"message":"1913","line":189,"column":19,"nodeType":"1812","messageId":"1813","endLine":189,"endColumn":27},{"ruleId":"1810","severity":1,"message":"1978","line":191,"column":19,"nodeType":"1812","messageId":"1813","endLine":191,"endColumn":32},{"ruleId":"1810","severity":1,"message":"1979","line":193,"column":19,"nodeType":"1812","messageId":"1813","endLine":193,"endColumn":25},{"ruleId":"1810","severity":1,"message":"1980","line":195,"column":23,"nodeType":"1812","messageId":"1813","endLine":195,"endColumn":37},{"ruleId":"1842","severity":1,"message":"1863","line":6,"column":1,"nodeType":"1844","messageId":"1845","endLine":6,"endColumn":60},{"ruleId":"1814","severity":1,"message":"1815","line":92,"column":9,"nodeType":"1816","messageId":"1817","endLine":92,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":157,"column":9,"nodeType":"1816","messageId":"1817","endLine":157,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1905","line":6,"column":8,"nodeType":"1812","messageId":"1813","endLine":6,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1891","line":15,"column":3,"nodeType":"1812","messageId":"1813","endLine":15,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1981","line":58,"column":8,"nodeType":"1812","messageId":"1813","endLine":58,"endColumn":25},{"ruleId":"1814","severity":1,"message":"1815","line":168,"column":9,"nodeType":"1816","messageId":"1817","endLine":168,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":210,"column":5,"nodeType":"1816","messageId":"1817","endLine":210,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":230,"column":7,"nodeType":"1816","messageId":"1817","endLine":230,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":235,"column":5,"nodeType":"1816","messageId":"1817","endLine":235,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":270,"column":7,"nodeType":"1816","messageId":"1817","endLine":270,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":290,"column":7,"nodeType":"1816","messageId":"1817","endLine":290,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1927","line":310,"column":9,"nodeType":"1812","messageId":"1813","endLine":310,"endColumn":27},{"ruleId":"1810","severity":1,"message":"1928","line":329,"column":9,"nodeType":"1812","messageId":"1813","endLine":329,"endColumn":10},{"ruleId":"1810","severity":1,"message":"1924","line":6,"column":3,"nodeType":"1812","messageId":"1813","endLine":6,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1892","line":13,"column":8,"nodeType":"1812","messageId":"1813","endLine":13,"endColumn":27},{"ruleId":"1842","severity":1,"message":"1894","line":14,"column":1,"nodeType":"1844","messageId":"1845","endLine":14,"endColumn":52},{"ruleId":"1842","severity":1,"message":"1960","line":20,"column":1,"nodeType":"1844","messageId":"1845","endLine":20,"endColumn":63},{"ruleId":"1810","severity":1,"message":"1838","line":20,"column":10,"nodeType":"1812","messageId":"1813","endLine":20,"endColumn":23},{"ruleId":"1810","severity":1,"message":"1961","line":22,"column":24,"nodeType":"1812","messageId":"1813","endLine":22,"endColumn":35},{"ruleId":"1810","severity":1,"message":"1962","line":32,"column":10,"nodeType":"1812","messageId":"1813","endLine":32,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1963","line":32,"column":30,"nodeType":"1812","messageId":"1813","endLine":32,"endColumn":33},{"ruleId":"1814","severity":1,"message":"1815","line":43,"column":9,"nodeType":"1816","messageId":"1817","endLine":43,"endColumn":20},{"ruleId":"1814","severity":1,"message":"1815","line":50,"column":9,"nodeType":"1816","messageId":"1817","endLine":50,"endColumn":22},{"ruleId":"1965","severity":1,"message":"1966","line":110,"column":31,"nodeType":"1967","messageId":"1968","endLine":110,"endColumn":42,"fix":"1982"},{"ruleId":"1965","severity":1,"message":"1966","line":120,"column":31,"nodeType":"1967","messageId":"1968","endLine":120,"endColumn":38,"fix":"1983"},{"ruleId":"1810","severity":1,"message":"1924","line":6,"column":3,"nodeType":"1812","messageId":"1813","endLine":6,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1955","line":12,"column":8,"nodeType":"1812","messageId":"1813","endLine":12,"endColumn":21},{"ruleId":"1810","severity":1,"message":"1956","line":13,"column":10,"nodeType":"1812","messageId":"1813","endLine":13,"endColumn":16},{"ruleId":"1810","severity":1,"message":"1957","line":13,"column":18,"nodeType":"1812","messageId":"1813","endLine":13,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1958","line":14,"column":10,"nodeType":"1812","messageId":"1813","endLine":14,"endColumn":35},{"ruleId":"1810","severity":1,"message":"1959","line":17,"column":32,"nodeType":"1812","messageId":"1813","endLine":17,"endColumn":38},{"ruleId":"1810","severity":1,"message":"1892","line":20,"column":8,"nodeType":"1812","messageId":"1813","endLine":20,"endColumn":27},{"ruleId":"1842","severity":1,"message":"1894","line":21,"column":1,"nodeType":"1844","messageId":"1845","endLine":21,"endColumn":52},{"ruleId":"1842","severity":1,"message":"1960","line":27,"column":1,"nodeType":"1844","messageId":"1845","endLine":27,"endColumn":63},{"ruleId":"1810","severity":1,"message":"1838","line":27,"column":10,"nodeType":"1812","messageId":"1813","endLine":27,"endColumn":23},{"ruleId":"1810","severity":1,"message":"1961","line":29,"column":24,"nodeType":"1812","messageId":"1813","endLine":29,"endColumn":35},{"ruleId":"1842","severity":1,"message":"1906","line":32,"column":1,"nodeType":"1844","messageId":"1845","endLine":32,"endColumn":55},{"ruleId":"1810","severity":1,"message":"1962","line":41,"column":10,"nodeType":"1812","messageId":"1813","endLine":41,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1963","line":41,"column":30,"nodeType":"1812","messageId":"1813","endLine":41,"endColumn":33},{"ruleId":"1814","severity":1,"message":"1815","line":70,"column":9,"nodeType":"1816","messageId":"1817","endLine":70,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1924","line":6,"column":3,"nodeType":"1812","messageId":"1813","endLine":6,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1955","line":12,"column":8,"nodeType":"1812","messageId":"1813","endLine":12,"endColumn":21},{"ruleId":"1810","severity":1,"message":"1956","line":13,"column":10,"nodeType":"1812","messageId":"1813","endLine":13,"endColumn":16},{"ruleId":"1810","severity":1,"message":"1957","line":13,"column":18,"nodeType":"1812","messageId":"1813","endLine":13,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1958","line":14,"column":10,"nodeType":"1812","messageId":"1813","endLine":14,"endColumn":35},{"ruleId":"1810","severity":1,"message":"1959","line":17,"column":32,"nodeType":"1812","messageId":"1813","endLine":17,"endColumn":38},{"ruleId":"1810","severity":1,"message":"1892","line":20,"column":8,"nodeType":"1812","messageId":"1813","endLine":20,"endColumn":27},{"ruleId":"1842","severity":1,"message":"1894","line":21,"column":1,"nodeType":"1844","messageId":"1845","endLine":21,"endColumn":52},{"ruleId":"1842","severity":1,"message":"1960","line":27,"column":1,"nodeType":"1844","messageId":"1845","endLine":27,"endColumn":63},{"ruleId":"1810","severity":1,"message":"1838","line":27,"column":10,"nodeType":"1812","messageId":"1813","endLine":27,"endColumn":23},{"ruleId":"1810","severity":1,"message":"1961","line":29,"column":24,"nodeType":"1812","messageId":"1813","endLine":29,"endColumn":35},{"ruleId":"1842","severity":1,"message":"1906","line":32,"column":1,"nodeType":"1844","messageId":"1845","endLine":32,"endColumn":50},{"ruleId":"1810","severity":1,"message":"1962","line":41,"column":10,"nodeType":"1812","messageId":"1813","endLine":41,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1963","line":41,"column":30,"nodeType":"1812","messageId":"1813","endLine":41,"endColumn":33},{"ruleId":"1810","severity":1,"message":"1964","line":60,"column":9,"nodeType":"1812","messageId":"1813","endLine":60,"endColumn":17},{"ruleId":"1814","severity":1,"message":"1815","line":60,"column":26,"nodeType":"1816","messageId":"1817","endLine":60,"endColumn":37},{"ruleId":"1814","severity":1,"message":"1815","line":71,"column":9,"nodeType":"1816","messageId":"1817","endLine":71,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1891","line":5,"column":3,"nodeType":"1812","messageId":"1813","endLine":5,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1924","line":6,"column":3,"nodeType":"1812","messageId":"1813","endLine":6,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1955","line":12,"column":8,"nodeType":"1812","messageId":"1813","endLine":12,"endColumn":21},{"ruleId":"1810","severity":1,"message":"1956","line":13,"column":10,"nodeType":"1812","messageId":"1813","endLine":13,"endColumn":16},{"ruleId":"1810","severity":1,"message":"1957","line":13,"column":18,"nodeType":"1812","messageId":"1813","endLine":13,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1958","line":14,"column":10,"nodeType":"1812","messageId":"1813","endLine":14,"endColumn":35},{"ruleId":"1810","severity":1,"message":"1959","line":17,"column":32,"nodeType":"1812","messageId":"1813","endLine":17,"endColumn":38},{"ruleId":"1810","severity":1,"message":"1892","line":20,"column":8,"nodeType":"1812","messageId":"1813","endLine":20,"endColumn":27},{"ruleId":"1842","severity":1,"message":"1894","line":21,"column":1,"nodeType":"1844","messageId":"1845","endLine":21,"endColumn":52},{"ruleId":"1810","severity":1,"message":"1984","line":23,"column":8,"nodeType":"1812","messageId":"1813","endLine":23,"endColumn":12},{"ruleId":"1810","severity":1,"message":"1985","line":24,"column":10,"nodeType":"1812","messageId":"1813","endLine":24,"endColumn":28},{"ruleId":"1842","severity":1,"message":"1960","line":27,"column":1,"nodeType":"1844","messageId":"1845","endLine":27,"endColumn":63},{"ruleId":"1810","severity":1,"message":"1838","line":27,"column":10,"nodeType":"1812","messageId":"1813","endLine":27,"endColumn":23},{"ruleId":"1810","severity":1,"message":"1961","line":29,"column":24,"nodeType":"1812","messageId":"1813","endLine":29,"endColumn":35},{"ruleId":"1842","severity":1,"message":"1906","line":32,"column":1,"nodeType":"1844","messageId":"1845","endLine":32,"endColumn":50},{"ruleId":"1810","severity":1,"message":"1986","line":40,"column":11,"nodeType":"1812","messageId":"1813","endLine":40,"endColumn":30},{"ruleId":"1810","severity":1,"message":"1962","line":41,"column":10,"nodeType":"1812","messageId":"1813","endLine":41,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1963","line":41,"column":30,"nodeType":"1812","messageId":"1813","endLine":41,"endColumn":33},{"ruleId":"1810","severity":1,"message":"1964","line":60,"column":9,"nodeType":"1812","messageId":"1813","endLine":60,"endColumn":17},{"ruleId":"1814","severity":1,"message":"1815","line":60,"column":26,"nodeType":"1816","messageId":"1817","endLine":60,"endColumn":37},{"ruleId":"1814","severity":1,"message":"1815","line":71,"column":9,"nodeType":"1816","messageId":"1817","endLine":71,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1987","line":127,"column":21,"nodeType":"1812","messageId":"1813","endLine":127,"endColumn":31},{"ruleId":"1810","severity":1,"message":"1988","line":3,"column":10,"nodeType":"1812","messageId":"1813","endLine":3,"endColumn":16},{"ruleId":"1842","severity":1,"message":"1894","line":9,"column":1,"nodeType":"1844","messageId":"1845","endLine":9,"endColumn":52},{"ruleId":"1810","severity":1,"message":"1923","line":22,"column":21,"nodeType":"1812","messageId":"1813","endLine":22,"endColumn":25},{"ruleId":"1810","severity":1,"message":"1989","line":28,"column":8,"nodeType":"1812","messageId":"1813","endLine":28,"endColumn":17},{"ruleId":"1842","severity":1,"message":"1876","line":30,"column":1,"nodeType":"1844","messageId":"1845","endLine":30,"endColumn":47},{"ruleId":"1842","severity":1,"message":"1922","line":34,"column":1,"nodeType":"1844","messageId":"1845","endLine":34,"endColumn":69},{"ruleId":"1810","severity":1,"message":"1990","line":39,"column":9,"nodeType":"1812","messageId":"1813","endLine":39,"endColumn":16},{"ruleId":"1810","severity":1,"message":"1991","line":46,"column":44,"nodeType":"1812","messageId":"1813","endLine":46,"endColumn":49},{"ruleId":"1814","severity":1,"message":"1815","line":88,"column":9,"nodeType":"1816","messageId":"1817","endLine":88,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":100,"column":9,"nodeType":"1816","messageId":"1817","endLine":100,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1847","line":210,"column":31,"nodeType":"1812","messageId":"1813","endLine":210,"endColumn":32},{"ruleId":"1842","severity":1,"message":"1863","line":6,"column":1,"nodeType":"1844","messageId":"1845","endLine":6,"endColumn":60},{"ruleId":"1810","severity":1,"message":"1891","line":11,"column":3,"nodeType":"1812","messageId":"1813","endLine":11,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1924","line":14,"column":3,"nodeType":"1812","messageId":"1813","endLine":14,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1893","line":20,"column":8,"nodeType":"1812","messageId":"1813","endLine":20,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1892","line":32,"column":8,"nodeType":"1812","messageId":"1813","endLine":32,"endColumn":27},{"ruleId":"1810","severity":1,"message":"1990","line":54,"column":9,"nodeType":"1812","messageId":"1813","endLine":54,"endColumn":16},{"ruleId":"1810","severity":1,"message":"1992","line":61,"column":11,"nodeType":"1812","messageId":"1813","endLine":61,"endColumn":13},{"ruleId":"1814","severity":1,"message":"1815","line":62,"column":3,"nodeType":"1816","messageId":"1817","endLine":62,"endColumn":14},{"ruleId":"1814","severity":1,"message":"1815","line":92,"column":9,"nodeType":"1816","messageId":"1817","endLine":92,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":110,"column":9,"nodeType":"1816","messageId":"1817","endLine":110,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":175,"column":9,"nodeType":"1816","messageId":"1817","endLine":175,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1905","line":6,"column":8,"nodeType":"1812","messageId":"1813","endLine":6,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1924","line":14,"column":3,"nodeType":"1812","messageId":"1813","endLine":14,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1891","line":16,"column":3,"nodeType":"1812","messageId":"1813","endLine":16,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1993","line":33,"column":3,"nodeType":"1812","messageId":"1813","endLine":33,"endColumn":8},{"ruleId":"1810","severity":1,"message":"1994","line":51,"column":3,"nodeType":"1812","messageId":"1813","endLine":51,"endColumn":32},{"ruleId":"1810","severity":1,"message":"1995","line":59,"column":10,"nodeType":"1812","messageId":"1813","endLine":59,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1992","line":64,"column":11,"nodeType":"1812","messageId":"1813","endLine":64,"endColumn":13},{"ruleId":"1810","severity":1,"message":"1898","line":70,"column":10,"nodeType":"1812","messageId":"1813","endLine":70,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1996","line":97,"column":9,"nodeType":"1812","messageId":"1813","endLine":97,"endColumn":24},{"ruleId":"1810","severity":1,"message":"1997","line":102,"column":9,"nodeType":"1812","messageId":"1813","endLine":102,"endColumn":30},{"ruleId":"1810","severity":1,"message":"1998","line":107,"column":9,"nodeType":"1812","messageId":"1813","endLine":107,"endColumn":30},{"ruleId":"1814","severity":1,"message":"1815","line":169,"column":9,"nodeType":"1816","messageId":"1817","endLine":169,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":210,"column":5,"nodeType":"1816","messageId":"1817","endLine":210,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":230,"column":7,"nodeType":"1816","messageId":"1817","endLine":230,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1999","line":234,"column":9,"nodeType":"1812","messageId":"1813","endLine":234,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":235,"column":5,"nodeType":"1816","messageId":"1817","endLine":235,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":270,"column":7,"nodeType":"1816","messageId":"1817","endLine":270,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":290,"column":7,"nodeType":"1816","messageId":"1817","endLine":290,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1927","line":310,"column":9,"nodeType":"1812","messageId":"1813","endLine":310,"endColumn":27},{"ruleId":"1810","severity":1,"message":"1928","line":328,"column":9,"nodeType":"1812","messageId":"1813","endLine":328,"endColumn":10},{"ruleId":"1810","severity":1,"message":"2000","line":424,"column":30,"nodeType":"1812","messageId":"1813","endLine":424,"endColumn":42},{"ruleId":"1810","severity":1,"message":"1988","line":3,"column":10,"nodeType":"1812","messageId":"1813","endLine":3,"endColumn":16},{"ruleId":"1842","severity":1,"message":"1894","line":9,"column":1,"nodeType":"1844","messageId":"1845","endLine":9,"endColumn":52},{"ruleId":"1810","severity":1,"message":"1923","line":22,"column":21,"nodeType":"1812","messageId":"1813","endLine":22,"endColumn":25},{"ruleId":"1810","severity":1,"message":"1989","line":28,"column":8,"nodeType":"1812","messageId":"1813","endLine":28,"endColumn":17},{"ruleId":"1842","severity":1,"message":"1876","line":30,"column":1,"nodeType":"1844","messageId":"1845","endLine":30,"endColumn":47},{"ruleId":"1842","severity":1,"message":"1922","line":34,"column":1,"nodeType":"1844","messageId":"1845","endLine":34,"endColumn":69},{"ruleId":"1810","severity":1,"message":"1990","line":39,"column":9,"nodeType":"1812","messageId":"1813","endLine":39,"endColumn":16},{"ruleId":"1810","severity":1,"message":"1991","line":47,"column":44,"nodeType":"1812","messageId":"1813","endLine":47,"endColumn":49},{"ruleId":"1814","severity":1,"message":"1815","line":89,"column":9,"nodeType":"1816","messageId":"1817","endLine":89,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":101,"column":9,"nodeType":"1816","messageId":"1817","endLine":101,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1847","line":211,"column":31,"nodeType":"1812","messageId":"1813","endLine":211,"endColumn":32},{"ruleId":"1842","severity":1,"message":"1863","line":6,"column":1,"nodeType":"1844","messageId":"1845","endLine":6,"endColumn":60},{"ruleId":"1810","severity":1,"message":"1891","line":11,"column":3,"nodeType":"1812","messageId":"1813","endLine":11,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1924","line":14,"column":3,"nodeType":"1812","messageId":"1813","endLine":14,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1893","line":20,"column":8,"nodeType":"1812","messageId":"1813","endLine":20,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1892","line":32,"column":8,"nodeType":"1812","messageId":"1813","endLine":32,"endColumn":27},{"ruleId":"1810","severity":1,"message":"1990","line":54,"column":9,"nodeType":"1812","messageId":"1813","endLine":54,"endColumn":16},{"ruleId":"1810","severity":1,"message":"1992","line":61,"column":11,"nodeType":"1812","messageId":"1813","endLine":61,"endColumn":13},{"ruleId":"1814","severity":1,"message":"1815","line":62,"column":3,"nodeType":"1816","messageId":"1817","endLine":62,"endColumn":14},{"ruleId":"1814","severity":1,"message":"1815","line":92,"column":9,"nodeType":"1816","messageId":"1817","endLine":92,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":110,"column":9,"nodeType":"1816","messageId":"1817","endLine":110,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":175,"column":9,"nodeType":"1816","messageId":"1817","endLine":175,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1905","line":6,"column":8,"nodeType":"1812","messageId":"1813","endLine":6,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1924","line":14,"column":3,"nodeType":"1812","messageId":"1813","endLine":14,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1891","line":16,"column":3,"nodeType":"1812","messageId":"1813","endLine":16,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1993","line":33,"column":3,"nodeType":"1812","messageId":"1813","endLine":33,"endColumn":8},{"ruleId":"1810","severity":1,"message":"1994","line":51,"column":3,"nodeType":"1812","messageId":"1813","endLine":51,"endColumn":32},{"ruleId":"1810","severity":1,"message":"1995","line":59,"column":10,"nodeType":"1812","messageId":"1813","endLine":59,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1992","line":64,"column":11,"nodeType":"1812","messageId":"1813","endLine":64,"endColumn":13},{"ruleId":"1810","severity":1,"message":"1898","line":70,"column":10,"nodeType":"1812","messageId":"1813","endLine":70,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1996","line":97,"column":9,"nodeType":"1812","messageId":"1813","endLine":97,"endColumn":24},{"ruleId":"1810","severity":1,"message":"1997","line":102,"column":9,"nodeType":"1812","messageId":"1813","endLine":102,"endColumn":30},{"ruleId":"1810","severity":1,"message":"1998","line":107,"column":9,"nodeType":"1812","messageId":"1813","endLine":107,"endColumn":30},{"ruleId":"1810","severity":1,"message":"2001","line":137,"column":9,"nodeType":"1812","messageId":"1813","endLine":137,"endColumn":23},{"ruleId":"1814","severity":1,"message":"1815","line":169,"column":9,"nodeType":"1816","messageId":"1817","endLine":169,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":210,"column":5,"nodeType":"1816","messageId":"1817","endLine":210,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":230,"column":7,"nodeType":"1816","messageId":"1817","endLine":230,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1999","line":234,"column":9,"nodeType":"1812","messageId":"1813","endLine":234,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":235,"column":5,"nodeType":"1816","messageId":"1817","endLine":235,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":270,"column":7,"nodeType":"1816","messageId":"1817","endLine":270,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":290,"column":7,"nodeType":"1816","messageId":"1817","endLine":290,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1927","line":310,"column":9,"nodeType":"1812","messageId":"1813","endLine":310,"endColumn":27},{"ruleId":"1810","severity":1,"message":"1928","line":328,"column":9,"nodeType":"1812","messageId":"1813","endLine":328,"endColumn":10},{"ruleId":"1810","severity":1,"message":"2000","line":424,"column":30,"nodeType":"1812","messageId":"1813","endLine":424,"endColumn":42},{"ruleId":"1810","severity":1,"message":"1988","line":3,"column":10,"nodeType":"1812","messageId":"1813","endLine":3,"endColumn":16},{"ruleId":"1842","severity":1,"message":"1894","line":9,"column":1,"nodeType":"1844","messageId":"1845","endLine":9,"endColumn":52},{"ruleId":"1810","severity":1,"message":"1923","line":22,"column":21,"nodeType":"1812","messageId":"1813","endLine":22,"endColumn":25},{"ruleId":"1810","severity":1,"message":"2002","line":22,"column":36,"nodeType":"1812","messageId":"1813","endLine":22,"endColumn":44},{"ruleId":"1810","severity":1,"message":"1989","line":28,"column":8,"nodeType":"1812","messageId":"1813","endLine":28,"endColumn":17},{"ruleId":"1842","severity":1,"message":"1876","line":30,"column":1,"nodeType":"1844","messageId":"1845","endLine":30,"endColumn":47},{"ruleId":"1842","severity":1,"message":"1922","line":34,"column":1,"nodeType":"1844","messageId":"1845","endLine":34,"endColumn":69},{"ruleId":"1810","severity":1,"message":"1990","line":39,"column":9,"nodeType":"1812","messageId":"1813","endLine":39,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":44,"column":3,"nodeType":"1816","messageId":"1817","endLine":44,"endColumn":14},{"ruleId":"1810","severity":1,"message":"1991","line":47,"column":44,"nodeType":"1812","messageId":"1813","endLine":47,"endColumn":49},{"ruleId":"1814","severity":1,"message":"1815","line":89,"column":9,"nodeType":"1816","messageId":"1817","endLine":89,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":101,"column":9,"nodeType":"1816","messageId":"1817","endLine":101,"endColumn":22},{"ruleId":"1810","severity":1,"message":"1905","line":6,"column":8,"nodeType":"1812","messageId":"1813","endLine":6,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1924","line":13,"column":3,"nodeType":"1812","messageId":"1813","endLine":13,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1891","line":15,"column":3,"nodeType":"1812","messageId":"1813","endLine":15,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1993","line":32,"column":3,"nodeType":"1812","messageId":"1813","endLine":32,"endColumn":8},{"ruleId":"1810","severity":1,"message":"1994","line":50,"column":3,"nodeType":"1812","messageId":"1813","endLine":50,"endColumn":32},{"ruleId":"1810","severity":1,"message":"1995","line":58,"column":10,"nodeType":"1812","messageId":"1813","endLine":58,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1992","line":64,"column":11,"nodeType":"1812","messageId":"1813","endLine":64,"endColumn":13},{"ruleId":"1810","severity":1,"message":"1898","line":69,"column":10,"nodeType":"1812","messageId":"1813","endLine":69,"endColumn":18},{"ruleId":"1810","severity":1,"message":"1996","line":97,"column":9,"nodeType":"1812","messageId":"1813","endLine":97,"endColumn":24},{"ruleId":"1810","severity":1,"message":"1997","line":102,"column":9,"nodeType":"1812","messageId":"1813","endLine":102,"endColumn":30},{"ruleId":"1810","severity":1,"message":"1998","line":107,"column":9,"nodeType":"1812","messageId":"1813","endLine":107,"endColumn":30},{"ruleId":"1810","severity":1,"message":"2001","line":137,"column":9,"nodeType":"1812","messageId":"1813","endLine":137,"endColumn":23},{"ruleId":"1814","severity":1,"message":"1815","line":170,"column":9,"nodeType":"1816","messageId":"1817","endLine":170,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":211,"column":5,"nodeType":"1816","messageId":"1817","endLine":211,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":231,"column":7,"nodeType":"1816","messageId":"1817","endLine":231,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1999","line":235,"column":9,"nodeType":"1812","messageId":"1813","endLine":235,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":236,"column":5,"nodeType":"1816","messageId":"1817","endLine":236,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":271,"column":7,"nodeType":"1816","messageId":"1817","endLine":271,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":291,"column":7,"nodeType":"1816","messageId":"1817","endLine":291,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1927","line":311,"column":9,"nodeType":"1812","messageId":"1813","endLine":311,"endColumn":27},{"ruleId":"1810","severity":1,"message":"1928","line":330,"column":9,"nodeType":"1812","messageId":"1813","endLine":330,"endColumn":10},{"ruleId":"1810","severity":1,"message":"2000","line":426,"column":30,"nodeType":"1812","messageId":"1813","endLine":426,"endColumn":42},{"ruleId":"1822","severity":1,"message":"2003","line":14,"column":3,"nodeType":"1824","messageId":"1825","endLine":14,"endColumn":13},{"ruleId":"1822","severity":1,"message":"2004","line":15,"column":3,"nodeType":"1824","messageId":"1825","endLine":15,"endColumn":14},{"ruleId":"1822","severity":1,"message":"2005","line":16,"column":3,"nodeType":"1824","messageId":"1825","endLine":16,"endColumn":13},{"ruleId":"1822","severity":1,"message":"2006","line":17,"column":3,"nodeType":"1824","messageId":"1825","endLine":17,"endColumn":5},{"ruleId":"1822","severity":1,"message":"2007","line":18,"column":3,"nodeType":"1824","messageId":"1825","endLine":18,"endColumn":9},{"ruleId":"1810","severity":1,"message":"2008","line":1,"column":17,"nodeType":"1812","messageId":"1813","endLine":1,"endColumn":25},{"ruleId":"1810","severity":1,"message":"2009","line":1,"column":27,"nodeType":"1812","messageId":"1813","endLine":1,"endColumn":36},{"ruleId":"1810","severity":1,"message":"2010","line":4,"column":10,"nodeType":"1812","messageId":"1813","endLine":4,"endColumn":21},{"ruleId":"1810","severity":1,"message":"1905","line":6,"column":8,"nodeType":"1812","messageId":"1813","endLine":6,"endColumn":18},{"ruleId":"1810","severity":1,"message":"2011","line":8,"column":8,"nodeType":"1812","messageId":"1813","endLine":8,"endColumn":25},{"ruleId":"1810","severity":1,"message":"2012","line":9,"column":33,"nodeType":"1812","messageId":"1813","endLine":9,"endColumn":45},{"ruleId":"1810","severity":1,"message":"2013","line":11,"column":3,"nodeType":"1812","messageId":"1813","endLine":11,"endColumn":11},{"ruleId":"1810","severity":1,"message":"2014","line":12,"column":3,"nodeType":"1812","messageId":"1813","endLine":12,"endColumn":12},{"ruleId":"1810","severity":1,"message":"1924","line":13,"column":3,"nodeType":"1812","messageId":"1813","endLine":13,"endColumn":9},{"ruleId":"1810","severity":1,"message":"2015","line":14,"column":3,"nodeType":"1812","messageId":"1813","endLine":14,"endColumn":11},{"ruleId":"1810","severity":1,"message":"1891","line":15,"column":3,"nodeType":"1812","messageId":"1813","endLine":15,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1921","line":17,"column":3,"nodeType":"1812","messageId":"1813","endLine":17,"endColumn":13},{"ruleId":"1810","severity":1,"message":"2016","line":21,"column":10,"nodeType":"1812","messageId":"1813","endLine":21,"endColumn":20},{"ruleId":"1810","severity":1,"message":"2017","line":22,"column":10,"nodeType":"1812","messageId":"1813","endLine":22,"endColumn":31},{"ruleId":"1810","severity":1,"message":"2018","line":22,"column":33,"nodeType":"1812","messageId":"1813","endLine":22,"endColumn":48},{"ruleId":"1810","severity":1,"message":"2019","line":23,"column":10,"nodeType":"1812","messageId":"1813","endLine":23,"endColumn":19},{"ruleId":"1810","severity":1,"message":"2020","line":24,"column":10,"nodeType":"1812","messageId":"1813","endLine":24,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1971","line":25,"column":10,"nodeType":"1812","messageId":"1813","endLine":25,"endColumn":28},{"ruleId":"1810","severity":1,"message":"2021","line":27,"column":3,"nodeType":"1812","messageId":"1813","endLine":27,"endColumn":19},{"ruleId":"1810","severity":1,"message":"2022","line":28,"column":3,"nodeType":"1812","messageId":"1813","endLine":28,"endColumn":13},{"ruleId":"1810","severity":1,"message":"2023","line":29,"column":3,"nodeType":"1812","messageId":"1813","endLine":29,"endColumn":12},{"ruleId":"1810","severity":1,"message":"2024","line":30,"column":3,"nodeType":"1812","messageId":"1813","endLine":30,"endColumn":13},{"ruleId":"1810","severity":1,"message":"2025","line":31,"column":3,"nodeType":"1812","messageId":"1813","endLine":31,"endColumn":19},{"ruleId":"1810","severity":1,"message":"2026","line":34,"column":8,"nodeType":"1812","messageId":"1813","endLine":34,"endColumn":21},{"ruleId":"1810","severity":1,"message":"2027","line":35,"column":10,"nodeType":"1812","messageId":"1813","endLine":35,"endColumn":27},{"ruleId":"1810","severity":1,"message":"2028","line":36,"column":10,"nodeType":"1812","messageId":"1813","endLine":36,"endColumn":23},{"ruleId":"1810","severity":1,"message":"1988","line":36,"column":25,"nodeType":"1812","messageId":"1813","endLine":36,"endColumn":31},{"ruleId":"1810","severity":1,"message":"2029","line":36,"column":33,"nodeType":"1812","messageId":"1813","endLine":36,"endColumn":43},{"ruleId":"1810","severity":1,"message":"2030","line":39,"column":3,"nodeType":"1812","messageId":"1813","endLine":39,"endColumn":21},{"ruleId":"1810","severity":1,"message":"2031","line":40,"column":3,"nodeType":"1812","messageId":"1813","endLine":40,"endColumn":30},{"ruleId":"1810","severity":1,"message":"2032","line":44,"column":3,"nodeType":"1812","messageId":"1813","endLine":44,"endColumn":20},{"ruleId":"1810","severity":1,"message":"2033","line":46,"column":3,"nodeType":"1812","messageId":"1813","endLine":46,"endColumn":17},{"ruleId":"1810","severity":1,"message":"2034","line":48,"column":24,"nodeType":"1812","messageId":"1813","endLine":48,"endColumn":30},{"ruleId":"1810","severity":1,"message":"2035","line":51,"column":3,"nodeType":"1812","messageId":"1813","endLine":51,"endColumn":29},{"ruleId":"1810","severity":1,"message":"2036","line":52,"column":3,"nodeType":"1812","messageId":"1813","endLine":52,"endColumn":33},{"ruleId":"1810","severity":1,"message":"2037","line":54,"column":8,"nodeType":"1812","messageId":"1813","endLine":54,"endColumn":14},{"ruleId":"1810","severity":1,"message":"2038","line":55,"column":10,"nodeType":"1812","messageId":"1813","endLine":55,"endColumn":18},{"ruleId":"1810","severity":1,"message":"2039","line":56,"column":8,"nodeType":"1812","messageId":"1813","endLine":56,"endColumn":19},{"ruleId":"1810","severity":1,"message":"2040","line":57,"column":10,"nodeType":"1812","messageId":"1813","endLine":57,"endColumn":19},{"ruleId":"1810","severity":1,"message":"1995","line":58,"column":10,"nodeType":"1812","messageId":"1813","endLine":58,"endColumn":20},{"ruleId":"1822","severity":1,"message":"2041","line":60,"column":23,"nodeType":"1824","messageId":"1825","endLine":60,"endColumn":27},{"ruleId":"1822","severity":1,"message":"2004","line":60,"column":29,"nodeType":"1824","messageId":"1825","endLine":60,"endColumn":40},{"ruleId":"1810","severity":1,"message":"2042","line":60,"column":42,"nodeType":"1812","messageId":"1813","endLine":60,"endColumn":50},{"ruleId":"1822","severity":1,"message":"2043","line":60,"column":42,"nodeType":"1824","messageId":"1825","endLine":60,"endColumn":50},{"ruleId":"1810","severity":1,"message":"2044","line":60,"column":52,"nodeType":"1812","messageId":"1813","endLine":60,"endColumn":65},{"ruleId":"1822","severity":1,"message":"2045","line":60,"column":52,"nodeType":"1824","messageId":"1825","endLine":60,"endColumn":65},{"ruleId":"1822","severity":1,"message":"2006","line":60,"column":67,"nodeType":"1824","messageId":"1825","endLine":60,"endColumn":69},{"ruleId":"1810","severity":1,"message":"1964","line":62,"column":9,"nodeType":"1812","messageId":"1813","endLine":62,"endColumn":17},{"ruleId":"1810","severity":1,"message":"2046","line":63,"column":17,"nodeType":"1812","messageId":"1813","endLine":63,"endColumn":19},{"ruleId":"1810","severity":1,"message":"2047","line":63,"column":30,"nodeType":"1812","messageId":"1813","endLine":63,"endColumn":34},{"ruleId":"1810","severity":1,"message":"2048","line":126,"column":11,"nodeType":"1812","messageId":"1813","endLine":126,"endColumn":26},{"ruleId":"1814","severity":1,"message":"1815","line":130,"column":5,"nodeType":"1816","messageId":"1817","endLine":130,"endColumn":16},{"ruleId":"1814","severity":1,"message":"1815","line":161,"column":7,"nodeType":"1816","messageId":"1817","endLine":161,"endColumn":18},{"ruleId":"1814","severity":1,"message":"1815","line":181,"column":11,"nodeType":"1816","messageId":"1817","endLine":181,"endColumn":22},{"ruleId":"1842","severity":1,"message":"1863","line":6,"column":1,"nodeType":"1844","messageId":"1845","endLine":6,"endColumn":60},{"ruleId":"1810","severity":1,"message":"1891","line":11,"column":3,"nodeType":"1812","messageId":"1813","endLine":11,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1924","line":14,"column":3,"nodeType":"1812","messageId":"1813","endLine":14,"endColumn":9},{"ruleId":"1810","severity":1,"message":"1893","line":20,"column":8,"nodeType":"1812","messageId":"1813","endLine":20,"endColumn":20},{"ruleId":"1810","severity":1,"message":"1892","line":32,"column":8,"nodeType":"1812","messageId":"1813","endLine":32,"endColumn":27},{"ruleId":"1810","severity":1,"message":"1990","line":54,"column":9,"nodeType":"1812","messageId":"1813","endLine":54,"endColumn":16},{"ruleId":"1810","severity":1,"message":"1992","line":61,"column":11,"nodeType":"1812","messageId":"1813","endLine":61,"endColumn":13},{"ruleId":"1814","severity":1,"message":"1815","line":91,"column":9,"nodeType":"1816","messageId":"1817","endLine":91,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":109,"column":9,"nodeType":"1816","messageId":"1817","endLine":109,"endColumn":22},{"ruleId":"1814","severity":1,"message":"1815","line":174,"column":9,"nodeType":"1816","messageId":"1817","endLine":174,"endColumn":22},"jest/no-try-expect",["2049"],"no-unused-vars","'Providers' is defined but never used.","Identifier","unusedVar","no-console","Unexpected console statement.","MemberExpression","unexpected","'dirty' is defined but never used.","'isValid' is defined but never used.","'setFieldValue' is defined but never used.","'setValues' is defined but never used.","react/prop-types","'PlansQuery' is missing in props validation","Property","missingPropType","'PlansQuery.fetchPlans' is missing in props validation","'PlansQuery.loading' is missing in props validation","'PlansQuery.data' is missing in props validation","'PlansQuery.refetch' is missing in props validation","'PlansQuery.variables' is missing in props validation","'PlansQuery.newVariables' is missing in props validation","'PlansQuery.data.getPlans' is missing in props validation","'PlansQuery.data.getPlans.plan' is missing in props validation","'PlansQuery.data.getPlans.pageInfo' is missing in props validation","'data' is defined but never used.","'showHeala' is missing in props validation","'theme' is defined but never used.","'trucateString' is defined but never used.","'theme' is assigned a value but never used.","'email' is assigned a value but never used.","'labelId' is assigned a value but never used.","no-duplicate-imports","'@mui/styles' import is duplicated.","ImportDeclaration","import","'disabled' is missing in props validation","'e' is defined but never used.","'startDate' is missing in props validation","'endDate' is missing in props validation","'plan' is missing in props validation","'isItemSelected' is missing in props validation","'handleSelectedRows' is missing in props validation","'selectedRows' is missing in props validation","'setSelectedRows' is missing in props validation","'labelId' is missing in props validation","'handleDeleteOpenDialog' is missing in props validation","'handleEditOpenDialog' is missing in props validation","'deleting' is missing in props validation","'plan._id' is missing in props validation","'plan.name' is missing in props validation","'plan.duration' is missing in props validation","'plan.description' is missing in props validation","'@apollo/client' import is duplicated.","'onCancel' is defined but never used.","'rest' is defined but never used.","'fontSize' is defined but never used.","'width' is defined but never used.","'placeholderWidth' is defined but never used.","'field' is defined but never used.","'lightRed' is assigned a value but never used.","'context' is defined but never used.","'type' is defined but never used.","'padding' is defined but never used.","'progres' is defined but never used.","'index' is defined but never used.","'react-router-dom' import is duplicated.","'drawerWidth' is assigned a value but never used.","'setConsultationState' is assigned a value but never used.","'setGraphState' is assigned a value but never used.","'subScriptionState' is assigned a value but never used.","'setSubScriptionState' is assigned a value but never used.","'setPartnerGraphState' is assigned a value but never used.","'color' is assigned a value but never used.","'components/graphQL/useQuery' import is duplicated.","'profileAcc' is assigned a value but never used.","'breadcrumbs' is missing in props validation","'breadcrumbs.length' is missing in props validation","'breadcrumbs[].pageTitle' is missing in props validation","'breadcrumbs[].pageIndex' is missing in props validation","'breadcrumbs.map' is missing in props validation","'Button' is defined but never used.","'ArrowForwardIosIcon' is defined but never used.","'displayPhoto' is defined but never used.","'components/layouts' import is duplicated.","'useQuery' is defined but never used.","'getProviders' is defined but never used.","'form' is assigned a value but never used.","'dropDown' is assigned a value but never used.","'setDropDown' is assigned a value but never used.","'onChange' is assigned a value but never used.","'fetchAvailabilities1' is assigned a value but never used.","'data1' is assigned a value but never used.","'AddIcon' is defined but never used.","'EditIcon' is defined but never used.","'DeleteIcon' is defined but never used.","'helpers/mockData' import is duplicated.","'handleDeleteOpenDialog' is assigned a value but never used.","'rowsPerPage' is assigned a value but never used.","'page' is assigned a value but never used.","'alert' is assigned a value but never used.","'handleDialogOpens1' is assigned a value but never used.","'values' is defined but never used.","'provider' is assigned a value but never used.","'props' is defined but never used.","'classes' is assigned a value but never used.","'components/graphQL/Mutation' import is duplicated.","'errMsg' is defined but never used.","'CalendarIcon' is defined but never used.","'Alert' is defined but never used.","'fetchMoreData' is defined but never used.","'Typography' is defined but never used.","'@mui/material' import is duplicated.","'Link' is defined but never used.","'Avatar' is defined but never used.","'components/Utilities/Time' import is duplicated.","'components/Utilities' import is duplicated.","'handleGenerateLink' is assigned a value but never used.","'z' is assigned a value but never used.","'isSubmitting' is defined but never used.","'PartnersIcon' is defined but never used.","'HMOIcon' is defined but never used.","'MessagesIcon' is defined but never used.","'EmailIcon' is defined but never used.","'ReferralDiv' is assigned a value but never used.","'SubscriptionDiv' is assigned a value but never used.","'SubscriptionDelete' is assigned a value but never used.","'Div2' is assigned a value but never used.","'Div' is assigned a value but never used.",["2049"],"'onConfirm' is defined but never used.","'btnValue' is defined but never used.","'initialValues' is missing in props validation","'setEditData' is missing in props validation","'isDeleting' is missing in props validation","'setEnrolleeIdToDelete' is missing in props validation","'openEditModal' is missing in props validation","'openConfirmModal' is missing in props validation","'type' is missing in props validation","'setHmoEnrollees' is missing in props validation","'setPageInfo' is missing in props validation","'queryParams' is missing in props validation","'queryParams.variables' is missing in props validation","'queryParams.fetchEnrollees' is missing in props validation","'queryParams.refetch' is missing in props validation","'FormikControl' is defined but never used.","'Formik' is defined but never used.","'Form' is defined but never used.","'addDoctorValidationSchema' is defined but never used.","'Modals' is defined but never used.","'helpers/filterHelperFunctions' import is duplicated.","'getPartners' is defined but never used.","'regenerate' is assigned a value but never used.","'daa' is assigned a value but never used.","'onSubmit' is assigned a value but never used.","quotes","Strings must use doublequote.","TemplateLiteral","wrongQuotes",{"range":"2050","text":"2051"},{"range":"2052","text":"2053"},"'handleSelectedRows' is defined but never used.","'setSelectedRows' is assigned a value but never used.","'error' is defined but never used.","'dociId' is assigned a value but never used.","'firstName' is assigned a value but never used.","'lastName' is assigned a value but never used.","'plan' is assigned a value but never used.","'consultations' is assigned a value but never used.","'status' is assigned a value but never used.","'isItemSelected' is assigned a value but never used.","'isFirstDayOfMonth' is defined but never used.",{"range":"2054","text":"2051"},{"range":"2055","text":"2053"},"'Copy' is defined but never used.","'trucateProfileLink' is defined but never used.","'patientConsultation' is assigned a value but never used.","'profileUrl' is assigned a value but never used.","'NoData' is defined but never used.","'PropTypes' is defined but never used.","'history' is assigned a value but never used.","'error' is assigned a value but never used.","'id' is assigned a value but never used.","'banks' is defined but never used.","'addNewPartnerValidationSchema' is defined but never used.","'EditDelBtn' is defined but never used.","'categoryOptions' is assigned a value but never used.","'classificationOptions' is assigned a value but never used.","'specializationOptions' is assigned a value but never used.","'onSubmit1' is assigned a value but never used.","'logoImageUrl' is assigned a value but never used.","'initialValues1' is assigned a value but never used.","'Redirect' is defined but never used.","'openAddHcp' is missing in props validation","'handleClose' is missing in props validation","'buttonType' is missing in props validation","'id' is missing in props validation","'pushTo' is missing in props validation","'useState' is defined but never used.","'useEffect' is defined but never used.","'useSelector' is defined but never used.","'PersonAddAlt1Icon' is defined but never used.","'useLazyQuery' is defined but never used.","'Checkbox' is defined but never used.","'TableCell' is defined but never used.","'TableRow' is defined but never used.","'isSelected' is defined but never used.","'categoryFilterOptions' is defined but never used.","'defaultPageInfo' is defined but never used.","'useStyles' is defined but never used.","'useActions' is defined but never used.","'changeTableLimit' is defined but never used.","'deleteItem' is defined but never used.","'deleteVar' is defined but never used.","'filterData' is defined but never used.","'handlePageChange' is defined but never used.","'DeletePartner' is defined but never used.","'partnersHeadCells' is defined but never used.","'EnhancedTable' is defined but never used.","'EmptyTable' is defined but never used.","'addPartnerCategory' is defined but never used.","'regeneratePartnerProfileUrl' is defined but never used.","'getSingleProvider' is defined but never used.","'DELETE_PARTNER' is defined but never used.","'Loader' is defined but never used.","'addPartnerValidationSchema' is defined but never used.","'filterPartnersValidationSchema' is defined but never used.","'Filter' is defined but never used.","'PageInfo' is defined but never used.","'TableLayout' is defined but never used.","'useParams' is defined but never used.","'open' is missing in props validation","'category' is defined but never used.","'category' is missing in props validation","'CategoryValue' is defined but never used.","'CategoryValue' is missing in props validation","'da' is assigned a value but never used.","'load' is assigned a value but never used.","'enqueueSnackbar' is assigned a value but never used.","no-conditional-expect",[5977,5988],"\"/patients\"",[6472,6479],"\"/hcps\"",[3887,3898],[4342,4349]]