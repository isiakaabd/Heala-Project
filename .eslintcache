[{"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\index.js":"1","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\App.js":"2","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\accessToken.js":"3","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\index.js":"4","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\muiTheme.js":"5","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\hooks\\useActions.js":"6","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\graphQL\\Mutation.js":"7","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\routes\\Routes.js":"8","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\index.js":"9","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\index.js":"10","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\index.js":"11","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\store.js":"12","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\CardItem.js":"13","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\DashboardChart.js":"14","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\EmptyTable.js":"15","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HmoPlans.js":"16","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Hospitals.js":"17","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SubscriptionPlans.js":"18","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SingleHMO.js":"19","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SubscriptionIncome.js":"20","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaPlans.js":"21","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-creators\\index.js":"22","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\EnhancedTableToolbar.js":"23","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\EnhancedTableHeader.js":"24","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\reducers\\index.js":"25","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Time.js":"26","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\TableLayout.js":"27","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\CreateEditHMOPlans.js":"28","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\UploadEnrolleeListForm.js":"29","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\AddEditHMOEnrolleeModal.js":"30","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\filterHelperFunctions.js":"31","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\MainModal.js":"32","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\isSelected.js":"33","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\selectedRows.js":"34","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\CreateEditHealaPlans.js":"35","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\ConfirmModal.js":"36","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Tables\\SingleHMOTable.js":"37","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Tables\\HMOPlansTable.js":"38","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Tables\\HospitalsTable.js":"39","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\mockData.js":"40","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Tables\\HealaPlansTable.js":"41","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\CreateEditPlans.js":"42","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\graphQL\\useQuery.js":"43","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\tableHeaders.js":"44","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\hooks\\useAlert.js":"45","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\cards\\InfoCard.js":"46","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Select.js":"47","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-creators\\hcp.js":"48","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-creators\\patient.js":"49","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\reducers\\hcpReducer.js":"50","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\reducers\\patientReducer.js":"51","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\graphQL\\fragment.js":"52","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-creators\\auth.js":"53","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-creators\\tablesActions.js":"54","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\validationSchemas.js":"55","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\func.js":"56","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\EnhancedTable.js":"57","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\CompoundSearch.js":"58","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\EnrolleeProfileModal.js":"59","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Checkboxs.js":"60","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\PlanListRow.js":"61","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\hmoPageStyles.js":"62","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\HMOPlanRow.js":"63","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\HospitalRow.js":"64","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\TextError.js":"65","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\index.js":"66","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\ChervonDownIcon.js":"67","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Buttons\\CloseBtn.js":"68","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\index.js":"69","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-types\\index.js":"70","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Calendar.js":"71","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\FormikControl.js":"72","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Input.js":"73","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\ReferPatient.js":"74","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\IllnessModal.js":"75","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\ProviderModal.js":"76","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\PermissionModal.js":"77","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\RoleModal.js":"78","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\Filter.js":"79","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\DeleteOrDisable.js":"80","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\MessageAddIcon.js":"81","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\VerifiedIcon.js":"82","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\Filters\\index.js":"83","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\Calender2.js":"84","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Buttons\\EditDelBtn.js":"85","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\ProfileInfo.js":"86","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\hospitalPageStyles.js":"87","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\CallIcon.js":"88","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\SmsIcon.js":"89","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\DateTimePicker.js":"90","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\File.js":"91","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Textarea.js":"92","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Date.js":"93","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\CustomButton.js":"94","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\deleteIcon.js":"95","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\EditIcon.js":"96","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Typography.js":"97","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Loader.js":"98","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\DragAndDrop.js":"99","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\reducers\\authReducer.js":"100","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\reducers\\tablesReducer.js":"101","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\Filters\\SingleHMOFilters.js":"102","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\SingleHMORow.js":"103","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\AddEditHMOEnrolleeForm.js":"104","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\StatusPill.js":"105","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\WaitingListTable.js":"106","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\Notifications.js":"107","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\HeaderProfile.js":"108","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\Header.js":"109","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\EnhancedTableAction.js":"110","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\HeaderContents.js":"111","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Backdrop.js":"112","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\AvailabilityTable.js":"113","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\CircularProgress.js":"114","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\SearchInput.js":"115","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Search.js":"116","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\PreviousButton.js":"117","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Modal.js":"118","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\LineChart.js":"119","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\LinearProgress.js":"120","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\SideMenu.js":"121","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\FormSelect.js":"122","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\FormInput.js":"123","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\NoData.js":"124","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\FilterList.js":"125","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\DisplayProfile.js":"126","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\ProfileCard.js":"127","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\DataGrid.js":"128","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\CircularChart.js":"129","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\CheckBox.js":"130","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Card.js":"131","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Button.js":"132","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\AvailabilityCard.js":"133","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HMOPartners.js":"134","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaFilterPartnerPage.js":"135","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HMOUsers.js":"136","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HospitalUsers.js":"137","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HMODoctorPage.js":"138","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealerPartner.js":"139","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaFilterDoctorPage.js":"140","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaFilterPage.js":"141","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HMOEnrolle.js":"142","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HospitalPage.js":"143","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Healas.js":"144","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\PartnersProvider.js":"145","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\DoctorProvider.js":"146","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Hospital.js":"147","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Hm.js":"148","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Heala.js":"149","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\WhiteLabel.js":"150","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\WaitingListDetails.js":"151","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\WaitingList.js":"152","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ViewReferral.js":"153","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\PatientProvider.js":"154","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\UserTypes.js":"155","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Illness.js":"156","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\VideoCall.js":"157","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\DoctorPayout.js":"158","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SinglePatient.js":"159","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SingleHCP.js":"160","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Settings.js":"161","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Prescriptions.js":"162","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Providers.js":"163","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ReferralTab.js":"164","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Permission.js":"165","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\PendingPayout.js":"166","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ViewMessage.js":"167","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\PatientProfile.js":"168","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ViewHCP.js":"169","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\DoctorEarning.js":"170","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\PatientAppointment.js":"171","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Subscription.js":"172","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Partners.js":"173","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Chat.js":"174","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Patients.js":"175","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Messages.js":"176","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\MedicalRecords.js":"177","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Management.js":"178","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Login.js":"179","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Medications.js":"180","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Hcps.js":"181","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpProfile.js":"182","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpPatients.js":"183","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpEarnings.js":"184","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\doctorsPageStyles.js":"185","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\SearchIcon.js":"186","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\LogoutIcon.js":"187","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\asideMenus.js":"188","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\breadcrumb.js":"189","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\Filters\\DoctorsFilters.js":"190","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\partnersPageStyles.js":"191","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Copy.js":"192","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\AddProviderModal.js":"193","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\Filters\\PatientFilters.js":"194","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\Success.js":"195","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\PatientsRow.js":"196","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\LoginInput.js":"197","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\bMI.js":"198","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpConsultations.js":"199","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Payout.js":"200","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HCPChat.js":"201","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HCP.js":"202","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaDoctor.js":"203","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpAvailability.js":"204","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpAppointments.js":"205","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaPage.js":"206","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Financetable.js":"207","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpCaseNote.js":"208","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\loginPageStyles.js":"209","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Finance.js":"210","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Email.js":"211","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\patientsPageStyles.js":"212","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\DataHeader.js":"213","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\DoctorVerificationProfile.js":"214","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Tables\\PlansTable.js":"215","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\hooks\\useCopy.js":"216","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\EditManagement.js":"217","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ViewDoctorVerification.js":"218","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Dashboard.js":"219","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\CreateMessage.js":"220","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Consultations.js":"221","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Appointments.js":"222","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\UserTypeModal.js":"223","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\CaseNotes.js":"224","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Administrator.js":"225","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\AddPartner.js":"226","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\BellIcon.js":"227","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\tableData.js":"228","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\SubscriptionIcon.js":"229","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\DashboardIcon.js":"230","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\RefferalsIcon.js":"231","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\SettingsIcon.js":"232","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\PartnersIcon.js":"233","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\PatientsIcon.js":"234","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\docVerificationPageStyles.js":"235","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\FinanceIcon.js":"236","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\DoctorsIcon.js":"237","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\LabelIcon.js":"238","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\HMOIcon.js":"239","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ListManagment.js":"240","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\TestList.js":"241","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\routes\\PrivateRoute.js":"242","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Hmo.js":"243","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\UploadListModal.js":"244","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\AddTestForm.js":"245","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\EditTestForm.js":"246","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\TestListRow.js":"247","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\cards\\SettingsCard.js":"248","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\AddEditHMOModal.js":"249","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\UploadListForm.js":"250","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\AddEditHMOForm.js":"251","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SingleHMO1.js":"252"},{"size":2464,"mtime":1661939671111,"results":"253","hashOfConfig":"254"},{"size":5063,"mtime":1663316940687,"results":"255","hashOfConfig":"254"},{"size":165,"mtime":1661626921825,"results":"256","hashOfConfig":"254"},{"size":38,"mtime":1661626922169,"results":"257","hashOfConfig":"254"},{"size":4442,"mtime":1663316940772,"results":"258","hashOfConfig":"254"},{"size":580,"mtime":1661939670997,"results":"259","hashOfConfig":"254"},{"size":20526,"mtime":1663327771168,"results":"260","hashOfConfig":"254"},{"size":11658,"mtime":1663316940819,"results":"261","hashOfConfig":"254"},{"size":4128,"mtime":1662701657714,"results":"262","hashOfConfig":"254"},{"size":1160,"mtime":1661839137159,"results":"263","hashOfConfig":"254"},{"size":845,"mtime":1661768516851,"results":"264","hashOfConfig":"254"},{"size":308,"mtime":1661939671113,"results":"265","hashOfConfig":"254"},{"size":4248,"mtime":1663316940746,"results":"266","hashOfConfig":"254"},{"size":17892,"mtime":1663316940749,"results":"267","hashOfConfig":"254"},{"size":1982,"mtime":1661626922035,"results":"268","hashOfConfig":"254"},{"size":2564,"mtime":1663316940797,"results":"269","hashOfConfig":"254"},{"size":447,"mtime":1661626922099,"results":"270","hashOfConfig":"254"},{"size":1878,"mtime":1661626922125,"results":"271","hashOfConfig":"254"},{"size":6356,"mtime":1662698973600,"results":"272","hashOfConfig":"254"},{"size":8512,"mtime":1662198260077,"results":"273","hashOfConfig":"254"},{"size":2597,"mtime":1663316940795,"results":"274","hashOfConfig":"254"},{"size":260,"mtime":1661626922165,"results":"275","hashOfConfig":"254"},{"size":1821,"mtime":1661939671011,"results":"276","hashOfConfig":"254"},{"size":2481,"mtime":1661626922038,"results":"277","hashOfConfig":"254"},{"size":385,"mtime":1661626922172,"results":"278","hashOfConfig":"254"},{"size":4470,"mtime":1662489892303,"results":"279","hashOfConfig":"254"},{"size":972,"mtime":1661626922047,"results":"280","hashOfConfig":"254"},{"size":6079,"mtime":1663316940698,"results":"281","hashOfConfig":"254"},{"size":3223,"mtime":1663316940703,"results":"282","hashOfConfig":"254"},{"size":2995,"mtime":1663316940759,"results":"283","hashOfConfig":"254"},{"size":11124,"mtime":1663325884848,"results":"284","hashOfConfig":"254"},{"size":2592,"mtime":1663316940767,"results":"285","hashOfConfig":"254"},{"size":82,"mtime":1661626922156,"results":"286","hashOfConfig":"254"},{"size":682,"mtime":1661939671106,"results":"287","hashOfConfig":"254"},{"size":8190,"mtime":1663219780280,"results":"288","hashOfConfig":"254"},{"size":4166,"mtime":1661939671022,"results":"289","hashOfConfig":"254"},{"size":9265,"mtime":1663316940723,"results":"290","hashOfConfig":"254"},{"size":8149,"mtime":1663316940716,"results":"291","hashOfConfig":"254"},{"size":3727,"mtime":1663316940718,"results":"292","hashOfConfig":"254"},{"size":8399,"mtime":1663316940829,"results":"293","hashOfConfig":"254"},{"size":8357,"mtime":1663219780290,"results":"294","hashOfConfig":"254"},{"size":4303,"mtime":1663316940701,"results":"295","hashOfConfig":"254"},{"size":34346,"mtime":1663318570670,"results":"296","hashOfConfig":"254"},{"size":9119,"mtime":1663316940737,"results":"297","hashOfConfig":"254"},{"size":2613,"mtime":1661939671109,"results":"298","hashOfConfig":"254"},{"size":5475,"mtime":1661626922019,"results":"299","hashOfConfig":"254"},{"size":6565,"mtime":1663316940822,"results":"300","hashOfConfig":"254"},{"size":211,"mtime":1661626922164,"results":"301","hashOfConfig":"254"},{"size":204,"mtime":1662292846529,"results":"302","hashOfConfig":"254"},{"size":394,"mtime":1661626922171,"results":"303","hashOfConfig":"254"},{"size":419,"mtime":1662294396536,"results":"304","hashOfConfig":"254"},{"size":263,"mtime":1661626922024,"results":"305","hashOfConfig":"254"},{"size":897,"mtime":1661626922164,"results":"306","hashOfConfig":"254"},{"size":557,"mtime":1661626922167,"results":"307","hashOfConfig":"254"},{"size":7105,"mtime":1663316940831,"results":"308","hashOfConfig":"254"},{"size":3020,"mtime":1663316940828,"results":"309","hashOfConfig":"254"},{"size":5335,"mtime":1661939671007,"results":"310","hashOfConfig":"254"},{"size":3243,"mtime":1663316940696,"results":"311","hashOfConfig":"254"},{"size":8173,"mtime":1663316940763,"results":"312","hashOfConfig":"254"},{"size":2152,"mtime":1663219780336,"results":"313","hashOfConfig":"254"},{"size":5589,"mtime":1661626921975,"results":"314","hashOfConfig":"254"},{"size":820,"mtime":1662198260097,"results":"315","hashOfConfig":"254"},{"size":5752,"mtime":1663316940706,"results":"316","hashOfConfig":"254"},{"size":1995,"mtime":1663316940708,"results":"317","hashOfConfig":"254"},{"size":447,"mtime":1661626922011,"results":"318","hashOfConfig":"254"},{"size":260,"mtime":1661626922150,"results":"319","hashOfConfig":"254"},{"size":505,"mtime":1661939670954,"results":"320","hashOfConfig":"254"},{"size":1287,"mtime":1661939670930,"results":"321","hashOfConfig":"254"},{"size":409,"mtime":1661626922065,"results":"322","hashOfConfig":"254"},{"size":737,"mtime":1662291233055,"results":"323","hashOfConfig":"254"},{"size":1155,"mtime":1661626922140,"results":"324","hashOfConfig":"254"},{"size":935,"mtime":1661626922146,"results":"325","hashOfConfig":"254"},{"size":1068,"mtime":1661626922147,"results":"326","hashOfConfig":"254"},{"size":4305,"mtime":1661939671029,"results":"327","hashOfConfig":"254"},{"size":3809,"mtime":1663316940765,"results":"328","hashOfConfig":"254"},{"size":5994,"mtime":1661939671027,"results":"329","hashOfConfig":"254"},{"size":4776,"mtime":1661939671025,"results":"330","hashOfConfig":"254"},{"size":3320,"mtime":1661939671031,"results":"331","hashOfConfig":"254"},{"size":4128,"mtime":1661626922054,"results":"332","hashOfConfig":"254"},{"size":4618,"mtime":1661939671023,"results":"333","hashOfConfig":"254"},{"size":1016,"mtime":1661939670956,"results":"334","hashOfConfig":"254"},{"size":1481,"mtime":1662198259931,"results":"335","hashOfConfig":"254"},{"size":1211,"mtime":1663063366232,"results":"336","hashOfConfig":"254"},{"size":1747,"mtime":1661939670951,"results":"337","hashOfConfig":"254"},{"size":2486,"mtime":1661626921935,"results":"338","hashOfConfig":"254"},{"size":847,"mtime":1663316940735,"results":"339","hashOfConfig":"254"},{"size":811,"mtime":1661626922180,"results":"340","hashOfConfig":"254"},{"size":2047,"mtime":1661939670953,"results":"341","hashOfConfig":"254"},{"size":900,"mtime":1661939670961,"results":"342","hashOfConfig":"254"},{"size":1993,"mtime":1661626922143,"results":"343","hashOfConfig":"254"},{"size":4885,"mtime":1661626922145,"results":"344","hashOfConfig":"254"},{"size":2506,"mtime":1662067242204,"results":"345","hashOfConfig":"254"},{"size":2364,"mtime":1661626922142,"results":"346","hashOfConfig":"254"},{"size":3813,"mtime":1661626921993,"results":"347","hashOfConfig":"254"},{"size":2134,"mtime":1661626921972,"results":"348","hashOfConfig":"254"},{"size":1606,"mtime":1661626921960,"results":"349","hashOfConfig":"254"},{"size":240,"mtime":1661626921984,"results":"350","hashOfConfig":"254"},{"size":506,"mtime":1661939670983,"results":"351","hashOfConfig":"254"},{"size":5065,"mtime":1661939670939,"results":"352","hashOfConfig":"254"},{"size":2201,"mtime":1661626922170,"results":"353","hashOfConfig":"254"},{"size":806,"mtime":1661626922174,"results":"354","hashOfConfig":"254"},{"size":3796,"mtime":1661939670945,"results":"355","hashOfConfig":"254"},{"size":6378,"mtime":1663316940713,"results":"356","hashOfConfig":"254"},{"size":7448,"mtime":1663316940691,"results":"357","hashOfConfig":"254"},{"size":1177,"mtime":1661626922010,"results":"358","hashOfConfig":"254"},{"size":5232,"mtime":1661939671020,"results":"359","hashOfConfig":"254"},{"size":3091,"mtime":1661939671018,"results":"360","hashOfConfig":"254"},{"size":4972,"mtime":1662929122881,"results":"361","hashOfConfig":"254"},{"size":1734,"mtime":1661626922041,"results":"362","hashOfConfig":"254"},{"size":2398,"mtime":1661939671009,"results":"363","hashOfConfig":"254"},{"size":12016,"mtime":1663316940751,"results":"364","hashOfConfig":"254"},{"size":553,"mtime":1661626921986,"results":"365","hashOfConfig":"254"},{"size":16166,"mtime":1663316940743,"results":"366","hashOfConfig":"254"},{"size":1598,"mtime":1661839193809,"results":"367","hashOfConfig":"254"},{"size":1979,"mtime":1661626922009,"results":"368","hashOfConfig":"254"},{"size":2971,"mtime":1661626922008,"results":"369","hashOfConfig":"254"},{"size":760,"mtime":1661626922004,"results":"370","hashOfConfig":"254"},{"size":2461,"mtime":1663316940730,"results":"371","hashOfConfig":"254"},{"size":7679,"mtime":1662216032548,"results":"372","hashOfConfig":"254"},{"size":1099,"mtime":1661939670981,"results":"373","hashOfConfig":"254"},{"size":5929,"mtime":1663316940756,"results":"374","hashOfConfig":"254"},{"size":1321,"mtime":1661939670979,"results":"375","hashOfConfig":"254"},{"size":970,"mtime":1661626921998,"results":"376","hashOfConfig":"254"},{"size":1008,"mtime":1663316940753,"results":"377","hashOfConfig":"254"},{"size":1484,"mtime":1661626921997,"results":"378","hashOfConfig":"254"},{"size":4209,"mtime":1663316940727,"results":"379","hashOfConfig":"254"},{"size":2064,"mtime":1663316940732,"results":"380","hashOfConfig":"254"},{"size":4017,"mtime":1661939670974,"results":"381","hashOfConfig":"254"},{"size":3423,"mtime":1661839132049,"results":"382","hashOfConfig":"254"},{"size":2411,"mtime":1661939670972,"results":"383","hashOfConfig":"254"},{"size":1188,"mtime":1662198259942,"results":"384","hashOfConfig":"254"},{"size":1343,"mtime":1661626921987,"results":"385","hashOfConfig":"254"},{"size":2530,"mtime":1661939670970,"results":"386","hashOfConfig":"254"},{"size":22848,"mtime":1663062783922,"results":"387","hashOfConfig":"254"},{"size":29130,"mtime":1662647730865,"results":"388","hashOfConfig":"254"},{"size":12715,"mtime":1662558734361,"results":"389","hashOfConfig":"254"},{"size":12653,"mtime":1662551740064,"results":"390","hashOfConfig":"254"},{"size":19897,"mtime":1662562598025,"results":"391","hashOfConfig":"254"},{"size":29153,"mtime":1662716942587,"results":"392","hashOfConfig":"254"},{"size":19913,"mtime":1662549452938,"results":"393","hashOfConfig":"254"},{"size":12637,"mtime":1662713624108,"results":"394","hashOfConfig":"254"},{"size":9603,"mtime":1663324670733,"results":"395","hashOfConfig":"254"},{"size":12066,"mtime":1663328743238,"results":"396","hashOfConfig":"254"},{"size":7434,"mtime":1662475551007,"results":"397","hashOfConfig":"254"},{"size":26763,"mtime":1662151873312,"results":"398","hashOfConfig":"254"},{"size":18560,"mtime":1662112421842,"results":"399","hashOfConfig":"254"},{"size":6751,"mtime":1662118852157,"results":"400","hashOfConfig":"254"},{"size":5599,"mtime":1662119225815,"results":"401","hashOfConfig":"254"},{"size":9518,"mtime":1663322306251,"results":"402","hashOfConfig":"254"},{"size":2010,"mtime":1661626922136,"results":"403","hashOfConfig":"254"},{"size":4703,"mtime":1661939671093,"results":"404","hashOfConfig":"254"},{"size":760,"mtime":1661626922134,"results":"405","hashOfConfig":"254"},{"size":7955,"mtime":1661939671091,"results":"406","hashOfConfig":"254"},{"size":11087,"mtime":1662293272551,"results":"407","hashOfConfig":"254"},{"size":16819,"mtime":1663316940814,"results":"408","hashOfConfig":"254"},{"size":9359,"mtime":1662198260012,"results":"409","hashOfConfig":"254"},{"size":4517,"mtime":1661939671085,"results":"410","hashOfConfig":"254"},{"size":11194,"mtime":1662198259976,"results":"411","hashOfConfig":"254"},{"size":7621,"mtime":1661626922122,"results":"412","hashOfConfig":"254"},{"size":7216,"mtime":1662906476001,"results":"413","hashOfConfig":"254"},{"size":3328,"mtime":1661626922119,"results":"414","hashOfConfig":"254"},{"size":8478,"mtime":1661939671081,"results":"415","hashOfConfig":"254"},{"size":14961,"mtime":1662198260058,"results":"416","hashOfConfig":"254"},{"size":10169,"mtime":1662198260068,"results":"417","hashOfConfig":"254"},{"size":16504,"mtime":1661626922114,"results":"418","hashOfConfig":"254"},{"size":7791,"mtime":1661939671079,"results":"419","hashOfConfig":"254"},{"size":3172,"mtime":1661939671089,"results":"420","hashOfConfig":"254"},{"size":6334,"mtime":1663316940809,"results":"421","hashOfConfig":"254"},{"size":24927,"mtime":1663316940816,"results":"422","hashOfConfig":"254"},{"size":8935,"mtime":1663219780315,"results":"423","hashOfConfig":"254"},{"size":20252,"mtime":1661626922109,"results":"424","hashOfConfig":"254"},{"size":2580,"mtime":1663219780327,"results":"425","hashOfConfig":"254"},{"size":28699,"mtime":1663316940806,"results":"426","hashOfConfig":"254"},{"size":8124,"mtime":1661939671040,"results":"427","hashOfConfig":"254"},{"size":6171,"mtime":1663219780325,"results":"428","hashOfConfig":"254"},{"size":10132,"mtime":1661626922107,"results":"429","hashOfConfig":"254"},{"size":4429,"mtime":1661939671067,"results":"430","hashOfConfig":"254"},{"size":12460,"mtime":1663316940803,"results":"431","hashOfConfig":"254"},{"size":11070,"mtime":1661939671065,"results":"432","hashOfConfig":"254"},{"size":6744,"mtime":1661939671069,"results":"433","hashOfConfig":"254"},{"size":17828,"mtime":1663316940788,"results":"434","hashOfConfig":"254"},{"size":4495,"mtime":1661939671058,"results":"435","hashOfConfig":"254"},{"size":6880,"mtime":1662198259995,"results":"436","hashOfConfig":"254"},{"size":10107,"mtime":1661939671056,"results":"437","hashOfConfig":"254"},{"size":1916,"mtime":1662549866022,"results":"438","hashOfConfig":"254"},{"size":2072,"mtime":1661939670960,"results":"439","hashOfConfig":"254"},{"size":931,"mtime":1662198259902,"results":"440","hashOfConfig":"254"},{"size":2937,"mtime":1663219780342,"results":"441","hashOfConfig":"254"},{"size":4459,"mtime":1663316940825,"results":"442","hashOfConfig":"254"},{"size":7762,"mtime":1661939670941,"results":"443","hashOfConfig":"254"},{"size":3053,"mtime":1662198260099,"results":"444","hashOfConfig":"254"},{"size":618,"mtime":1663219780277,"results":"445","hashOfConfig":"254"},{"size":3687,"mtime":1663328122714,"results":"446","hashOfConfig":"254"},{"size":8513,"mtime":1661939670943,"results":"447","hashOfConfig":"254"},{"size":2053,"mtime":1661939671034,"results":"448","hashOfConfig":"254"},{"size":3359,"mtime":1663316940711,"results":"449","hashOfConfig":"254"},{"size":2557,"mtime":1661939671097,"results":"450","hashOfConfig":"254"},{"size":163,"mtime":1661626922014,"results":"451","hashOfConfig":"254"},{"size":9622,"mtime":1662198259991,"results":"452","hashOfConfig":"254"},{"size":11239,"mtime":1662198260046,"results":"453","hashOfConfig":"254"},{"size":7782,"mtime":1661939671054,"results":"454","hashOfConfig":"254"},{"size":12684,"mtime":1663166119039,"results":"455","hashOfConfig":"254"},{"size":19863,"mtime":1662701762069,"results":"456","hashOfConfig":"254"},{"size":13698,"mtime":1663316940783,"results":"457","hashOfConfig":"254"},{"size":12646,"mtime":1661626922087,"results":"458","hashOfConfig":"254"},{"size":10838,"mtime":1663327871585,"results":"459","hashOfConfig":"254"},{"size":8641,"mtime":1662198259983,"results":"460","hashOfConfig":"254"},{"size":23603,"mtime":1663316940786,"results":"461","hashOfConfig":"254"},{"size":1875,"mtime":1661719814162,"results":"462","hashOfConfig":"254"},{"size":10558,"mtime":1662198259980,"results":"463","hashOfConfig":"254"},{"size":8727,"mtime":1661626922081,"results":"464","hashOfConfig":"254"},{"size":2021,"mtime":1662198260102,"results":"465","hashOfConfig":"254"},{"size":19807,"mtime":1661939670976,"results":"466","hashOfConfig":"254"},{"size":7678,"mtime":1661939671048,"results":"467","hashOfConfig":"254"},{"size":8327,"mtime":1663316940721,"results":"468","hashOfConfig":"254"},{"size":1451,"mtime":1661939670999,"results":"469","hashOfConfig":"254"},{"size":11800,"mtime":1661939671051,"results":"470","hashOfConfig":"254"},{"size":27260,"mtime":1661626922130,"results":"471","hashOfConfig":"254"},{"size":2288,"mtime":1663316940778,"results":"472","hashOfConfig":"254"},{"size":8818,"mtime":1661939671041,"results":"473","hashOfConfig":"254"},{"size":8664,"mtime":1662198259968,"results":"474","hashOfConfig":"254"},{"size":2398,"mtime":1661939671038,"results":"475","hashOfConfig":"254"},{"size":4594,"mtime":1661626922064,"results":"476","hashOfConfig":"254"},{"size":23156,"mtime":1663316940776,"results":"477","hashOfConfig":"254"},{"size":13286,"mtime":1662198259965,"results":"478","hashOfConfig":"254"},{"size":10442,"mtime":1662703714471,"results":"479","hashOfConfig":"254"},{"size":906,"mtime":1661939670949,"results":"480","hashOfConfig":"254"},{"size":8433,"mtime":1661939670991,"results":"481","hashOfConfig":"254"},{"size":1169,"mtime":1662198259927,"results":"482","hashOfConfig":"254"},{"size":1392,"mtime":1662198259857,"results":"483","hashOfConfig":"254"},{"size":1439,"mtime":1662198259916,"results":"484","hashOfConfig":"254"},{"size":1705,"mtime":1662198259920,"results":"485","hashOfConfig":"254"},{"size":2245,"mtime":1662198259908,"results":"486","hashOfConfig":"254"},{"size":1496,"mtime":1662198259914,"results":"487","hashOfConfig":"254"},{"size":1373,"mtime":1662198260090,"results":"488","hashOfConfig":"254"},{"size":2025,"mtime":1662198259875,"results":"489","hashOfConfig":"254"},{"size":1177,"mtime":1662198259872,"results":"490","hashOfConfig":"254"},{"size":973,"mtime":1662198259898,"results":"491","hashOfConfig":"254"},{"size":716,"mtime":1662198259891,"results":"492","hashOfConfig":"254"},{"size":1492,"mtime":1661939671063,"results":"493","hashOfConfig":"254"},{"size":8858,"mtime":1661626922126,"results":"494","hashOfConfig":"254"},{"size":894,"mtime":1661626922138,"results":"495","hashOfConfig":"254"},{"size":5168,"mtime":1663219780322,"results":"496","hashOfConfig":"254"},{"size":2826,"mtime":1663316940769,"results":"497","hashOfConfig":"254"},{"size":3504,"mtime":1661939670937,"results":"498","hashOfConfig":"254"},{"size":4751,"mtime":1661626921944,"results":"499","hashOfConfig":"254"},{"size":1970,"mtime":1662198259939,"results":"500","hashOfConfig":"254"},{"size":1677,"mtime":1661939670993,"results":"501","hashOfConfig":"254"},{"size":2888,"mtime":1663316940761,"results":"502","hashOfConfig":"254"},{"size":2254,"mtime":1661626921952,"results":"503","hashOfConfig":"254"},{"size":5581,"mtime":1661626921939,"results":"504","hashOfConfig":"254"},{"size":6574,"mtime":1663316940810,"results":"505","hashOfConfig":"254"},{"filePath":"506","messages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},"a6xpel",{"filePath":"509","messages":"510","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"511","messages":"512","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"513","messages":"514","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"515","messages":"516","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"517","messages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"521","messages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"523","messages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"525","messages":"526","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"527","messages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"529","messages":"530","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"531","messages":"532","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"533","messages":"534","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"535","messages":"536","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"537","messages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"539","messages":"540","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"541","messages":"542","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"545","usedDeprecatedRules":"508"},{"filePath":"546","messages":"547","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"548","usedDeprecatedRules":"508"},{"filePath":"549","messages":"550","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"551","messages":"552","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"553","messages":"554","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"557","messages":"558","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"559","messages":"560","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"561","messages":"562","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"563","messages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"565","messages":"566","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"567","messages":"568","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"569","messages":"570","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"571","messages":"572","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"573","messages":"574","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"575","messages":"576","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"577","messages":"578","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"579","messages":"580","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"581","usedDeprecatedRules":"508"},{"filePath":"582","messages":"583","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"584","messages":"585","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"586","messages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"588","messages":"589","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"590","messages":"591","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"592","messages":"593","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"594","messages":"595","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"596","messages":"597","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"598","messages":"599","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"600","usedDeprecatedRules":"508"},{"filePath":"601","messages":"602","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"603","messages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"605","messages":"606","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"607","messages":"608","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"609","messages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"611","messages":"612","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"613","messages":"614","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"617","messages":"618","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"619","messages":"620","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"621","messages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"623","messages":"624","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"625","usedDeprecatedRules":"508"},{"filePath":"626","messages":"627","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"628","messages":"629","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"630","messages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"632","usedDeprecatedRules":"508"},{"filePath":"633","messages":"634","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"635","usedDeprecatedRules":"508"},{"filePath":"636","messages":"637","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"638","messages":"639","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"640","messages":"641","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"642","messages":"643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"644","messages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"646","messages":"647","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"648","messages":"649","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"650","messages":"651","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"652","messages":"653","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"654","messages":"655","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"656","messages":"657","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"658","messages":"659","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"660","messages":"661","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"662","messages":"663","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"664","messages":"665","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"666","usedDeprecatedRules":"508"},{"filePath":"667","messages":"668","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"669","usedDeprecatedRules":"508"},{"filePath":"670","messages":"671","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"672","messages":"673","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"674","usedDeprecatedRules":"508"},{"filePath":"675","messages":"676","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"677","usedDeprecatedRules":"508"},{"filePath":"678","messages":"679","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"680","messages":"681","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"682","messages":"683","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"684","messages":"685","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"686","messages":"687","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"688","messages":"689","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"690","messages":"691","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"692","usedDeprecatedRules":"508"},{"filePath":"693","messages":"694","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"695","messages":"696","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"697","messages":"698","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"699","usedDeprecatedRules":"508"},{"filePath":"700","messages":"701","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"702","usedDeprecatedRules":"508"},{"filePath":"703","messages":"704","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"705","messages":"706","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"707","usedDeprecatedRules":"508"},{"filePath":"708","messages":"709","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"710","usedDeprecatedRules":"508"},{"filePath":"711","messages":"712","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"713","messages":"714","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"715","messages":"716","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"717","messages":"718","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"719","messages":"720","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"721","usedDeprecatedRules":"508"},{"filePath":"722","messages":"723","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"724","messages":"725","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"726","messages":"727","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"728","usedDeprecatedRules":"508"},{"filePath":"729","messages":"730","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"731","messages":"732","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"733","messages":"734","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"735","usedDeprecatedRules":"508"},{"filePath":"736","messages":"737","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"738","messages":"739","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"740","messages":"741","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"742","messages":"743","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"744","messages":"745","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"746","messages":"747","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"748","messages":"749","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"750","messages":"751","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"752","messages":"753","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"754","messages":"755","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"756","usedDeprecatedRules":"508"},{"filePath":"757","messages":"758","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"759","usedDeprecatedRules":"508"},{"filePath":"760","messages":"761","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"762","usedDeprecatedRules":"508"},{"filePath":"763","messages":"764","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"765","messages":"766","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"767","usedDeprecatedRules":"508"},{"filePath":"768","messages":"769","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"770","usedDeprecatedRules":"508"},{"filePath":"771","messages":"772","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"773","messages":"774","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"775","usedDeprecatedRules":"508"},{"filePath":"776","messages":"777","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"778","messages":"779","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"780","messages":"781","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"782","messages":"783","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"784","messages":"785","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"786","messages":"787","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"788","messages":"789","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"790","messages":"791","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"792","messages":"793","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"794","usedDeprecatedRules":"508"},{"filePath":"795","messages":"796","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"797","usedDeprecatedRules":"508"},{"filePath":"798","messages":"799","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"800","usedDeprecatedRules":"508"},{"filePath":"801","messages":"802","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"803","usedDeprecatedRules":"508"},{"filePath":"804","messages":"805","errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"806","usedDeprecatedRules":"508"},{"filePath":"807","messages":"808","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"809","usedDeprecatedRules":"508"},{"filePath":"810","messages":"811","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"812","usedDeprecatedRules":"508"},{"filePath":"813","messages":"814","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"815","usedDeprecatedRules":"508"},{"filePath":"816","messages":"817","errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"818","usedDeprecatedRules":"508"},{"filePath":"819","messages":"820","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"821","usedDeprecatedRules":"508"},{"filePath":"822","messages":"823","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"824","usedDeprecatedRules":"508"},{"filePath":"825","messages":"826","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"827","messages":"828","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"829","messages":"830","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":2,"source":"831","usedDeprecatedRules":"508"},{"filePath":"832","messages":"833","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"834","usedDeprecatedRules":"508"},{"filePath":"835","messages":"836","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"837","usedDeprecatedRules":"508"},{"filePath":"838","messages":"839","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"840","usedDeprecatedRules":"508"},{"filePath":"841","messages":"842","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"843","usedDeprecatedRules":"508"},{"filePath":"844","messages":"845","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":2,"source":null},{"filePath":"846","messages":"847","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"848","usedDeprecatedRules":"508"},{"filePath":"849","messages":"850","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"851","messages":"852","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"853","usedDeprecatedRules":"508"},{"filePath":"854","messages":"855","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"856","messages":"857","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"858","usedDeprecatedRules":"508"},{"filePath":"859","messages":"860","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"861","messages":"862","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"863","messages":"864","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"865","messages":"866","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"867","messages":"868","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"869","usedDeprecatedRules":"508"},{"filePath":"870","messages":"871","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"872","usedDeprecatedRules":"508"},{"filePath":"873","messages":"874","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"875","messages":"876","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"877","messages":"878","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"879","usedDeprecatedRules":"508"},{"filePath":"880","messages":"881","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"882","usedDeprecatedRules":"508"},{"filePath":"883","messages":"884","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"885","usedDeprecatedRules":"508"},{"filePath":"886","messages":"887","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"888","messages":"889","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"890","messages":"891","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"892","messages":"893","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"894","messages":"895","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"896","usedDeprecatedRules":"508"},{"filePath":"897","messages":"898","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"899","usedDeprecatedRules":"508"},{"filePath":"900","messages":"901","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"902","messages":"903","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"904","messages":"905","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"906","usedDeprecatedRules":"508"},{"filePath":"907","messages":"908","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"909","usedDeprecatedRules":"508"},{"filePath":"910","messages":"911","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"912","usedDeprecatedRules":"508"},{"filePath":"913","messages":"914","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"915","usedDeprecatedRules":"508"},{"filePath":"916","messages":"917","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"918","messages":"919","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"920","messages":"921","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"922","usedDeprecatedRules":"508"},{"filePath":"923","messages":"924","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"925","messages":"926","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"927","messages":"928","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"929","usedDeprecatedRules":"508"},{"filePath":"930","messages":"931","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"932","usedDeprecatedRules":"508"},{"filePath":"933","messages":"934","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"935","messages":"936","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"937","messages":"938","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"939","messages":"940","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"941","usedDeprecatedRules":"508"},{"filePath":"942","messages":"943","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"944","messages":"945","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"946","usedDeprecatedRules":"508"},{"filePath":"947","messages":"948","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"949","messages":"950","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"951","messages":"952","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"953","messages":"954","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"955","usedDeprecatedRules":"508"},{"filePath":"956","messages":"957","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"958","usedDeprecatedRules":"508"},{"filePath":"959","messages":"960","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"961","messages":"962","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"963","messages":"964","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"965","messages":"966","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"967","usedDeprecatedRules":"508"},{"filePath":"968","messages":"969","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"970","usedDeprecatedRules":"508"},{"filePath":"971","messages":"972","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"973","usedDeprecatedRules":"508"},{"filePath":"974","messages":"975","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"976","usedDeprecatedRules":"508"},{"filePath":"977","messages":"978","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"979","usedDeprecatedRules":"508"},{"filePath":"980","messages":"981","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"982","messages":"983","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"984","usedDeprecatedRules":"508"},{"filePath":"985","messages":"986","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"987","messages":"988","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"989","usedDeprecatedRules":"508"},{"filePath":"990","messages":"991","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"992","messages":"993","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"994","usedDeprecatedRules":"508"},{"filePath":"995","messages":"996","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"997","usedDeprecatedRules":"508"},{"filePath":"998","messages":"999","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1000","usedDeprecatedRules":"508"},{"filePath":"1001","messages":"1002","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1003","messages":"1004","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1005","usedDeprecatedRules":"508"},{"filePath":"1006","messages":"1007","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1008","messages":"1009","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1010","messages":"1011","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1012","usedDeprecatedRules":"508"},{"filePath":"1013","messages":"1014","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1015","usedDeprecatedRules":"508"},{"filePath":"1016","messages":"1017","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1018","messages":"1019","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"1020","messages":"1021","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1022","usedDeprecatedRules":"508"},{"filePath":"1023","messages":"1024","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1025","usedDeprecatedRules":"508"},{"filePath":"1026","messages":"1027","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1028","messages":"1029","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1030","usedDeprecatedRules":"508"},{"filePath":"1031","messages":"1032","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1033","messages":"1034","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1035","usedDeprecatedRules":"508"},{"filePath":"1036","messages":"1037","errorCount":0,"fatalErrorCount":0,"warningCount":54,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1038","usedDeprecatedRules":"508"},{"filePath":"1039","messages":"1040","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1041","messages":"1042","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1043","messages":"1044","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1045","messages":"1046","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1047","messages":"1048","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1049","messages":"1050","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1051","messages":"1052","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1053","messages":"1054","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1055","messages":"1056","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1057","messages":"1058","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1059","messages":"1060","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1061","messages":"1062","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1063","messages":"1064","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1065","messages":"1066","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1067","messages":"1068","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1069","usedDeprecatedRules":"508"},{"filePath":"1070","messages":"1071","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1072","messages":"1073","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1074","messages":"1075","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1076","messages":"1077","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1078","usedDeprecatedRules":"508"},{"filePath":"1079","messages":"1080","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1081","usedDeprecatedRules":"508"},{"filePath":"1082","messages":"1083","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1084","messages":"1085","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"508"},{"filePath":"1086","messages":"1087","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"1088","messages":"1089","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1090","usedDeprecatedRules":"508"},{"filePath":"1091","messages":"1092","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"1093","usedDeprecatedRules":"508"},{"filePath":"1094","messages":"1095","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\index.js",[],["1096"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\App.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\accessToken.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\muiTheme.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\hooks\\useActions.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\graphQL\\Mutation.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\routes\\Routes.js",["1097"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\store.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\CardItem.js",["1098","1099","1100"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\DashboardChart.js",["1101","1102","1103","1104","1105","1106"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\EmptyTable.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HmoPlans.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Hospitals.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SubscriptionPlans.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SingleHMO.js",["1107","1108","1109"],"import React, { useEffect, useState } from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { useTheme } from \"@mui/styles\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport MainModal from \"components/modals/MainModal\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport ConfirmModal from \"components/modals/ConfirmModal\";\r\nimport { getEnrolles } from \"components/graphQL/useQuery\";\r\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport { uploadFile } from \"helpers/filterHelperFunctions\";\r\nimport SingleHMOTable from \"components/Tables/SingleHMOTable\";\r\nimport { uploadHMOEnrollees } from \"components/graphQL/Mutation\";\r\nimport AddEditHMOEnrolleeModal from \"components/modals/AddEditHMOEnrolleeModal\";\r\nimport { UploadEnrolleeListForm } from \"components/Forms/UploadEnrolleeListForm\";\r\n\r\nconst SingleHMO = () => {\r\n  const theme = useTheme();\r\n  const { ids: id } = useParams();\r\n  const { displayAlert, getErrorMsg } = useAlert();\r\n  const [hmoEnrollees, setHmoEnrollees] = useState([]);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [uploadEnrollees] = useMutation(uploadHMOEnrollees);\r\n  const [uploadListModal, setUploadListModal] = useState(false);\r\n  const [addEnrolleeModal, setAddEnrolleeModal] = useState(false);\r\n  const [confirmUploadModal, setConfirmUploadModal] = useState(false);\r\n  const [\r\n    fetchEnrollees,\r\n    { error, loading, refetch, variables, networkStatus },\r\n  ] = useLazyQuery(getEnrolles);\r\n\r\n  const enrolleesParams = {\r\n    hmoEnrollees,\r\n    setHmoEnrollees,\r\n    pageInfo,\r\n    setPageInfo,\r\n    fetchEnrollees,\r\n    error,\r\n    loading,\r\n    refetch,\r\n    variables,\r\n    networkStatus,\r\n  };\r\n\r\n  const fetchData = (fetch) => {\r\n    fetch({\r\n      variables: {\r\n        providerId: id,\r\n        first: 10,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        setHmoEnrollees(data?.getEnrollees?.data || []);\r\n        setPageInfo(data?.getEnrollees?.pageInfo || {});\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchData(fetchEnrollees);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [fetchEnrollees, id]);\r\n\r\n  const darkButton = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  const lightButton = {\r\n    background: \"#fff\",\r\n\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  return (\r\n    <Grid>\r\n      <Grid\r\n        container\r\n        spacing={3}\r\n        justifyContent=\"end\"\r\n        marginBottom=\"2rem\"\r\n        marginTop=\"2rem\"\r\n      >\r\n        <Grid item>\r\n          <CustomButton\r\n            startIcon={<AddIcon />}\r\n            title=\"Upload List\"\r\n            type={lightButton}\r\n            textColor=\"#2D2F39\"\r\n            textColorOnHover=\"#ffffff\"\r\n            onClick={() => setConfirmUploadModal(true)}\r\n          />\r\n        </Grid>\r\n        <Grid item>\r\n          <CustomButton\r\n            startIcon={<AddIcon />}\r\n            title=\"Add  Enrollee\"\r\n            type={darkButton}\r\n            onClick={() => setAddEnrolleeModal(true)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid>\r\n        <SingleHMOTable enrolleesParams={enrolleesParams} />\r\n      </Grid>\r\n\r\n      {/* MODALS */}\r\n      <Grid>\r\n        {/* ADD ENROLLEE MODAL */}\r\n        <AddEditHMOEnrolleeModal\r\n          isOpen={addEnrolleeModal}\r\n          setIsOpen={setAddEnrolleeModal}\r\n          refetchData={() =>\r\n            refetch({\r\n              variables: {\r\n                providerId: id,\r\n                first: 10,\r\n              },\r\n            })\r\n              .then(({ data }) => {\r\n                setHmoEnrollees(data?.getEnrollees?.data || []);\r\n                setPageInfo(data?.getEnrollees?.pageInfo || {});\r\n              })\r\n              .catch((error) => {\r\n                console.error(error);\r\n              })\r\n          }\r\n        />\r\n\r\n        {/* ======== CONFIRM UPLOAD ENROLLEE MODAL ========= */}\r\n        <ConfirmModal\r\n          open={confirmUploadModal}\r\n          setOpen={setConfirmUploadModal}\r\n          title=\"Confirm Upload Enrollee list\"\r\n          confirmationMsg=\"Uploading a new Enrollee JSON file will overwrite the current file.\"\r\n          onConfirm={() => {\r\n            setConfirmUploadModal(false);\r\n            setUploadListModal(true);\r\n          }}\r\n          onCancel={() => {\r\n            setConfirmUploadModal(false);\r\n          }}\r\n        />\r\n\r\n        {/* UPLOAD LIST MODAL */}\r\n        <MainModal isOpen={uploadListModal} setIsOpen={setUploadListModal}>\r\n          <UploadEnrolleeListForm\r\n            onSubmit={async (values) => {\r\n              const throwError = () =>\r\n                displayAlert(\r\n                  \"error\",\r\n                  \"Something went wrong while uploading file.\"\r\n                );\r\n              try {\r\n                const { file } = values;\r\n                const fileUrl = await uploadFile(file);\r\n\r\n                if (typeof fileUrl !== \"string\") {\r\n                  throwError();\r\n                  return;\r\n                }\r\n\r\n                const { data } = await uploadEnrollees({\r\n                  variables: {\r\n                    planId: values?.planId,\r\n                    fileUrl: fileUrl,\r\n                    providerId: id,\r\n                  },\r\n                });\r\n\r\n                if (!data) {\r\n                  throwError();\r\n                  return;\r\n                }\r\n\r\n                const enrolleesAdded =\r\n                  data?.uploadEnrollees?.result?.totalInserted;\r\n\r\n                displayAlert(\r\n                  \"success\",\r\n                  `${enrolleesAdded && enrolleesAdded} Tests Added.`\r\n                );\r\n                fetchData(refetch);\r\n                setUploadListModal(false);\r\n              } catch (error) {\r\n                console.error(\"Error from onSubmit Test JSON file\", error);\r\n                const errMsg = getErrorMsg(error);\r\n                displayAlert(\"error\", errMsg);\r\n              }\r\n            }}\r\n          />\r\n        </MainModal>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SingleHMO;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SubscriptionIncome.js",["1110","1111","1112","1113"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  TableCell,\r\n  TableRow,\r\n  Checkbox,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport TrendingDownIcon from \"@mui/icons-material/TrendingDown\";\r\nimport {\r\n  timeMoment,\r\n  dateMoment,\r\n  formatNumber,\r\n} from \"components/Utilities/Time\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { financeHeader2 } from \"components/Utilities/tableHeaders\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getSubscriptionsIncome } from \"components/graphQL/useQuery\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    \"&.css-1zf5oc-MuiButtonBase-root-MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"10rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n  iconWrapper: {\r\n    width: 20,\r\n    height: 20,\r\n    borderRadius: \"50%\",\r\n    display: \"grid\",\r\n    placeContent: \"center\",\r\n    background: theme.palette.common.lightGreen,\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      color: \"rgb(0 0 0)\",\r\n      fontWeight: 400,\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.css-1eelh6y-MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst SubscriptionIncome = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [subIncome, setSubIncome] = useState([]);\r\n  const [fetchSubIncome, { loading, data, error }] = useLazyQuery(\r\n    getSubscriptionsIncome\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetchSubIncome({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchSubIncome, pageInfo]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setSubIncome(data.getEarningStats.subscriptionIncomeData.data);\r\n      setPageInfo(data.getEarningStats.subscriptionIncomeData.PageInfo);\r\n    }\r\n  }, [setSubIncome, data]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      gap={2}\r\n      height=\"100%\"\r\n      sx={{ margin: \"3rem 0rem\" }}\r\n    >\r\n      <>\r\n        {/* <Grid item container gap={1} alignItems=\"center\">\r\n          <Grid item flex={1}>\r\n            <Typography noWrap variant=\"h1\" component=\"div\" color=\"#2D2F39\">\r\n              Subscription Earnings table\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item className={classes.iconWrapper}>\r\n            <TrendingDownIcon color=\"success\" className={classes.cardIcon} />\r\n          </Grid>\r\n        </Grid> */}\r\n        <TableLayout>\r\n          {subIncome.length > 0 ? (\r\n            <Grid item container>\r\n              <EnhancedTable\r\n                headCells={financeHeader2}\r\n                rows={subIncome}\r\n                paginationLabel=\"finance per page\"\r\n                hasCheckbox={true}\r\n                changeLimit={async (e) => {\r\n                  await changeTableLimit(fetchSubIncome, { first: e });\r\n                }}\r\n                dataPageInfo={pageInfo}\r\n                handlePagination={async (page) => {\r\n                  await handlePageChange(fetchSubIncome, page, pageInfo, {});\r\n                }}\r\n              >\r\n                {subIncome.map((row, index) => {\r\n                  const { createdAt, amount, patientData, providerId, planId } =\r\n                    row;\r\n                  const { firstName, lastName } = patientData || {};\r\n                  const isItemSelected = isSelected(row._id, selectedRows);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row._id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              row.id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.red }}\r\n                      >\r\n                        {formatNumber(amount.toFixed(2))}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        {patientData && patientData !== {} ? (\r\n                          <div\r\n                            style={{\r\n                              height: \"100%\",\r\n                              display: \"flex\",\r\n                              alignItems: \"center\",\r\n                            }}\r\n                          >\r\n                            <span style={{ fontSize: \"1.25rem\" }}>\r\n                              {patientData &&\r\n                                `${firstName && firstName} ${\r\n                                  lastName && lastName\r\n                                }`}\r\n                            </span>\r\n                          </div>\r\n                        ) : (\r\n                          \"No name\"\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.red }}\r\n                      >\r\n                        {planId}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.red }}\r\n                      >\r\n                        {providerId}\r\n                      </TableCell>\r\n\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.black }}\r\n                      >\r\n                        {`${dateMoment(createdAt)} - ${timeMoment(createdAt)}`}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={financeHeader2}\r\n              paginationLabel=\"Finance  per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SubscriptionIncome;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaPlans.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-creators\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\EnhancedTableToolbar.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\EnhancedTableHeader.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\reducers\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Time.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\TableLayout.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\CreateEditHMOPlans.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\UploadEnrolleeListForm.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\AddEditHMOEnrolleeModal.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\filterHelperFunctions.js",["1114","1115","1116","1117","1118","1119","1120","1121","1122","1123","1124","1125","1126"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\MainModal.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\isSelected.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\selectedRows.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\CreateEditHealaPlans.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\ConfirmModal.js",["1127","1128","1129","1130"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid, Modal, Fade, Typography, Box, Backdrop } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { BsExclamationCircle } from \"react-icons/bs\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  closeIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      cursor: \"pointer\",\r\n\r\n      \"&:hover\": {\r\n        color: theme.palette.common.danger,\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: \"auto\",\r\n  minWidth: \"40rem\",\r\n  height: \"auto\",\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: 24,\r\n  borderRadius: \"1rem\",\r\n  padding: \"3rem\",\r\n};\r\n\r\nconst ConfirmModal = ({\r\n  open,\r\n  setOpen,\r\n  title,\r\n  confirmationMsg,\r\n  btnValue,\r\n  type,\r\n  onConfirm,\r\n  onCancel,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const rejectBtn = {\r\n    background: theme.palette.disabled.main,\r\n    hover: theme.palette.common.gold,\r\n    active: theme.palette.info.dark,\r\n  };\r\n\r\n  const acceptBtn = {\r\n    background: theme.palette.primary.light,\r\n    hover: theme.palette.success.main,\r\n    active: theme.palette.disabled.main,\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      aria-labelledby=\"transition-modal-title\"\r\n      aria-describedby=\"transition-modal-description\"\r\n      open={open}\r\n      onClose={() => setOpen(false)}\r\n      closeAfterTransition\r\n      BackdropComponent={Backdrop}\r\n      BackdropProps={{\r\n        timeout: 500,\r\n      }}\r\n    >\r\n      <Fade in={open}>\r\n        <Box sx={style}>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n          >\r\n            <Grid item alignSelf=\"flex-end\">\r\n              <CloseIcon\r\n                color=\"primary\"\r\n                fontSize=\"medium\"\r\n                className={classes.closeIcon}\r\n                onClick={() => setOpen(false)}\r\n              />\r\n            </Grid>\r\n            <Grid item style={{ marginBottom: \"3rem\" }}>\r\n              <BsExclamationCircle\r\n                size=\"10rem\"\r\n                color={theme.palette.warning.main}\r\n              />\r\n            </Grid>\r\n            <Grid item style={{ marginBottom: \"2rem\" }}>\r\n              <Typography variant=\"h2\">{title}</Typography>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              style={{ marginBottom: \"2rem\" }}\r\n              sx={{ textAlign: \"center\" }}\r\n            >\r\n              <Typography variant=\"body1\">\r\n                {\"Are you sure you want to continue?\"}\r\n              </Typography>\r\n              <Typography variant=\"body1\">{`${confirmationMsg}`}</Typography>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              container\r\n              justifyContent=\"space-between\"\r\n              gap={3}\r\n              sx={{ justifyContent: \"space-between\" }}\r\n            >\r\n              <Grid item md>\r\n                <CustomButton\r\n                  title=\"Cancel\"\r\n                  type={rejectBtn}\r\n                  width=\"100%\"\r\n                  onClick={() => setOpen(false)}\r\n                />\r\n              </Grid>\r\n              <Grid item md>\r\n                <CustomButton\r\n                  title={\"Confirm\"}\r\n                  type={acceptBtn}\r\n                  width=\"100%\"\r\n                  onClick={() => {\r\n                    setOpen(false);\r\n                    onConfirm();\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Fade>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nConfirmModal.propTypes = {\r\n  open: PropTypes.bool.isRequired,\r\n  setOpen: PropTypes.func.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  confirmationMsg: PropTypes.string.isRequired,\r\n  btnValue: PropTypes.string,\r\n  type: PropTypes.string,\r\n  onConfirm: PropTypes.func,\r\n  onCancel: PropTypes.func,\r\n};\r\n\r\nexport default ConfirmModal;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Tables\\SingleHMOTable.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Tables\\HMOPlansTable.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Tables\\HospitalsTable.js",["1131"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\mockData.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Tables\\HealaPlansTable.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\CreateEditPlans.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\graphQL\\useQuery.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\tableHeaders.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\hooks\\useAlert.js",["1132"],"import { useSnackbar } from \"notistack\";\r\nimport { Typography } from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\nconst useAlert = () => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const showErrorMsg = (errorMsg) => {\r\n    return enqueueSnackbar(\r\n      <Typography style={{ fontSize: \"1.2rem\" }}>{`${errorMsg}`}</Typography>,\r\n      {\r\n        variant: \"error\",\r\n        preventDuplicate: true,\r\n        anchorOrigin: {\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n        autoHideDuration: 10000,\r\n      }\r\n    );\r\n  };\r\n\r\n  const showSuccessMsg = (successMsg) => {\r\n    return enqueueSnackbar(\r\n      <Typography style={{ fontSize: \"1.2rem\" }}>{successMsg}</Typography>,\r\n      {\r\n        variant: \"success\",\r\n        preventDuplicate: true,\r\n        anchorOrigin: {\r\n          horizontal: \"right\",\r\n          vertical: \"top\",\r\n        },\r\n        autoHideDuration: 5000,\r\n      }\r\n    );\r\n  };\r\n\r\n  const getErrorMsg = (error) => {\r\n    try {\r\n      if (error?.graphQLErrors && error?.graphQLErrors?.length > 0) {\r\n        const errMsgs = (error?.graphQLErrors || []).map((err) => err.message);\r\n        return errMsgs || \"Something went wrong. Try again!!!\";\r\n      } else if (error?.networkError) {\r\n        const errMsgs = error?.networkError?.result?.errors?.map(\r\n          (err) => err.message\r\n        );\r\n        return errMsgs || \"Something went wrong. Try again!!!\";\r\n      } else if (error?.message) {\r\n        return error.message;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"error from get error func.\", error);\r\n      return \"Something went wrong. Try again!!!\";\r\n    }\r\n  };\r\n\r\n  const displayAlert = (type, message) => {\r\n    switch (type) {\r\n      case \"success\":\r\n        return showSuccessMsg(message);\r\n\r\n      case \"error\":\r\n        if (typeof message === \"object\") {\r\n          return (message || []).map((msg) => showErrorMsg(msg));\r\n        } else {\r\n          return showErrorMsg(message);\r\n        }\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const watchFunction = (successMsg, errorMsg, promise) =>\r\n    promise\r\n      .then((data) => {\r\n        if (!data) {\r\n          displayAlert(\"error\", \"Something went wrong, try again.\");\r\n          throw Error(\"Something went wrong in watchFunction\");\r\n        }\r\n        displayAlert(\"success\", successMsg);\r\n        return data;\r\n      })\r\n      .catch((error) => {\r\n        const msg = getErrorMsg(error);\r\n        displayAlert(\"error\", msg || errorMsg);\r\n        throw error;\r\n      });\r\n\r\n  return { displayAlert, watchFunction, getErrorMsg };\r\n};\r\nexport default useAlert;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\cards\\InfoCard.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Select.js",["1133"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-creators\\hcp.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-creators\\patient.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\reducers\\hcpReducer.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\reducers\\patientReducer.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\graphQL\\fragment.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-creators\\auth.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-creators\\tablesActions.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\validationSchemas.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\func.js",["1134","1135","1136","1137"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\EnhancedTable.js",["1138"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport LastPageIcon from \"@mui/icons-material/LastPage\";\r\nimport FirstPageIcon from \"@mui/icons-material/FirstPage\";\r\nimport { KeyboardArrowLeft, KeyboardArrowRight } from \"@mui/icons-material\";\r\nimport {\r\n  Box,\r\n  IconButton,\r\n  Table,\r\n  TableBody,\r\n  TableContainer,\r\n  TablePagination,\r\n  Paper,\r\n} from \"@mui/material\";\r\nimport EnhancedTableHeader from \"./EnhancedTableHeader\";\r\nimport { paginationActionTypes } from \"helpers/mockData\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport EnhancedTableToolbar from \"./EnhancedTableToolbar\";\r\n//import { handlePageChange } from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  pagination: {\r\n    \"& .MuiTablePagination-selectLabel\": {\r\n      fontSize: \"1.2rem\",\r\n    },\r\n\r\n    \"& .MuiTablePagination-select\": {\r\n      fontSize: \"1.2rem\",\r\n    },\r\n\r\n    \"& .MuiTablePagination-displayedRows\": {\r\n      fontSize: \"1.2rem\",\r\n    },\r\n  },\r\n\r\n  tableToolbar: {\r\n    \"&.MuiToolbar-root\": {\r\n      background: \"#eee\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst EnhancedTable = ({\r\n  rows,\r\n  children,\r\n  headCells,\r\n  paginationLabel,\r\n  title,\r\n  type,\r\n  hasCheckbox,\r\n  changeLimit,\r\n  dataPageInfo,\r\n  hasPagination = true,\r\n  handlePagination,\r\n}) => {\r\n  const classes = useStyles();\r\n  const { setSelectedRows } = useActions();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n\r\n  const handleSelectAllClick = (event) => {\r\n    if (event.target.checked) {\r\n      const newSelecteds = rows.map((selected) => selected.id);\r\n      setSelectedRows(newSelecteds);\r\n      return;\r\n    }\r\n    setSelectedRows([]);\r\n  };\r\n\r\n  return (\r\n    <Box sx={{ width: \"100%\" }}>\r\n      <Paper sx={{ width: \"100%\", mb: 2 }} elevation={0}>\r\n        <EnhancedTableToolbar numSelected={selectedRows.length} title={title} />\r\n\r\n        <TableContainer>\r\n          <Table sx={{ minWidth: 750 }} aria-labelledby=\"tableTitle\">\r\n            <EnhancedTableHeader\r\n              numSelected={selectedRows.length}\r\n              onSelectAllClick={handleSelectAllClick}\r\n              rowCount={rows.length}\r\n              headCells={headCells}\r\n              hasCheckbox={hasCheckbox}\r\n            />\r\n            <TableBody>{children}</TableBody>\r\n          </Table>\r\n        </TableContainer>\r\n        {hasPagination &&\r\n          (type !== \"editRole\" ? (\r\n            <TablePagination\r\n              rowsPerPageOptions={[5, 10, 15, 25]}\r\n              component=\"div\"\r\n              count={dataPageInfo?.totalDocs || 0}\r\n              rowsPerPage={dataPageInfo?.limit || 5}\r\n              page={dataPageInfo?.page - 1}\r\n              labelRowsPerPage={paginationLabel}\r\n              onPageChange={(e) => e}\r\n              onRowsPerPageChange={(e) => {\r\n                changeLimit(parseInt(e.target.value, 10));\r\n              }}\r\n              className={classes.pagination}\r\n              ActionsComponent={() => (\r\n                <EnhancedTableAction\r\n                  {...{\r\n                    dataPageInfo,\r\n                    handlePagination,\r\n                  }}\r\n                />\r\n              )}\r\n            />\r\n          ) : null)}\r\n      </Paper>\r\n    </Box>\r\n  );\r\n};\r\n\r\nEnhancedTable.propTypes = {\r\n  rows: PropTypes.array,\r\n  children: PropTypes.node,\r\n  headCells: PropTypes.array,\r\n  paginationLabel: PropTypes.string,\r\n  title: PropTypes.string,\r\n  type: PropTypes.string,\r\n  hasCheckbox: PropTypes.bool,\r\n  changeLimit: PropTypes.func,\r\n  dataPageInfo: PropTypes.object,\r\n  hasPagination: PropTypes.bool,\r\n  handlePagination: PropTypes.func,\r\n};\r\n\r\nconst EnhancedTableAction = ({ dataPageInfo, handlePagination }) => {\r\n  const theme = useTheme();\r\n  const { FIRSTPAGE, NEXTPAGE, PREVPAGE, LASTPAGE } = paginationActionTypes;\r\n\r\n  return (\r\n    <Box sx={{ flexShrink: 0, ml: 2.5 }}>\r\n      <IconButton\r\n        onClick={() => handlePagination(FIRSTPAGE)}\r\n        disabled={!dataPageInfo?.hasPrevPage}\r\n        aria-label=\"first page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? <LastPageIcon /> : <FirstPageIcon />}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={() => handlePagination(PREVPAGE)}\r\n        disabled={!dataPageInfo?.hasPrevPage}\r\n        aria-label=\"previous page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? (\r\n          <KeyboardArrowRight />\r\n        ) : (\r\n          <KeyboardArrowLeft />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={() => {\r\n          handlePagination(NEXTPAGE);\r\n        }}\r\n        disabled={!dataPageInfo?.hasNextPage}\r\n        aria-label=\"next page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? (\r\n          <KeyboardArrowLeft />\r\n        ) : (\r\n          <KeyboardArrowRight />\r\n        )}\r\n      </IconButton>\r\n      <IconButton\r\n        onClick={() => handlePagination(LASTPAGE)}\r\n        disabled={!dataPageInfo?.hasNextPage}\r\n        aria-label=\"last page\"\r\n      >\r\n        {theme.direction === \"rtl\" ? <FirstPageIcon /> : <LastPageIcon />}\r\n      </IconButton>\r\n    </Box>\r\n  );\r\n};\r\n\r\nEnhancedTableAction.propTypes = {\r\n  dataPageInfo: PropTypes.object,\r\n  handlePagination: PropTypes.func,\r\n};\r\n\r\nexport default EnhancedTable;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\CompoundSearch.js",["1139"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\EnrolleeProfileModal.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Checkboxs.js",["1140","1141","1142","1143"],"import React, { Children } from \"react\";\r\nimport { ErrorMessage, Field, useField } from \"formik\";\r\nimport {\r\n  Checkbox,\r\n  FormControlLabel,\r\n  FormLabel,\r\n  Grid,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TextError } from \"components/Utilities/TextError\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  input: {\r\n    ...theme.typography.input,\r\n  },\r\n  FormLabel: {\r\n    \"&.MuiFormLabel-root\": {\r\n      ...theme.typography.FormLabel,\r\n    },\r\n  },\r\n  customCheckbox: {\r\n    \"&.MuiButtonBase-root-MuiCheckbox-root\": {\r\n      padding: \"0px 4px 0px 0px\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Form = ({ label, ...props }) => {\r\n  const [field] = useField(props);\r\n  return <FormControlLabel {...field} control={<Checkbox />} label={label} />;\r\n};\r\nForm.propTypes = {\r\n  value: PropTypes.string,\r\n  name: PropTypes.string,\r\n  label: PropTypes.string,\r\n};\r\nconst Checkboxes = (props) => {\r\n  const { name, label, value } = props;\r\n\r\n  return (\r\n    <Grid item>\r\n      <Form type=\"checkbox\" label={label} name={name} value={value} />\r\n    </Grid>\r\n  );\r\n};\r\nexport default Checkboxes;\r\nCheckboxes.propTypes = {\r\n  name: PropTypes.string,\r\n  formlabel: PropTypes.string,\r\n  label: PropTypes.string,\r\n  options: PropTypes.array,\r\n  value: PropTypes.array,\r\n};\r\n\r\nexport const CustomCheckbox = ({\r\n  children,\r\n  label,\r\n  checkboxTitle,\r\n  onChange,\r\n  ...props\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container direction=\"column\">\r\n      <FormLabel component=\"legend\" className={classes.FormLabel}>\r\n        {label}\r\n      </FormLabel>\r\n      <Grid container alignItems=\"center\">\r\n        <Checkbox\r\n          onChange={onChange}\r\n          className={classes.customCheckbox}\r\n          {...props}\r\n        />\r\n        <Typography>{checkboxTitle}</Typography>\r\n      </Grid>\r\n      <Grid>{children}</Grid>\r\n      {/* <ErrorMessage name={name} component={TextError} /> */}\r\n    </Grid>\r\n  );\r\n};\r\nCustomCheckbox.propTypes = {\r\n  children: PropTypes.node,\r\n  label: PropTypes.string,\r\n  checkboxTitle: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\PlanListRow.js",["1144"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useTheme } from \"@mui/styles\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { formatNumber } from \"components/Utilities/Time\";\r\nimport { EditDelBtn } from \"components/Buttons/EditDelBtn\";\r\nimport { Checkbox, TableCell, TableRow } from \"@mui/material\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  FormLabel: {\r\n    \"&.MuiFormLabel-root\": {\r\n      ...theme.typography.FormLabel,\r\n    },\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"15rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n  btn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  closeIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      fontSize: \"2rem \",\r\n      cursor: \"pointer\",\r\n\r\n      \"&:hover\": {\r\n        color: theme.palette.common.red,\r\n      },\r\n    },\r\n  },\r\n  tableBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      height: \"3rem\",\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"2rem\",\r\n      boxShadow: \"none\",\r\n      width: \"12rem\",\r\n\r\n      \"&:hover\": {\r\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.5rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  redBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightRed,\r\n      color: theme.palette.common.red,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.error.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n\r\n  greenBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.success.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n    modal: {\r\n      background: \"red !important\",\r\n      \"& > * \": {\r\n        padding: \"2rem 1rem\",\r\n      },\r\n    },\r\n    \".MuiGrid-root\": {\r\n      background: \"red\",\r\n    },\r\n  },\r\n}));\r\n\r\nexport const PlanListRow = ({\r\n  plan,\r\n  isItemSelected,\r\n  handleSelectedRows,\r\n  selectedRows,\r\n  setSelectedRows,\r\n  labelId,\r\n  handleDeleteOpenDialog,\r\n  handleEditOpenDialog,\r\n  deleting,\r\n}) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { _id, name, amount, duration, description } = plan;\r\n  return (\r\n    <TableRow\r\n      hover\r\n      role=\"checkbox\"\r\n      aria-checked={isItemSelected}\r\n      tabIndex={-1}\r\n      key={_id}\r\n      selected={isItemSelected}\r\n      sx={{ cursor: \"pointer\" }}\r\n      onClick={() => handleEditOpenDialog()}\r\n    >\r\n      <TableCell padding=\"checkbox\">\r\n        <Checkbox\r\n          onClick={() => handleSelectedRows(_id, selectedRows, setSelectedRows)}\r\n          color=\"primary\"\r\n          checked={isItemSelected}\r\n          inputProps={{\r\n            \"aria-labelledby\": labelId,\r\n          }}\r\n        />\r\n      </TableCell>\r\n      <TableCell\r\n        id={labelId}\r\n        scope=\"row\"\r\n        align=\"left\"\r\n        className={classes.tableCell}\r\n        style={{ color: theme.palette.common.black }}\r\n      >\r\n        {name}\r\n      </TableCell>\r\n      <TableCell\r\n        id={labelId}\r\n        scope=\"row\"\r\n        align=\"left\"\r\n        className={classes.tableCell}\r\n        style={{ color: theme.palette.common.red }}\r\n      >\r\n        {formatNumber(amount)}\r\n      </TableCell>\r\n\r\n      <TableCell\r\n        align=\"left\"\r\n        className={classes.tableCell}\r\n        style={{\r\n          color: theme.palette.common.black,\r\n          maxWidth: \"20rem\",\r\n        }}\r\n      >\r\n        {description}\r\n      </TableCell>\r\n      <TableCell\r\n        align=\"left\"\r\n        className={classes.tableCell}\r\n        style={{\r\n          color: theme.palette.common.black,\r\n          maxWidth: \"20rem\",\r\n        }}\r\n      >\r\n        {duration}\r\n      </TableCell>\r\n\r\n      <TableCell align=\"left\" className={classes.tableCell}>\r\n        <div\r\n          style={{\r\n            height: \"100%\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-around\",\r\n          }}\r\n        >\r\n          {deleting ? (\r\n            <Loader />\r\n          ) : (\r\n            <EditDelBtn\r\n              type=\"delete\"\r\n              text=\"Delete plan\"\r\n              onHandleClick={() => handleDeleteOpenDialog()}\r\n            />\r\n          )}\r\n        </div>\r\n      </TableCell>\r\n    </TableRow>\r\n  );\r\n};\r\n\r\nPlanListRow.propTypes = {\r\n  plan: PropTypes.object,\r\n  isItemSelected: PropTypes.bool,\r\n  handleSelectedRows: PropTypes.func,\r\n  selectedRows: PropTypes.array,\r\n  setSelectedRows: PropTypes.func,\r\n  labelId: PropTypes.string,\r\n  handleDeleteOpenDialog: PropTypes.func,\r\n  handleEditOpenDialog: PropTypes.func,\r\n  deleting: PropTypes.bool,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\hmoPageStyles.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\HMOPlanRow.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\HospitalRow.js",["1145","1146","1147","1148"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\TextError.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\ChervonDownIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Buttons\\CloseBtn.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\action-types\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Calendar.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\FormikControl.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Input.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\ReferPatient.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\IllnessModal.js",["1149"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\ProviderModal.js",["1150"],"import React, { useEffect, useState } from \"react\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport * as Yup from \"yup\";\r\nimport { Grid } from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\nimport { addProvider, editprovider } from \"components/graphQL/Mutation\";\r\nimport {\r\n  getProviders,\r\n  getCategory,\r\n  getUserTypes,\r\n} from \"components/graphQL/useQuery\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\nconst ProviderModal = ({\r\n  handleDialogClose,\r\n  type,\r\n  setSingleData,\r\n  initialValues,\r\n  editId,\r\n  singleData,\r\n}) => {\r\n  const theme = useTheme();\r\n  const [createProvider] = useMutation(addProvider);\r\n  const [editProvider] = useMutation(editprovider);\r\n\r\n  const single = useQuery(getCategory, {\r\n    variables: {\r\n      id: editId,\r\n    },\r\n  });\r\n  const [dropDown, setDropDown] = useState([]);\r\n  const userType = useQuery(getUserTypes);\r\n  useEffect(() => {\r\n    if (userType.data) {\r\n      const data = userType.data.getUserTypes.userType;\r\n      setDropDown(\r\n        data &&\r\n          data.map((i) => {\r\n            return { key: i.name, value: i._id, id: i._id };\r\n          })\r\n      );\r\n    }\r\n  }, [userType.data]);\r\n\r\n  useEffect(() => {\r\n    if (single.data) {\r\n      setSingleData({\r\n        name: single.data.getProvider.name,\r\n        type: single.data.getProvider.userTypeId,\r\n        image: single.data.getProvider.icon,\r\n        id: single.data.getProvider._id,\r\n        iconAlt: single.data.getProvider.iconAlt,\r\n      });\r\n    }\r\n  }, [single.data, setSingleData]);\r\n\r\n  const validationSchema = Yup.object({\r\n    name: Yup.string(\"Enter your Name\").trim().required(\"Name is required\"),\r\n    type: Yup.string(\"Select your type\").required(\"Type is required\"),\r\n    image: Yup.string(\"Upload a single Image\").required(\"Image is required\"),\r\n    iconAlt: Yup.string(\"Upload an alternate Image\").required(\r\n      \"Alt. image is required\"\r\n    ),\r\n  });\r\n\r\n  // const checkbox1 = [{ key: \"61ca1a53cebadf0584e38723\", value: \"61ca1a53cebadf0584e38723\" }];\r\n  const onSubmit = async (values, onSubmitProps) => {\r\n    console.log(values);\r\n    if (type === \"add\") {\r\n      const { name, type, image, iconAlt } = values;\r\n      await createProvider({\r\n        variables: {\r\n          name,\r\n          icon: image,\r\n          iconAlt,\r\n          userTypeId: type,\r\n        },\r\n        refetchQueries: [{ query: getProviders }],\r\n      });\r\n    }\r\n    if (type === \"edit\") {\r\n      const { name, type, image, id, iconAlt } = values;\r\n      await editProvider({\r\n        variables: {\r\n          id,\r\n          name,\r\n          icon: image,\r\n          iconAlt,\r\n          userTypeId: type,\r\n        },\r\n        refetchQueries: [{ query: getProviders }],\r\n      });\r\n    }\r\n    onSubmitProps.resetForm();\r\n    handleDialogClose();\r\n  };\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      onSubmit={onSubmit}\r\n      validateOnBlur={false}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n      initialValues={type === \"edit\" ? singleData : initialValues}\r\n      enableReinitialize\r\n    >\r\n      {({ isSubmitting, dirty, isValid, setFieldValue }) => {\r\n        return (\r\n          <Form style={{ marginTop: \"3rem\" }}>\r\n            <Grid item container direction=\"column\" gap={1}>\r\n              <Grid item container rowSpacing={3}>\r\n                <Grid item container>\r\n                  <FormikControl\r\n                    control=\"input\"\r\n                    name=\"name\"\r\n                    label=\"Name of Provider\"\r\n                    placeholder=\"Enter Provider Name\"\r\n                  />\r\n                </Grid>\r\n                <div style={{ display: \"none\" }} name=\"id\" />\r\n                <Grid item container>\r\n                  <FormikControl\r\n                    control=\"select\"\r\n                    options={dropDown}\r\n                    placeholder=\"Select user types\"\r\n                    name=\"type\"\r\n                    label=\"User Types\"\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item container>\r\n                  <Grid item container md>\r\n                    <FormikControl\r\n                      control=\"file\"\r\n                      name=\"image\"\r\n                      label=\"Upload Your Logo\"\r\n                      setFieldValue={setFieldValue}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item container>\r\n                  <Grid item container md>\r\n                    <FormikControl\r\n                      control=\"file\"\r\n                      name=\"iconAlt\"\r\n                      label=\"Upload Alternate Logo\"\r\n                      setFieldValue={setFieldValue}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <CustomButton\r\n                    title={type === \"edit\" ? \"Save Provider\" : \"Add Provider\"}\r\n                    width=\"100%\"\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                    type={buttonType}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\nexport default ProviderModal;\r\nProviderModal.propTypes = {\r\n  handleDialogClose: PropTypes.func,\r\n  setAlert: PropTypes.func,\r\n  editId: PropTypes.string,\r\n  type: PropTypes.string,\r\n  edit: PropTypes.bool,\r\n  initialValues: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  validationSchema: PropTypes.object,\r\n  singleData: PropTypes.object,\r\n  setSingleData: PropTypes.func,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\PermissionModal.js",["1151","1152","1153"],"import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport {\r\n  CREATE_PERMISSION,\r\n  UPDATE_PERMISSION,\r\n} from \"components/graphQL/Mutation\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { getSinglePermissions } from \"components/graphQL/useQuery\";\r\n\r\nconst PermissionModal = ({\r\n  type,\r\n  initialValues,\r\n  validationSchema,\r\n  setAlert,\r\n  handleDialogClose,\r\n  editId,\r\n  setSinglePermission,\r\n  singlePermission,\r\n}) => {\r\n  const theme = useTheme();\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n  const [createPermission] = useMutation(CREATE_PERMISSION);\r\n  const [updatePermission] = useMutation(UPDATE_PERMISSION);\r\n\r\n  const { data } = useQuery(getSinglePermissions, {\r\n    variables: {\r\n      id: editId,\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (data && data.getPermission) {\r\n      setSinglePermission({\r\n        description: data.getPermission.description,\r\n        name: data.getPermission.name,\r\n      });\r\n    }\r\n  }, [data, setSinglePermission]);\r\n\r\n  const onSubmit = async (values, onSubmitProps) => {\r\n    const { description, name } = values;\r\n    if (type === \"add\") {\r\n      try {\r\n        await createPermission({ variables: { description, name } });\r\n\r\n        setAlert({\r\n          message: \"Permission successfully created\",\r\n          type: \"success\",\r\n        });\r\n        setTimeout(() => {\r\n          setAlert(null);\r\n        }, 5000);\r\n      } catch (error) {\r\n        console.log(error);\r\n        setAlert({\r\n          message: \"Permission  not successfully created\",\r\n          type: \"danger\",\r\n        });\r\n        setTimeout(() => {\r\n          setAlert(null);\r\n        }, 5000);\r\n      }\r\n    } else if (type === \"edit\") {\r\n      try {\r\n        await updatePermission({\r\n          variables: { id: editId, description, name },\r\n        });\r\n        setAlert({\r\n          message: \"Permission successfully updated\",\r\n          type: \"success\",\r\n        });\r\n        setTimeout(() => {\r\n          setAlert(null);\r\n        }, 5000);\r\n      } catch (error) {\r\n        console.log(error);\r\n        setAlert({\r\n          message: \"Permission  not successfully updated\",\r\n          type: \"danger\",\r\n        });\r\n        setTimeout(() => {\r\n          setAlert(null);\r\n        }, 5000);\r\n      }\r\n    }\r\n\r\n    handleDialogClose();\r\n\r\n    onSubmitProps.resetForm();\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={type === \"edit\" ? singlePermission : initialValues}\r\n      enableReinitialize\r\n      onSubmit={onSubmit}\r\n      validateOnBlur={false}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n    >\r\n      {({ isSubmitting, dirty, isValid }) => {\r\n        return (\r\n          <Form style={{ marginTop: \"3rem\" }}>\r\n            <Grid item container direction=\"column\" gap={1}>\r\n              <Grid item container rowSpacing={3}>\r\n                <Grid item container>\r\n                  <FormikControl\r\n                    control=\"input\"\r\n                    name=\"name\"\r\n                    label=\"Name of Permission\"\r\n                    placeholder=\"Enter Permission Name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item container>\r\n                  <FormikControl\r\n                    control=\"input\"\r\n                    name=\"description\"\r\n                    label=\"Description\"\r\n                    placeholder=\"Enter Description\"\r\n                  />\r\n                </Grid>\r\n\r\n                <Grid item xs={12} marginTop={10}>\r\n                  <CustomButton\r\n                    title={type === \"edit\" ? \"Save changes\" : \"Add Permission\"}\r\n                    width=\"100%\"\r\n                    type={buttonType}\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\nexport default PermissionModal;\r\nPermissionModal.propTypes = {\r\n  handleDialogClose: PropTypes.func,\r\n  setSinglePermission: PropTypes.func,\r\n  setAlert: PropTypes.func,\r\n  type: PropTypes.string,\r\n  editId: PropTypes.string,\r\n  options: PropTypes.array,\r\n  initialValues: PropTypes.object,\r\n  singlePermission: PropTypes.object,\r\n  validationSchema: PropTypes.object,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\RoleModal.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\Filter.js",["1154"],"import React from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport CustomButton from \"components/Utilities/CustomButton\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\nconst Filter = (props) => {\r\n  const checkbox2 = [\r\n    { key: \"create\", value: \"create\" },\r\n    { key: \"update\", value: \"update\" },\r\n    { key: \"read\", value: \"read\" },\r\n    { key: \"delete\", value: \"delete\" },\r\n  ];\r\n  const checkbox5 = [\r\n    { key: \"create\", value: \"create\" },\r\n    { key: \"update\", value: \"update\" },\r\n    { key: \"read\", value: \"read\" },\r\n    { key: \"delete\", value: \"delete\" },\r\n  ];\r\n  const checkbox4 = [\r\n    { key: \"create\", value: \"create\" },\r\n    { key: \"update\", value: \"update\" },\r\n    { key: \"read\", value: \"read\" },\r\n    { key: \"delete\", value: \"delete\" },\r\n  ];\r\n  const { options, validationSchema, initialValues, type } = props;\r\n\r\n  const theme = useTheme();\r\n  const onSubmit = (values, onSubmitProps) => {\r\n    onSubmitProps.setSubmitting(false);\r\n    console.log(values);\r\n    onSubmitProps.resetForm();\r\n  };\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validateOnBlur={false}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n    >\r\n      {({ isSubmitting, dirty, isValid }) => {\r\n        return (\r\n          <Form style={{ marginTop: \"3rem\" }}>\r\n            <Grid container direction=\"column\" gap={3} marginBottom={4}>\r\n              <Grid item container spacing={2}>\r\n                <Grid item xs={6}>\r\n                  <FormikControl\r\n                    control=\"select\"\r\n                    options={options}\r\n                    name={type === \"hcp\" ? \"Name\" : \"Enter Value\"}\r\n                    placeholder=\"Select Name\"\r\n                    label=\"Name\"\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <FormikControl\r\n                    control=\"select\"\r\n                    options={checkbox2}\r\n                    name={type === \"hcp\" ? \"Date\" : \"Enter Value\"}\r\n                    placeholder=\"Choose Date\"\r\n                    label={type === \"hcp\" ? \"Choose Date\" : \"Enter Value\"}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n\r\n              <Grid item container spacing={2}>\r\n                <Grid item xs={6}>\r\n                  <FormikControl\r\n                    control=\"select\"\r\n                    placeholder=\"Select Status\"\r\n                    name=\"Status\"\r\n                    label={type === \"hcp\" ? \"Select Status\" : \"Enter Value\"}\r\n                    options={checkbox4}\r\n                  />\r\n                </Grid>\r\n                <Grid item xs={6}>\r\n                  <FormikControl\r\n                    control=\"select\"\r\n                    placeholder=\"Select Category\"\r\n                    name={type === \"hcp\" ? \"Specialization\" : \"Enter Value\"}\r\n                    label={type === \"hcp\" ? \"Select Category\" : \"Enter Value\"}\r\n                    options={checkbox5}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item xs={12} marginTop={24}>\r\n                <CustomButton\r\n                  title={type === \"hcp\" ? \"Save changes\" : \"Add Permission\"}\r\n                  width=\"100%\"\r\n                  type={buttonType}\r\n                  isSubmitting={isSubmitting}\r\n                  disabled={!(dirty || isValid)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  label: PropTypes.string,\r\n  type: PropTypes.string,\r\n  name: PropTypes.string,\r\n  options: PropTypes.array,\r\n  initialValues: PropTypes.object,\r\n  validationSchema: PropTypes.object,\r\n};\r\nexport default Filter;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\DeleteOrDisable.js",["1155","1156"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid, Modal, Fade, Typography, Box, Backdrop } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { BsExclamationCircle } from \"react-icons/bs\";\r\nimport LogoutRoundedIcon from \"@mui/icons-material/LogoutRounded\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  closeIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      cursor: \"pointer\",\r\n\r\n      \"&:hover\": {\r\n        cursor: \"pointer\",\r\n        color: theme.palette.common.danger,\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  height: \"auto\",\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: 24,\r\n  borderRadius: \"1rem\",\r\n};\r\n\r\nconst DeleteOrDisable = ({\r\n  open,\r\n  setOpen,\r\n  title,\r\n  confirmationMsg,\r\n  btnValue,\r\n  type,\r\n  onConfirm,\r\n  onCancel,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const discardButton = {\r\n    background: theme.palette.info.main,\r\n    hover: theme.palette.common.gold,\r\n    active: theme.palette.info.dark,\r\n  };\r\n\r\n  const disableButton = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.common.danger,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      aria-labelledby=\"transition-modal-title\"\r\n      aria-describedby=\"transition-modal-description\"\r\n      open={open}\r\n      onClose={() => setOpen(false)}\r\n      closeAfterTransition\r\n      BackdropComponent={Backdrop}\r\n      BackdropProps={{\r\n        timeout: 500,\r\n      }}\r\n    >\r\n      <Fade in={open}>\r\n        <Box\r\n          sx={style}\r\n          width={{ md: \"30vw\", sm: \"30vw\", xs: \"80vw\" }}\r\n          padding={{ sm: 2, xs: 2, md: 4 }}\r\n        >\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n          >\r\n            <Grid item alignSelf=\"flex-end\">\r\n              <CloseIcon\r\n                color=\"primary\"\r\n                fontSize=\"large\"\r\n                className={classes.closeIcon}\r\n                onClick={() => setOpen(false)}\r\n              />\r\n            </Grid>\r\n            <Grid item style={{ marginBottom: \"3rem\" }}>\r\n              {type === \"logout\" ? (\r\n                <LogoutRoundedIcon\r\n                  sx={{ fontSize: \"10rem\", color: \"red\" }}\r\n                  color={theme.palette.warning.main}\r\n                />\r\n              ) : (\r\n                <BsExclamationCircle\r\n                  size=\"10rem\"\r\n                  color={theme.palette.warning.main}\r\n                />\r\n              )}\r\n            </Grid>\r\n            <Grid item style={{ marginBottom: \"2rem\" }}>\r\n              <Typography variant=\"h2\">{title}</Typography>\r\n            </Grid>\r\n            <Grid item style={{ marginBottom: \"2rem\" }}>\r\n              <Typography\r\n                textAlign=\"center\"\r\n                variant=\"body1\"\r\n              >{`Are you sure you want to ${confirmationMsg}?`}</Typography>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              container\r\n              justifyContent=\"space-between\"\r\n              rowGap={3}\r\n              spacing={4}\r\n              sx={{ justifyContent: \"space-between\" }}\r\n            >\r\n              <Grid item columms={{ lg: 6, md: 4, sm: 4, xs: 3 }} flex={1}>\r\n                <CustomButton\r\n                  title=\"Cancel\"\r\n                  textColor={theme.palette.common.black}\r\n                  type={discardButton}\r\n                  width=\"100%\"\r\n                  onClick={() => setOpen(false)}\r\n                />\r\n              </Grid>\r\n              <Grid item columms={{ md: 4, sm: 4, xs: 3 }} flex={1}>\r\n                <CustomButton\r\n                  title={`Yes, ${btnValue}`}\r\n                  type={disableButton}\r\n                  width=\"100%\"\r\n                  onClick={() => {\r\n                    setOpen(false);\r\n                    onConfirm();\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Fade>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nDeleteOrDisable.propTypes = {\r\n  open: PropTypes.bool,\r\n  setOpen: PropTypes.func,\r\n  title: PropTypes.string,\r\n  confirmationMsg: PropTypes.string,\r\n  btnValue: PropTypes.string,\r\n  type: PropTypes.string,\r\n  onConfirm: PropTypes.func,\r\n  onCancel: PropTypes.func,\r\n};\r\n\r\nexport default DeleteOrDisable;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\MessageAddIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\VerifiedIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\Filters\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\Calender2.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Buttons\\EditDelBtn.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\ProfileInfo.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\hospitalPageStyles.js",["1157"],"import { makeStyles } from \"@mui/styles\";\r\n\r\nexport const useStyles = makeStyles((theme) => ({\r\n  viewBtn: {\r\n    \"&.MuiButton-root\": {\r\n      backgroundColor: \"#F8F8F8\",\r\n      color: \"#3E5EA9\",\r\n      fontSize: \"11px\",\r\n      borderRadius: \"8px\",\r\n      textTransform: \"none\",\r\n      padding: \"8px 15px\",\r\n      margin: 0,\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n      textAlign: \"left\",\r\n      padding: \"16px\",\r\n    },\r\n  },\r\n}));\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\CallIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\SmsIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\DateTimePicker.js",["1158"],"import React from \"react\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport { TextError } from \"components/Utilities/TextError\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid } from \"@mui/material\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\r\nimport DesktopDateTimePicker from \"@mui/lab/DesktopDateTimePicker\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  FormLabel: {\r\n    \"&.MuiFormLabel-root\": {\r\n      ...theme.typography.FormLabel,\r\n    },\r\n  },\r\n}));\r\n\r\nconst Dates = ({ name, value, setFieldValue, onBlur }) => {\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <DesktopDateTimePicker\r\n        name={name}\r\n        onChange={(value) => setFieldValue(name, value)}\r\n        value={value}\r\n        onBlur={onBlur}\r\n        onError={(err) => console.log(err)}\r\n        renderInput={(params) => (\r\n          <TextField {...params} sx={{ padding: \"-12px\" }} />\r\n        )}\r\n      />\r\n    </LocalizationProvider>\r\n  );\r\n};\r\n\r\nDates.propTypes = {\r\n  value: PropTypes.string,\r\n  label: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  setFieldValue: PropTypes.func,\r\n  children: PropTypes.node,\r\n  name: PropTypes.string,\r\n  onBlur: PropTypes.func,\r\n};\r\n\r\nconst DateTimePicker = (props) => {\r\n  const { name, label, ...rest } = props;\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container direction=\"column\" gap={1}>\r\n      <FormLabel className={classes.FormLabel}>{label}</FormLabel>\r\n      <Field name={name} as={Dates} label={label} {...rest} />\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nDateTimePicker.propTypes = {\r\n  label: PropTypes.string,\r\n  name: PropTypes.string,\r\n  options: PropTypes.array,\r\n  placeholder: PropTypes.string,\r\n};\r\n\r\nexport default DateTimePicker;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\File.js",["1159"],"import React, { useEffect, useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport { TextError } from \"components/Utilities/TextError\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Grid,\r\n  Avatar,\r\n  Button,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport { Loader } from \"components/Utilities\";\r\nimport { RequiredIcon } from \"components/Typography\";\r\nimport {\r\n  compressAndUploadImage,\r\n  showErrorMsg,\r\n  showSuccessMsg,\r\n  uploadImage,\r\n} from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  FormLabel: {\r\n    \"&.MuiFormLabel-root\": {\r\n      ...theme.typography.FormLabel,\r\n    },\r\n  },\r\n\r\n  uploadBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      background: \"#f2f2f2\",\r\n      boxShadow: \"none\",\r\n      borderRadius: \"5px\",\r\n      fontSize: \"1.4rem\",\r\n      color: theme.palette.common.black,\r\n\r\n      \"&:hover\": {\r\n        background: \"#f2f3f3\",\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nexport const Formiks = ({ name, setFieldValue, onBlur, value }) => {\r\n  const fileRef = useRef(null);\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [preview, setPreview] = useState(\"\");\r\n  const [isCompleted, setIsCompleted] = React.useState(null);\r\n  const [progress, setProgress] = useState();\r\n  const [isCompressing, setIsCompressing] = React.useState(false);\r\n\r\n  useEffect(() => {\r\n    if (value) {\r\n      setPreview(value);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    isCompleted === \"passed\" &&\r\n      showSuccessMsg(enqueueSnackbar, Typography, \"Image upload complete.\");\r\n    if (isCompleted === \"failed\") {\r\n      showErrorMsg(enqueueSnackbar, \"Image upload failed, Try again.\");\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [isCompleted]);\r\n\r\n  const onChange = async (e) => {\r\n    const file = e.target.files[0];\r\n    setProgress(1);\r\n    compressAndUploadImage(\r\n      file,\r\n      uploadImage,\r\n      setPreview,\r\n      name,\r\n      setFieldValue,\r\n      setProgress,\r\n      setIsCompressing,\r\n      setIsCompleted\r\n    );\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onloadend = (e) => setPreview(reader.result);\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={2} alignItems=\"center\">\r\n      {progress < 100 || isCompressing ? (\r\n        <Grid\r\n          container\r\n          item\r\n          direction=\"row\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Typography display={\"inline\"}>\r\n            {isCompressing ? \"Compressing image\" : \"Uploading image\"}\r\n          </Typography>\r\n          <Loader />\r\n        </Grid>\r\n      ) : (\r\n        <>\r\n          <Grid item>\r\n            <FormControl fullWidth>\r\n              <Grid item container>\r\n                <input\r\n                  accept=\"image/*\"\r\n                  onChange={onChange}\r\n                  type=\"file\"\r\n                  name={name}\r\n                  onBlur={onBlur}\r\n                  hidden\r\n                  ref={fileRef}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  onClick={() => fileRef.current.click()}\r\n                  component=\"span\"\r\n                  className={classes.uploadBtn}\r\n                >\r\n                  Upload Photo\r\n                </Button>\r\n              </Grid>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item>\r\n            {preview && isCompleted !== \"failed\" ? (\r\n              <Avatar sx={{ backgroundColor: \"#eaeaea\" }} src={preview} />\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nFormiks.propTypes = {\r\n  value: PropTypes.string,\r\n  label: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  children: PropTypes.node.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onBlur: PropTypes.func,\r\n  setFieldValue: PropTypes.func,\r\n};\r\n\r\nconst Files = (props) => {\r\n  const { name, label, isRequired, ...rest } = props;\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container direction=\"column\" gap={1}>\r\n      <FormLabel className={classes.FormLabel}>\r\n        {label} {isRequired && <RequiredIcon />}\r\n      </FormLabel>\r\n      <Field name={name} as={Formiks} label={label} {...rest} />\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nFiles.propTypes = {\r\n  label: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n  options: PropTypes.array.isRequired,\r\n  placeholder: PropTypes.string,\r\n  isRequired: PropTypes.bool,\r\n};\r\n\r\nexport default Files;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Textarea.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\Date.js",["1160","1161","1162"],"import React from \"react\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport { TextError } from \"components/Utilities/TextError\";\r\nimport TextField from \"@mui/material/TextField\";\r\nimport FormLabel from \"@mui/material/FormLabel\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid } from \"@mui/material\";\r\nimport AdapterDateFns from \"@mui/lab/AdapterDateFns\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport LocalizationProvider from \"@mui/lab/LocalizationProvider\";\r\nimport DesktopDatePicker from \"@mui/lab/DesktopDatePicker\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  FormLabel: {\r\n    \"&.MuiFormLabel-root\": {\r\n      ...theme.typography.FormLabel,\r\n    },\r\n  },\r\n\r\n  dateInput: {\r\n    \"&>.MuiOutlinedInput-root\": {\r\n      border: \"none\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Dates = ({ name, value, setFieldValue, onBlur, startDate, endDate }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <LocalizationProvider dateAdapter={AdapterDateFns}>\r\n      <DesktopDatePicker\r\n        className={classes.dateInput}\r\n        name={name}\r\n        onChange={(value) => setFieldValue(name, value)}\r\n        value={value}\r\n        onBlur={onBlur}\r\n        minDate={startDate}\r\n        maxDate={endDate}\r\n        onError={(err) => console.log(err)}\r\n        renderInput={(params) => (\r\n          <TextField\r\n            {...params}\r\n            sx={{\r\n              padding: \"-12px\",\r\n              border: \"2px solid #E0E0E0\",\r\n              borderRadius: \"12px\",\r\n            }}\r\n          />\r\n        )}\r\n      />\r\n    </LocalizationProvider>\r\n  );\r\n};\r\n\r\nDates.propTypes = {\r\n  value: PropTypes.string,\r\n  label: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  setFieldValue: PropTypes.func,\r\n  children: PropTypes.node,\r\n  name: PropTypes.string,\r\n  onBlur: PropTypes.func,\r\n};\r\n\r\nconst DateComponent = (props) => {\r\n  const { name, label, ...rest } = props;\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container direction=\"column\" gap={1}>\r\n      <FormLabel className={classes.FormLabel}>{label}</FormLabel>\r\n      <Field name={name} as={Dates} label={label} {...rest} />\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nDateComponent.propTypes = {\r\n  label: PropTypes.string,\r\n  name: PropTypes.string,\r\n  options: PropTypes.array,\r\n  placeholder: PropTypes.string,\r\n};\r\n\r\nexport default DateComponent;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\CustomButton.js",["1163"],"import React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Loader from \"components/Utilities/Loader\";\r\nimport SearchOutlinedIcon from \"@mui/icons-material/SearchOutlined\";\r\n\r\nconst CustomButton = ({\r\n  title,\r\n  endIcon,\r\n  width,\r\n  height,\r\n  textColorOnHover,\r\n  borderRadius,\r\n  textColor,\r\n  path,\r\n  role,\r\n  fontSize,\r\n  startIcon,\r\n  type: { background, hover, active, disabled },\r\n  isSubmitting,\r\n  ...rest\r\n}) => {\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      \"&.MuiButton-root\": {\r\n        ...theme.typography.btn,\r\n        backgroundColor: background,\r\n        color: textColor,\r\n        width: width,\r\n        borderRadius: borderRadius ? borderRadius : 10,\r\n        height: height ? height : \"5rem\",\r\n        display: \"flex\",\r\n        justifyContent: \"center\",\r\n        alignItems: \"center\",\r\n        fontSize: \"clamp(1.2rem,2vw, 1.3rem)\",\r\n        boxShadow: \"none\",\r\n\r\n        \"&:hover\": {\r\n          backgroundColor: hover,\r\n          color: textColorOnHover,\r\n\r\n          \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n            color: textColorOnHover,\r\n          },\r\n        },\r\n\r\n        \"&:active\": {\r\n          backgroundColor: active,\r\n          boxShadow: \"none\",\r\n          color: textColor,\r\n        },\r\n\r\n        \"&:disabled\": {\r\n          backgroundColor: disabled,\r\n          color: textColor,\r\n          boxShadow: \"none\",\r\n          cursor: \"no-drop\",\r\n        },\r\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n          fontSize: \"2rem\",\r\n        },\r\n\r\n        \"& .MuiButton-endIcon\": {\r\n          marginLeft: \".5rem\",\r\n          marginTop: \"-.2rem\",\r\n        },\r\n      },\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Button\r\n      startIcon={startIcon}\r\n      variant=\"contained\"\r\n      LinkComponent={Link}\r\n      to={path ? path : \"\"}\r\n      type={role ? \"button\" : \"submit\"}\r\n      endIcon={endIcon}\r\n      className={classes.button}\r\n      {...rest}\r\n    >\r\n      {!isSubmitting && title}{\" \"}\r\n      {isSubmitting && <Loader size={35} color=\"info\" />}\r\n    </Button>\r\n  );\r\n};\r\n\r\nCustomButton.defaultProps = {\r\n  width: \"auto\",\r\n  textColor: \"#fff\",\r\n};\r\n\r\nCustomButton.propTypes = {\r\n  endIcon: PropTypes.node,\r\n  startIcon: PropTypes.node,\r\n  title: PropTypes.string,\r\n  type: PropTypes.object,\r\n  textColor: PropTypes.string,\r\n  width: PropTypes.string,\r\n  height: PropTypes.string,\r\n  borderRadius: PropTypes.string,\r\n  fontSize: PropTypes.string,\r\n  textColorOnHover: PropTypes.string,\r\n  path: PropTypes.string,\r\n  isSubmitting: PropTypes.bool,\r\n  role: PropTypes.bool,\r\n};\r\n\r\nexport const SearchBtn = ({ isSubmitting, handleClick }) => {\r\n  const useStyles = makeStyles((theme) => ({\r\n    button: {\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      color: \"#ffffff\",\r\n      border: \"none\",\r\n      backgroundColor: theme.palette.common.dark,\r\n      borderRadius: \"100%\",\r\n      padding: \"0.75rem\",\r\n      cursor: \"pointer\",\r\n\r\n      \"&:hover\": {\r\n        backgroundColor: theme.palette.common.gray,\r\n      },\r\n\r\n      \"&:disabled\": {\r\n        backgroundColor: theme.palette.common.disable,\r\n        boxShadow: \"none\",\r\n        cursor: \"no-drop\",\r\n      },\r\n    },\r\n  }));\r\n\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <button\r\n      type={\"submit\"}\r\n      className={classes.button}\r\n      onClick={() => handleClick()}\r\n    >\r\n      {!isSubmitting && <SearchOutlinedIcon fontSize=\"large\" />}{\" \"}\r\n      {isSubmitting && <Loader size={35} color=\"info\" />}\r\n    </button>\r\n  );\r\n};\r\n\r\nSearchBtn.propTypes = {\r\n  isSubmitting: PropTypes.bool,\r\n  handleClick: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default CustomButton;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\deleteIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\EditIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Typography.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Loader.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\DragAndDrop.js",["1164"],"import React from \"react\";\r\nimport t from \"prop-types\";\r\nimport { ErrorMessage } from \"formik\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { TextError } from \"components/Utilities/TextError\";\r\nimport { CustomButton, Loader } from \"components/Utilities\";\r\nimport { IsImg } from \"helpers/filterHelperFunctions\";\r\n\r\nconst getColor = (props) => {\r\n  if (props.isDragAccept) {\r\n    return \"#00e676\";\r\n  }\r\n  if (props.isDragReject) {\r\n    return \"#ff1744\";\r\n  }\r\n  if (props.isFocused) {\r\n    return \"#2196f3\";\r\n  }\r\n  return \"#eeeeee\";\r\n};\r\n\r\nconst Container = styled.div`\r\n  min-height: 250px;\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 20px;\r\n  border-width: 2px;\r\n  border-radius: 2px;\r\n  border-color: ${(props) => getColor(props)};\r\n  border-style: dashed;\r\n  background-color: #fafafa;\r\n  color: #777171;\r\n  outline: none;\r\n  transition: border 0.24s ease-in-out;\r\n`;\r\n\r\nconst thumb = {\r\n  display: \"inline-flex\",\r\n  borderRadius: 2,\r\n  backgroundColor: \"#eaeaea\",\r\n  border: \"1px solid #eaeaea\",\r\n  marginBottom: 8,\r\n  marginRight: 8,\r\n  width: 100,\r\n  height: 100,\r\n  padding: 4,\r\n  boxSizing: \"border-box\",\r\n};\r\n\r\nconst thumbInner = {\r\n  display: \"flex\",\r\n  backgroundColor: \"#eaeaea\",\r\n  minWidth: 0,\r\n  overflow: \"hidden\",\r\n};\r\n\r\nconst img = {\r\n  display: \"block\",\r\n  backgroundColor: \"#eaeaea\",\r\n  width: \"auto\",\r\n  height: \"100%\",\r\n};\r\n\r\nconst errorContainer = {\r\n  margin: \"1rem 0rem\",\r\n};\r\n\r\nconst DragAndDrop = ({ name, maxFiles, hasPreview, uploadFunc }) => {\r\n  const theme = useTheme();\r\n  const [preview, setPreview] = React.useState(\"\");\r\n  const [progress] = React.useState();\r\n  const [isCompleted] = React.useState(null);\r\n  const [isCompressing] = React.useState(false);\r\n  const [file, setFile] = React.useState(null);\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isFocused,\r\n    isDragAccept,\r\n    isDragReject,\r\n    open,\r\n  } = useDropzone({\r\n    accept: \"application/json\",\r\n    maxFiles: maxFiles,\r\n    autoFocus: true,\r\n    onDropAccepted: (acceptedFiles) => {\r\n      setFile(acceptedFiles[0]);\r\n      if (hasPreview || IsImg(acceptedFiles[0])) {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(acceptedFiles[0]);\r\n        reader.onloadend = (e) => setPreview(reader.result);\r\n        // call the upload func\r\n        /* compressAndUploadImage(\r\n          acceptedFiles[0],\r\n          uploadImage,\r\n          setPreview,\r\n          name,\r\n          setFieldValue,\r\n          setProgress,\r\n          setIsCompressing,\r\n          setIsCompleted\r\n        ); */\r\n      } else {\r\n        uploadFunc(acceptedFiles[0]);\r\n      }\r\n    },\r\n  });\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"\">\r\n        <Container {...getRootProps({ isFocused, isDragAccept, isDragReject })}>\r\n          <input {...getInputProps()} />\r\n          <Typography>\r\n            Drag and drop your file(s), or click to select files or Click on the\r\n            button below\r\n          </Typography>\r\n          <Grid\r\n            item\r\n            container\r\n            justifyContent=\"center\"\r\n            style={{ marginTop: \"15px\" }}\r\n          >\r\n            <CustomButton\r\n              variant=\"contained\"\r\n              title=\" Select file(s)\"\r\n              type={buttonType}\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                open();\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n      <div style={errorContainer}>\r\n        <ErrorMessage name={name} component={TextError} />\r\n      </div>\r\n      <aside style={{ marginTop: \"1.5rem\" }}>\r\n        <Grid item>\r\n          {progress < 100 || isCompressing ? (\r\n            <Grid\r\n              container\r\n              item\r\n              direction=\"row\"\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Typography display={\"inline\"}>\r\n                {isCompressing ? \"Compressing file\" : \"Uploading file\"}\r\n              </Typography>\r\n              <Loader />\r\n            </Grid>\r\n          ) : preview && isCompleted !== \"failed\" && IsImg(file) ? (\r\n            <div style={thumb}>\r\n              <div style={thumbInner}>\r\n                <img src={preview} alt=\"preview\" style={img} />\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <Typography sx={{ marginBottom: \"1rem\", color: \"green\" }}>\r\n              {file && file.name}\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n      </aside>\r\n    </div>\r\n  );\r\n};\r\n\r\nDragAndDrop.propTypes = {\r\n  name: t.string.isRequired,\r\n  maxFiles: t.number.isRequired,\r\n  hasPreview: t.bool.isRequired,\r\n  uploadFunc: t.func.isRequired,\r\n};\r\n\r\nexport default DragAndDrop;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\reducers\\authReducer.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\store\\reducers\\tablesReducer.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\Filters\\SingleHMOFilters.js",["1165","1166","1167","1168","1169","1170","1171","1172","1173","1174","1175"],"import React, { useEffect, useState } from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\n\r\nimport Filter from \".\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { deleteVar, filterData } from \"helpers/filterHelperFunctions\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { getPlans } from \"components/graphQL/useQuery\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\n\r\nconst SingleHMOFilters = ({ setHmoEnrollees, setPageInfo, queryParams }) => {\r\n  const { hmoId } = useParams();\r\n  const [fetchPlans] = useLazyQuery(getPlans);\r\n  const { displayAlert, getErrorMsg } = useAlert();\r\n  const [planOptions, setPlanOptions] = useState([]);\r\n  const { variables, fetchEnrollees, refetch } = queryParams;\r\n  const [hmoEnrolleeFilterValue, setHmoEnrolleeFilterValue] = useState({\r\n    planId: \"\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchPlans({\r\n      variables: { type: \"hmo\" },\r\n    })\r\n      .then(({ data }) => {\r\n        const options = (data?.getPlans?.plan || []).map((option) => {\r\n          return { key: option?.name, value: option?._id };\r\n        });\r\n        setPlanOptions(options);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, [fetchPlans]);\r\n\r\n  const onFilterChange = async (name, value) => {\r\n    try {\r\n      deleteVar(variables);\r\n      const filterValues = {\r\n        ...hmoEnrolleeFilterValue,\r\n        [name]: value,\r\n        providerId: hmoId,\r\n      };\r\n      console.log(filterValues);\r\n      setHmoEnrolleeFilterValue(filterValues);\r\n      filterData(filterValues, {\r\n        fetchData: fetchEnrollees,\r\n        refetch,\r\n        variables,\r\n      })\r\n        .then((data) => {\r\n          setHmoEnrollees(data?.getEnrollees?.data || []);\r\n          setPageInfo(data?.getEnrollees?.pageInfo || {});\r\n        })\r\n        .catch((error) => {\r\n          console.error(error);\r\n          const errMsg = getErrorMsg(error);\r\n          displayAlert(\"error\", errMsg);\r\n          refresh(setHmoEnrolleeFilterValue, { plan: \"\" });\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      const errMsg = getErrorMsg(error);\r\n      displayAlert(\"error\", errMsg);\r\n      refresh(setHmoEnrolleeFilterValue, { plan: \"\" });\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\r\n    setFilterValue(defaultVal);\r\n    deleteVar(variables);\r\n\r\n    refetch({ variables: { providerId: hmoId } })\r\n      .then(({ data }) => {\r\n        setHmoEnrollees(data?.getEnrollees?.data || []);\r\n        setPageInfo(data?.getEnrollees?.pageInfo || {});\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", \"Failed to get HMO enrollees data, Try again\");\r\n      });\r\n  };\r\n\r\n  return (\r\n    <Grid item container flexWrap=\"wrap\" spacing={2} alignItems=\"flex-end\">\r\n      {/* FILTER BY PLAN */}\r\n      <Grid item>\r\n        <Filter\r\n          onHandleChange={(e) => onFilterChange(\"planId\", e?.target?.value)}\r\n          onClickClearBtn={() => onFilterChange(\"planId\", \"\")}\r\n          options={[{ key: \"Access Type\", value: \"\" }, ...planOptions]}\r\n          name=\"planId\"\r\n          value={hmoEnrolleeFilterValue.planId}\r\n          hasClearBtn={true}\r\n          disable={true}\r\n          variant=\"small\"\r\n        />\r\n      </Grid>\r\n      {/* <Grid item>\r\n        <Filter\r\n          onHandleChange={(e) => null}\r\n          onClickClearBtn={() => null}\r\n          options={[{ key: \"Gender\", value: \"\" }, ...genderType]}\r\n          name=\"gender\"\r\n          placeholder=\"Gender\"\r\n          value={profileFilterValues.gender}\r\n          hasClearBtn={true}\r\n          disable={true}\r\n          variant=\"small\"\r\n        />\r\n      </Grid> */}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SingleHMOFilters;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\SingleHMORow.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\AddEditHMOEnrolleeForm.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\StatusPill.js",["1176"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Chip } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"12px !important\",\r\n      height: \"2.7rem\",\r\n      borderRadius: \"1.3rem\",\r\n      fontWeight: 500,\r\n    },\r\n  },\r\n}));\r\n\r\nconst StatusPill = ({ type, label }) => {\r\n  const classes = useStyles();\r\n  const bgColor =\r\n    type === \"success\"\r\n      ? \"rgba(62, 165, 132, 0.1)\"\r\n      : type === \"normal\"\r\n      ? \"rgba(240, 240, 240, 1)\"\r\n      : type === \"error\"\r\n      ? \"rgba(242, 24, 24, 0.1)\"\r\n      : \"\";\r\n\r\n  const textColor =\r\n    type === \"success\"\r\n      ? \"#3EA584\"\r\n      : type === \"normal\"\r\n      ? \"#757886\"\r\n      : type === \"error\"\r\n      ? \"#f21818\"\r\n      : \"\";\r\n\r\n  return (\r\n    <Chip\r\n      label={label}\r\n      className={classes.badge}\r\n      sx={{\r\n        backgroundColor: bgColor,\r\n        color: textColor,\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nStatusPill.propTypes = {\r\n  type: PropTypes.oneOf([\"success\", \"normal\", \"error\"]).isRequired,\r\n  label: PropTypes.string.isRequired,\r\n};\r\n\r\nexport default StatusPill;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\WaitingListTable.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\Notifications.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\HeaderProfile.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\Header.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\EnhancedTableAction.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\HeaderContents.js",["1177","1178","1179","1180","1181","1182","1183","1184","1185","1186"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Backdrop.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\AvailabilityTable.js",["1187","1188","1189","1190","1191","1192"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\CircularProgress.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\SearchInput.js",["1193"],"import React from \"react\";\r\nimport SearchIcon from \"@mui/icons-material/Search\";\r\nimport PropTypes from \"prop-types\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport OutlinedInput from \"@mui/material/OutlinedInput\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Field } from \"formik\";\r\n\r\nconst Search = ({\r\n  width,\r\n  placeholder,\r\n  height,\r\n  placeholderWidth,\r\n  type,\r\n  name,\r\n  hasStartIcon = true,\r\n  ...rest\r\n}) => {\r\n  const useStyles = makeStyles({\r\n    //   root: {\r\n    //     \"& .css-1u99e1o-MuiInputBase-root-MuiOutlinedInput-root\": {\r\n    //       fontSize: \"1.6rem\",\r\n    //     },\r\n    //   },\r\n  });\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Field name={name}>\r\n        {({ field }) => {\r\n          return (\r\n            <OutlinedInput\r\n              type={type}\r\n              id=\"input-with-icon-adornment\"\r\n              sx={{\r\n                display: \"flex\",\r\n                alignItems: \"center\",\r\n                width,\r\n                height,\r\n                fontSize: \"16px\",\r\n                placeholderWidth,\r\n                background: \"white\",\r\n                borderRadius: 2,\r\n              }}\r\n              placeholder={placeholder}\r\n              inputProps={{ \"aria-label\": placeholder }}\r\n              startAdornment={\r\n                hasStartIcon && (\r\n                  <InputAdornment position=\"start\">\r\n                    <SearchIcon style={{ fontSize: \"3rem\" }} name={name} />\r\n                  </InputAdornment>\r\n                )\r\n              }\r\n              {...rest}\r\n            />\r\n          );\r\n        }}\r\n      </Field>\r\n    </div>\r\n  );\r\n};\r\nSearch.propTypes = {\r\n  width: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  name: PropTypes.string,\r\n  height: PropTypes.string,\r\n  placeholderWidth: PropTypes.string,\r\n  type: PropTypes.string,\r\n  hasStartIcon: PropTypes.bool,\r\n  onChange: PropTypes.func,\r\n};\r\n\r\nexport default Search;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Search.js",["1194","1195"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { InputAdornment, OutlinedInput, Grid } from \"@mui/material\";\r\nimport SearchIcon from \"components/Icons/SearchIcon\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  inputCont: {\r\n    \"&.MuiOutlinedInput-root\": {\r\n      backgroundColor: \"#FAFAFA\",\r\n      fontWeight: \"200 !important\",\r\n      color: `${theme.palette.common.grey} !important`,\r\n      height: ({ height }) => `${height}`,\r\n      fontSize: \"14px !important\",\r\n      borderRadius: \"12px\",\r\n      border: \"1px solid #E0E0E0 !important\",\r\n\r\n      \"&>fieldset\": {\r\n        border: 0,\r\n      },\r\n    },\r\n    /* \"&.MuiTypography-root\": {\r\n      fontWeight: \"200 !important\",\r\n      color: `${theme.palette.common.grey} !important`,\r\n      minHeight: 50,\r\n      fontSize: \"14px !important\",\r\n      borderRadius: \"12px\",\r\n    }, */\r\n  },\r\n}));\r\nconst SearchContainer = ({\r\n  width,\r\n  placeholder,\r\n  height,\r\n  placeholderWidth,\r\n  value,\r\n  onChange,\r\n  ref,\r\n  hasStartIcon = true,\r\n  startIcon,\r\n  onClickSearchBtn,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container>\r\n      <Grid item>\r\n        <OutlinedInput\r\n          className={classes.inputCont}\r\n          id=\"input-with-icon-adornment\"\r\n          value={value}\r\n          onChange={onChange}\r\n          ref={ref}\r\n          {...rest}\r\n          sx={{\r\n            fontSize: \"14px\",\r\n            height: height,\r\n            border: \"2px solid #E0E0E0\",\r\n            padding: \"0rem 1rem\",\r\n            borderRadius: \"12px\",\r\n          }}\r\n          placeholder={placeholder}\r\n          inputProps={{ \"aria-label\": placeholder }}\r\n          startAdornment={\r\n            <InputAdornment position=\"start\">\r\n              {startIcon\r\n                ? startIcon\r\n                : hasStartIcon && <SearchIcon style={{ fontSize: \"14px\" }} />}\r\n            </InputAdornment>\r\n          }\r\n          endAdornment={\r\n            <button\r\n              style={{\r\n                padding: \"0.5rem\",\r\n                margin: \"1rem 0rem\",\r\n                backgroundColor: \"#2D2F39\",\r\n                border: \"none\",\r\n                borderRadius: \"100%\",\r\n                display: \"flex\",\r\n                justifyContent: \"center\",\r\n                alignItems: \"center\",\r\n                cursor: \"pointer\",\r\n              }}\r\n              onClick={() => onClickSearchBtn()}\r\n            >\r\n              <SearchIcon sx={{ fontSize: \"20px\" }} />\r\n            </button>\r\n          }\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nSearchContainer.propTypes = {\r\n  width: PropTypes.string,\r\n  ref: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  height: PropTypes.string,\r\n  placeholderWidth: PropTypes.string,\r\n  value: PropTypes.string,\r\n  hasStartIcon: PropTypes.bool,\r\n  onChange: PropTypes.func,\r\n  startIcon: PropTypes.node,\r\n  onClickSearchBtn: PropTypes.func,\r\n};\r\n\r\nexport default SearchContainer;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\PreviousButton.js",["1196"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport KeyboardBackspaceIcon from \"@mui/icons-material/KeyboardBackspace\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  icon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      fontSize: \"2.5rem\",\r\n    },\r\n  },\r\n}));\r\nconst PreviousButton = ({ path, ...rest }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <IconButton LinkComponent={Link} to={path} {...rest}>\r\n      <KeyboardBackspaceIcon color=\"error\" className={classes.icon} />\r\n    </IconButton>\r\n  );\r\n};\r\n\r\nPreviousButton.propTypes = {\r\n  path: PropTypes.string,\r\n};\r\n\r\nexport default PreviousButton;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Modal.js",["1197","1198"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\LineChart.js",["1199","1200"],"import React, { useState, useEffect, useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport { monthNames } from \"components/Utilities/Time\";\r\n\r\nconst LineChart2 = ({ graphState, optionsValue, type, opt }) => {\r\n  const theme = useTheme();\r\n  const [state, setState] = useState(\"\");\r\n  // const lightGold = \"rgba(243, 173, 83,.04)\";\r\n  const lightRed = \"linear-gradient(to bottom, #3E5EA9 4%, #FFFFFF 88%)\";\r\n  // const lightGreen = \"rgba(45, 211, 158, .04)\";\r\n  // const gold = theme.palette.common.gold;\r\n  const [arr, setArr] = useState([]);\r\n  useEffect(() => {\r\n    setState(opt);\r\n  }, [opt]);\r\n\r\n  const active = useMemo(\r\n    () => graphState?.data?.active?.map((i) => i?.sum),\r\n    [graphState?.data?.active]\r\n  );\r\n  const all = useMemo(\r\n    () => graphState?.data?.all?.map((i) => i?.sum),\r\n    [graphState?.data?.all]\r\n  );\r\n  const inactive = useMemo(\r\n    () => graphState?.data?.inactive?.map((i) => i?.sum),\r\n    [graphState?.data?.inactive]\r\n  );\r\n  const complete = useMemo(\r\n    () => graphState?.data?.complete?.map((i) => i?.sum),\r\n    [graphState?.data?.complete]\r\n  );\r\n  const accept = useMemo(\r\n    () => graphState?.data?.accept?.map((i) => i?.sum),\r\n    [graphState?.data?.accept]\r\n  );\r\n  const cancel = useMemo(\r\n    () => graphState?.data?.cancel?.map((i) => i?.sum),\r\n    [graphState?.data?.cancel]\r\n  );\r\n  const decline = useMemo(\r\n    () => graphState?.data?.decline?.map((i) => i?.sum),\r\n    [graphState?.data?.decline]\r\n  );\r\n  const pharmacy = useMemo(\r\n    () => graphState?.data?.pharmacy?.map((i) => i?.sum),\r\n    [graphState?.data?.pharmacy]\r\n  );\r\n  const hospital = useMemo(\r\n    () => graphState?.data?.hospital?.map((i) => i?.sum),\r\n    [graphState?.data?.hospital]\r\n  );\r\n  const diagnostic = useMemo(\r\n    () => graphState?.data?.diagnostic?.map((i) => i?.sum),\r\n    [graphState?.data?.diagnostic]\r\n  );\r\n  const earning = useMemo(\r\n    () => graphState?.data?.earning?.map((i) => i?.sum),\r\n    [graphState?.data?.earning]\r\n  );\r\n  const payout = useMemo(\r\n    () => graphState?.data?.payout?.map((i) => i?.sum),\r\n    [graphState?.data?.payout]\r\n  );\r\n  const ongoing = useMemo(\r\n    () => graphState?.data?.ongoing?.map((i) => i?.sum),\r\n    [graphState?.data?.ongoing]\r\n  );\r\n\r\n  useEffect(() => {\r\n    if (type === \"consultation\") {\r\n      setArr([accept, complete, decline, ongoing, cancel]);\r\n      switch (state) {\r\n        case \"all\":\r\n          return setArr(accept);\r\n        case \"Accepted\":\r\n          return setArr(accept);\r\n        case \"Completed\":\r\n          return setArr(complete);\r\n        case \"Declined\":\r\n          return setArr(decline);\r\n        case \"Ongoing\":\r\n          return setArr(ongoing);\r\n        case \"Cancelled\":\r\n          return setArr(cancel);\r\n        default:\r\n          return setArr(accept);\r\n        // setArr([active, inactive]);\r\n      }\r\n    } else if (type === \"partners\") {\r\n      setArr([hospital, pharmacy, diagnostic]);\r\n      switch (state) {\r\n        case \"all\":\r\n          return setArr(all);\r\n        case \"hospital\":\r\n          return setArr(hospital);\r\n        case \"pharmacy\":\r\n          return setArr(pharmacy);\r\n        case \"diagnostic\":\r\n          return setArr(diagnostic);\r\n        default:\r\n          return setArr(all);\r\n      }\r\n    } else if (type === \"finance\") {\r\n      setArr([earning, payout]);\r\n      switch (state) {\r\n        case \"all\":\r\n          return setArr(earning);\r\n        case \"Earnings\":\r\n          return setArr(earning);\r\n        case \"Payouts\":\r\n          return setArr(payout);\r\n        default:\r\n          return setArr(earning);\r\n      }\r\n    } else {\r\n      switch (state) {\r\n        case \"all\":\r\n          return setArr(active);\r\n        case \"active\":\r\n          return setArr(active);\r\n        case \"inactive\":\r\n          return setArr(inactive);\r\n        default:\r\n          return setArr(active);\r\n      }\r\n    }\r\n  }, [\r\n    graphState,\r\n    state,\r\n    all,\r\n    diagnostic,\r\n    pharmacy,\r\n    hospital,\r\n    type,\r\n    decline,\r\n    active,\r\n    ongoing,\r\n    cancel,\r\n    earning,\r\n    payout,\r\n    accept,\r\n    complete,\r\n    inactive,\r\n  ]);\r\n\r\n  const lx = optionsValue.map((i) => {\r\n    let x;\r\n    const { value } = i;\r\n\r\n    if (value === opt) {\r\n      x = {\r\n        label: value,\r\n        data: arr,\r\n        fill: true,\r\n        color: \"#f00\",\r\n        borderColor: theme.palette.common.red,\r\n\r\n        pointBackgroundColor: theme.palette.common.red,\r\n        pointBorderColor: \"#fff\",\r\n        pointRadius: 2,\r\n        // backgroundColor:\r\n\r\n        //   lightRed,\r\n        // background: \"rgb(255,255,255)\";\r\n        // background:\r\n        //   \"linear-gradient(356deg, rgba(255,255,255,1) 38%, rgba(252,242,219,1) 38%)\",\r\n        pointHoverRadius: 2,\r\n        pointBorderWidth: 2,\r\n        tension: 0.5,\r\n        backgroundColor: (context) => {\r\n          const ctx = context.chart.ctx;\r\n\r\n          const gradient = ctx.createLinearGradient(0, 0, 0, 330);\r\n          gradient.addColorStop(0, \"rgba(62, 94, 209, .05)\");\r\n          gradient.addColorStop(1, \"rgba(255,255,255,0.3)\");\r\n          return gradient;\r\n        },\r\n      };\r\n    } else return null;\r\n    return x;\r\n  });\r\n  const j = lx.filter((n) => n);\r\n\r\n  const data = {\r\n    labels: monthNames,\r\n    backgroundColor: \"#fff\",\r\n    datasets: [...j],\r\n  };\r\n\r\n  const options = {\r\n    responsive: true,\r\n    maintainAspectRatio: true,\r\n    backgroundColor: \"#f3f3f3\",\r\n    locale: \"fr\",\r\n    scales: {\r\n      y: {\r\n        ticks: {\r\n          beginAtZero: true,\r\n          callback: function (value) {\r\n            if (value % 1 === 0) {\r\n              return value;\r\n            }\r\n          },\r\n        },\r\n        min: 0,\r\n        grid: {\r\n          color: \"rgba(0,0,0,0.05)\",\r\n          borderColor: \"rgba(0,0,0,0.05)\",\r\n          borderDash: [10, 10],\r\n          speechSynthesis: true,\r\n          display: true,\r\n        },\r\n      },\r\n      x: {\r\n        grid: {\r\n          color: \"#fff\",\r\n          borderDash: [2, 2],\r\n          borderColor: \"rgba(0,0,0,0.05)\",\r\n          display: false,\r\n        },\r\n        display: true,\r\n      },\r\n    },\r\n    plugins: {\r\n      legend: {\r\n        display: false,\r\n      },\r\n\r\n      tooltip: {\r\n        backgroundColor: \"#fff\",\r\n        cursor: \"pointer\",\r\n        titleColor: colorItem,\r\n        onHover: hover,\r\n        bodyColor: \"rgba(0, 0, 0, 1)\",\r\n        titleAlign: \"left\",\r\n        bodyAlign: \"left\",\r\n        borderColor: \"rgba(0, 0, 0, 0.05)\",\r\n        borderWidth: 3,\r\n        displayColors: true,\r\n        boxHeight: 0,\r\n        boxWidth: 0,\r\n        yAlign: \"top\",\r\n        usePointStyle: true,\r\n        callbacks: {\r\n          labelPointStyle: (context) => {\r\n            return {\r\n              pointStyle: \"rectangle\",\r\n              rotation: 0,\r\n              cursor: \"pointer\",\r\n            };\r\n          },\r\n        },\r\n      },\r\n    },\r\n  };\r\n  function hover(event) {\r\n    const x = (event.target.style.cursor = \"pointer\");\r\n    return x;\r\n  }\r\n  function colorItem(tooltipItem) {\r\n    const tooltipTitleColor =\r\n      tooltipItem.tooltip.labelColors[0].backgroundColor;\r\n\r\n    return tooltipTitleColor;\r\n  }\r\n\r\n  return (\r\n    <Grid item container>\r\n      <Line data={data} options={options} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nLineChart2.propTypes = {\r\n  timeFrames: PropTypes.array,\r\n  optionsValue: PropTypes.array,\r\n  type: PropTypes.string,\r\n  selectedTimeframe: PropTypes.number,\r\n  setSelectedTimeframe: PropTypes.func,\r\n  doctorStats: PropTypes.array,\r\n  graphState: PropTypes.object,\r\n  opt: PropTypes.object,\r\n};\r\n\r\nexport default LineChart2;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\LinearProgress.js",["1201"],"import React, { useState, useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { LinearProgress, Typography, Box } from \"@mui/material\";\r\n\r\nconst LinearProgressWithLabel = (props) => {\r\n  return (\r\n    <Box sx={{ display: \"flex\", alignItems: \"center\" }}>\r\n      <Box sx={{ width: \"100%\", mr: 1 }}>\r\n        <LinearProgress variant=\"determinate\" {...props} />\r\n      </Box>\r\n      <Box sx={{ minWidth: 35 }}>\r\n        <Typography variant=\"body2\" color=\"text.secondary\">{`${Math.round(\r\n          props.value\r\n        )}%`}</Typography>\r\n      </Box>\r\n    </Box>\r\n  );\r\n};\r\nLinearProgressWithLabel.propTypes = {\r\n  value: PropTypes.number,\r\n};\r\n\r\nconst LinearWithValueLabel = ({ progres }) => {\r\n  const [progress, setProgress] = useState(0);\r\n\r\n  useEffect(() => {\r\n    setProgress((progres) => (progres >= 100 ? 0 : progres + 0));\r\n  }, [progress]);\r\n\r\n  return (\r\n    <Box sx={{ width: \"100%\" }}>\r\n      <LinearProgressWithLabel value={progress} />\r\n    </Box>\r\n  );\r\n};\r\nexport default LinearWithValueLabel;\r\nLinearWithValueLabel.propTypes = {\r\n  progres: PropTypes.number,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\SideMenu.js",["1202","1203"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\FormSelect.js",["1204"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { MenuItem, Select, Typography, FormControl } from \"@mui/material/\";\r\nimport KeyboardArrowDownIcon from \"@mui/icons-material/KeyboardArrowDown\";\r\n\r\nconst FormSelect = ({\r\n  startAdornment,\r\n  value,\r\n  onChange,\r\n  placeholder,\r\n  options,\r\n  ...rest\r\n}) => {\r\n  return (\r\n    <FormControl sx={{ width: \"100%\" }}>\r\n      <Select\r\n        value={value}\r\n        onChange={onChange}\r\n        displayEmpty\r\n        startAdornment={startAdornment}\r\n        style={{ minHeight: 50, minWidth: 90 }}\r\n        inputProps={{ \"aria-label\": \"Select Referral Type\" }}\r\n        IconComponent={KeyboardArrowDownIcon}\r\n        {...rest}\r\n      >\r\n        <MenuItem value=\"\">\r\n          <Typography>{placeholder}</Typography>\r\n        </MenuItem>\r\n        {options.map((option, index) => (\r\n          <MenuItem\r\n            key={option.value}\r\n            value={option.value}\r\n            style={{ fontSize: \"1.25rem\" }}\r\n          >\r\n            {option.key}\r\n          </MenuItem>\r\n        ))}\r\n      </Select>\r\n    </FormControl>\r\n  );\r\n};\r\n\r\nFormSelect.propTypes = {\r\n  options: PropTypes.array,\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  placeholder: PropTypes.string,\r\n  startAdornment: PropTypes.element,\r\n};\r\n\r\nexport default FormSelect;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\FormInput.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\layouts\\NoData.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\FilterList.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\DisplayProfile.js",["1205","1206"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\ProfileCard.js",["1207"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\DataGrid.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\CircularChart.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\CheckBox.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Card.js",["1208"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport { makeStyles } from \"@mui/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridWrapper: {\r\n    ...theme.typography.cardGridWrapper,\r\n    width: \"100%\",\r\n  },\r\n\r\n  iconWrapper: {\r\n    ...theme.typography.cardIconWrapper,\r\n  },\r\n}));\r\n\r\nconst Card = ({ title, background, children, header = \"h2\", padding }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid\r\n      item\r\n      container\r\n      direction=\"column\"\r\n      alignItems=\"center\"\r\n      justifyContent=\"space-between\"\r\n      className={classes.gridWrapper}\r\n      rowGap={3}\r\n      sx={{ backgroundColor: \"#fff\" }}\r\n    >\r\n      <Grid item className={classes.iconWrapper} style={{ background }}>\r\n        {children}\r\n      </Grid>\r\n      <Grid item>\r\n        <Typography variant={header}>{title}</Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nCard.propTypes = {\r\n  title: PropTypes.string,\r\n  background: PropTypes.string,\r\n  header: PropTypes.string,\r\n  children: PropTypes.node,\r\n  padding: PropTypes.string,\r\n};\r\n\r\nexport default Card;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\Button.js",["1209","1210"],"import React from \"react\";\r\nimport Button from \"@mui/material/Button\";\r\nimport Stack from \"@mui/material/Stack\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@mui/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    textTransform: \"capitalize\",\r\n    fontFamily: \"Circular Std\",\r\n    fontSize: \"1.6rem\",\r\n    fontStyle: \"normal\",\r\n    fontWeight: 500,\r\n    lineHeight: \"2.4rem\",\r\n    letterSpacing: \"0px\",\r\n    textAlign: \"left\",\r\n    height: \"100%\",\r\n  },\r\n}));\r\n\r\nconst IconLabelButtons = ({\r\n  placeholder,\r\n  width,\r\n  backgroundColor,\r\n  type,\r\n  border,\r\n  height,\r\n  endIcon,\r\n}) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Stack\r\n      direction=\"row\"\r\n      spacing={2}\r\n      sx={{\r\n        width,\r\n        // height: \"100%\",\r\n      }}\r\n    >\r\n      <Button\r\n        sx={{ width, backgroundColor, borderRadius: border, height }}\r\n        variant=\"contained\"\r\n        className={classes.button}\r\n        endIcon={endIcon}\r\n      >\r\n        {placeholder}\r\n      </Button>\r\n    </Stack>\r\n  );\r\n};\r\n\r\nIconLabelButtons.propTypes = {\r\n  width: PropTypes.string,\r\n  placeholder: PropTypes.string,\r\n  backgroundColor: PropTypes.string,\r\n  type: PropTypes.string,\r\n  border: PropTypes.string,\r\n  height: PropTypes.string,\r\n  endIcon: PropTypes.node,\r\n};\r\n\r\nexport default IconLabelButtons;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\AvailabilityCard.js",["1211"],"import React from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Grid, Typography, Divider } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { hours } from \"components/Utilities/Time\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardGrid: {\r\n    background: \"#fff\",\r\n    borderRadius: \"2rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.1)\",\r\n  },\r\n}));\r\n\r\nconst AvailabilityCard = ({ availability }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container direction=\"column\" className={classes.cardGrid}>\r\n      <Grid item style={{ padding: \"2rem\" }}>\r\n        <Grid container justifyContent=\"center\" gap={2}>\r\n          <Grid item>\r\n            <Typography variant=\"body1\">Day:</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"body1\">{availability?.day} </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Divider />\r\n      <Grid item style={{ padding: \"2rem\" }}>\r\n        <Grid item container justifyContent=\"center\">\r\n          <Grid item>\r\n            <Typography variant=\"body1\">Time: </Typography>\r\n          </Grid>\r\n          <Grid container>\r\n            {availability?.times?.map((time, index) => {\r\n              return (\r\n                <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  gap={2}\r\n                  key={index}\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"center\"\r\n                >\r\n                  <Grid item>\r\n                    <Grid item container gap={2}>\r\n                      <Grid item>\r\n                        <Typography variant=\"body1\">{`${hours(\r\n                          time?.start\r\n                        )}`}</Typography>\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography variant=\"body1\">-</Typography>\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography variant=\"body1\">\r\n                          {`${hours(time?.stop)}`}{\" \"}\r\n                        </Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Divider />\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nAvailabilityCard.propTypes = {\r\n  day: PropTypes.string,\r\n  time: PropTypes.string,\r\n  availability: PropTypes.string,\r\n};\r\n\r\nexport default AvailabilityCard;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HMOPartners.js",["1212","1213","1214","1215","1216","1217","1218","1219","1220","1221","1222","1223","1224","1225","1226","1227","1228","1229","1230","1231","1232","1233"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\r\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  Checkbox,\r\n  TableCell,\r\n  Avatar,\r\n  TableRow,\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { categoryFilterOptions, defaultPageInfo } from \"helpers/mockData\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport {\r\n  changeTableLimit,\r\n  deleteItem,\r\n  deleteVar,\r\n  filterData,\r\n  handlePageChange,\r\n  banks,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport DeletePartner from \"components/modals/DeleteOrDisable\";\r\nimport { partnersHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport {\r\n  addPartner,\r\n  addPartnerCategory,\r\n  regeneratePartnerProfileUrl,\r\n} from \"components/graphQL/Mutation\";\r\nimport {\r\n  getPartners,\r\n  getSingleProvider,\r\n  getProviders,\r\n  DELETE_PARTNER,\r\n} from \"components/graphQL/useQuery\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport {\r\n  addNewPartnerValidationSchema,\r\n  addPartnerValidationSchema,\r\n  filterPartnersValidationSchema,\r\n} from \"helpers/validationSchemas\";\r\nimport Filter from \"components/Forms/Filters\";\r\nimport { PageInfo } from \"components/graphQL/fragment\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { EditDelBtn } from \"components/Buttons/EditDelBtn\";\r\nimport AddPartner from \"components/Forms/AddPartner\";\r\n\r\nconst HMOPartners = () => {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const { id, ids } = useParams();\r\n  const { displayAlert } = useAlert();\r\n  /* const [setCategoryDatas] = useState([]); */\r\n  const { setSelectedRows } = useActions();\r\n  const [partner, setPartners] = useState([]);\r\n  const [dropDown, setDropDown] = useState([]);\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [addPartners] = useMutation(addPartner);\r\n  const categoryData = useQuery(getSingleProvider);\r\n  const [delete_partner] = useLazyQuery(DELETE_PARTNER);\r\n  /*   const [searchPartner, setSearchPartner] = useState(\"\"); */\r\n  const [isDeleting, setIsDeleting] = useState({});\r\n  const [addPartnerCat] = useMutation(addPartnerCategory);\r\n  const { data: da, loading: load } = useQuery(getProviders);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [openAddPartner, setOpenAddPartner] = useState(false);\r\n  const [openFilterPartner, setOpenFilterPartner] = useState(false);\r\n  const [openDeletePartner, setOpenDeletePartner] = useState(false);\r\n  const [partnerToDelete, setPartnerToDelete] = useState(null);\r\n  const [partnerFilterValues, setPartnerFilterValues] = useState({\r\n    category: \"\",\r\n  });\r\n  const { selectedRows /* page */ } = useSelector((state) => state.tables);\r\n  const [openAddPartnerCategory, setAddPartnerCategory] = useState(false);\r\n  const [fetchPartners, { loading, error, refetch, variables }] =\r\n    useLazyQuery(getPartners);\r\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\r\n\r\n  const specializations = [\r\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\r\n    { key: \"Hospital\", value: \"Hospital\" },\r\n  ];\r\n  const categoryOptions = [\r\n    { key: \"Diagnostics\", value: \"diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"pharmacy\" },\r\n    { key: \"Hospital\", value: \"hospital\" },\r\n  ];\r\n  const classificationOptions = [\r\n    { key: \"Primary Healthcare\", value: \"Primary Healthcare\" },\r\n    { key: \"Secondary Healthcare\", value: \"Secondary Healthcare\" },\r\n  ];\r\n\r\n  const specializationOptions = [\r\n    { key: \"Dental Care\", value: \"Dental Care\" },\r\n    { key: \"Eye Clinic\", value: \"Eye Clinic\" },\r\n    { key: \"Skin Care\", value: \"Skin Care\" },\r\n    { key: \"Mental Care\", value: \"Mental Care\" },\r\n  ];\r\n  const specializations5 = [\r\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\r\n    { key: \"Hospital\", value: \"Hospital\" },\r\n  ];\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const darkButtonType = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const initialValues = {\r\n    Name: \"\",\r\n    date: \"\",\r\n    category: \"\",\r\n  };\r\n\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    email: \"\",\r\n    specialization: \"\",\r\n    category: \"\",\r\n    account: \"\",\r\n    address: \"\",\r\n    phone: \"\",\r\n    classification: \"\",\r\n    bank: \"\",\r\n    image: null,\r\n    provider: \"\",\r\n  };\r\n\r\n  const initialValues2 = {\r\n    category: \"\",\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then((res) => {\r\n        const { data } = res;\r\n\r\n        if (data) {\r\n          setPartners(data?.getPartners?.data || []);\r\n          setPageInfo(data?.getPartners?.pageInfo || defaultPageInfo);\r\n        }\r\n        if (!data) {\r\n          setPartners(res?.getPartners?.data || []);\r\n          setPageInfo(res?.getPartners?.pageInfo || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  const fetchPartnersData = async () => {\r\n    const res = fetchPartners({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        provider: ids,\r\n      },\r\n    });\r\n    setTableData(res, \"Couldn't fetch Partners data\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPartnersData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (da) {\r\n      const datas = da.getProviders.provider;\r\n      setDropDown(\r\n        datas?.map((i) => {\r\n          return { key: i.name, value: i._id };\r\n        })\r\n      );\r\n    }\r\n  }, [da]);\r\n\r\n  useEffect(() => {\r\n    (partner || []).map((p) => {\r\n      const newIsDeleting = isDeleting;\r\n      setIsDeleting({ [p._id]: false, ...newIsDeleting });\r\n      return null;\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [partner]);\r\n\r\n  const onSubmit = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const onSubmit2 = async (values, onSubmitProps) => {\r\n    const { category } = values;\r\n\r\n    try {\r\n      const addCatRes = await addPartnerCat({\r\n        variables: {\r\n          name: category,\r\n        },\r\n      });\r\n\r\n      if (addCatRes?.addPartner?.partner) {\r\n        setAddPartnerCategory(false);\r\n        onSubmitProps.resetForm();\r\n        const res = refetch();\r\n        setTableData(res, \"Couldn't fetch partners.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const onSubmit1 = async (values, onSubmitProps) => {\r\n    console.log(values);\r\n    let {\r\n      name,\r\n      email,\r\n      category,\r\n      phone,\r\n      bank,\r\n      specialization,\r\n      provider,\r\n      image,\r\n      account,\r\n    } = values;\r\n    name = name.trim();\r\n\r\n    try {\r\n      await addPartners({\r\n        variables: {\r\n          name,\r\n          email,\r\n          category,\r\n          specialization,\r\n          account,\r\n          phone,\r\n          bank,\r\n          logoImageUrl: image,\r\n          providerId: provider,\r\n        },\r\n        refetchQueries: [{ query: getPartners }],\r\n      });\r\n      enqueueSnackbar(\"Partner added successfully\", {\r\n        variant: \"success\",\r\n      });\r\n      onSubmitProps.resetForm();\r\n      setOpenAddPartner(false);\r\n    } catch (err) {\r\n      console.log(err, \"err\");\r\n      enqueueSnackbar(\"Email is already taken\", {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const onFilterCategoryChange = async (value) => {\r\n    try {\r\n      deleteVar(variables);\r\n      setPartnerFilterValues({ ...partnerFilterValues, category: value });\r\n      const filterVariables = { category: value };\r\n\r\n      const res = filterData(filterVariables, {\r\n        fetchData: fetchPartners,\r\n        refetch: refetch,\r\n        variables: variables,\r\n      });\r\n      await setTableData(res, \"couldn't filter table.\");\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setPartnerFilterValues, \"\");\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\r\n    setFilterValue(defaultVal);\r\n\r\n    deleteVar(variables);\r\n\r\n    const res = refetch();\r\n    await setTableData(res, \"couldn't filter table.\");\r\n  };\r\n  const [newProfileUrl, setNewProfileUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setNewProfileUrl(daa?.regeneratePartnerProfileUrl?.partner?.profileUrl);\r\n  }, [daa]);\r\n  const [Id, setId] = useState(\"\");\r\n  const handleGenerateLink = async (id) => {\r\n    setId(id);\r\n    await regenerate({\r\n      variables: {\r\n        id,\r\n      },\r\n      refetchQueries: [\r\n        {\r\n          query: getPartners,\r\n          variables: {\r\n            variables: pageInfo.page,\r\n            limit: PageInfo.limit,\r\n            providerId: ids,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const z = (id) => {\r\n    let b = \"\";\r\n    const m = daa?.regeneratePartnerProfileUrl?.partner?._id;\r\n    if (id === m) {\r\n      b = m;\r\n    } else {\r\n      b = \"\";\r\n    }\r\n    return b;\r\n  };\r\n  useEffect(() => {\r\n    partner.map((item) => {\r\n      if (item._id === Id) {\r\n        return {\r\n          ...item,\r\n          profileUrl: newProfileUrl,\r\n        };\r\n      }\r\n    });\r\n\r\n    //eslint-disable-next-line\r\n  }, [Id, newProfileUrl]);\r\n  if (error || categoryData.error)\r\n    return <NoData error={error || categoryData.error} />;\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      gap={{ sm: 4, xs: 2 }}\r\n      flexWrap=\"nowrap\"\r\n      height=\"100%\"\r\n    >\r\n      <Grid\r\n        item\r\n        container\r\n        gap={2}\r\n        direction={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          justifyContent=\"flex-end\"\r\n          alignItems=\"center\"\r\n          flex={{ sm: 1, xs: 1, md: 1 }}\r\n        >\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<PersonAddAlt1Icon />}\r\n              title=\"Add Partner\"\r\n              type={darkButtonType}\r\n              onClick={() => setOpenAddPartner(true)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        filters={\r\n          <Filter\r\n            onHandleChange={(e) => onFilterCategoryChange(e?.target?.value)}\r\n            onClickClearBtn={() => onFilterCategoryChange(\"\")}\r\n            options={[{ key: \"Category\", value: \"\" }, ...categoryFilterOptions]}\r\n            name=\"category\"\r\n            placeholder=\"None\"\r\n            value={partnerFilterValues.category}\r\n            hasClearBtn={true}\r\n            disable={loading}\r\n          />\r\n        }\r\n      >\r\n        {load || loading ? (\r\n          <Loader />\r\n        ) : partner.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={partnersHeadCells}\r\n              rows={partner}\r\n              paginationLabel=\"Partners per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchPartners, {\r\n                  first: e,\r\n                  provider: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchPartners, page, pageInfo, {\r\n                  provider: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {partner.map((row, index) => {\r\n                const isItemSelected = isSelected(row.id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                const { _id, logoImageUrl, name, email, category } = row;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ maxWidth: \"20rem\" }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"left\",\r\n                        }}\r\n                      >\r\n                        {/* <span style={{ marginRight: \"1rem\" }}>\r\n                          <Avatar\r\n                            alt={`Display Photo of ${name}`}\r\n                            src={logoImageUrl}\r\n                            sx={{ width: 24, height: 24 }}\r\n                          />\r\n                        </span> */}\r\n                        <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {email}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {category}\r\n                    </TableCell>\r\n\r\n                    {/* <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {profileUrl || z(_id) !== \"\" ? (\r\n                        <Typography\r\n                          style={{\r\n                            color: \"rgb(0 0 0)\",\r\n                            fontWeight: 400,\r\n                            fontSize: \"1.25rem\",\r\n                            maxWidth: \"20rem\",\r\n                          }}\r\n                          sx={{ display: \"flex\", alignItems: \"center\" }}\r\n                        >\r\n                          {trucateProfileLink(profileUrl ? profileUrl : z(_id))}\r\n                          <div style={{ marginLeft: \"1rem\" }}>\r\n                            <Copy\r\n                              name=\"Profile Link\"\r\n                              text={profileUrl ? profileUrl : z(_id)}\r\n                            />\r\n                          </div>\r\n                        </Typography>\r\n                      ) : (\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          disableRipple\r\n                          className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                          onClick={() => handleGenerateLink(_id)}\r\n                        >\r\n                          Generate Link\r\n                        </Button>\r\n                      )}\r\n                    </TableCell> \r\n                    <TableCell align=\"center\" className={classes.tableCell}>\r\n                      {isDeleting[_id] ? (\r\n                        <Loader />\r\n                      ) : (\r\n                        <EditDelBtn\r\n                          onHandleClick={() => {\r\n                            setPartnerToDelete(_id || \"\");\r\n                            setOpenDeletePartner(true);\r\n                          }}\r\n                          type=\"delete\"\r\n                          text=\"Delete partner\"\r\n                        />\r\n                      )}\r\n                    </TableCell>*/}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={partnersHeadCells}\r\n            paginationLabel=\"Partners per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n      <Modals\r\n        isOpen={openFilterPartner}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        width={{ sm: \"40vw\", xs: \"90vw\", md: \"40vw\" }}\r\n        handleClose={() => setOpenFilterPartner(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={onSubmit}\r\n          validateOnBlur={false}\r\n          validationSchema={filterPartnersValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={3}>\r\n                  <Grid item marginBottom={3}>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          name=\"Name\"\r\n                          label=\"Name\"\r\n                          placeholder=\"Select name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializations}\r\n                          name=\"date\"\r\n                          label=\"Date\"\r\n                          placeholder=\"Choose Date\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  container\r\n                  spacing={2}\r\n                  style={{ marginBottom: \"10rem\" }}\r\n                >\r\n                  <Grid item xs={6}>\r\n                    <FormikControl\r\n                      control=\"select\"\r\n                      options={specializations}\r\n                      name=\"category\"\r\n                      label=\"Category\"\r\n                      placeholder=\"Select Category\"\r\n                    />\r\n                  </Grid>\r\n                  {/* Placeholder grid */}\r\n                  <Grid item md></Grid>\r\n                </Grid>\r\n                <Grid item container xs={12}>\r\n                  <CustomButton\r\n                    title=\"Apply Filter\"\r\n                    width=\"100%\"\r\n                    type={buttonType}\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                  />\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      {/* ADD NEW PARTER MODAL */}\r\n      <AddPartner\r\n        category={false}\r\n        id={ids}\r\n        open={openAddPartner}\r\n        handleClose={() => setOpenAddPartner(false)}\r\n      />\r\n\r\n      {/* Add Partner Category */}\r\n      <Modals\r\n        isOpen={openAddPartnerCategory}\r\n        title=\"Add Partners Category\"\r\n        rowSpacing={5}\r\n        handleClose={() => setAddPartnerCategory(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues2}\r\n          onSubmit={onSubmit2}\r\n          validationSchema={addPartnerValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid container direction=\"column\" gap={3}>\r\n                  <Grid item container>\r\n                    <Grid item container direction=\"column\" gap={1}>\r\n                      <Grid item container>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializations5}\r\n                          name=\"category\"\r\n                          label=\"Category\"\r\n                          placeholder=\"Specialization\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <CustomButton\r\n                      title=\"Add Partner\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n      <DeletePartner\r\n        open={openDeletePartner}\r\n        setOpen={setOpenDeletePartner}\r\n        title=\"Delete Partner\"\r\n        btnValue=\"delete\"\r\n        onConfirm={async () => {\r\n          const res = deleteItem(\r\n            delete_partner,\r\n            partnerToDelete,\r\n            setPartnerToDelete,\r\n            refetch,\r\n            Typography,\r\n            enqueueSnackbar,\r\n            setIsDeleting,\r\n            isDeleting\r\n          );\r\n          setOpenDeletePartner(false);\r\n          await setTableData(res, \"Couldn't refetch Partners\");\r\n        }}\r\n        confirmationMsg=\"delete partner\"\r\n        onCancel={() => {\r\n          setPartnerToDelete(null);\r\n        }}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HMOPartners;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaFilterPartnerPage.js",["1234","1235","1236","1237","1238","1239","1240","1241","1242","1243","1244","1245","1246","1247","1248","1249","1250","1251","1252","1253","1254","1255"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\r\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport AddPartner from \"components/Forms/AddPartner\";\r\nimport {\r\n  Checkbox,\r\n  TableCell,\r\n  Avatar,\r\n  TableRow,\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { categoryFilterOptions, defaultPageInfo } from \"helpers/mockData\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport {\r\n  changeTableLimit,\r\n  deleteItem,\r\n  deleteVar,\r\n  filterData,\r\n  handlePageChange,\r\n  banks,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport DeletePartner from \"components/modals/DeleteOrDisable\";\r\nimport { partnersHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport {\r\n  addPartner,\r\n  addPartnerCategory,\r\n  regeneratePartnerProfileUrl,\r\n} from \"components/graphQL/Mutation\";\r\nimport {\r\n  getPartners,\r\n  getSingleProvider,\r\n  getProviders,\r\n  DELETE_PARTNER,\r\n} from \"components/graphQL/useQuery\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport {\r\n  addNewPartnerValidationSchema,\r\n  addPartnerValidationSchema,\r\n  filterPartnersValidationSchema,\r\n} from \"helpers/validationSchemas\";\r\nimport Filter from \"components/Forms/Filters\";\r\nimport { PageInfo } from \"components/graphQL/fragment\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { EditDelBtn } from \"components/Buttons/EditDelBtn\";\r\n\r\nconst HealaFilterPartnerPage = () => {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const { id, ids } = useParams();\r\n  const { displayAlert } = useAlert();\r\n  /* const [setCategoryDatas] = useState([]); */\r\n  const { setSelectedRows } = useActions();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [partner, setPartners] = useState([]);\r\n  const [dropDown, setDropDown] = useState([]);\r\n  const [addPartners] = useMutation(addPartner);\r\n  const categoryData = useQuery(getSingleProvider);\r\n  const [delete_partner] = useLazyQuery(DELETE_PARTNER);\r\n  /*   const [searchPartner, setSearchPartner] = useState(\"\"); */\r\n  const [isDeleting, setIsDeleting] = useState({});\r\n  const [addPartnerCat] = useMutation(addPartnerCategory);\r\n  const { data: da, loading: load } = useQuery(getProviders);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [openAddPartner, setOpenAddPartner] = useState(false);\r\n  const [openFilterPartner, setOpenFilterPartner] = useState(false);\r\n  const [openDeletePartner, setOpenDeletePartner] = useState(false);\r\n  const [partnerToDelete, setPartnerToDelete] = useState(null);\r\n  const [partnerFilterValues, setPartnerFilterValues] = useState({\r\n    category: \"\",\r\n  });\r\n  const { selectedRows /* page */ } = useSelector((state) => state.tables);\r\n  const [openAddPartnerCategory, setAddPartnerCategory] = useState(false);\r\n  const [fetchPartners, { loading, error, refetch, variables }] =\r\n    useLazyQuery(getPartners);\r\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\r\n\r\n  const specializations = [\r\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\r\n    { key: \"Hospital\", value: \"Hospital\" },\r\n  ];\r\n  const categoryOptions = [\r\n    { key: \"Diagnostics\", value: \"diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"pharmacy\" },\r\n    { key: \"Hospital\", value: \"hospital\" },\r\n  ];\r\n  const classificationOptions = [\r\n    { key: \"Primary Healthcare\", value: \"Primary Healthcare\" },\r\n    { key: \"Secondary Healthcare\", value: \"Secondary Healthcare\" },\r\n  ];\r\n\r\n  const specializationOptions = [\r\n    { key: \"Dental Care\", value: \"Dental Care\" },\r\n    { key: \"Eye Clinic\", value: \"Eye Clinic\" },\r\n    { key: \"Skin Care\", value: \"Skin Care\" },\r\n    { key: \"Mental Care\", value: \"Mental Care\" },\r\n  ];\r\n  const specializations5 = [\r\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\r\n    { key: \"Hospital\", value: \"Hospital\" },\r\n  ];\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const darkButtonType = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const initialValues = {\r\n    Name: \"\",\r\n    date: \"\",\r\n    category: \"\",\r\n  };\r\n\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    email: \"\",\r\n    specialization: \"\",\r\n    category: \"\",\r\n    account: \"\",\r\n    address: \"\",\r\n    phone: \"\",\r\n    classification: \"\",\r\n    bank: \"\",\r\n    image: null,\r\n    provider: \"\",\r\n  };\r\n\r\n  const initialValues2 = {\r\n    category: \"\",\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then((res) => {\r\n        const { data } = res;\r\n        if (data) {\r\n          setPartners(data?.getPartners?.data || []);\r\n          setPageInfo(data?.getPartners?.pageInfo || defaultPageInfo);\r\n        }\r\n        if (!data) {\r\n          setPartners(res?.getPartners?.data || []);\r\n          setPageInfo(res?.getPartners?.pageInfo || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  const fetchPartnersData = async () => {\r\n    const res = fetchPartners({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        provider: ids,\r\n      },\r\n    });\r\n    setTableData(res, \"Couldn't fetch Partners data\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPartnersData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (da) {\r\n      const datas = da.getProviders.provider;\r\n      setDropDown(\r\n        datas?.map((i) => {\r\n          return { key: i.name, value: i._id };\r\n        })\r\n      );\r\n    }\r\n  }, [da]);\r\n\r\n  useEffect(() => {\r\n    (partner || []).map((p) => {\r\n      const newIsDeleting = isDeleting;\r\n      setIsDeleting({ [p._id]: false, ...newIsDeleting });\r\n      return null;\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [partner]);\r\n\r\n  const onSubmit = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const onSubmit2 = async (values, onSubmitProps) => {\r\n    const { category } = values;\r\n\r\n    try {\r\n      const addCatRes = await addPartnerCat({\r\n        variables: {\r\n          name: category,\r\n        },\r\n      });\r\n\r\n      if (addCatRes?.addPartner?.partner) {\r\n        setAddPartnerCategory(false);\r\n        onSubmitProps.resetForm();\r\n        const res = refetch();\r\n        setTableData(res, \"Couldn't fetch partners.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const onSubmit1 = async (values, onSubmitProps) => {\r\n    console.log(values);\r\n    let {\r\n      name,\r\n      email,\r\n      category,\r\n      phone,\r\n      bank,\r\n      specialization,\r\n      provider,\r\n      image,\r\n      account,\r\n    } = values;\r\n    name = name.trim();\r\n\r\n    try {\r\n      await addPartners({\r\n        variables: {\r\n          name,\r\n          email,\r\n          category,\r\n          specialization,\r\n          account,\r\n          phone,\r\n          bank,\r\n          logoImageUrl: image,\r\n          providerId: provider,\r\n        },\r\n        refetchQueries: [{ query: getPartners }],\r\n      });\r\n      enqueueSnackbar(\"Partner added successfully\", {\r\n        variant: \"success\",\r\n      });\r\n      onSubmitProps.resetForm();\r\n      setOpenAddPartner(false);\r\n    } catch (err) {\r\n      console.log(err, \"err\");\r\n      enqueueSnackbar(\"Email is already taken\", {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const onFilterCategoryChange = async (value) => {\r\n    try {\r\n      deleteVar(variables);\r\n      setPartnerFilterValues({ ...partnerFilterValues, category: value });\r\n      const filterVariables = { category: value };\r\n\r\n      const res = filterData(filterVariables, {\r\n        fetchData: fetchPartners,\r\n        refetch: refetch,\r\n        variables: variables,\r\n      });\r\n      await setTableData(res, \"couldn't filter table.\");\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setPartnerFilterValues, \"\");\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\r\n    setFilterValue(defaultVal);\r\n\r\n    deleteVar(variables);\r\n\r\n    const res = refetch();\r\n    await setTableData(res, \"couldn't filter table.\");\r\n  };\r\n  const [newProfileUrl, setNewProfileUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setNewProfileUrl(daa?.regeneratePartnerProfileUrl?.partner?.profileUrl);\r\n  }, [daa]);\r\n  const [Id, setId] = useState(\"\");\r\n  const handleGenerateLink = async (id) => {\r\n    setId(id);\r\n    await regenerate({\r\n      variables: {\r\n        id,\r\n      },\r\n      refetchQueries: [\r\n        {\r\n          query: getPartners,\r\n          variables: {\r\n            variables: pageInfo.page,\r\n            limit: PageInfo.limit,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const z = (id) => {\r\n    let b = \"\";\r\n    const m = daa?.regeneratePartnerProfileUrl?.partner?._id;\r\n    if (id === m) {\r\n      b = m;\r\n    } else {\r\n      b = \"\";\r\n    }\r\n    return b;\r\n  };\r\n  useEffect(() => {\r\n    partner.map((item) => {\r\n      if (item._id === Id) {\r\n        return {\r\n          ...item,\r\n          profileUrl: newProfileUrl,\r\n        };\r\n      }\r\n    });\r\n\r\n    //eslint-disable-next-line\r\n  }, [Id, newProfileUrl]);\r\n  if (error || categoryData.error)\r\n    return <NoData error={error || categoryData.error} />;\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      gap={{ sm: 4, xs: 2 }}\r\n      flexWrap=\"nowrap\"\r\n      height=\"100%\"\r\n    >\r\n      <Grid\r\n        item\r\n        container\r\n        gap={2}\r\n        direction={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          justifyContent=\"flex-end\"\r\n          alignItems=\"center\"\r\n          flex={{ sm: 1, xs: 1, md: 1 }}\r\n        >\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<PersonAddAlt1Icon />}\r\n              title=\"Add Partner\"\r\n              type={darkButtonType}\r\n              onClick={() => setOpenAddPartner(true)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        filters={\r\n          <Filter\r\n            onHandleChange={(e) => onFilterCategoryChange(e?.target?.value)}\r\n            onClickClearBtn={() => onFilterCategoryChange(\"\")}\r\n            options={[{ key: \"Category\", value: \"\" }, ...categoryFilterOptions]}\r\n            name=\"category\"\r\n            placeholder=\"None\"\r\n            value={partnerFilterValues.category}\r\n            hasClearBtn={true}\r\n            disable={loading}\r\n          />\r\n        }\r\n      >\r\n        {load || loading ? (\r\n          <Loader />\r\n        ) : partner.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={partnersHeadCells}\r\n              rows={partner}\r\n              paginationLabel=\"Partner per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchPartners, {\r\n                  first: e,\r\n                  provider: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchPartners, page, pageInfo, {\r\n                  provider: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {partner.map((row, index) => {\r\n                const isItemSelected = isSelected(row.id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                const { _id, logoImageUrl, name, email, category } = row;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ maxWidth: \"20rem\" }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"left\",\r\n                        }}\r\n                      >\r\n                        {/* <span style={{ marginRight: \"1rem\" }}>\r\n                          <Avatar\r\n                            alt={`Display Photo of ${name}`}\r\n                            src={logoImageUrl}\r\n                            sx={{ width: 24, height: 24 }}\r\n                          />\r\n                        </span> */}\r\n                        <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {email}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {category}\r\n                    </TableCell>\r\n\r\n                    {/* <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {profileUrl || z(_id) !== \"\" ? (\r\n                        <Typography\r\n                          style={{\r\n                            color: \"rgb(0 0 0)\",\r\n                            fontWeight: 400,\r\n                            fontSize: \"1.25rem\",\r\n                            maxWidth: \"20rem\",\r\n                          }}\r\n                          sx={{ display: \"flex\", alignItems: \"center\" }}\r\n                        >\r\n                          {trucateProfileLink(profileUrl ? profileUrl : z(_id))}\r\n                          <div style={{ marginLeft: \"1rem\" }}>\r\n                            <Copy\r\n                              name=\"Profile Link\"\r\n                              text={profileUrl ? profileUrl : z(_id)}\r\n                            />\r\n                          </div>\r\n                        </Typography>\r\n                      ) : (\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          disableRipple\r\n                          className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                          onClick={() => handleGenerateLink(_id)}\r\n                        >\r\n                          Generate Link\r\n                        </Button>\r\n                      )}\r\n                    </TableCell> \r\n                    <TableCell align=\"center\" className={classes.tableCell}>\r\n                      {isDeleting[_id] ? (\r\n                        <Loader />\r\n                      ) : (\r\n                        <EditDelBtn\r\n                          onHandleClick={() => {\r\n                            setPartnerToDelete(_id || \"\");\r\n                            setOpenDeletePartner(true);\r\n                          }}\r\n                          type=\"delete\"\r\n                          text=\"Delete partner\"\r\n                        />\r\n                      )}\r\n                    </TableCell>*/}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={partnersHeadCells}\r\n            paginationLabel=\"Doctors per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n      <Modals\r\n        isOpen={openFilterPartner}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        width={{ sm: \"40vw\", xs: \"90vw\", md: \"40vw\" }}\r\n        handleClose={() => setOpenFilterPartner(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={onSubmit}\r\n          validateOnBlur={false}\r\n          validationSchema={filterPartnersValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={3}>\r\n                  <Grid item marginBottom={3}>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          name=\"Name\"\r\n                          label=\"Name\"\r\n                          placeholder=\"Select name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializations}\r\n                          name=\"date\"\r\n                          label=\"Date\"\r\n                          placeholder=\"Choose Date\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  container\r\n                  spacing={2}\r\n                  style={{ marginBottom: \"10rem\" }}\r\n                >\r\n                  <Grid item xs={6}>\r\n                    <FormikControl\r\n                      control=\"select\"\r\n                      options={specializations}\r\n                      name=\"category\"\r\n                      label=\"Category\"\r\n                      placeholder=\"Select Category\"\r\n                    />\r\n                  </Grid>\r\n                  {/* Placeholder grid */}\r\n                  <Grid item md></Grid>\r\n                </Grid>\r\n                <Grid item container xs={12}>\r\n                  <CustomButton\r\n                    title=\"Apply Filter\"\r\n                    width=\"100%\"\r\n                    type={buttonType}\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                  />\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      {/* ADD NEW PARTER MODAL */}\r\n      <AddPartner\r\n        id={ids}\r\n        open={openAddPartner}\r\n        handleClose={() => setOpenAddPartner(false)}\r\n        category={true}\r\n      />\r\n      {/* <Modals\r\n        isOpen={openAddPartner}\r\n        title=\"Add Partners\"\r\n        rowSpacing={5}\r\n        handleClose={() => setOpenAddPartner(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={addNewPartnerValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty, values, setFieldValue }) => {\r\n            const { classification, category } = values;\r\n            return (\r\n              <Form style={{ marginTop: \"1rem\" }}>\r\n                <Grid container direction=\"column\" gap={1.5}>\r\n                  <Grid item container>\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Name\"\r\n                          id=\"name\"\r\n                          name=\"name\"\r\n                          placeholder=\"Enter Partner name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Email\"\r\n                          id=\"name\"\r\n                          name=\"email\"\r\n                          placeholder=\"Enter Email\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\" Account Number\"\r\n                          id=\"account\"\r\n                          name=\"account\"\r\n                          placeholder=\"Enter Account Number\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Phone Number\"\r\n                          id=\"phone\"\r\n                          name=\"phone\"\r\n                          placeholder=\"Enter Phone Number\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={categoryOptions}\r\n                          name=\"category\"\r\n                          label=\"Category\"\r\n                          placeholder=\"Category\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={banks}\r\n                          name=\"bank\"\r\n                          label=\"Bank\"\r\n                          placeholder=\"Select Bank\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    {category === \"hospital\" && (\r\n                      <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={dropDown}\r\n                            name=\"provider\"\r\n                            label=\"Provider\"\r\n                            id=\"provider\"\r\n                            placeholder=\"Select Provider\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={classificationOptions}\r\n                            name=\"classification\"\r\n                            label=\"Classification\"\r\n                            id=\"classification\"\r\n                            placeholder=\"select classification\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    )}\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"file\"\r\n                          name=\"image\"\r\n                          label=\"Company Logo\"\r\n                          setFieldValue={setFieldValue}\r\n                        />\r\n                      </Grid>\r\n                      {classification === \"Secondary Healthcare\" && (\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={specializationOptions}\r\n                            name=\"specialization\"\r\n                            label=\"Specialization\"\r\n                            id=\"specialization\"\r\n                            placeholder=\"Select Specialization\"\r\n                          />\r\n                        </Grid>\r\n                      )}\r\n                    </Grid>\r\n                    <Grid item container flexWrap=\"nowrap\">\r\n                      <Grid item container>\r\n                        <FormikControl\r\n                          control=\"textarea\"\r\n                          name=\"address\"\r\n                          minRows={3}\r\n                          label=\"Address\"\r\n                          placeholder=\"Enter address\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container sx={{ mt: 1 }}>\r\n                    <CustomButton\r\n                      title=\"Add Partner\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals> */}\r\n\r\n      {/* Add Partner Category */}\r\n      <Modals\r\n        isOpen={openAddPartnerCategory}\r\n        title=\"Add Partners Category\"\r\n        rowSpacing={5}\r\n        handleClose={() => setAddPartnerCategory(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues2}\r\n          onSubmit={onSubmit2}\r\n          validationSchema={addPartnerValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid container direction=\"column\" gap={3}>\r\n                  <Grid item container>\r\n                    <Grid item container direction=\"column\" gap={1}>\r\n                      <Grid item container>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializations5}\r\n                          name=\"category\"\r\n                          label=\"Category\"\r\n                          placeholder=\"Specialization\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <CustomButton\r\n                      title=\"Add Partner\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n      <DeletePartner\r\n        open={openDeletePartner}\r\n        setOpen={setOpenDeletePartner}\r\n        title=\"Delete Partner\"\r\n        btnValue=\"delete\"\r\n        onConfirm={async () => {\r\n          const res = deleteItem(\r\n            delete_partner,\r\n            partnerToDelete,\r\n            setPartnerToDelete,\r\n            refetch,\r\n            Typography,\r\n            enqueueSnackbar,\r\n            setIsDeleting,\r\n            isDeleting\r\n          );\r\n          setOpenDeletePartner(false);\r\n          await setTableData(res, \"Couldn't refetch Partners\");\r\n        }}\r\n        confirmationMsg=\"delete partner\"\r\n        onCancel={() => {\r\n          setPartnerToDelete(null);\r\n        }}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HealaFilterPartnerPage;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HMOUsers.js",["1256","1257","1258","1259","1260","1261","1262","1263","1264","1265","1266","1267"],"import React, { useState, useEffect } from \"react\";\r\nimport { useLazyQuery, NetworkStatus } from \"@apollo/client\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport { Grid } from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useStyles } from \"styles/patientsPageStyles\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport PatientFilters from \"components/Forms/Filters/PatientFilters\";\r\nimport { patientsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo, searchOptions } from \"helpers/mockData\";\r\nimport {\r\n  getPatients,\r\n  getPatientsByPlan,\r\n  getPatientsByStatus,\r\n} from \"components/graphQL/useQuery\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport { useParams, Link, NavLink, Redirect } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { getSearchPlaceholder } from \"helpers/func\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { Checkbox, Chip, TableCell, TableRow } from \"@mui/material\";\r\n\r\nconst HMOUsers = () => {\r\n  const classes = useStyles();\r\n  const { id, ids } = useParams();\r\n  const history = useHistory();\r\n  const theme = useTheme();\r\n  const { setSelectedRows } = useActions();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  // const navigate = useNavigate();\r\n  console.log(ids);\r\n  const { displayAlert } = useAlert();\r\n  const [profiles, setProfiles] = useState([]);\r\n  const [fetchPatient, { loading, refetch, error, variables, networkStatus }] =\r\n    useLazyQuery(getPatients);\r\n\r\n  const [\r\n    fetchPatientByStatus,\r\n    {\r\n      loading: byStatusLoading,\r\n      variables: byStatusVaribles,\r\n      refetch: byStatusRefetch,\r\n    },\r\n  ] = useLazyQuery(getPatientsByStatus);\r\n  const [\r\n    fetchPatientByPlan,\r\n    {\r\n      loading: byPlanLoading,\r\n      variables: byPlanVaribles,\r\n      refetch: byPlanRefetch,\r\n    },\r\n  ] = useLazyQuery(getPatientsByPlan);\r\n\r\n  const [pageInfo, setPageInfo] = useState({\r\n    page: 0,\r\n    totalPages: 1,\r\n    hasNextPage: false,\r\n    hasPrevPage: false,\r\n    limit: 10,\r\n    totalDocs: 0,\r\n  });\r\n  useEffect(() => {\r\n    fetchPatient({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        provider: ids,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setPageInfo(data?.profiles?.pageInfo || []);\r\n          setProfiles(data?.profiles?.data || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(data?.profiles?.pageInfo || defaultPageInfo);\r\n        setProfiles(data?.profiles?.data || []);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  // if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n      <Grid\r\n        item\r\n        container\r\n        spacing={2}\r\n        className={classes.searchFilterContainer}\r\n      >\r\n        <Grid item container flexWrap=\"wrap\" spacing={4}></Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        filters={\r\n          <PatientFilters\r\n            setProfiles={setProfiles}\r\n            setPageInfo={setPageInfo}\r\n            queryParams={{\r\n              patientsParams: { fetchPatient, loading, refetch, variables },\r\n              patientsByStatusParams: {\r\n                byStatusLoading,\r\n                byStatusVaribles,\r\n                byStatusRefetch,\r\n                fetchPatientByStatus,\r\n              },\r\n              patientsByPlanParams: {\r\n                byPlanLoading,\r\n                byPlanVaribles,\r\n                byPlanRefetch,\r\n                fetchPatientByPlan,\r\n              },\r\n            }}\r\n          />\r\n        }\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{\r\n              fetchData: fetchPatient,\r\n              variables,\r\n              loading,\r\n              newVariables: { provider: ids },\r\n            }}\r\n            setPageInfo={(data) => setPageInfo(data?.profiles?.pageInfo || {})}\r\n            setProfiles={(data) => setProfiles(data?.profiles?.data || [])}\r\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\r\n            filterOptions={searchOptions}\r\n          />\r\n        }\r\n      >\r\n        {loading || byStatusLoading || byPlanLoading ? (\r\n          <Loader />\r\n        ) : networkStatus === NetworkStatus.refetch ? (\r\n          <Loader />\r\n        ) : profiles.length > 0 ? (\r\n          /* ================= PATIENTS TABLE ================= */\r\n          <Grid\r\n            container\r\n            item\r\n            direction=\"column\"\r\n            overflow=\"hidden\"\r\n            maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n          >\r\n            <EnhancedTable\r\n              headCells={patientsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"Patients per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchPatient, {\r\n                  first: e,\r\n                  provider: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchPatient, page, pageInfo, {\r\n                  provider: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const {\r\n                  _id,\r\n                  dociId,\r\n                  firstName,\r\n                  lastName,\r\n                  plan,\r\n                  provider,\r\n                  consultations,\r\n                  status,\r\n                } = row;\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: \"pointer\" }}\r\n                    // onClick={(e) => {\r\n                    //   <Redirect\r\n                    //     to={{\r\n                    //       pathname: `/patients/${_id}`,\r\n                    //       state: { from: `/user-type/heala/${id}/${_id}` },\r\n                    //     }}\r\n                    //   />;\r\n                    // }}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <NavLink\r\n                        to={`/user-type/hmo/${id}/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    {/* </NavLink> */}\r\n\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        textAlign: \"left\",\r\n                      }}\r\n                    >\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        {dociId?.split(\"-\")[1]}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ fontSize: \"1.25rem\" }}>{`${\r\n                            firstName && firstName\r\n                          } ${lastName && lastName}`}</span>\r\n                        </div>\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        {plan ? plan : \"No Plan\"}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\", textColor: \"red\" }}\r\n                      >\r\n                        {provider ? provider : \"No Provider\"}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\", textColor: \"inherit\" }}\r\n                      >\r\n                        {consultations ? consultations : 0}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\", textColor: \"inherit\" }}\r\n                      >\r\n                        <Chip\r\n                          label={\r\n                            status && status === \"Active\"\r\n                              ? \"Active\"\r\n                              : \"Inactive\"\r\n                          }\r\n                          className={classes.badge}\r\n                          style={{\r\n                            background:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.lightGreen\r\n                                : theme.palette.common.lightRed,\r\n                            color:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.green\r\n                                : theme.palette.common.red,\r\n                          }}\r\n                        />\r\n                      </NavLink>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={patientsHeadCells}\r\n            paginationLabel=\"Patients per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HMOUsers;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HospitalUsers.js",["1268","1269","1270","1271","1272","1273","1274","1275","1276","1277","1278"],"import React, { useState, useEffect } from \"react\";\r\nimport { useLazyQuery, NetworkStatus } from \"@apollo/client\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport { Grid } from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useStyles } from \"styles/patientsPageStyles\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport PatientFilters from \"components/Forms/Filters/PatientFilters\";\r\nimport { patientsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo, searchOptions } from \"helpers/mockData\";\r\nimport {\r\n  getPatients,\r\n  getPatientsByPlan,\r\n  getPatientsByStatus,\r\n} from \"components/graphQL/useQuery\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport { useParams, Link, NavLink, Redirect } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { getSearchPlaceholder } from \"helpers/func\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { Checkbox, Chip, TableCell, TableRow } from \"@mui/material\";\r\n\r\nconst HospitalUsers = () => {\r\n  const classes = useStyles();\r\n  const { ids: id } = useParams();\r\n  const history = useHistory();\r\n  const theme = useTheme();\r\n  const { setSelectedRows } = useActions();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  // const navigate = useNavigate();\r\n\r\n  const { displayAlert } = useAlert();\r\n  const [profiles, setProfiles] = useState([]);\r\n  const [fetchPatient, { loading, refetch, error, variables, networkStatus }] =\r\n    useLazyQuery(getPatients);\r\n\r\n  const [\r\n    fetchPatientByStatus,\r\n    {\r\n      loading: byStatusLoading,\r\n      variables: byStatusVaribles,\r\n      refetch: byStatusRefetch,\r\n    },\r\n  ] = useLazyQuery(getPatientsByStatus);\r\n  const [\r\n    fetchPatientByPlan,\r\n    {\r\n      loading: byPlanLoading,\r\n      variables: byPlanVaribles,\r\n      refetch: byPlanRefetch,\r\n    },\r\n  ] = useLazyQuery(getPatientsByPlan);\r\n\r\n  const [pageInfo, setPageInfo] = useState({\r\n    page: 0,\r\n    totalPages: 1,\r\n    hasNextPage: false,\r\n    hasPrevPage: false,\r\n    limit: 10,\r\n    totalDocs: 0,\r\n  });\r\n  useEffect(() => {\r\n    fetchPatient({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        provider: id,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setPageInfo(data?.profiles?.pageInfo || []);\r\n          setProfiles(data?.profiles?.data || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(data?.profiles?.pageInfo || defaultPageInfo);\r\n        setProfiles(data?.profiles?.data || []);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  // if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n      <Grid\r\n        item\r\n        container\r\n        spacing={2}\r\n        className={classes.searchFilterContainer}\r\n      >\r\n        <Grid item container flexWrap=\"wrap\" spacing={4}></Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        filters={\r\n          <PatientFilters\r\n            setProfiles={setProfiles}\r\n            setPageInfo={setPageInfo}\r\n            queryParams={{\r\n              patientsParams: { fetchPatient, loading, refetch, variables },\r\n              patientsByStatusParams: {\r\n                byStatusLoading,\r\n                byStatusVaribles,\r\n                byStatusRefetch,\r\n                fetchPatientByStatus,\r\n              },\r\n              patientsByPlanParams: {\r\n                byPlanLoading,\r\n                byPlanVaribles,\r\n                byPlanRefetch,\r\n                fetchPatientByPlan,\r\n              },\r\n            }}\r\n          />\r\n        }\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{\r\n              fetchData: fetchPatient,\r\n              variables,\r\n              loading,\r\n              newVariables: {},\r\n            }}\r\n            setPageInfo={(data) => setPageInfo(data?.profiles?.pageInfo || {})}\r\n            setProfiles={(data) => setProfiles(data?.profiles?.data || [])}\r\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\r\n            filterOptions={searchOptions}\r\n          />\r\n        }\r\n      >\r\n        {loading || byStatusLoading || byPlanLoading ? (\r\n          <Loader />\r\n        ) : networkStatus === NetworkStatus.refetch ? (\r\n          <Loader />\r\n        ) : profiles.length > 0 ? (\r\n          /* ================= PATIENTS TABLE ================= */\r\n          <Grid\r\n            container\r\n            item\r\n            direction=\"column\"\r\n            overflow=\"hidden\"\r\n            maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n          >\r\n            <EnhancedTable\r\n              headCells={patientsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"Patients per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchPatient, {\r\n                  first: e,\r\n                  provider: id,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchPatient, page, pageInfo, {\r\n                  provider: id,\r\n                });\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const {\r\n                  _id,\r\n                  dociId,\r\n                  firstName,\r\n                  lastName,\r\n                  plan,\r\n                  provider,\r\n                  consultations,\r\n                  status,\r\n                } = row;\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: \"pointer\" }}\r\n                    onClick={(e) => {\r\n                      <Redirect\r\n                        to={{\r\n                          pathname: `/patients/${_id}`,\r\n                          state: { from: `/user-type/heala/${id}/${_id}` },\r\n                        }}\r\n                      />;\r\n                    }}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    {/* </NavLink> */}\r\n\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        textAlign: \"left\",\r\n                      }}\r\n                    >\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        {dociId?.split(\"-\")[1]}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ fontSize: \"1.25rem\" }}>{`${\r\n                            firstName && firstName\r\n                          } ${lastName && lastName}`}</span>\r\n                        </div>\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        {plan ? plan : \"No Plan\"}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\", textColor: \"red\" }}\r\n                      >\r\n                        {provider ? provider : \"No Provider\"}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\", textColor: \"inherit\" }}\r\n                      >\r\n                        {consultations ? consultations : 0}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\", textColor: \"inherit\" }}\r\n                      >\r\n                        <Chip\r\n                          label={\r\n                            status && status === \"Active\"\r\n                              ? \"Active\"\r\n                              : \"Inactive\"\r\n                          }\r\n                          className={classes.badge}\r\n                          style={{\r\n                            background:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.lightGreen\r\n                                : theme.palette.common.lightRed,\r\n                            color:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.green\r\n                                : theme.palette.common.red,\r\n                          }}\r\n                        />\r\n                      </NavLink>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={patientsHeadCells}\r\n            paginationLabel=\"Patients per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HospitalUsers;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HMODoctorPage.js",["1279","1280","1281","1282","1283","1284","1285","1286","1287","1288","1289"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NetworkStatus } from \"@apollo/client\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  Grid,\r\n  TableRow,\r\n  TableCell,\r\n  Button,\r\n  Checkbox,\r\n  Chip,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { timeConverter } from \"components/Utilities/Time\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { useStyles } from \"../../styles/doctorsPageStyles\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport {\r\n  getDoctorsProfile,\r\n  getDoctorsProfileByStatus,\r\n} from \"components/graphQL/useQuery\";\r\nimport { hcpsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { createDOctorProfile } from \"components/graphQL/Mutation\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\r\nimport { addDoctorValidationSchema } from \"helpers/validationSchemas\";\r\nimport { Loader, Modals, CustomButton } from \"components/Utilities\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport {\r\n  addDocInitialValues,\r\n  /* cadreFilterBy, */\r\n  defaultPageInfo,\r\n  docCadreOptions,\r\n  docSpecializationsOptions,\r\n  doctorsSearchOptions,\r\n  genderType,\r\n} from \"helpers/mockData\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport DoctorFilters from \"components/Forms/Filters/DoctorsFilters\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst HMODoctorPage = () => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { displayAlert } = useAlert();\r\n  const [profiles, setProfiles] = useState(\"\");\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const { provider } = useSelector((state) => state.patient);\r\n  const { id, ids } = useParams();\r\n  console.log(provider);\r\n  const [openAddHcp, setOpenAddHcp] = useState(false);\r\n  const [createDoc] = useMutation(createDOctorProfile);\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [fetchDoctors, { error, loading, refetch, variables, networkStatus }] =\r\n    useLazyQuery(getDoctorsProfile);\r\n  const [\r\n    fetchDoctorsByStatus,\r\n    {\r\n      loading: byStatusLoading,\r\n      refetch: byStatusRefetch,\r\n      variables: byStatusVariables,\r\n    },\r\n  ] = useLazyQuery(getDoctorsProfileByStatus);\r\n\r\n  useEffect(() => {\r\n    fetchDoctors({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        providerId: ids,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data && provider === \"\") {\r\n          setPageInfo(data.doctorProfiles.pageInfo || []);\r\n          setProfiles(data.doctorProfiles.profile || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  useEffect(() => {\r\n    fetchDoctors({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        providerId: ids,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data && provider !== \"\") {\r\n          setPageInfo(data.doctorProfiles.pageInfo || []);\r\n          setProfiles(data.doctorProfiles.profile || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [provider]);\r\n\r\n  const onSubmit = async (values) => {\r\n    const {\r\n      createdAt,\r\n      updatedAt,\r\n      firstName,\r\n      lastName,\r\n      gender,\r\n      phone,\r\n      email,\r\n      hospital,\r\n      dociId,\r\n      specialization,\r\n      dob,\r\n      cadre,\r\n      image,\r\n    } = values;\r\n    const correctDOB = timeConverter(dob);\r\n    await createDoc({\r\n      variables: {\r\n        dociId,\r\n        createdAt,\r\n        updatedAt,\r\n        firstName,\r\n        lastName,\r\n        gender,\r\n        phoneNumber: phone,\r\n        email,\r\n        hospital,\r\n        specialization,\r\n        dob: correctDOB,\r\n        cadre,\r\n        image,\r\n        providerId: \"61db6f8968b248001aec4fcb\",\r\n      },\r\n      refetchQueries: [{ query: getDoctorsProfile }],\r\n    });\r\n    setOpenAddHcp(false);\r\n  };\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const getSearchPlaceholder = (filterBy) => {\r\n    return filterBy === \"id\"\r\n      ? \"Search by ID e.g 7NE6ELLO\"\r\n      : filterBy === \"firstName\"\r\n      ? \"Search by first name e.g John\"\r\n      : filterBy === \"lastName\"\r\n      ? \"Search by last name e.g Doe\"\r\n      : \"\";\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(data.doctorProfiles.pageInfo || defaultPageInfo);\r\n        setProfiles(data.doctorProfiles.profile || []);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\r\n      <Grid\r\n        item\r\n        gap={{ md: 4, sm: 4, xs: 2 }}\r\n        direction={{ sm: \"row\", xs: \"column\" }}\r\n        container\r\n        justifyContent=\"flex-end\"\r\n      >\r\n        <Grid item>\r\n          <CustomButton\r\n            endIcon={<AddIcon />}\r\n            title=\"Add Doctor\"\r\n            type={buttonType}\r\n            onClick={() => setOpenAddHcp(true)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      {/* ========= FILTERS =========== */}\r\n\r\n      <TableLayout\r\n        filters={\r\n          <DoctorFilters\r\n            setProfiles={setProfiles}\r\n            setPageInfo={setPageInfo}\r\n            queryParams={{\r\n              doctorsParams: { fetchDoctors, loading, refetch, variables },\r\n              doctorsByStatusParams: {\r\n                byStatusLoading,\r\n                byStatusVariables,\r\n                byStatusRefetch,\r\n                fetchDoctorsByStatus,\r\n              },\r\n            }}\r\n          />\r\n        }\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{ fetchData: fetchDoctors, variables, loading }}\r\n            setPageInfo={(data) =>\r\n              setPageInfo(data.doctorProfiles.pageInfo || {})\r\n            }\r\n            setProfiles={(data) =>\r\n              setProfiles(data.doctorProfiles.profile || [])\r\n            }\r\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\r\n            filterOptions={doctorsSearchOptions}\r\n          />\r\n        }\r\n      >\r\n        {loading ? (\r\n          <Loader />\r\n        ) : byStatusLoading ? (\r\n          <Loader />\r\n        ) : networkStatus === NetworkStatus.refetch ? (\r\n          <Loader />\r\n        ) : profiles.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={hcpsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"Doctors per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchDoctors, {\r\n                  first: e,\r\n                  providerId: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchDoctors, page, pageInfo, {\r\n                  providerId: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const {\r\n                  _id,\r\n                  dociId,\r\n                  firstName,\r\n                  provider,\r\n                  status,\r\n                  specialization,\r\n                  consultations,\r\n                  lastName,\r\n                } = row;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: \"pointer\" }}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        minWidth: \"10rem\",\r\n                      }}\r\n                    >\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        {dociId?.split(\"-\")[1]}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Link to={`/hcps/${_id}`} className={classes.link}>\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ fontSize: \"1.25rem\" }}>\r\n                            {firstName} {lastName}\r\n                          </span>\r\n                        </div>\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.grey }}\r\n                    >\r\n                      <Link to={`/hcps/${_id}`} className={classes.link}>\r\n                        {specialization}{\" \"}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        {consultations ? consultations : 0}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.grey }}\r\n                    >\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        {provider ? provider : \"No Provider\"}{\" \"}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        <Chip\r\n                          label={\r\n                            status && status === \"Active\"\r\n                              ? \"Active\"\r\n                              : \"Inactive\"\r\n                          }\r\n                          className={classes.badge}\r\n                          style={{\r\n                            background:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.lightGreen\r\n                                : theme.palette.common.lightRed,\r\n                            color:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.green\r\n                                : theme.palette.common.red,\r\n                          }}\r\n                        />\r\n                      </Link>\r\n                    </TableCell>\r\n                    {/* <TableCell>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        className={classes.button}\r\n                        component={Link}\r\n                        to={`hcps/${_id}`}\r\n                        endIcon={<ArrowForwardIosIcon />}\r\n                      >\r\n                        View Doctor\r\n                      </Button>\r\n                    </TableCell> */}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={hcpsHeadCells}\r\n            paginationLabel=\"Doctors per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n      {/* ADD Doctor MODAL */}\r\n      <Modals\r\n        isOpen={openAddHcp}\r\n        title=\"Add Doctor\"\r\n        rowSpacing={5}\r\n        height=\"auto\"\r\n        width={{ sm: \"50vw\", xs: \"90vw\" }}\r\n        handleClose={() => setOpenAddHcp(false)}\r\n      >\r\n        <Formik\r\n          initialValues={addDocInitialValues}\r\n          onSubmit={onSubmit}\r\n          validationSchema={addDoctorValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"1rem\" }}>\r\n                <Grid container direction=\"column\" gap={2}>\r\n                  <Grid item container direction=\"column\" gap={1}>\r\n                    <Grid item container spacing={2}>\r\n                      <Grid item container xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"First Name\"\r\n                          id=\"firstName\"\r\n                          name=\"firstName\"\r\n                          placeholder=\"Enter first name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item container xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Last Name\"\r\n                          id=\"lastName\"\r\n                          name=\"lastName\"\r\n                          placeholder=\"Enter last name\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid item container direction=\"column\" gap={2}>\r\n                      <Grid item container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"date\"\r\n                            name=\"dob\"\r\n                            label=\"DOB\"\r\n                            setFieldValue={setFieldValue}\r\n                            setValues={setValues}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <Grid container direction=\"column\">\r\n                            <FormikControl\r\n                              control=\"select\"\r\n                              options={docSpecializationsOptions}\r\n                              name=\"specialization\"\r\n                              label=\"Specialization\"\r\n                              placeholder=\"Specialization\"\r\n                            />\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container direction=\"column\" gap={2}>\r\n                    <Grid item container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          label=\"Gender\"\r\n                          id=\"gender\"\r\n                          name=\"gender\"\r\n                          options={genderType}\r\n                          placeholder=\"Gender\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Phone Number\"\r\n                          id=\"phone\"\r\n                          name=\"phone\"\r\n                          placeholder=\"Enter last Phone number\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item container direction=\"column\" gap={2}>\r\n                      <Grid item container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"input\"\r\n                            label=\"Hospital\"\r\n                            id=\"hospital\"\r\n                            name=\"hospital\"\r\n                            placeholder=\"Enter hospital Name\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6} marginBottom={{ xs: 1 }}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={docCadreOptions}\r\n                            name=\"cadre\"\r\n                            label=\"Cadre\"\r\n                            placeholder=\"Select Cadre\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container spacing={2} alignItems=\"center\">\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"file\"\r\n                        name=\"image\"\r\n                        label=\"Profile Pics\"\r\n                        setFieldValue={setFieldValue}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        label=\"Heala-ID\"\r\n                        id=\"dociId\"\r\n                        name=\"dociId\"\r\n                        placeholder=\"Enter Heala ID\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <CustomButton\r\n                      title=\"Add Doctor\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HMODoctorPage;\r\n2;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealerPartner.js",["1290","1291","1292","1293","1294","1295","1296","1297","1298","1299","1300","1301","1302","1303","1304","1305","1306","1307","1308","1309","1310"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\r\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport AddPartner from \"components/Forms/AddPartner\";\r\nimport {\r\n  Checkbox,\r\n  TableCell,\r\n  Avatar,\r\n  TableRow,\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { categoryFilterOptions, defaultPageInfo } from \"helpers/mockData\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport {\r\n  changeTableLimit,\r\n  deleteItem,\r\n  deleteVar,\r\n  filterData,\r\n  handlePageChange,\r\n  banks,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport DeletePartner from \"components/modals/DeleteOrDisable\";\r\nimport { partnersHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport {\r\n  addPartner,\r\n  addPartnerCategory,\r\n  regeneratePartnerProfileUrl,\r\n} from \"components/graphQL/Mutation\";\r\nimport {\r\n  getPartners,\r\n  getSingleProvider,\r\n  getProviders,\r\n  DELETE_PARTNER,\r\n} from \"components/graphQL/useQuery\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport {\r\n  addNewPartnerValidationSchema,\r\n  addPartnerValidationSchema,\r\n  filterPartnersValidationSchema,\r\n} from \"helpers/validationSchemas\";\r\nimport Filter from \"components/Forms/Filters\";\r\nimport { PageInfo } from \"components/graphQL/fragment\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { EditDelBtn } from \"components/Buttons/EditDelBtn\";\r\n\r\nconst HealerPartner = () => {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const { id, ids } = useParams();\r\n  const { displayAlert } = useAlert();\r\n  /* const [setCategoryDatas] = useState([]); */\r\n  const { setSelectedRows } = useActions();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [partner, setPartners] = useState([]);\r\n  const [dropDown, setDropDown] = useState([]);\r\n  const [addPartners] = useMutation(addPartner);\r\n  const categoryData = useQuery(getSingleProvider);\r\n  const [delete_partner] = useLazyQuery(DELETE_PARTNER);\r\n  /*   const [searchPartner, setSearchPartner] = useState(\"\"); */\r\n  const [isDeleting, setIsDeleting] = useState({});\r\n  const [addPartnerCat] = useMutation(addPartnerCategory);\r\n  const { data: da, loading: load } = useQuery(getProviders);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [openAddPartner, setOpenAddPartner] = useState(false);\r\n  const [openFilterPartner, setOpenFilterPartner] = useState(false);\r\n  const [openDeletePartner, setOpenDeletePartner] = useState(false);\r\n  const [partnerToDelete, setPartnerToDelete] = useState(null);\r\n  const [partnerFilterValues, setPartnerFilterValues] = useState({\r\n    category: \"\",\r\n  });\r\n  const { selectedRows /* page */ } = useSelector((state) => state.tables);\r\n  const [openAddPartnerCategory, setAddPartnerCategory] = useState(false);\r\n  const [fetchPartners, { loading, error, refetch, variables }] =\r\n    useLazyQuery(getPartners);\r\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\r\n\r\n  const specializations = [\r\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\r\n    { key: \"Hospital\", value: \"Hospital\" },\r\n  ];\r\n  const categoryOptions = [\r\n    { key: \"Diagnostics\", value: \"diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"pharmacy\" },\r\n    { key: \"Hospital\", value: \"hospital\" },\r\n  ];\r\n  const classificationOptions = [\r\n    { key: \"Primary Healthcare\", value: \"Primary Healthcare\" },\r\n    { key: \"Secondary Healthcare\", value: \"Secondary Healthcare\" },\r\n  ];\r\n\r\n  const specializationOptions = [\r\n    { key: \"Dental Care\", value: \"Dental Care\" },\r\n    { key: \"Eye Clinic\", value: \"Eye Clinic\" },\r\n    { key: \"Skin Care\", value: \"Skin Care\" },\r\n    { key: \"Mental Care\", value: \"Mental Care\" },\r\n  ];\r\n  const specializations5 = [\r\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\r\n    { key: \"Hospital\", value: \"Hospital\" },\r\n  ];\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const darkButtonType = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const initialValues = {\r\n    Name: \"\",\r\n    date: \"\",\r\n    category: \"\",\r\n  };\r\n\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    email: \"\",\r\n    specialization: \"\",\r\n    category: \"\",\r\n    account: \"\",\r\n    address: \"\",\r\n    phone: \"\",\r\n    classification: \"\",\r\n    bank: \"\",\r\n    image: null,\r\n    provider: \"\",\r\n  };\r\n\r\n  const initialValues2 = {\r\n    category: \"\",\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then((res) => {\r\n        const { data } = res;\r\n        if (data) {\r\n          setPartners(data?.getPartners?.data || []);\r\n          setPageInfo(data?.getPartners?.pageInfo || defaultPageInfo);\r\n        }\r\n        if (!data) {\r\n          setPartners(res?.getPartners?.data || []);\r\n          setPageInfo(res?.getPartners?.pageInfo || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  const fetchPartnersData = async () => {\r\n    const res = fetchPartners({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        provider: ids,\r\n      },\r\n    });\r\n    setTableData(res, \"Couldn't fetch Partners data\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPartnersData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (da) {\r\n      const datas = da.getProviders.provider;\r\n      setDropDown(\r\n        datas?.map((i) => {\r\n          return { key: i.name, value: i._id };\r\n        })\r\n      );\r\n    }\r\n  }, [da]);\r\n\r\n  useEffect(() => {\r\n    (partner || []).map((p) => {\r\n      const newIsDeleting = isDeleting;\r\n      setIsDeleting({ [p._id]: false, ...newIsDeleting });\r\n      return null;\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [partner]);\r\n\r\n  const onSubmit = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const onSubmit2 = async (values, onSubmitProps) => {\r\n    const { category } = values;\r\n\r\n    try {\r\n      const addCatRes = await addPartnerCat({\r\n        variables: {\r\n          name: category,\r\n        },\r\n      });\r\n\r\n      if (addCatRes?.addPartner?.partner) {\r\n        setAddPartnerCategory(false);\r\n        onSubmitProps.resetForm();\r\n        const res = refetch();\r\n        setTableData(res, \"Couldn't fetch partners.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const onSubmit1 = async (values, onSubmitProps) => {\r\n    console.log(values);\r\n    let {\r\n      name,\r\n      email,\r\n      category,\r\n      phone,\r\n      bank,\r\n      specialization,\r\n      provider,\r\n      image,\r\n      account,\r\n    } = values;\r\n    name = name.trim();\r\n\r\n    try {\r\n      await addPartners({\r\n        variables: {\r\n          name,\r\n          email,\r\n          category,\r\n          specialization,\r\n          account,\r\n          phone,\r\n          bank,\r\n          logoImageUrl: image,\r\n          providerId: provider,\r\n        },\r\n        refetchQueries: [{ query: getPartners }],\r\n      });\r\n      enqueueSnackbar(\"Partner added successfully\", {\r\n        variant: \"success\",\r\n      });\r\n      onSubmitProps.resetForm();\r\n      setOpenAddPartner(false);\r\n    } catch (err) {\r\n      console.log(err, \"err\");\r\n      enqueueSnackbar(\"Email is already taken\", {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const onFilterCategoryChange = async (value) => {\r\n    try {\r\n      deleteVar(variables);\r\n      setPartnerFilterValues({ ...partnerFilterValues, category: value });\r\n      const filterVariables = { category: value };\r\n\r\n      const res = filterData(filterVariables, {\r\n        fetchData: fetchPartners,\r\n        refetch: refetch,\r\n        variables: variables,\r\n      });\r\n      await setTableData(res, \"couldn't filter table.\");\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setPartnerFilterValues, \"\");\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\r\n    setFilterValue(defaultVal);\r\n\r\n    deleteVar(variables);\r\n\r\n    const res = refetch();\r\n    await setTableData(res, \"couldn't filter table.\");\r\n  };\r\n  const [newProfileUrl, setNewProfileUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setNewProfileUrl(daa?.regeneratePartnerProfileUrl?.partner?.profileUrl);\r\n  }, [daa]);\r\n  const [Id, setId] = useState(\"\");\r\n  const handleGenerateLink = async (id) => {\r\n    setId(id);\r\n    await regenerate({\r\n      variables: {\r\n        id,\r\n      },\r\n      refetchQueries: [\r\n        {\r\n          query: getPartners,\r\n          variables: {\r\n            variables: pageInfo.page,\r\n            limit: PageInfo.limit,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const z = (id) => {\r\n    let b = \"\";\r\n    const m = daa?.regeneratePartnerProfileUrl?.partner?._id;\r\n    if (id === m) {\r\n      b = m;\r\n    } else {\r\n      b = \"\";\r\n    }\r\n    return b;\r\n  };\r\n  useEffect(() => {\r\n    partner.map((item) => {\r\n      if (item._id === Id) {\r\n        return {\r\n          ...item,\r\n          profileUrl: newProfileUrl,\r\n        };\r\n      }\r\n    });\r\n\r\n    //eslint-disable-next-line\r\n  }, [Id, newProfileUrl]);\r\n  if (error || categoryData.error)\r\n    return <NoData error={error || categoryData.error} />;\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      gap={{ sm: 4, xs: 2 }}\r\n      flexWrap=\"nowrap\"\r\n      height=\"100%\"\r\n    >\r\n      <Grid\r\n        item\r\n        container\r\n        gap={2}\r\n        direction={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          justifyContent=\"flex-end\"\r\n          alignItems=\"center\"\r\n          flex={{ sm: 1, xs: 1, md: 1 }}\r\n        >\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<PersonAddAlt1Icon />}\r\n              title=\"Add Partner\"\r\n              type={darkButtonType}\r\n              onClick={() => setOpenAddPartner(true)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        filters={\r\n          <Filter\r\n            onHandleChange={(e) => onFilterCategoryChange(e?.target?.value)}\r\n            onClickClearBtn={() => onFilterCategoryChange(\"\")}\r\n            options={[{ key: \"Category\", value: \"\" }, ...categoryFilterOptions]}\r\n            name=\"category\"\r\n            placeholder=\"None\"\r\n            value={partnerFilterValues.category}\r\n            hasClearBtn={true}\r\n            disable={loading}\r\n          />\r\n        }\r\n      >\r\n        {load || loading ? (\r\n          <Loader />\r\n        ) : partner.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={partnersHeadCells}\r\n              rows={partner}\r\n              paginationLabel=\"Partner per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchPartners, {\r\n                  first: e,\r\n                  provider: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchPartners, page, pageInfo, {\r\n                  provider: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {partner.map((row, index) => {\r\n                const isItemSelected = isSelected(row.id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                const { _id, logoImageUrl, name, email, category } = row;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ maxWidth: \"20rem\" }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"left\",\r\n                        }}\r\n                      >\r\n                        {/* <span style={{ marginRight: \"1rem\" }}>\r\n                          <Avatar\r\n                            alt={`Display Photo of ${name}`}\r\n                            src={logoImageUrl}\r\n                            sx={{ width: 24, height: 24 }}\r\n                          />\r\n                        </span> */}\r\n                        <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {email}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {category}\r\n                    </TableCell>\r\n\r\n                    {/* <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {profileUrl || z(_id) !== \"\" ? (\r\n                        <Typography\r\n                          style={{\r\n                            color: \"rgb(0 0 0)\",\r\n                            fontWeight: 400,\r\n                            fontSize: \"1.25rem\",\r\n                            maxWidth: \"20rem\",\r\n                          }}\r\n                          sx={{ display: \"flex\", alignItems: \"center\" }}\r\n                        >\r\n                          {trucateProfileLink(profileUrl ? profileUrl : z(_id))}\r\n                          <div style={{ marginLeft: \"1rem\" }}>\r\n                            <Copy\r\n                              name=\"Profile Link\"\r\n                              text={profileUrl ? profileUrl : z(_id)}\r\n                            />\r\n                          </div>\r\n                        </Typography>\r\n                      ) : (\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          disableRipple\r\n                          className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                          onClick={() => handleGenerateLink(_id)}\r\n                        >\r\n                          Generate Link\r\n                        </Button>\r\n                      )}\r\n                    </TableCell> \r\n                    <TableCell align=\"center\" className={classes.tableCell}>\r\n                      {isDeleting[_id] ? (\r\n                        <Loader />\r\n                      ) : (\r\n                        <EditDelBtn\r\n                          onHandleClick={() => {\r\n                            setPartnerToDelete(_id || \"\");\r\n                            setOpenDeletePartner(true);\r\n                          }}\r\n                          type=\"delete\"\r\n                          text=\"Delete partner\"\r\n                        />\r\n                      )}\r\n                    </TableCell>*/}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={partnersHeadCells}\r\n            paginationLabel=\"Doctors per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n      <Modals\r\n        isOpen={openFilterPartner}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        width={{ sm: \"40vw\", xs: \"90vw\", md: \"40vw\" }}\r\n        handleClose={() => setOpenFilterPartner(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={onSubmit}\r\n          validateOnBlur={false}\r\n          validationSchema={filterPartnersValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={3}>\r\n                  <Grid item marginBottom={3}>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          name=\"Name\"\r\n                          label=\"Name\"\r\n                          placeholder=\"Select name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializations}\r\n                          name=\"date\"\r\n                          label=\"Date\"\r\n                          placeholder=\"Choose Date\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  container\r\n                  spacing={2}\r\n                  style={{ marginBottom: \"10rem\" }}\r\n                >\r\n                  <Grid item xs={6}>\r\n                    <FormikControl\r\n                      control=\"select\"\r\n                      options={specializations}\r\n                      name=\"category\"\r\n                      label=\"Category\"\r\n                      placeholder=\"Select Category\"\r\n                    />\r\n                  </Grid>\r\n                  {/* Placeholder grid */}\r\n                  <Grid item md></Grid>\r\n                </Grid>\r\n                <Grid item container xs={12}>\r\n                  <CustomButton\r\n                    title=\"Apply Filter\"\r\n                    width=\"100%\"\r\n                    type={buttonType}\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                  />\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      {/* ADD NEW PARTER MODAL */}\r\n      <AddPartner\r\n        category={false}\r\n        id={ids}\r\n        open={openAddPartner}\r\n        handleClose={() => setOpenAddPartner(false)}\r\n        initialValues={initialValues1}\r\n      />\r\n      {/* <Modals\r\n        isOpen={openAddPartner}\r\n        title=\"Add Partners\"\r\n        rowSpacing={5}\r\n        handleClose={() => setOpenAddPartner(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={addNewPartnerValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty, values, setFieldValue }) => {\r\n            const { classification, category } = values;\r\n            return (\r\n              <Form style={{ marginTop: \"1rem\" }}>\r\n                <Grid container direction=\"column\" gap={1.5}>\r\n                  <Grid item container>\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Name\"\r\n                          id=\"name\"\r\n                          name=\"name\"\r\n                          placeholder=\"Enter Partner name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Email\"\r\n                          id=\"name\"\r\n                          name=\"email\"\r\n                          placeholder=\"Enter Email\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\" Account Number\"\r\n                          id=\"account\"\r\n                          name=\"account\"\r\n                          placeholder=\"Enter Account Number\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Phone Number\"\r\n                          id=\"phone\"\r\n                          name=\"phone\"\r\n                          placeholder=\"Enter Phone Number\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={categoryOptions}\r\n                          name=\"category\"\r\n                          label=\"Category\"\r\n                          placeholder=\"Category\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={banks}\r\n                          name=\"bank\"\r\n                          label=\"Bank\"\r\n                          placeholder=\"Select Bank\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    {category === \"hospital\" && (\r\n                      <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={dropDown}\r\n                            name=\"provider\"\r\n                            label=\"Provider\"\r\n                            id=\"provider\"\r\n                            placeholder=\"Select Provider\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={classificationOptions}\r\n                            name=\"classification\"\r\n                            label=\"Classification\"\r\n                            id=\"classification\"\r\n                            placeholder=\"select classification\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    )}\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"file\"\r\n                          name=\"image\"\r\n                          label=\"Company Logo\"\r\n                          setFieldValue={setFieldValue}\r\n                        />\r\n                      </Grid>\r\n                      {classification === \"Secondary Healthcare\" && (\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={specializationOptions}\r\n                            name=\"specialization\"\r\n                            label=\"Specialization\"\r\n                            id=\"specialization\"\r\n                            placeholder=\"Select Specialization\"\r\n                          />\r\n                        </Grid>\r\n                      )}\r\n                    </Grid>\r\n                    <Grid item container flexWrap=\"nowrap\">\r\n                      <Grid item container>\r\n                        <FormikControl\r\n                          control=\"textarea\"\r\n                          name=\"address\"\r\n                          minRows={3}\r\n                          label=\"Address\"\r\n                          placeholder=\"Enter address\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container sx={{ mt: 1 }}>\r\n                    <CustomButton\r\n                      title=\"Add Partner\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals> */}\r\n\r\n      {/* Add Partner Category */}\r\n      <Modals\r\n        isOpen={openAddPartnerCategory}\r\n        title=\"Add Partners Category\"\r\n        rowSpacing={5}\r\n        handleClose={() => setAddPartnerCategory(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues2}\r\n          onSubmit={onSubmit2}\r\n          validationSchema={addPartnerValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid container direction=\"column\" gap={3}>\r\n                  <Grid item container>\r\n                    <Grid item container direction=\"column\" gap={1}>\r\n                      <Grid item container>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializations5}\r\n                          name=\"category\"\r\n                          label=\"Category\"\r\n                          placeholder=\"Specialization\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <CustomButton\r\n                      title=\"Add Partner\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n      <DeletePartner\r\n        open={openDeletePartner}\r\n        setOpen={setOpenDeletePartner}\r\n        title=\"Delete Partner\"\r\n        btnValue=\"delete\"\r\n        onConfirm={async () => {\r\n          const res = deleteItem(\r\n            delete_partner,\r\n            partnerToDelete,\r\n            setPartnerToDelete,\r\n            refetch,\r\n            Typography,\r\n            enqueueSnackbar,\r\n            setIsDeleting,\r\n            isDeleting\r\n          );\r\n          setOpenDeletePartner(false);\r\n          await setTableData(res, \"Couldn't refetch Partners\");\r\n        }}\r\n        confirmationMsg=\"delete partner\"\r\n        onCancel={() => {\r\n          setPartnerToDelete(null);\r\n        }}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HealerPartner;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaFilterDoctorPage.js",["1311","1312","1313","1314","1315","1316","1317","1318","1319","1320","1321"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NetworkStatus } from \"@apollo/client\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  Grid,\r\n  TableRow,\r\n  TableCell,\r\n  Button,\r\n  Checkbox,\r\n  Chip,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { timeConverter } from \"components/Utilities/Time\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { useStyles } from \"../../styles/doctorsPageStyles\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport {\r\n  getDoctorsProfile,\r\n  getDoctorsProfileByStatus,\r\n} from \"components/graphQL/useQuery\";\r\nimport { hcpsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { createDOctorProfile } from \"components/graphQL/Mutation\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\r\nimport { addDoctorValidationSchema } from \"helpers/validationSchemas\";\r\nimport { Loader, Modals, CustomButton } from \"components/Utilities\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport {\r\n  addDocInitialValues,\r\n  /* cadreFilterBy, */\r\n  defaultPageInfo,\r\n  docCadreOptions,\r\n  docSpecializationsOptions,\r\n  doctorsSearchOptions,\r\n  genderType,\r\n} from \"helpers/mockData\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport DoctorFilters from \"components/Forms/Filters/DoctorsFilters\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst HealaFilterDoctorPage = () => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { displayAlert } = useAlert();\r\n  const [profiles, setProfiles] = useState(\"\");\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const { provider } = useSelector((state) => state.patient);\r\n  const { id, ids } = useParams();\r\n  console.log(provider);\r\n  const [openAddHcp, setOpenAddHcp] = useState(false);\r\n  const [createDoc] = useMutation(createDOctorProfile);\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [fetchDoctors, { error, loading, refetch, variables, networkStatus }] =\r\n    useLazyQuery(getDoctorsProfile);\r\n  const [\r\n    fetchDoctorsByStatus,\r\n    {\r\n      loading: byStatusLoading,\r\n      refetch: byStatusRefetch,\r\n      variables: byStatusVariables,\r\n    },\r\n  ] = useLazyQuery(getDoctorsProfileByStatus);\r\n\r\n  useEffect(() => {\r\n    fetchDoctors({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        providerId: ids,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data && provider === \"\") {\r\n          setPageInfo(data.doctorProfiles.pageInfo || []);\r\n          setProfiles(data.doctorProfiles.profile || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  useEffect(() => {\r\n    fetchDoctors({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        providerId: ids,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data && provider !== \"\") {\r\n          setPageInfo(data.doctorProfiles.pageInfo || []);\r\n          setProfiles(data.doctorProfiles.profile || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [provider]);\r\n\r\n  const onSubmit = async (values) => {\r\n    const {\r\n      createdAt,\r\n      updatedAt,\r\n      firstName,\r\n      lastName,\r\n      gender,\r\n      phone,\r\n      email,\r\n      hospital,\r\n      dociId,\r\n      specialization,\r\n      dob,\r\n      cadre,\r\n      image,\r\n    } = values;\r\n    const correctDOB = timeConverter(dob);\r\n    await createDoc({\r\n      variables: {\r\n        dociId,\r\n        createdAt,\r\n        updatedAt,\r\n        firstName,\r\n        lastName,\r\n        gender,\r\n        phoneNumber: phone,\r\n        email,\r\n        hospital,\r\n        specialization,\r\n        dob: correctDOB,\r\n        cadre,\r\n        image,\r\n        providerId: \"61db6f8968b248001aec4fcb\",\r\n      },\r\n      refetchQueries: [{ query: getDoctorsProfile }],\r\n    });\r\n    setOpenAddHcp(false);\r\n  };\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const getSearchPlaceholder = (filterBy) => {\r\n    return filterBy === \"id\"\r\n      ? \"Search by ID e.g 7NE6ELLO\"\r\n      : filterBy === \"firstName\"\r\n      ? \"Search by first name e.g John\"\r\n      : filterBy === \"lastName\"\r\n      ? \"Search by last name e.g Doe\"\r\n      : \"\";\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(data.doctorProfiles.pageInfo || defaultPageInfo);\r\n        setProfiles(data.doctorProfiles.profile || []);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\r\n      <Grid\r\n        item\r\n        gap={{ md: 4, sm: 4, xs: 2 }}\r\n        direction={{ sm: \"row\", xs: \"column\" }}\r\n        container\r\n        justifyContent=\"flex-end\"\r\n      >\r\n        <Grid item>\r\n          <CustomButton\r\n            endIcon={<AddIcon />}\r\n            title=\"Add Doctor\"\r\n            type={buttonType}\r\n            onClick={() => setOpenAddHcp(true)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      {/* ========= FILTERS =========== */}\r\n\r\n      <TableLayout\r\n        filters={\r\n          <DoctorFilters\r\n            setProfiles={setProfiles}\r\n            setPageInfo={setPageInfo}\r\n            queryParams={{\r\n              doctorsParams: { fetchDoctors, loading, refetch, variables },\r\n              doctorsByStatusParams: {\r\n                byStatusLoading,\r\n                byStatusVariables,\r\n                byStatusRefetch,\r\n                fetchDoctorsByStatus,\r\n              },\r\n            }}\r\n          />\r\n        }\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{ fetchData: fetchDoctors, variables, loading }}\r\n            setPageInfo={(data) =>\r\n              setPageInfo(data.doctorProfiles.pageInfo || {})\r\n            }\r\n            setProfiles={(data) =>\r\n              setProfiles(data.doctorProfiles.profile || [])\r\n            }\r\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\r\n            filterOptions={doctorsSearchOptions}\r\n          />\r\n        }\r\n      >\r\n        {loading ? (\r\n          <Loader />\r\n        ) : byStatusLoading ? (\r\n          <Loader />\r\n        ) : networkStatus === NetworkStatus.refetch ? (\r\n          <Loader />\r\n        ) : profiles.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={hcpsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"Doctors per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchDoctors, {\r\n                  first: e,\r\n                  providerId: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchDoctors, page, pageInfo, {\r\n                  providerId: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const {\r\n                  _id,\r\n                  dociId,\r\n                  firstName,\r\n                  provider,\r\n                  status,\r\n                  specialization,\r\n                  consultations,\r\n                  lastName,\r\n                } = row;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: \"pointer\" }}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        minWidth: \"10rem\",\r\n                      }}\r\n                    >\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        {dociId?.split(\"-\")[1]}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Link to={`/hcps/${_id}`} className={classes.link}>\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ fontSize: \"1.25rem\" }}>\r\n                            {firstName} {lastName}\r\n                          </span>\r\n                        </div>\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.grey }}\r\n                    >\r\n                      <Link to={`/hcps/${_id}`} className={classes.link}>\r\n                        {specialization}{\" \"}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        {consultations ? consultations : 0}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.grey }}\r\n                    >\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        {provider ? provider : \"No Provider\"}{\" \"}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        <Chip\r\n                          label={\r\n                            status && status === \"Active\"\r\n                              ? \"Active\"\r\n                              : \"Inactive\"\r\n                          }\r\n                          className={classes.badge}\r\n                          style={{\r\n                            background:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.lightGreen\r\n                                : theme.palette.common.lightRed,\r\n                            color:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.green\r\n                                : theme.palette.common.red,\r\n                          }}\r\n                        />\r\n                      </Link>\r\n                    </TableCell>\r\n                    {/* <TableCell>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        className={classes.button}\r\n                        component={Link}\r\n                        to={`hcps/${_id}`}\r\n                        endIcon={<ArrowForwardIosIcon />}\r\n                      >\r\n                        View Doctor\r\n                      </Button>\r\n                    </TableCell> */}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={hcpsHeadCells}\r\n            paginationLabel=\"Doctors per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n      {/* ADD Doctor MODAL */}\r\n      <Modals\r\n        isOpen={openAddHcp}\r\n        title=\"Add Doctor\"\r\n        rowSpacing={5}\r\n        height=\"auto\"\r\n        width={{ sm: \"50vw\", xs: \"90vw\" }}\r\n        handleClose={() => setOpenAddHcp(false)}\r\n      >\r\n        <Formik\r\n          initialValues={addDocInitialValues}\r\n          onSubmit={onSubmit}\r\n          validationSchema={addDoctorValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"1rem\" }}>\r\n                <Grid container direction=\"column\" gap={2}>\r\n                  <Grid item container direction=\"column\" gap={1}>\r\n                    <Grid item container spacing={2}>\r\n                      <Grid item container xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"First Name\"\r\n                          id=\"firstName\"\r\n                          name=\"firstName\"\r\n                          placeholder=\"Enter first name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item container xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Last Name\"\r\n                          id=\"lastName\"\r\n                          name=\"lastName\"\r\n                          placeholder=\"Enter last name\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid item container direction=\"column\" gap={2}>\r\n                      <Grid item container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"date\"\r\n                            name=\"dob\"\r\n                            label=\"DOB\"\r\n                            setFieldValue={setFieldValue}\r\n                            setValues={setValues}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <Grid container direction=\"column\">\r\n                            <FormikControl\r\n                              control=\"select\"\r\n                              options={docSpecializationsOptions}\r\n                              name=\"specialization\"\r\n                              label=\"Specialization\"\r\n                              placeholder=\"Specialization\"\r\n                            />\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container direction=\"column\" gap={2}>\r\n                    <Grid item container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          label=\"Gender\"\r\n                          id=\"gender\"\r\n                          name=\"gender\"\r\n                          options={genderType}\r\n                          placeholder=\"Gender\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Phone Number\"\r\n                          id=\"phone\"\r\n                          name=\"phone\"\r\n                          placeholder=\"Enter last Phone number\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item container direction=\"column\" gap={2}>\r\n                      <Grid item container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"input\"\r\n                            label=\"Hospital\"\r\n                            id=\"hospital\"\r\n                            name=\"hospital\"\r\n                            placeholder=\"Enter hospital Name\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6} marginBottom={{ xs: 1 }}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={docCadreOptions}\r\n                            name=\"cadre\"\r\n                            label=\"Cadre\"\r\n                            placeholder=\"Select Cadre\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container spacing={2} alignItems=\"center\">\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"file\"\r\n                        name=\"image\"\r\n                        label=\"Profile Pics\"\r\n                        setFieldValue={setFieldValue}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        label=\"Heala-ID\"\r\n                        id=\"dociId\"\r\n                        name=\"dociId\"\r\n                        placeholder=\"Enter Heala ID\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <CustomButton\r\n                      title=\"Add Doctor\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HealaFilterDoctorPage;\r\n2;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaFilterPage.js",["1322","1323","1324","1325","1326","1327","1328","1329","1330","1331","1332"],"import React, { useState, useEffect } from \"react\";\r\nimport { useLazyQuery, NetworkStatus } from \"@apollo/client\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport { Grid } from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useStyles } from \"styles/patientsPageStyles\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport PatientFilters from \"components/Forms/Filters/PatientFilters\";\r\nimport { patientsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo, searchOptions } from \"helpers/mockData\";\r\nimport {\r\n  getPatients,\r\n  getPatientsByPlan,\r\n  getPatientsByStatus,\r\n} from \"components/graphQL/useQuery\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport { useParams, Link, NavLink, Redirect } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { getSearchPlaceholder } from \"helpers/func\";\r\n\r\nimport PropTypes from \"prop-types\";\r\n\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { Checkbox, Chip, TableCell, TableRow } from \"@mui/material\";\r\n\r\nconst HealaFilterPage = () => {\r\n  const classes = useStyles();\r\n  const { id, ids } = useParams();\r\n  const history = useHistory();\r\n  const theme = useTheme();\r\n  const { setSelectedRows } = useActions();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n\r\n  const { displayAlert } = useAlert();\r\n  const [profiles, setProfiles] = useState([]);\r\n  const [fetchPatient, { loading, refetch, error, variables, networkStatus }] =\r\n    useLazyQuery(getPatients);\r\n\r\n  const [\r\n    fetchPatientByStatus,\r\n    {\r\n      loading: byStatusLoading,\r\n      variables: byStatusVaribles,\r\n      refetch: byStatusRefetch,\r\n    },\r\n  ] = useLazyQuery(getPatientsByStatus);\r\n  const [\r\n    fetchPatientByPlan,\r\n    {\r\n      loading: byPlanLoading,\r\n      variables: byPlanVaribles,\r\n      refetch: byPlanRefetch,\r\n    },\r\n  ] = useLazyQuery(getPatientsByPlan);\r\n\r\n  const [pageInfo, setPageInfo] = useState({\r\n    page: 0,\r\n    totalPages: 1,\r\n    hasNextPage: false,\r\n    hasPrevPage: false,\r\n    limit: 10,\r\n    totalDocs: 0,\r\n  });\r\n  useEffect(() => {\r\n    fetchPatient({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        provider: ids,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setPageInfo(data?.profiles?.pageInfo || []);\r\n          setProfiles(data?.profiles?.data || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(data?.profiles?.pageInfo || defaultPageInfo);\r\n        setProfiles(data?.profiles?.data || []);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  // if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n      <Grid\r\n        item\r\n        container\r\n        spacing={2}\r\n        className={classes.searchFilterContainer}\r\n      >\r\n        <Grid item container flexWrap=\"wrap\" spacing={4}></Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        filters={\r\n          <PatientFilters\r\n            setProfiles={setProfiles}\r\n            setPageInfo={setPageInfo}\r\n            queryParams={{\r\n              patientsParams: { fetchPatient, loading, refetch, variables },\r\n              patientsByStatusParams: {\r\n                byStatusLoading,\r\n                byStatusVaribles,\r\n                byStatusRefetch,\r\n                fetchPatientByStatus,\r\n              },\r\n              patientsByPlanParams: {\r\n                byPlanLoading,\r\n                byPlanVaribles,\r\n                byPlanRefetch,\r\n                fetchPatientByPlan,\r\n              },\r\n            }}\r\n          />\r\n        }\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{\r\n              fetchData: fetchPatient,\r\n              variables,\r\n              loading,\r\n              newVariables: { provider: ids },\r\n            }}\r\n            setPageInfo={(data) => setPageInfo(data?.profiles?.pageInfo || {})}\r\n            setProfiles={(data) => setProfiles(data?.profiles?.data || [])}\r\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\r\n            filterOptions={searchOptions}\r\n          />\r\n        }\r\n      >\r\n        {loading || byStatusLoading || byPlanLoading ? (\r\n          <Loader />\r\n        ) : networkStatus === NetworkStatus.refetch ? (\r\n          <Loader />\r\n        ) : profiles.length > 0 ? (\r\n          /* ================= PATIENTS TABLE ================= */\r\n          <Grid\r\n            container\r\n            item\r\n            direction=\"column\"\r\n            overflow=\"hidden\"\r\n            maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n          >\r\n            <EnhancedTable\r\n              headCells={patientsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"Patients per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchPatient, {\r\n                  first: e,\r\n                  provider: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchPatient, page, pageInfo, {\r\n                  provider: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const {\r\n                  _id,\r\n                  dociId,\r\n                  firstName,\r\n                  lastName,\r\n                  plan,\r\n                  provider,\r\n                  consultations,\r\n                  status,\r\n                } = row;\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: \"pointer\" }}\r\n                    onClick={(e) => {\r\n                      <Redirect\r\n                        to={{\r\n                          pathname: `/patients/${_id}`,\r\n                          state: { from: `/user-type/heala/${id}/${_id}` },\r\n                        }}\r\n                      />;\r\n                    }}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    {/* </NavLink> */}\r\n\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        textAlign: \"left\",\r\n                      }}\r\n                    >\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        {dociId?.split(\"-\")[1]}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ fontSize: \"1.25rem\" }}>{`${\r\n                            firstName && firstName\r\n                          } ${lastName && lastName}`}</span>\r\n                        </div>\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\" }}\r\n                      >\r\n                        {plan ? plan : \"No Plan\"}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\", textColor: \"red\" }}\r\n                      >\r\n                        {provider ? provider : \"No Provider\"}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\", textColor: \"inherit\" }}\r\n                      >\r\n                        {consultations ? consultations : 0}\r\n                      </NavLink>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <NavLink\r\n                        to={`/patients/${_id}`}\r\n                        clasName={classes.link}\r\n                        style={{ textDecoration: \"none\", textColor: \"inherit\" }}\r\n                      >\r\n                        <Chip\r\n                          label={\r\n                            status && status === \"Active\"\r\n                              ? \"Active\"\r\n                              : \"Inactive\"\r\n                          }\r\n                          className={classes.badge}\r\n                          style={{\r\n                            background:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.lightGreen\r\n                                : theme.palette.common.lightRed,\r\n                            color:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.green\r\n                                : theme.palette.common.red,\r\n                          }}\r\n                        />\r\n                      </NavLink>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={patientsHeadCells}\r\n            paginationLabel=\"Patients per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HealaFilterPage;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HMOEnrolle.js",["1333","1334","1335","1336","1337","1338","1339","1340","1341","1342","1343","1344","1345","1346","1347"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HospitalPage.js",["1348","1349","1350","1351","1352","1353","1354","1355","1356","1357","1358","1359","1360","1361","1362","1363"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Healas.js",["1364","1365","1366","1367","1368","1369","1370","1371","1372","1373","1374","1375"],"import React, { useEffect, useState } from \"react\";\r\nimport { EmptyTable, NoData } from \"components/layouts\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Avatar,\r\n  Typography,\r\n  TableCell,\r\n  TableRow,\r\n} from \"@mui/material\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport Copy from \"components/Copy\";\r\nimport { trucateProfileLink } from \"helpers/filterHelperFunctions\";\r\nimport { hospitalTableHeadCells2 } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport { trucateString } from \"helpers/filterHelperFunctions\";\r\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport { getProviders, getPartners } from \"components/graphQL/useQuery\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { regeneratePartnerProfileUrl } from \"components/graphQL/Mutation\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\n\r\nconst Healas = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { id } = useParams();\r\n  const { patientConsultation } = useActions();\r\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\r\n  const [hospitals, setHospitals] = useState([]);\r\n\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [fetchHospitals, { loading, error }] = useLazyQuery(getProviders, {\r\n    variables: { userTypeId: id },\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchHospitals()\r\n      .then(({ data }) => {\r\n        console.log(data);\r\n        if (data) {\r\n          setHospitals(data?.getProviders?.provider || []);\r\n          setPageInfo(data?.getProviders?.pageInfo || {});\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, [fetchHospitals]);\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n      {hospitals.length > 0 ? (\r\n        /* ================= HMO TABLE ================= */\r\n        <Grid\r\n          container\r\n          item\r\n          direction=\"column\"\r\n          overflow=\"hidden\"\r\n          maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n        >\r\n          <EnhancedTable\r\n            headCells={hospitalTableHeadCells2}\r\n            rows={hospitals}\r\n            paginationLabel=\"Hospitals per page\"\r\n            hasCheckbox={false}\r\n            dataPageInfo={pageInfo}\r\n          >\r\n            {hospitals.map((row) => {\r\n              const {\r\n                _id,\r\n                profileUrl,\r\n                doctorsCount,\r\n                userCount,\r\n                partnersCount,\r\n                name,\r\n                enrolleCount,\r\n              } = row;\r\n\r\n              return (\r\n                <TableRow\r\n                  hover\r\n                  role=\"checkbox\"\r\n                  tabIndex={-1}\r\n                  key={_id}\r\n                  style={{ cursor: \"pointer\" }}\r\n                  onClick={() => patientConsultation(_id)}\r\n                >\r\n                  <TableCell\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{ maxWidth: \"20rem\" }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        height: \"100%\",\r\n                        display: \"flex\",\r\n                        alignItems: \"left\",\r\n                      }}\r\n                    >\r\n                      <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Link to={`/patients`} className={classes.link}>\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        classes={{ root: classes.title }}\r\n                      >\r\n                        {userCount ? userCount : \"NA\"}\r\n                      </Typography>\r\n                    </Link>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Link to={`/hcps`} className={classes.link}>\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        classes={{ root: classes.title }}\r\n                      >\r\n                        {doctorsCount ? doctorsCount : \"NA\"}\r\n                      </Typography>\r\n                    </Link>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Link\r\n                      to={`/user-type/${_id}/partners`}\r\n                      className={classes.link}\r\n                    >\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        classes={{ root: classes.title }}\r\n                      >\r\n                        {partnersCount ? partnersCount : \"NA\"}\r\n                      </Typography>\r\n                    </Link>\r\n                  </TableCell>\r\n\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Link to={`/hmo/${_id}`} className={classes.link}>\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        classes={{ root: classes.title }}\r\n                      >\r\n                        {enrolleCount ? enrolleCount : \"NA\"}\r\n                      </Typography>\r\n                    </Link>\r\n                  </TableCell>\r\n\r\n                  <TableCell\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{\r\n                      color: theme.palette.common.grey,\r\n                      // maxWidth: \"2rem\",\r\n                      width: \"15%\",\r\n                    }}\r\n                  >\r\n                    {profileUrl ? (\r\n                      <Typography\r\n                        style={{\r\n                          color: theme.palette.common.grey,\r\n                          maxWidth: \"3rem\",\r\n                        }}\r\n                        sx={{ display: \"flex\", alignItems: \"center\" }}\r\n                      >\r\n                        {trucateProfileLink(profileUrl)}\r\n                        <div style={{ marginLeft: \"1rem\" }}>\r\n                          <Copy name=\"Profile Link\" text={profileUrl} />\r\n                        </div>\r\n                      </Typography>\r\n                    ) : (\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        disableRipple\r\n                        sx={{ width: \"50%\" }}\r\n                        className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                        // onClick={() => handleGenerateLink(_id)}\r\n                      >\r\n                        Generate Link\r\n                      </Button>\r\n                    )}\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </EnhancedTable>\r\n        </Grid>\r\n      ) : (\r\n        <EmptyTable\r\n          headCells={hospitalTableHeadCells2}\r\n          paginationLabel=\"Hospitals per page\"\r\n        />\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Healas;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\PartnersProvider.js",["1376","1377","1378","1379","1380","1381","1382","1383","1384","1385","1386"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\r\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  Checkbox,\r\n  TableCell,\r\n  Avatar,\r\n  TableRow,\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { categoryFilterOptions, defaultPageInfo } from \"helpers/mockData\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport {\r\n  changeTableLimit,\r\n  deleteItem,\r\n  deleteVar,\r\n  filterData,\r\n  handlePageChange,\r\n  banks,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport DeletePartner from \"components/modals/DeleteOrDisable\";\r\nimport { partnersHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport {\r\n  addPartner,\r\n  addPartnerCategory,\r\n  regeneratePartnerProfileUrl,\r\n} from \"components/graphQL/Mutation\";\r\nimport {\r\n  getPartners,\r\n  getSingleProvider,\r\n  getProviders,\r\n  DELETE_PARTNER,\r\n} from \"components/graphQL/useQuery\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport {\r\n  addNewPartnerValidationSchema,\r\n  addPartnerValidationSchema,\r\n  filterPartnersValidationSchema,\r\n} from \"helpers/validationSchemas\";\r\nimport Filter from \"components/Forms/Filters\";\r\nimport { PageInfo } from \"components/graphQL/fragment\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport isFirstDayOfMonth from \"date-fns/isFirstDayOfMonth/index\";\r\n\r\nconst PartnersProvider = () => {\r\n  const theme = useTheme();\r\n  const { id } = useParams();\r\n  const classes = useStyles();\r\n  const { displayAlert } = useAlert();\r\n  /* const [setCategoryDatas] = useState([]); */\r\n  const { setSelectedRows } = useActions();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [partner, setPartners] = useState([]);\r\n  const [dropDown, setDropDown] = useState([]);\r\n  const [addPartners] = useMutation(addPartner);\r\n  const categoryData = useQuery(getSingleProvider);\r\n  const [delete_partner] = useLazyQuery(DELETE_PARTNER);\r\n  /*   const [searchPartner, setSearchPartner] = useState(\"\"); */\r\n  const [isDeleting, setIsDeleting] = useState({});\r\n  const [addPartnerCat] = useMutation(addPartnerCategory);\r\n  const { data: da, loading: load } = useQuery(getProviders);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [openAddPartner, setOpenAddPartner] = useState(false);\r\n  const [openFilterPartner, setOpenFilterPartner] = useState(false);\r\n  const [openDeletePartner, setOpenDeletePartner] = useState(false);\r\n  const [partnerToDelete, setPartnerToDelete] = useState(null);\r\n  const [partnerFilterValues, setPartnerFilterValues] = useState({\r\n    category: \"\",\r\n  });\r\n  const { selectedRows /* page */ } = useSelector((state) => state.tables);\r\n  const [openAddPartnerCategory, setAddPartnerCategory] = useState(false);\r\n  const [fetchPartners, { loading, error, refetch, variables }] =\r\n    useLazyQuery(getPartners);\r\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\r\n\r\n  const specializations = [\r\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\r\n    { key: \"Hospital\", value: \"Hospital\" },\r\n  ];\r\n  const categoryOptions = [\r\n    { key: \"Diagnostics\", value: \"diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"pharmacy\" },\r\n    { key: \"Hospital\", value: \"hospital\" },\r\n  ];\r\n  const classificationOptions = [\r\n    { key: \"Primary Healthcare\", value: \"Primary Healthcare\" },\r\n    { key: \"Secondary Healthcare\", value: \"Secondary Healthcare\" },\r\n  ];\r\n\r\n  const specializationOptions = [\r\n    { key: \"Dental Care\", value: \"Dental Care\" },\r\n    { key: \"Eye Clinic\", value: \"Eye Clinic\" },\r\n    { key: \"Skin Care\", value: \"Skin Care\" },\r\n    { key: \"Mental Care\", value: \"Mental Care\" },\r\n  ];\r\n  const specializations5 = [\r\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\r\n    { key: \"Hospital\", value: \"Hospital\" },\r\n  ];\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const darkButtonType = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const initialValues = {\r\n    Name: \"\",\r\n    date: \"\",\r\n    category: \"\",\r\n  };\r\n\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    email: \"\",\r\n    specialization: \"\",\r\n    category: \"\",\r\n    account: \"\",\r\n    address: \"\",\r\n    phone: \"\",\r\n    classification: \"\",\r\n    bank: \"\",\r\n    image: null,\r\n    provider: \"\",\r\n  };\r\n\r\n  const initialValues2 = {\r\n    category: \"\",\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then((res) => {\r\n        const { data } = res;\r\n        if (data) {\r\n          setPartners(data?.getPartners?.data || []);\r\n          setPageInfo(data?.getPartners?.pageInfo || defaultPageInfo);\r\n        }\r\n        if (!data) {\r\n          setPartners(res?.getPartners?.data || []);\r\n          setPageInfo(res?.getPartners?.pageInfo || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  const fetchPartnersData = async () => {\r\n    const res = fetchPartners({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        provider: id,\r\n      },\r\n    });\r\n    setTableData(res, \"Couldn't fetch Partners data\");\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchPartnersData();\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (da) {\r\n      const datas = da.getProviders.provider;\r\n      setDropDown(\r\n        datas &&\r\n          datas.map((i) => {\r\n            return { key: i.name, value: i._id };\r\n          })\r\n      );\r\n    }\r\n  }, [da]);\r\n\r\n  useEffect(() => {\r\n    (partner || []).map((p) => {\r\n      const newIsDeleting = isDeleting;\r\n      setIsDeleting({ [p._id]: false, ...newIsDeleting });\r\n      return null;\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [partner]);\r\n\r\n  const onSubmit = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const onSubmit2 = async (values, onSubmitProps) => {\r\n    const { category } = values;\r\n\r\n    try {\r\n      const addCatRes = await addPartnerCat({\r\n        variables: {\r\n          name: category,\r\n        },\r\n      });\r\n\r\n      if (addCatRes?.addPartner?.partner) {\r\n        setAddPartnerCategory(false);\r\n        onSubmitProps.resetForm();\r\n        const res = refetch();\r\n        setTableData(res, \"Couldn't fetch partners.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n  const onSubmit1 = async (values, onSubmitProps) => {\r\n    console.log(values);\r\n    let {\r\n      name,\r\n      email,\r\n      category,\r\n      phone,\r\n      bank,\r\n      specialization,\r\n      provider,\r\n      image,\r\n      account,\r\n    } = values;\r\n    name = name.trim();\r\n\r\n    try {\r\n      await addPartners({\r\n        variables: {\r\n          name,\r\n          email,\r\n          category,\r\n          specialization,\r\n          account,\r\n          phone,\r\n          bank,\r\n          logoImageUrl: image,\r\n          providerId: provider,\r\n        },\r\n        refetchQueries: [{ query: getPartners }],\r\n      });\r\n      enqueueSnackbar(\"Partner added successfully\", {\r\n        variant: \"success\",\r\n      });\r\n      onSubmitProps.resetForm();\r\n      setOpenAddPartner(false);\r\n    } catch (err) {\r\n      console.log(err, \"err\");\r\n      enqueueSnackbar(\"Email is already taken\", {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  const onFilterCategoryChange = async (value) => {\r\n    try {\r\n      deleteVar(variables);\r\n      setPartnerFilterValues({ ...partnerFilterValues, category: value });\r\n      const filterVariables = { category: value };\r\n\r\n      const res = filterData(filterVariables, {\r\n        fetchData: fetchPartners,\r\n        refetch: refetch,\r\n        variables: variables,\r\n      });\r\n      await setTableData(res, \"couldn't filter table.\");\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setPartnerFilterValues, \"\");\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\r\n    setFilterValue(defaultVal);\r\n\r\n    deleteVar(variables);\r\n\r\n    const res = refetch();\r\n    await setTableData(res, \"couldn't filter table.\");\r\n  };\r\n  const [newProfileUrl, setNewProfileUrl] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setNewProfileUrl(daa?.regeneratePartnerProfileUrl?.partner?.profileUrl);\r\n  }, [daa]);\r\n  const [Id, setId] = useState(\"\");\r\n  const handleGenerateLink = async (id) => {\r\n    setId(id);\r\n    await regenerate({\r\n      variables: {\r\n        id,\r\n      },\r\n      refetchQueries: [\r\n        {\r\n          query: getPartners,\r\n          variables: {\r\n            variables: pageInfo.page,\r\n            limit: PageInfo.limit,\r\n            provider: id,\r\n          },\r\n        },\r\n      ],\r\n    });\r\n  };\r\n\r\n  const z = (id) => {\r\n    let b = \"\";\r\n    const m = daa?.regeneratePartnerProfileUrl?.partner?._id;\r\n    if (id === m) {\r\n      b = m;\r\n    } else {\r\n      b = \"\";\r\n    }\r\n    return b;\r\n  };\r\n  useEffect(() => {\r\n    partner.map((item) => {\r\n      if (item._id === Id) {\r\n        return {\r\n          ...item,\r\n          profileUrl: newProfileUrl,\r\n        };\r\n      }\r\n    });\r\n\r\n    //eslint-disable-next-line\r\n  }, [Id, newProfileUrl]);\r\n  if (error || categoryData.error)\r\n    return <NoData error={error || categoryData.error} />;\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      gap={{ sm: 4, xs: 2 }}\r\n      flexWrap=\"nowrap\"\r\n      height=\"100%\"\r\n    >\r\n      <Grid\r\n        item\r\n        container\r\n        gap={2}\r\n        direction={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          justifyContent=\"flex-end\"\r\n          alignItems=\"center\"\r\n          flex={{ sm: 1, xs: 1, md: 1 }}\r\n        >\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<PersonAddAlt1Icon />}\r\n              title=\"Add \"\r\n              type={darkButtonType}\r\n              onClick={() => setOpenAddPartner(true)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        filters={\r\n          <Filter\r\n            onHandleChange={(e) => onFilterCategoryChange(e?.target?.value)}\r\n            onClickClearBtn={() => onFilterCategoryChange(\"\")}\r\n            options={[{ key: \"Category\", value: \"\" }, ...categoryFilterOptions]}\r\n            name=\"category\"\r\n            placeholder=\"None\"\r\n            value={partnerFilterValues.category}\r\n            hasClearBtn={true}\r\n            disable={loading}\r\n          />\r\n        }\r\n      >\r\n        {load || loading ? (\r\n          <Loader />\r\n        ) : partner.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={partnersHeadCells}\r\n              rows={partner}\r\n              paginationLabel=\"Partner per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchPartners, {\r\n                  first: e,\r\n                  provider: id,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchPartners, page, pageInfo, id);\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {partner.map((row, index) => {\r\n                const isItemSelected = isSelected(row.id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                const { _id, logoImageUrl, name, email, category } = row;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ maxWidth: \"20rem\" }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"left\",\r\n                        }}\r\n                      >\r\n                        <span style={{ marginRight: \"1rem\" }}>\r\n                          <Avatar\r\n                            alt={`Display Photo of ${name}`}\r\n                            src={logoImageUrl}\r\n                            sx={{ width: 24, height: 24 }}\r\n                          />\r\n                        </span>\r\n                        <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {email}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {category}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={partnersHeadCells}\r\n            paginationLabel=\"Doctors per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n      <Modals\r\n        isOpen={openFilterPartner}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        width={{ sm: \"40vw\", xs: \"90vw\", md: \"40vw\" }}\r\n        handleClose={() => setOpenFilterPartner(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={onSubmit}\r\n          validateOnBlur={false}\r\n          validationSchema={filterPartnersValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={3}>\r\n                  <Grid item marginBottom={3}>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          name=\"Name\"\r\n                          label=\"Name\"\r\n                          placeholder=\"Select name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializations}\r\n                          name=\"date\"\r\n                          label=\"Date\"\r\n                          placeholder=\"Choose Date\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  container\r\n                  spacing={2}\r\n                  style={{ marginBottom: \"10rem\" }}\r\n                >\r\n                  <Grid item xs={6}>\r\n                    <FormikControl\r\n                      control=\"select\"\r\n                      options={specializations}\r\n                      name=\"category\"\r\n                      label=\"Category\"\r\n                      placeholder=\"Select Category\"\r\n                    />\r\n                  </Grid>\r\n                  {/* Placeholder grid */}\r\n                  <Grid item md></Grid>\r\n                </Grid>\r\n                <Grid item container xs={12}>\r\n                  <CustomButton\r\n                    title=\"Apply Filter\"\r\n                    width=\"100%\"\r\n                    type={buttonType}\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                  />\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      {/* ADD NEW PARTER MODAL */}\r\n      <Modals\r\n        isOpen={openAddPartner}\r\n        title=\"Add Partners\"\r\n        rowSpacing={5}\r\n        handleClose={() => setOpenAddPartner(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={addNewPartnerValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty, values, setFieldValue }) => {\r\n            const { classification, category } = values;\r\n            return (\r\n              <Form style={{ marginTop: \"1rem\" }}>\r\n                <Grid container direction=\"column\" gap={1.5}>\r\n                  <Grid item container>\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Name\"\r\n                          id=\"name\"\r\n                          name=\"name\"\r\n                          placeholder=\"Enter Partner name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Email\"\r\n                          id=\"name\"\r\n                          name=\"email\"\r\n                          placeholder=\"Enter Email\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\" Account Number\"\r\n                          id=\"account\"\r\n                          name=\"account\"\r\n                          placeholder=\"Enter Account Number\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Phone Number\"\r\n                          id=\"phone\"\r\n                          name=\"phone\"\r\n                          placeholder=\"Enter Phone Number\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={categoryOptions}\r\n                          name=\"category\"\r\n                          label=\"Category\"\r\n                          placeholder=\"Category\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={banks}\r\n                          name=\"bank\"\r\n                          label=\"Bank\"\r\n                          placeholder=\"Select Bank\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    {category === \"hospital\" && (\r\n                      <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={dropDown}\r\n                            name=\"provider\"\r\n                            label=\"Provider\"\r\n                            id=\"provider\"\r\n                            placeholder=\"Select Provider\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={classificationOptions}\r\n                            name=\"classification\"\r\n                            label=\"Classification\"\r\n                            id=\"classification\"\r\n                            placeholder=\"select classification\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    )}\r\n                    <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"file\"\r\n                          name=\"image\"\r\n                          label=\"Company Logo\"\r\n                          setFieldValue={setFieldValue}\r\n                        />\r\n                      </Grid>\r\n                      {classification === \"Secondary Healthcare\" && (\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={specializationOptions}\r\n                            name=\"specialization\"\r\n                            label=\"Specialization\"\r\n                            id=\"specialization\"\r\n                            placeholder=\"Select Specialization\"\r\n                          />\r\n                        </Grid>\r\n                      )}\r\n                    </Grid>\r\n                    <Grid item container flexWrap=\"nowrap\">\r\n                      <Grid item container>\r\n                        <FormikControl\r\n                          control=\"textarea\"\r\n                          name=\"address\"\r\n                          minRows={3}\r\n                          label=\"Address\"\r\n                          placeholder=\"Enter address\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container sx={{ mt: 1 }}>\r\n                    <CustomButton\r\n                      title=\"Add Partner\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      {/* Add Partner Category */}\r\n      <Modals\r\n        isOpen={openAddPartnerCategory}\r\n        title=\"Add Partners Category\"\r\n        rowSpacing={5}\r\n        handleClose={() => setAddPartnerCategory(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues2}\r\n          onSubmit={onSubmit2}\r\n          validationSchema={addPartnerValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid container direction=\"column\" gap={3}>\r\n                  <Grid item container>\r\n                    <Grid item container direction=\"column\" gap={1}>\r\n                      <Grid item container>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializations5}\r\n                          name=\"category\"\r\n                          label=\"Category\"\r\n                          placeholder=\"Specialization\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <CustomButton\r\n                      title=\"Add Partner\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n      <DeletePartner\r\n        open={openDeletePartner}\r\n        setOpen={setOpenDeletePartner}\r\n        title=\"Delete Partner\"\r\n        btnValue=\"delete\"\r\n        onConfirm={async () => {\r\n          const res = deleteItem(\r\n            delete_partner,\r\n            partnerToDelete,\r\n            setPartnerToDelete,\r\n            refetch,\r\n            Typography,\r\n            enqueueSnackbar,\r\n            setIsDeleting,\r\n            isDeleting\r\n          );\r\n          setOpenDeletePartner(false);\r\n          await setTableData(res, \"Couldn't refetch Partners\");\r\n        }}\r\n        confirmationMsg=\"delete partner\"\r\n        onCancel={() => {\r\n          setPartnerToDelete(null);\r\n        }}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default PartnersProvider;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\DoctorProvider.js",["1387","1388","1389"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NetworkStatus } from \"@apollo/client\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  Grid,\r\n  TableRow,\r\n  TableCell,\r\n  Button,\r\n  Checkbox,\r\n  Chip,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { timeConverter } from \"components/Utilities/Time\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { useStyles } from \"../../styles/doctorsPageStyles\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport {\r\n  getDoctorsProfile,\r\n  getDoctorsProfileByStatus,\r\n} from \"components/graphQL/useQuery\";\r\nimport { hcpsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { createDOctorProfile } from \"components/graphQL/Mutation\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\r\nimport { addDoctorValidationSchema } from \"helpers/validationSchemas\";\r\nimport { Loader, Modals, CustomButton } from \"components/Utilities\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport {\r\n  addDocInitialValues,\r\n  /* cadreFilterBy, */\r\n  defaultPageInfo,\r\n  docCadreOptions,\r\n  docSpecializationsOptions,\r\n  doctorsSearchOptions,\r\n  genderType,\r\n  /*  providerFilterBy,\r\n  specializationFilterBy,\r\n  statusFilterBy, */\r\n} from \"helpers/mockData\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport DoctorFilters from \"components/Forms/Filters/DoctorsFilters\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst DoctorProvider = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { displayAlert } = useAlert();\r\n  const { id } = useParams();\r\n  const [profiles, setProfiles] = useState(\"\");\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [openAddHcp, setOpenAddHcp] = useState(false);\r\n  const [createDoc] = useMutation(createDOctorProfile);\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [fetchDoctors, { error, loading, refetch, variables, networkStatus }] =\r\n    useLazyQuery(getDoctorsProfile);\r\n  const [\r\n    fetchDoctorsByStatus,\r\n    {\r\n      loading: byStatusLoading,\r\n      refetch: byStatusRefetch,\r\n      variables: byStatusVariables,\r\n    },\r\n  ] = useLazyQuery(getDoctorsProfileByStatus);\r\n\r\n  useEffect(() => {\r\n    fetchDoctors({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        providerId: id,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setPageInfo(data.doctorProfiles.pageInfo || []);\r\n          setProfiles(data.doctorProfiles.profile || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const onSubmit = async (values) => {\r\n    const {\r\n      createdAt,\r\n      updatedAt,\r\n      firstName,\r\n      lastName,\r\n      gender,\r\n      phone,\r\n      email,\r\n      hospital,\r\n      dociId,\r\n      specialization,\r\n      dob,\r\n      cadre,\r\n      image,\r\n    } = values;\r\n    const correctDOB = timeConverter(dob);\r\n    await createDoc({\r\n      variables: {\r\n        dociId,\r\n        createdAt,\r\n        updatedAt,\r\n        firstName,\r\n        lastName,\r\n        gender,\r\n        phoneNumber: phone,\r\n        email,\r\n        hospital,\r\n        specialization,\r\n        dob: correctDOB,\r\n        cadre,\r\n        image,\r\n        providerId: \"61db6f8968b248001aec4fcb\",\r\n      },\r\n      refetchQueries: [{ query: getDoctorsProfile }],\r\n    });\r\n    setOpenAddHcp(false);\r\n  };\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const getSearchPlaceholder = (filterBy) => {\r\n    return filterBy === \"id\"\r\n      ? \"Search by ID e.g 7NE6ELLO\"\r\n      : filterBy === \"firstName\"\r\n      ? \"Search by first name e.g John\"\r\n      : filterBy === \"lastName\"\r\n      ? \"Search by last name e.g Doe\"\r\n      : \"\";\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(data.doctorProfiles.pageInfo || defaultPageInfo);\r\n        setProfiles(data.doctorProfiles.profile || []);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\r\n      <Grid\r\n        item\r\n        gap={{ md: 4, sm: 4, xs: 2 }}\r\n        direction={{ sm: \"row\", xs: \"column\" }}\r\n        container\r\n        justifyContent=\"flex-end\"\r\n      >\r\n        <Grid item>\r\n          <CustomButton\r\n            endIcon={<AddIcon />}\r\n            title=\"Add Doctor\"\r\n            type={buttonType}\r\n            onClick={() => setOpenAddHcp(true)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      {/* ========= FILTERS =========== */}\r\n\r\n      <TableLayout\r\n        filters={\r\n          <DoctorFilters\r\n            setProfiles={setProfiles}\r\n            setPageInfo={setPageInfo}\r\n            queryParams={{\r\n              doctorsParams: { fetchDoctors, loading, refetch, variables },\r\n              doctorsByStatusParams: {\r\n                byStatusLoading,\r\n                byStatusVariables,\r\n                byStatusRefetch,\r\n                fetchDoctorsByStatus,\r\n              },\r\n            }}\r\n          />\r\n        }\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{ fetchData: fetchDoctors, variables, loading }}\r\n            setPageInfo={(data) =>\r\n              setPageInfo(data.doctorProfiles.pageInfo || {})\r\n            }\r\n            setProfiles={(data) =>\r\n              setProfiles(data.doctorProfiles.profile || [])\r\n            }\r\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\r\n            filterOptions={doctorsSearchOptions}\r\n          />\r\n        }\r\n      >\r\n        {loading ? (\r\n          <Loader />\r\n        ) : byStatusLoading ? (\r\n          <Loader />\r\n        ) : networkStatus === NetworkStatus.refetch ? (\r\n          <Loader />\r\n        ) : profiles.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={hcpsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"Doctors per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchDoctors, {\r\n                  first: e,\r\n                  providerId: id,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchDoctors, page, pageInfo, id);\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const {\r\n                  _id,\r\n                  dociId,\r\n                  firstName,\r\n                  provider,\r\n                  status,\r\n                  specialization,\r\n                  consultations,\r\n                  picture,\r\n                  lastName,\r\n                } = row;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        minWidth: \"10rem\",\r\n                      }}\r\n                    >\r\n                      {dociId && dociId.split(\"-\")[1]}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"left\",\r\n                        }}\r\n                      >\r\n                        <span style={{ marginRight: \"1rem\" }}>\r\n                          <Avatar\r\n                            alt={`Display Photo of ${firstName}`}\r\n                            src={picture ? picture : displayPhoto}\r\n                            sx={{ width: 24, height: 24 }}\r\n                          />\r\n                        </span>\r\n                        <span style={{ fontSize: \"1.25rem\" }}>\r\n                          {firstName} {lastName}\r\n                        </span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.grey }}\r\n                    >\r\n                      {specialization}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      {consultations ? consultations : 0}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.grey }}\r\n                    >\r\n                      {provider ? provider : \"No Provider\"}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Chip\r\n                        label={\r\n                          status && status === \"Active\" ? \"Active\" : \"Inactive\"\r\n                        }\r\n                        className={classes.badge}\r\n                        style={{\r\n                          background:\r\n                            status === \"Active\"\r\n                              ? theme.palette.common.lightGreen\r\n                              : theme.palette.common.lightRed,\r\n                          color:\r\n                            status === \"Active\"\r\n                              ? theme.palette.common.green\r\n                              : theme.palette.common.red,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        className={classes.button}\r\n                        component={Link}\r\n                        to={`hcps/${_id}`}\r\n                        endIcon={<ArrowForwardIosIcon />}\r\n                      >\r\n                        View Doctor\r\n                      </Button>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={hcpsHeadCells}\r\n            paginationLabel=\"Doctors per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n      {/* ADD Doctor MODAL */}\r\n      <Modals\r\n        isOpen={openAddHcp}\r\n        title=\"Add Doctor\"\r\n        rowSpacing={5}\r\n        height=\"auto\"\r\n        width={{ sm: \"50vw\", xs: \"90vw\" }}\r\n        handleClose={() => setOpenAddHcp(false)}\r\n      >\r\n        <Formik\r\n          initialValues={addDocInitialValues}\r\n          onSubmit={onSubmit}\r\n          validationSchema={addDoctorValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"1rem\" }}>\r\n                <Grid container direction=\"column\" gap={2}>\r\n                  <Grid item container direction=\"column\" gap={1}>\r\n                    <Grid item container spacing={2}>\r\n                      <Grid item container xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"First Name\"\r\n                          id=\"firstName\"\r\n                          name=\"firstName\"\r\n                          placeholder=\"Enter first name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item container xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Last Name\"\r\n                          id=\"lastName\"\r\n                          name=\"lastName\"\r\n                          placeholder=\"Enter last name\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid item container direction=\"column\" gap={2}>\r\n                      <Grid item container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"date\"\r\n                            name=\"dob\"\r\n                            label=\"DOB\"\r\n                            setFieldValue={setFieldValue}\r\n                            setValues={setValues}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <Grid container direction=\"column\">\r\n                            <FormikControl\r\n                              control=\"select\"\r\n                              options={docSpecializationsOptions}\r\n                              name=\"specialization\"\r\n                              label=\"Specialization\"\r\n                              placeholder=\"Specialization\"\r\n                            />\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container direction=\"column\" gap={2}>\r\n                    <Grid item container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          label=\"Gender\"\r\n                          id=\"gender\"\r\n                          name=\"gender\"\r\n                          options={genderType}\r\n                          placeholder=\"Gender\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Phone Number\"\r\n                          id=\"phone\"\r\n                          name=\"phone\"\r\n                          placeholder=\"Enter last Phone number\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item container direction=\"column\" gap={2}>\r\n                      <Grid item container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"input\"\r\n                            label=\"Hospital\"\r\n                            id=\"hospital\"\r\n                            name=\"hospital\"\r\n                            placeholder=\"Enter hospital Name\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6} marginBottom={{ xs: 1 }}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={docCadreOptions}\r\n                            name=\"cadre\"\r\n                            label=\"Cadre\"\r\n                            placeholder=\"Select Cadre\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container spacing={2} alignItems=\"center\">\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"file\"\r\n                        name=\"image\"\r\n                        label=\"Profile Pics\"\r\n                        setFieldValue={setFieldValue}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        label=\"Heala-ID\"\r\n                        id=\"dociId\"\r\n                        name=\"dociId\"\r\n                        placeholder=\"Enter Heala ID\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <CustomButton\r\n                      title=\"Add Doctor\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default DoctorProvider;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Hospital.js",["1390","1391","1392","1393","1394","1395","1396","1397","1398"],"import React, { useEffect, useState } from \"react\";\r\nimport { EmptyTable, NoData } from \"components/layouts\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Typography,\r\n  Avatar,\r\n  TableCell,\r\n  TableRow,\r\n} from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport Copy from \"components/Copy\";\r\nimport { trucateProfileLink } from \"helpers/filterHelperFunctions\";\r\nimport { hospitalTableHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport { trucateString } from \"helpers/filterHelperFunctions\";\r\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport { getProviders, getPartners } from \"components/graphQL/useQuery\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { regeneratePartnerProfileUrl } from \"components/graphQL/Mutation\";\r\n\r\nconst Hospital = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\r\n  const [hospitals, setHospitals] = useState([]);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const userTypeId = \"61ed2354e6091400135e3d94\";\r\n  const [fetchHospitals, { loading, error }] = useLazyQuery(getProviders, {\r\n    variables: { userTypeId },\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchHospitals()\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setHospitals(data?.getProviders?.provider || []);\r\n          setPageInfo(data?.getProviders?.pageInfo || {});\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, [fetchHospitals]);\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n      {hospitals.length > 0 ? (\r\n        <Grid\r\n          container\r\n          item\r\n          direction=\"column\"\r\n          overflow=\"hidden\"\r\n          maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n        >\r\n          <EnhancedTable\r\n            headCells={hospitalTableHeadCells}\r\n            rows={hospitals}\r\n            paginationLabel=\"Hospitals per page\"\r\n            hasCheckbox={false}\r\n            dataPageInfo={pageInfo}\r\n          >\r\n            {hospitals.map((row, index) => {\r\n              const { _id, name, icon, profileUrl, userCount, doctorCount } =\r\n                row;\r\n\r\n              //   const labelId = `enhanced-table-checkbox-${index}`;\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={_id}>\r\n                  <TableCell\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{ maxWidth: \"20rem\" }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        height: \"100%\",\r\n                        display: \"flex\",\r\n                        alignItems: \"left\",\r\n                      }}\r\n                    >\r\n                      <span style={{ marginRight: \"1rem\" }}>\r\n                        <Avatar\r\n                          alt={`Display Photo of ${name}`}\r\n                          src={icon}\r\n                          sx={{ width: 24, height: 24 }}\r\n                        />\r\n                      </span>\r\n                      <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Link\r\n                      to={`/patients/${_id}/filter`}\r\n                      className={classes.link}\r\n                    >\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        classes={{ root: classes.title }}\r\n                      >\r\n                        {userCount ? userCount : \"NA\"}\r\n                      </Typography>\r\n                    </Link>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Link to={`/hcps/${_id}/filter`} className={classes.link}>\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        classes={{ root: classes.title }}\r\n                      >\r\n                        {doctorCount ? doctorCount : \"NA\"}\r\n                      </Typography>\r\n                    </Link>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Link\r\n                      to={`/partners/${_id}/filter`}\r\n                      className={classes.link}\r\n                    >\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        classes={{ root: classes.title }}\r\n                      >\r\n                        {doctorCount ? doctorCount : \"NA\"}\r\n                      </Typography>\r\n                    </Link>\r\n                  </TableCell>\r\n\r\n                  <TableCell\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{\r\n                      color: theme.palette.common.grey,\r\n                      maxWidth: \"8rem\",\r\n                    }}\r\n                  >\r\n                    {profileUrl ? (\r\n                      <Typography\r\n                        style={{\r\n                          color: theme.palette.common.grey,\r\n                          maxWidth: \"8rem\",\r\n                        }}\r\n                        sx={{ display: \"flex\", alignItems: \"center\" }}\r\n                      >\r\n                        {trucateProfileLink(profileUrl)}\r\n                        <div style={{ marginLeft: \"1rem\" }}>\r\n                          <Copy name=\"Profile Link\" text={profileUrl} />\r\n                        </div>\r\n                      </Typography>\r\n                    ) : (\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        disableRipple\r\n                        className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                      >\r\n                        Generate Link\r\n                      </Button>\r\n                    )}\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </EnhancedTable>\r\n        </Grid>\r\n      ) : (\r\n        <EmptyTable\r\n          headCells={hospitalTableHeadCells}\r\n          paginationLabel=\"Hospitals per page\"\r\n        />\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Hospital;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Hm.js",["1399","1400","1401","1402","1403","1404","1405"],"import React, { useEffect, useState } from \"react\";\r\nimport { EmptyTable, NoData } from \"components/layouts\";\r\nimport { Grid, Avatar, Typography, TableCell, TableRow } from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n// import ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\n// import Copy from \"components/Copy\";\r\n// import { trucateProfileLink } from \"helpers/filterHelperFunctions\";\r\nimport { hospitalTableHeadCells5 } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\n// import { trucateString } from \"helpers/filterHelperFunctions\";\r\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport { getProviders, getPartners } from \"components/graphQL/useQuery\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { regeneratePartnerProfileUrl } from \"components/graphQL/Mutation\";\r\n\r\nconst Hm = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [regenerate, { data: daa }] = useMutation(regeneratePartnerProfileUrl);\r\n  const [hospitals, setHospitals] = useState([]);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [fetchHospitals, { loading, error }] = useLazyQuery(getProviders, {\r\n    variables: { userTypeId: \"61ed2354e6091400135e3d94\" },\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchHospitals()\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setHospitals(data?.getProviders?.provider || []);\r\n          setPageInfo(data?.getProviders?.pageInfo || {});\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n  }, [fetchHospitals]);\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n      {hospitals.length > 0 ? (\r\n        /* ================= HMO TABLE ================= */\r\n        <Grid\r\n          container\r\n          item\r\n          direction=\"column\"\r\n          overflow=\"hidden\"\r\n          maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n        >\r\n          <EnhancedTable\r\n            headCells={hospitalTableHeadCells5}\r\n            rows={hospitals}\r\n            paginationLabel=\"Hospitals per page\"\r\n            hasCheckbox={false}\r\n            dataPageInfo={pageInfo}\r\n          >\r\n            {hospitals.map((row, index) => {\r\n              const {\r\n                _id,\r\n                icon,\r\n                name,\r\n                userCount,\r\n                enrolleeCount,\r\n                partnersCount,\r\n              } = row;\r\n              // const labelId = `enhanced-table-checkbox-${index}`;\r\n              return (\r\n                <TableRow hover role=\"checkbox\" tabIndex={-1} key={_id}>\r\n                  <TableCell\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{ maxWidth: \"20rem\" }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        height: \"100%\",\r\n                        display: \"flex\",\r\n                        alignItems: \"left\",\r\n                      }}\r\n                    >\r\n                      <span style={{ marginRight: \"1rem\" }}>\r\n                        <Avatar\r\n                          alt={`Display Photo of ${name}`}\r\n                          src={icon}\r\n                          sx={{ width: 24, height: 24 }}\r\n                        />\r\n                      </span>\r\n                      <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Link\r\n                      to={`/patients/${_id}/filter`}\r\n                      className={classes.link}\r\n                    >\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        classes={{ root: classes.title }}\r\n                      >\r\n                        {userCount ? userCount : \"NA\"}\r\n                      </Typography>\r\n                    </Link>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Link to={`/hmo/${_id}`} className={classes.link}>\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        classes={{ root: classes.title }}\r\n                      >\r\n                        {enrolleeCount ? enrolleeCount : \"NA\"}\r\n                      </Typography>\r\n                    </Link>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Link\r\n                      to={`/partners/${_id}/filter`}\r\n                      className={classes.link}\r\n                    >\r\n                      <Typography\r\n                        variant=\"h3\"\r\n                        classes={{ root: classes.title }}\r\n                      >\r\n                        {partnersCount ? partnersCount : \"NA\"}\r\n                      </Typography>\r\n                    </Link>\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </EnhancedTable>\r\n        </Grid>\r\n      ) : (\r\n        <EmptyTable\r\n          headCells={hospitalTableHeadCells5}\r\n          paginationLabel=\"HMO per page\"\r\n        />\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Hm;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Heala.js",["1406","1407","1408","1409","1410","1411","1412","1413","1414","1415","1416","1417","1418","1419","1420","1421","1422","1423","1424"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\WhiteLabel.js",["1425"],"import React from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { ReactComponent as Administrator } from \"assets/images/administrator.svg\";\r\nimport { ReactComponent as ConsulationIcon } from \"assets/images/consultation.svg\";\r\nimport { Card } from \"components/Utilities\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  parentGrid: {\r\n    textDecoration: \"none\",\r\n    color: theme.palette.primary.main,\r\n\r\n    \"& > .MuiGrid-root.MuiGrid-container\": {\r\n      backgroundColor: \"#ffffff\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst WhiteLabel = () => {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        alignItems=\"space-between\"\r\n        gap=\"5rem\"\r\n        paddingY=\"2rem\"\r\n        justifyContent={{ sm: \"center\", md: \"center\" }}\r\n      >\r\n        <Grid item container md={5} sm={5} xs={12}>\r\n          <Grid item container flexDirection=\"column\">\r\n            <Link to=\"/label/provider\" style={{ textDecoration: \"none\" }}>\r\n              <Card\r\n                alt=\"providers \"\r\n                title=\"Providers\"\r\n                background={theme.palette.common.lightGreen}\r\n              >\r\n                <Administrator fill={theme.palette.common.green} />\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container md={5} sm={5} xs={12}>\r\n          <Grid item container flexDirection=\"column\">\r\n            <Link to=\"/label/types\" style={{ textDecoration: \"none\" }}>\r\n              <Card\r\n                alt=\"User Types\"\r\n                title=\"User Types\"\r\n                background={theme.palette.common.lightRed}\r\n              >\r\n                <ConsulationIcon fill={theme.palette.common.red} />\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WhiteLabel;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\WaitingListDetails.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\WaitingList.js",["1426"],"import React from \"react\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport WaitingListTable from \"components/layouts/WaitingListTable\";\r\nimport PreviousButton from \"components/Utilities/PreviousButton\";\r\n\r\nconst WaitingList = (props) => {\r\n  return (\r\n    <Grid container direction=\"column\">\r\n      <Grid item style={{ marginBottom: \"3rem\" }}>\r\n        <PreviousButton path=\"/appointments\" />\r\n      </Grid>\r\n      <Grid item>\r\n        <Typography variant=\"h2\">Waiting List</Typography>\r\n      </Grid>\r\n      <Grid item style={{ marginTop: \"5rem\" }}>\r\n        <WaitingListTable\r\n          path=\"/appointments/waiting-list\" /* onClick={() => setWaitingListMenu(1)} */\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default WaitingList;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ViewReferral.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\PatientProvider.js",["1427","1428","1429","1430","1431","1432","1433","1434","1435","1436","1437","1438","1439","1440","1441","1442","1443"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useLazyQuery, NetworkStatus } from \"@apollo/client\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\n\r\nimport PatientsRow from \"components/Rows/PatientsRow\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\n// import displayPhoto from \"assets/images/avatar.svg\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useStyles } from \"styles/patientsPageStyles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport PatientFilters from \"components/Forms/Filters/PatientFilters\";\r\nimport { patientsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo, searchOptions } from \"../../helpers/mockData\";\r\nimport {\r\n  getPatients,\r\n  getPatientsByPlan,\r\n  getPatientsByStatus,\r\n} from \"components/graphQL/useQuery\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\n\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { getSearchPlaceholder } from \"helpers/func\";\r\n\r\nconst PatientProvider = () => {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const { displayAlert } = useAlert();\r\n  const { setSelectedRows } = useActions();\r\n  const { provider } = useSelector((state) => state.patient);\r\n  const [profiles, setProfiles] = useState([]);\r\n  const { id } = useParams();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const [fetchPatient, { loading, refetch, error, variables, networkStatus }] =\r\n    useLazyQuery(getPatients);\r\n  const [\r\n    fetchPatientByStatus,\r\n    {\r\n      loading: byStatusLoading,\r\n      variables: byStatusVaribles,\r\n      refetch: byStatusRefetch,\r\n    },\r\n  ] = useLazyQuery(getPatientsByStatus);\r\n  const [\r\n    fetchPatientByPlan,\r\n    {\r\n      loading: byPlanLoading,\r\n      variables: byPlanVaribles,\r\n      refetch: byPlanRefetch,\r\n    },\r\n  ] = useLazyQuery(getPatientsByPlan);\r\n\r\n  const [pageInfo, setPageInfo] = useState({\r\n    page: 0,\r\n    totalPages: 1,\r\n    hasNextPage: false,\r\n    hasPrevPage: false,\r\n    limit: 10,\r\n    totalDocs: 0,\r\n  });\r\n\r\n  useEffect(() => {\r\n    fetchPatient({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        provider: id,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setPageInfo(data?.profiles?.pageInfo || []);\r\n          setProfiles(data?.profiles?.data || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  console.log(provider);\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(data?.profiles?.pageInfo || defaultPageInfo);\r\n        setProfiles(data?.profiles?.data || []);\r\n      })\r\n      .catch((error) => {\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n      <Grid\r\n        item\r\n        container\r\n        spacing={2}\r\n        className={classes.searchFilterContainer}\r\n      >\r\n        <Grid item container flexWrap=\"wrap\" spacing={4}></Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        filters={\r\n          <PatientFilters\r\n            setProfiles={setProfiles}\r\n            setPageInfo={setPageInfo}\r\n            queryParams={{\r\n              patientsParams: { fetchPatient, loading, refetch, variables },\r\n              patientsByStatusParams: {\r\n                byStatusLoading,\r\n                byStatusVaribles,\r\n                byStatusRefetch,\r\n                fetchPatientByStatus,\r\n              },\r\n              patientsByPlanParams: {\r\n                byPlanLoading,\r\n                byPlanVaribles,\r\n                byPlanRefetch,\r\n                fetchPatientByPlan,\r\n              },\r\n            }}\r\n          />\r\n        }\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{\r\n              fetchData: fetchPatient,\r\n              variables,\r\n              loading,\r\n              newVariables: {},\r\n            }}\r\n            setPageInfo={(data) => setPageInfo(data?.profiles?.pageInfo || {})}\r\n            setProfiles={(data) => setProfiles(data?.profiles?.data || [])}\r\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\r\n            filterOptions={searchOptions}\r\n          />\r\n        }\r\n      >\r\n        {loading || byStatusLoading || byPlanLoading ? (\r\n          <Loader />\r\n        ) : networkStatus === NetworkStatus.refetch ? (\r\n          <Loader />\r\n        ) : profiles.length > 0 ? (\r\n          /* ================= PATIENTS TABLE ================= */\r\n          <Grid\r\n            container\r\n            item\r\n            direction=\"column\"\r\n            overflow=\"hidden\"\r\n            maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n          >\r\n            <EnhancedTable\r\n              headCells={patientsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"Patients per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchPatient, {\r\n                  first: e,\r\n                  provider: id,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchPatient, page, pageInfo, {});\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const {\r\n                  dociId,\r\n                  firstName,\r\n                  lastName,\r\n                  plan,\r\n                  provider,\r\n\r\n                  consultations,\r\n                  _id,\r\n                  status,\r\n                } = row;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <PatientsRow\r\n                    key={index}\r\n                    patientData={row}\r\n                    labelId={labelId}\r\n                  />\r\n                );\r\n                // return (\r\n                //   <TableRow\r\n                //     hover\r\n                //     role=\"checkbox\"\r\n                //     aria-checked={isItemSelected}\r\n                //     tabIndex={-1}\r\n                //     key={_id}\r\n                //     style={{cursor: \"pointer\"}}\r\n                //     selected={isItemSelected}\r\n                //   >\r\n                //     <TableCell padding=\"checkbox\">\r\n                //       <Checkbox\r\n                //         onClick={() =>\r\n                //           handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                //         }\r\n                //         color=\"primary\"\r\n                //         checked={isItemSelected}\r\n                //         inputProps={{\r\n                //           \"aria-labelledby\": labelId,\r\n                //         }}\r\n                //       />\r\n                //     </TableCell>\r\n                //     <TableCell\r\n                //       id={labelId}\r\n                //       scope=\"row\"\r\n                //       align=\"left\"\r\n                //       className={classes.tableCell}\r\n                //       style={{\r\n                //         color: theme.palette.common.grey,\r\n                //         textAlign: \"left\",\r\n                //       }}\r\n                //     >\r\n                //       {dociId?.split(\"-\")[1]}\r\n                //     </TableCell>\r\n                //     <TableCell align=\"left\" className={classes.tableCell}>\r\n                //       <div\r\n                //         style={{\r\n                //           height: \"100%\",\r\n                //           display: \"flex\",\r\n                //           alignItems: \"left\",\r\n                //         }}\r\n                //       >\r\n                //         <span\r\n                //           style={{ fontSize: \"1.25rem\" }}\r\n                //         >{`${firstName} ${lastName}`}</span>\r\n                //       </div>\r\n                //     </TableCell>\r\n                //     <TableCell align=\"left\" className={classes.tableCell}>\r\n                //       {plan ? plan : \"No Plan\"}\r\n                //     </TableCell>\r\n                //     <TableCell align=\"left\" className={classes.tableCell}>\r\n                //       {provider ? provider : \"No Provider\"}\r\n                //     </TableCell>\r\n                //     <TableCell align=\"left\" className={classes.tableCell}>\r\n                //       {consultations ? consultations : 0}\r\n                //     </TableCell>\r\n                //     <TableCell align=\"left\" className={classes.tableCell}>\r\n                //       <Chip\r\n                //         label={\r\n                //           status && status === \"Active\" ? \"Active\" : \"Inactive\"\r\n                //         }\r\n                //         className={classes.badge}\r\n                //         style={{\r\n                //           background:\r\n                //             status === \"Active\"\r\n                //               ? theme.palette.common.lightGreen\r\n                //               : theme.palette.common.lightRed,\r\n                //           color:\r\n                //             status === \"Active\"\r\n                //               ? theme.palette.common.green\r\n                //               : theme.palette.common.red,\r\n                //         }}\r\n                //       />\r\n                //     </TableCell>\r\n                //     <TableCell>\r\n                //       <Button\r\n                //         variant=\"contained\"\r\n                //         className={classes.button}\r\n                //         component={Link}\r\n                //         to={`patients/${_id}`}\r\n                //         endIcon={<ArrowForwardIosIcon />}\r\n                //       >\r\n                //         View Profile\r\n                //       </Button>\r\n                //     </TableCell>\r\n                //   </TableRow>\r\n                // );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={patientsHeadCells}\r\n            paginationLabel=\"Patients per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default PatientProvider;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\UserTypes.js",["1444","1445","1446","1447","1448","1449","1450","1451","1452","1453","1454","1455","1456","1457"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Illness.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\VideoCall.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\DoctorPayout.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SinglePatient.js",["1458","1459"],"import React, { useEffect, useState, memo, createElement } from \"react\";\r\nimport { Grid, Typography, Avatar } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport PersonRemoveIcon from \"@mui/icons-material/PersonRemove\";\r\n// import TrendingUpIcon from \"@mui/icons-material/TrendingUp\";\r\nimport { Card, CustomButton, Loader } from \"components/Utilities\";\r\nimport DisablePatient from \"components/modals/DeleteOrDisable\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { findProfile } from \"components/graphQL/useQuery\";\r\nimport { ReactComponent as ConsultationIcon } from \"assets/images/consultation.svg\";\r\nimport { ReactComponent as UserIcon } from \"assets/images/user.svg\";\r\nimport { ReactComponent as PrescriptionIcon } from \"assets/images/prescription.svg\";\r\nimport AssignmentIcon from \"@mui/icons-material/Assignment\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\n// import ReferPatient from \"components/modals/ReferPatient\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { getPatients } from \"components/graphQL/useQuery\";\r\nimport { deleteProfile } from \"components/graphQL/Mutation\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridContainer: {\r\n    paddingBottom: \"10rem\",\r\n  },\r\n\r\n  gridsWrapper: {\r\n    \"@media(max-width:600px)\": {\r\n      \"&.MuiGrid-root\": {\r\n        flexDirection: \"column\",\r\n        rowGap: \"1.5rem\",\r\n        alignItems: \"center\",\r\n        \"& .detailsContainer\": {\r\n          justifyContent: \"space-around\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n  parentGrid: {\r\n    textDecoration: \"none\",\r\n    color: theme.palette.primary.main,\r\n\r\n    \"& > .MuiGrid-root.MuiGrid-container\": {\r\n      backgroundColor: \"#ffffff\",\r\n    },\r\n  },\r\n\r\n  icon: {\r\n    \"&.css-1o5jd4y-MuiSvgIcon-root\": {\r\n      fontSize: \"4rem\",\r\n    },\r\n  },\r\n  \"@media(max-width:600px)\": {\r\n    \"&.MuiGrid-root\": {\r\n      flexDirection: \"column\",\r\n      rowGap: \"1.5rem\",\r\n    },\r\n  },\r\n  container: {\r\n    \"&.MuiGrid-root\": {\r\n      paddingTop: \"5rem\",\r\n      flexWrap: \"wrap\",\r\n      \"@media(max-width:600px)\": {\r\n        \"&\": {\r\n          padding: 0,\r\n          paddingTop: \"1rem\",\r\n          // flexDirection: \"column\",\r\n          rowGap: \"1.5rem\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n}));\r\nconst SinglePatient = () => {\r\n  const history = useHistory();\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { patientId } = useParams();\r\n  const [disableUser] = useMutation(deleteProfile);\r\n  const onConfirm = async () => {\r\n    try {\r\n      await disableUser({\r\n        variables: { id: patientId },\r\n        refetchQueries: [{ query: getPatients }],\r\n      });\r\n\r\n      history.push(\"/patients\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const cards2 = [\r\n    {\r\n      id: 1,\r\n      title: \"Patient Profile\",\r\n      background: theme.palette.common.lightRed,\r\n      path: \"profile\",\r\n      icon: UserIcon,\r\n      fill: theme.palette.common.red,\r\n    },\r\n    {\r\n      id: 4,\r\n      title: \"Medical Records\",\r\n      background: theme.palette.common.lightGreen,\r\n      path: \"records\",\r\n      icon: AssignmentIcon,\r\n      fill: theme.palette.common.green,\r\n    },\r\n    {\r\n      id: 5,\r\n      title: \"Consultations\",\r\n      background: theme.palette.common.lightRed,\r\n      path: \"consultations\",\r\n      icon: UserIcon,\r\n      fill: theme.palette.common.red,\r\n    },\r\n    {\r\n      id: 3,\r\n      title: \"Prescriptions\",\r\n      background: theme.palette.common.lightRed,\r\n      path: \"prescriptions\",\r\n      icon: PrescriptionIcon,\r\n      fill: theme.palette.common.red,\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Appointments\",\r\n      background: theme.palette.common.lightGreen,\r\n      path: \"appointments\",\r\n      icon: ConsultationIcon,\r\n      fill: theme.palette.common.green,\r\n    },\r\n    /* {\r\n      id: 6,\r\n      title: \"Medications\",\r\n      background: theme.palette.common.lightGreen,\r\n      path: \"medications\",\r\n      icon: UserIcon,\r\n      fill: theme.palette.common.green,\r\n    }, */\r\n  ];\r\n\r\n  const trasparentButton = {\r\n    background: \"transparent\",\r\n    hover: theme.palette.common.danger,\r\n    active: \"#f4f4f4\",\r\n  };\r\n\r\n  const [patientProfile, setPatientProfile] = useState(\"\");\r\n  const { loading, error, data } = useQuery(findProfile, {\r\n    variables: {\r\n      id: patientId,\r\n    },\r\n    fetchPolicy: \"cache-and-network\",\r\n    nextFetchPolicy: \"cache-only\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      localStorage.setItem(\"userDociId\", data.profile.dociId);\r\n      setPatientProfile(data.profile);\r\n    }\r\n  }, [data, patientId]);\r\n\r\n  const [openDisablePatient, setOpenDisablePatient] = useState(false);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  else {\r\n    return (\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        className={classes.gridContainer}\r\n        gap={2}\r\n      >\r\n        <Grid\r\n          item\r\n          justifyContent=\"space-between\"\r\n          alignItems=\"center\"\r\n          container\r\n          p={2}\r\n          className={classes.gridsWrapper}\r\n        >\r\n          <Grid\r\n            item\r\n            alignItems=\"center\"\r\n            container\r\n            gap={2}\r\n            className=\"detailsContainer\"\r\n            sx={{ flex: 1 }}\r\n          >\r\n            <Grid item>\r\n              <Avatar\r\n                alt={patientProfile.firstName}\r\n                src={patientProfile.image ? patientProfile.image : displayPhoto}\r\n                sx={{ width: 50, height: 50 }}\r\n              />\r\n            </Grid>\r\n\r\n            <Typography variant=\"h2\">\r\n              {patientProfile.firstName} {patientProfile.lastName}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<PersonRemoveIcon />}\r\n              title=\"Disable Patient\"\r\n              type={trasparentButton}\r\n              textColor={theme.palette.common.danger}\r\n              textColorOnHover=\"#ffffff\"\r\n              onClick={() => setOpenDisablePatient(true)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          <Grid\r\n            container\r\n            justifyContent=\"center\"\r\n            p={2}\r\n            flexWrap=\"wrap\"\r\n            // sx={{ background: \"yellow\" }}\r\n            columnSpacing={{ md: 6, sm: 4, xs: 4 }}\r\n            rowSpacing={{ md: 6, sm: 4, xs: 4 }}\r\n            // spacing={2}\r\n          >\r\n            {cards2.map((card) => (\r\n              <Grid\r\n                key={card.id}\r\n                item\r\n                xs={10}\r\n                sm={6}\r\n                md={4}\r\n                className={classes.parentGrid}\r\n                component={Link}\r\n                // gap={3}\r\n                p={0}\r\n                to={`/patients/${patientId}/${card.path}`}\r\n              >\r\n                <Card title={card.title} header=\"h4\">\r\n                  {createElement(card.icon, {\r\n                    fill: card.fill,\r\n                    color: \"success\",\r\n                    style: { fontSize: \"clamp(2.5rem, 3vw,4rem)\" },\r\n                  })}\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n        <DisablePatient\r\n          open={openDisablePatient}\r\n          setOpen={setOpenDisablePatient}\r\n          title=\"Delete Patient\"\r\n          btnValue=\"delete\"\r\n          onConfirm={onConfirm}\r\n          confirmationMsg=\"disable Patient\"\r\n        />\r\n      </Grid>\r\n    );\r\n  }\r\n};\r\n\r\nexport default memo(SinglePatient);\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SingleHCP.js",["1460","1461"],"import React, { useState, useEffect, createElement } from \"react\";\r\nimport { Grid, Typography, Avatar } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { doctor, getDoctorsProfile } from \"components/graphQL/useQuery\";\r\nimport PersonRemoveIcon from \"@mui/icons-material/PersonRemove\";\r\nimport PaymentsIcon from \"@mui/icons-material/Payments\";\r\nimport { Card, CustomButton, Loader } from \"components/Utilities\";\r\nimport DisablePatient from \"components/modals/DeleteOrDisable\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { ReactComponent as ConsultationIcon } from \"assets/images/consultation.svg\";\r\nimport { ReactComponent as UserIcon } from \"assets/images/user.svg\";\r\nimport { ReactComponent as CalendarIcon } from \"assets/images/calendar.svg\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { deleteDoctor } from \"components/graphQL/Mutation\";\r\n//\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridContainer: {\r\n    paddingBottom: \"10rem\",\r\n  },\r\n\r\n  gridsWrapper: {\r\n    \"@media(max-width:600px)\": {\r\n      \"&.MuiGrid-root\": {\r\n        flexDirection: \"column\",\r\n        rowGap: \"1.5rem\",\r\n        alignItems: \"center\",\r\n        \"& .detailsContainer\": {\r\n          justifyContent: \"space-around\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n  parentGrid: {\r\n    textDecoration: \"none\",\r\n    color: theme.palette.primary.main,\r\n\r\n    \"& > .MuiGrid-root.MuiGrid-container\": {\r\n      backgroundColor: \"#ffffff\",\r\n    },\r\n  },\r\n\r\n  icon: {\r\n    \"&.css-1o5jd4y-MuiSvgIcon-root\": {\r\n      fontSize: \"4rem\",\r\n    },\r\n  },\r\n  \"@media(max-width:600px)\": {\r\n    \"&.MuiGrid-root\": {\r\n      flexDirection: \"column\",\r\n      rowGap: \"1.5rem\",\r\n    },\r\n  },\r\n  container: {\r\n    \"&.MuiGrid-root\": {\r\n      paddingTop: \"5rem\",\r\n      flexWrap: \"wrap\",\r\n      \"@media(max-width:600px)\": {\r\n        \"&\": {\r\n          padding: 0,\r\n          paddingTop: \"1rem\",\r\n          // flexDirection: \"column\",\r\n          rowGap: \"1.5rem\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n}));\r\nconst SingleHCP = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const { hcpId } = useParams();\r\n  const history = useHistory();\r\n  const [disableUser] = useMutation(deleteDoctor);\r\n  const [doctorProfile, setDoctorProfile] = useState(\"\");\r\n  const [openDisableDoctor, setOpenDisableDoctor] = useState(false);\r\n  const profile = useQuery(doctor, {\r\n    variables: {\r\n      id: hcpId,\r\n    },\r\n  });\r\n  const onConfirm = async () => {\r\n    try {\r\n      await disableUser({\r\n        variables: { id: hcpId },\r\n        refetchQueries: [{ query: getDoctorsProfile }],\r\n      });\r\n      history.push(\"/hcps\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (profile.data) {\r\n      setDoctorProfile(profile.data.doctorProfile);\r\n    }\r\n  }, [profile.data, hcpId]);\r\n\r\n  const cards2 = [\r\n    {\r\n      id: 1,\r\n      title: \"Doctor Profile\",\r\n      background: theme.palette.common.lightRed,\r\n      path: \"profile\",\r\n      icon: UserIcon,\r\n      fill: theme.palette.common.red,\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Availability\",\r\n      background: theme.palette.common.lightGreen,\r\n      path: \"availability\",\r\n      icon: ConsultationIcon,\r\n      fill: theme.palette.common.green,\r\n    },\r\n    {\r\n      id: 3,\r\n      title: \"Consultations\",\r\n      background: theme.palette.common.lightRed,\r\n      path: \"consultations\",\r\n      icon: ConsultationIcon,\r\n      fill: theme.palette.common.red,\r\n    },\r\n    {\r\n      id: 4,\r\n      title: \"Earnings\",\r\n      background: theme.palette.common.lightGreen,\r\n      path: \"earnings\",\r\n      icon: PaymentsIcon,\r\n      fill: theme.palette.common.green,\r\n    },\r\n    {\r\n      id: 5,\r\n      title: \"Patients\",\r\n      background: theme.palette.common.lightRed,\r\n      path: \"doctor-patients\",\r\n      icon: UserIcon,\r\n      fill: theme.palette.common.red,\r\n    },\r\n    // {\r\n    //   id: 6,\r\n    //   title: \"Appointments\",\r\n    //   background: theme.palette.common.lightGreen,\r\n    //   path: \"appointments\",\r\n    //   icon: CalendarIcon,\r\n    //   fill: theme.palette.common.green,\r\n    // },\r\n  ];\r\n\r\n  const trasparentButton = {\r\n    background: \"transparent\",\r\n    hover: theme.palette.common.danger,\r\n    active: \"#f4f4f4\",\r\n  };\r\n\r\n  if (profile.loading) return <Loader />;\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        rowSpacing={2}\r\n        className={classes.gridContainer}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          alignItems=\"center\"\r\n          justifyContent=\"space-between\"\r\n          p={2}\r\n          className={classes.gridsWrapper}\r\n        >\r\n          {/* Display photo and profile name grid */}\r\n          <Grid\r\n            item\r\n            alignItems=\"center\"\r\n            container\r\n            gap={2}\r\n            className=\"detailsContainer\"\r\n            sx={{ flex: 1 }}\r\n          >\r\n            <Grid item>\r\n              <Avatar\r\n                alt={doctorProfile?.firstName}\r\n                src={doctorProfile?.picture}\r\n                sx={{ width: 50, height: 50 }}\r\n              />\r\n            </Grid>\r\n\r\n            <Typography variant=\"h2\">{`${doctorProfile.firstName} ${doctorProfile.lastName}`}</Typography>\r\n          </Grid>\r\n          {/* Action Buttons grid */}\r\n\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<PersonRemoveIcon />}\r\n              title=\"Disable Doctor\"\r\n              onClick={() => setOpenDisableDoctor(true)}\r\n              type={trasparentButton}\r\n              textColor={theme.palette.common.danger}\r\n              textColorOnHover=\"#ffffff\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* BOTTOM CARDS SECTION */}\r\n        <Grid item>\r\n          <Grid\r\n            container\r\n            justifyContent=\"center\"\r\n            p={2}\r\n            flexWrap=\"wrap\"\r\n            // sx={{ background: \"yellow\" }}\r\n            columnSpacing={{ md: 6, sm: 4, xs: 4 }}\r\n            rowSpacing={{ md: 6, sm: 4, xs: 4 }}\r\n            // spacing={2}\r\n          >\r\n            {cards2.map((card) => (\r\n              <Grid\r\n                key={card.id}\r\n                item\r\n                xs={10}\r\n                sm={6}\r\n                md={4}\r\n                className={classes.parentGrid}\r\n                component={Link}\r\n                to={`/hcps/${hcpId}/${card.path}`}\r\n              >\r\n                <Card title={card.title} header=\"h4\">\r\n                  {createElement(card.icon, {\r\n                    fill: card.fill,\r\n                    color:\r\n                      card.id === 4 || card.id === 6 ? \"success\" : undefined,\r\n                    style: { fontSize: \"clamp(2.5rem, 3vw,4rem)\" },\r\n                  })}\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <DisablePatient\r\n        open={openDisableDoctor}\r\n        setOpen={setOpenDisableDoctor}\r\n        title=\"Delete Doctor\"\r\n        btnValue=\"delete\"\r\n        confirmationMsg=\"delete Doctor\"\r\n        onConfirm={onConfirm}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleHCP;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Settings.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Prescriptions.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Providers.js",["1462","1463","1464","1465","1466","1467","1468"],"import React, { useState, useEffect } from \"react\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { partnersHeadCells2 } from \"components/Utilities/tableHeaders\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport {\r\n  Grid,\r\n  TableRow,\r\n  TableCell,\r\n  Checkbox,\r\n  Alert,\r\n  Button,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { DeleteOrDisable, ProviderModal } from \"components/modals\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useMutation, useLazyQuery, useQuery } from \"@apollo/client\";\r\nimport { getProviders /**/ } from \"components/graphQL/useQuery\";\r\nimport { deletProvider } from \"components/graphQL/Mutation\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  fetchMoreData,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { EditDelBtn } from \"components/Buttons/EditDelBtn\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  FormLabel: {\r\n    fontSize: \"1.6rem\",\r\n    color: theme.palette.common.dark,\r\n  },\r\n  btn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"10rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n  tableBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      height: \"3rem\",\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"2rem\",\r\n      boxShadow: \"none\",\r\n\r\n      \"&:hover\": {\r\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.5rem\",\r\n      },\r\n    },\r\n  },\r\n  redBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightRed,\r\n      color: theme.palette.common.red,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.error.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n  greenBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.success.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n  \"&.MuiButton-root\": {\r\n    ...theme.typography.btn,\r\n    background: theme.palette.common.black,\r\n    width: \"100%\",\r\n  },\r\n  checkbox: {\r\n    \"& .MuiSvgIcon-root\": {\r\n      fontSize: 28,\r\n    },\r\n    \"&.Mui-checked\": {\r\n      color: \"green !important\",\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      color: \"rgb(0 0 0)\",\r\n      fontWeight: 400,\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Providers = () => {\r\n  const classes = useStyles();\r\n  const { id: ids } = useParams();\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [fetchProviders, { error, loading, refetch }] =\r\n    useLazyQuery(getProviders);\r\n  const { data: dat, error: err, loading: load } = useQuery(getProviders);\r\n\r\n  useEffect(() => {\r\n    fetchProviders({\r\n      variables: {\r\n        first: pageInfo?.limit || 10,\r\n        userTypeId: ids,\r\n      },\r\n    });\r\n    //eslint-disable-next-line\r\n  }, [fetchProviders]);\r\n\r\n  // const onChange = async (e) => {\r\n  //   setSearchHcp(e);\r\n  //   if (e == \"\") {\r\n  //     refetch();\r\n  //   } else refetch({ name: e });\r\n  // };\r\n  const [id, setId] = useState(null);\r\n  const [deleteModal, setdeleteModal] = useState(false);\r\n  const [deleteProvider] = useMutation(deletProvider);\r\n  // const [singleProvider] = useLazyQuery(getSingleProvider);\r\n  const handleDeleteOpenDialog = (id) => {\r\n    setId(id);\r\n    setdeleteModal(true);\r\n  };\r\n  const [providers, setProviders] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (dat) {\r\n      setProviders(dat.getProviders.provider);\r\n      setPageInfo(dat.getProviders.pageInfo);\r\n    }\r\n  }, [dat]);\r\n\r\n  const theme = useTheme();\r\n  const handleDialogOpen = () => setIsOpen(true);\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n\r\n  const initialValues = {\r\n    name: \"\",\r\n    type: \"\",\r\n    image: null,\r\n    iconAlt: null,\r\n  };\r\n\r\n  const onConfirm = async () => {\r\n    try {\r\n      await deleteProvider({\r\n        variables: { id },\r\n        refetchQueries: [{ query: getProviders }],\r\n      });\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n  // const [searchHcp, setSearchHcp] = useState(\"\");\r\n  const [editId, setEditId] = useState(null);\r\n  const [isOpens, setIsOpens] = useState(false);\r\n  const handleEditCloseDialog = () => {\r\n    setEdit(false);\r\n  };\r\n  const [, setAlert] = useState(null);\r\n  const [edit, setEdit] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const handleDialogClose = async () => {\r\n    setIsOpen(false);\r\n    setEditId(null);\r\n    setSingleData();\r\n  };\r\n\r\n  /*   const handleDialogOpens1 = () => setIsOpens(true); */\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    userTypeId: \"\",\r\n  };\r\n  const onSubmit1 = async (values) => {\r\n    const { name, userTypeId } = values;\r\n    await refetch({\r\n      name,\r\n      userTypeId,\r\n    });\r\n    handleDialogCloses();\r\n  };\r\n  const validationSchema1 = Yup.object({\r\n    name: Yup.string(\"Enter your hospital\").trim(),\r\n    userTypeId: Yup.string(\"Enter your userTypeId\").trim(),\r\n  });\r\n\r\n  const handleDialogCloses = () => setIsOpens(false);\r\n  const handleEditOpenDialog = (id) => {\r\n    setEdit(true);\r\n    setEditId(id);\r\n  };\r\n  const [singleData, setSingleData] = useState();\r\n\r\n  if (loading || load) return <Loader />;\r\n  if (error || err) return <NoData error={error} />;\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        height=\"100%\"\r\n      >\r\n        <Grid\r\n          item\r\n          gap={{ sm: 4, xs: 2 }}\r\n          container\r\n          direction={{ md: \"row\", sm: \"column\" }}\r\n        >\r\n          <Grid item container justifyContent=\"space-between\">\r\n            <Grid item></Grid>\r\n            <Grid item>\r\n              <CustomButton\r\n                endIcon={<AddIcon />}\r\n                title=\"Add new Provider\"\r\n                type={buttonType}\r\n                onClick={handleDialogOpen}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <TableLayout>\r\n          {providers.length > 0 ? (\r\n            <Grid item container height=\"100%\" direction=\"column\">\r\n              <EnhancedTable\r\n                headCells={partnersHeadCells2}\r\n                rows={providers}\r\n                paginationLabel=\"Providers per page\"\r\n                hasCheckbox={true}\r\n                changeLimit={async (e) => {\r\n                  await changeTableLimit(fetchProviders, {\r\n                    first: e,\r\n                    userTypeId: ids,\r\n                  });\r\n                }}\r\n                dataPageInfo={pageInfo}\r\n                handlePagination={async (page) => {\r\n                  await handlePageChange(fetchProviders, page, pageInfo, {\r\n                    userTypeId: ids,\r\n                  });\r\n                }}\r\n              >\r\n                {providers.map((row, index) => {\r\n                  const { _id, name, icon } = row;\r\n                  const isItemSelected = isSelected(_id, selectedRows);\r\n\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={_id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell align=\"center\" className={classes.tableCell}>\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                          }}\r\n                        >\r\n                          <span style={{ marginRight: \"1rem\" }}>\r\n                            <Avatar src={icon} sx={{ width: 24, height: 24 }} />\r\n                          </span>\r\n                          <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell align=\"center\" className={classes.tableCell}>\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"space-around\",\r\n                          }}\r\n                        >\r\n                          <EditDelBtn\r\n                            onHandleClick={() => handleEditOpenDialog(_id)}\r\n                            type=\"edit\"\r\n                            text=\"Edit Provider\"\r\n                          />\r\n                          <EditDelBtn\r\n                            onHandleClick={() => handleDeleteOpenDialog(_id)}\r\n                            type=\"delete\"\r\n                            text=\"Delete Provider\"\r\n                          />\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={partnersHeadCells2}\r\n              paginationLabel=\"Providers  per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </Grid>\r\n\r\n      <Modals\r\n        isOpen={isOpen}\r\n        title=\"Add new Provider\"\r\n        rowSpacing={5}\r\n        handleClose={handleDialogClose}\r\n      >\r\n        <ProviderModal\r\n          handleDialogClose={handleDialogClose}\r\n          type=\"add\"\r\n          setAlert={setAlert}\r\n          editId={editId}\r\n          setSingleData={setSingleData}\r\n          initialValues={initialValues}\r\n        />\r\n      </Modals>\r\n      {/* edit Modal */}\r\n      <Modals\r\n        isOpen={edit}\r\n        title=\"Edit Provider\"\r\n        rowSpacing={5}\r\n        handleClose={handleEditCloseDialog}\r\n      >\r\n        <ProviderModal\r\n          handleDialogClose={handleEditCloseDialog}\r\n          type=\"edit\"\r\n          editId={editId}\r\n          setAlert={setAlert}\r\n          initialValues={initialValues}\r\n          singleData={singleData}\r\n          setSingleData={setSingleData}\r\n        />\r\n      </Modals>\r\n\r\n      <DeleteOrDisable\r\n        open={deleteModal}\r\n        setOpen={setdeleteModal}\r\n        title=\"Delete Provider\"\r\n        onConfirm={onConfirm}\r\n        confirmationMsg=\"delete provider\"\r\n        btnValue=\"Delete\"\r\n      />\r\n\r\n      <Modals\r\n        isOpen={isOpens}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        handleClose={handleDialogCloses}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={validationSchema1}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\">\r\n                  <Grid item container>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      name=\"name\"\r\n                      label=\"Hospital Name\"\r\n                      placeholder=\"Enter Hospital Name\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    style={{ marginBottom: \"18rem\", marginTop: \"3rem\" }}\r\n                  >\r\n                    <Grid container>\r\n                      <Grid item container>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          name=\"userTypeId\"\r\n                          label=\"User Type\"\r\n                          placeholder=\"Enter User Type\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <CustomButton\r\n                      title=\"Apply Filter\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Providers;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ReferralTab.js",["1469","1470","1471"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  TableRow,\r\n  Grid,\r\n  Checkbox,\r\n  TableCell,\r\n  Avatar,\r\n  Button,\r\n} from \"@mui/material\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { referralHeader } from \"components/Utilities/tableHeaders\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getRefferals } from \"components/graphQL/useQuery\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\r\nimport Filter from \"components/Forms/Filters\";\r\nimport {\r\n  changeTableLimit,\r\n  fetchMoreData,\r\n  handlePageChange,\r\n  onFilterValueChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport {\r\n  defaultPageInfo,\r\n  referralFilterBy,\r\n  referralPageDefaultFilterValues,\r\n} from \"helpers/mockData\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      width: \"10rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      color: \"rgb(0 0 0)\",\r\n      fontWeight: 400,\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst ReferralTab = () => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const theme = useTheme();\r\n\r\n  /*   const onChange = async (e) => {\r\n    setSearchMail(e);\r\n    if (searchMail === \"\" || searchMail.length < 2) {\r\n      refetch();\r\n    } else refetch({ id: searchMail });\r\n  }; */\r\n\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  /*   const [searchMail, setSearchMail] = useState(\"\"); */\r\n  const [fetchRefferals, { loading, error, data, refetch, variables }] =\r\n    useLazyQuery(getRefferals);\r\n  const [referral, setReferral] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchRefferals({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchRefferals, pageInfo]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setReferral(data.getReferrals.referral);\r\n      setPageInfo(data.getReferrals.pageInfo);\r\n    }\r\n  }, [data]);\r\n\r\n  const [filterValues, setFilterValues] = useState(\r\n    referralPageDefaultFilterValues\r\n  );\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        height=\"100%\"\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n      >\r\n        <Grid\r\n          item\r\n          direction={{ sm: \"row\", xs: \"column\" }}\r\n          gap={{ sm: 4, xs: 2 }}\r\n          container\r\n        ></Grid>\r\n        <TableLayout\r\n          filters={\r\n            <Filter\r\n              onHandleChange={(e) =>\r\n                onFilterValueChange(\r\n                  e,\r\n                  \"type\",\r\n                  filterValues,\r\n                  setFilterValues,\r\n                  fetchRefferals,\r\n                  variables,\r\n                  refetch\r\n                )\r\n              }\r\n              options={[{ key: \"Status\", value: \"\" }, ...referralFilterBy]}\r\n              name=\"status\"\r\n              placeholder=\"By Type\"\r\n              value={filterValues.type}\r\n            />\r\n          }\r\n        >\r\n          {loading ? (\r\n            <Loader />\r\n          ) : referral?.length > 0 ? (\r\n            <Grid item container>\r\n              <EnhancedTable\r\n                headCells={referralHeader}\r\n                rows={referral}\r\n                paginationLabel=\"referral per page\"\r\n                hasCheckbox={true}\r\n                changeLimit={async (e) => {\r\n                  changeTableLimit(fetchRefferals, { first: e });\r\n                }}\r\n                dataPageInfo={pageInfo}\r\n                handlePagination={async (page) => {\r\n                  await handlePageChange(fetchRefferals, page, pageInfo, {});\r\n                }}\r\n                handleChangePage={fetchMoreData}\r\n                fetchData={fetchRefferals}\r\n              >\r\n                {referral.map((row, index) => {\r\n                  const { _id, createdAt, type, doctorData, patientData } = row;\r\n                  const isItemSelected = isSelected(_id, selectedRows);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={_id}\r\n                      selected={isItemSelected}\r\n                      sx={{ cursor: \"pointer\" }}\r\n                      onClick={(e) => {\r\n                        e.stopPropagation();\r\n                        history.push(`referrals/${_id}`);\r\n                      }}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                      >\r\n                        {dateMoment(createdAt)}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                      >\r\n                        {/* {new Date(updatedAt)} */}\r\n                        {_id ? _id : \"No Value\"}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                          }}\r\n                        >\r\n                          <span style={{ fontSize: \"1.25rem\" }}>\r\n                            {doctorData?.firstName\r\n                              ? `${doctorData?.firstName} ${doctorData?.lastName}`\r\n                              : \"No Doctor\"}\r\n                          </span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                          }}\r\n                        >\r\n                          <span style={{ marginRight: \"1rem\" }}>\r\n                            <Avatar\r\n                              alt={`image of ${\r\n                                patientData?.firstName\r\n                                  ? patientData?.firstName\r\n                                  : \"placeholder Display Image\"\r\n                              }`}\r\n                              src={\r\n                                patientData?.picture\r\n                                  ? patientData?.picture\r\n                                  : displayPhoto\r\n                              }\r\n                              sx={{ width: 24, height: 24 }}\r\n                            />\r\n                          </span>\r\n                          <span style={{ fontSize: \"1.25rem\" }}>\r\n                            {patientData?.firstName\r\n                              ? `${patientData?.firstName} ${patientData?.lastName}`\r\n                              : \"No Patient\"}\r\n                          </span>\r\n                        </div>\r\n                      </TableCell>\r\n\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.black }}\r\n                      >\r\n                        {type}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={referralHeader}\r\n              paginationLabel=\"Referral  per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default ReferralTab;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Permission.js",["1472","1473","1474"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Loader, CustomButton, Modals } from \"components/Utilities\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  TableRow,\r\n  TableCell,\r\n  Checkbox,\r\n  Alert,\r\n  Chip,\r\n} from \"@mui/material\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { PermissionHeader } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport { PermissionModal, DeleteOrDisable } from \"components/modals\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getPermissions } from \"components/graphQL/useQuery\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { DELETE_PERMISSION } from \"components/graphQL/Mutation\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  flexContainer: {\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    margin: \"auto\",\r\n    width: \"100%\",\r\n    paddingBottom: \"2rem \",\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  FormLabel: {\r\n    \"&.MuiFormLabel-root\": {\r\n      ...theme.typography.FormLabel,\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n  tableBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      height: \"3rem\",\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"2rem\",\r\n      boxShadow: \"none\",\r\n\r\n      \"&:hover\": {\r\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.5rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  redBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightRed,\r\n      color: theme.palette.common.red,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.error.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n\r\n  greenBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.success.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst referralOptions = [\"Hello\", \"World\", \"Goodbye\", \"World\"];\r\nconst Permission = () => {\r\n  const [singlePermission, setSinglePermission] = useState();\r\n\r\n  const checkbox = [\r\n    { key: \"create\", value: \"create\" },\r\n    { key: \"update\", value: \"update\" },\r\n    { key: \"read\", value: \"read\" },\r\n    { key: \"delete\", value: \"delete\" },\r\n  ];\r\n\r\n  const initialValues = {\r\n    name: \"\",\r\n    // checkbox: [],\r\n    description: \"\",\r\n  };\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    date: \"\",\r\n    category: \"\",\r\n  };\r\n\r\n  const validationSchema1 = Yup.object({\r\n    name: Yup.string(\"Enter your Permission\")\r\n      .trim()\r\n      .required(\"permission is required\"),\r\n    date: Yup.string(\"Select Date\").required(\"Date is required\"),\r\n    category: Yup.string(\"Select Category\")\r\n      .trim()\r\n      .required(\"Category is required\"),\r\n  });\r\n  const onSubmit1 = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    // checkbox: Yup.array().min(1, \"Add atleast a permission\"),\r\n    name: Yup.string(\"Enter your Permission\").required(\r\n      \"permission is required\"\r\n    ),\r\n    description: Yup.string(\"Enter Description\").required(\r\n      \"Description is required\"\r\n    ),\r\n  });\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [deleteModal, setdeleteModal] = useState(false);\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [editId, setEditId] = useState(null);\r\n  const handleEditCloseDialog = useCallback(() => {\r\n    setIsEdit(false);\r\n    setSinglePermission(\"\");\r\n  }, []);\r\n  const [editDetails] = useState(null);\r\n  const [deleteId, setDeleteId] = useState(null);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const handleDialogOpen = () => setIsOpen(true);\r\n  const [alert, setAlert] = useState(null);\r\n  const handleDeleteOpenDialog = (id) => {\r\n    setdeleteModal(true);\r\n    setDeleteId(id);\r\n  };\r\n  const handleEditOpenDialog = async (id) => {\r\n    setEditId(id);\r\n    setIsEdit(true);\r\n  };\r\n\r\n  const onConfirm = async () => {\r\n    try {\r\n      const { data } = await deletPlan({\r\n        variables: { id: deleteId },\r\n        refetchQueries: [{ query: getPermissions }],\r\n      });\r\n      setAlert({\r\n        message: data.deletePermission.message,\r\n        type: \"success\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert(null);\r\n      }, 5000);\r\n    } catch (error) {\r\n      setAlert({\r\n        message: \"Plan  not successfully deleted\",\r\n        type: \"danger\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert(null);\r\n      }, 5000);\r\n    }\r\n  };\r\n  const handleDialogClose = () => setIsOpen(false);\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [fetchPermissions, { loading, data, error }] =\r\n    useLazyQuery(getPermissions);\r\n\r\n  useEffect(() => {\r\n    fetchPermissions({\r\n      variables: {\r\n        first: pageInfo?.limit,\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchPermissions, pageInfo]);\r\n\r\n  const [deletPlan] = useMutation(DELETE_PERMISSION);\r\n  const [permission, setPermission] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setPermission(data.getPermissions.permission);\r\n      setPageInfo(data.getPermissions.pageInfo);\r\n    }\r\n  }, [permission, data]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <>\r\n      {alert && Object.keys(alert).length > 0 && (\r\n        <Alert\r\n          variant=\"filled\"\r\n          severity={alert.type}\r\n          sx={{ justifyContent: \"center\", width: \"70%\", margin: \"0 auto\" }}\r\n        >\r\n          {alert.message}\r\n        </Alert>\r\n      )}\r\n      <Grid container direction=\"column\">\r\n        <Grid\r\n          item\r\n          sm\r\n          container\r\n          justifyContent={\"flex-end\"}\r\n          sx={{ marginBottom: \"2rem\" }}\r\n        >\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<AddIcon />}\r\n              title=\"Add New Permission\"\r\n              type={buttonType}\r\n              onClick={handleDialogOpen}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <TableLayout>\r\n          {Permission.length > 0 ? (\r\n            <Grid item container>\r\n              <EnhancedTable\r\n                headCells={PermissionHeader}\r\n                rows={Permission}\r\n                paginationLabel=\"permission per page\"\r\n                hasCheckbox={true}\r\n                changeLimit={async (e) => {\r\n                  changeTableLimit(fetchPermissions, { first: e });\r\n                }}\r\n                dataPageInfo={pageInfo}\r\n                handlePagination={async (page) => {\r\n                  handlePageChange(fetchPermissions, page, pageInfo, {});\r\n                }}\r\n              >\r\n                {permission.map((row, index) => {\r\n                  const isItemSelected = isSelected(row._id, selectedRows);\r\n\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  const data = row.name.split(\":\")[0];\r\n                  const newPerm = row.description.split(\":\")[1];\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row._id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              row.id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                      >\r\n                        <Grid\r\n                          container\r\n                          rowSpacing={2}\r\n                          style={{\r\n                            maxWidth: \"25rem\",\r\n                            display: \"inline-flex\",\r\n                            justifyContent: \"left\",\r\n                            alignItems: \"center\",\r\n                          }}\r\n                        >\r\n                          <Grid item xs={6}>\r\n                            <Chip label={data} className={classes.badge} />\r\n                          </Grid>\r\n                        </Grid>\r\n                      </TableCell>\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                      >\r\n                        <Grid\r\n                          container\r\n                          rowSpacing={2}\r\n                          style={{\r\n                            maxWidth: \"25rem\",\r\n                            display: \"inline-flex\",\r\n                            justifyContent: \"left\",\r\n                            alignItems: \"center\",\r\n                          }}\r\n                        >\r\n                          <Grid item xs={6}>\r\n                            <Chip label={newPerm} className={classes.badge} />\r\n                          </Grid>\r\n                        </Grid>\r\n                      </TableCell>\r\n\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                            justifyContent: \"space-around\",\r\n                          }}\r\n                        >\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            disableRipple\r\n                            onClick={() => handleEditOpenDialog(row._id)}\r\n                            className={`${classes.tableBtn} ${classes.greenBtn}`}\r\n                            endIcon={<EditIcon color=\"success\" />}\r\n                          >\r\n                            Edit\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            disableRipple\r\n                            onClick={() => handleDeleteOpenDialog(row._id)}\r\n                            className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                            to=\"/view\"\r\n                            endIcon={<DeleteIcon color=\"error\" />}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={PermissionHeader}\r\n              paginationLabel=\"Permission  per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </Grid>\r\n\r\n      <Modals\r\n        isOpen={isOpen}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        handleClose={handleDialogClose}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={validationSchema1}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\">\r\n                  <Grid item container spacing={2}>\r\n                    <Grid item xs={6} marginBottom={4}>\r\n                      <FormikControl\r\n                        control=\"select\"\r\n                        options={referralOptions}\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        placeholder=\"Enter Plan Name\"\r\n                      />\r\n                    </Grid>\r\n                    {/* second grid */}\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"select\"\r\n                        options={referralOptions}\r\n                        name=\"date\"\r\n                        label=\"Date\"\r\n                        placeholder=\"Choose Date\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid item container spacing={2}>\r\n                    <FormikControl\r\n                      control=\"select\"\r\n                      options={referralOptions}\r\n                      name=\"category\"\r\n                      label=\"Category\"\r\n                      placeholder=\"Save Category\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item container xs={12} marginTop={20}>\r\n                  <CustomButton\r\n                    title=\"Apply Filter\"\r\n                    width=\"100%\"\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                    type={buttonType}\r\n                  />\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      {/* // modal */}\r\n\r\n      <Modals\r\n        isOpen={isOpen}\r\n        title=\"Add new permission\"\r\n        handleClose={handleDialogClose}\r\n      >\r\n        <PermissionModal\r\n          handleDialogClose={handleDialogClose}\r\n          type=\"add\"\r\n          options={checkbox}\r\n          initialValues={initialValues}\r\n          validationSchema={validationSchema}\r\n          setAlert={setAlert}\r\n        />\r\n      </Modals>\r\n\r\n      {/* edit modala */}\r\n      <Modals\r\n        isOpen={isEdit}\r\n        title=\"Edit permission\"\r\n        handleClose={handleEditCloseDialog}\r\n      >\r\n        <PermissionModal\r\n          handleDialogClose={handleEditCloseDialog}\r\n          type=\"edit\"\r\n          options={checkbox}\r\n          singlePermission={singlePermission}\r\n          editId={editId}\r\n          validationSchema={validationSchema}\r\n          setAlert={setAlert}\r\n          editDetails={editDetails}\r\n          setSinglePermission={setSinglePermission}\r\n        />\r\n      </Modals>\r\n      {/* delete modal */}\r\n      <DeleteOrDisable\r\n        open={deleteModal}\r\n        setOpen={setdeleteModal}\r\n        title=\"Delete Permission\"\r\n        confirmationMsg=\"delete permission\"\r\n        btnValue=\"Delete\"\r\n        onConfirm={onConfirm}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default Permission;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\PendingPayout.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ViewMessage.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\PatientProfile.js",["1475","1476"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ViewHCP.js",["1477","1478","1479","1480","1481","1482","1483"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\DoctorEarning.js",["1484","1485","1486","1487"],"import React, { useEffect, useState } from \"react\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Checkbox,\r\n  TableRow,\r\n  TableCell,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport { timeMoment, dateMoment } from \"components/Utilities/Time\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getMyEarnings } from \"components/graphQL/useQuery\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { payoutHeaders } from \"components/Utilities/tableHeaders\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\n// import Filter from \"components/Forms/Filters\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  fetchMoreData,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  iconWrapper: {\r\n    width: 20,\r\n    height: 20,\r\n    borderRadius: \"50%\",\r\n    display: \"grid\",\r\n    placeContent: \"center\",\r\n    marginLeft: \"1rem\",\r\n    background: theme.palette.common.lightGreen,\r\n  },\r\n\r\n  button: {\r\n    \"&.css-1zf5oc-MuiButtonBase-root-MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"10rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      color: \"rgb(0 0 0)\",\r\n      fontWeight: 400,\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst DoctorEarning = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const history = useHistory();\r\n  const { hcpId } = useParams();\r\n  const { displayAlert } = useAlert();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [payout, setPayout] = useState([]);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n\r\n  const [fetchPayout, { loading, error }] = useLazyQuery(getMyEarnings);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      fetchPayout({\r\n        variables: { first: pageInfo?.limit, doctor: hcpId },\r\n      }).then(({ data }) => {\r\n        if (!data) throw Error(\"Couldn't fetch doctors payout data\");\r\n        setPageInfo(data?.getMyEarnings?.pageInfo);\r\n        setPayout(data?.getMyEarnings?.data);\r\n      });\r\n    } catch (error) {\r\n      // eslint-disable-next-line no-console\r\n      console.error(error);\r\n    }\r\n  }, [fetchPayout, pageInfo?.limit, hcpId]);\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    const data = response?.data;\r\n    try {\r\n      if (data) {\r\n        setPageInfo(data?.getMyEarnings?.pageInfo || defaultPageInfo);\r\n        setPayout(data?.getMyEarnings?.data || []);\r\n      }\r\n    } catch (error) {\r\n      // eslint-disable-next-line no-console\r\n      console.error(error);\r\n      displayAlert(\"error\", errMsg);\r\n    }\r\n  };\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <Grid container direction=\"column\" rowSpacing={2}>\r\n      <>\r\n        <Grid\r\n          item\r\n          container\r\n          justifyContent=\"space-between\"\r\n          style={{ paddingBottom: \"3rem\" }}\r\n        >\r\n          <Grid item container spacing={3} alignItems=\"center\"></Grid>\r\n        </Grid>\r\n        <TableLayout>\r\n          {payout.length > 0 ? (\r\n            <Grid item container>\r\n              <EnhancedTable\r\n                headCells={payoutHeaders}\r\n                rows={payout}\r\n                paginationLabel=\"Earning per page\"\r\n                hasCheckbox={true}\r\n                changeLimit={async (e) => {\r\n                  const res = await changeTableLimit(fetchPayout, {\r\n                    first: e,\r\n                    doctor: hcpId,\r\n                  });\r\n                  await setTableData(res, \"Failed to change table limit.\");\r\n                }}\r\n                dataPageInfo={pageInfo}\r\n                handlePagination={async (page) => {\r\n                  const res = await handlePageChange(\r\n                    fetchPayout,\r\n                    page,\r\n                    pageInfo,\r\n                    { doctor: hcpId }\r\n                  );\r\n                  await setTableData(res, \"Failed to change table page.\");\r\n                }}\r\n                fetchData={fetchPayout}\r\n                handleChangePage={fetchMoreData}\r\n              >\r\n                {payout.map((row, index) => {\r\n                  const {\r\n                    balance,\r\n                    createdAt,\r\n                    _id,\r\n                    doctorData,\r\n                    consultationData,\r\n                  } = row;\r\n                  const isItemSelected = isSelected(_id, selectedRows);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  const rowId = consultationData._id;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={_id}\r\n                      selected={isItemSelected}\r\n                      sx={{ cursor: \"pointer\" }}\r\n                      onClick={(e) => {\r\n                        e.stopPropagation();\r\n                        history.push(`/hcps/${hcpId}/earnings/earn/${rowId}`);\r\n                      }}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        {doctorData ? (\r\n                          <div\r\n                            style={{\r\n                              height: \"100%\",\r\n                              display: \"flex\",\r\n                              alignItems: \"left\",\r\n                            }}\r\n                          >\r\n                            <span style={{ fontSize: \"1.25rem\" }}>\r\n                              {doctorData\r\n                                ? `${doctorData?.lastName} ${doctorData?.lastName}`\r\n                                : \"No Value\"}\r\n                            </span>\r\n                          </div>\r\n                        ) : (\r\n                          \"No Name\"\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.red }}\r\n                      >\r\n                        {balance}\r\n                      </TableCell>\r\n\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                      >\r\n                        {`${dateMoment(createdAt)} - ${timeMoment(createdAt)}`}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={payoutHeaders}\r\n              paginationLabel=\"Earnings  per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default DoctorEarning;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\PatientAppointment.js",["1488","1489","1490","1491","1492","1493"],"import React, { useState, useEffect } from \"react\";\r\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\r\nimport {\r\n  CustomButton,\r\n  /* FilterList, */ Modals,\r\n  Loader,\r\n} from \"components/Utilities\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport {\r\n  Grid,\r\n  Alert,\r\n  Typography,\r\n  TableRow,\r\n  TableCell,\r\n  Checkbox,\r\n  Button,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport { deleteAppointment } from \"components/graphQL/Mutation\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport { getAppoint, getDOCAppoint } from \"components/graphQL/useQuery\";\r\nimport { DeleteOrDisable } from \"components/modals\";\r\nimport { consultationsHeadCells2 } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport AssignmentIcon from \"@mui/icons-material/Assignment\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { timeConverter, timeMoment } from \"components/Utilities/Time\";\r\nimport * as Yup from \"yup\";\r\nimport { updateAppointment } from \"components/graphQL/Mutation\";\r\nimport {\r\n  changeTableLimit,\r\n  fetchMoreData,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableCell: {\r\n    \"&.css-1jilxo7-MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n  btn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n\r\n  tableBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      height: \"3rem\",\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"2rem\",\r\n      boxShadow: \"none\",\r\n\r\n      \"&:hover\": {\r\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.5rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  redBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightRed,\r\n      color: theme.palette.common.red,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.error.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n\r\n  greenBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.success.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\n/* const filterOptions = [\r\n  { id: 0, value: \"Name\" },\r\n  { id: 1, value: \"Date\" },\r\n  { id: 2, value: \"Description\" },\r\n]; */\r\n\r\nconst PatientAppointment = () => {\r\n  const [updateAppoint] = useMutation(updateAppointment);\r\n  const [deleteAppointments] = useMutation(deleteAppointment);\r\n  const [pageInfo, setPageInfo] = useState([]);\r\n  const [alert, setAlert] = useState(null);\r\n  const [editId, setEditid] = useState(null);\r\n  const [doctorId, setDoctorId] = useState(null);\r\n  const handleDelete = (id) => {\r\n    setId(id);\r\n    setdeleteModal(true);\r\n  };\r\n\r\n  const handleSchedule = (id, doctor) => {\r\n    setIsPatients(true);\r\n    setEditid(id);\r\n    setDoctorId(doctor);\r\n  };\r\n  const onConfirm = async () => {\r\n    try {\r\n      await deleteAppointments({\r\n        variables: { id },\r\n        refetchQueries: [\r\n          {\r\n            query: getAppoint,\r\n            variables: {\r\n              id: patientId,\r\n              orderBy: \"-createdAt\",\r\n            },\r\n          },\r\n        ],\r\n      });\r\n      setAlert({\r\n        message: \"appointment deleted successfully\",\r\n        type: \"success\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert(null);\r\n      }, 5000);\r\n    } catch (error) {\r\n      setAlert({\r\n        message: \"appointment  not successfully deleted\",\r\n        type: \"danger\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert(null);\r\n      }, 5000);\r\n      console.log(error);\r\n    }\r\n  };\r\n  const [deleteModal, setdeleteModal] = useState(false);\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [isPatient, setIsPatient] = useState(false);\r\n  const [isPatients, setIsPatients] = useState(false);\r\n  const [id, setId] = useState(null);\r\n  /* const handlePatientOpen = () => setIsPatient(true); */\r\n  const handlePatientClose = () => setIsPatient(false);\r\n  const handlePatientCloses = () => setIsPatients(false);\r\n  const { patientId } = useParams();\r\n  const [patientAppointment, setPatientAppointment] = useState([]);\r\n  const initialValues = {\r\n    status: \"\",\r\n    gender: \"\",\r\n    date: \"\",\r\n    plan: \"\",\r\n  };\r\n  const initialValues1 = {\r\n    date: \"\",\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    date: Yup.string(\"Enter your affliate\").required(\"Date is required\"),\r\n    plan: Yup.string(\"Select your plan\").required(\"Plan is required\"),\r\n    gender: Yup.string(\"Select your gender\").required(\"Gender is required\"),\r\n    status: Yup.string(\"Select your status\").required(\"Status is required\"),\r\n  });\r\n  const validationSchema1 = Yup.object({\r\n    date: Yup.string(\"select date and time \").required(\r\n      \"Date  and time is required\"\r\n    ),\r\n  });\r\n  const onSubmit1 = async (values) => {\r\n    const { date } = values;\r\n    const timeValue = timeMoment(date);\r\n    const dateValue = timeConverter(date);\r\n    await updateAppoint({\r\n      variables: {\r\n        id: editId,\r\n        date: dateValue,\r\n        time: timeValue,\r\n        doctor: doctorId,\r\n      },\r\n      refetchQueries: [\r\n        {\r\n          query: getAppoint,\r\n          variables: {\r\n            id: patientId,\r\n            orderBy: \"-createdAt\",\r\n          },\r\n        },\r\n        {\r\n          query: getDOCAppoint,\r\n          variables: {\r\n            id: doctorId,\r\n            orderBy: \"-createdAt\",\r\n          },\r\n        },\r\n      ],\r\n    });\r\n    handlePatientCloses();\r\n  };\r\n  const onSubmit = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const [getPatientsAppointment, { loading, data, error }] =\r\n    useLazyQuery(getAppoint);\r\n\r\n  useEffect(() => {\r\n    getPatientsAppointment({\r\n      variables: {\r\n        id: patientId,\r\n        orderBy: \"-createdAt\",\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [getPatientsAppointment, patientId]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setPatientAppointment(data.getAppointments.data);\r\n      setPageInfo(data.getAppointments.pageInfo);\r\n    }\r\n  }, [data, patientId]);\r\n\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const genderType = [\r\n    { key: \"Male\", value: \"Male\" },\r\n    { key: \"Female\", value: \"Female\" },\r\n    { key: \"Prefer not to say\", value: \"Prefer not to say\" },\r\n  ];\r\n  const plans = [\r\n    { key: \"Plan 1\", value: \"Plan 1\" },\r\n    { key: \"Plan 2\", value: \"Plan 2\" },\r\n    { key: \"Plan 3\", value: \"Plan 3\" },\r\n    { key: \"Plan 4\", value: \"Plan 4\" },\r\n  ];\r\n  const plans1 = [\r\n    { key: \"Plan 1\", value: \"Plan 1\" },\r\n    { key: \"Plan 2\", value: \"Plan 2\" },\r\n    { key: \"Plan 3\", value: \"Plan 3\" },\r\n    { key: \"Plan 4\", value: \"Plan 4\" },\r\n  ];\r\n  const statusType = [\r\n    { key: \"Active\", value: \"Active\" },\r\n    { key: \"Blocked\", value: \"Blocked\" },\r\n  ];\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <>\r\n      {alert && Object.keys(alert).length > 0 && (\r\n        <Alert\r\n          variant=\"filled\"\r\n          severity={alert.type}\r\n          sx={{ justifyContent: \"center\", width: \"70%\", margin: \"0 auto\" }}\r\n        >\r\n          {alert.message}\r\n        </Alert>\r\n      )}\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        height=\"100%\"\r\n      >\r\n        <>\r\n          <Grid\r\n            item\r\n            container\r\n            flexWrap=\"nowrap\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            {/* <Grid item flex={1}>\r\n              <Typography variant=\"h2\">Appointments</Typography>\r\n            </Grid>{\" \"}\r\n            */}\r\n            {/* <Grid item>\r\n              <FilterList\r\n                onClick={handlePatientOpen}\r\n                options={filterOptions}\r\n                title=\"Filter\"\r\n              />\r\n            </Grid> */}\r\n          </Grid>\r\n          <TableLayout>\r\n            {patientAppointment.length > 0 ? (\r\n              <Grid item container height=\"100%\" direction=\"column\">\r\n                <EnhancedTable\r\n                  headCells={consultationsHeadCells2}\r\n                  rows={patientAppointment}\r\n                  paginationLabel=\"Patients per page\"\r\n                  hasCheckbox={true}\r\n                  changeLimit={async (e) => {\r\n                    await changeTableLimit(getPatientsAppointment, {\r\n                      first: e,\r\n                    });\r\n                  }}\r\n                  dataPageInfo={pageInfo}\r\n                  handlePagination={async (page) => {\r\n                    await handlePageChange(\r\n                      getPatientsAppointment,\r\n                      page,\r\n                      pageInfo\r\n                    );\r\n                  }}\r\n                >\r\n                  {patientAppointment\r\n                    // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                    .map((row, index) => {\r\n                      const isItemSelected = isSelected(row._id, selectedRows);\r\n                      const labelId = `enhanced-table-checkbox-${index}`;\r\n                      return (\r\n                        <TableRow\r\n                          hover\r\n                          role=\"checkbox\"\r\n                          aria-checked={isItemSelected}\r\n                          tabIndex={-1}\r\n                          key={row._id}\r\n                          selected={isItemSelected}\r\n                        >\r\n                          <TableCell padding=\"checkbox\">\r\n                            <Checkbox\r\n                              onClick={() =>\r\n                                handleSelectedRows(\r\n                                  row.id,\r\n                                  selectedRows,\r\n                                  setSelectedRows\r\n                                )\r\n                              }\r\n                              color=\"primary\"\r\n                              checked={isItemSelected}\r\n                              inputProps={{\r\n                                \"aria-labelledby\": labelId,\r\n                              }}\r\n                            />\r\n                          </TableCell>\r\n                          <TableCell\r\n                            align=\"left\"\r\n                            className={classes.tableCell}\r\n                            style={{ maxWidth: \"20rem\" }}\r\n                          >\r\n                            <div\r\n                              style={{\r\n                                height: \"100%\",\r\n                                display: \"flex\",\r\n                                alignItems: \"center\",\r\n                              }}\r\n                            >\r\n                              <span style={{ marginRight: \"1rem\" }}>\r\n                                <Avatar\r\n                                  alt={`Display Photo of ${row.doctorData.firstName}`}\r\n                                  src={\r\n                                    row.doctorData.picture\r\n                                      ? row.doctorData.picture\r\n                                      : displayPhoto\r\n                                  }\r\n                                  sx={{ width: 24, height: 24 }}\r\n                                />\r\n                              </span>\r\n                              <span style={{ fontSize: \"1.25rem\" }}>\r\n                                {`${row.doctorData.firstName} \r\n                             ${row.doctorData.lastName}`}\r\n                              </span>\r\n                            </div>\r\n                          </TableCell>\r\n                          <TableCell align=\"left\" className={classes.tableCell}>\r\n                            {row.date}\r\n                          </TableCell>\r\n                          <TableCell\r\n                            align=\"left\"\r\n                            className={classes.tableCell}\r\n                            style={{\r\n                              color: theme.palette.common.grey,\r\n                              maxWidth: \"20rem\",\r\n                            }}\r\n                          >\r\n                            {/* {hours(}row.time) */} {row.time}\r\n                          </TableCell>\r\n                          <TableCell align=\"left\" className={classes.tableCell}>\r\n                            <Button\r\n                              variant=\"contained\"\r\n                              disableRipple\r\n                              className={`${classes.tableBtn} ${classes.greenBtn}`}\r\n                              endIcon={<AssignmentIcon color=\"success\" />}\r\n                              onClick={() =>\r\n                                handleSchedule(row._id, row.doctor)\r\n                              }\r\n                            >\r\n                              Reschedule\r\n                            </Button>\r\n                          </TableCell>\r\n                          <TableCell align=\"left\" className={classes.tableCell}>\r\n                            <Button\r\n                              variant=\"contained\"\r\n                              disableRipple\r\n                              onClick={() => handleDelete(row._id)}\r\n                              className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                              endIcon={<DeleteIcon color=\"error\" />}\r\n                            >\r\n                              Cancel\r\n                            </Button>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n                </EnhancedTable>\r\n              </Grid>\r\n            ) : (\r\n              <EmptyTable\r\n                headCells={consultationsHeadCells2}\r\n                paginationLabel=\"Appointments per page\"\r\n              />\r\n            )}\r\n          </TableLayout>\r\n        </>\r\n      </Grid>\r\n\r\n      <Modals\r\n        isOpen={isPatients}\r\n        title=\"Reschedule Appointment\"\r\n        rowSpacing={5}\r\n        height=\"auto\"\r\n        handleClose={handlePatientCloses}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={validationSchema1}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid, setFieldValue }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={2}>\r\n                  <Grid item container>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item md>\r\n                        <FormikControl\r\n                          control=\"time\"\r\n                          name=\"date\"\r\n                          label=\"Date\"\r\n                          placeholder=\"Choose Date and Time\"\r\n                          setFieldValue={setFieldValue}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    container\r\n                    alignItems=\"flex-end\"\r\n                    marginTop={5}\r\n                    xs={12}\r\n                  >\r\n                    <CustomButton\r\n                      title=\"Reschedule Appointment\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      <Modals\r\n        isOpen={isPatient}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        height=\"auto\"\r\n        handleClose={handlePatientClose}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={onSubmit}\r\n          validationSchema={validationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={2}>\r\n                  <Grid item container>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item md>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={plans}\r\n                          name=\"date\"\r\n                          label=\"Date\"\r\n                          placeholder=\"Choose Date\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={plans1}\r\n                          name=\"plan\"\r\n                          label=\"Plan\"\r\n                          placeholder=\"Select Plan\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container gap={3}>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item md>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={genderType}\r\n                          name=\"gender\"\r\n                          label=\"Gender\"\r\n                          placeholder=\"Choose Gender\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={statusType}\r\n                          name=\"status\"\r\n                          label=\"Status\"\r\n                          placeholder=\"Select status\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    container\r\n                    alignItems=\"flex-end\"\r\n                    marginTop={5}\r\n                    xs={12}\r\n                  >\r\n                    <CustomButton\r\n                      title=\" Apply Filter\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n      {/* delete modal */}\r\n      <DeleteOrDisable\r\n        open={deleteModal}\r\n        onConfirm={() => console.log(\"confrimed\")}\r\n        setOpen={setdeleteModal}\r\n        title=\"Cancel Consultation\"\r\n        confirmationMsg=\"cancel appointment\"\r\n        btnValue=\"cancel\"\r\n      />\r\n\r\n      <DeleteOrDisable\r\n        open={deleteModal}\r\n        setOpen={setdeleteModal}\r\n        title=\"Delete Appointment\"\r\n        onConfirm={onConfirm}\r\n        confirmationMsg=\"delete appointment\"\r\n        btnValue=\"Delete\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PatientAppointment;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Subscription.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Partners.js",["1494","1495","1496","1497","1498","1499","1500","1501","1502","1503","1504","1505","1506"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Chat.js",["1507","1508"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { Grid, Typography, Divider } from \"@mui/material\";\r\nimport { Loader, CustomButton, PreviousButton } from \"components/Utilities\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { CREATE_MESSAGE } from \"components/graphQL/Mutation\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  showSuccessMsg,\r\n  handleError,\r\n} from \"../../helpers/filterHelperFunctions\";\r\nimport { getMessage, getProfile } from \"components/graphQL/useQuery\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridWrapper: {\r\n    \"&.MuiGrid-item\": {\r\n      borderRadius: \"1rem\",\r\n      background: \"#fff\",\r\n      padding: \"2rem 4rem\",\r\n      maxWidth: \"60rem !important\",\r\n      boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.1)\",\r\n    },\r\n  },\r\n  inputGrid: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n  },\r\n  heading: {\r\n    \"&.MuiTypography-root\": {\r\n      color: theme.palette.common.grey,\r\n      //   fontSize: \"1rem\"\r\n    },\r\n  },\r\n  formInput: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    fontSize: \"1.5rem\",\r\n    padding: \".5rem 1rem\",\r\n    border: \"none\",\r\n    background: \"transparent\",\r\n    color: theme.palette.common.grey,\r\n\r\n    \"&:focus\": {\r\n      outline: \"none\",\r\n    },\r\n  },\r\n  textArea: {\r\n    border: \"1px solid rgba(0, 0, 0, 0.03)\",\r\n    resize: \"none\",\r\n    borderRadius: \"0.5rem\",\r\n  },\r\n  divider: {\r\n    \"&.MuiDivider-root\": {\r\n      borderColor: \"rgba(0, 0, 0, 0.03)\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Chat = () => {\r\n  const { patientId } = useParams();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  let history = useHistory();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [createNewMessage] = useMutation(CREATE_MESSAGE, {\r\n    refetchQueries: [{ query: getMessage }],\r\n  });\r\n  const { data, loading } = useQuery(getProfile, {\r\n    variables: { profileId: patientId },\r\n  });\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n  const [profile, setprofile] = useState(\"\");\r\n  const { firstName, lastName } = profile;\r\n\r\n  const initialValues = {\r\n    subject: \"\",\r\n    recipient: `${firstName} ${lastName} ` || \"\",\r\n    textarea: \"\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setprofile(data.profile);\r\n    }\r\n  }, [data]);\r\n\r\n  const validationSchema = Yup.object({\r\n    subject: Yup.string(\"Enter your subject\")\r\n      .trim()\r\n      .required(\"Subject is required\"),\r\n    textarea: Yup.string(\"Enter your message\")\r\n      .trim()\r\n      .required(\"Message is required\"),\r\n    recipient: Yup.string(\"Enter your recipient\")\r\n      .trim()\r\n      .required(\"recipients is required\"),\r\n  });\r\n  const onSubmit = async (values, onSubmitProps) => {\r\n    const id = localStorage.getItem(\"user_id\");\r\n    const { subject, textarea } = values;\r\n\r\n    try {\r\n      await createNewMessage({\r\n        variables: {\r\n          sender: id,\r\n          recipient: patientId,\r\n          subject,\r\n          body: textarea,\r\n        },\r\n      });\r\n      showSuccessMsg(enqueueSnackbar, Typography, \"Message sent\");\r\n    } catch (error) {\r\n      handleError(error, enqueueSnackbar);\r\n      console.log(error);\r\n    }\r\n    onSubmitProps.resetForm();\r\n    history.push(`/patients/${patientId}/profile`);\r\n    /* setSelectedScopedMenu(0); */\r\n  };\r\n\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validateOnBlur={false}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n      enableReinitialize\r\n    >\r\n      {({ isValid, isSubmitting, dirty }) => {\r\n        return (\r\n          <Form>\r\n            <Grid container direction=\"column\">\r\n              <Grid item style={{ marginBottom: \"3rem\" }}>\r\n                <PreviousButton path={`/patients/${patientId}/profile`} />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" alignItems=\"center\">\r\n                <Grid item>\r\n                  <Typography variant=\"h4\" style={{ marginBottom: \"3rem\" }}>\r\n                    Create New Message\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  container\r\n                  direction=\"column\"\r\n                  className={classes.gridWrapper}\r\n                >\r\n                  <Grid item>\r\n                    <Grid\r\n                      item\r\n                      container\r\n                      alignItems=\"center\"\r\n                      sx={{ gap: \"0!important\" }}\r\n                    >\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Recipient:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item className={classes.inputGrid}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          id=\"message\"\r\n                          name=\"recipient\"\r\n                          disabled\r\n                          variant=\"standard\"\r\n                          className={classes.formInput}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Subject:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item className={classes.inputGrid}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          id=\"subject\"\r\n                          name=\"subject\"\r\n                          variant=\"standard\"\r\n                          className={classes.formInput}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container direction=\"column\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Message:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item style={{ height: \"15rem\" }}>\r\n                        <FormikControl\r\n                          control=\"textarea\"\r\n                          id=\"textarea\"\r\n                          name=\"textarea\"\r\n                          variant=\"standard\"\r\n                          fLabel={true}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    {/* <Divider className={classes.divider} /> */}\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    style={{ alignSelf: \"flex-end\", marginTop: \"2rem\" }}\r\n                  >\r\n                    <CustomButton\r\n                      title=\"Send Message\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                      // endIcon={<ArrowForwardIosIcon style={{ fontSize: \"1.5rem\" }} />}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Patients.js",["1509"],"import React, { useState, useEffect } from \"react\";\r\nimport { useLazyQuery, NetworkStatus } from \"@apollo/client\";\r\nimport { Grid } from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useStyles } from \"styles/patientsPageStyles\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\r\nimport PatientFilters from \"components/Forms/Filters/PatientFilters\";\r\nimport { patientsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo, searchOptions } from \"helpers/mockData\";\r\nimport {\r\n  getPatients,\r\n  getPatientsByPlan,\r\n  getPatientsByStatus,\r\n} from \"components/graphQL/useQuery\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { getSearchPlaceholder } from \"helpers/func\";\r\nimport PatientsRow from \"components/Rows/PatientsRow\";\r\n\r\nconst Patients = () => {\r\n  const classes = useStyles();\r\n  const { displayAlert } = useAlert();\r\n  const [profiles, setProfiles] = useState([]);\r\n  const [fetchPatient, { loading, refetch, error, variables, networkStatus }] =\r\n    useLazyQuery(getPatients);\r\n  const { provider } = useSelector((state) => state.patient);\r\n  const [\r\n    fetchPatientByStatus,\r\n    {\r\n      loading: byStatusLoading,\r\n      variables: byStatusVaribles,\r\n      refetch: byStatusRefetch,\r\n    },\r\n  ] = useLazyQuery(getPatientsByStatus);\r\n  const [\r\n    fetchPatientByPlan,\r\n    {\r\n      loading: byPlanLoading,\r\n      variables: byPlanVaribles,\r\n      refetch: byPlanRefetch,\r\n    },\r\n  ] = useLazyQuery(getPatientsByPlan);\r\n\r\n  const [pageInfo, setPageInfo] = useState({\r\n    page: 0,\r\n    totalPages: 1,\r\n    hasNextPage: false,\r\n    hasPrevPage: false,\r\n    limit: 10,\r\n    totalDocs: 0,\r\n  });\r\n  useEffect(() => {\r\n    fetchPatient({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data) {\r\n          setPageInfo(data?.profiles?.pageInfo || []);\r\n          setProfiles(data?.profiles?.data || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        // eslint-disable-next-line no-console\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(data?.profiles?.pageInfo || defaultPageInfo);\r\n        setProfiles(data?.profiles?.data || []);\r\n      })\r\n      .catch((error) => {\r\n        // eslint-disable-next-line no-console\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid item flex={1} container direction=\"column\" rowGap={2}>\r\n      <Grid\r\n        item\r\n        container\r\n        spacing={2}\r\n        className={classes.searchFilterContainer}\r\n      >\r\n        <Grid item container flexWrap=\"wrap\" spacing={4}></Grid>\r\n      </Grid>\r\n      <TableLayout\r\n        filters={\r\n          <PatientFilters\r\n            setProfiles={setProfiles}\r\n            setPageInfo={setPageInfo}\r\n            queryParams={{\r\n              patientsParams: { fetchPatient, loading, refetch, variables },\r\n              patientsByStatusParams: {\r\n                byStatusLoading,\r\n                byStatusVaribles,\r\n                byStatusRefetch,\r\n                fetchPatientByStatus,\r\n              },\r\n              patientsByPlanParams: {\r\n                byPlanLoading,\r\n                byPlanVaribles,\r\n                byPlanRefetch,\r\n                fetchPatientByPlan,\r\n              },\r\n            }}\r\n          />\r\n        }\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{\r\n              fetchData: fetchPatient,\r\n              variables,\r\n              loading,\r\n              newVariables: {},\r\n            }}\r\n            setPageInfo={(data) => setPageInfo(data?.profiles?.pageInfo || {})}\r\n            setProfiles={(data) => setProfiles(data?.profiles?.data || [])}\r\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\r\n            filterOptions={searchOptions}\r\n          />\r\n        }\r\n      >\r\n        {loading || byStatusLoading || byPlanLoading ? (\r\n          <Loader />\r\n        ) : networkStatus === NetworkStatus.refetch ? (\r\n          <Loader />\r\n        ) : profiles.length > 0 ? (\r\n          /* ================= PATIENTS TABLE ================= */\r\n          <Grid\r\n            container\r\n            item\r\n            direction=\"column\"\r\n            overflow=\"hidden\"\r\n            maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n          >\r\n            <EnhancedTable\r\n              headCells={patientsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"Patients per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchPatient, {\r\n                  first: e,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchPatient, page, pageInfo, {});\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <PatientsRow\r\n                    key={index}\r\n                    patientData={row}\r\n                    labelId={labelId}\r\n                  />\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={patientsHeadCells}\r\n            paginationLabel=\"Patients per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Patients;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Messages.js",["1510"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { debounce } from \"lodash\";\r\nimport { NoData, EnhancedTable, EmptyTable } from \"components/layouts\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { TableRow, TableCell } from \"@mui/material\";\r\nimport { Loader, CustomButton } from \"components/Utilities\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { dateMoment, timeMoment } from \"components/Utilities/Time\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { messagesHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { Avatar, Button, Checkbox, Grid } from \"@mui/material\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getMessage } from \"components/graphQL/useQuery\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"0.5rem\",\r\n      maxWidth: \"10rem\",\r\n      fontSize: \".85rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"0.85rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".2rem\",\r\n      },\r\n    },\r\n  },\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.25rem !important\",\r\n      height: \"2.7rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n  tableBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      height: \"3rem\",\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"2rem\",\r\n      boxShadow: \"none\",\r\n\r\n      \"&:hover\": {\r\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.5rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  redBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightRed,\r\n      color: theme.palette.common.red,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.error.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst Messages = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [pageInfo, setPageInfo] = useState({\r\n    page: 0,\r\n    totalPages: 1,\r\n    hasNextPage: false,\r\n    hasPrevPage: false,\r\n    limit: 10,\r\n    totalDocs: 0,\r\n  });\r\n  const greenButtonType = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  /*   const [searchMessage, setSearchMessage] = useState(\"\"); */\r\n  const [message, setMessage] = useState([]);\r\n\r\n  const [fetchMessages, { loading, data, error }] = useLazyQuery(getMessage);\r\n\r\n  useEffect(() => {\r\n    fetchMessages({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchMessages, pageInfo]);\r\n\r\n  /*   const onChange = async (e) => {\r\n    setSearchMessage(e);\r\n    if (e === \"\") {\r\n      refetch();\r\n    } else refetch({ recipient: e });\r\n  }; */\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setMessage(data.getMessages.messages);\r\n      setPageInfo(data.getMessages.pageInfo);\r\n    }\r\n  }, [message, data]);\r\n\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  //eslint-disable-next-line\r\n  const debouncer = useCallback(debounce(fetchMessages, 3000), []);\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  else {\r\n    return (\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        height=\"100%\"\r\n      >\r\n        <Grid\r\n          item\r\n          gap={{ md: 4, sm: 4, xs: 2 }}\r\n          direction={{ sm: \"row\", xs: \"column\" }}\r\n          container\r\n          justifyContent=\"flex-end\"\r\n        >\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<AddIcon />}\r\n              title=\"New Message\"\r\n              type={greenButtonType}\r\n              component={Link}\r\n              to=\"/messages/create-message\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <TableLayout>\r\n          {message.length > 0 ? (\r\n            <Grid item container height=\"100%\" direction=\"column\">\r\n              <EnhancedTable\r\n                headCells={messagesHeadCells}\r\n                rows={message}\r\n                paginationLabel=\"Message per page\"\r\n                hasCheckbox={true}\r\n                changeLimit={async (e) => {\r\n                  changeTableLimit(fetchMessages, { first: e });\r\n                }}\r\n                fetchData={fetchMessages}\r\n                handlePagination={async (page) => {\r\n                  handlePageChange(fetchMessages, page, pageInfo, {});\r\n                }}\r\n              >\r\n                {message.map((row, index) => {\r\n                  const { subject, createdAt, _id, recipientData } = row;\r\n                  const isItemSelected = isSelected(_id, selectedRows);\r\n\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={_id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"20rem\" }}\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"flex-start\",\r\n                          }}\r\n                        >\r\n                          <span style={{ marginRight: \"1rem\" }}>\r\n                            <Avatar\r\n                              alt={`Display Photo of  ${\r\n                                recipientData && recipientData.firstName\r\n                              }`}\r\n                              src={\r\n                                recipientData && recipientData.image\r\n                                  ? recipientData.image\r\n                                  : displayPhoto\r\n                              }\r\n                              sx={{ width: 24, height: 24 }}\r\n                            />\r\n                          </span>\r\n                          <span style={{ fontSize: \"1.25rem\" }}>\r\n                            {recipientData && recipientData.firstName\r\n                              ? `${recipientData.firstName} ${recipientData.lastName}`\r\n                              : \"No Value\"}\r\n                          </span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"15rem\" }}\r\n                      >\r\n                        {subject}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.grey }}\r\n                      >\r\n                        {dateMoment(createdAt)}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.grey }}\r\n                      >\r\n                        {timeMoment(createdAt)}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          className={classes.button}\r\n                          component={Link}\r\n                          to={`messages/${_id}`}\r\n                          endIcon={<ArrowForwardIosIcon />}\r\n                          /* onClick={() => setSelectedSubMenu(6)} */\r\n                        >\r\n                          View Message\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={messagesHeadCells}\r\n              paginationLabel=\"Messages  per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </Grid>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Messages;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\MedicalRecords.js",["1511"],"import React, { useEffect, useState } from \"react\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport { Loader, ProfileCard } from \"components/Utilities\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { calculateBMI } from \"components/Utilities/bMI\";\r\nimport {\r\n  getProfile,\r\n  findAllergies,\r\n  getLabResult,\r\n} from \"components/graphQL/useQuery\";\r\nimport { NoData } from \"components/layouts\";\r\n\r\nconst MedicalRecords = () => {\r\n  const { patientId } = useParams();\r\n  const [patientProfile, setPatientProfile] = useState(undefined);\r\n\r\n  const [patients, { loading, data, error }] = useLazyQuery(getProfile);\r\n  const [alergy, allergyResult] = useLazyQuery(findAllergies, {\r\n    variables: { id: patientId },\r\n  });\r\n  const [labResult, labResults] = useLazyQuery(getLabResult, {\r\n    variables: { id: patientId },\r\n  });\r\n  const [alergies, setAlergies] = useState([]);\r\n  const [lab, setLab] = useState([]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        patients({ variables: { profileId: patientId } });\r\n        alergy();\r\n        labResult();\r\n        setAlergies(allergyResult.data.findAllergies.allergies);\r\n        setLab(labResults.data.getLabResults.lab);\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    })();\r\n  }, [\r\n    alergy,\r\n    patients,\r\n    patientId,\r\n    labResult,\r\n    allergyResult.data,\r\n    labResults.data,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (data && data.profile) {\r\n      setPatientProfile(data.profile);\r\n    }\r\n  }, [data]);\r\n\r\n  if (loading || allergyResult.loading) return <Loader />;\r\n  if (error || allergyResult.error)\r\n    return <NoData error={allergyResult.error || error} />;\r\n  if (patientProfile) {\r\n    const value =\r\n      alergies.length > 0 &&\r\n      alergies?.map((alergy) => alergy.name).filter((i) => i !== undefined);\r\n\r\n    const labResult = lab?.map((alergy) => alergy);\r\n\r\n    return (\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={{\r\n          md: 5,\r\n          sm: 4,\r\n          xs: 3,\r\n        }}\r\n        paddingBottom={{ md: 10, sm: 5, xs: 3 }}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h2\">Medical Records</Typography>\r\n        </Grid>\r\n        <Grid item container spacing={4} justifyContent=\"space-between\">\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"Height\"\r\n              value={\r\n                patientProfile.height ? patientProfile.height : \"No Height\"\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"Weight\"\r\n              value={\r\n                patientProfile.weight ? patientProfile.weight : \"No Weight\"\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"Blood Group\"\r\n              value={\r\n                patientProfile.bloodGroup\r\n                  ? patientProfile.bloodGroup\r\n                  : \"No Blood Group\"\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"GenoType\"\r\n              value={\r\n                patientProfile.genotype\r\n                  ? patientProfile.genotype\r\n                  : \"No Genotype\"\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"BMI\"\r\n              value={\r\n                patientProfile.height\r\n                  ? calculateBMI(\r\n                      patientProfile.height,\r\n                      patientProfile.weight\r\n                    ).toFixed(2)\r\n                  : \"No Value\"\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"Allergies\"\r\n              value={value.length > 0 ? value : \"No Allergy\"}\r\n            />\r\n          </Grid>\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"Lab Results\"\r\n              value={value.length > 0 ? labResult : \"No Lab Result\"}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  } else return <NoData />;\r\n};\r\n\r\nexport default MedicalRecords;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Management.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Login.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Medications.js",["1512"],"import React, { useEffect, useState } from \"react\";\r\nimport {\r\n  Grid,\r\n  Avatar,\r\n  Checkbox,\r\n  TableCell,\r\n  TableRow,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { EnhancedTable, EmptyTable, NoData } from \"components/layouts\";\r\nimport { medicationsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { myMedic } from \"components/graphQL/useQuery\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\nimport { changeTableLimit, fetchMoreData } from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Medications = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [pageInfo, setPageInfo] = useState([]);\r\n  const { patientId } = useParams();\r\n\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [medications, setMedications] = useState([]);\r\n\r\n  const [fetchMedications, { loading, error, data }] = useLazyQuery(myMedic);\r\n\r\n  useEffect(() => {\r\n    fetchMedications({\r\n      variables: {\r\n        id: patientId,\r\n        orderBy: \"-createdAt\",\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchMedications, patientId]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setMedications(data.getMedications.medication);\r\n      setPageInfo(data.getMedications.pageInfo);\r\n    }\r\n  }, [data]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\r\n      <Grid item container height=\"100%\" direction=\"column\" gap={2}>\r\n        <Grid item>\r\n          <Typography variant=\"h2\">Medications</Typography>\r\n        </Grid>\r\n        {medications.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={medicationsHeadCells}\r\n              rows={medications}\r\n              paginationLabel=\"Medication per page\"\r\n              handleChangePage={fetchMoreData}\r\n              hasCheckbox={true}\r\n              changeLimit={changeTableLimit}\r\n              fetchData={fetchMedications}\r\n              dataPageInfo={pageInfo}\r\n            >\r\n              {medications\r\n                // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row._id, selectedRows);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row._id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              row.id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.grey }}\r\n                      >\r\n                        {dateMoment(row.createdAt)}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"20rem\" }}\r\n                      >\r\n                        {row.name}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"20rem\" }}\r\n                      >\r\n                        {row.dosage ? row.dosage : \"No Value\"}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"20rem\" }}\r\n                      >\r\n                        {row.interval ? row.interval : \"No Value\"}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"20rem\" }}\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ marginRight: \"1rem\" }}>\r\n                            <Avatar\r\n                              alt={`Display Photo of ${row.caregiver}`}\r\n                              src={displayPhoto}\r\n                              sx={{ width: 24, height: 24 }}\r\n                            />\r\n                          </span>\r\n                          <span style={{ fontSize: \"1.25rem\" }}>\r\n                            {row.doctor}\r\n                          </span>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={medicationsHeadCells}\r\n            paginationLabel=\"Medications per page\"\r\n          />\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Medications;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Hcps.js",["1513","1514","1515","1516","1517","1518","1519","1520"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpProfile.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpPatients.js",["1521","1522","1523","1524"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Avatar,\r\n  TableRow,\r\n  Checkbox,\r\n  TableCell,\r\n  Button,\r\n} from \"@mui/material\";\r\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { hcpPatientsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { getDoctorPatients } from \"components/graphQL/useQuery\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      color: \"rgb(0 0 0)\",\r\n      fontWeight: 400,\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      whitespace: \"nowrap\",\r\n      maxWidth: \"15rem\",\r\n      width: \"100%\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst HcpPatients = () => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [pageInfo, setPageInfo] = useState([]);\r\n\r\n  const { hcpId } = useParams();\r\n\r\n  const { setSelectedRows } = useActions();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n\r\n  const [fetchDoctorsPatients, { loading, error, data }] =\r\n    useLazyQuery(getDoctorPatients);\r\n\r\n  useEffect(() => {\r\n    fetchDoctorsPatients({\r\n      variables: { id: hcpId },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchDoctorsPatients, hcpId]);\r\n\r\n  const [profiles, setProfiles] = useState([]);\r\n  useEffect(() => {\r\n    if (data) {\r\n      setProfiles(data.getDoctorPatients.data);\r\n      setPageInfo(data.getDoctorPatients.pageInfo);\r\n    }\r\n  }, [data]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      gap={2}\r\n      flexWrap=\"nowrap\"\r\n      height=\"100%\"\r\n      sx={{ margin: \"3rem 0rem\" }}\r\n    >\r\n      <TableLayout>\r\n        {profiles.length > 0 ? (\r\n          <Grid item container direction=\"column\" height=\"100%\">\r\n            <EnhancedTable\r\n              headCells={hcpPatientsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"List Per Page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                await changeTableLimit(fetchDoctorsPatients, {\r\n                  first: e,\r\n                  id: hcpId,\r\n                });\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                await handlePageChange(fetchDoctorsPatients, page, pageInfo, {\r\n                  id: hcpId,\r\n                });\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const { _id, patientData } = row;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                    onClick={(e) => {\r\n                      e.stopPropagation();\r\n                      history.push(`/patients/${patientData?._id}/profile`);\r\n                    }}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.grey }}\r\n                    >\r\n                      {patientData && patientData?.dociId?.split(\"-\")[1]}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                          textAlign: \"left\",\r\n                        }}\r\n                      >\r\n                        <span style={{ marginRight: \"1rem\" }}>\r\n                          <Avatar\r\n                            alt=\"\"\r\n                            src={row.image}\r\n                            sx={{ width: 24, height: 24 }}\r\n                          />\r\n                        </span>\r\n                        <span style={{ fontSize: \"1.25rem\" }}>\r\n                          {patientData?.firstName\r\n                            ? `${patientData?.firstName} ${patientData?.lastName}`\r\n                            : \"No Patient Name\"}\r\n                          {row.lastName}\r\n                        </span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      {patientData?.gender && patientData?.gender}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={hcpPatientsHeadCells}\r\n            paginationLabel=\"List  per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HcpPatients;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpEarnings.js",["1525"],"import React, { useState, useEffect } from \"react\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\nimport TrendingDownIcon from \"@mui/icons-material/TrendingDown\";\r\nimport TrendingUpIcon from \"@mui/icons-material/TrendingUp\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport {\r\n  CircularProgressBar,\r\n  Card,\r\n  Loader,\r\n  FormSelect,\r\n} from \"components/Utilities\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { getMyEarnings } from \"components/graphQL/useQuery\";\r\nimport {\r\n  financialPercent,\r\n  selectOptions,\r\n  formatNumber,\r\n} from \"components/Utilities/Time\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardContainer: {\r\n    \"&.MuiCard-root\": {\r\n      width: \"100%\",\r\n      height: \"15.8rem\",\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\",\r\n      background: \"white\",\r\n      marginRight: \"5rem\",\r\n      \"&:hover\": {\r\n        boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.15)\",\r\n        cursor: \"pointer\",\r\n      },\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n      \"& .MuiCardContent-root .MuiTypography-h5\": {\r\n        textDecoration: \"none !important\",\r\n        textTransform: \"uppercase\",\r\n      },\r\n    },\r\n  },\r\n\r\n  iconWrapper: {\r\n    width: 60,\r\n    height: 60,\r\n    borderRadius: \"50%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  cardGrid: {\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    height: \"25.8rem\",\r\n  },\r\n  flexContainer: {\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    margin: \"auto\",\r\n    width: \"100%\",\r\n\r\n    // padding: \"2rem 4rem\",\r\n    \"&:first-child\": {\r\n      borderBottom: \".5px solid #F8F8F8\",\r\n    },\r\n  },\r\n  lightGreen: {\r\n    color: theme.palette.common.green,\r\n  },\r\n\r\n  lightRed: {\r\n    color: theme.palette.common.red,\r\n  },\r\n  mainContainer: {\r\n    flexDirection: \"column\",\r\n    width: \"100%\",\r\n    background: \"white\",\r\n    borderRadius: \"2rem\",\r\n    boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.15)\",\r\n  },\r\n  parentGrid: {\r\n    textDecoration: \"none\",\r\n    width: \"24.7rem\",\r\n    color: theme.palette.primary.main,\r\n    \"&.MuiGrid-item\": {\r\n      ...theme.typography.cardParentGrid,\r\n      minWidth: \"20rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n    },\r\n  },\r\n\r\n  cardIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      fontSize: \"3rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst HcpEarnings = () => {\r\n  const classes = useStyles();\r\n  const { hcpId } = useParams();\r\n\r\n  const [form, setForm] = useState(\"\");\r\n  const { data, error, loading, refetch } = useQuery(getMyEarnings, {\r\n    variables: {\r\n      doctor: hcpId,\r\n    },\r\n  });\r\n  // const { data: datas } = useQuery(getMyEarningDoc, {\r\n  //   variables: { doc: hcpId },\r\n  // });\r\n  const [totalEarning, setTotalEarning] = useState([]);\r\n  const [totalPayouts, setTotalPayouts] = useState([]);\r\n  const financialValue = financialPercent(totalEarning, totalPayouts);\r\n  const [finances, setFinances] = useState(financialValue);\r\n  const onChange = async (e) => {\r\n    setForm(e.target.value);\r\n    await refetch({ q: e.target.value });\r\n  };\r\n\r\n  const theme = useTheme();\r\n  useEffect(() => {\r\n    if (data) {\r\n      const { totalEarnings, totalPayouts } = data?.getMyEarnings;\r\n      setTotalEarning(totalEarnings);\r\n      setTotalPayouts(totalPayouts);\r\n      const value = financialPercent(totalEarnings, totalPayouts);\r\n      setFinances(value);\r\n    }\r\n  }, [form, data]);\r\n  // const classes = useStyles();\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid container gap={3}>\r\n      <Grid\r\n        item\r\n        container\r\n        rowGap={4}\r\n        padding={{ md: \"2rem 4rem\", sm: \"2rem, 4rem\", xs: \"1rem\" }}\r\n        className={classes.mainContainer}\r\n        flexDirection={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n        sx={{ alignItems: \"center\", justifyContent: \"space-between\" }}\r\n      >\r\n        <Grid item container className={classes.flexContainer}>\r\n          <Grid item>\r\n            <Typography variant=\"h1\" color=\"#2D2F39\">\r\n              Earning\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <FormSelect\r\n              placeholder=\"Select days\"\r\n              value={form}\r\n              onChange={onChange}\r\n              options={selectOptions}\r\n              name=\"finance\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          container\r\n          alignItems=\"center\"\r\n          flexDirection={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n          spacing={{ md: 2, xs: 2, sm: 2 }}\r\n        >\r\n          <Grid item>\r\n            <CircularProgressBar\r\n              height=\"17rem\"\r\n              width=\"17rem\"\r\n              color={theme.palette.common.green}\r\n              trailColor={theme.palette.common.red}\r\n              value={finances}\r\n              strokeWidth={8}\r\n            />\r\n          </Grid>\r\n          <Grid item flex={1}>\r\n            <Grid\r\n              container\r\n              alignItems=\"center\"\r\n              rowGap={4}\r\n              justifyContent={{\r\n                md: \"space-around\",\r\n                xs: \"flex-start\",\r\n                sm: \"space-around\",\r\n              }}\r\n            >\r\n              <Grid\r\n                item\r\n                spacing={2}\r\n                sx={{ justifyContent: \"center\", alignItems: \"center\" }}\r\n              >\r\n                <Grid\r\n                  container\r\n                  alignItems=\"center\"\r\n                  gap={{ md: 2, sm: 2, xs: 4 }}\r\n                >\r\n                  <Grid\r\n                    className={classes.iconWrapper}\r\n                    sx={{ background: theme.palette.common.lightGreen }}\r\n                  >\r\n                    <Grid item>\r\n                      <TrendingDownIcon\r\n                        color=\"success\"\r\n                        className={classes.cardIcon}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography noWrap variant=\"h2\">\r\n                      <span\r\n                        style={{\r\n                          textDecoration: \"line-through\",\r\n                          textDecorationStyle: \"double\",\r\n                        }}\r\n                      >\r\n                        N{\"\"}\r\n                      </span>\r\n                      {formatNumber(totalEarning)}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      style={{\r\n                        color: theme.palette.common.lightGrey,\r\n                      }}\r\n                    >\r\n                      Total Earnings\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              {/* second */}\r\n              <Grid item>\r\n                <Grid\r\n                  container\r\n                  alignItems=\"center\"\r\n                  gap={{ md: 2, sm: 2, xs: 4 }}\r\n                >\r\n                  <Grid\r\n                    className={classes.iconWrapper}\r\n                    sx={{ background: theme.palette.common.lightRed }}\r\n                  >\r\n                    <Grid item>\r\n                      <TrendingUpIcon\r\n                        color=\"error\"\r\n                        className={classes.cardIcon}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography noWrap variant=\"h2\">\r\n                      <span\r\n                        style={{\r\n                          textDecoration: \"line-through\",\r\n                          textDecorationStyle: \"double\",\r\n                        }}\r\n                      >\r\n                        N{\"\"}\r\n                      </span>\r\n                      {formatNumber(+totalPayouts)}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      style={{\r\n                        color: theme.palette.common.lightGrey,\r\n                      }}\r\n                    >\r\n                      Total Payouts\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              {/* second */}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      {/* iterms */}\r\n      <Grid item container justifyContent=\"space-evenly\">\r\n        {/* 1 */}\r\n        <Grid item container md={4} sm={4} xs={12}>\r\n          <Grid item container flexDirection=\"column\">\r\n            <Link\r\n              to={`/hcps/${hcpId}/earnings/payout`}\r\n              style={{ textDecoration: \"none\" }}\r\n            >\r\n              <Card\r\n                title=\"Total Payout\"\r\n                background={theme.palette.common.lightRed}\r\n              >\r\n                <TrendingUpIcon color=\"error\" className={classes.cardIcon} />\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n        {/* 2 */}\r\n        <Grid item container md={4} sm={4} xs={12}>\r\n          <Grid item container flexDirection=\"column\">\r\n            <Link\r\n              to={`/hcps/${hcpId}/earnings/earn`}\r\n              style={{ textDecoration: \"none\" }}\r\n            >\r\n              <Card\r\n                title=\"Total Earnings\"\r\n                background={theme.palette.common.lightGreen}\r\n              >\r\n                <Grid className={classes.iconWrapper}>\r\n                  <TrendingDownIcon\r\n                    color=\"success\"\r\n                    className={classes.cardIcon}\r\n                  />\r\n                </Grid>\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HcpEarnings;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\doctorsPageStyles.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\SearchIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\LogoutIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\asideMenus.js",["1526"],"import React from \"react\";\r\nimport HMOIcon from \"components/Icons/HMOIcon\";\r\nimport LabelIcon from \"components/Icons/LabelIcon\";\r\nimport DoctorsIcon from \"components/Icons/DoctorsIcon\";\r\nimport FinanceIcon from \"components/Icons/FinanceIcon\";\r\nimport PatientsIcon from \"components/Icons/PatientsIcon\";\r\nimport VerifiedIcon from \"components/Icons/VerifiedIcon\";\r\nimport PartnersIcon from \"components/Icons/PartnersIcon\";\r\nimport SettingsIcon from \"components/Icons/SettingsIcon\";\r\nimport RefferalsIcon from \"components/Icons/RefferalsIcon\";\r\nimport DashboardIcon from \"components/Icons/DashboardIcon\";\r\nimport SubscriptionIcon from \"components/Icons/SubscriptionIcon\";\r\n\r\nexport const menus = [\r\n  {\r\n    id: 0,\r\n    title: \"Dashboard\",\r\n    icon: <DashboardIcon />,\r\n    path: \"/dashboard\",\r\n  },\r\n  {\r\n    id: 1,\r\n    title: \"Patients\",\r\n    icon: <PatientsIcon />,\r\n    path: \"/patients\",\r\n  },\r\n  {\r\n    id: 2,\r\n    title: \"Doctors\",\r\n    icon: <DoctorsIcon />,\r\n    path: \"/hcps\",\r\n  },\r\n  {\r\n    id: 12,\r\n    title: \"Provider Services\",\r\n    icon: <LabelIcon />,\r\n    path: \"/user-type\",\r\n  },\r\n  {\r\n    id: 13,\r\n    title: \"HMO\",\r\n    icon: <HMOIcon />,\r\n    path: \"/hmo\",\r\n  },\r\n  // {\r\n  //   id: 3,\r\n  //   title: \"Partners\",\r\n  //   icon: <PartnersIcon sx={{ height: \"25px\", width: \"25px\" }} />,\r\n  //   path: \"/partners\",\r\n  // },\r\n  {\r\n    id: 7,\r\n    title: \"Doctor Verification\",\r\n    icon: <VerifiedIcon />,\r\n    path: \"/verification\",\r\n  },\r\n  {\r\n    id: 8,\r\n    title: \"Finance\",\r\n    icon: <FinanceIcon />,\r\n    path: \"/finance\",\r\n  },\r\n  {\r\n    id: 9,\r\n    title: \"Referrals\",\r\n    icon: <RefferalsIcon />,\r\n    path: \"/referrals\",\r\n  },\r\n  {\r\n    id: 10,\r\n    title: \"Subscription Plans\",\r\n    icon: <SubscriptionIcon />,\r\n    path: \"/plans\",\r\n  },\r\n  {\r\n    id: 11,\r\n    title: \"Settings\",\r\n    icon: <SettingsIcon />,\r\n    path: \"/settings\",\r\n  },\r\n];\r\nexport const firstMenu = [\r\n  // {\r\n  //   id: 13,\r\n  //   title: \"HMO\",\r\n  //   icon: <HMOIcon sx={{ height: \"25px\", width: \"25px\" }} />,\r\n  //   path: \"/hmo\",\r\n  // },\r\n  // {\r\n  //   id: 5,\r\n  //   title: \"Messages\",\r\n  //   icon: <MessagesIcon sx={{ height: \"25px\", width: \"25px\" }} />,\r\n  //   path: \"/messages\",\r\n  // },\r\n  // {\r\n  //   id: 6,\r\n  //   title: \"Emails\",\r\n  //   icon: <EmailIcon sx={{ height: \"25px\", width: \"25px\" }} />,\r\n  //   path: \"/email\",\r\n  // },\r\n];\r\n\r\n//\r\nexport const subMenu = [\r\n  {\r\n    id: 100,\r\n    title: \"Heala\",\r\n    // icon: <HMOIcon sx={{ height: \"25px\", width: \"25px\" }} />,\r\n    path: \"/heala\",\r\n  },\r\n  {\r\n    id: 1100,\r\n    title: \"Hospital\",\r\n    // icon: <HMOIcon sx={{ height: \"25px\", width: \"25px\" }} />,\r\n    path: \"/hospital\",\r\n  },\r\n  {\r\n    id: 111,\r\n    title: \"HMO\",\r\n    // icon: <HMOIcon sx={{ height: \"25px\", width: \"25px\" }} />,\r\n    path: \"/hmos\",\r\n  },\r\n  {\r\n    id: 1101,\r\n    title: \"UserTypes\",\r\n    // icon: <HMOIcon sx={{ height: \"25px\", width: \"25px\" }} />,\r\n    path: \"/user-type\",\r\n  },\r\n];\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\helpers\\breadcrumb.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\Filters\\DoctorsFilters.js",["1527","1528","1529","1530"],"import React, { useEffect, useState } from \"react\";\r\nimport ProPtypes from \"prop-types\";\r\nimport { Grid } from \"@mui/material\";\r\n\r\nimport Filter from \".\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport {\r\n  cadreOptions,\r\n  defaultPageInfo,\r\n  doctorsProfileDefaultFilterByValues,\r\n  genderType,\r\n  specializationOptions,\r\n  statusFilterBy,\r\n} from \"helpers/mockData\";\r\nimport { deleteVar, filterData } from \"helpers/filterHelperFunctions\";\r\nimport { getProviders } from \"components/graphQL/useQuery\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\n\r\nconst DoctorFilters = ({ setProfiles, setPageInfo, queryParams }) => {\r\n  const { displayAlert } = useAlert();\r\n  const [statusFilterValue, setStatusFilterValue] = useState(\"\");\r\n  const [providers, setProviders] = useState([]);\r\n  const [profileFilterValues, setProfileFilterValues] = useState(\r\n    doctorsProfileDefaultFilterByValues\r\n  ); // gender cadre specialization providerId\r\n  const [fetchProviders] = useLazyQuery(getProviders);\r\n  const { doctorsParams, doctorsByStatusParams } = queryParams;\r\n  const { fetchDoctors, loading, refetch, variables } = doctorsParams;\r\n  const {\r\n    byStatusLoading,\r\n    byStatusVaribles,\r\n    byStatusRefetch,\r\n    fetchDoctorsByStatus,\r\n  } = doctorsByStatusParams;\r\n\r\n  useEffect(() => {\r\n    fetchProviders()\r\n      .then(({ data }) => {\r\n        if (!data) throw Error(\"Couldn'ProPtypes get list of providers\");\r\n        const providersList = (data?.getProviders?.provider || []).map(\r\n          (provider) => {\r\n            const { _id, name } = provider;\r\n            return { key: name, value: _id };\r\n          }\r\n        );\r\n        setProviders(providersList);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  const onFilterProfileChange = async (name, value) => {\r\n    try {\r\n      setStatusFilterValue(\"\");\r\n      deleteVar(variables);\r\n      const filterValues = { ...profileFilterValues, [name]: value };\r\n      setProfileFilterValues(filterValues);\r\n      filterData(filterValues, {\r\n        fetchData: fetchDoctors,\r\n        refetch,\r\n        variables,\r\n      })\r\n        .then((data) => {\r\n          setPageInfo(data.doctorProfiles.pageInfo || []);\r\n          setProfiles(data.doctorProfiles.profile || defaultPageInfo);\r\n        })\r\n        .catch(() => {\r\n          refresh(setProfileFilterValues, doctorsProfileDefaultFilterByValues);\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setProfileFilterValues, doctorsProfileDefaultFilterByValues);\r\n    }\r\n  };\r\n\r\n  const onFilterStatusChange = async (value) => {\r\n    try {\r\n      setProfileFilterValues(doctorsProfileDefaultFilterByValues);\r\n      deleteVar(byStatusVaribles);\r\n      setStatusFilterValue(value);\r\n      const filterVariables = { status: value };\r\n\r\n      filterData(filterVariables, {\r\n        fetchData: fetchDoctorsByStatus,\r\n        refetch: byStatusRefetch,\r\n        variables: byStatusVaribles,\r\n      })\r\n        .then((data) => {\r\n          setProfiles(data?.doctorProfilesByStatus?.profile || []);\r\n          setPageInfo(data?.doctorProfilesByStatus?.pageInfo || {});\r\n        })\r\n        .catch(() => {\r\n          refresh(setStatusFilterValue, \"\");\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setStatusFilterValue, \"\");\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\r\n    setFilterValue(defaultVal);\r\n\r\n    deleteVar(variables);\r\n\r\n    refetch()\r\n      .then(({ data }) => {\r\n        setProfiles(data?.profiles?.data || []);\r\n        setPageInfo(data?.profiles?.pageInfo || {});\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", \"Failed to get patients data, Try again\");\r\n      });\r\n  };\r\n  return (\r\n    <Grid item container flexWrap=\"wrap\" spacing={4}>\r\n      {/* FILTER BY PROFILE */}\r\n      <Grid item>\r\n        <Grid container flexWrap=\"wrap\" spacing={2} alignItems=\"flex-end\">\r\n          {[\r\n            {\r\n              label: \"\",\r\n              onHandleChange: (e) =>\r\n                onFilterProfileChange(\"gender\", e?.target?.value),\r\n              onClickClearBtn: () => onFilterProfileChange(\"gender\", \"\"),\r\n              options: [{ key: \"Gender\", value: \"\" }, ...genderType],\r\n              name: \"gender\",\r\n              placeholder: \"By gender\",\r\n              value: profileFilterValues.gender,\r\n              hasClearBtn: true,\r\n              disavle: loading || byStatusLoading,\r\n            },\r\n            {\r\n              label: \"\",\r\n              onHandleChange: (e) =>\r\n                onFilterProfileChange(\"cadre\", e?.target?.value),\r\n              onClickClearBtn: () => onFilterProfileChange(\"cadre\", \"\"),\r\n              options: [{ key: \"Cadre\", value: \"\" }, ...cadreOptions],\r\n              name: \"cadre\",\r\n              placeholder: \"By cadre\",\r\n              value: profileFilterValues.cadre,\r\n              hasClearBtn: true,\r\n              disavle: loading || byStatusLoading,\r\n            },\r\n            {\r\n              label: \"\",\r\n              onHandleChange: (e) =>\r\n                onFilterProfileChange(\"specialization\", e?.target?.value),\r\n              onClickClearBtn: () =>\r\n                onFilterProfileChange(\"specialization\", \"\"),\r\n              options: [\r\n                { key: \"Specialization\", value: \"\" },\r\n                ...specializationOptions,\r\n              ],\r\n              name: \"specialization\",\r\n              placeholder: \"By specialization\",\r\n              value: profileFilterValues.specialization,\r\n              hasClearBtn: true,\r\n              disavle: loading || byStatusLoading,\r\n            },\r\n            {\r\n              label: \"\",\r\n              onHandleChange: (e) =>\r\n                onFilterProfileChange(\"providerId\", e?.target?.value),\r\n              onClickClearBtn: () => onFilterProfileChange(\"providerId\", \"\"),\r\n              options: [{ key: \"Provider\", value: \"\" }, ...providers],\r\n              name: \"providerId\",\r\n              placeholder: \"By provider\",\r\n              value: profileFilterValues.providerId,\r\n              hasClearBtn: true,\r\n              disavle: loading || byStatusLoading,\r\n            },\r\n          ].map((filter, idx) => {\r\n            return (\r\n              <Grid item key={`${idx}-${filter.name}`}>\r\n                <Filter\r\n                  label={filter.label}\r\n                  onHandleChange={(e) => filter.onHandleChange(e)}\r\n                  onClickClearBtn={() => filter.onClickClearBtn()}\r\n                  options={filter.options}\r\n                  name={filter.name}\r\n                  placeholder={filter.placeholder}\r\n                  value={filter.value}\r\n                  hasClearBtn={true}\r\n                  disable={loading || byStatusLoading}\r\n                />\r\n              </Grid>\r\n            );\r\n          })}\r\n\r\n          {/* FILTER BY STATUS */}\r\n          <Grid item>\r\n            <Filter\r\n              label=\"\"\r\n              onHandleChange={(e) => onFilterStatusChange(e?.target?.value)}\r\n              onClickClearBtn={() => onFilterStatusChange(\"\")}\r\n              options={[{ key: \"Status\", value: \"\" }, ...statusFilterBy]}\r\n              name=\"status\"\r\n              placeholder=\"None\"\r\n              value={statusFilterValue}\r\n              hasClearBtn={true}\r\n              disable={loading || byStatusLoading}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nDoctorFilters.propTypes = {\r\n  setProfiles: ProPtypes.func,\r\n  setPageInfo: ProPtypes.func,\r\n  queryParams: ProPtypes.object,\r\n};\r\n\r\nexport default DoctorFilters;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\partnersPageStyles.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Copy.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\AddProviderModal.js",["1531","1532","1533","1534","1535"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\Filters\\PatientFilters.js",["1536","1537","1538","1539","1540"],"import React, { useEffect, useState } from \"react\";\r\nimport t from \"prop-types\";\r\nimport { Grid } from \"@mui/material\";\r\n\r\nimport Filter from \".\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getPlans, getProviders } from \"components/graphQL/useQuery\";\r\nimport { deleteVar, filterData } from \"helpers/filterHelperFunctions\";\r\nimport {\r\n  genderType,\r\n  patientsProfileDefaultFilterByValues,\r\n  /* statusFilterBy, */\r\n} from \"helpers/mockData\";\r\n\r\nconst PatientFilters = ({ setProfiles, setPageInfo, queryParams }) => {\r\n  const { displayAlert } = useAlert();\r\n  const [plans, setPlans] = useState([]);\r\n  const [fetchPlans] = useLazyQuery(getPlans);\r\n  const [providers, setProviders] = useState([]);\r\n  const [fetchProviders] = useLazyQuery(getProviders);\r\n  const [providerId, setProviderId] = useState(null);\r\n  const [filterPlanValue, setFilterPlanValue] = useState(\"\");\r\n  const [, setStatusFilterValue] = useState(\"\");\r\n  const { patientsParams, patientsByStatusParams, patientsByPlanParams } =\r\n    queryParams;\r\n  const { fetchPatient, loading, refetch, variables } = patientsParams;\r\n  const [profileFilterValues, setProfileFilterValues] = useState(\r\n    patientsProfileDefaultFilterByValues\r\n  );\r\n  const {\r\n    byStatusLoading,\r\n    /* byStatusVaribles,\r\n    byStatusRefetch,\r\n    fetchPatientByStatus, */\r\n  } = patientsByStatusParams;\r\n  const { byPlanLoading, byPlanVaribles, byPlanRefetch, fetchPatientByPlan } =\r\n    patientsByPlanParams;\r\n\r\n  useEffect(() => {\r\n    fetchProviders()\r\n      .then(({ data }) => {\r\n        if (!data) throw Error(\"Couldn't get list of providers\");\r\n        const providersList = (data?.getProviders?.provider).map((provider) => {\r\n          const { _id, name } = provider;\r\n          return { key: name, value: _id };\r\n        });\r\n        setProviders(providersList);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (providerId === \"\" || providerId === null) return;\r\n    fetchPlans({ variables: { provider: providerId } })\r\n      .then(({ data }) => {\r\n        if (!data) throw Error(\"Couldn't get list of plans\");\r\n        const planList = (data?.getPlans?.plan || []).map((plan) => {\r\n          const { _id, name } = plan;\r\n          return { key: name, value: _id };\r\n        });\r\n        setPlans(planList);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [providerId]);\r\n\r\n  const onFilterProfileChange = async (name, value) => {\r\n    try {\r\n      if (name === \"provider\") setProviderId(value);\r\n      setStatusFilterValue(\"\");\r\n      deleteVar(variables);\r\n      const filterValues = { ...profileFilterValues, [name]: value };\r\n      setProfileFilterValues(filterValues);\r\n      filterData(filterValues, {\r\n        fetchData: fetchPatient,\r\n        refetch,\r\n        variables,\r\n      })\r\n        .then((data) => {\r\n          setProfiles(data?.profiles?.data || []);\r\n          setPageInfo(data?.profiles?.pageInfo || {});\r\n        })\r\n        .catch(() => {\r\n          refresh(setProfileFilterValues, patientsProfileDefaultFilterByValues);\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setProfileFilterValues, patientsProfileDefaultFilterByValues);\r\n    }\r\n  };\r\n\r\n  /*   const onFilterStatusChange = async (value) => {\r\n    try {\r\n      setProfileFilterValues({ gender: \"\", provider: \"\" });\r\n      deleteVar(byStatusVaribles);\r\n      setStatusFilterValue(value);\r\n      const filterVariables = { status: value };\r\n\r\n      filterData(filterVariables, {\r\n        fetchData: fetchPatientByStatus,\r\n        refetch: byStatusRefetch,\r\n        variables: byStatusVaribles,\r\n      })\r\n        .then((data) => {\r\n          setProfiles(data?.profilesByStatus?.data || []);\r\n          setPageInfo(data?.profilesByStatus?.pageInfo || {});\r\n        })\r\n        .catch(() => {\r\n          refresh(setStatusFilterValue, \"\");\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setStatusFilterValue, \"\");\r\n    }\r\n  }; */\r\n\r\n  const onFilterPlanChange = async (value) => {\r\n    try {\r\n      if (value === \"\") {\r\n        setProfileFilterValues({\r\n          ...patientsProfileDefaultFilterByValues,\r\n        });\r\n      } else {\r\n        setProfileFilterValues({\r\n          ...patientsProfileDefaultFilterByValues,\r\n          provider: profileFilterValues.provider,\r\n        });\r\n      }\r\n      deleteVar(byPlanVaribles);\r\n      setFilterPlanValue(value);\r\n      const filterVariables = { planId: value };\r\n\r\n      filterData(filterVariables, {\r\n        fetchData: fetchPatientByPlan,\r\n        refetch: byPlanRefetch,\r\n        variables: byPlanVaribles,\r\n      })\r\n        .then((data) => {\r\n          setProfiles(data?.profilesByPlan?.data || []);\r\n          setPageInfo(data?.profilesByPlan?.pageInfo || {});\r\n        })\r\n        .catch(() => {\r\n          refresh(setStatusFilterValue, \"\");\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setStatusFilterValue, \"\");\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\r\n    setFilterValue(defaultVal);\r\n\r\n    deleteVar(variables);\r\n\r\n    refetch()\r\n      .then(({ data }) => {\r\n        setProfiles(data?.profiles?.data || []);\r\n        setPageInfo(data?.profiles?.pageInfo || {});\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", \"Failed to get patients data, Try again\");\r\n      });\r\n  };\r\n  return (\r\n    <Grid item container flexWrap=\"wrap\" spacing={2} alignItems=\"flex-end\">\r\n      {/* FILTER BY GENDER */}\r\n      <Grid item>\r\n        <Filter\r\n          onHandleChange={(e) =>\r\n            onFilterProfileChange(\"gender\", e?.target?.value)\r\n          }\r\n          onClickClearBtn={() => onFilterProfileChange(\"gender\", \"\")}\r\n          options={[{ key: \"Gender\", value: \"\" }, ...genderType]}\r\n          name=\"gender\"\r\n          value={profileFilterValues.gender}\r\n          hasClearBtn={true}\r\n          disable={loading || byStatusLoading || byPlanLoading}\r\n          variant=\"small\"\r\n        />\r\n      </Grid>\r\n\r\n      {/* FILTER BY PROVIDER AND PLAN */}\r\n      <Grid item>\r\n        <Filter\r\n          onHandleChange={(e) =>\r\n            onFilterProfileChange(\"provider\", e?.target?.value)\r\n          }\r\n          onClickClearBtn={() => onFilterProfileChange(\"provider\", \"\")}\r\n          options={[{ key: \"Provider\", value: \"\" }, ...providers]}\r\n          name=\"provider\"\r\n          value={profileFilterValues.provider}\r\n          hasClearBtn={true}\r\n          disable={loading || byStatusLoading || byPlanLoading}\r\n        />\r\n      </Grid>\r\n      {profileFilterValues.provider === \"\" ? null : (\r\n        <Grid item>\r\n          <Filter\r\n            label=\"\"\r\n            onHandleChange={(e) => onFilterPlanChange(e?.target?.value)}\r\n            onClickClearBtn={() => onFilterPlanChange(\"\")}\r\n            options={plans}\r\n            name=\"plan\"\r\n            placeholder=\"Provider Plan\"\r\n            value={filterPlanValue}\r\n            hasClearBtn={true}\r\n            disable={loading || byStatusLoading || byPlanLoading}\r\n          />\r\n        </Grid>\r\n      )}\r\n\r\n      {/* FILTER BY STATUS */}\r\n      {/* <Grid item>\r\n        <Filter\r\n          label=\"By Status\"\r\n          onHandleChange={(e) => onFilterStatusChange(e?.target?.value)}\r\n          onClickClearBtn={() => onFilterStatusChange(\"\")}\r\n          options={statusFilterBy}\r\n          name=\"status\"\r\n          placeholder=\"None\"\r\n          value={statusFilterValue}\r\n          hasClearBtn={true}\r\n          disable={loading || byStatusLoading || byPlanLoading}\r\n        />\r\n      </Grid> */}\r\n      {/* ==== CLEAR FILTERS BUTTON ===== */}\r\n      {/* <Grid item>\r\n            <ClearFiltersBtn\r\n              title=\"Clear filters\"\r\n              onHandleClick={() => {\r\n                resetFilters(\r\n                  setFilterValues,\r\n                  patientsPageDefaultFilterValues,\r\n                  variables,\r\n                  fetchPatient\r\n                );\r\n              }}\r\n            />\r\n          </Grid> */}\r\n    </Grid>\r\n  );\r\n};\r\nPatientFilters.propTypes = {\r\n  setProfiles: t.func.isRequired,\r\n  setPageInfo: t.func.isRequired,\r\n  queryParams: t.object.isRequired,\r\n};\r\n\r\nexport default PatientFilters;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\Success.js",["1541","1542","1543"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Typography, Grid } from \"@mui/material\";\r\nimport { Modals, CustomButton } from \"components/Utilities\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport CheckCircleSharpIcon from \"@mui/icons-material/CheckCircleSharp\";\r\nimport CancelIcon from \"@mui/icons-material/Cancel\";\r\n\r\nconst Success = ({\r\n  open,\r\n  handleDialogClose,\r\n  title,\r\n  confirmationMsg,\r\n  btnValue,\r\n  onConfirm,\r\n  onCancel,\r\n  type,\r\n  ...rest\r\n}) => {\r\n  const theme = useTheme();\r\n\r\n  const disableButton = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  return (\r\n    <Modals\r\n      isOpen={open}\r\n      title=\"\"\r\n      isClose\r\n      rowSpacing={5}\r\n      handleClose={handleDialogClose}\r\n    >\r\n      <Grid item container direction=\"column\" rowSpacing={5} marginTop={2}>\r\n        <Grid item container justifyContent=\"center\">\r\n          {type !== \"fail\" ? (\r\n            <CheckCircleSharpIcon sx={{ fontSize: \"15rem\", color: \"green\" }} />\r\n          ) : (\r\n            <CancelIcon sx={{ fontSize: \"15rem\", color: \"red\" }} />\r\n          )}\r\n        </Grid>\r\n        <Grid item container justifyContent=\"center\">\r\n          <Typography variant=\"h2\">{title}</Typography>\r\n        </Grid>\r\n        <Grid item container justifyContent=\"center\">\r\n          <Typography variant=\"body1\">{confirmationMsg}</Typography>\r\n        </Grid>\r\n        <Grid item container marginTop={4}>\r\n          <CustomButton\r\n            title={btnValue}\r\n            type={disableButton}\r\n            width=\"100%\"\r\n            onClick={handleDialogClose}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Modals>\r\n  );\r\n};\r\n\r\nSuccess.propTypes = {\r\n  open: PropTypes.bool,\r\n  handleDialogClose: PropTypes.func,\r\n  title: PropTypes.string,\r\n  confirmationMsg: PropTypes.string,\r\n  btnValue: PropTypes.string,\r\n  type: PropTypes.string,\r\n  onConfirm: PropTypes.func,\r\n  onCancel: PropTypes.func,\r\n};\r\n\r\nexport default Success;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\PatientsRow.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\validation\\LoginInput.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\bMI.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpConsultations.js",["1544","1545","1546","1547","1548","1549"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getDocConsult } from \"components/graphQL/useQuery\";\r\nimport {\r\n  Avatar,\r\n  Typography,\r\n  TableRow,\r\n  Button,\r\n  TableCell,\r\n  Checkbox,\r\n  Grid,\r\n} from \"@mui/material\";\r\nimport { consultationsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NoData, EnhancedTable, EmptyTable } from \"components/layouts\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      color: \"rgb(0 0 0)\",\r\n      fontWeight: 400,\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"12rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst HcpConsultations = (props) => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [pageInfo, setPageInfo] = useState([]);\r\n  const { hcpId } = useParams();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [consultations, setConsultations] = useState([]);\r\n\r\n  const [fetchDocConsultations, { loading, data, error }] =\r\n    useLazyQuery(getDocConsult);\r\n\r\n  useEffect(() => {\r\n    fetchDocConsultations({\r\n      variables: {\r\n        id: hcpId,\r\n        orderBy: \"-createdAt\",\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchDocConsultations, hcpId]);\r\n\r\n  useEffect(() => {\r\n    if (data && data.getConsultations.data) {\r\n      setConsultations(data.getConsultations.data);\r\n      setPageInfo(data.getConsultations.pageInfo);\r\n    }\r\n  }, [data, hcpId]);\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <Grid container direction=\"column\" height=\"100%\" gap={2}>\r\n      <Grid\r\n        item\r\n        container\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n      ></Grid>\r\n      <TableLayout>\r\n        {consultations.length > 0 ? (\r\n          <Grid item>\r\n            <EnhancedTable\r\n              headCells={consultationsHeadCells}\r\n              rows={consultations}\r\n              paginationLabel=\"Consultations per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                await changeTableLimit(fetchDocConsultations, {\r\n                  first: e,\r\n                  id: hcpId,\r\n                });\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                await handlePageChange(fetchDocConsultations, page, pageInfo, {\r\n                  id: hcpId,\r\n                });\r\n              }}\r\n            >\r\n              {consultations.map((row, index) => {\r\n                // eslint-disable-next-line\r\n                const {\r\n                  _id,\r\n                  createdAt,\r\n                  symptoms,\r\n                  status,\r\n                  type,\r\n                  contactMedium,\r\n                  patientData,\r\n\r\n                  // eslint-disable-next-line\r\n                } = row;\r\n                const isItemSelected = isSelected(row._id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: \"pointer\" }}\r\n                    onClick={(e) => {\r\n                      e.stopPropagation();\r\n                      history.push(\r\n                        `/hcps/${hcpId}/consultations/case-notes/${_id}`\r\n                      );\r\n                    }}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      {dateMoment(createdAt)}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ maxWidth: \"20rem\" }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"left\",\r\n                        }}\r\n                      >\r\n                        <span style={{ marginRight: \"1rem\" }}>\r\n                          <Avatar\r\n                            alt={`Display Photo of ${patientData.firstName}`}\r\n                            src={\r\n                              patientData.picture\r\n                                ? patientData.picture\r\n                                : displayPhoto\r\n                            }\r\n                            sx={{ width: 24, height: 24 }}\r\n                          />\r\n                        </span>\r\n                        <span\r\n                          style={{ fontSize: \"1.25rem\" }}\r\n                        >{`${patientData.firstName} ${patientData.lastName}`}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      <Grid container gap={1}>\r\n                        {symptoms\r\n                          ? symptoms.map((i) => {\r\n                              return <p key={i.name}>{i.name}</p>;\r\n                            })\r\n                          : \"No Value\"}\r\n                      </Grid>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {contactMedium}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {type ? type : \"No Value\"}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {status ? status : \"No Value\"}\r\n                    </TableCell>\r\n                    {/* <TableCell align=\"left\">\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        className={classes.button}\r\n                        component={Link}\r\n                        to={`/hcps/${hcpId}/consultations/case-notes/${_id}`}\r\n                        endIcon={<ArrowForwardIosIcon />}\r\n                      >\r\n                        View Details\r\n                      </Button>\r\n                    </TableCell> */}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={consultationsHeadCells}\r\n            paginationLabel=\"Consultation  per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HcpConsultations;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Payout.js",["1550","1551","1552","1553","1554","1555"],"import React, { useEffect, useState } from \"react\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport { Grid, Chip, Checkbox, TableRow, TableCell } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Filter from \"components/Forms/Filters\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { getPayoutData } from \"components/graphQL/useQuery\";\r\nimport { payoutHeader } from \"components/Utilities/tableHeaders\";\r\nimport { defaultPageInfo, payoutFilterBy } from \"helpers/mockData\";\r\nimport { timeMoment, dateMoment } from \"components/Utilities/Time\";\r\nimport {\r\n  changeTableLimit,\r\n  deleteVar,\r\n  fetchMoreData,\r\n  filterData,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  iconWrapper: {\r\n    width: 20,\r\n    height: 20,\r\n    borderRadius: \"50%\",\r\n    display: \"grid\",\r\n    placeContent: \"center\",\r\n    marginLeft: \"1rem\",\r\n    background: theme.palette.common.lightGreen,\r\n  },\r\n  button: {\r\n    \"&.css-1zf5oc-MuiButtonBase-root-MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"10rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      color: \"rgb(0 0 0)\",\r\n      fontWeight: 400,\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.3rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Payout = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { displayAlert } = useAlert();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [payout, setPayout] = useState([]);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n\r\n  const [statusFilterValue, setStatusFilterValue] = useState(\"\");\r\n  const [fetchPayout, { loading, error, refetch, variables }] =\r\n    useLazyQuery(getPayoutData);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      fetchPayout({ variables: { first: pageInfo?.limit } }).then(\r\n        ({ data }) => {\r\n          if (!data) throw Error(\"Couldn't fetch doctors payout data\");\r\n          setPageInfo(data?.getEarningStats?.payoutData?.PageInfo);\r\n          setPayout(data?.getEarningStats?.payoutData?.data);\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }, [fetchPayout, pageInfo?.limit]);\r\n\r\n  const onFilterStatusChange = async (value) => {\r\n    try {\r\n      deleteVar(variables);\r\n      setStatusFilterValue(value);\r\n      const filterVariables = { status: value };\r\n\r\n      filterData(filterVariables, {\r\n        fetchData: fetchPayout,\r\n        refetch: refetch,\r\n        variables: variables,\r\n      })\r\n        .then((data) => {\r\n          setPayout(data?.getEarningStats?.payoutData?.data || []);\r\n          setPageInfo(data?.getEarningStats?.payoutData?.PageInfo || {});\r\n        })\r\n        .catch(() => {\r\n          refresh(setStatusFilterValue, \"\");\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setStatusFilterValue, \"\");\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\r\n    setFilterValue(defaultVal);\r\n\r\n    deleteVar(variables);\r\n\r\n    refetch()\r\n      .then(({ data }) => {\r\n        setPayout(data?.getEarningStats?.payoutData?.data || []);\r\n        setPageInfo(data?.getEarningStats?.payoutData?.PageInfo || {});\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", \"Failed to get patients data, Try again\");\r\n      });\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(\r\n          data?.getEarningStats?.payoutData?.PageInfo || defaultPageInfo\r\n        );\r\n        setPayout(data?.getEarningStats?.payoutData?.data || []);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid container direction=\"column\" rowSpacing={2}>\r\n      <>\r\n        <Grid\r\n          item\r\n          container\r\n          justifyContent=\"space-between\"\r\n          style={{ paddingBottom: \"3rem\" }}\r\n        ></Grid>\r\n        <TableLayout\r\n          filters={\r\n            <Filter\r\n              onHandleChange={(e) => onFilterStatusChange(e?.target?.value)}\r\n              onClickClearBtn={() => onFilterStatusChange(\"\")}\r\n              options={[{ key: \"Status\", value: \"\" }, ...payoutFilterBy]}\r\n              name=\"status\"\r\n              placeholder=\"None\"\r\n              value={statusFilterValue}\r\n              hasClearBtn={true}\r\n            />\r\n          }\r\n        >\r\n          {loading ? (\r\n            <Loader />\r\n          ) : payout.length > 0 ? (\r\n            <Grid item container>\r\n              <EnhancedTable\r\n                headCells={payoutHeader}\r\n                rows={payout}\r\n                paginationLabel=\"payout per page\"\r\n                hasCheckbox={true}\r\n                changeLimit={async (e) => {\r\n                  const res = await changeTableLimit(fetchPayout, { first: e });\r\n                  await setTableData(res, \"Failed to change table limit.\");\r\n                }}\r\n                dataPageInfo={pageInfo}\r\n                handlePagination={async (page) => {\r\n                  const res = await handlePageChange(\r\n                    fetchPayout,\r\n                    page,\r\n                    pageInfo,\r\n                    {}\r\n                  );\r\n                  await setTableData(res, \"Failed to change table page.\");\r\n                }}\r\n                fetchData={fetchPayout}\r\n                handleChangePage={fetchMoreData}\r\n              >\r\n                {payout.map((row, index) => {\r\n                  const { amount, createdAt, status, _id, doctorData } = row;\r\n                  const data = doctorData || [];\r\n                  const { firstName, lastName, picture } = data[0] || {};\r\n                  const isItemSelected = isSelected(_id, selectedRows);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={_id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                      >\r\n                        {dateMoment(createdAt)}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                      >\r\n                        {timeMoment(createdAt)}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        {row?.doctorData && row?.doctorData[0] !== {} ? (\r\n                          <div\r\n                            style={{\r\n                              height: \"100%\",\r\n                              display: \"flex\",\r\n                              alignItems: \"left\",\r\n                            }}\r\n                          >\r\n                            <span style={{ fontSize: \"1.25rem\" }}>{`${\r\n                              firstName && firstName\r\n                            } ${lastName && lastName}`}</span>\r\n                          </div>\r\n                        ) : (\r\n                          \"No Name\"\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.red }}\r\n                      >\r\n                        {amount}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <Chip\r\n                          label={status}\r\n                          className={classes.badge}\r\n                          style={{\r\n                            background:\r\n                              status === \"Success\"\r\n                                ? theme.palette.common.lightGreen\r\n                                : status === \"Failed\"\r\n                                ? theme.palette.common.lightGreen\r\n                                : theme.palette.common.lightRed,\r\n                            color:\r\n                              status === \"Success\"\r\n                                ? theme.palette.common.green\r\n                                : status === \"Failed\"\r\n                                ? theme.palette.common.danger\r\n                                : theme.palette.common.red,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={payoutHeader}\r\n              paginationLabel=\"Payout  per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Payout;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HCPChat.js",["1556","1557"],"import React, { useEffect, useState } from \"react\";\r\nimport { Grid, Typography, Divider } from \"@mui/material\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { CustomButton, Loader, PreviousButton } from \"components/Utilities\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { CREATE_MESSAGE } from \"components/graphQL/Mutation\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { getMessage, doctor } from \"components/graphQL/useQuery\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridWrapper: {\r\n    \"&.MuiGrid-item\": {\r\n      borderRadius: \"1rem\",\r\n      background: \"#fff\",\r\n      padding: \"2rem 4rem\",\r\n      maxWidth: \"60rem !important\",\r\n      boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.1)\",\r\n    },\r\n  },\r\n  inputGrid: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n  },\r\n  heading: {\r\n    \"&.MuiTypography-root\": {\r\n      color: theme.palette.common.grey,\r\n      //   fontSize: \"1rem\"\r\n    },\r\n  },\r\n  formInput: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    fontSize: \"1.5rem\",\r\n    padding: \".5rem 1rem\",\r\n    border: \"none\",\r\n    background: \"transparent\",\r\n    color: theme.palette.common.grey,\r\n\r\n    \"&:focus\": {\r\n      outline: \"none\",\r\n    },\r\n  },\r\n  textArea: {\r\n    border: \"1px solid rgba(0, 0, 0, 0.03)\",\r\n    resize: \"none\",\r\n    borderRadius: \"0.5rem\",\r\n  },\r\n  divider: {\r\n    \"&.MuiDivider-root\": {\r\n      borderColor: \"rgba(0, 0, 0, 0.03)\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst HCPChat = () => {\r\n  const { hcpId } = useParams();\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  let history = useHistory();\r\n  const [createNewMessage] = useMutation(CREATE_MESSAGE, {\r\n    refetchQueries: [{ query: getMessage }],\r\n  });\r\n  const { data, loading } = useQuery(doctor, { variables: { id: hcpId } });\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n  const [profile, setprofile] = useState(\"\");\r\n  const { firstName, lastName } = profile;\r\n\r\n  const initialValues = {\r\n    subject: \"\",\r\n    recipient: `${firstName} ${lastName} ` || \"\",\r\n    textarea: \"\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setprofile(data.doctorProfile);\r\n    }\r\n  }, [data]);\r\n\r\n  const validationSchema = Yup.object({\r\n    subject: Yup.string(\"Enter your subject\").required(\"Subject is required\"),\r\n    textarea: Yup.string(\"Enter your message\").required(\"Message is required\"),\r\n    recipient: Yup.string(\"Enter your recipient\").required(\r\n      \"recipients is required\"\r\n    ),\r\n  });\r\n  const onSubmit = async (values, onSubmitProps) => {\r\n    const id = localStorage.getItem(\"user_id\");\r\n    const { subject, textarea } = values;\r\n\r\n    try {\r\n      await createNewMessage({\r\n        variables: {\r\n          sender: id,\r\n          recipient: hcpId,\r\n          subject,\r\n          body: textarea,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    onSubmitProps.resetForm();\r\n    history.goBack();\r\n  };\r\n\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validateOnBlur={false}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n      enableReinitialize\r\n    >\r\n      {({ isValid, isSubmitting, dirty }) => {\r\n        return (\r\n          <Form>\r\n            <Grid container direction=\"column\">\r\n              <Grid item style={{ marginBottom: \"3rem\" }}>\r\n                <PreviousButton\r\n                  path={`/hcps/${hcpId}/profile`}\r\n                  /* onClick={() => setSelectedScopedMenu(0)} */\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" alignItems=\"center\">\r\n                <Grid item>\r\n                  <Typography variant=\"h4\" style={{ marginBottom: \"3rem\" }}>\r\n                    Create New Message\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  container\r\n                  direction=\"column\"\r\n                  className={classes.gridWrapper}\r\n                >\r\n                  <Grid item>\r\n                    <Grid\r\n                      item\r\n                      container\r\n                      alignItems=\"center\"\r\n                      sx={{ gap: \"0!important\" }}\r\n                    >\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Recipient:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item className={classes.inputGrid}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          id=\"message\"\r\n                          name=\"recipient\"\r\n                          disabled\r\n                          variant=\"standard\"\r\n                          className={classes.formInput}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Subject:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item className={classes.inputGrid}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          id=\"subject\"\r\n                          name=\"subject\"\r\n                          variant=\"standard\"\r\n                          className={classes.formInput}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container direction=\"column\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Message:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item style={{ height: \"15rem\" }}>\r\n                        <FormikControl\r\n                          control=\"textarea\"\r\n                          id=\"textarea\"\r\n                          name=\"textarea\"\r\n                          variant=\"standard\"\r\n                          fLabel={true}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    {/* <Divider className={classes.divider} /> */}\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    style={{ alignSelf: \"flex-end\", marginTop: \"2rem\" }}\r\n                  >\r\n                    <CustomButton\r\n                      title=\"Send Message\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                      // endIcon={<ArrowForwardIosIcon style={{ fontSize: \"1.5rem\" }} />}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default HCPChat;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HCP.js",["1558","1559","1560","1561"],"import React, { useState, useEffect } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Grid, Chip, TableRow, TableCell, Checkbox } from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport Filter from \"components/Forms/Filters\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { getVerification } from \"components/graphQL/useQuery\";\r\nimport { HCPHeader } from \"components/Utilities/tableHeaders\";\r\nimport { useStyles } from \"../../styles/docVerificationPageStyles\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport {\r\n  docVerifyStatusFilterBy,\r\n  QualificationOptions,\r\n} from \"helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  deleteVar,\r\n  filterData,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst HCP = () => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { displayAlert } = useAlert();\r\n  const [pageInfo, setPageInfo] = useState({\r\n    page: 0,\r\n    totalPages: 1,\r\n    hasNextPage: false,\r\n    hasPrevPage: false,\r\n    limit: 10,\r\n    totalDocs: 0,\r\n  });\r\n\r\n  const [statusFilterValue, setStatusFilterValue] = useState(\"\");\r\n  const [s, setS] = useState(\"\");\r\n  const [fetchVerifications, { loading, data, error, variables, refetch }] =\r\n    useLazyQuery(getVerification);\r\n\r\n  useEffect(() => {\r\n    fetchVerifications({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchVerifications, pageInfo]);\r\n\r\n  /* const [response, setResponse] = useState(\"\"); */\r\n\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  /*   const [searchMail, setSearchMail] = useState(\"\"); */\r\n\r\n  const [respondData, setRespondData] = useState([]); //setRespondData\r\n\r\n  useEffect(() => {\r\n    try {\r\n      if (data) {\r\n        setRespondData(data.getVerifications.verification);\r\n        setPageInfo(data.getVerifications.pageInfo);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }, [data]);\r\n\r\n  const onFilterStatusChange = async (value) => {\r\n    try {\r\n      deleteVar(variables);\r\n      setStatusFilterValue(value);\r\n      const filterVariables = { status: value };\r\n\r\n      filterData(filterVariables, {\r\n        fetchData: fetchVerifications,\r\n        refetch: refetch,\r\n        variables: variables,\r\n      })\r\n        .then((data) => {\r\n          setRespondData(data.getVerifications.verification || []);\r\n          setPageInfo(data.getVerifications.pageInfo || {});\r\n        })\r\n        .catch(() => {\r\n          refresh(setStatusFilterValue, \"\");\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setStatusFilterValue, \"\");\r\n    }\r\n  };\r\n  const onFilterStatusChanges = async (value) => {\r\n    try {\r\n      deleteVar(variables);\r\n      setS(value);\r\n      const filterVariables = { qualification: value };\r\n\r\n      filterData(filterVariables, {\r\n        fetchData: fetchVerifications,\r\n        refetch: refetch,\r\n        variables: variables,\r\n      })\r\n        .then((data) => {\r\n          setRespondData(data.getVerifications.verification || []);\r\n          setPageInfo(data.getVerifications.pageInfo || {});\r\n        })\r\n        .catch(() => {\r\n          refresh(setS, \"\");\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setS, \"\");\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", \"Something went wrong while filtering. Try again.\");\r\n    setFilterValue(defaultVal);\r\n\r\n    deleteVar(variables);\r\n\r\n    refetch()\r\n      .then(({ data }) => {\r\n        setRespondData(data.getVerifications.verification || []);\r\n        setPageInfo(data.getVerifications.pageInfo || {});\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", \"Failed to get patients data, Try again\");\r\n      });\r\n  };\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        height=\"100%\"\r\n      >\r\n        <Grid item container>\r\n          <Grid\r\n            item\r\n            direction={{ sm: \"row\", xs: \"column\" }}\r\n            gap={{ md: 4, sm: 4, xs: 2 }}\r\n            container\r\n          ></Grid>\r\n        </Grid>\r\n        <TableLayout\r\n          filters={\r\n            <Grid container item gap={4} justifyContent=\"space-between\">\r\n              <Filter\r\n                onHandleChange={(e) => onFilterStatusChange(e?.target?.value)}\r\n                onClickClearBtn={() => onFilterStatusChange(\"\")}\r\n                options={[\r\n                  { key: \"Status\", value: \"\" },\r\n                  ...docVerifyStatusFilterBy,\r\n                ]}\r\n                name=\"status\"\r\n                // placeholder=\"By status\"\r\n                value={statusFilterValue}\r\n                hasClearBtn={true}\r\n              />\r\n              <Filter\r\n                onHandleChange={(e) => onFilterStatusChanges(e?.target?.value)}\r\n                onClickClearBtn={() => onFilterStatusChanges(\"\")}\r\n                options={[\r\n                  { key: \"Qualification\", value: \"\" },\r\n                  ...QualificationOptions,\r\n                ]}\r\n                name=\"qualification\"\r\n                // placeholder=\"Specialization\"\r\n                value={s}\r\n                hasClearBtn={true}\r\n              />\r\n            </Grid>\r\n          }\r\n        >\r\n          {respondData.length > 0 ? (\r\n            <Grid container item height=\"100%\" direction=\"column\">\r\n              <EnhancedTable\r\n                headCells={HCPHeader}\r\n                rows={respondData}\r\n                paginationLabel=\"verification per page\"\r\n                hasCheckbox={true}\r\n                changeLimit={async (e) => {\r\n                  changeTableLimit(fetchVerifications, { first: e });\r\n                }}\r\n                dataPageInfo={pageInfo}\r\n                handlePagination={async (page) => {\r\n                  handlePageChange(fetchVerifications, page, pageInfo, {});\r\n                }}\r\n              >\r\n                {respondData\r\n                  // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                  .map((row, index) => {\r\n                    const {\r\n                      createdAt,\r\n                      status,\r\n                      qualification,\r\n                      doctorData,\r\n                      _id,\r\n                    } = row;\r\n                    const isItemSelected = isSelected(_id, selectedRows);\r\n\r\n                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                    return (\r\n                      <TableRow\r\n                        hover\r\n                        role=\"checkbox\"\r\n                        aria-checked={isItemSelected}\r\n                        tabIndex={-1}\r\n                        key={_id}\r\n                        selected={isItemSelected}\r\n                        sx={{ cursor: \"pointer\" }}\r\n                        onClick={(e) => {\r\n                          e.stopPropagation();\r\n                          history.push(`/verification/view/${_id}`);\r\n                        }}\r\n                      >\r\n                        <TableCell padding=\"checkbox\">\r\n                          <Checkbox\r\n                            onClick={() =>\r\n                              handleSelectedRows(\r\n                                _id,\r\n                                selectedRows,\r\n                                setSelectedRows\r\n                              )\r\n                            }\r\n                            color=\"primary\"\r\n                            checked={isItemSelected}\r\n                            inputProps={{\r\n                              \"aria-labelledby\": labelId,\r\n                            }}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell\r\n                          id={labelId}\r\n                          scope=\"row\"\r\n                          align=\"left\"\r\n                          className={classes.tableCell}\r\n                        >\r\n                          {dateMoment(createdAt)}\r\n                        </TableCell>\r\n\r\n                        <TableCell align=\"left\" className={classes.tableCell}>\r\n                          <div\r\n                            style={{\r\n                              height: \"100%\",\r\n                              display: \"flex\",\r\n                              alignItems: \"left\",\r\n                            }}\r\n                          >\r\n                            {/* <span style={{ marginRight: \"1rem\" }}>\r\n                              <Avatar\r\n                                alt={`image of ${\r\n                                  doctorData && doctorData.firstName\r\n                                }`}\r\n                                src={\r\n                                  doctorData ? doctorData.picture : displayPhoto\r\n                                }\r\n                                sx={{ width: 24, height: 24 }}\r\n                              />\r\n                            </span> */}\r\n                            <span style={{ fontSize: \"1.25rem\" }}>\r\n                              {doctorData?.firstName}\r\n                            </span>\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell\r\n                          id={labelId}\r\n                          scope=\"row\"\r\n                          align=\"left\"\r\n                          className={classes.tableCell}\r\n                        >\r\n                          {doctorData?.lastName}\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" className={classes.tableCell}>\r\n                          {qualification?.degree}\r\n                        </TableCell>\r\n                        <TableCell\r\n                          align=\"left\"\r\n                          className={classes.tableCell}\r\n                          style={{ color: theme.palette.common.red }}\r\n                        >\r\n                          <Chip\r\n                            label={status ? \"Verified\" : \"Not Verified\"}\r\n                            className={classes.badge}\r\n                            style={{\r\n                              background:\r\n                                status === true\r\n                                  ? theme.palette.common.lightGreen\r\n                                  : theme.palette.common.lightRed,\r\n                              color:\r\n                                status === true\r\n                                  ? theme.palette.common.green\r\n                                  : theme.palette.common.red,\r\n                            }}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" className={classes.tableCell}>\r\n                          {dateMoment(qualification?.year)}\r\n                        </TableCell>\r\n\r\n                        {/* <TableCell>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            className={classes.button}\r\n                            style={{\r\n                              whiteSpace: \"nowrap\",\r\n                              padding: \"5% 50%\",\r\n                              marginLeft: \"-10%\",\r\n                            }}\r\n                            component={Link}\r\n                            endIcon={<ArrowForwardIosIcon />}\r\n                            to={`/verification/view/${_id}`}\r\n                          >\r\n                            View Verification{\" \"}\r\n                          </Button>\r\n                        </TableCell> */}\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={HCPHeader}\r\n              paginationLabel=\"Verification  per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HCP;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaDoctor.js",["1562","1563","1564","1565","1566","1567","1568","1569","1570","1571"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Link, useHistory, useParams } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NetworkStatus } from \"@apollo/client\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  Grid,\r\n  TableRow,\r\n  TableCell,\r\n  Button,\r\n  Checkbox,\r\n  Chip,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { timeConverter } from \"components/Utilities/Time\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { useStyles } from \"../../styles/doctorsPageStyles\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport {\r\n  getDoctorsProfile,\r\n  getDoctorsProfileByStatus,\r\n} from \"components/graphQL/useQuery\";\r\nimport { hcpsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { createDOctorProfile } from \"components/graphQL/Mutation\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\r\nimport { addDoctorValidationSchema } from \"helpers/validationSchemas\";\r\nimport { Loader, Modals, CustomButton } from \"components/Utilities\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport {\r\n  addDocInitialValues,\r\n  /* cadreFilterBy, */\r\n  defaultPageInfo,\r\n  docCadreOptions,\r\n  docSpecializationsOptions,\r\n  doctorsSearchOptions,\r\n  genderType,\r\n} from \"helpers/mockData\";\r\nimport CompoundSearch from \"components/Forms/CompoundSearch\";\r\nimport DoctorFilters from \"components/Forms/Filters/DoctorsFilters\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst HealaDoctor = () => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { displayAlert } = useAlert();\r\n  const [profiles, setProfiles] = useState(\"\");\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const { provider } = useSelector((state) => state.patient);\r\n  const { id, ids } = useParams();\r\n  const [openAddHcp, setOpenAddHcp] = useState(false);\r\n  const [createDoc] = useMutation(createDOctorProfile);\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [fetchDoctors, { error, loading, refetch, variables, networkStatus }] =\r\n    useLazyQuery(getDoctorsProfile);\r\n  const [\r\n    fetchDoctorsByStatus,\r\n    {\r\n      loading: byStatusLoading,\r\n      refetch: byStatusRefetch,\r\n      variables: byStatusVariables,\r\n    },\r\n  ] = useLazyQuery(getDoctorsProfileByStatus);\r\n\r\n  useEffect(() => {\r\n    fetchDoctors({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        providerId: ids,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data && provider === \"\") {\r\n          setPageInfo(data.doctorProfiles.pageInfo || []);\r\n          setProfiles(data.doctorProfiles.profile || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n  useEffect(() => {\r\n    fetchDoctors({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n        providerId: ids,\r\n      },\r\n    })\r\n      .then(({ data }) => {\r\n        if (data && provider !== \"\") {\r\n          setPageInfo(data.doctorProfiles.pageInfo || []);\r\n          setProfiles(data.doctorProfiles.profile || defaultPageInfo);\r\n        }\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [provider]);\r\n\r\n  const onSubmit = async (values) => {\r\n    const {\r\n      createdAt,\r\n      updatedAt,\r\n      firstName,\r\n      lastName,\r\n      gender,\r\n      phone,\r\n      email,\r\n      hospital,\r\n      dociId,\r\n      specialization,\r\n      dob,\r\n      cadre,\r\n      image,\r\n    } = values;\r\n    const correctDOB = timeConverter(dob);\r\n    await createDoc({\r\n      variables: {\r\n        dociId,\r\n        createdAt,\r\n        updatedAt,\r\n        firstName,\r\n        lastName,\r\n        gender,\r\n        phoneNumber: phone,\r\n        email,\r\n        hospital,\r\n        specialization,\r\n        dob: correctDOB,\r\n        cadre,\r\n        image,\r\n        providerId: \"61db6f8968b248001aec4fcb\",\r\n      },\r\n      refetchQueries: [{ query: getDoctorsProfile }],\r\n    });\r\n    setOpenAddHcp(false);\r\n  };\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const getSearchPlaceholder = (filterBy) => {\r\n    return filterBy === \"id\"\r\n      ? \"Search by ID e.g 7NE6ELLO\"\r\n      : filterBy === \"firstName\"\r\n      ? \"Search by first name e.g John\"\r\n      : filterBy === \"lastName\"\r\n      ? \"Search by last name e.g Doe\"\r\n      : \"\";\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(data.doctorProfiles.pageInfo || defaultPageInfo);\r\n        setProfiles(data.doctorProfiles.profile || []);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\r\n      <Grid\r\n        item\r\n        gap={{ md: 4, sm: 4, xs: 2 }}\r\n        direction={{ sm: \"row\", xs: \"column\" }}\r\n        container\r\n        justifyContent=\"flex-end\"\r\n      >\r\n        <Grid item>\r\n          <CustomButton\r\n            endIcon={<AddIcon />}\r\n            title=\"Add Doctor\"\r\n            type={buttonType}\r\n            onClick={() => setOpenAddHcp(true)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      {/* ========= FILTERS =========== */}\r\n\r\n      <TableLayout\r\n        filters={\r\n          <DoctorFilters\r\n            setProfiles={setProfiles}\r\n            setPageInfo={setPageInfo}\r\n            queryParams={{\r\n              doctorsParams: { fetchDoctors, loading, refetch, variables },\r\n              doctorsByStatusParams: {\r\n                byStatusLoading,\r\n                byStatusVariables,\r\n                byStatusRefetch,\r\n                fetchDoctorsByStatus,\r\n              },\r\n            }}\r\n          />\r\n        }\r\n        search={\r\n          <CompoundSearch\r\n            queryParams={{ fetchData: fetchDoctors, variables, loading }}\r\n            setPageInfo={(data) =>\r\n              setPageInfo(data.doctorProfiles.pageInfo || {})\r\n            }\r\n            setProfiles={(data) =>\r\n              setProfiles(data.doctorProfiles.profile || [])\r\n            }\r\n            getSearchPlaceholder={(filterBy) => getSearchPlaceholder(filterBy)}\r\n            filterOptions={doctorsSearchOptions}\r\n          />\r\n        }\r\n      >\r\n        {loading ? (\r\n          <Loader />\r\n        ) : byStatusLoading ? (\r\n          <Loader />\r\n        ) : networkStatus === NetworkStatus.refetch ? (\r\n          <Loader />\r\n        ) : profiles.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={hcpsHeadCells}\r\n              rows={profiles}\r\n              paginationLabel=\"Doctors per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = changeTableLimit(fetchDoctors, {\r\n                  first: e,\r\n                  providerId: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change table limit\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = handlePageChange(fetchDoctors, page, pageInfo, {\r\n                  providerId: ids,\r\n                });\r\n                await setTableData(res, \"Failed to change page.\");\r\n              }}\r\n            >\r\n              {profiles.map((row, index) => {\r\n                const {\r\n                  _id,\r\n                  dociId,\r\n                  firstName,\r\n                  provider,\r\n                  status,\r\n                  specialization,\r\n                  consultations,\r\n                  lastName,\r\n                } = row;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: \"pointer\" }}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        minWidth: \"10rem\",\r\n                      }}\r\n                    >\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        {dociId?.split(\"-\")[1]}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Link to={`/hcps/${_id}`} className={classes.link}>\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ fontSize: \"1.25rem\" }}>\r\n                            {firstName} {lastName}\r\n                          </span>\r\n                        </div>\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.grey }}\r\n                    >\r\n                      <Link to={`/hcps/${_id}`} className={classes.link}>\r\n                        {specialization}{\" \"}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        {consultations ? consultations : 0}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.grey }}\r\n                    >\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        {provider ? provider : \"No Provider\"}{\" \"}\r\n                      </Link>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Link to={`/hcps/${_id}}`} className={classes.link}>\r\n                        <Chip\r\n                          label={\r\n                            status && status === \"Active\"\r\n                              ? \"Active\"\r\n                              : \"Inactive\"\r\n                          }\r\n                          className={classes.badge}\r\n                          style={{\r\n                            background:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.lightGreen\r\n                                : theme.palette.common.lightRed,\r\n                            color:\r\n                              status === \"Active\"\r\n                                ? theme.palette.common.green\r\n                                : theme.palette.common.red,\r\n                          }}\r\n                        />\r\n                      </Link>\r\n                    </TableCell>\r\n                    {/* <TableCell>\r\n                      <Button\r\n                        variant=\"contained\"\r\n                        className={classes.button}\r\n                        component={Link}\r\n                        to={`hcps/${_id}`}\r\n                        endIcon={<ArrowForwardIosIcon />}\r\n                      >\r\n                        View Doctor\r\n                      </Button>\r\n                    </TableCell> */}\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={hcpsHeadCells}\r\n            paginationLabel=\"Doctors per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n      {/* ADD Doctor MODAL */}\r\n      <Modals\r\n        isOpen={openAddHcp}\r\n        title=\"Add Doctor\"\r\n        rowSpacing={5}\r\n        height=\"auto\"\r\n        width={{ sm: \"50vw\", xs: \"90vw\" }}\r\n        handleClose={() => setOpenAddHcp(false)}\r\n      >\r\n        <Formik\r\n          initialValues={addDocInitialValues}\r\n          onSubmit={onSubmit}\r\n          validationSchema={addDoctorValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"1rem\" }}>\r\n                <Grid container direction=\"column\" gap={2}>\r\n                  <Grid item container direction=\"column\" gap={1}>\r\n                    <Grid item container spacing={2}>\r\n                      <Grid item container xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"First Name\"\r\n                          id=\"firstName\"\r\n                          name=\"firstName\"\r\n                          placeholder=\"Enter first name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item container xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Last Name\"\r\n                          id=\"lastName\"\r\n                          name=\"lastName\"\r\n                          placeholder=\"Enter last name\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Grid item container direction=\"column\" gap={2}>\r\n                      <Grid item container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"date\"\r\n                            name=\"dob\"\r\n                            label=\"DOB\"\r\n                            setFieldValue={setFieldValue}\r\n                            setValues={setValues}\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6}>\r\n                          <Grid container direction=\"column\">\r\n                            <FormikControl\r\n                              control=\"select\"\r\n                              options={docSpecializationsOptions}\r\n                              name=\"specialization\"\r\n                              label=\"Specialization\"\r\n                              placeholder=\"Specialization\"\r\n                            />\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container direction=\"column\" gap={2}>\r\n                    <Grid item container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          label=\"Gender\"\r\n                          id=\"gender\"\r\n                          name=\"gender\"\r\n                          options={genderType}\r\n                          placeholder=\"Gender\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          label=\"Phone Number\"\r\n                          id=\"phone\"\r\n                          name=\"phone\"\r\n                          placeholder=\"Enter last Phone number\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n\r\n                    <Grid item container direction=\"column\" gap={2}>\r\n                      <Grid item container spacing={2}>\r\n                        <Grid item xs={6}>\r\n                          <FormikControl\r\n                            control=\"input\"\r\n                            label=\"Hospital\"\r\n                            id=\"hospital\"\r\n                            name=\"hospital\"\r\n                            placeholder=\"Enter hospital Name\"\r\n                          />\r\n                        </Grid>\r\n                        <Grid item xs={6} marginBottom={{ xs: 1 }}>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={docCadreOptions}\r\n                            name=\"cadre\"\r\n                            label=\"Cadre\"\r\n                            placeholder=\"Select Cadre\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container spacing={2} alignItems=\"center\">\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"file\"\r\n                        name=\"image\"\r\n                        label=\"Profile Pics\"\r\n                        setFieldValue={setFieldValue}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        label=\"Heala-ID\"\r\n                        id=\"dociId\"\r\n                        name=\"dociId\"\r\n                        placeholder=\"Enter Heala ID\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <CustomButton\r\n                      title=\"Add Doctor\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HealaDoctor;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpAvailability.js",["1572","1573"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpAppointments.js",["1574","1575","1576"],"import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Divider, Avatar, Typography } from \"@mui/material\";\r\nimport { Modals, CustomButton, Loader } from \"components/Utilities\";\r\nimport { timeConverter, timeMoment } from \"components/Utilities/Time\";\r\nimport * as Yup from \"yup\";\r\nimport { updateAppointment } from \"components/graphQL/Mutation\";\r\nimport { DeleteOrDisable } from \"components/modals\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { getAppoint, getDOCAppoint } from \"components/graphQL/useQuery\";\r\nimport { deleteAppointment } from \"components/graphQL/Mutation\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { ReactComponent as CalendarIcon } from \"assets/images/calendar.svg\";\r\nimport { ReactComponent as TimerIcon } from \"assets/images/timer.svg\";\r\nimport AssignmentIcon from \"@mui/icons-material/Assignment\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { NoData } from \"components/layouts\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  parentGridWrapper: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.1)\",\r\n\r\n    \"&:not(:last-of-type)\": {\r\n      marginBottom: \"5rem\",\r\n    },\r\n  },\r\n\r\n  infoBadge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.5rem\",\r\n      borderRadius: \"1.5rem\",\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n    },\r\n  },\r\n\r\n  title: {\r\n    \"&.MuiTypography-root\": {\r\n      color: theme.palette.common.grey,\r\n      // marginRight: \"2rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst HcpAppointments = () => {\r\n  const { hcpId } = useParams();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { displayAlert } = useAlert();\r\n  const [appointment, setAppointment] = useState([]);\r\n  const [updateAppoint] = useMutation(updateAppointment);\r\n  const { loading, data, error } = useQuery(getDOCAppoint, {\r\n    variables: {\r\n      id: hcpId,\r\n      orderBy: \"-createdAt\",\r\n    },\r\n  });\r\n  const [deleteAppointments] = useMutation(deleteAppointment);\r\n  useEffect(() => {\r\n    if (data) {\r\n      setAppointment(data.getAppointments.data);\r\n    }\r\n  }, [data, hcpId]);\r\n  const handleDeleteOpenDialog = (id) => {\r\n    setId(id);\r\n    setdeleteModal(true);\r\n  };\r\n\r\n  const greenButton = {\r\n    background: theme.palette.common.lightGreen,\r\n    hover: theme.palette.success.light,\r\n    active: theme.palette.success.dark,\r\n  };\r\n  const [patientId, setPatientId] = useState(null);\r\n  const handleSchedule = (id, patient) => {\r\n    setIsPatients(true);\r\n    setEditid(id);\r\n    setPatientId(patient);\r\n  };\r\n  const [id, setId] = useState(null);\r\n  const [isPatients, setIsPatients] = useState(false);\r\n  const [deleteModal, setdeleteModal] = useState(false);\r\n  const onConfirm = async () => {\r\n    try {\r\n      await deleteAppointments({\r\n        variables: { id },\r\n\r\n        refetchQueries: [\r\n          {\r\n            query: getDOCAppoint,\r\n            variables: {\r\n              id: hcpId,\r\n              orderBy: \"-createdAt\",\r\n            },\r\n          },\r\n        ],\r\n      });\r\n      displayAlert(\"success\", \"Appointment Deleted Successfully\");\r\n    } catch (error) {\r\n      console.log(error);\r\n      displayAlert(\"error\", error);\r\n    }\r\n  };\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n  const handlePatientCloses = () => setIsPatients(false);\r\n  const redButton = {\r\n    background: theme.palette.common.lightRed,\r\n    hover: theme.palette.error.light,\r\n    active: theme.palette.error.dark,\r\n  };\r\n\r\n  const [editId, setEditid] = useState(null);\r\n  const initialValues1 = {\r\n    date: \"\",\r\n  };\r\n  const validationSchema1 = Yup.object({\r\n    date: Yup.string(\"select date and time \").required(\r\n      \"Date  and time is required\"\r\n    ),\r\n  });\r\n  const onSubmit1 = async (values) => {\r\n    const { date } = values;\r\n\r\n    const timeValue = timeMoment(date);\r\n    const dateValue = timeConverter(date);\r\n    try {\r\n      await updateAppoint({\r\n        variables: {\r\n          id: editId,\r\n          date: dateValue,\r\n          time: timeValue,\r\n          doctor: hcpId,\r\n          patient: patientId,\r\n        },\r\n        refetchQueries: [\r\n          {\r\n            query: getAppoint,\r\n            variables: {\r\n              id: patientId,\r\n              orderBy: \"-createdAt\",\r\n            },\r\n          },\r\n          {\r\n            query: getDOCAppoint,\r\n            variables: {\r\n              id: hcpId,\r\n              orderBy: \"-createdAt\",\r\n            },\r\n          },\r\n        ],\r\n      });\r\n      displayAlert(\"success\", \"Appointment Updated Successfully\");\r\n    } catch (error) {\r\n      console.log(error);\r\n      displayAlert(\"error\", error);\r\n    }\r\n    handlePatientCloses();\r\n  };\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        direction=\"column\"\r\n        height=\"100%\"\r\n      >\r\n        {appointment.length > 0 ? (\r\n          appointment.map((appoint) => (\r\n            <Grid\r\n              item\r\n              container\r\n              direction=\"column\"\r\n              key={appoint._id}\r\n              className={classes.parentGridWrapper}\r\n            >\r\n              <Grid\r\n                item\r\n                container\r\n                style={{ maxWidth: \"60rem\", padding: \"4rem 5rem\" }}\r\n              >\r\n                <Grid\r\n                  item\r\n                  container\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"space-between\"\r\n                >\r\n                  <Grid item>\r\n                    <Typography variant=\"body1\" className={classes.title}>\r\n                      Consultation Date:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item style={{ marginRight: \"1.5rem\" }}>\r\n                        <CalendarIcon\r\n                          fill={theme.palette.common.lightGrey}\r\n                          height={14}\r\n                          width={10}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography variant=\"body1\">{appoint.date}</Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item style={{ marginRight: \"1.5rem\" }}>\r\n                        <TimerIcon fill={theme.palette.common.red} />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography variant=\"body1\">{appoint.time}</Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Divider color={theme.palette.common.lighterGrey} />\r\n              <Grid item style={{ padding: \"2rem 5rem\" }}>\r\n                <Grid container gap={2} alignItems=\"center\">\r\n                  <Grid item>\r\n                    <Typography variant=\"body1\" className={classes.title}>\r\n                      Patient:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Avatar\r\n                      src={\r\n                        appoint.patientData.picture\r\n                          ? appoint.patientData.picture\r\n                          : displayPhoto\r\n                      }\r\n                      alt=\"Display Photo of the patient\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography variant=\"body1\">{`${appoint.patientData.firstName} ${appoint.patientData.lastName}`}</Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Divider color={theme.palette.common.lighterGrey} />\r\n              <Grid item style={{ padding: \"3rem 5rem\" }}>\r\n                <Grid container direction=\"column\">\r\n                  <Grid item style={{ marginBottom: \"1rem\" }}>\r\n                    <Typography variant=\"body1\" className={classes.title}>\r\n                      Meeting Details\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography variant=\"body2\">\r\n                      {appoint.details ? appoint.details : \"No Value\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Divider color={theme.palette.common.lighterGrey} />\r\n              <Grid item>\r\n                <Grid\r\n                  container\r\n                  justifyContent=\"flex-end\"\r\n                  style={{ padding: \"2rem 5rem\" }}\r\n                >\r\n                  <Grid item style={{ marginRight: \"3rem\" }}>\r\n                    <CustomButton\r\n                      title=\"Reschedule\"\r\n                      type={greenButton}\r\n                      height=\"3.5rem\"\r\n                      textColorOnHover=\"#fff\"\r\n                      onClick={() =>\r\n                        handleSchedule(appoint._id, appoint.patient)\r\n                      }\r\n                      textColor={theme.palette.common.green}\r\n                      endIcon={<AssignmentIcon color=\"success\" />}\r\n                      borderRadius=\"3rem\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <CustomButton\r\n                      title=\"Cancel\"\r\n                      type={redButton}\r\n                      height=\"3.5rem\"\r\n                      textColorOnHover=\"#fff\"\r\n                      onClick={() => handleDeleteOpenDialog(appoint._id)}\r\n                      textColor={theme.palette.common.red}\r\n                      endIcon={<AssignmentIcon color=\"error\" />}\r\n                      borderRadius=\"3rem\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          ))\r\n        ) : (\r\n          <NoData />\r\n        )}\r\n      </Grid>\r\n\r\n      <DeleteOrDisable\r\n        open={deleteModal}\r\n        setOpen={setdeleteModal}\r\n        title=\"Delete Appointment\"\r\n        onConfirm={onConfirm}\r\n        confirmationMsg=\"delete Appointment\"\r\n        btnValue=\"Delete\"\r\n      />\r\n\r\n      <Modals\r\n        isOpen={isPatients}\r\n        title=\"Reschedule Appointment\"\r\n        rowSpacing={5}\r\n        height=\"auto\"\r\n        handleClose={handlePatientCloses}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={validationSchema1}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid, setFieldValue }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={2}>\r\n                  <Grid item container>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item md>\r\n                        <FormikControl\r\n                          control=\"time\"\r\n                          name=\"date\"\r\n                          label=\"Date\"\r\n                          placeholder=\"Choose Date and Time\"\r\n                          setFieldValue={setFieldValue}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    container\r\n                    alignItems=\"flex-end\"\r\n                    marginTop={5}\r\n                    xs={12}\r\n                  >\r\n                    <CustomButton\r\n                      title=\"Reschedule Appointment\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HcpAppointments;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HealaPage.js",["1577","1578","1579","1580","1581","1582","1583","1584","1585","1586","1587","1588","1589","1590"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Financetable.js",["1591","1592","1593","1594","1595","1596"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  TableCell,\r\n  TableRow,\r\n  Checkbox,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { Link, useHistory } from \"react-router-dom\";\r\nimport {\r\n  timeMoment,\r\n  dateMoment,\r\n  formatNumber,\r\n} from \"components/Utilities/Time\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { payoutHeaderss1 } from \"components/Utilities/tableHeaders\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getEarningData } from \"components/graphQL/useQuery\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    \"&.css-1zf5oc-MuiButtonBase-root-MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"10rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n  buttons: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"10rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n  iconWrapper: {\r\n    width: 20,\r\n    height: 20,\r\n    borderRadius: \"50%\",\r\n    display: \"grid\",\r\n    placeContent: \"center\",\r\n    background: theme.palette.common.lightGreen,\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      color: \"rgb(0 0 0)\",\r\n      fontWeight: 400,\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.css-1eelh6y-MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Financetable = () => {\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [earning, setEarning] = useState([]);\r\n  const [fetchEarningData, { loading, data, error }] =\r\n    useLazyQuery(getEarningData);\r\n\r\n  useEffect(() => {\r\n    fetchEarningData({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchEarningData, pageInfo]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setEarning(data.getEarningStats.earningData.data);\r\n      setPageInfo(data.getEarningStats.earningData.PageInfo);\r\n    }\r\n  }, [earning, data]);\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      gap={2}\r\n      height=\"100%\"\r\n      sx={{ margin: \"3rem 0rem\" }}\r\n    >\r\n      <>\r\n        <TableLayout>\r\n          {earning.length > 0 ? (\r\n            <Grid item container>\r\n              <EnhancedTable\r\n                headCells={payoutHeaderss1}\r\n                rows={earning}\r\n                paginationLabel=\"finance per page\"\r\n                hasCheckbox={true}\r\n                changeLimit={async (e) => {\r\n                  await changeTableLimit(fetchEarningData, { first: e });\r\n                }}\r\n                dataPageInfo={pageInfo}\r\n                handlePagination={async (page) => {\r\n                  await handlePageChange(fetchEarningData, page, pageInfo, {});\r\n                }}\r\n              >\r\n                {earning.map((row, index) => {\r\n                  const { createdAt, providerId, balance, doctorData } = row;\r\n                  const { firstName, picture, lastName } = doctorData[0] || {};\r\n                  const isItemSelected = isSelected(row._id, selectedRows);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row._id}\r\n                      selected={isItemSelected}\r\n                      sx={{ cursor: \"pointer\" }}\r\n                      onClick={(e) => {\r\n                        e.stopPropagation();\r\n                        history.push(\r\n                          `/hcps/${doctorData[0]._id}/consultations`\r\n                        );\r\n                      }}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              row.id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.red }}\r\n                      >\r\n                        {formatNumber(balance.toFixed(2))}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        {doctorData && doctorData[0] !== {} ? (\r\n                          <div\r\n                            style={{\r\n                              height: \"100%\",\r\n                              display: \"flex\",\r\n                              alignItems: \"center\",\r\n                            }}\r\n                          >\r\n                            <span style={{ fontSize: \"1.25rem\" }}>\r\n                              {doctorData &&\r\n                                `${firstName && firstName} ${\r\n                                  lastName && lastName\r\n                                }`}\r\n                            </span>\r\n                          </div>\r\n                        ) : (\r\n                          \"No name\"\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                      >\r\n                        {providerId}\r\n                      </TableCell>\r\n\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                      >\r\n                        {`${dateMoment(createdAt)} - ${timeMoment(createdAt)}`}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={payoutHeaderss1}\r\n              paginationLabel=\"Finance  per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Financetable;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\HcpCaseNote.js",["1597","1598"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\loginPageStyles.js",["1599"],"import { makeStyles } from \"@mui/styles\";\r\n/* import loginBackground from \"../assets/images/login-background.svg\"; */\r\n\r\nexport const useStyles = makeStyles((theme) => ({\r\n  gridContainer: {\r\n    \"&.MuiGrid-root\": {\r\n      display: \"flex\",\r\n      flexDirection: \"column\",\r\n      justifyContent: \"center\",\r\n      backgroundColor: \"#f8f8f8\",\r\n      minHeight: \"100vh\",\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  overlay: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    position: \"absolute\",\r\n    top: 0,\r\n    left: 0,\r\n  },\r\n  peopleBgImage: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    backgroundSize: \"cover\",\r\n    overflow: \"hidden\",\r\n    backgroundPosition: \"25% 50%\",\r\n  },\r\n  heading: {\r\n    \"&.MuiTypography-root\": {\r\n      fontSize: \"clamp(1em, 3.2em, 5em)\",\r\n      textAlign: \"center\",\r\n      lineHeight: \"28px\",\r\n      fontWeight: \"500 !important\",\r\n      padding: \"23px\",\r\n      color: \"#333333\",\r\n    },\r\n  },\r\n  logoAlign: {\r\n    width: \"100%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    flexGrow: 0,\r\n    paddingBottom: \"2rem\",\r\n  },\r\n\r\n  logo: {\r\n    width: \"clamp(100px, 150px, 200px)\",\r\n    position: \"relative\",\r\n    textAlign: \"center\",\r\n  },\r\n  rightParentGrid: {\r\n    display: \"flex\",\r\n    flexWrap: \"wrap\",\r\n    justifyContent: \"center\",\r\n    backgroundColor: \"#FCFCFC\",\r\n    borderRadius: \"11px\",\r\n  },\r\n\r\n  link: {\r\n    textDecoration: \"none\",\r\n  },\r\n  loginBtn: {\r\n    width: \"100%\",\r\n    height: \"54.62px\",\r\n    border: \"none\",\r\n    fontWeight: \"500 !important\",\r\n    fontSize: \"1.6rem !important\",\r\n    textTransform: \"initial !important\",\r\n    color: \"#ffffff !important\",\r\n    lineHeight: \"20px\",\r\n    background: \"linear-gradient(98.44deg, #3E5EA9 1.92%, #7EEDBA 122.04%)\",\r\n    borderRadius: \"7px\",\r\n    cursor: \"pointer\",\r\n    \"&:hover\": {\r\n      boxShadow: \"0px 6.82771px 20.4831px rgba(62, 165, 132, 0.15)\",\r\n    },\r\n  },\r\n}));\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Finance.js",["1600","1601"],"import React, { useState, useEffect } from \"react\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { Loader, CircularProgressBar, FormSelect } from \"components/Utilities\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport TrendingDownIcon from \"@mui/icons-material/TrendingDown\";\r\nimport TrendingUpIcon from \"@mui/icons-material/TrendingUp\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card } from \"components/Utilities\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getFinanceStats } from \"components/graphQL/useQuery\";\r\nimport {\r\n  financialPercent,\r\n  selectOptions,\r\n  formatNumber,\r\n} from \"components/Utilities/Time\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardContainer: {\r\n    \"&.MuiCard-root\": {\r\n      width: \"100%\",\r\n      height: \"15.8rem\",\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\",\r\n      background: \"white\",\r\n      marginRight: \"5rem\",\r\n      \"&:hover\": {\r\n        boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.15)\",\r\n        cursor: \"pointer\",\r\n      },\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n      \"& .MuiCardContent-root .MuiTypography-h5\": {\r\n        textDecoration: \"none !important\",\r\n        textTransform: \"uppercase\",\r\n      },\r\n    },\r\n  },\r\n\r\n  iconWrapper: {\r\n    width: 60,\r\n    height: 60,\r\n    borderRadius: \"50%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  cardGrid: {\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    height: \"25.8rem\",\r\n  },\r\n  flexContainer: {\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    margin: \"auto\",\r\n    width: \"100%\",\r\n    \"&:first-child\": {\r\n      borderBottom: \".5px solid #F8F8F8\",\r\n    },\r\n  },\r\n  lightGreen: {\r\n    color: theme.palette.common.green,\r\n  },\r\n\r\n  lightRed: {\r\n    color: theme.palette.common.red,\r\n  },\r\n  mainContainer: {\r\n    width: \"100%\",\r\n    background: \"white\",\r\n    borderRadius: \"2rem\",\r\n    boxShadow: \"-1px 11px 30px 0px #e0e0e03b\",\r\n  },\r\n  parentGrid: {\r\n    textDecoration: \"none\",\r\n    color: theme.palette.primary.main,\r\n\r\n    \"& > .MuiGrid-root.MuiGrid-container\": {\r\n      backgroundColor: \"#ffffff\",\r\n    },\r\n  },\r\n\r\n  cardIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      fontSize: \"3rem\",\r\n    },\r\n  },\r\n}));\r\nconst Finance = () => {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const [range, setRange] = useState(\"365\");\r\n  const [totalIncome, setTotalIncome] = useState(0);\r\n  const [totalExpenditure, setTotalExpenditure] = useState(0);\r\n  const financialValue = financialPercent(totalIncome, totalExpenditure);\r\n  const [finances, setFinances] = useState(financialValue);\r\n  const [fetchFinanceStats, { error, loading }] = useLazyQuery(getFinanceStats);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      fetchFinanceStats({ variables: { q: range } }).then(({ data }) => {\r\n        if (!data) throw Error(\"couldn't fetch data\");\r\n        const { subscriptionIncome, totalPayout } = data.getEarningStats;\r\n        setTotalIncome(subscriptionIncome);\r\n        setTotalExpenditure(totalPayout);\r\n        const value = financialPercent(subscriptionIncome, totalPayout);\r\n        setFinances(value);\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }, [range, fetchFinanceStats]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid container gap={3}>\r\n      <Grid\r\n        item\r\n        container\r\n        rowGap={4}\r\n        padding={{ md: \"2rem 4rem\", sm: \"2rem, 4rem\", xs: \"1rem\" }}\r\n        className={classes.mainContainer}\r\n        flexDirection={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n        sx={{ alignItems: \"center\", justifyContent: \"space-between\" }}\r\n      >\r\n        <Grid item container className={classes.flexContainer}>\r\n          <Grid item>\r\n            <Typography variant=\"h1\" color=\"#2D2F39\">\r\n              Earning\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <FormSelect\r\n              placeholder=\"Select days\"\r\n              value={range}\r\n              onChange={(e) => setRange(e?.target?.value)}\r\n              options={selectOptions}\r\n              name=\"finance\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          container\r\n          alignItems=\"center\"\r\n          flexDirection={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n          spacing={{ md: 2, xs: 2, sm: 2 }}\r\n        >\r\n          <Grid item>\r\n            <CircularProgressBar\r\n              height=\"17rem\"\r\n              width=\"17rem\"\r\n              color={theme.palette.common.green}\r\n              trailColor={theme.palette.common.red}\r\n              value={finances}\r\n              strokeWidth={8}\r\n            />\r\n          </Grid>\r\n          <Grid item flex={1}>\r\n            <Grid\r\n              container\r\n              alignItems=\"center\"\r\n              rowGap={4}\r\n              justifyContent={{\r\n                md: \"space-around\",\r\n                xs: \"flex-start\",\r\n                sm: \"space-around\",\r\n              }}\r\n            >\r\n              <Grid\r\n                item\r\n                spacing={2}\r\n                sx={{ justifyContent: \"center\", alignItems: \"center\" }}\r\n              >\r\n                <Grid\r\n                  container\r\n                  alignItems=\"center\"\r\n                  gap={{ md: 2, sm: 2, xs: 4 }}\r\n                >\r\n                  <Grid\r\n                    className={classes.iconWrapper}\r\n                    sx={{ background: theme.palette.common.lightGreen }}\r\n                  >\r\n                    <Grid item>\r\n                      <TrendingDownIcon\r\n                        color=\"success\"\r\n                        className={classes.cardIcon}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography noWrap variant=\"h2\">\r\n                      <span\r\n                        style={{\r\n                          textDecoration: \"line-through\",\r\n                          textDecorationStyle: \"double\",\r\n                        }}\r\n                      >\r\n                        N{\"\"}\r\n                      </span>\r\n                      {formatNumber(totalIncome)}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      style={{\r\n                        color: theme.palette.common.lightGrey,\r\n                      }}\r\n                    >\r\n                      Subscription Earnings\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              {/* second */}\r\n              <Grid item>\r\n                <Grid\r\n                  container\r\n                  alignItems=\"center\"\r\n                  gap={{ md: 2, sm: 2, xs: 4 }}\r\n                >\r\n                  <Grid\r\n                    className={classes.iconWrapper}\r\n                    sx={{ background: theme.palette.common.lightRed }}\r\n                  >\r\n                    <Grid item>\r\n                      <TrendingUpIcon\r\n                        color=\"error\"\r\n                        className={classes.cardIcon}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography noWrap variant=\"h2\">\r\n                      <span\r\n                        style={{\r\n                          textDecoration: \"line-through\",\r\n                          textDecorationStyle: \"double\",\r\n                        }}\r\n                      >\r\n                        N\r\n                      </span>\r\n                      {formatNumber(+totalExpenditure)}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      style={{\r\n                        color: theme.palette.common.lightGrey,\r\n                      }}\r\n                    >\r\n                      Total Payouts\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              {/* second */}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* iterms */}\r\n      <Grid item container spacing={2} justifyContent=\"space-between\">\r\n        {/* 1 */}\r\n        <Grid item container md={4} sm={4} xs={12}>\r\n          <Grid\r\n            item\r\n            container\r\n            flexDirection=\"column\"\r\n            component={Link}\r\n            to=\"/finance/payouts\"\r\n            className={classes.parentGrid}\r\n          >\r\n            <Card\r\n              title=\"Doctor Payout\"\r\n              background={theme.palette.common.lightGreen}\r\n            >\r\n              <TrendingUpIcon color=\"error\" className={classes.cardIcon} />\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n        {/* 2 */}\r\n        <Grid item container md={4} sm={4} xs={12}>\r\n          <Grid\r\n            item\r\n            container\r\n            flexDirection=\"column\"\r\n            component={Link}\r\n            to=\"/finance/earnings\"\r\n            className={classes.parentGrid}\r\n          >\r\n            <Card\r\n              title=\"Doctor Earnings\"\r\n              background={theme.palette.common.lightGreen}\r\n            >\r\n              <Grid className={classes.iconWrapper}>\r\n                <TrendingDownIcon\r\n                  color=\"success\"\r\n                  className={classes.cardIcon}\r\n                />\r\n              </Grid>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n        {/* 3 */}\r\n        <Grid item container md={4} sm={4} xs={12}>\r\n          <Grid\r\n            item\r\n            container\r\n            flexDirection=\"column\"\r\n            component={Link}\r\n            to=\"/finance/sub-income\"\r\n            className={classes.parentGrid}\r\n          >\r\n            <Card\r\n              title=\"Subscription Income\"\r\n              background={theme.palette.common.lightGreen}\r\n            >\r\n              <Grid className={classes.iconWrapper}>\r\n                <TrendingDownIcon\r\n                  color=\"success\"\r\n                  className={classes.cardIcon}\r\n                />\r\n              </Grid>\r\n            </Card>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nFinance.propTypes = {\r\n  /* setSelectedSubMenu: PropTypes.func, */\r\n};\r\n\r\nexport default Finance;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Email.js",["1602","1603","1604"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { Loader, CustomButton } from \"components/Utilities\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport {\r\n  TableRow,\r\n  Alert,\r\n  TableCell,\r\n  Checkbox,\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { getEmailList } from \"components/graphQL/useQuery\";\r\nimport { emailHeader } from \"components/Utilities/tableHeaders\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n// import { emailPageDefaultFilterValues } from \"helpers/mockData\";\r\n//roleFilterBy\r\nconst useStyles = makeStyles((theme) => ({\r\n  chip: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.25rem\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n      background: theme.palette.common.white,\r\n      color: theme.palette.common.green,\r\n      \"& .MuiChip-deleteIcon\": {\r\n        color: \"inherit\",\r\n        fontSize: \"inherit\",\r\n      },\r\n    },\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"0.5rem\",\r\n      maxWidth: \"7rem\",\r\n      fontSize: \".85rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"0.85rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".2rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n  btn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  FormLabel: {\r\n    \"&.MuiFormLabel-root\": {\r\n      ...theme.typography.FormLabel,\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Email = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [\r\n    fetchEmails,\r\n    {\r\n      loading,\r\n      error,\r\n      data,\r\n      // refetch, variables\r\n    },\r\n  ] = useLazyQuery(getEmailList);\r\n  const [emails, setEmails] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchEmails();\r\n  }, [fetchEmails]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setEmails(data.getEmailList.data);\r\n    }\r\n  }, [data]);\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [response] = useState(\"\");\r\n  /* const [searchMail, setSearchMail] = useState(\"\"); */\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  // const [filterValues, setFilterValues] = useState(emailPageDefaultFilterValues);\r\n\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        height=\"100%\"\r\n        flexWrap=\"nowrap\"\r\n        gap={2}\r\n      >\r\n        {response ? (\r\n          <Grid\r\n            item\r\n            width={300}\r\n            margin=\"auto\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            textAlign=\"center\"\r\n          >\r\n            <Alert severity=\"success\">\r\n              <Typography variant=\"h1\">{response}</Typography>\r\n            </Alert>\r\n          </Grid>\r\n        ) : null}\r\n        <Grid\r\n          item\r\n          direction={{ sm: \"row\", xs: \"column\" }}\r\n          container\r\n          justifyContent={\"flex-end\"}\r\n          gap={{ md: 4, sm: 4, xs: 2 }}\r\n        >\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<AddIcon />}\r\n              component={Link}\r\n              to=\"/email/create-email\"\r\n              title=\"Add Email\"\r\n              type={buttonType}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <TableLayout>\r\n          {loading ? (\r\n            <Loader />\r\n          ) : emails && emails.length > 0 ? (\r\n            <Grid item container direction=\"column\" height=\"100%\">\r\n              <EnhancedTable\r\n                headCells={emailHeader}\r\n                rows={emails}\r\n                paginationLabel=\"email per page\"\r\n                handleChangePage={() => console.log(\"\")}\r\n                hasCheckbox={true}\r\n                changeLimit={() => console.log(\"\")}\r\n                fetchData={() => console.log(\"\")}\r\n                dataPageInfo={{}}\r\n                hasPagination={false}\r\n              >\r\n                {emails &&\r\n                  emails\r\n                    // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                    .map((row, index) => {\r\n                      const { _id, email, createdAt, role } = row;\r\n                      const isItemSelected = isSelected(_id, selectedRows);\r\n\r\n                      const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                      return (\r\n                        <TableRow\r\n                          hover\r\n                          role=\"checkbox\"\r\n                          aria-checked={isItemSelected}\r\n                          tabIndex={-1}\r\n                          key={_id}\r\n                          selected={isItemSelected}\r\n                        >\r\n                          <TableCell padding=\"checkbox\">\r\n                            <Checkbox\r\n                              onClick={() =>\r\n                                handleSelectedRows(\r\n                                  _id,\r\n                                  selectedRows,\r\n                                  setSelectedRows\r\n                                )\r\n                              }\r\n                              color=\"primary\"\r\n                              checked={isItemSelected}\r\n                              inputProps={{\r\n                                \"aria-labelledby\": labelId,\r\n                              }}\r\n                            />\r\n                          </TableCell>\r\n\r\n                          <TableCell\r\n                            id={labelId}\r\n                            scope=\"row\"\r\n                            align=\"left\"\r\n                            className={classes.tableCell}\r\n                            style={{ color: theme.palette.common.black }}\r\n                          >\r\n                            {dateMoment(createdAt)}\r\n                          </TableCell>\r\n                          <TableCell\r\n                            id={labelId}\r\n                            scope=\"row\"\r\n                            align=\"left\"\r\n                            className={classes.tableCell}\r\n                            style={{ color: theme.palette.common.black }}\r\n                          >\r\n                            {email}\r\n                          </TableCell>\r\n\r\n                          <TableCell\r\n                            align=\"left\"\r\n                            className={classes.tableCell}\r\n                            style={{ color: theme.palette.common.red }}\r\n                          >\r\n                            {role}\r\n                          </TableCell>\r\n\r\n                          <TableCell>\r\n                            <Button\r\n                              variant=\"contained\"\r\n                              className={classes.button}\r\n                              component={Link}\r\n                              disabled\r\n                              to={`email/${index}`}\r\n                              endIcon={<ArrowForwardIosIcon />}\r\n                              /* onClick={() => setSelectedSubMenu(7)} */\r\n                            >\r\n                              View mail\r\n                            </Button>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      );\r\n                    })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={emailHeader}\r\n              paginationLabel=\"Email  per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Email;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\patientsPageStyles.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\DataHeader.js",["1605","1606","1607","1608","1609"],"/* import * as React from \"react\";\r\nimport Avatar from \"@mui/material/Avatar\";\r\nimport displayPhoto from \"assets/images/avatar.svg\"; */\r\nimport Styled from \"styled-components\";\r\n\r\n/* export const columns = [\r\n  {\r\n    field: \"entryDate\",\r\n    headerName: \"Entry Date\",\r\n    headerClassName: \"entryHeader\",\r\n    headerAlign: \"center\",\r\n    flex: 0.1,\r\n    cellClassName: \"entryDate\",\r\n    type: \"number\",\r\n    minWidth: 60,\r\n    sortable: false,\r\n  },\r\n\r\n  {\r\n    field: \"fullname\",\r\n    headerName: \"Name\",\r\n    headerClassName: \"entryHeader\",\r\n    sortable: false,\r\n    cellClassName: \"name\",\r\n    headerAlign: \"left\",\r\n    flex: 0.13,\r\n    minWidth: 100,\r\n    renderCell: (params) => (\r\n      <span style={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <Avatar alt=\"Display avatar\" src={displayPhoto} style={{ marginRight: \"1rem\" }} />\r\n        {params.getValue(params.id, \"firstName\") || \"\"}\r\n\r\n        {params.getValue(params.id, \"lastName\") || \"\"}\r\n      </span>\r\n    ),\r\n  },\r\n  {\r\n    field: \"category\",\r\n    headerName: \"Category\",\r\n    headerAlign: \"left\",\r\n    cellClassName: \"category\",\r\n    // headerClassName: \"categoryHeader\",\r\n    type: \"number\",\r\n    minWidth: 100,\r\n    flex: 0.06,\r\n    sortable: false,\r\n  },\r\n\r\n  {\r\n    field: \"email\",\r\n    headerName: \"Email\",\r\n    headerClassName: \"entryHeader\",\r\n    headerAlign: \"center\",\r\n    cellClassName: \"email\",\r\n    flex: 0.15,\r\n    minWidth: 100,\r\n    renderCell: (params) => (\r\n      <Div>\r\n        <a> {params.getValue(params.id, \"email\") || \"\"}</a>\r\n      </Div>\r\n    ),\r\n  },\r\n];\r\n\r\nexport const columns2 = [\r\n  {\r\n    field: \"entryDate\",\r\n    headerName: \"Entry Date\",\r\n    headerClassName: \"entryHeader\",\r\n    headerAlign: \"center\",\r\n    flex: 0.1,\r\n    cellClassName: \"entryDate\",\r\n    type: \"number\",\r\n    minWidth: 110,\r\n    sortable: false,\r\n  },\r\n\r\n  {\r\n    field: \"fullname\",\r\n    headerName: \"Name\",\r\n    headerClassName: \"entryHeader\",\r\n    description: \"This column has a value getter and is not sortable.\",\r\n    sortable: false,\r\n    cellClassName: \"name\",\r\n    headerAlign: \"center\",\r\n    flex: 0.13,\r\n    minWidth: 150,\r\n    renderCell: (params) => (\r\n      <span style={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <Avatar alt=\"Display avatar\" src={displayPhoto} style={{ marginRight: \"1rem\" }} />\r\n        {params.getValue(params.id, \"firstName\") || \"\"}\r\n\r\n        {params.getValue(params.id, \"lastName\") || \"\"}\r\n      </span>\r\n    ),\r\n  },\r\n  {\r\n    field: \"medical\",\r\n    headerName: \"Medical ID\",\r\n    headerAlign: \"center\",\r\n    cellClassName: \"medical\",\r\n    headerClassName: \"medical\",\r\n    type: \"number\",\r\n    minWidth: 120,\r\n    flex: 0.08,\r\n    sortable: false,\r\n  },\r\n\r\n  {\r\n    field: \" \",\r\n    headerName: \" \",\r\n    headerClassName: \"entryHeader\",\r\n    headerAlign: \"center\",\r\n    cellClassName: \"email\",\r\n    selectable: false,\r\n    flex: 0.15,\r\n    minWidth: 100,\r\n    renderCell: (params) => (\r\n      <Div2>\r\n        <a href=\"/view\">\r\n          View HCP &nbsp;&nbsp;\r\n          <svg\r\n            width=\"6\"\r\n            height=\"8\"\r\n            viewBox=\"0 0 6 8\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              d=\"M0.726562 7.06L3.7799 4L0.726562 0.94L1.66656 0L5.66656 4L1.66656 8L0.726562 7.06Z\"\r\n              fill=\"#757886\"\r\n            />\r\n          </svg>\r\n        </a>\r\n      </Div2>\r\n    ),\r\n  },\r\n];\r\nexport const Referralcolumns = [\r\n  {\r\n    field: \"entryDate\",\r\n    headerName: \"Entry Date\",\r\n    headerClassName: \"entryHeader\",\r\n    headerAlign: \"center\",\r\n    flex: 0.09,\r\n    cellClassName: \"entryDate\",\r\n    type: \"number\",\r\n    minWidth: 60,\r\n    maxWidth: 150,\r\n    sortable: false,\r\n  },\r\n  {\r\n    field: \"time\",\r\n    headerName: \"Time\",\r\n    headerClassName: \"referralTime\",\r\n    headerAlign: \"center\",\r\n    flex: 0.077,\r\n    cellClassName: \"referralTime\",\r\n    type: \"number\",\r\n    minWidth: 50,\r\n    sortable: false,\r\n  },\r\n\r\n  {\r\n    field: \"HCP Name\",\r\n    headerName: \"HCP Name\",\r\n    headerClassName: \"entryHeader\",\r\n    description: \"This column has a value getter and is not sortable.\",\r\n    sortable: false,\r\n    cellClassName: \"name\",\r\n    headerAlign: \"center\",\r\n    flex: 0.13,\r\n    minWidth: 160,\r\n    renderCell: (params) => (\r\n      <span style={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <Avatar alt=\"Display avatar\" src={displayPhoto} style={{ marginRight: \"1rem\" }} />\r\n        {params.getValue(params.id, \"firstName\") || \"\"}\r\n\r\n        {params.getValue(params.id, \"lastName\") || \"\"}\r\n      </span>\r\n    ),\r\n  },\r\n  {\r\n    field: \"specialization\",\r\n    headerName: \"Specialization\",\r\n    headerAlign: \"left\",\r\n    cellClassName: \"CellSpecialization\",\r\n    headerClassName: \"specialization\",\r\n    type: \"number\",\r\n    minWidth: 50,\r\n    flex: 0.11,\r\n    sortable: false,\r\n  },\r\n  {\r\n    field: \"fullname\",\r\n    headerName: \"Patient's Name\",\r\n    headerClassName: \"headerPatientName\",\r\n    sortable: false,\r\n    cellClassName: \"PatientName\",\r\n    headerAlign: \"center\",\r\n    flex: 0.15,\r\n    minWidth: 200,\r\n    renderCell: (params) => (\r\n      <span style={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <Avatar alt=\"Display avatar\" src={displayPhoto} style={{ marginRight: \"1rem\" }} />\r\n        {params.getValue(params.id, \"firstName\") || \"\"}\r\n        {params.getValue(params.id, \"lastName\") || \"\"}\r\n      </span>\r\n    ),\r\n  },\r\n\r\n  {\r\n    field: \"Status \",\r\n    headerName: \" Status\",\r\n    headerClassName: \"status\",\r\n    headerAlign: \"left\",\r\n    cellClassName: \"cellStatus\",\r\n    selectable: false,\r\n    flex: 0.06,\r\n    minWidth: 70,\r\n    renderCell: (params) => (\r\n      <ReferralDiv>\r\n        <Div2>\r\n          <a href=\"\">Active</a>\r\n        </Div2>\r\n      </ReferralDiv>\r\n    ),\r\n  },\r\n  {\r\n    field: \"referral\",\r\n    headerName: \" \",\r\n    headerClassName: \"entryHeader\",\r\n    headerAlign: \"left\",\r\n    cellClassName: \"refferalHeader\",\r\n    selectable: false,\r\n    flex: 0.1,\r\n    minWidth: 100,\r\n    renderCell: (params) => (\r\n      <Div2>\r\n        <small>View referral</small>\r\n      </Div2>\r\n    ),\r\n  },\r\n];\r\nexport const Subscriptioncolumns = [\r\n  {\r\n    field: \"planName\",\r\n    headerName: \"Name of plan\",\r\n    headerClassName: \"planName\",\r\n    headerAlign: \"headerPlanName\",\r\n    flex: 0.1,\r\n    cellClassName: \"cellPlanName\",\r\n    type: \"number\",\r\n    minWidth: 60,\r\n    sortable: false,\r\n    checkboxSelection: false,\r\n  },\r\n  {\r\n    field: \"amount\",\r\n    headerName: \"Amount\",\r\n    headerClassName: \"headerAmount\",\r\n    headerAlign: \"center\",\r\n    flex: 0.086,\r\n    cellClassName: \"cellAmount\",\r\n    type: \"number\",\r\n    minWidth: 50,\r\n    sortable: false,\r\n    selectable: false,\r\n  },\r\n\r\n  {\r\n    field: \"Description\",\r\n    headerName: \"Description\",\r\n    headerClassName: \"description\",\r\n    sortable: false,\r\n    cellClassName: \"cellDescription\",\r\n    headerAlign: \"center\",\r\n    flex: 0.15,\r\n    minWidth: 200,\r\n    renderCell: (params) => (\r\n      <span\r\n        style={{\r\n          fontSize: \"1.4rem\",\r\n          whiteSpace: \"normal\",\r\n          wordWrap: \"break-word\",\r\n          lineHeight: \"2.1rem\",\r\n        }}\r\n      >\r\n        {params.getValue(params.id, \"description\") || \"\"}\r\n      </span>\r\n    ),\r\n  },\r\n  {\r\n    field: \"editPlan\",\r\n    headerName: \" \",\r\n    headerClassName: \"headerEditPlan\",\r\n    headerAlign: \"left\",\r\n    cellClassName: \"cellEditPlan\",\r\n    selectable: false,\r\n    flex: 0.1,\r\n    minWidth: 100,\r\n    renderCell: (params) => (\r\n      <SubscriptionDiv>\r\n        <Div>\r\n          <a>\r\n            {\" \"}\r\n            Edit plan\r\n            <svg\r\n              style={{ marginLeft: \".7rem\" }}\r\n              width=\"15\"\r\n              height=\"15\"\r\n              viewBox=\"0 0 15 15\"\r\n              fill=\"none\"\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n            >\r\n              <path\r\n                d=\"M10.586 1.58599C10.7705 1.39497 10.9912 1.24261 11.2352 1.13779C11.4792 1.03297 11.7416 0.977801 12.0072 0.975494C12.2728 0.973186 12.5361 1.02379 12.7819 1.12435C13.0277 1.22491 13.251 1.37342 13.4388 1.5612C13.6266 1.74899 13.7751 1.97229 13.8756 2.21809C13.9762 2.46388 14.0268 2.72724 14.0245 2.9928C14.0222 3.25836 13.967 3.5208 13.8622 3.7648C13.7574 4.00881 13.605 4.2295 13.414 4.41399L12.621 5.20699L9.793 2.37899L10.586 1.58599ZM8.379 3.79299L0 12.172L0 15H2.828L11.208 6.62099L8.378 3.79299H8.379Z\"\r\n                fill=\"#3EA584\"\r\n              />\r\n            </svg>\r\n          </a>\r\n        </Div>\r\n      </SubscriptionDiv>\r\n    ),\r\n  },\r\n  {\r\n    field: \"\",\r\n    headerName: \"\",\r\n    headerClassName: \"headerdeletePlan\",\r\n    headerAlign: \"left\",\r\n    cellClassName: \"cellDeletePlan\",\r\n    selectable: false,\r\n    flex: 0.1,\r\n    minWidth: 100,\r\n    renderCell: (params) => (\r\n      <SubscriptionDelete>\r\n        <Div2 style={{ display: \"flex\", alignItems: \"center\" }}>\r\n          <a>Delete plan </a>\r\n          <svg\r\n            style={{ marginLeft: \".4rem\" }}\r\n            width=\"20\"\r\n            height=\"20\"\r\n            viewBox=\"0 0 20 20\"\r\n            fill=\"none\"\r\n            xmlns=\"http://www.w3.org/2000/svg\"\r\n          >\r\n            <path\r\n              fillRule=\"evenodd\"\r\n              clipRule=\"evenodd\"\r\n              d=\"M9 2C8.81434 2.0001 8.63237 2.05188 8.47447 2.14955C8.31658 2.24722 8.18899 2.38692 8.106 2.553L7.382 4H4C3.73478 4 3.48043 4.10536 3.29289 4.29289C3.10536 4.48043 3 4.73478 3 5C3 5.26522 3.10536 5.51957 3.29289 5.70711C3.48043 5.89464 3.73478 6 4 6L4 16C4 16.5304 4.21071 17.0391 4.58579 17.4142C4.96086 17.7893 5.46957 18 6 18H14C14.5304 18 15.0391 17.7893 15.4142 17.4142C15.7893 17.0391 16 16.5304 16 16V6C16.2652 6 16.5196 5.89464 16.7071 5.70711C16.8946 5.51957 17 5.26522 17 5C17 4.73478 16.8946 4.48043 16.7071 4.29289C16.5196 4.10536 16.2652 4 16 4H12.618L11.894 2.553C11.811 2.38692 11.6834 2.24722 11.5255 2.14955C11.3676 2.05188 11.1857 2.0001 11 2H9ZM7 8C7 7.73478 7.10536 7.48043 7.29289 7.29289C7.48043 7.10536 7.73478 7 8 7C8.26522 7 8.51957 7.10536 8.70711 7.29289C8.89464 7.48043 9 7.73478 9 8V14C9 14.2652 8.89464 14.5196 8.70711 14.7071C8.51957 14.8946 8.26522 15 8 15C7.73478 15 7.48043 14.8946 7.29289 14.7071C7.10536 14.5196 7 14.2652 7 14L7 8ZM12 7C11.7348 7 11.4804 7.10536 11.2929 7.29289C11.1054 7.48043 11 7.73478 11 8V14C11 14.2652 11.1054 14.5196 11.2929 14.7071C11.4804 14.8946 11.7348 15 12 15C12.2652 15 12.5196 14.8946 12.7071 14.7071C12.8946 14.5196 13 14.2652 13 14V8C13 7.73478 12.8946 7.48043 12.7071 7.29289C12.5196 7.10536 12.2652 7 12 7Z\"\r\n              fill=\"#ED3237\"\r\n            />\r\n          </svg>\r\n        </Div2>\r\n      </SubscriptionDelete>\r\n    ),\r\n  },\r\n];\r\nexport const FinanceColumns = [\r\n  {\r\n    field: \"entryDate\",\r\n    headerName: \"Entry Date\",\r\n    headerClassName: \"financeEntryHeader\",\r\n    headerAlign: \"center\",\r\n    flex: 0.1,\r\n    cellClassName: \"entryDate\",\r\n    type: \"number\",\r\n    minWidth: 60,\r\n    sortable: false,\r\n  },\r\n  {\r\n    field: \"time\",\r\n    headerName: \"Time\",\r\n    headerClassName: \"referralTime\",\r\n    headerAlign: \"center\",\r\n    flex: 0.1,\r\n    cellClassName: \"referralTime\",\r\n    type: \"number\",\r\n    minWidth: 50,\r\n    sortable: false,\r\n  },\r\n  {\r\n    field: \"fullname\",\r\n    headerName: \"Patient's Name\",\r\n    headerClassName: \"headerPatientName\",\r\n    sortable: false,\r\n    cellClassName: \"PatientName\",\r\n    headerAlign: \"left\",\r\n    flex: 0.15,\r\n    type: \"string\",\r\n    minWidth: 150,\r\n    renderCell: (params) => (\r\n      <span style={{ display: \"flex\", alignItems: \"center\" }}>\r\n        <Avatar alt=\"Display avatar\" src={displayPhoto} style={{ marginRight: \"1rem\" }} />\r\n        {params.getValue(params.id, \"firstName\") || \"\"}\r\n        {params.getValue(params.id, \"lastName\") || \"\"}\r\n      </span>\r\n    ),\r\n  },\r\n  {\r\n    field: \"planName\",\r\n    headerName: \"Subscription plan\",\r\n    headerClassName: \"planName\",\r\n    headerAlign: \"headerPlanName\",\r\n    flex: 0.1,\r\n    cellClassName: \"cellPlanName\",\r\n    type: \"number\",\r\n    minWidth: 60,\r\n    sortable: false,\r\n    checkboxSelection: false,\r\n  },\r\n  {\r\n    field: \"amount\",\r\n    headerName: \"Amount\",\r\n    headerClassName: \"headerAmount\",\r\n    headerAlign: \"center\",\r\n    flex: 0.086,\r\n    cellClassName: \"cellAmount\",\r\n    type: \"string\",\r\n    minWidth: 50,\r\n    sortable: false,\r\n    selectable: false,\r\n  },\r\n]; */\r\n\r\nexport const rows = [\r\n  {\r\n    id: 1,\r\n    lastName: \"Snow\",\r\n    name: \"Heala\",\r\n    entryDate: \"July 17, 2021\",\r\n    firstName: \"Jon\",\r\n    category: \"HCP\",\r\n    email: \"sule@gmail.com\",\r\n    time: \"10:00AM\",\r\n    medical: 123445,\r\n    amount: \"₦ 10,000\",\r\n    bank: \"Kuda MFB\",\r\n    subject: \"Appreciation message to Heala  team\",\r\n    status: \"active\",\r\n    specialization: \"Dentistry\",\r\n    availableTime: \"10:00AM - 3:30PM\",\r\n    planName: \"Plan 1\",\r\n    roleName: \"role 1\",\r\n    description: \"This is the decription regarding this particular plan\",\r\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\r\n    data: [\"create\", \"read\", \"update\", \"delete\"],\r\n    type: \"Nurse\",\r\n    account: 2018785545,\r\n  },\r\n  {\r\n    id: 2,\r\n    lastName: \"Lannister\",\r\n    roleName: \"role 1\",\r\n    entryDate: \"July 17, 2021\",\r\n    firstName: \"Cersei\",\r\n    category: \"User\",\r\n    planName: \"Plan 1\",\r\n    amount: \"₦ 10,000\",\r\n    name: \"Heala\",\r\n    medical: 123445,\r\n    bank: \"Kuda MFB\",\r\n    status: \"active\",\r\n    subject: \"Appreciation message to Heala  team\",\r\n    email: \"sule@gmail.com\",\r\n    description: \"This is the decription regarding this particular plan\",\r\n    availableTime: \"10:00AM - 3:30PM\",\r\n    time: \"10:00AM\",\r\n    specialization: \"Dentistry\",\r\n    permission: [\r\n      \"permission 1\",\r\n      \"permission 2\",\r\n      \"permission3\",\r\n      \"permission4\",\r\n      \"permission5\",\r\n      \"permission6\",\r\n    ],\r\n    data: [\"create\", \"read\", \"update\", \"delete\"],\r\n    type: \"Nurse\",\r\n    account: 2018785545,\r\n  },\r\n  {\r\n    id: 3,\r\n    lastName: \"Lannister\",\r\n    account: 2018785545,\r\n    roleName: \"role 1\",\r\n    bank: \"Kuda MFB\",\r\n    entryDate: \"July 17, 2021\",\r\n    name: \"Heala\",\r\n    firstName: \"Jaime\",\r\n    planName: \"Plan 1\",\r\n    category: \"HCP\",\r\n    amount: \"₦ 10,000\",\r\n    status: \"inactive\",\r\n    medical: 123445,\r\n    email: \"sule@gmail.com\",\r\n    availableTime: \"10:00AM - 3:30PM\",\r\n    time: \"10:00AM\",\r\n    subject: \"Appreciation message to Heala  team\",\r\n    specialization: \"Dentistry\",\r\n    description: \"This is the decription regarding this particular plan\",\r\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\r\n    data: [\"create\", \"read\", \"update\", \"delete\"],\r\n    type: \"Nurse\",\r\n  },\r\n  {\r\n    id: 4,\r\n    lastName: \"Stark\",\r\n    entryDate: \"July 17, 2021\",\r\n    roleName: \"role 1\",\r\n    firstName: \"Arya\",\r\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\r\n    category: \"HCP\",\r\n    amount: \"₦ 10,000\",\r\n    email: \"sule@gmail.com\",\r\n    time: \"10:00AM\",\r\n    planName: \"Plan 1\",\r\n    bank: \"Kuda MFB\",\r\n    availableTime: \"10:00AM - 3:30PM\",\r\n    medical: 123445,\r\n    type: \"Doctor\",\r\n    subject: \"Appreciation message to Heala  team\",\r\n    status: \"active\",\r\n    specialization: \"Dentistry\",\r\n    description: \"This is the decription regarding this particular plan\",\r\n    data: [\"create\", \"read\", \"update\", \"delete\"],\r\n    account: 2018785545,\r\n  },\r\n  {\r\n    id: 5,\r\n    lastName: \"Targaryen\",\r\n    entryDate: \"July 17, 2021\",\r\n    firstName: \"Daenerys\",\r\n    category: \"HSP\",\r\n    medical: 123445,\r\n    status: \"active\",\r\n    bank: \"Kuda MFB\",\r\n    amount: \"₦ 10,000\",\r\n    roleName: \"role 1\",\r\n    account: 2018785545,\r\n    planName: \"Plan 1\",\r\n    email: \"sule@gmail.com\",\r\n    subject: \"Appreciation message to Heala  team\",\r\n    time: \"10:00AM\",\r\n    specialization: \"Dentistry\",\r\n    availableTime: \"10:00AM - 3:30PM\",\r\n    description: \"This is the decription regarding this particular plan\",\r\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\r\n    data: [\"create\", \"read\", \"update\", \"delete\"],\r\n    type: \"Doctor\",\r\n  },\r\n  {\r\n    id: 6,\r\n    lastName: \"Melisandre\",\r\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\r\n    entryDate: \"July 17, 2021\",\r\n    roleName: \"role 1\",\r\n    data: [\"create\", \"read\", \"update\", \"delete\"],\r\n    firstName: null,\r\n    status: \"active\",\r\n    medical: 123445,\r\n    account: 2018785545,\r\n    bank: \"Kuda MFB\",\r\n    subject: \"Appreciation message to Heala  team\",\r\n    category: \"User\",\r\n    amount: \"₦ 10,000\",\r\n    email: \"sule@gmail.com\",\r\n    time: \"10:00AM\",\r\n    planName: \"Plan 1\",\r\n    specialization: \"Dentistry\",\r\n    description: \"This is the decription regarding this particular plan\",\r\n    type: \"Nurse\",\r\n  },\r\n  {\r\n    id: 7,\r\n    lastName: \"Clifford\",\r\n    entryDate: \"July 17, 2021\",\r\n    medical: 123445,\r\n    firstName: \"Ferrara\",\r\n    roleName: \"role 1\",\r\n    subject: \"Appreciation message to Heala  team\",\r\n    category: \"HCP\",\r\n    status: \"active\",\r\n    planName: \"Plan 1\",\r\n    amount: \"₦ 10,000\",\r\n    bank: \"Kuda MFB\",\r\n    email: \"sule@gmail.com\",\r\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\r\n    data: [\"create\", \"read\", \"update\", \"delete\"],\r\n    time: \"10:00AM\",\r\n    specialization: \"Dentistry\",\r\n    availableTime: \"10:00AM - 3:30PM\",\r\n    description: \"This is the decription regarding this particular plan\",\r\n    type: \"Nurse\",\r\n    account: 2018785545,\r\n  },\r\n  {\r\n    id: 9,\r\n    lastName: \"Roxie\",\r\n    entryDate: \"July 17, 2021\",\r\n    roleName: \"role 1\",\r\n    firstName: \"Harvey\",\r\n    category: \"HCP\",\r\n    data: [\"create\", \"read\", \"update\", \"delete\"],\r\n    medical: 123445,\r\n    subject: \"Appreciation message to Heala  team\",\r\n    status: \"active\",\r\n    planName: \"Plan 1\",\r\n    bank: \"Kuda MFB\",\r\n    amount: \"₦ 10,000\",\r\n    email: \"sule@gmail.com\",\r\n    time: \"10:00AM\",\r\n    specialization: \"Dentistry\",\r\n    permission: [\"permission 1\", \"permission 2\", \"permission4\", \"permission3\"],\r\n    availableTime: \"10:00AM - 3:30PM\",\r\n    description: \"This is the decription regarding this particular plan\",\r\n    type: \"Nurse\",\r\n    account: 2018785545,\r\n  },\r\n];\r\nconst ReferralDiv = Styled.div`\r\n& div{\r\n  width: 6.2rem !important;\r\n  padding:0;\r\n  margin-right:0 !important;\r\n  padding-left: 1rem !important;\r\n  background:#ECF6F3;\r\n  a{\r\n  width: 4.2rem!important;\r\n  font-size:1.4rem;\r\n  color:#49AA8B;\r\n  line-Height:2.1rem;\r\n  height:2.2rem;\r\n  }\r\n}`;\r\n\r\nconst SubscriptionDiv = Styled.div`\r\n& div{\r\n  width: 10.1rem !important;\r\n  padding: .8rem 1rem !important;\r\n  margin-right:0 !important;\r\n  padding-left: 1rem !important;\r\n  border-radius: 2rem !important;\r\n  background: #ECF6F3;\r\n  height:3.8rem;\r\n  \r\n  a{\r\n    font-weight:500;\r\n  font-size:1.4rem;\r\n  color: #3EA584;\r\n  line-Height:2.1rem;\r\n  // height:2.2rem;\r\n  }\r\n}\r\n`;\r\nconst SubscriptionDelete = Styled.div`\r\n& div{\r\n  width: 11.8rem !important;\r\n  padding: .8rem 1rem !important;\r\n  border-color:#FEF8F7;\r\n  border-radius: 2rem !important;\r\n  background: #FEF8F7;\r\n  height:3.8rem;\r\n\r\n\r\n  \r\n  a{\r\n  font-weight:500;\r\n  font-size:1.4rem;\r\n  color: #ED3237;\r\n  height:2.2rem;\r\n  font-family: Circular Std;\r\n  font-style: normal;\r\n  letter-spacing: 0px;\r\n  text-align: center;\r\n  width:10.1rem;\r\n  margin-right:0\r\n  }\r\n}\r\n`;\r\n\r\nconst Div2 = Styled.div`\r\nwidth: 11rem;\r\nheight: 3rem;\r\nmargin: auto 0;\r\nborder-radius: 2rem;\r\nborder: 1px solid #F2F2F2;\r\ndisplay: grid;\r\nplace-content: center;\r\ncolor:#757886;\r\n   & a{\r\n    text-decoration:none;\r\n    font-size: 1.4rem;\r\n    width:6.6rem;\r\n    height:2.2rem\r\n    margin:0;\r\n    line-Height:2.1rem;\r\n    color:inherit;\r\n    margin-right:1.25rem\r\n   } \r\n   &:hover{\r\n     cursor:pointer\r\n   }\r\n`;\r\nconst Div = Styled.div`\r\nwidth: 17.9rem;\r\nheight: 3rem;\r\nmargin: auto 0;\r\nborder-radius: 2rem;\r\nborder: 1px solid #F2F2F2;\r\ndisplay: grid;\r\nplace-content: center;\r\n   & a{\r\n    padding: .4rem 1rem;\r\n    \r\n   } \r\n   &:hover{\r\n     cursor:pointer\r\n   }\r\n`;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\DoctorVerificationProfile.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Tables\\PlansTable.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\hooks\\useCopy.js",["1610"],"import React from \"react\";\r\nimport t from \"prop-types\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { Typography } from \"@mui/material\";\r\n\r\nexport const useCopy = () => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const copyToClipBoard = (text, name) => {\r\n    try {\r\n      navigator.clipboard.writeText(text);\r\n      enqueueSnackbar(\r\n        <Typography\r\n          style={{\r\n            fontSize: \"1.2rem\",\r\n            color: \"ffffff\",\r\n            fontWeight: \"bold\",\r\n            cursor: \"pointer\",\r\n          }}\r\n        >{`${name ? name : \"Text\"} copied!!!`}</Typography>,\r\n        {\r\n          variant: \"success\",\r\n          preventDuplicate: true,\r\n          anchorOrigin: {\r\n            horizontal: \"right\",\r\n            vertical: \"top\",\r\n          },\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.log(error);\r\n      enqueueSnackbar(\r\n        <Typography\r\n          style={{\r\n            fontSize: \"1.2rem\",\r\n            color: \"ffffff\",\r\n            fontWeight: \"bold\",\r\n            cursor: \"pointer\",\r\n          }}\r\n        >{`Couldn't copy ${name ? name : \"Text\"}!!!`}</Typography>,\r\n        {\r\n          variant: \"error\",\r\n          preventDuplicate: true,\r\n          anchorOrigin: {\r\n            horizontal: \"right\",\r\n            vertical: \"top\",\r\n          },\r\n        }\r\n      );\r\n    }\r\n  };\r\n\r\n  return {\r\n    copyToClipBoard,\r\n  };\r\n};\r\n\r\nuseCopy.PropTypes = {\r\n  text: t.string,\r\n  name: t.string,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\EditManagement.js",["1611","1612","1613"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useHistory, useParams } from \"react-router-dom\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { EnhancedTable, NoData } from \"components/layouts\";\r\nimport { editManagement } from \"components/Utilities/tableHeaders\";\r\nimport {\r\n  PreviousButton,\r\n  CustomButton,\r\n  Loader,\r\n  Modals,\r\n} from \"components/Utilities\";\r\nimport { editRole } from \"components/graphQL/Mutation\";\r\nimport { getRoles, getRole } from \"components/graphQL/useQuery\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { TableRow, TableCell, Grid, Typography } from \"@mui/material\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { arrangeItems } from \"../../helpers/func\";\r\nimport { handleError, showSuccessMsg } from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  filterBtnGrid: {\r\n    \"&.MuiGrid-root\": {\r\n      marginRight: \"3rem\",\r\n    },\r\n  },\r\n  chip: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.25rem\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n      background: theme.palette.common.white,\r\n      color: theme.palette.common.green,\r\n      \"& .MuiChip-deleteIcon\": {\r\n        color: \"inherit\",\r\n        fontSize: \"inherit\",\r\n      },\r\n    },\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"0.5rem\",\r\n      maxWidth: \"7rem\",\r\n      fontSize: \".85rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"0.85rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".2rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n  btn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n      gap: \"4rem\",\r\n    },\r\n  },\r\n}));\r\nconst EditManagement = () => {\r\n  let history = useHistory();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const { editId } = useParams();\r\n  const [last, setLast] = useState([]);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const handleDialogOpen = () => setIsOpen(true);\r\n  const [role, setRole] = useState([]);\r\n  const [state, setState] = useState({\r\n    description: \"\",\r\n    name: \"\",\r\n  });\r\n  const { data, loading, error } = useQuery(getRole, {\r\n    variables: { id: editId },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      const { name, description, permissions } = data.getRole;\r\n      setState({\r\n        name,\r\n        description,\r\n      });\r\n\r\n      setLast(permissions);\r\n      setRole(permissions === null ? [] : arrangeItems(permissions)); //h);  arrangeItems(\r\n    }\r\n  }, [data]);\r\n  const handleDialogClose = () => setIsOpen(false);\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    value: \"\",\r\n  };\r\n\r\n  const onSubmit1 = (values, onSubmitProps) => {\r\n    const { name, value } = values;\r\n\r\n    const z = role.filter((i) => i.name === name);\r\n    const index = role.findIndex((object) => object.name === z[0].name);\r\n    const j = role[index];\r\n    j.value = [value, ...j.value];\r\n\r\n    setRole(role);\r\n    setLast([`${name}:${value}`, ...last]);\r\n    onSubmitProps.resetForm();\r\n  };\r\n\r\n  const [editRoles] = useMutation(editRole, {\r\n    refetchQueries: [{ query: getRoles }],\r\n  });\r\n  const onSubmit = async (values) => {\r\n    try {\r\n      const { name, description, permissions } = values;\r\n      await editRoles({\r\n        variables: {\r\n          id: editId,\r\n          name,\r\n          description,\r\n          permissions,\r\n        },\r\n      });\r\n      showSuccessMsg(\r\n        enqueueSnackbar,\r\n        Typography,\r\n        \"Premissions updated successfully.\"\r\n      );\r\n      history.push(\"/settings/management\");\r\n    } catch (error) {\r\n      handleError(error, enqueueSnackbar);\r\n    }\r\n  };\r\n\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { name, description } = state;\r\n\r\n  const initialValues = {\r\n    permissions: last,\r\n    name,\r\n    description,\r\n  };\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <>\r\n      <Grid container direction=\"column\" rowSpacing={2}>\r\n        <Grid item>\r\n          <PreviousButton path=\"/settings/management\" />\r\n        </Grid>\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={onSubmit}\r\n          // validationSchema={validationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n          enableReinitialize\r\n        >\r\n          {({ isSubmitting }) => {\r\n            return (\r\n              <>\r\n                <Form>\r\n                  <Grid\r\n                    item\r\n                    container\r\n                    flexWrap=\"nowrap\"\r\n                    alignItems=\"center\"\r\n                    style={{ paddingBottom: \"3rem\" }}\r\n                  >\r\n                    <Grid item container alignItems=\"center\">\r\n                      <Typography\r\n                        noWrap\r\n                        variant=\"h1\"\r\n                        component=\"div\"\r\n                        color=\"#2D2F39\"\r\n                      >\r\n                        User Permissions\r\n                      </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid\r\n                      item\r\n                      container\r\n                      gap={2}\r\n                      justifyContent=\"end\"\r\n                      alignItems=\"center\"\r\n                      justifySelf=\"flex-end\"\r\n                    >\r\n                      <Grid item>\r\n                        <CustomButton\r\n                          endIcon={<AddIcon />}\r\n                          title=\"Add New Permission\"\r\n                          type={buttonType}\r\n                          onClick={handleDialogOpen}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <CustomButton\r\n                          title=\"Save Permission\"\r\n                          type={buttonType}\r\n                          isSubmitting={isSubmitting}\r\n                          maxWidth=\"100%\"\r\n                          className={classes.btn}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid item container>\r\n                    <EnhancedTable\r\n                      headCells={editManagement}\r\n                      rows={role}\r\n                      type=\"editRole\"\r\n                      hasCheckbox={false}\r\n                    >\r\n                      {role.map((row, index) => {\r\n                        const isItemSelected = isSelected(index, selectedRows);\r\n                        const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            role=\"checkbox\"\r\n                            aria-checked={isItemSelected}\r\n                            tabIndex={-1}\r\n                            key={index}\r\n                            selected={isItemSelected}\r\n                          >\r\n                            <TableCell\r\n                              role=\"checkbox\"\r\n                              sx={{ padding: \"0 5rem\" }}\r\n                            ></TableCell>\r\n                            <TableCell\r\n                              id={labelId}\r\n                              scope=\"row\"\r\n                              align=\"left\"\r\n                              className={classes.tableCell}\r\n                              style={{ color: theme.palette.common.black }}\r\n                            >\r\n                              {row.name}\r\n                            </TableCell>\r\n                            <TableCell\r\n                              id={labelId}\r\n                              scope=\"row\"\r\n                              align=\"left\"\r\n                              style={{\r\n                                color: theme.palette.common.black,\r\n                                display: \"flex\",\r\n                              }}\r\n                            >\r\n                              {[\r\n                                row.name === \"account\" ? \"count\" : \"create\",\r\n                                \"get-all\",\r\n                                \"get\",\r\n                                \"delete\",\r\n                                \"update\",\r\n                              ].map((type, index) => {\r\n                                const value = row.value.includes(type)\r\n                                  ? `${row.name}:${type}`\r\n                                  : \"\";\r\n                                return (\r\n                                  <FormikControl\r\n                                    control=\"check\"\r\n                                    name=\"permissions\"\r\n                                    label={type}\r\n                                    key={index}\r\n                                    value={value}\r\n                                  />\r\n                                );\r\n                              })}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      })}\r\n                    </EnhancedTable>\r\n                  </Grid>\r\n                </Form>\r\n              </>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Grid>\r\n      <Modals\r\n        isOpen={isOpen}\r\n        title=\"Add New Role\"\r\n        rowSpacing={5}\r\n        handleClose={handleDialogClose}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container gap={4} direction=\"column\">\r\n                  <Grid item container spacing={2}>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      name=\"name\"\r\n                      label=\"Name\"\r\n                      placeholder=\"Enter Plan Name\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item container spacing={2}>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      name=\"value\"\r\n                      label=\"Value\"\r\n                      placeholder=\"Enter Value\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item container xs={12} marginTop={20}>\r\n                  <CustomButton\r\n                    title=\"Add New Role\"\r\n                    width=\"100%\"\r\n                    type={buttonType}\r\n                  />\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditManagement;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ViewDoctorVerification.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Dashboard.js",["1614","1615","1616"],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\CreateMessage.js",["1617"],"import React, { useEffect, useState, useCallback } from \"react\";\r\nimport { CustomButton, PreviousButton } from \"components/Utilities\";\r\nimport { Divider, Grid, Typography } from \"@mui/material\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { CREATE_MESSAGE } from \"components/graphQL/Mutation\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  getMessage,\r\n  getProfileByDociId,\r\n  getDoctorByDociId,\r\n} from \"components/graphQL/useQuery\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridWrapper: {\r\n    \"&.MuiGrid-item\": {\r\n      borderRadius: \"1rem\",\r\n      background: \"#fff\",\r\n      padding: \"2rem 4rem\",\r\n      maxWidth: \"60rem !important\",\r\n      boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.1)\",\r\n    },\r\n  },\r\n  inputGrid: {\r\n    flex: 1,\r\n  },\r\n  heading: {\r\n    \"&.MuiTypography-root\": {\r\n      color: theme.palette.common.grey,\r\n      //   fontSize: \"1rem\"\r\n    },\r\n  },\r\n  formInput: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    fontSize: \"1.5rem\",\r\n    padding: \".5rem 1rem\",\r\n    border: \"none\",\r\n    background: \"transparent\",\r\n    color: theme.palette.common.grey,\r\n\r\n    \"&:focus\": {\r\n      outline: \"none\",\r\n    },\r\n  },\r\n  textArea: {\r\n    border: \"1px solid rgba(0, 0, 0, 0.03)\",\r\n    resize: \"none\",\r\n    borderRadius: \"0.5rem\",\r\n  },\r\n  divider: {\r\n    \"&.MuiDivider-root\": {\r\n      borderColor: \"rgba(0, 0, 0, 0.03)\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst CreateMessage = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  let history = useHistory();\r\n  const [createNewMessage] = useMutation(CREATE_MESSAGE, {\r\n    refetchQueries: [{ query: getMessage }],\r\n  });\r\n  const [recipientValue, setRecipientvalue] = useState(\"\");\r\n  const { data, refetch, error } = useQuery(getProfileByDociId, {\r\n    fetchPolicy: \"network-only\",\r\n    nextFetchPolicy: \"network-only\",\r\n  });\r\n  const { data: doctorProfile, refetch: refetch2 } = useQuery(\r\n    getDoctorByDociId,\r\n    {\r\n      fetchPolicy: \"network-only\",\r\n      nextFetchPolicy: \"network-only\",\r\n    }\r\n  );\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    subject: Yup.string(\"Enter your subject\")\r\n      .trim()\r\n      .required(\"Subject is required\"),\r\n    textarea: Yup.string(\"Enter your message\")\r\n      .trim()\r\n      .required(\"Message is required\"),\r\n    recipient: Yup.string(\"Enter your recipient\")\r\n      .trim()\r\n      .required(\"recipients is required\"),\r\n  });\r\n\r\n  const [recipient, setRecipient] = useState(\"\");\r\n  const { firstName, lastName, _id } = recipient.length > 0 && recipient[0];\r\n\r\n  const onSubmit = async (values, onSubmitProps) => {\r\n    const id = localStorage.getItem(\"user_id\");\r\n    const { subject, textarea, recipient } = values;\r\n\r\n    try {\r\n      await createNewMessage({\r\n        variables: {\r\n          sender: id,\r\n          recipient: _id ? _id : recipient,\r\n          subject,\r\n          body: textarea,\r\n        },\r\n      });\r\n\r\n      history.push(\"/messages\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    onSubmitProps.resetForm();\r\n  };\r\n  const onChange = useCallback(\r\n    async (e) => {\r\n      setRecipientvalue(e);\r\n      await refetch({\r\n        dociId: `HEALA-${e.toUpperCase()}`,\r\n      });\r\n      if ((data && data.profiles.data.length < 1) || error) {\r\n        await refetch2({ dociId: `HEALA-${e.toUpperCase()}` });\r\n      }\r\n    },\r\n    [refetch, refetch2, data, error]\r\n  );\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (data && data.profiles.data.length > 0) {\r\n        setRecipient(data.profiles.data);\r\n      }\r\n    })();\r\n  }, [data, recipientValue, onChange]);\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (doctorProfile && doctorProfile.doctorProfiles.profile.length > 0) {\r\n        setRecipient(doctorProfile.doctorProfiles.profile);\r\n      }\r\n    })();\r\n  }, [doctorProfile, onChange, recipientValue]);\r\n  const initialValues = {\r\n    subject: \"\",\r\n    recipient: recipient ? `${firstName} ${lastName} ` : \"\",\r\n    textarea: \"\",\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n      validateOnBlur={false}\r\n      enableReinitialize\r\n    >\r\n      {({ isValid, isSubmitting, dirty, values }) => {\r\n        return (\r\n          <Form onChange={setRecipientvalue(values.recipient)}>\r\n            {/* /*setRecipientvalue(values.recipient)*/}\r\n            <Grid container direction=\"column\">\r\n              <Grid item style={{ marginBottom: \"3rem\" }}>\r\n                <PreviousButton path={\"/messages\"} />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" alignItems=\"center\">\r\n                <Grid item>\r\n                  <Typography variant=\"h4\" style={{ marginBottom: \"3rem\" }}>\r\n                    Create New Message\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  container\r\n                  direction=\"column\"\r\n                  className={classes.gridWrapper}\r\n                >\r\n                  <Grid item style={{ marginBottom: \"3rem\" }}>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Recipient:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item className={classes.inputGrid}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          id=\"message\"\r\n                          onBlur={() => onChange(values.recipient)}\r\n                          name=\"recipient\"\r\n                          variant=\"standard\"\r\n                          className={classes.formInput}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid item style={{ marginBottom: \"3rem\" }}>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Subject:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item className={classes.inputGrid}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          id=\"subject\"\r\n                          name=\"subject\"\r\n                          variant=\"standard\"\r\n                          className={classes.formInput}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container direction=\"column\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Message:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item style={{ height: \"15rem\" }}>\r\n                        <FormikControl\r\n                          control=\"textarea\"\r\n                          id=\"textarea\"\r\n                          name=\"textarea\"\r\n                          variant=\"standard\"\r\n                          fLabel={true}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    {/* <Divider className={classes.divider} /> */}\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    style={{ alignSelf: \"flex-end\", marginTop: \"2rem\" }}\r\n                  >\r\n                    <CustomButton\r\n                      title=\"Send Message\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                      // endIcon={<ArrowForwardIosIcon style={{ fontSize: \"1.5rem\" }} />}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n\r\n  // );\r\n};\r\n\r\nexport default CreateMessage;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Consultations.js",["1618"],"import React, { useEffect, useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { getConsultations } from \"components/graphQL/useQuery\";\r\nimport { Grid, TableRow, TableCell, Checkbox } from \"@mui/material\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport { consultationsHeadCells4 } from \"components/Utilities/tableHeaders\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      color: \"rgb(0 0 0)\",\r\n      fontWeight: 400,\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"12rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst Consultations = () => {\r\n  const history = useHistory();\r\n  const [pageInfo, setPageInfo] = useState({});\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { patientConsultation } = useActions();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const [consultations, setConsultations] = useState([]);\r\n  const { setSelectedRows } = useActions();\r\n  const { patientId } = useParams();\r\n\r\n  const [fetchConsultations, { loading, data, error }] =\r\n    useLazyQuery(getConsultations);\r\n\r\n  useEffect(() => {\r\n    fetchConsultations({\r\n      variables: {\r\n        id: patientId,\r\n        orderBy: \"-createdAt\",\r\n      },\r\n    });\r\n  }, [fetchConsultations, patientId]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setConsultations(data.getConsultations.data);\r\n      patientConsultation(data);\r\n      setPageInfo(data.getConsultations.pageInfo);\r\n    }\r\n  }, [data, consultations, patientConsultation]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error.message} />;\r\n\r\n  return (\r\n    <Grid container gap={2} flexWrap=\"nowrap\" direction=\"column\" height=\"100%\">\r\n      <Grid\r\n        item\r\n        container\r\n        flexWrap=\"nowrap\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        sx={{ margin: \"1rem 0rem\" }}\r\n      ></Grid>\r\n      <TableLayout>\r\n        {consultations.length > 0 ? (\r\n          <Grid item container direction=\"column\" height=\"100%\">\r\n            <EnhancedTable\r\n              headCells={consultationsHeadCells4}\r\n              rows={consultations}\r\n              paginationLabel=\"Patients per page\"\r\n              hasCheckbox={true}\r\n              sx={{ cursor: \"pointer\" }}\r\n              changeLimit={async (e) => {\r\n                await changeTableLimit(fetchConsultations, {\r\n                  first: e,\r\n                  id: patientId,\r\n                });\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                await handlePageChange(fetchConsultations, page, pageInfo, {\r\n                  id: patientId,\r\n                });\r\n              }}\r\n            >\r\n              {consultations.map((row, index) => {\r\n                const { doctorData } = row;\r\n                const isItemSelected = isSelected(row._id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={row._id}\r\n                    selected={isItemSelected}\r\n                    sx={{ cursor: \"pointer\" }}\r\n                    onClick={(e) => {\r\n                      e.stopPropagation();\r\n                      history.push(\r\n                        `/patients/${patientId}/consultations/case-notes/${row._id}`\r\n                      );\r\n                    }}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(\r\n                            row._id,\r\n                            selectedRows,\r\n                            setSelectedRows\r\n                          )\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      {dateMoment(row.createdAt)}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ maxWidth: \"25rem\" }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                        }}\r\n                      >\r\n                        <span style={{ fontSize: \"1.25rem\" }}>\r\n                          {doctorData.firstName\r\n                            ? `${doctorData.firstName} ${doctorData.lastName}`\r\n                            : \"No Doctor\"}\r\n                        </span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Grid container gap={1}>\r\n                        {row.symptoms\r\n                          ? row.symptoms.map((symptom, index) => {\r\n                              const isLast = index === row.symptoms.length - 1;\r\n                              return (\r\n                                <p key={symptom.name}>\r\n                                  {isLast\r\n                                    ? `${symptom.name}.`\r\n                                    : `${symptom.name},`}\r\n                                </p>\r\n                              );\r\n                            })\r\n                          : \"No Value\"}\r\n                      </Grid>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        width: \"4rem\",\r\n                      }}\r\n                    >\r\n                      {row.contactMedium ? row.contactMedium : \"No Value\"}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                      }}\r\n                    >\r\n                      {row.type ? row.type : \"No Value\"}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                      }}\r\n                    >\r\n                      {row.status ? row.status : \"No Value\"}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={consultationsHeadCells4}\r\n            paginationLabel=\"Patients per page\"\r\n          />\r\n        )}\r\n      </TableLayout>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Consultations;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Appointments.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\UserTypeModal.js",["1619"],"import React, { useEffect } from \"react\";\r\nimport CustomButton from \"components/Utilities/CustomButton\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { Grid } from \"@mui/material\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { getUserTypes, getUserType } from \"components/graphQL/useQuery\";\r\nimport { createUserType, editUserType } from \"components/graphQL/Mutation\";\r\nimport * as Yup from \"yup\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\nexport const UserTypeModal = ({\r\n  handleDialogClose,\r\n  type,\r\n  editId,\r\n  singleData,\r\n  setSingleData,\r\n  initialValues,\r\n}) => {\r\n  const theme = useTheme();\r\n\r\n  const [createType] = useMutation(createUserType, {\r\n    refetchQueries: [{ query: getUserTypes }],\r\n  });\r\n  const [editType] = useMutation(editUserType, {\r\n    refetchQueries: [{ query: getUserTypes }],\r\n  });\r\n\r\n  const single = useQuery(getUserType, {\r\n    variables: {\r\n      id: editId,\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (single.data) {\r\n      setSingleData({\r\n        name: single.data.getUserType.name,\r\n        image: single.data.getUserType.icon,\r\n        id: single.data.getUserType._id,\r\n        description: single.data.getUserType.description,\r\n      });\r\n    }\r\n  }, [single.data, setSingleData]);\r\n  //   const [updatePlan] = useMutation(UPDATE_PLAN);\r\n\r\n  //   const single = useQuery(getSinglePlan, {\r\n  //     variables: {\r\n  //       id: editId,\r\n  //     },\r\n  //   });\r\n  const validationSchema = Yup.object({\r\n    name: Yup.string(\"Enter your Name\").trim().required(\"Name is required\"),\r\n    image: Yup.string(\"Upload a single Image\").required(\"Image is required\"),\r\n  });\r\n\r\n  const onSubmit = async (values, onSubmitProps) => {\r\n    const { name, image } = values;\r\n    if (type == \"add\") {\r\n      try {\r\n        await createType({ variables: { name, icon: image } });\r\n      } catch (err) {\r\n        console.log(err);\r\n      }\r\n    }\r\n    if (type === \"edit\") {\r\n      const { description, name, image, id } = values;\r\n      await editType({\r\n        variables: {\r\n          id,\r\n          name,\r\n          description,\r\n          icon: image,\r\n        },\r\n      });\r\n    }\r\n\r\n    onSubmitProps.resetForm();\r\n    handleDialogClose();\r\n  };\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n  return (\r\n    <Formik\r\n      initialValues={type === \"edit\" ? singleData : initialValues}\r\n      enableReinitialize\r\n      onSubmit={onSubmit}\r\n      validateOnBlur={false}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n    >\r\n      {({ isSubmitting, dirty, isValid, setFieldValue }) => {\r\n        return (\r\n          <Form style={{ marginTop: \"3rem\" }}>\r\n            <Grid item container direction=\"column\" gap={1}>\r\n              <Grid item container rowSpacing={3}>\r\n                <Grid item container>\r\n                  <FormikControl\r\n                    control=\"textarea\"\r\n                    name=\"description\"\r\n                    label=\"Description\"\r\n                    placeholder=\"Description...\"\r\n                  />\r\n                </Grid>\r\n                <Grid item md display=\"flex\" alignItems=\"center\">\r\n                  <Grid item container md>\r\n                    <FormikControl\r\n                      control=\"file\"\r\n                      name=\"image\"\r\n                      label=\"Upload Your Logo\"\r\n                      setFieldValue={setFieldValue}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n\r\n                <Grid item xs={12}>\r\n                  <CustomButton\r\n                    title={type === \"edit\" ? \"Save UserTypes\" : \"Add UserTypes\"}\r\n                    width=\"100%\"\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                    type={buttonType}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nUserTypeModal.propTypes = {\r\n  handleDialogClose: PropTypes.func,\r\n  setAlert: PropTypes.func,\r\n  editId: PropTypes.string,\r\n  type: PropTypes.string,\r\n  edit: PropTypes.bool,\r\n  initialValues: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\r\n  validationSchema: PropTypes.object,\r\n  singleData: PropTypes.object,\r\n  setSingleData: PropTypes.func,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\CaseNotes.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Administrator.js",["1620"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport {\r\n  Loader,\r\n  /* Button, */\r\n  Modals,\r\n  CustomButton,\r\n} from \"components/Utilities\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Grid, Checkbox, TableRow, TableCell } from \"@mui/material\";\r\nimport { signup } from \"components/graphQL/Mutation\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { adminHeader } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport { findAdmin } from \"components/graphQL/useQuery\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport { changeTableLimit } from \"helpers/filterHelperFunctions\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\n//\r\nconst useStyles = makeStyles((theme) => ({\r\n  FormLabel: {\r\n    fontSize: \"1.6rem\",\r\n    color: theme.palette.common.dark,\r\n  },\r\n  btn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"10rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n  redBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightRed,\r\n      color: theme.palette.common.red,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.error.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n  greenBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.success.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      color: \"rgb(0 0 0)\",\r\n      fontWeight: 400,\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n  \"&.MuiButton-root\": {\r\n    ...theme.typography.btn,\r\n    background: theme.palette.common.black,\r\n    width: \"100%\",\r\n  },\r\n\r\n  checkboxContainer: {\r\n    \"&.MuiBox-root\": {\r\n      padding: \"2rem 0\",\r\n      border: \"1px solid #E0E0E0\",\r\n      borderRadius: \".4rem\",\r\n      \"&:active\": {\r\n        border: \"2px solid black\",\r\n      },\r\n    },\r\n  },\r\n  checkbox: {\r\n    \"& .MuiSvgIcon-root\": {\r\n      fontSize: 28,\r\n    },\r\n    \"&.Mui-checked\": {\r\n      color: \"green !important\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Administrator = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [addAdminUser] = useMutation(signup);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [fetchAdmins, { loading, data, error, refetch }] =\r\n    useLazyQuery(findAdmin);\r\n\r\n  useEffect(() => {\r\n    fetchAdmins({\r\n      variables: {\r\n        first: pageInfo?.limit,\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchAdmins, pageInfo]);\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n  /*   const onChange = async (e) => {\r\n    setSearchMail(e);\r\n    if (e == \"\") {\r\n      refetch();\r\n    } else refetch({ role: e });\r\n  }; */\r\n  const specializations = [\r\n    { key: \"Doctor\", value: \"doctor\" },\r\n    { key: \"Super-admin\", value: \"super-admin\" },\r\n  ];\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n\r\n  const initialValues = {\r\n    email: \"\",\r\n    role: \"\",\r\n  };\r\n  const [admins, setAdmins] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setAdmins(data.accounts.data);\r\n      setPageInfo(data.accounts.pageInfo);\r\n    }\r\n  }, [data]);\r\n\r\n  const validationSchema = Yup.object({\r\n    email: Yup.string().email(\"Enter a valid email\").trim(),\r\n    role: Yup.string(\"Select your role\"),\r\n  });\r\n  const onSubmit = async (values) => {\r\n    const { email, role } = values;\r\n    await refetch({\r\n      email,\r\n      role,\r\n    });\r\n    handleDialogClose();\r\n  };\r\n  const initialValues1 = {\r\n    email: \"\",\r\n    password: \"\",\r\n  };\r\n\r\n  const validationSchema1 = Yup.object({\r\n    password: Yup.string()\r\n      .required(\"password is required\")\r\n      .min(8, \"Password is too short - should be 8 chars minimum.\"),\r\n    email: Yup.string()\r\n      .email(\"Enter a valid email\")\r\n      .required(\"Email is required\"),\r\n  });\r\n  const onSubmit1 = async (values, onSubmitProps) => {\r\n    const { email, password } = values;\r\n    try {\r\n      await addAdminUser({\r\n        variables: {\r\n          email,\r\n          password,\r\n          role: \"admin\",\r\n          authType: \"normal\",\r\n        },\r\n        refetchQueries: [{ query: findAdmin }],\r\n      });\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n    handleAdminClose();\r\n    onSubmitProps.resetForm();\r\n  };\r\n\r\n  /*   const [searchMail, setSearchMail] = useState(\"\"); */\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [isAdmin, setIsAdmin] = useState(false);\r\n  const handleAdminClose = () => setIsAdmin(false);\r\n  /*   const handleDialogOpen = () => setIsOpen(true); */\r\n  const handleAdminOpen = () => setIsAdmin(true);\r\n  const handleDialogClose = () => setIsOpen(false);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        height=\"100%\"\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          flex={{ md: 1, sm: 1, xs: 1 }}\r\n          justifyContent=\"space-between\"\r\n        >\r\n          <Grid\r\n            item\r\n            container\r\n            flex={{ md: 1, sm: 1, xs: 1 }}\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Grid item></Grid>\r\n            <Grid item>\r\n              <CustomButton\r\n                endIcon={<AddIcon />}\r\n                title=\"Add Admin\"\r\n                type={buttonType}\r\n                onClick={handleAdminOpen}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <TableLayout>\r\n          {admins.length > 0 ? (\r\n            <Grid item container height=\"100%\" direction=\"column\">\r\n              <EnhancedTable\r\n                headCells={adminHeader}\r\n                rows={admins}\r\n                paginationLabel=\"admin per page\"\r\n                hasCheckbox={true}\r\n                changeLimit={changeTableLimit}\r\n                fetchData={fetchAdmins}\r\n                dataPageInfo={pageInfo}\r\n              >\r\n                {admins.map((row, index) => {\r\n                  const { _id, email, role } = row;\r\n                  const isItemSelected = isSelected(_id, selectedRows);\r\n\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={_id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        {email}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.black }}\r\n                      >\r\n                        {role}\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={adminHeader}\r\n              paginationLabel=\"Admin  per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n      </Grid>\r\n      <Modals\r\n        isOpen={isOpen}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        handleClose={handleDialogClose}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={onSubmit}\r\n          validateOnBlur={false}\r\n          validationSchema={validationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container gap={4}>\r\n                  <Grid item container direction=\"column\">\r\n                    <Grid item container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          name=\"email\"\r\n                          label=\"Admin Email\"\r\n                          placeholder=\"Enter Admin Email\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          name=\"role\"\r\n                          label=\"Role\"\r\n                          options={specializations}\r\n                          placeholder=\"Select Role\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container xs={12}>\r\n                    <CustomButton\r\n                      title=\"Apply Filter\"\r\n                      width=\"100%\"\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                      type={buttonType}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      <Modals\r\n        isOpen={isAdmin}\r\n        title=\"Add Admin\"\r\n        rowSpacing={5}\r\n        height=\"auto\"\r\n        handleClose={handleAdminClose}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={validationSchema1}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isValid, isSubmitting, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={2}>\r\n                  <Grid item>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      label=\"Email\"\r\n                      id=\"email\"\r\n                      placeholder=\"Enter email\"\r\n                      name=\"email\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      label=\"Password\"\r\n                      type=\"password\"\r\n                      id=\"password\"\r\n                      name=\"password\"\r\n                      placeholder=\"Enter Password\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item container xs={12} marginTop={5}>\r\n                    <CustomButton\r\n                      title=\"Add Admin\"\r\n                      width=\"100%\"\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                      type={buttonType}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Administrator;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\AddPartner.js",["1621","1622","1623","1624","1625","1626","1627","1628","1629","1630","1631","1632","1633","1634","1635","1636","1637","1638","1639","1640","1641","1642","1643","1644","1645","1646","1647","1648","1649","1650","1651","1652","1653","1654","1655","1656","1657","1658","1659","1660","1661","1662","1663","1664","1665","1666","1667","1668","1669","1670","1671","1672","1673","1674"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\r\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  Checkbox,\r\n  TableCell,\r\n  Avatar,\r\n  TableRow,\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { categoryFilterOptions, defaultPageInfo } from \"helpers/mockData\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport {\r\n  changeTableLimit,\r\n  deleteItem,\r\n  deleteVar,\r\n  filterData,\r\n  handlePageChange,\r\n  banks,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport DeletePartner from \"components/modals/DeleteOrDisable\";\r\nimport { partnersHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport {\r\n  addPartner,\r\n  addPartnerCategory,\r\n  regeneratePartnerProfileUrl,\r\n} from \"components/graphQL/Mutation\";\r\nimport {\r\n  getPartners,\r\n  getSingleProvider,\r\n  getProviders,\r\n  DELETE_PARTNER,\r\n} from \"components/graphQL/useQuery\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport {\r\n  addNewPartnerValidationSchema,\r\n  addPartnerValidationSchema,\r\n  filterPartnersValidationSchema,\r\n} from \"helpers/validationSchemas\";\r\nimport Filter from \"components/Forms/Filters\";\r\nimport { PageInfo } from \"components/graphQL/fragment\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { EditDelBtn } from \"components/Buttons/EditDelBtn\";\r\n\r\nconst AddPartner = ({ open, handleClose, category, CategoryValue, id }) => {\r\n  const theme = useTheme();\r\n  const onSubmit = () => {};\r\n  const { data: da, loading: load } = useQuery(getProviders);\r\n  // const initialValues = {};\r\n  const categoryOptions = [\r\n    { key: \"Diagnostics\", value: \"diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"pharmacy\" },\r\n    { key: \"Hospital\", value: \"hospital\" },\r\n  ];\r\n  const classificationOptions = [\r\n    { key: \"Primary Healthcare\", value: \"Primary Healthcare\" },\r\n    { key: \"Secondary Healthcare\", value: \"Secondary Healthcare\" },\r\n  ];\r\n\r\n  const specializationOptions = [\r\n    { key: \"Dental Care\", value: \"Dental Care\" },\r\n    { key: \"Eye Clinic\", value: \"Eye Clinic\" },\r\n    { key: \"Skin Care\", value: \"Skin Care\" },\r\n    { key: \"Mental Care\", value: \"Mental Care\" },\r\n  ];\r\n\r\n  const initialValues = {\r\n    name: \"\",\r\n    email: \"\",\r\n    specialization: \"\",\r\n    category: \"\",\r\n    account: \"\",\r\n    address: \"\",\r\n    phone: \"\",\r\n    classification: \"\",\r\n    bank: \"\",\r\n    image: null,\r\n  };\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  //   const onSubmit = (values) => {\r\n  //     console.log(values);\r\n  //   };\r\n\r\n  // const onSubmit2 = async (values, onSubmitProps) => {\r\n  //   const { category } = values;\r\n\r\n  //   try {\r\n  //     const addCatRes = await addPartnerCat({\r\n  //       variables: {\r\n  //         name: category,\r\n  //       },\r\n  //     });\r\n\r\n  //     if (addCatRes?.addPartner?.partner) {\r\n  //       setAddPartnerCategory(false);\r\n  //       onSubmitProps.resetForm();\r\n  //       const res = refetch();\r\n  //       setTableData(res, \"Couldn't fetch partners.\");\r\n  //     }\r\n  //   } catch (error) {\r\n  //     console.error(error);\r\n  //   }\r\n  // };\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const { displayAlert } = useAlert();\r\n  const [addPartners] = useMutation(addPartner);\r\n  const onSubmit1 = async (values, onSubmitProps) => {\r\n    console.log(values);\r\n    let { name, email, phone, category, bank, specialization, image, account } =\r\n      values;\r\n    name = name.trim();\r\n\r\n    try {\r\n      await addPartners({\r\n        variables: {\r\n          name,\r\n          email,\r\n          category,\r\n          specialization,\r\n          account,\r\n          phone,\r\n          bank,\r\n          logoImageUrl: image,\r\n          providerId: id,\r\n        },\r\n        refetchQueries: [\r\n          {\r\n            query: getPartners,\r\n            variables: {\r\n              providerId: id,\r\n            },\r\n          },\r\n        ],\r\n      });\r\n      displayAlert(\"success\", \"Partner added successfully\");\r\n      onSubmitProps.resetForm();\r\n      handleClose();\r\n    } catch (err) {\r\n      console.log(err, \"err\");\r\n      displayAlert(\"error\", err);\r\n    }\r\n  };\r\n  return (\r\n    <Modals\r\n      isOpen={open}\r\n      title=\"Add Partner\"\r\n      rowSpacing={5}\r\n      handleClose={handleClose}\r\n    >\r\n      <Formik\r\n        initialValues={initialValues}\r\n        onSubmit={onSubmit1}\r\n        validationSchema={addNewPartnerValidationSchema}\r\n        validateOnChange={false}\r\n        validateOnMount={false}\r\n        validateOnBlur={false}\r\n      >\r\n        {({ isSubmitting, isValid, dirty, values, errors, setFieldValue }) => {\r\n          console.log(errors);\r\n          const { classification, category: cat } = values;\r\n          return (\r\n            <Form style={{ marginTop: \"1rem\" }}>\r\n              <Grid container direction=\"column\" gap={1.5}>\r\n                <Grid item container>\r\n                  <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        label=\"Name\"\r\n                        id=\"name\"\r\n                        name=\"name\"\r\n                        placeholder=\"Enter Partner name\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        label=\"Email\"\r\n                        id=\"name\"\r\n                        name=\"email\"\r\n                        placeholder=\"Enter Email\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        label=\" Account Number\"\r\n                        id=\"account\"\r\n                        name=\"account\"\r\n                        placeholder=\"Enter Account Number\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"input\"\r\n                        label=\"Phone Number\"\r\n                        id=\"phone\"\r\n                        name=\"phone\"\r\n                        placeholder=\"Enter Phone Number\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"select\"\r\n                        options={banks}\r\n                        name=\"bank\"\r\n                        label=\"Bank\"\r\n                        placeholder=\"Select Bank\"\r\n                      />\r\n                    </Grid>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"select\"\r\n                        options={categoryOptions}\r\n                        name=\"category\"\r\n                        label=\"Category\"\r\n                        placeholder=\"Category\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid item container flexWrap=\"nowrap\" gap={2}>\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"file\"\r\n                        name=\"image\"\r\n                        label=\"Company Logo\"\r\n                        setFieldValue={setFieldValue}\r\n                      />\r\n                    </Grid>\r\n                    {cat === \"hospital\" && (\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={classificationOptions}\r\n                          name=\"classification\"\r\n                          label=\"Classification\"\r\n                          id=\"classification\"\r\n                          placeholder=\"select classification\"\r\n                        />\r\n                      </Grid>\r\n                    )}\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    {classification === \"Secondary Healthcare\" && (\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializationOptions}\r\n                          name=\"specialization\"\r\n                          label=\"Specialization\"\r\n                          id=\"specialization\"\r\n                          placeholder=\"Select Specialization\"\r\n                        />\r\n                      </Grid>\r\n                    )}\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <FormikControl\r\n                      control=\"textarea\"\r\n                      name=\"address\"\r\n                      minRows={3}\r\n                      label=\"Address\"\r\n                      placeholder=\"Enter address\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item container sx={{ mt: 1 }}>\r\n                  <CustomButton\r\n                    title=\"Add Partner\"\r\n                    width=\"100%\"\r\n                    type={buttonType}\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Form>\r\n          );\r\n        }}\r\n      </Formik>\r\n    </Modals>\r\n  );\r\n};\r\n\r\nexport default AddPartner;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\BellIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Utilities\\tableData.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\SubscriptionIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\DashboardIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\RefferalsIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\SettingsIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\PartnersIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\PatientsIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\styles\\docVerificationPageStyles.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\FinanceIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\DoctorsIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\LabelIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Icons\\HMOIcon.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\ListManagment.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\TestList.js",["1675"],"import React, { useState, useEffect } from \"react\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { useLazyQuery, useMutation } from \"@apollo/client\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\n\r\nimport useAlert from \"hooks/useAlert\";\r\nimport TableLayout from \"components/layouts/TableLayout\";\r\nimport { TestListRow } from \"components/Rows/TestListRow\";\r\nimport ConfirmModal from \"components/modals/ConfirmModal\";\r\nimport { AddTestForm } from \"components/Forms/AddTestForm\";\r\nimport EnhancedTable from \"components/layouts/EnhancedTable\";\r\nimport { EditTestForm } from \"components/Forms/EditTestForm\";\r\nimport ConfirmDelete from \"components/modals/DeleteOrDisable\";\r\nimport UploadListModal from \"components/modals/UploadListModal\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport { deleteItem, uploadFile } from \"helpers/filterHelperFunctions\";\r\nimport { testTableHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { DELETE_TEST, getListOfLabTests } from \"components/graphQL/useQuery\";\r\nimport { uploadTests } from \"components/graphQL/Mutation\";\r\n\r\nconst TestList = () => {\r\n  const theme = useTheme();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [list, setList] = useState([]);\r\n  const [delete_test] = useLazyQuery(DELETE_TEST);\r\n  const { displayAlert, getErrorMsg } = useAlert();\r\n  const [uploadTestFile] = useMutation(uploadTests);\r\n  const [editData, setEditData] = React.useState(null);\r\n  const [isDeleting, setIsDeleting] = React.useState({});\r\n  const [addTestModal, setAddTestModal] = React.useState(false);\r\n  const [confirmModal, setConfirmModal] = React.useState(false);\r\n  const [testToDelete, setTestToDelete] = React.useState(null);\r\n  const [editTestModal, setEditTestModal] = React.useState(false);\r\n  const [uploadListModal, setUploadListModal] = React.useState(false);\r\n  const [confirmDeleteModal, setConfirmDeleteModal] = React.useState(false);\r\n  const [fetchLabTestList, { loading, error, data, refetch }] =\r\n    useLazyQuery(getListOfLabTests);\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchLabTestList();\r\n  }, [fetchLabTestList]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setList(data?.getDiagnosticLabTests?.data);\r\n    }\r\n  }, [data]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      (data?.getDiagnosticLabTests?.data || []).map((test) => {\r\n        const newIsDeleting = isDeleting;\r\n        setIsDeleting({ [test?._id]: false, ...newIsDeleting });\r\n        return null;\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [data]);\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        height=\"100%\"\r\n      >\r\n        <Grid item container justifyContent=\"flex-end\">\r\n          {/* === ADD BUTTONS === */}\r\n          <Grid item>\r\n            <Grid container>\r\n              <CustomButton\r\n                endIcon={<AddIcon />}\r\n                title=\"Add Test\"\r\n                type={buttonType}\r\n                onClick={() => setAddTestModal(true)}\r\n                sx={{ marginRight: \"1rem\" }}\r\n              />\r\n              <CustomButton\r\n                endIcon={<AddIcon />}\r\n                title=\"Upload list\"\r\n                type={buttonType}\r\n                onClick={() => setConfirmModal(true)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <TableLayout>\r\n          {error ? (\r\n            <NoData error={error} />\r\n          ) : loading ? (\r\n            <Loader />\r\n          ) : !list ? (\r\n            <EmptyTable\r\n              headCells={testTableHeadCells}\r\n              paginationLabel=\"Test per page\"\r\n            />\r\n          ) : list.length > 0 ? (\r\n            /* ================= TESTS TABLE ================= */\r\n            <Grid item container height=\"100%\" direction=\"column\">\r\n              <EnhancedTable\r\n                headCells={testTableHeadCells}\r\n                rows={list}\r\n                hasCheckbox={false}\r\n                fetchData={fetchLabTestList}\r\n                hasPagination={false}\r\n              >\r\n                {list.map((row, index) => {\r\n                  const { _id } = row;\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  return (\r\n                    <TestListRow\r\n                      key={_id}\r\n                      data={row}\r\n                      labelId={labelId}\r\n                      setEditData={setEditData}\r\n                      isDeleting={isDeleting[_id]}\r\n                      setTestIdToDelete={setTestToDelete}\r\n                      openEditModal={() => setEditTestModal(true)}\r\n                      openConfirmModal={() => setConfirmDeleteModal(true)}\r\n                    />\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={testTableHeadCells}\r\n              paginationLabel=\"Patients per page\"\r\n            />\r\n          )}\r\n        </TableLayout>\r\n\r\n        {/* ==== ADD TEST MODAL ==== */}\r\n        <Modals\r\n          isOpen={addTestModal}\r\n          title=\"Add Test\"\r\n          rowSpacing={5}\r\n          height=\"auto\"\r\n          handleClose={() => setAddTestModal(false)}\r\n        >\r\n          <AddTestForm\r\n            onSuccess={() => {\r\n              setAddTestModal(false);\r\n              refetch();\r\n            }}\r\n          />\r\n        </Modals>\r\n\r\n        {/* ==== EDIT TEST MODAL ==== */}\r\n        <Modals\r\n          isOpen={editTestModal}\r\n          title=\"Edit Test\"\r\n          rowSpacing={5}\r\n          height=\"auto\"\r\n          handleClose={() => setEditTestModal(false)}\r\n        >\r\n          <EditTestForm\r\n            data={editData}\r\n            onSuccess={() => {\r\n              setEditTestModal(false);\r\n              refetch();\r\n            }}\r\n          />\r\n        </Modals>\r\n\r\n        {/* ======== CONFIRM UPLOAD TEST MODAL ========= */}\r\n        <ConfirmModal\r\n          open={confirmModal}\r\n          setOpen={setConfirmModal}\r\n          title=\"Confirm Upload Tests\"\r\n          confirmationMsg=\"Uploading a new test JSON file will overwrite the current file.\"\r\n          onConfirm={() => {\r\n            setUploadListModal(false);\r\n            setUploadListModal(true);\r\n          }}\r\n          onCancel={() => {\r\n            setUploadListModal(false);\r\n          }}\r\n        />\r\n\r\n        {/*  ======= CONFIRM DELETE ======== */}\r\n        <ConfirmDelete\r\n          open={confirmDeleteModal}\r\n          setOpen={setConfirmDeleteModal}\r\n          title=\"Delete Test\"\r\n          btnValue=\"delete\"\r\n          onConfirm={() => {\r\n            deleteItem(\r\n              delete_test,\r\n              testToDelete,\r\n              setTestToDelete,\r\n              refetch,\r\n              Typography,\r\n              enqueueSnackbar,\r\n              setIsDeleting,\r\n              isDeleting\r\n            );\r\n            setUploadListModal(false);\r\n          }}\r\n          confirmationMsg=\"Are you sure you want to delete\"\r\n          onCancel={() => {\r\n            setUploadListModal(false);\r\n          }}\r\n        />\r\n\r\n        {/* ==== UPLOAD TEST MODAL ==== */}\r\n        <UploadListModal\r\n          isOpen={uploadListModal}\r\n          setIsOpen={setUploadListModal}\r\n          handleSubmit={async (values) => {\r\n            const throwError = () =>\r\n              displayAlert(\r\n                \"error\",\r\n                \"Something went wrong while uploading file.\"\r\n              );\r\n            try {\r\n              const { testFile: file } = values;\r\n              const fileUrl = await uploadFile(file);\r\n\r\n              if (typeof fileUrl !== \"string\") {\r\n                throwError();\r\n                return;\r\n              }\r\n\r\n              const { data } = await uploadTestFile({\r\n                variables: {\r\n                  fileUrl: fileUrl,\r\n                },\r\n              });\r\n\r\n              if (!data) {\r\n                throwError();\r\n                return;\r\n              }\r\n\r\n              const testAdded =\r\n                data?.uploadDiagnosticLabTests?.result?.totalInserted;\r\n              displayAlert(\"success\", `${testAdded && testAdded} Tests Added.`);\r\n              setUploadListModal(false);\r\n            } catch (error) {\r\n              console.error(\"Error from onSubmit Test JSON file\", error);\r\n              const errMsg = getErrorMsg(error);\r\n              displayAlert(\"error\", errMsg);\r\n            }\r\n          }}\r\n        />\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TestList;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\routes\\PrivateRoute.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\Hmo.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\UploadListModal.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\AddTestForm.js",["1676","1677","1678","1679"],"import React from \"react\";\r\nimport t from \"prop-types\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { FormikControl } from \"components/validation\";\r\nimport { addTest } from \"components/graphQL/Mutation\";\r\nimport { addTestValidation } from \"helpers/validationSchemas\";\r\nimport {\r\n  handleError,\r\n  showSuccessMsg,\r\n} from \"../../helpers/filterHelperFunctions\";\r\n\r\nexport const AddTestForm = ({ onSuccess }) => {\r\n  const theme = useTheme();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [addSingleTest] = useMutation(addTest);\r\n\r\n  const addTestIntialValues = {\r\n    name: \"\",\r\n    price: null,\r\n    tat: \"\",\r\n  };\r\n\r\n  const onSubmit = async (values) => {\r\n    try {\r\n      const { name, price, tat } = values;\r\n      const variables = {\r\n        name: name,\r\n        price: Number(price),\r\n        tat: parseInt(tat) > 1 ? `${tat} Hours` : `${tat} Hour`,\r\n      };\r\n      console.log(\"add test values\", variables);\r\n      const { data } = await addSingleTest({\r\n        variables: variables,\r\n      });\r\n      if (data) {\r\n        showSuccessMsg(enqueueSnackbar, Typography, \"Test added.\");\r\n        onSuccess();\r\n      }\r\n    } catch (err) {\r\n      handleError(err, enqueueSnackbar);\r\n      console.log(\"failed to add test\", err);\r\n    }\r\n  };\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={addTestIntialValues}\r\n      onSubmit={onSubmit}\r\n      validationSchema={addTestValidation}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n      validateOnBlur={false}\r\n    >\r\n      {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\r\n        return (\r\n          <Form style={{ marginTop: \"1rem\" }}>\r\n            <Grid container direction=\"column\" gap={2}>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Test Name\"\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  placeholder=\"Enter Test name\"\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Test price\"\r\n                  id=\"price\"\r\n                  name=\"price\"\r\n                  placeholder=\"Enter Test price\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Turnaround time (TAT) - (hours)\"\r\n                  id=\"tat\"\r\n                  name=\"tat\"\r\n                  placeholder=\"48\"\r\n                />\r\n              </Grid>\r\n              <Grid item container>\r\n                <CustomButton\r\n                  title=\"Add Test\"\r\n                  width=\"100%\"\r\n                  type={buttonType}\r\n                  isSubmitting={isSubmitting}\r\n                  disabled={!dirty || !isValid || isSubmitting}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nAddTestForm.propTypes = {\r\n  onSuccess: t.func,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\EditTestForm.js",["1680","1681","1682","1683","1684"],"import React from \"react\";\r\nimport t from \"prop-types\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { FormikControl } from \"components/validation\";\r\nimport { UPDATE_TEST } from \"components/graphQL/Mutation\";\r\nimport { editTestValidation } from \"helpers/validationSchemas\";\r\nimport { handleError, showSuccessMsg } from \"helpers/filterHelperFunctions\";\r\nimport { CustomSelect } from \"components/validation/Select\";\r\n\r\nexport const EditTestForm = ({ onSuccess, data }) => {\r\n  const theme = useTheme();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [updateTest] = useMutation(UPDATE_TEST);\r\n  const [value, setValue] = React.useState(\"Hours\");\r\n  const tatArr = data.tat.split(\" \");\r\n  const initialValues = {\r\n    id: data?._id,\r\n    name: data?.name,\r\n    price: data.price,\r\n    tatNumber: tatArr[0],\r\n    tatDuration: tatArr[1],\r\n  };\r\n\r\n  const onSubmit = async (values) => {\r\n    try {\r\n      const { id, name, price, tatNumber, tatDuration } = values;\r\n      const variables = {\r\n        id: id,\r\n        name: name,\r\n        price: Number(price),\r\n        tat: `${tatNumber} ${tatDuration}`,\r\n      };\r\n\r\n      const { data } = await updateTest({\r\n        variables: variables,\r\n      });\r\n      if (data) {\r\n        showSuccessMsg(enqueueSnackbar, Typography, \"Test Updated.\");\r\n        onSuccess();\r\n      }\r\n    } catch (err) {\r\n      handleError(err, enqueueSnackbar);\r\n      console.log(\"failed to update test\", err);\r\n    }\r\n  };\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validationSchema={editTestValidation}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n      validateOnBlur={false}\r\n    >\r\n      {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\r\n        /* setValues(initialValues); */\r\n        return (\r\n          <Form style={{ marginTop: \"1rem\" }}>\r\n            <Grid container direction=\"column\" gap={2}>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl control=\"input\" id=\"id\" name=\"id\" hidden />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Test Name\"\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  placeholder=\"Enter Test name\"\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Test price\"\r\n                  id=\"price\"\r\n                  name=\"price\"\r\n                  placeholder=\"Enter Test price\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Grid container spacing={2}>\r\n                  <Grid item flexGrow={1}>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      label=\"Turnaround time (TAT)\"\r\n                      id=\"tat\"\r\n                      name=\"tatNumber\"\r\n                      placeholder=\"48\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sx={{ display: \"flex\", alignItems: \"flex-end\" }}>\r\n                    <CustomSelect\r\n                      Control\r\n                      name=\"tatDuration\"\r\n                      disable={false}\r\n                      value={value}\r\n                      options={[\r\n                        { key: \"Minutes\", value: \"Minutes\" },\r\n                        { key: \"Hours\", value: \"Hours\" },\r\n                        { key: \"Days\", value: \"Days\" },\r\n                      ]}\r\n                      onChange={(e) => {\r\n                        setValue(e?.target?.value);\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item container>\r\n                <CustomButton\r\n                  title=\"Update Test\"\r\n                  width=\"100%\"\r\n                  type={buttonType}\r\n                  isSubmitting={isSubmitting}\r\n                  disabled={isSubmitting}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nEditTestForm.propTypes = {\r\n  onSuccess: t.func.isRequired,\r\n  data: t.object,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Rows\\TestListRow.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\cards\\SettingsCard.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\modals\\AddEditHMOModal.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\UploadListForm.js",["1685","1686"],"import React from \"react\";\r\nimport t from \"prop-types\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Alert, Grid } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\nimport DragAndDrop from \"./DragAndDrop\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { uploadFileValidationSchema } from \"helpers/validationSchemas\";\r\n\r\nexport const UploadListForm = ({ onSubmit, valSchema }) => {\r\n  const theme = useTheme();\r\n  const validationSchema = valSchema ? valSchema : uploadFileValidationSchema;\r\n\r\n  const addTestIntialValues = {\r\n    testFile: null,\r\n  };\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={addTestIntialValues}\r\n      onSubmit={(values) => onSubmit(values)}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={true}\r\n      validateOnMount={false}\r\n      validateOnBlur={true}\r\n    >\r\n      {({ isSubmitting, dirty, isValid, setFieldValue, setErrors }) => {\r\n        return (\r\n          <Form style={{ marginTop: \"1rem\" }}>\r\n            <Alert severity=\"warning\" sx={{ margin: \"1rem 0rem\" }}>\r\n              <strong>CAUTION - </strong> Uploading a new file may overwrite the\r\n              current file.\r\n            </Alert>\r\n            <Grid container direction=\"column\" space={2}>\r\n              <Grid item>\r\n                <DragAndDrop\r\n                  name=\"testFile\"\r\n                  maxFiles={1}\r\n                  hasPreview={false}\r\n                  uploadFunc={(file) => {\r\n                    setErrors({});\r\n                    setFieldValue(\"testFile\", file);\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <CustomButton\r\n                  title=\"Upload file\"\r\n                  width=\"100%\"\r\n                  type={buttonType}\r\n                  isSubmitting={isSubmitting}\r\n                  disabled={isSubmitting}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nUploadListForm.propTypes = {\r\n  onSubmit: t.func.isRequired,\r\n  valSchema: t.object,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\Forms\\AddEditHMOForm.js",["1687","1688","1689","1690","1691"],"import React from \"react\";\r\nimport t from \"prop-types\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\nimport useAlert from \"hooks/useAlert\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { FormikControl } from \"components/validation\";\r\nimport { removeEmptyStringValues } from \"helpers/func\";\r\nimport { hmoValidationSchema } from \"helpers/validationSchemas\";\r\nimport { addProvider, editprovider } from \"components/graphQL/Mutation\";\r\n\r\nconst AddEditHMOForm = ({ type, initialValues, onSuccess }) => {\r\n  const theme = useTheme();\r\n  const { displayAlert, getErrorMsg } = useAlert();\r\n  const [createProvider] = useMutation(addProvider);\r\n  const [updateProvider] = useMutation(editprovider);\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  const onCreateProvider = async (values) => {\r\n    const variables = removeEmptyStringValues(values);\r\n    try {\r\n      const response = await createProvider({\r\n        variables: variables,\r\n      });\r\n      if (response.data) {\r\n        displayAlert(\"success\", \"HMO added succesfully\");\r\n        onSuccess();\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      const errorMsg = getErrorMsg(error);\r\n      displayAlert(\"error\", errorMsg);\r\n    }\r\n  };\r\n\r\n  const onUpdateProvider = async (values) => {\r\n    const variables = removeEmptyStringValues(values);\r\n    try {\r\n      const response = await updateProvider({\r\n        variables: variables,\r\n      });\r\n      if (response.data) {\r\n        displayAlert(\"success\", \"HMO updated succesfully\");\r\n        onSuccess();\r\n      }\r\n    } catch (error) {\r\n      console.error(error);\r\n      const errorMsg = getErrorMsg(error);\r\n      displayAlert(\"error\", errorMsg);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={(values) =>\r\n        type === \"add\" ? onCreateProvider(values) : onUpdateProvider(values)\r\n      }\r\n      validationSchema={hmoValidationSchema}\r\n      validateOnChange={true}\r\n      validateOnMount={false}\r\n      validateOnBlur={true}\r\n    >\r\n      {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\r\n        return (\r\n          <Form style={{ marginTop: \"1rem\" }}>\r\n            <Grid container direction=\"column\" gap={2}>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl control=\"input\" id=\"id\" name=\"id\" hidden />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"HMO Name\"\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  placeholder=\"Enter HMO name\"\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  type=\"email\"\r\n                  label=\"Email\"\r\n                  id=\"email\"\r\n                  name=\"email\"\r\n                  placeholder=\"Enter email address\"\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Phone number\"\r\n                  id=\"phone_number\"\r\n                  name=\"phone\"\r\n                  placeholder=\"Enter phone number\"\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Address\"\r\n                  id=\"address\"\r\n                  name=\"address\"\r\n                  placeholder=\"Address\"\r\n                />\r\n              </Grid>\r\n\r\n              {/* <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"select\"\r\n                  options={[{ key: \"Plan\", value: \"\" }]}\r\n                  placeholder=\"Select plan\"\r\n                  name=\"planId\"\r\n                  label=\"Plan\"\r\n                />\r\n              </Grid> */}\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"file\"\r\n                  label=\"Upload your logo\"\r\n                  id=\"logo\"\r\n                  name=\"icon\"\r\n                  setFieldValue={setFieldValue}\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"file\"\r\n                  label=\"Upload your alt logo\"\r\n                  id=\"logo\"\r\n                  name=\"iconAlt\"\r\n                  setFieldValue={setFieldValue}\r\n                />\r\n              </Grid>\r\n              <Grid item container>\r\n                <CustomButton\r\n                  title={type === \"edit\" ? \"Update HMO\" : \"Add HMO\"}\r\n                  width=\"100%\"\r\n                  type={buttonType}\r\n                  isSubmitting={isSubmitting}\r\n                  disabled={isSubmitting}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nAddEditHMOForm.propTypes = {\r\n  onSuccess: t.func.isRequired,\r\n  initialValues: t.object.isRequired,\r\n  type: t.oneOf([\"add\", \"edit\"]).isRequired,\r\n};\r\n\r\nexport default AddEditHMOForm;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\new Heala\\DProject\\src\\components\\pages\\SingleHMO1.js",[],{"ruleId":"1692","replacedBy":"1693"},{"ruleId":"1694","severity":1,"message":"1695","line":74,"column":3,"nodeType":"1696","messageId":"1697","endLine":74,"endColumn":12},{"ruleId":"1694","severity":1,"message":"1698","line":7,"column":28,"nodeType":"1696","messageId":"1697","endLine":7,"endColumn":38},{"ruleId":"1694","severity":1,"message":"1699","line":10,"column":28,"nodeType":"1696","messageId":"1697","endLine":10,"endColumn":43},{"ruleId":"1694","severity":1,"message":"1700","line":12,"column":31,"nodeType":"1696","messageId":"1697","endLine":12,"endColumn":36},{"ruleId":"1694","severity":1,"message":"1701","line":116,"column":29,"nodeType":"1696","messageId":"1697","endLine":116,"endColumn":49},{"ruleId":"1694","severity":1,"message":"1702","line":128,"column":22,"nodeType":"1696","messageId":"1697","endLine":128,"endColumn":35},{"ruleId":"1694","severity":1,"message":"1703","line":136,"column":10,"nodeType":"1696","messageId":"1697","endLine":136,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1704","line":136,"column":29,"nodeType":"1696","messageId":"1697","endLine":136,"endColumn":49},{"ruleId":"1694","severity":1,"message":"1705","line":164,"column":29,"nodeType":"1696","messageId":"1697","endLine":164,"endColumn":49},{"ruleId":"1694","severity":1,"message":"1706","line":512,"column":23,"nodeType":"1696","messageId":"1697","endLine":512,"endColumn":28},{"ruleId":"1707","severity":1,"message":"1708","line":59,"column":9,"nodeType":"1709","messageId":"1710","endLine":59,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":131,"column":17,"nodeType":"1709","messageId":"1710","endLine":131,"endColumn":30},{"ruleId":"1707","severity":1,"message":"1708","line":192,"column":17,"nodeType":"1709","messageId":"1710","endLine":192,"endColumn":30},{"ruleId":"1694","severity":1,"message":"1711","line":4,"column":3,"nodeType":"1696","messageId":"1697","endLine":4,"endColumn":13},{"ruleId":"1694","severity":1,"message":"1712","line":8,"column":3,"nodeType":"1696","messageId":"1697","endLine":8,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1713","line":10,"column":8,"nodeType":"1696","messageId":"1697","endLine":10,"endColumn":24},{"ruleId":"1694","severity":1,"message":"1714","line":20,"column":8,"nodeType":"1696","messageId":"1697","endLine":20,"endColumn":20},{"ruleId":"1707","severity":1,"message":"1708","line":51,"column":5,"nodeType":"1709","messageId":"1710","endLine":51,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":70,"column":7,"nodeType":"1709","messageId":"1710","endLine":70,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":84,"column":5,"nodeType":"1709","messageId":"1710","endLine":84,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":109,"column":5,"nodeType":"1709","messageId":"1710","endLine":109,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":157,"column":5,"nodeType":"1709","messageId":"1710","endLine":157,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":236,"column":5,"nodeType":"1709","messageId":"1710","endLine":236,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":255,"column":5,"nodeType":"1709","messageId":"1710","endLine":255,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":284,"column":5,"nodeType":"1709","messageId":"1710","endLine":284,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":312,"column":5,"nodeType":"1709","messageId":"1710","endLine":312,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":331,"column":5,"nodeType":"1709","messageId":"1710","endLine":331,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":377,"column":5,"nodeType":"1709","messageId":"1710","endLine":377,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":395,"column":5,"nodeType":"1709","messageId":"1710","endLine":395,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":410,"column":5,"nodeType":"1709","messageId":"1710","endLine":410,"endColumn":16},{"ruleId":"1694","severity":1,"message":"1715","line":41,"column":3,"nodeType":"1696","messageId":"1697","endLine":41,"endColumn":11},{"ruleId":"1694","severity":1,"message":"1716","line":42,"column":3,"nodeType":"1696","messageId":"1697","endLine":42,"endColumn":7},{"ruleId":"1694","severity":1,"message":"1717","line":44,"column":3,"nodeType":"1696","messageId":"1697","endLine":44,"endColumn":11},{"ruleId":"1694","severity":1,"message":"1718","line":45,"column":6,"nodeType":"1696","messageId":"1697","endLine":45,"endColumn":10},{"ruleId":"1707","severity":1,"message":"1708","line":36,"column":9,"nodeType":"1709","messageId":"1710","endLine":36,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":52,"column":7,"nodeType":"1709","messageId":"1710","endLine":52,"endColumn":20},{"ruleId":"1719","severity":1,"message":"1720","line":179,"column":5,"nodeType":"1721","messageId":"1722","endLine":179,"endColumn":21},{"ruleId":"1707","severity":1,"message":"1708","line":41,"column":5,"nodeType":"1709","messageId":"1710","endLine":41,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":60,"column":5,"nodeType":"1709","messageId":"1710","endLine":60,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":108,"column":5,"nodeType":"1709","messageId":"1710","endLine":108,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":119,"column":5,"nodeType":"1709","messageId":"1710","endLine":119,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1700","line":24,"column":31,"nodeType":"1696","messageId":"1697","endLine":24,"endColumn":36},{"ruleId":"1719","severity":1,"message":"1723","line":16,"column":3,"nodeType":"1721","messageId":"1722","endLine":16,"endColumn":12},{"ruleId":"1694","severity":1,"message":"1724","line":1,"column":17,"nodeType":"1696","messageId":"1697","endLine":1,"endColumn":25},{"ruleId":"1694","severity":1,"message":"1725","line":2,"column":10,"nodeType":"1696","messageId":"1697","endLine":2,"endColumn":22},{"ruleId":"1694","severity":1,"message":"1726","line":2,"column":24,"nodeType":"1696","messageId":"1697","endLine":2,"endColumn":29},{"ruleId":"1694","severity":1,"message":"1727","line":12,"column":10,"nodeType":"1696","messageId":"1697","endLine":12,"endColumn":19},{"ruleId":"1728","severity":1,"message":"1729","line":4,"column":1,"nodeType":"1730","messageId":"1731","endLine":4,"endColumn":42},{"ruleId":"1694","severity":1,"message":"1732","line":9,"column":10,"nodeType":"1696","messageId":"1697","endLine":9,"endColumn":23},{"ruleId":"1694","severity":1,"message":"1733","line":12,"column":9,"nodeType":"1696","messageId":"1697","endLine":12,"endColumn":14},{"ruleId":"1694","severity":1,"message":"1734","line":14,"column":29,"nodeType":"1696","messageId":"1697","endLine":14,"endColumn":34},{"ruleId":"1694","severity":1,"message":"1735","line":15,"column":9,"nodeType":"1696","messageId":"1697","endLine":15,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":81,"column":11,"nodeType":"1709","messageId":"1710","endLine":81,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":71,"column":5,"nodeType":"1709","messageId":"1710","endLine":71,"endColumn":16},{"ruleId":"1728","severity":1,"message":"1736","line":13,"column":1,"nodeType":"1730","messageId":"1731","endLine":13,"endColumn":43},{"ruleId":"1707","severity":1,"message":"1708","line":65,"column":9,"nodeType":"1709","messageId":"1710","endLine":65,"endColumn":20},{"ruleId":"1707","severity":1,"message":"1708","line":87,"column":9,"nodeType":"1709","messageId":"1710","endLine":87,"endColumn":20},{"ruleId":"1707","severity":1,"message":"1708","line":33,"column":5,"nodeType":"1709","messageId":"1710","endLine":33,"endColumn":16},{"ruleId":"1694","severity":1,"message":"1717","line":43,"column":3,"nodeType":"1696","messageId":"1697","endLine":43,"endColumn":11},{"ruleId":"1694","severity":1,"message":"1718","line":44,"column":6,"nodeType":"1696","messageId":"1697","endLine":44,"endColumn":10},{"ruleId":"1694","severity":1,"message":"1700","line":3,"column":38,"nodeType":"1696","messageId":"1697","endLine":3,"endColumn":43},{"ruleId":"1707","severity":1,"message":"1708","line":28,"column":27,"nodeType":"1709","messageId":"1710","endLine":28,"endColumn":38},{"ruleId":"1694","severity":1,"message":"1737","line":94,"column":25,"nodeType":"1696","messageId":"1697","endLine":94,"endColumn":26},{"ruleId":"1719","severity":1,"message":"1738","line":27,"column":54,"nodeType":"1721","messageId":"1722","endLine":27,"endColumn":63},{"ruleId":"1719","severity":1,"message":"1739","line":27,"column":65,"nodeType":"1721","messageId":"1722","endLine":27,"endColumn":72},{"ruleId":"1707","severity":1,"message":"1708","line":39,"column":27,"nodeType":"1709","messageId":"1710","endLine":39,"endColumn":38},{"ruleId":"1694","severity":1,"message":"1740","line":19,"column":3,"nodeType":"1696","messageId":"1697","endLine":19,"endColumn":11},{"ruleId":"1694","severity":1,"message":"1737","line":98,"column":29,"nodeType":"1696","messageId":"1697","endLine":98,"endColumn":30},{"ruleId":"1719","severity":1,"message":"1741","line":11,"column":29,"nodeType":"1721","messageId":"1722","endLine":11,"endColumn":44},{"ruleId":"1719","severity":1,"message":"1742","line":11,"column":46,"nodeType":"1721","messageId":"1722","endLine":11,"endColumn":57},{"ruleId":"1719","severity":1,"message":"1743","line":11,"column":59,"nodeType":"1721","messageId":"1722","endLine":11,"endColumn":70},{"ruleId":"1719","severity":1,"message":"1744","line":16,"column":11,"nodeType":"1721","messageId":"1722","endLine":16,"endColumn":20},{"ruleId":"1719","severity":1,"message":"1745","line":16,"column":22,"nodeType":"1721","messageId":"1722","endLine":16,"endColumn":36},{"ruleId":"1719","severity":1,"message":"1746","line":16,"column":38,"nodeType":"1721","messageId":"1722","endLine":16,"endColumn":45},{"ruleId":"1707","severity":1,"message":"1708","line":32,"column":9,"nodeType":"1709","messageId":"1710","endLine":32,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":44,"column":7,"nodeType":"1709","messageId":"1710","endLine":44,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":56,"column":11,"nodeType":"1709","messageId":"1710","endLine":56,"endColumn":24},{"ruleId":"1707","severity":1,"message":"1708","line":62,"column":7,"nodeType":"1709","messageId":"1710","endLine":62,"endColumn":20},{"ruleId":"1707","severity":1,"message":"1708","line":80,"column":9,"nodeType":"1709","messageId":"1710","endLine":80,"endColumn":22},{"ruleId":"1694","severity":1,"message":"1700","line":6,"column":31,"nodeType":"1696","messageId":"1697","endLine":6,"endColumn":36},{"ruleId":"1728","severity":1,"message":"1747","line":20,"column":1,"nodeType":"1730","messageId":"1731","endLine":20,"endColumn":72},{"ruleId":"1719","severity":1,"message":"1748","line":339,"column":18,"nodeType":"1721","messageId":"1722","endLine":339,"endColumn":29},{"ruleId":"1719","severity":1,"message":"1749","line":343,"column":48,"nodeType":"1696","messageId":"1722","endLine":343,"endColumn":54},{"ruleId":"1719","severity":1,"message":"1750","line":343,"column":60,"nodeType":"1696","messageId":"1722","endLine":343,"endColumn":69},{"ruleId":"1719","severity":1,"message":"1749","line":344,"column":49,"nodeType":"1696","messageId":"1722","endLine":344,"endColumn":55},{"ruleId":"1719","severity":1,"message":"1751","line":344,"column":61,"nodeType":"1696","messageId":"1722","endLine":344,"endColumn":70},{"ruleId":"1719","severity":1,"message":"1749","line":368,"column":20,"nodeType":"1696","messageId":"1722","endLine":368,"endColumn":26},{"ruleId":"1719","severity":1,"message":"1752","line":388,"column":24,"nodeType":"1696","messageId":"1722","endLine":388,"endColumn":27},{"ruleId":"1719","severity":1,"message":"1749","line":389,"column":50,"nodeType":"1696","messageId":"1722","endLine":389,"endColumn":56},{"ruleId":"1719","severity":1,"message":"1749","line":391,"column":37,"nodeType":"1696","messageId":"1722","endLine":391,"endColumn":43},{"ruleId":"1694","severity":1,"message":"1753","line":9,"column":3,"nodeType":"1696","messageId":"1697","endLine":9,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1754","line":14,"column":8,"nodeType":"1696","messageId":"1697","endLine":14,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1714","line":26,"column":8,"nodeType":"1696","messageId":"1697","endLine":26,"endColumn":20},{"ruleId":"1728","severity":1,"message":"1755","line":29,"column":1,"nodeType":"1730","messageId":"1731","endLine":29,"endColumn":49},{"ruleId":"1707","severity":1,"message":"1708","line":112,"column":3,"nodeType":"1709","messageId":"1710","endLine":112,"endColumn":14},{"ruleId":"1707","severity":1,"message":"1708","line":139,"column":7,"nodeType":"1709","messageId":"1710","endLine":139,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1756","line":31,"column":13,"nodeType":"1696","messageId":"1697","endLine":31,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1757","line":32,"column":3,"nodeType":"1696","messageId":"1697","endLine":32,"endColumn":8},{"ruleId":"1694","severity":1,"message":"1758","line":35,"column":3,"nodeType":"1696","messageId":"1697","endLine":35,"endColumn":19},{"ruleId":"1694","severity":1,"message":"1700","line":8,"column":31,"nodeType":"1696","messageId":"1697","endLine":8,"endColumn":36},{"ruleId":"1694","severity":1,"message":"1700","line":7,"column":31,"nodeType":"1696","messageId":"1697","endLine":7,"endColumn":36},{"ruleId":"1694","severity":1,"message":"1757","line":24,"column":3,"nodeType":"1696","messageId":"1697","endLine":24,"endColumn":8},{"ruleId":"1694","severity":1,"message":"1759","line":12,"column":9,"nodeType":"1696","messageId":"1697","endLine":12,"endColumn":17},{"ruleId":"1694","severity":1,"message":"1760","line":249,"column":29,"nodeType":"1696","messageId":"1697","endLine":249,"endColumn":36},{"ruleId":"1694","severity":1,"message":"1761","line":23,"column":33,"nodeType":"1696","messageId":"1697","endLine":23,"endColumn":40},{"ruleId":"1694","severity":1,"message":"1762","line":22,"column":11,"nodeType":"1696","messageId":"1697","endLine":22,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":162,"column":7,"nodeType":"1709","messageId":"1710","endLine":162,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1763","line":29,"column":31,"nodeType":"1696","messageId":"1697","endLine":29,"endColumn":36},{"ruleId":"1728","severity":1,"message":"1764","line":9,"column":1,"nodeType":"1730","messageId":"1731","endLine":9,"endColumn":46},{"ruleId":"1694","severity":1,"message":"1700","line":11,"column":31,"nodeType":"1696","messageId":"1697","endLine":11,"endColumn":36},{"ruleId":"1694","severity":1,"message":"1716","line":31,"column":37,"nodeType":"1696","messageId":"1697","endLine":31,"endColumn":41},{"ruleId":"1694","severity":1,"message":"1765","line":18,"column":61,"nodeType":"1696","messageId":"1697","endLine":18,"endColumn":68},{"ruleId":"1694","severity":1,"message":"1700","line":7,"column":31,"nodeType":"1696","messageId":"1697","endLine":7,"endColumn":36},{"ruleId":"1694","severity":1,"message":"1716","line":25,"column":3,"nodeType":"1696","messageId":"1697","endLine":25,"endColumn":7},{"ruleId":"1694","severity":1,"message":"1700","line":7,"column":31,"nodeType":"1696","messageId":"1697","endLine":7,"endColumn":36},{"ruleId":"1694","severity":1,"message":"1766","line":6,"column":8,"nodeType":"1696","messageId":"1697","endLine":6,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1712","line":13,"column":3,"nodeType":"1696","messageId":"1697","endLine":13,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1753","line":15,"column":3,"nodeType":"1696","messageId":"1697","endLine":15,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1767","line":32,"column":3,"nodeType":"1696","messageId":"1697","endLine":32,"endColumn":8},{"ruleId":"1694","severity":1,"message":"1768","line":50,"column":3,"nodeType":"1696","messageId":"1697","endLine":50,"endColumn":32},{"ruleId":"1694","severity":1,"message":"1769","line":58,"column":10,"nodeType":"1696","messageId":"1697","endLine":58,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1770","line":64,"column":11,"nodeType":"1696","messageId":"1697","endLine":64,"endColumn":13},{"ruleId":"1694","severity":1,"message":"1771","line":69,"column":10,"nodeType":"1696","messageId":"1697","endLine":69,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1772","line":97,"column":9,"nodeType":"1696","messageId":"1697","endLine":97,"endColumn":24},{"ruleId":"1694","severity":1,"message":"1773","line":102,"column":9,"nodeType":"1696","messageId":"1697","endLine":102,"endColumn":30},{"ruleId":"1694","severity":1,"message":"1774","line":107,"column":9,"nodeType":"1696","messageId":"1697","endLine":107,"endColumn":30},{"ruleId":"1694","severity":1,"message":"1775","line":137,"column":9,"nodeType":"1696","messageId":"1697","endLine":137,"endColumn":23},{"ruleId":"1707","severity":1,"message":"1708","line":170,"column":9,"nodeType":"1709","messageId":"1710","endLine":170,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":211,"column":5,"nodeType":"1709","messageId":"1710","endLine":211,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":231,"column":7,"nodeType":"1709","messageId":"1710","endLine":231,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1776","line":235,"column":9,"nodeType":"1696","messageId":"1697","endLine":235,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":236,"column":5,"nodeType":"1709","messageId":"1710","endLine":236,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":271,"column":7,"nodeType":"1709","messageId":"1710","endLine":271,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":291,"column":7,"nodeType":"1709","messageId":"1710","endLine":291,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1777","line":311,"column":9,"nodeType":"1696","messageId":"1697","endLine":311,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1778","line":330,"column":9,"nodeType":"1696","messageId":"1697","endLine":330,"endColumn":10},{"ruleId":"1694","severity":1,"message":"1779","line":426,"column":30,"nodeType":"1696","messageId":"1697","endLine":426,"endColumn":42},{"ruleId":"1694","severity":1,"message":"1766","line":6,"column":8,"nodeType":"1696","messageId":"1697","endLine":6,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1712","line":14,"column":3,"nodeType":"1696","messageId":"1697","endLine":14,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1753","line":16,"column":3,"nodeType":"1696","messageId":"1697","endLine":16,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1767","line":33,"column":3,"nodeType":"1696","messageId":"1697","endLine":33,"endColumn":8},{"ruleId":"1694","severity":1,"message":"1768","line":51,"column":3,"nodeType":"1696","messageId":"1697","endLine":51,"endColumn":32},{"ruleId":"1694","severity":1,"message":"1769","line":59,"column":10,"nodeType":"1696","messageId":"1697","endLine":59,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1770","line":64,"column":11,"nodeType":"1696","messageId":"1697","endLine":64,"endColumn":13},{"ruleId":"1694","severity":1,"message":"1771","line":70,"column":10,"nodeType":"1696","messageId":"1697","endLine":70,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1772","line":97,"column":9,"nodeType":"1696","messageId":"1697","endLine":97,"endColumn":24},{"ruleId":"1694","severity":1,"message":"1773","line":102,"column":9,"nodeType":"1696","messageId":"1697","endLine":102,"endColumn":30},{"ruleId":"1694","severity":1,"message":"1774","line":107,"column":9,"nodeType":"1696","messageId":"1697","endLine":107,"endColumn":30},{"ruleId":"1694","severity":1,"message":"1775","line":137,"column":9,"nodeType":"1696","messageId":"1697","endLine":137,"endColumn":23},{"ruleId":"1707","severity":1,"message":"1708","line":169,"column":9,"nodeType":"1709","messageId":"1710","endLine":169,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":210,"column":5,"nodeType":"1709","messageId":"1710","endLine":210,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":230,"column":7,"nodeType":"1709","messageId":"1710","endLine":230,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1776","line":234,"column":9,"nodeType":"1696","messageId":"1697","endLine":234,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":235,"column":5,"nodeType":"1709","messageId":"1710","endLine":235,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":270,"column":7,"nodeType":"1709","messageId":"1710","endLine":270,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":290,"column":7,"nodeType":"1709","messageId":"1710","endLine":290,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1777","line":310,"column":9,"nodeType":"1696","messageId":"1697","endLine":310,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1778","line":328,"column":9,"nodeType":"1696","messageId":"1697","endLine":328,"endColumn":10},{"ruleId":"1694","severity":1,"message":"1779","line":424,"column":30,"nodeType":"1696","messageId":"1697","endLine":424,"endColumn":42},{"ruleId":"1694","severity":1,"message":"1780","line":3,"column":10,"nodeType":"1696","messageId":"1697","endLine":3,"endColumn":16},{"ruleId":"1728","severity":1,"message":"1755","line":9,"column":1,"nodeType":"1730","messageId":"1731","endLine":9,"endColumn":52},{"ruleId":"1694","severity":1,"message":"1781","line":22,"column":21,"nodeType":"1696","messageId":"1697","endLine":22,"endColumn":25},{"ruleId":"1694","severity":1,"message":"1782","line":22,"column":36,"nodeType":"1696","messageId":"1697","endLine":22,"endColumn":44},{"ruleId":"1694","severity":1,"message":"1783","line":28,"column":8,"nodeType":"1696","messageId":"1697","endLine":28,"endColumn":17},{"ruleId":"1728","severity":1,"message":"1764","line":30,"column":1,"nodeType":"1730","messageId":"1731","endLine":30,"endColumn":47},{"ruleId":"1728","severity":1,"message":"1784","line":34,"column":1,"nodeType":"1730","messageId":"1731","endLine":34,"endColumn":69},{"ruleId":"1694","severity":1,"message":"1785","line":39,"column":9,"nodeType":"1696","messageId":"1697","endLine":39,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":44,"column":3,"nodeType":"1709","messageId":"1710","endLine":44,"endColumn":14},{"ruleId":"1694","severity":1,"message":"1786","line":47,"column":44,"nodeType":"1696","messageId":"1697","endLine":47,"endColumn":49},{"ruleId":"1707","severity":1,"message":"1708","line":89,"column":9,"nodeType":"1709","messageId":"1710","endLine":89,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":101,"column":9,"nodeType":"1709","messageId":"1710","endLine":101,"endColumn":22},{"ruleId":"1694","severity":1,"message":"1780","line":3,"column":10,"nodeType":"1696","messageId":"1697","endLine":3,"endColumn":16},{"ruleId":"1728","severity":1,"message":"1755","line":9,"column":1,"nodeType":"1730","messageId":"1731","endLine":9,"endColumn":52},{"ruleId":"1694","severity":1,"message":"1781","line":22,"column":21,"nodeType":"1696","messageId":"1697","endLine":22,"endColumn":25},{"ruleId":"1694","severity":1,"message":"1783","line":28,"column":8,"nodeType":"1696","messageId":"1697","endLine":28,"endColumn":17},{"ruleId":"1728","severity":1,"message":"1764","line":30,"column":1,"nodeType":"1730","messageId":"1731","endLine":30,"endColumn":47},{"ruleId":"1728","severity":1,"message":"1784","line":34,"column":1,"nodeType":"1730","messageId":"1731","endLine":34,"endColumn":69},{"ruleId":"1694","severity":1,"message":"1785","line":39,"column":9,"nodeType":"1696","messageId":"1697","endLine":39,"endColumn":16},{"ruleId":"1694","severity":1,"message":"1786","line":47,"column":44,"nodeType":"1696","messageId":"1697","endLine":47,"endColumn":49},{"ruleId":"1707","severity":1,"message":"1708","line":89,"column":9,"nodeType":"1709","messageId":"1710","endLine":89,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":101,"column":9,"nodeType":"1709","messageId":"1710","endLine":101,"endColumn":22},{"ruleId":"1694","severity":1,"message":"1737","line":211,"column":31,"nodeType":"1696","messageId":"1697","endLine":211,"endColumn":32},{"ruleId":"1728","severity":1,"message":"1736","line":6,"column":1,"nodeType":"1730","messageId":"1731","endLine":6,"endColumn":60},{"ruleId":"1694","severity":1,"message":"1753","line":11,"column":3,"nodeType":"1696","messageId":"1697","endLine":11,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1712","line":14,"column":3,"nodeType":"1696","messageId":"1697","endLine":14,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1714","line":20,"column":8,"nodeType":"1696","messageId":"1697","endLine":20,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1754","line":32,"column":8,"nodeType":"1696","messageId":"1697","endLine":32,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1785","line":54,"column":9,"nodeType":"1696","messageId":"1697","endLine":54,"endColumn":16},{"ruleId":"1694","severity":1,"message":"1770","line":61,"column":11,"nodeType":"1696","messageId":"1697","endLine":61,"endColumn":13},{"ruleId":"1707","severity":1,"message":"1708","line":62,"column":3,"nodeType":"1709","messageId":"1710","endLine":62,"endColumn":14},{"ruleId":"1707","severity":1,"message":"1708","line":92,"column":9,"nodeType":"1709","messageId":"1710","endLine":92,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":110,"column":9,"nodeType":"1709","messageId":"1710","endLine":110,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":175,"column":9,"nodeType":"1709","messageId":"1710","endLine":175,"endColumn":22},{"ruleId":"1694","severity":1,"message":"1766","line":6,"column":8,"nodeType":"1696","messageId":"1697","endLine":6,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1712","line":14,"column":3,"nodeType":"1696","messageId":"1697","endLine":14,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1753","line":16,"column":3,"nodeType":"1696","messageId":"1697","endLine":16,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1767","line":33,"column":3,"nodeType":"1696","messageId":"1697","endLine":33,"endColumn":8},{"ruleId":"1694","severity":1,"message":"1768","line":51,"column":3,"nodeType":"1696","messageId":"1697","endLine":51,"endColumn":32},{"ruleId":"1694","severity":1,"message":"1769","line":59,"column":10,"nodeType":"1696","messageId":"1697","endLine":59,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1770","line":64,"column":11,"nodeType":"1696","messageId":"1697","endLine":64,"endColumn":13},{"ruleId":"1694","severity":1,"message":"1771","line":70,"column":10,"nodeType":"1696","messageId":"1697","endLine":70,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1772","line":97,"column":9,"nodeType":"1696","messageId":"1697","endLine":97,"endColumn":24},{"ruleId":"1694","severity":1,"message":"1773","line":102,"column":9,"nodeType":"1696","messageId":"1697","endLine":102,"endColumn":30},{"ruleId":"1694","severity":1,"message":"1774","line":107,"column":9,"nodeType":"1696","messageId":"1697","endLine":107,"endColumn":30},{"ruleId":"1707","severity":1,"message":"1708","line":169,"column":9,"nodeType":"1709","messageId":"1710","endLine":169,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":210,"column":5,"nodeType":"1709","messageId":"1710","endLine":210,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":230,"column":7,"nodeType":"1709","messageId":"1710","endLine":230,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1776","line":234,"column":9,"nodeType":"1696","messageId":"1697","endLine":234,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":235,"column":5,"nodeType":"1709","messageId":"1710","endLine":235,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":270,"column":7,"nodeType":"1709","messageId":"1710","endLine":270,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":290,"column":7,"nodeType":"1709","messageId":"1710","endLine":290,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1777","line":310,"column":9,"nodeType":"1696","messageId":"1697","endLine":310,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1778","line":328,"column":9,"nodeType":"1696","messageId":"1697","endLine":328,"endColumn":10},{"ruleId":"1694","severity":1,"message":"1779","line":424,"column":30,"nodeType":"1696","messageId":"1697","endLine":424,"endColumn":42},{"ruleId":"1728","severity":1,"message":"1736","line":6,"column":1,"nodeType":"1730","messageId":"1731","endLine":6,"endColumn":60},{"ruleId":"1694","severity":1,"message":"1753","line":11,"column":3,"nodeType":"1696","messageId":"1697","endLine":11,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1712","line":14,"column":3,"nodeType":"1696","messageId":"1697","endLine":14,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1714","line":20,"column":8,"nodeType":"1696","messageId":"1697","endLine":20,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1754","line":32,"column":8,"nodeType":"1696","messageId":"1697","endLine":32,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1785","line":54,"column":9,"nodeType":"1696","messageId":"1697","endLine":54,"endColumn":16},{"ruleId":"1694","severity":1,"message":"1770","line":61,"column":11,"nodeType":"1696","messageId":"1697","endLine":61,"endColumn":13},{"ruleId":"1707","severity":1,"message":"1708","line":62,"column":3,"nodeType":"1709","messageId":"1710","endLine":62,"endColumn":14},{"ruleId":"1707","severity":1,"message":"1708","line":92,"column":9,"nodeType":"1709","messageId":"1710","endLine":92,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":110,"column":9,"nodeType":"1709","messageId":"1710","endLine":110,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":175,"column":9,"nodeType":"1709","messageId":"1710","endLine":175,"endColumn":22},{"ruleId":"1694","severity":1,"message":"1780","line":3,"column":10,"nodeType":"1696","messageId":"1697","endLine":3,"endColumn":16},{"ruleId":"1728","severity":1,"message":"1755","line":9,"column":1,"nodeType":"1730","messageId":"1731","endLine":9,"endColumn":52},{"ruleId":"1694","severity":1,"message":"1781","line":22,"column":21,"nodeType":"1696","messageId":"1697","endLine":22,"endColumn":25},{"ruleId":"1694","severity":1,"message":"1783","line":28,"column":8,"nodeType":"1696","messageId":"1697","endLine":28,"endColumn":17},{"ruleId":"1728","severity":1,"message":"1764","line":30,"column":1,"nodeType":"1730","messageId":"1731","endLine":30,"endColumn":47},{"ruleId":"1728","severity":1,"message":"1784","line":34,"column":1,"nodeType":"1730","messageId":"1731","endLine":34,"endColumn":69},{"ruleId":"1694","severity":1,"message":"1785","line":39,"column":9,"nodeType":"1696","messageId":"1697","endLine":39,"endColumn":16},{"ruleId":"1694","severity":1,"message":"1786","line":46,"column":44,"nodeType":"1696","messageId":"1697","endLine":46,"endColumn":49},{"ruleId":"1707","severity":1,"message":"1708","line":88,"column":9,"nodeType":"1709","messageId":"1710","endLine":88,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":100,"column":9,"nodeType":"1709","messageId":"1710","endLine":100,"endColumn":22},{"ruleId":"1694","severity":1,"message":"1737","line":210,"column":31,"nodeType":"1696","messageId":"1697","endLine":210,"endColumn":32},{"ruleId":"1694","severity":1,"message":"1753","line":5,"column":3,"nodeType":"1696","messageId":"1697","endLine":5,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1712","line":6,"column":3,"nodeType":"1696","messageId":"1697","endLine":6,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1787","line":14,"column":32,"nodeType":"1696","messageId":"1697","endLine":14,"endColumn":38},{"ruleId":"1694","severity":1,"message":"1754","line":17,"column":8,"nodeType":"1696","messageId":"1697","endLine":17,"endColumn":27},{"ruleId":"1728","severity":1,"message":"1755","line":18,"column":1,"nodeType":"1730","messageId":"1731","endLine":18,"endColumn":52},{"ruleId":"1694","severity":1,"message":"1788","line":20,"column":8,"nodeType":"1696","messageId":"1697","endLine":20,"endColumn":12},{"ruleId":"1694","severity":1,"message":"1789","line":21,"column":10,"nodeType":"1696","messageId":"1697","endLine":21,"endColumn":28},{"ruleId":"1728","severity":1,"message":"1790","line":24,"column":1,"nodeType":"1730","messageId":"1731","endLine":24,"endColumn":63},{"ruleId":"1694","severity":1,"message":"1732","line":24,"column":10,"nodeType":"1696","messageId":"1697","endLine":24,"endColumn":23},{"ruleId":"1694","severity":1,"message":"1791","line":26,"column":24,"nodeType":"1696","messageId":"1697","endLine":26,"endColumn":35},{"ruleId":"1728","severity":1,"message":"1792","line":29,"column":1,"nodeType":"1730","messageId":"1731","endLine":29,"endColumn":50},{"ruleId":"1694","severity":1,"message":"1793","line":37,"column":11,"nodeType":"1696","messageId":"1697","endLine":37,"endColumn":30},{"ruleId":"1694","severity":1,"message":"1794","line":38,"column":10,"nodeType":"1696","messageId":"1697","endLine":38,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1795","line":38,"column":30,"nodeType":"1696","messageId":"1697","endLine":38,"endColumn":33},{"ruleId":"1707","severity":1,"message":"1708","line":67,"column":7,"nodeType":"1709","messageId":"1710","endLine":67,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1712","line":6,"column":3,"nodeType":"1696","messageId":"1697","endLine":6,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1796","line":16,"column":8,"nodeType":"1696","messageId":"1697","endLine":16,"endColumn":21},{"ruleId":"1694","severity":1,"message":"1797","line":17,"column":10,"nodeType":"1696","messageId":"1697","endLine":17,"endColumn":16},{"ruleId":"1694","severity":1,"message":"1798","line":17,"column":18,"nodeType":"1696","messageId":"1697","endLine":17,"endColumn":22},{"ruleId":"1694","severity":1,"message":"1799","line":18,"column":10,"nodeType":"1696","messageId":"1697","endLine":18,"endColumn":35},{"ruleId":"1694","severity":1,"message":"1787","line":21,"column":32,"nodeType":"1696","messageId":"1697","endLine":21,"endColumn":38},{"ruleId":"1694","severity":1,"message":"1754","line":24,"column":8,"nodeType":"1696","messageId":"1697","endLine":24,"endColumn":27},{"ruleId":"1728","severity":1,"message":"1755","line":25,"column":1,"nodeType":"1730","messageId":"1731","endLine":25,"endColumn":52},{"ruleId":"1728","severity":1,"message":"1790","line":28,"column":1,"nodeType":"1730","messageId":"1731","endLine":28,"endColumn":68},{"ruleId":"1728","severity":1,"message":"1790","line":31,"column":1,"nodeType":"1730","messageId":"1731","endLine":31,"endColumn":63},{"ruleId":"1694","severity":1,"message":"1732","line":31,"column":10,"nodeType":"1696","messageId":"1697","endLine":31,"endColumn":23},{"ruleId":"1694","severity":1,"message":"1791","line":33,"column":24,"nodeType":"1696","messageId":"1697","endLine":33,"endColumn":35},{"ruleId":"1728","severity":1,"message":"1792","line":36,"column":1,"nodeType":"1730","messageId":"1731","endLine":36,"endColumn":50},{"ruleId":"1707","severity":1,"message":"1708","line":95,"column":7,"nodeType":"1709","messageId":"1710","endLine":95,"endColumn":20},{"ruleId":"1800","severity":1,"message":"1801","line":97,"column":6,"nodeType":"1802","endLine":97,"endColumn":12,"suggestions":"1803"},{"ruleId":"1694","severity":1,"message":"1804","line":98,"column":41,"nodeType":"1696","messageId":"1697","endLine":98,"endColumn":47},{"ruleId":"1694","severity":1,"message":"1712","line":6,"column":3,"nodeType":"1696","messageId":"1697","endLine":6,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1754","line":13,"column":8,"nodeType":"1696","messageId":"1697","endLine":13,"endColumn":27},{"ruleId":"1728","severity":1,"message":"1755","line":14,"column":1,"nodeType":"1730","messageId":"1731","endLine":14,"endColumn":52},{"ruleId":"1728","severity":1,"message":"1790","line":20,"column":1,"nodeType":"1730","messageId":"1731","endLine":20,"endColumn":63},{"ruleId":"1694","severity":1,"message":"1732","line":20,"column":10,"nodeType":"1696","messageId":"1697","endLine":20,"endColumn":23},{"ruleId":"1694","severity":1,"message":"1791","line":22,"column":24,"nodeType":"1696","messageId":"1697","endLine":22,"endColumn":35},{"ruleId":"1694","severity":1,"message":"1794","line":32,"column":10,"nodeType":"1696","messageId":"1697","endLine":32,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1795","line":32,"column":30,"nodeType":"1696","messageId":"1697","endLine":32,"endColumn":33},{"ruleId":"1707","severity":1,"message":"1708","line":43,"column":9,"nodeType":"1709","messageId":"1710","endLine":43,"endColumn":20},{"ruleId":"1707","severity":1,"message":"1708","line":50,"column":9,"nodeType":"1709","messageId":"1710","endLine":50,"endColumn":22},{"ruleId":"1805","severity":1,"message":"1806","line":110,"column":31,"nodeType":"1807","messageId":"1808","endLine":110,"endColumn":42,"fix":"1809"},{"ruleId":"1805","severity":1,"message":"1806","line":120,"column":31,"nodeType":"1807","messageId":"1808","endLine":120,"endColumn":38,"fix":"1810"},{"ruleId":"1694","severity":1,"message":"1766","line":6,"column":8,"nodeType":"1696","messageId":"1697","endLine":6,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1753","line":15,"column":3,"nodeType":"1696","messageId":"1697","endLine":15,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1811","line":58,"column":8,"nodeType":"1696","messageId":"1697","endLine":58,"endColumn":25},{"ruleId":"1707","severity":1,"message":"1708","line":168,"column":9,"nodeType":"1709","messageId":"1710","endLine":168,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":210,"column":5,"nodeType":"1709","messageId":"1710","endLine":210,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":230,"column":7,"nodeType":"1709","messageId":"1710","endLine":230,"endColumn":20},{"ruleId":"1707","severity":1,"message":"1708","line":235,"column":5,"nodeType":"1709","messageId":"1710","endLine":235,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":270,"column":7,"nodeType":"1709","messageId":"1710","endLine":270,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":290,"column":7,"nodeType":"1709","messageId":"1710","endLine":290,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1777","line":310,"column":9,"nodeType":"1696","messageId":"1697","endLine":310,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1778","line":329,"column":9,"nodeType":"1696","messageId":"1697","endLine":329,"endColumn":10},{"ruleId":"1728","severity":1,"message":"1736","line":6,"column":1,"nodeType":"1730","messageId":"1731","endLine":6,"endColumn":60},{"ruleId":"1707","severity":1,"message":"1708","line":92,"column":9,"nodeType":"1709","messageId":"1710","endLine":92,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":157,"column":9,"nodeType":"1709","messageId":"1710","endLine":157,"endColumn":22},{"ruleId":"1694","severity":1,"message":"1754","line":13,"column":8,"nodeType":"1696","messageId":"1697","endLine":13,"endColumn":27},{"ruleId":"1728","severity":1,"message":"1755","line":14,"column":1,"nodeType":"1730","messageId":"1731","endLine":14,"endColumn":52},{"ruleId":"1728","severity":1,"message":"1790","line":20,"column":1,"nodeType":"1730","messageId":"1731","endLine":20,"endColumn":63},{"ruleId":"1694","severity":1,"message":"1732","line":20,"column":10,"nodeType":"1696","messageId":"1697","endLine":20,"endColumn":23},{"ruleId":"1694","severity":1,"message":"1791","line":22,"column":24,"nodeType":"1696","messageId":"1697","endLine":22,"endColumn":35},{"ruleId":"1694","severity":1,"message":"1794","line":29,"column":10,"nodeType":"1696","messageId":"1697","endLine":29,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1795","line":29,"column":30,"nodeType":"1696","messageId":"1697","endLine":29,"endColumn":33},{"ruleId":"1707","severity":1,"message":"1708","line":46,"column":9,"nodeType":"1709","messageId":"1710","endLine":46,"endColumn":22},{"ruleId":"1694","severity":1,"message":"1763","line":69,"column":34,"nodeType":"1696","messageId":"1697","endLine":69,"endColumn":39},{"ruleId":"1728","severity":1,"message":"1755","line":7,"column":1,"nodeType":"1730","messageId":"1731","endLine":7,"endColumn":52},{"ruleId":"1694","severity":1,"message":"1791","line":15,"column":24,"nodeType":"1696","messageId":"1697","endLine":15,"endColumn":35},{"ruleId":"1694","severity":1,"message":"1733","line":21,"column":9,"nodeType":"1696","messageId":"1697","endLine":21,"endColumn":14},{"ruleId":"1694","severity":1,"message":"1794","line":22,"column":10,"nodeType":"1696","messageId":"1697","endLine":22,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1795","line":22,"column":30,"nodeType":"1696","messageId":"1697","endLine":22,"endColumn":33},{"ruleId":"1707","severity":1,"message":"1708","line":38,"column":9,"nodeType":"1709","messageId":"1710","endLine":38,"endColumn":22},{"ruleId":"1694","severity":1,"message":"1763","line":62,"column":34,"nodeType":"1696","messageId":"1697","endLine":62,"endColumn":39},{"ruleId":"1694","severity":1,"message":"1712","line":6,"column":3,"nodeType":"1696","messageId":"1697","endLine":6,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1796","line":12,"column":8,"nodeType":"1696","messageId":"1697","endLine":12,"endColumn":21},{"ruleId":"1694","severity":1,"message":"1797","line":13,"column":10,"nodeType":"1696","messageId":"1697","endLine":13,"endColumn":16},{"ruleId":"1694","severity":1,"message":"1798","line":13,"column":18,"nodeType":"1696","messageId":"1697","endLine":13,"endColumn":22},{"ruleId":"1694","severity":1,"message":"1799","line":14,"column":10,"nodeType":"1696","messageId":"1697","endLine":14,"endColumn":35},{"ruleId":"1694","severity":1,"message":"1787","line":17,"column":32,"nodeType":"1696","messageId":"1697","endLine":17,"endColumn":38},{"ruleId":"1694","severity":1,"message":"1754","line":20,"column":8,"nodeType":"1696","messageId":"1697","endLine":20,"endColumn":27},{"ruleId":"1728","severity":1,"message":"1755","line":21,"column":1,"nodeType":"1730","messageId":"1731","endLine":21,"endColumn":52},{"ruleId":"1728","severity":1,"message":"1790","line":27,"column":1,"nodeType":"1730","messageId":"1731","endLine":27,"endColumn":63},{"ruleId":"1694","severity":1,"message":"1732","line":27,"column":10,"nodeType":"1696","messageId":"1697","endLine":27,"endColumn":23},{"ruleId":"1694","severity":1,"message":"1791","line":29,"column":24,"nodeType":"1696","messageId":"1697","endLine":29,"endColumn":35},{"ruleId":"1728","severity":1,"message":"1792","line":32,"column":1,"nodeType":"1730","messageId":"1731","endLine":32,"endColumn":50},{"ruleId":"1694","severity":1,"message":"1794","line":41,"column":10,"nodeType":"1696","messageId":"1697","endLine":41,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1795","line":41,"column":30,"nodeType":"1696","messageId":"1697","endLine":41,"endColumn":33},{"ruleId":"1694","severity":1,"message":"1812","line":60,"column":9,"nodeType":"1696","messageId":"1697","endLine":60,"endColumn":17},{"ruleId":"1707","severity":1,"message":"1708","line":60,"column":26,"nodeType":"1709","messageId":"1710","endLine":60,"endColumn":37},{"ruleId":"1707","severity":1,"message":"1708","line":71,"column":9,"nodeType":"1709","messageId":"1710","endLine":71,"endColumn":22},{"ruleId":"1805","severity":1,"message":"1806","line":158,"column":35,"nodeType":"1807","messageId":"1808","endLine":158,"endColumn":46,"fix":"1813"},{"ruleId":"1805","severity":1,"message":"1806","line":168,"column":35,"nodeType":"1807","messageId":"1808","endLine":168,"endColumn":42,"fix":"1814"},{"ruleId":"1694","severity":1,"message":"1815","line":23,"column":9,"nodeType":"1696","messageId":"1697","endLine":23,"endColumn":16},{"ruleId":"1694","severity":1,"message":"1816","line":6,"column":22,"nodeType":"1696","messageId":"1697","endLine":6,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1781","line":2,"column":10,"nodeType":"1696","messageId":"1697","endLine":2,"endColumn":14},{"ruleId":"1694","severity":1,"message":"1754","line":6,"column":8,"nodeType":"1696","messageId":"1697","endLine":6,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1817","line":17,"column":10,"nodeType":"1696","messageId":"1697","endLine":17,"endColumn":28},{"ruleId":"1728","severity":1,"message":"1755","line":19,"column":1,"nodeType":"1730","messageId":"1731","endLine":19,"endColumn":52},{"ruleId":"1694","severity":1,"message":"1733","line":37,"column":9,"nodeType":"1696","messageId":"1697","endLine":37,"endColumn":14},{"ruleId":"1694","severity":1,"message":"1818","line":40,"column":11,"nodeType":"1696","messageId":"1697","endLine":40,"endColumn":26},{"ruleId":"1707","severity":1,"message":"1708","line":87,"column":9,"nodeType":"1709","messageId":"1710","endLine":87,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":91,"column":3,"nodeType":"1709","messageId":"1710","endLine":91,"endColumn":14},{"ruleId":"1694","severity":1,"message":"1819","line":98,"column":15,"nodeType":"1696","messageId":"1697","endLine":98,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1820","line":185,"column":19,"nodeType":"1696","messageId":"1697","endLine":185,"endColumn":25},{"ruleId":"1694","severity":1,"message":"1821","line":186,"column":19,"nodeType":"1696","messageId":"1697","endLine":186,"endColumn":28},{"ruleId":"1694","severity":1,"message":"1822","line":187,"column":19,"nodeType":"1696","messageId":"1697","endLine":187,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1823","line":188,"column":19,"nodeType":"1696","messageId":"1697","endLine":188,"endColumn":23},{"ruleId":"1694","severity":1,"message":"1824","line":189,"column":19,"nodeType":"1696","messageId":"1697","endLine":189,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1825","line":191,"column":19,"nodeType":"1696","messageId":"1697","endLine":191,"endColumn":32},{"ruleId":"1694","severity":1,"message":"1826","line":193,"column":19,"nodeType":"1696","messageId":"1697","endLine":193,"endColumn":25},{"ruleId":"1694","severity":1,"message":"1827","line":195,"column":23,"nodeType":"1696","messageId":"1697","endLine":195,"endColumn":37},{"ruleId":"1694","severity":1,"message":"1828","line":9,"column":8,"nodeType":"1696","messageId":"1697","endLine":9,"endColumn":15},{"ruleId":"1694","severity":1,"message":"1753","line":15,"column":3,"nodeType":"1696","messageId":"1697","endLine":15,"endColumn":9},{"ruleId":"1728","severity":1,"message":"1755","line":22,"column":1,"nodeType":"1730","messageId":"1731","endLine":22,"endColumn":64},{"ruleId":"1694","severity":1,"message":"1829","line":28,"column":8,"nodeType":"1696","messageId":"1697","endLine":28,"endColumn":16},{"ruleId":"1694","severity":1,"message":"1766","line":32,"column":8,"nodeType":"1696","messageId":"1697","endLine":32,"endColumn":18},{"ruleId":"1728","severity":1,"message":"1792","line":36,"column":1,"nodeType":"1730","messageId":"1731","endLine":36,"endColumn":52},{"ruleId":"1694","severity":1,"message":"1830","line":184,"column":9,"nodeType":"1696","messageId":"1697","endLine":184,"endColumn":31},{"ruleId":"1707","severity":1,"message":"1708","line":195,"column":7,"nodeType":"1709","messageId":"1710","endLine":195,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1831","line":227,"column":11,"nodeType":"1696","messageId":"1697","endLine":227,"endColumn":22},{"ruleId":"1694","severity":1,"message":"1832","line":227,"column":38,"nodeType":"1696","messageId":"1697","endLine":227,"endColumn":42},{"ruleId":"1694","severity":1,"message":"1833","line":245,"column":10,"nodeType":"1696","messageId":"1697","endLine":245,"endColumn":15},{"ruleId":"1694","severity":1,"message":"1834","line":246,"column":9,"nodeType":"1696","messageId":"1697","endLine":246,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1835","line":251,"column":28,"nodeType":"1696","messageId":"1697","endLine":251,"endColumn":34},{"ruleId":"1694","severity":1,"message":"1824","line":348,"column":61,"nodeType":"1696","messageId":"1697","endLine":348,"endColumn":69},{"ruleId":"1728","severity":1,"message":"1747","line":19,"column":1,"nodeType":"1730","messageId":"1731","endLine":19,"endColumn":59},{"ruleId":"1707","severity":1,"message":"1708","line":90,"column":7,"nodeType":"1709","messageId":"1710","endLine":90,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1836","line":13,"column":28,"nodeType":"1696","messageId":"1697","endLine":13,"endColumn":40},{"ruleId":"1707","severity":1,"message":"1708","line":92,"column":7,"nodeType":"1709","messageId":"1710","endLine":92,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1837","line":12,"column":3,"nodeType":"1696","messageId":"1697","endLine":12,"endColumn":8},{"ruleId":"1694","severity":1,"message":"1753","line":13,"column":3,"nodeType":"1696","messageId":"1697","endLine":13,"endColumn":9},{"ruleId":"1728","severity":1,"message":"1755","line":17,"column":1,"nodeType":"1730","messageId":"1731","endLine":17,"endColumn":52},{"ruleId":"1694","severity":1,"message":"1766","line":19,"column":8,"nodeType":"1696","messageId":"1697","endLine":19,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1829","line":25,"column":8,"nodeType":"1696","messageId":"1697","endLine":25,"endColumn":16},{"ruleId":"1694","severity":1,"message":"1838","line":34,"column":3,"nodeType":"1696","messageId":"1697","endLine":34,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":224,"column":7,"nodeType":"1709","messageId":"1710","endLine":224,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1753","line":8,"column":3,"nodeType":"1696","messageId":"1697","endLine":8,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1754","line":22,"column":8,"nodeType":"1696","messageId":"1697","endLine":22,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1781","line":23,"column":10,"nodeType":"1696","messageId":"1697","endLine":23,"endColumn":14},{"ruleId":"1728","severity":1,"message":"1736","line":29,"column":1,"nodeType":"1730","messageId":"1731","endLine":29,"endColumn":46},{"ruleId":"1728","severity":1,"message":"1755","line":31,"column":1,"nodeType":"1730","messageId":"1731","endLine":31,"endColumn":57},{"ruleId":"1707","severity":1,"message":"1708","line":152,"column":5,"nodeType":"1709","messageId":"1710","endLine":152,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":77,"column":3,"nodeType":"1709","messageId":"1710","endLine":77,"endColumn":14},{"ruleId":"1707","severity":1,"message":"1708","line":111,"column":7,"nodeType":"1709","messageId":"1710","endLine":111,"endColumn":18},{"ruleId":"1728","severity":1,"message":"1764","line":8,"column":1,"nodeType":"1730","messageId":"1731","endLine":8,"endColumn":47},{"ruleId":"1728","severity":1,"message":"1764","line":9,"column":1,"nodeType":"1730","messageId":"1731","endLine":9,"endColumn":41},{"ruleId":"1728","severity":1,"message":"1839","line":21,"column":1,"nodeType":"1730","messageId":"1731","endLine":21,"endColumn":57},{"ruleId":"1707","severity":1,"message":"1708","line":148,"column":7,"nodeType":"1709","messageId":"1710","endLine":148,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":165,"column":7,"nodeType":"1709","messageId":"1710","endLine":165,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":189,"column":7,"nodeType":"1709","messageId":"1710","endLine":189,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":277,"column":7,"nodeType":"1709","messageId":"1710","endLine":277,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1711","line":5,"column":3,"nodeType":"1696","messageId":"1697","endLine":5,"endColumn":13},{"ruleId":"1694","severity":1,"message":"1712","line":9,"column":3,"nodeType":"1696","messageId":"1697","endLine":9,"endColumn":9},{"ruleId":"1728","severity":1,"message":"1755","line":15,"column":1,"nodeType":"1730","messageId":"1731","endLine":15,"endColumn":52},{"ruleId":"1694","severity":1,"message":"1714","line":25,"column":8,"nodeType":"1696","messageId":"1697","endLine":25,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1711","line":13,"column":3,"nodeType":"1696","messageId":"1697","endLine":13,"endColumn":13},{"ruleId":"1728","severity":1,"message":"1839","line":37,"column":1,"nodeType":"1730","messageId":"1731","endLine":37,"endColumn":65},{"ruleId":"1694","severity":1,"message":"1838","line":40,"column":3,"nodeType":"1696","messageId":"1697","endLine":40,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":158,"column":7,"nodeType":"1709","messageId":"1710","endLine":158,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":224,"column":5,"nodeType":"1709","messageId":"1710","endLine":224,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":593,"column":26,"nodeType":"1709","messageId":"1710","endLine":593,"endColumn":37},{"ruleId":"1694","severity":1,"message":"1766","line":6,"column":8,"nodeType":"1696","messageId":"1697","endLine":6,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1712","line":13,"column":3,"nodeType":"1696","messageId":"1697","endLine":13,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1753","line":15,"column":3,"nodeType":"1696","messageId":"1697","endLine":15,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1769","line":57,"column":10,"nodeType":"1696","messageId":"1697","endLine":57,"endColumn":20},{"ruleId":"1707","severity":1,"message":"1708","line":166,"column":9,"nodeType":"1709","messageId":"1710","endLine":166,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":207,"column":5,"nodeType":"1709","messageId":"1710","endLine":207,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":227,"column":7,"nodeType":"1709","messageId":"1710","endLine":227,"endColumn":20},{"ruleId":"1707","severity":1,"message":"1708","line":232,"column":5,"nodeType":"1709","messageId":"1710","endLine":232,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":267,"column":7,"nodeType":"1709","messageId":"1710","endLine":267,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":287,"column":7,"nodeType":"1709","messageId":"1710","endLine":287,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1777","line":307,"column":9,"nodeType":"1696","messageId":"1697","endLine":307,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1778","line":325,"column":9,"nodeType":"1696","messageId":"1697","endLine":325,"endColumn":10},{"ruleId":"1694","severity":1,"message":"1779","line":418,"column":30,"nodeType":"1696","messageId":"1697","endLine":418,"endColumn":42},{"ruleId":"1728","severity":1,"message":"1764","line":8,"column":1,"nodeType":"1730","messageId":"1731","endLine":8,"endColumn":47},{"ruleId":"1707","severity":1,"message":"1708","line":125,"column":7,"nodeType":"1709","messageId":"1710","endLine":125,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1824","line":33,"column":11,"nodeType":"1696","messageId":"1697","endLine":33,"endColumn":19},{"ruleId":"1728","severity":1,"message":"1784","line":13,"column":1,"nodeType":"1730","messageId":"1731","endLine":13,"endColumn":64},{"ruleId":"1707","severity":1,"message":"1708","line":37,"column":9,"nodeType":"1709","messageId":"1710","endLine":37,"endColumn":22},{"ruleId":"1694","severity":1,"message":"1700","line":26,"column":31,"nodeType":"1696","messageId":"1697","endLine":26,"endColumn":36},{"ruleId":"1694","severity":1,"message":"1781","line":3,"column":10,"nodeType":"1696","messageId":"1697","endLine":3,"endColumn":14},{"ruleId":"1694","severity":1,"message":"1753","line":10,"column":3,"nodeType":"1696","messageId":"1697","endLine":10,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1712","line":13,"column":3,"nodeType":"1696","messageId":"1697","endLine":13,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1714","line":19,"column":8,"nodeType":"1696","messageId":"1697","endLine":19,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1754","line":31,"column":8,"nodeType":"1696","messageId":"1697","endLine":31,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1824","line":59,"column":11,"nodeType":"1696","messageId":"1697","endLine":59,"endColumn":19},{"ruleId":"1707","severity":1,"message":"1708","line":88,"column":9,"nodeType":"1709","messageId":"1710","endLine":88,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":153,"column":9,"nodeType":"1709","messageId":"1710","endLine":153,"endColumn":22},{"ruleId":"1694","severity":1,"message":"1711","line":4,"column":3,"nodeType":"1696","messageId":"1697","endLine":4,"endColumn":13},{"ruleId":"1694","severity":1,"message":"1753","line":9,"column":3,"nodeType":"1696","messageId":"1697","endLine":9,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1754","line":12,"column":8,"nodeType":"1696","messageId":"1697","endLine":12,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1781","line":19,"column":10,"nodeType":"1696","messageId":"1697","endLine":19,"endColumn":14},{"ruleId":"1728","severity":1,"message":"1764","line":15,"column":1,"nodeType":"1730","messageId":"1731","endLine":15,"endColumn":46},{"ruleId":"1694","severity":1,"message":"1840","line":8,"column":8,"nodeType":"1696","messageId":"1697","endLine":8,"endColumn":20},{"ruleId":"1707","severity":1,"message":"1708","line":49,"column":9,"nodeType":"1709","messageId":"1710","endLine":49,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":73,"column":7,"nodeType":"1709","messageId":"1710","endLine":73,"endColumn":20},{"ruleId":"1707","severity":1,"message":"1708","line":98,"column":7,"nodeType":"1709","messageId":"1710","endLine":98,"endColumn":20},{"ruleId":"1707","severity":1,"message":"1708","line":115,"column":9,"nodeType":"1709","messageId":"1710","endLine":115,"endColumn":22},{"ruleId":"1719","severity":1,"message":"1841","line":14,"column":3,"nodeType":"1721","messageId":"1722","endLine":14,"endColumn":13},{"ruleId":"1719","severity":1,"message":"1842","line":15,"column":3,"nodeType":"1721","messageId":"1722","endLine":15,"endColumn":14},{"ruleId":"1719","severity":1,"message":"1843","line":16,"column":3,"nodeType":"1721","messageId":"1722","endLine":16,"endColumn":13},{"ruleId":"1719","severity":1,"message":"1844","line":17,"column":3,"nodeType":"1721","messageId":"1722","endLine":17,"endColumn":5},{"ruleId":"1719","severity":1,"message":"1845","line":18,"column":3,"nodeType":"1721","messageId":"1722","endLine":18,"endColumn":9},{"ruleId":"1707","severity":1,"message":"1708","line":51,"column":9,"nodeType":"1709","messageId":"1710","endLine":51,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":68,"column":9,"nodeType":"1709","messageId":"1710","endLine":68,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":93,"column":7,"nodeType":"1709","messageId":"1710","endLine":93,"endColumn":20},{"ruleId":"1707","severity":1,"message":"1708","line":152,"column":7,"nodeType":"1709","messageId":"1710","endLine":152,"endColumn":20},{"ruleId":"1707","severity":1,"message":"1708","line":169,"column":9,"nodeType":"1709","messageId":"1710","endLine":169,"endColumn":22},{"ruleId":"1694","severity":1,"message":"1846","line":15,"column":3,"nodeType":"1696","messageId":"1697","endLine":15,"endColumn":12},{"ruleId":"1694","severity":1,"message":"1717","line":16,"column":3,"nodeType":"1696","messageId":"1697","endLine":16,"endColumn":11},{"ruleId":"1694","severity":1,"message":"1718","line":18,"column":6,"nodeType":"1696","messageId":"1697","endLine":18,"endColumn":10},{"ruleId":"1694","severity":1,"message":"1781","line":2,"column":10,"nodeType":"1696","messageId":"1697","endLine":2,"endColumn":14},{"ruleId":"1694","severity":1,"message":"1711","line":7,"column":3,"nodeType":"1696","messageId":"1697","endLine":7,"endColumn":13},{"ruleId":"1694","severity":1,"message":"1753","line":9,"column":3,"nodeType":"1696","messageId":"1697","endLine":9,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1754","line":23,"column":8,"nodeType":"1696","messageId":"1697","endLine":23,"endColumn":27},{"ruleId":"1728","severity":1,"message":"1764","line":25,"column":1,"nodeType":"1730","messageId":"1731","endLine":25,"endColumn":46},{"ruleId":"1694","severity":1,"message":"1816","line":72,"column":27,"nodeType":"1696","messageId":"1697","endLine":72,"endColumn":32},{"ruleId":"1728","severity":1,"message":"1755","line":12,"column":1,"nodeType":"1730","messageId":"1731","endLine":12,"endColumn":52},{"ruleId":"1707","severity":1,"message":"1708","line":108,"column":7,"nodeType":"1709","messageId":"1710","endLine":108,"endColumn":20},{"ruleId":"1707","severity":1,"message":"1708","line":131,"column":7,"nodeType":"1709","messageId":"1710","endLine":131,"endColumn":20},{"ruleId":"1707","severity":1,"message":"1708","line":148,"column":9,"nodeType":"1709","messageId":"1710","endLine":148,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":162,"column":9,"nodeType":"1709","messageId":"1710","endLine":162,"endColumn":22},{"ruleId":"1694","severity":1,"message":"1847","line":220,"column":48,"nodeType":"1696","messageId":"1697","endLine":220,"endColumn":55},{"ruleId":"1728","severity":1,"message":"1764","line":7,"column":1,"nodeType":"1730","messageId":"1731","endLine":7,"endColumn":47},{"ruleId":"1707","severity":1,"message":"1708","line":112,"column":7,"nodeType":"1709","messageId":"1710","endLine":112,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":73,"column":7,"nodeType":"1709","messageId":"1710","endLine":73,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":96,"column":7,"nodeType":"1709","messageId":"1710","endLine":96,"endColumn":20},{"ruleId":"1707","severity":1,"message":"1708","line":119,"column":7,"nodeType":"1709","messageId":"1710","endLine":119,"endColumn":20},{"ruleId":"1707","severity":1,"message":"1708","line":136,"column":9,"nodeType":"1709","messageId":"1710","endLine":136,"endColumn":22},{"ruleId":"1728","severity":1,"message":"1736","line":6,"column":1,"nodeType":"1730","messageId":"1731","endLine":6,"endColumn":60},{"ruleId":"1694","severity":1,"message":"1753","line":11,"column":3,"nodeType":"1696","messageId":"1697","endLine":11,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1712","line":14,"column":3,"nodeType":"1696","messageId":"1697","endLine":14,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1714","line":20,"column":8,"nodeType":"1696","messageId":"1697","endLine":20,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1754","line":32,"column":8,"nodeType":"1696","messageId":"1697","endLine":32,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1785","line":54,"column":9,"nodeType":"1696","messageId":"1697","endLine":54,"endColumn":16},{"ruleId":"1694","severity":1,"message":"1770","line":61,"column":11,"nodeType":"1696","messageId":"1697","endLine":61,"endColumn":13},{"ruleId":"1707","severity":1,"message":"1708","line":91,"column":9,"nodeType":"1709","messageId":"1710","endLine":91,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":109,"column":9,"nodeType":"1709","messageId":"1710","endLine":109,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":174,"column":9,"nodeType":"1709","messageId":"1710","endLine":174,"endColumn":22},{"ruleId":"1728","severity":1,"message":"1755","line":10,"column":1,"nodeType":"1730","messageId":"1731","endLine":10,"endColumn":45},{"ruleId":"1707","severity":1,"message":"1708","line":136,"column":7,"nodeType":"1709","messageId":"1710","endLine":136,"endColumn":20},{"ruleId":"1728","severity":1,"message":"1839","line":12,"column":1,"nodeType":"1730","messageId":"1731","endLine":12,"endColumn":65},{"ruleId":"1707","severity":1,"message":"1708","line":106,"column":7,"nodeType":"1709","messageId":"1710","endLine":106,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":165,"column":7,"nodeType":"1709","messageId":"1710","endLine":165,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1712","line":6,"column":3,"nodeType":"1696","messageId":"1697","endLine":6,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1796","line":12,"column":8,"nodeType":"1696","messageId":"1697","endLine":12,"endColumn":21},{"ruleId":"1694","severity":1,"message":"1797","line":13,"column":10,"nodeType":"1696","messageId":"1697","endLine":13,"endColumn":16},{"ruleId":"1694","severity":1,"message":"1798","line":13,"column":18,"nodeType":"1696","messageId":"1697","endLine":13,"endColumn":22},{"ruleId":"1694","severity":1,"message":"1799","line":14,"column":10,"nodeType":"1696","messageId":"1697","endLine":14,"endColumn":35},{"ruleId":"1694","severity":1,"message":"1787","line":17,"column":32,"nodeType":"1696","messageId":"1697","endLine":17,"endColumn":38},{"ruleId":"1694","severity":1,"message":"1754","line":20,"column":8,"nodeType":"1696","messageId":"1697","endLine":20,"endColumn":27},{"ruleId":"1728","severity":1,"message":"1755","line":21,"column":1,"nodeType":"1730","messageId":"1731","endLine":21,"endColumn":52},{"ruleId":"1728","severity":1,"message":"1790","line":27,"column":1,"nodeType":"1730","messageId":"1731","endLine":27,"endColumn":63},{"ruleId":"1694","severity":1,"message":"1732","line":27,"column":10,"nodeType":"1696","messageId":"1697","endLine":27,"endColumn":23},{"ruleId":"1694","severity":1,"message":"1791","line":29,"column":24,"nodeType":"1696","messageId":"1697","endLine":29,"endColumn":35},{"ruleId":"1728","severity":1,"message":"1792","line":32,"column":1,"nodeType":"1730","messageId":"1731","endLine":32,"endColumn":55},{"ruleId":"1707","severity":1,"message":"1708","line":89,"column":7,"nodeType":"1709","messageId":"1710","endLine":89,"endColumn":20},{"ruleId":"1800","severity":1,"message":"1801","line":91,"column":6,"nodeType":"1802","endLine":91,"endColumn":12,"suggestions":"1848"},{"ruleId":"1694","severity":1,"message":"1753","line":4,"column":3,"nodeType":"1696","messageId":"1697","endLine":4,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1712","line":8,"column":3,"nodeType":"1696","messageId":"1697","endLine":8,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1754","line":10,"column":8,"nodeType":"1696","messageId":"1697","endLine":10,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1781","line":11,"column":10,"nodeType":"1696","messageId":"1697","endLine":11,"endColumn":14},{"ruleId":"1694","severity":1,"message":"1714","line":21,"column":8,"nodeType":"1696","messageId":"1697","endLine":21,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1847","line":176,"column":38,"nodeType":"1696","messageId":"1697","endLine":176,"endColumn":45},{"ruleId":"1728","severity":1,"message":"1849","line":13,"column":1,"nodeType":"1730","messageId":"1731","endLine":13,"endColumn":51},{"ruleId":"1694","severity":1,"message":"1850","line":14,"column":10,"nodeType":"1696","messageId":"1697","endLine":14,"endColumn":24},{"ruleId":"1694","severity":1,"message":"1700","line":4,"column":38,"nodeType":"1696","messageId":"1697","endLine":4,"endColumn":43},{"ruleId":"1728","severity":1,"message":"1851","line":10,"column":1,"nodeType":"1730","messageId":"1731","endLine":10,"endColumn":45},{"ruleId":"1707","severity":1,"message":"1708","line":115,"column":7,"nodeType":"1709","messageId":"1710","endLine":115,"endColumn":20},{"ruleId":"1707","severity":1,"message":"1708","line":181,"column":41,"nodeType":"1709","messageId":"1710","endLine":181,"endColumn":52},{"ruleId":"1707","severity":1,"message":"1708","line":183,"column":36,"nodeType":"1709","messageId":"1710","endLine":183,"endColumn":47},{"ruleId":"1707","severity":1,"message":"1708","line":184,"column":34,"nodeType":"1709","messageId":"1710","endLine":184,"endColumn":45},{"ruleId":"1694","severity":1,"message":"1852","line":621,"column":7,"nodeType":"1696","messageId":"1697","endLine":621,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1853","line":637,"column":7,"nodeType":"1696","messageId":"1697","endLine":637,"endColumn":22},{"ruleId":"1694","severity":1,"message":"1854","line":656,"column":7,"nodeType":"1696","messageId":"1697","endLine":656,"endColumn":25},{"ruleId":"1694","severity":1,"message":"1855","line":682,"column":7,"nodeType":"1696","messageId":"1697","endLine":682,"endColumn":11},{"ruleId":"1694","severity":1,"message":"1856","line":705,"column":7,"nodeType":"1696","messageId":"1697","endLine":705,"endColumn":10},{"ruleId":"1707","severity":1,"message":"1708","line":31,"column":7,"nodeType":"1709","messageId":"1710","endLine":31,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1857","line":331,"column":15,"nodeType":"1696","messageId":"1697","endLine":331,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1858","line":331,"column":29,"nodeType":"1696","messageId":"1697","endLine":331,"endColumn":34},{"ruleId":"1694","severity":1,"message":"1859","line":331,"column":36,"nodeType":"1696","messageId":"1697","endLine":331,"endColumn":43},{"ruleId":"1728","severity":1,"message":"1747","line":5,"column":1,"nodeType":"1730","messageId":"1731","endLine":5,"endColumn":69},{"ruleId":"1694","severity":1,"message":"1771","line":11,"column":10,"nodeType":"1696","messageId":"1697","endLine":11,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1860","line":45,"column":9,"nodeType":"1696","messageId":"1697","endLine":45,"endColumn":17},{"ruleId":"1707","severity":1,"message":"1708","line":120,"column":7,"nodeType":"1709","messageId":"1710","endLine":120,"endColumn":18},{"ruleId":"1728","severity":1,"message":"1764","line":5,"column":1,"nodeType":"1730","messageId":"1731","endLine":5,"endColumn":46},{"ruleId":"1707","severity":1,"message":"1708","line":64,"column":9,"nodeType":"1709","messageId":"1710","endLine":64,"endColumn":20},{"ruleId":"1707","severity":1,"message":"1708","line":219,"column":7,"nodeType":"1709","messageId":"1710","endLine":219,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1861","line":1,"column":17,"nodeType":"1696","messageId":"1697","endLine":1,"endColumn":25},{"ruleId":"1694","severity":1,"message":"1862","line":1,"column":27,"nodeType":"1696","messageId":"1697","endLine":1,"endColumn":36},{"ruleId":"1694","severity":1,"message":"1863","line":4,"column":10,"nodeType":"1696","messageId":"1697","endLine":4,"endColumn":21},{"ruleId":"1694","severity":1,"message":"1766","line":6,"column":8,"nodeType":"1696","messageId":"1697","endLine":6,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1864","line":8,"column":8,"nodeType":"1696","messageId":"1697","endLine":8,"endColumn":25},{"ruleId":"1694","severity":1,"message":"1865","line":9,"column":33,"nodeType":"1696","messageId":"1697","endLine":9,"endColumn":45},{"ruleId":"1694","severity":1,"message":"1866","line":11,"column":3,"nodeType":"1696","messageId":"1697","endLine":11,"endColumn":11},{"ruleId":"1694","severity":1,"message":"1867","line":12,"column":3,"nodeType":"1696","messageId":"1697","endLine":12,"endColumn":12},{"ruleId":"1694","severity":1,"message":"1712","line":13,"column":3,"nodeType":"1696","messageId":"1697","endLine":13,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1868","line":14,"column":3,"nodeType":"1696","messageId":"1697","endLine":14,"endColumn":11},{"ruleId":"1694","severity":1,"message":"1753","line":15,"column":3,"nodeType":"1696","messageId":"1697","endLine":15,"endColumn":9},{"ruleId":"1694","severity":1,"message":"1711","line":17,"column":3,"nodeType":"1696","messageId":"1697","endLine":17,"endColumn":13},{"ruleId":"1694","severity":1,"message":"1869","line":21,"column":10,"nodeType":"1696","messageId":"1697","endLine":21,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1870","line":22,"column":10,"nodeType":"1696","messageId":"1697","endLine":22,"endColumn":31},{"ruleId":"1694","severity":1,"message":"1871","line":22,"column":33,"nodeType":"1696","messageId":"1697","endLine":22,"endColumn":48},{"ruleId":"1694","severity":1,"message":"1872","line":23,"column":10,"nodeType":"1696","messageId":"1697","endLine":23,"endColumn":19},{"ruleId":"1694","severity":1,"message":"1873","line":24,"column":10,"nodeType":"1696","messageId":"1697","endLine":24,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1817","line":25,"column":10,"nodeType":"1696","messageId":"1697","endLine":25,"endColumn":28},{"ruleId":"1694","severity":1,"message":"1874","line":27,"column":3,"nodeType":"1696","messageId":"1697","endLine":27,"endColumn":19},{"ruleId":"1694","severity":1,"message":"1875","line":28,"column":3,"nodeType":"1696","messageId":"1697","endLine":28,"endColumn":13},{"ruleId":"1694","severity":1,"message":"1876","line":29,"column":3,"nodeType":"1696","messageId":"1697","endLine":29,"endColumn":12},{"ruleId":"1694","severity":1,"message":"1877","line":30,"column":3,"nodeType":"1696","messageId":"1697","endLine":30,"endColumn":13},{"ruleId":"1694","severity":1,"message":"1878","line":31,"column":3,"nodeType":"1696","messageId":"1697","endLine":31,"endColumn":19},{"ruleId":"1694","severity":1,"message":"1879","line":34,"column":8,"nodeType":"1696","messageId":"1697","endLine":34,"endColumn":21},{"ruleId":"1694","severity":1,"message":"1880","line":35,"column":10,"nodeType":"1696","messageId":"1697","endLine":35,"endColumn":27},{"ruleId":"1694","severity":1,"message":"1881","line":36,"column":10,"nodeType":"1696","messageId":"1697","endLine":36,"endColumn":23},{"ruleId":"1694","severity":1,"message":"1780","line":36,"column":25,"nodeType":"1696","messageId":"1697","endLine":36,"endColumn":31},{"ruleId":"1694","severity":1,"message":"1882","line":36,"column":33,"nodeType":"1696","messageId":"1697","endLine":36,"endColumn":43},{"ruleId":"1694","severity":1,"message":"1883","line":39,"column":3,"nodeType":"1696","messageId":"1697","endLine":39,"endColumn":21},{"ruleId":"1694","severity":1,"message":"1884","line":40,"column":3,"nodeType":"1696","messageId":"1697","endLine":40,"endColumn":30},{"ruleId":"1694","severity":1,"message":"1885","line":44,"column":3,"nodeType":"1696","messageId":"1697","endLine":44,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1886","line":46,"column":3,"nodeType":"1696","messageId":"1697","endLine":46,"endColumn":17},{"ruleId":"1694","severity":1,"message":"1887","line":48,"column":24,"nodeType":"1696","messageId":"1697","endLine":48,"endColumn":30},{"ruleId":"1694","severity":1,"message":"1888","line":51,"column":3,"nodeType":"1696","messageId":"1697","endLine":51,"endColumn":29},{"ruleId":"1694","severity":1,"message":"1889","line":52,"column":3,"nodeType":"1696","messageId":"1697","endLine":52,"endColumn":33},{"ruleId":"1694","severity":1,"message":"1890","line":54,"column":8,"nodeType":"1696","messageId":"1697","endLine":54,"endColumn":14},{"ruleId":"1694","severity":1,"message":"1891","line":55,"column":10,"nodeType":"1696","messageId":"1697","endLine":55,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1892","line":56,"column":8,"nodeType":"1696","messageId":"1697","endLine":56,"endColumn":19},{"ruleId":"1694","severity":1,"message":"1893","line":57,"column":10,"nodeType":"1696","messageId":"1697","endLine":57,"endColumn":19},{"ruleId":"1694","severity":1,"message":"1769","line":58,"column":10,"nodeType":"1696","messageId":"1697","endLine":58,"endColumn":20},{"ruleId":"1719","severity":1,"message":"1894","line":60,"column":23,"nodeType":"1721","messageId":"1722","endLine":60,"endColumn":27},{"ruleId":"1719","severity":1,"message":"1842","line":60,"column":29,"nodeType":"1721","messageId":"1722","endLine":60,"endColumn":40},{"ruleId":"1694","severity":1,"message":"1895","line":60,"column":42,"nodeType":"1696","messageId":"1697","endLine":60,"endColumn":50},{"ruleId":"1719","severity":1,"message":"1896","line":60,"column":42,"nodeType":"1721","messageId":"1722","endLine":60,"endColumn":50},{"ruleId":"1694","severity":1,"message":"1897","line":60,"column":52,"nodeType":"1696","messageId":"1697","endLine":60,"endColumn":65},{"ruleId":"1719","severity":1,"message":"1898","line":60,"column":52,"nodeType":"1721","messageId":"1722","endLine":60,"endColumn":65},{"ruleId":"1719","severity":1,"message":"1844","line":60,"column":67,"nodeType":"1721","messageId":"1722","endLine":60,"endColumn":69},{"ruleId":"1694","severity":1,"message":"1812","line":62,"column":9,"nodeType":"1696","messageId":"1697","endLine":62,"endColumn":17},{"ruleId":"1694","severity":1,"message":"1899","line":63,"column":17,"nodeType":"1696","messageId":"1697","endLine":63,"endColumn":19},{"ruleId":"1694","severity":1,"message":"1900","line":63,"column":30,"nodeType":"1696","messageId":"1697","endLine":63,"endColumn":34},{"ruleId":"1694","severity":1,"message":"1901","line":126,"column":11,"nodeType":"1696","messageId":"1697","endLine":126,"endColumn":26},{"ruleId":"1707","severity":1,"message":"1708","line":130,"column":5,"nodeType":"1709","messageId":"1710","endLine":130,"endColumn":16},{"ruleId":"1707","severity":1,"message":"1708","line":161,"column":7,"nodeType":"1709","messageId":"1710","endLine":161,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":181,"column":11,"nodeType":"1709","messageId":"1710","endLine":181,"endColumn":22},{"ruleId":"1707","severity":1,"message":"1708","line":253,"column":15,"nodeType":"1709","messageId":"1710","endLine":253,"endColumn":28},{"ruleId":"1707","severity":1,"message":"1708","line":36,"column":7,"nodeType":"1709","messageId":"1710","endLine":36,"endColumn":18},{"ruleId":"1707","severity":1,"message":"1708","line":46,"column":7,"nodeType":"1709","messageId":"1710","endLine":46,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1902","line":65,"column":41,"nodeType":"1696","messageId":"1697","endLine":65,"endColumn":54},{"ruleId":"1694","severity":1,"message":"1903","line":65,"column":56,"nodeType":"1696","messageId":"1697","endLine":65,"endColumn":65},{"ruleId":"1707","severity":1,"message":"1708","line":48,"column":7,"nodeType":"1709","messageId":"1710","endLine":48,"endColumn":18},{"ruleId":"1694","severity":1,"message":"1858","line":67,"column":25,"nodeType":"1696","messageId":"1697","endLine":67,"endColumn":30},{"ruleId":"1694","severity":1,"message":"1859","line":67,"column":32,"nodeType":"1696","messageId":"1697","endLine":67,"endColumn":39},{"ruleId":"1694","severity":1,"message":"1902","line":67,"column":41,"nodeType":"1696","messageId":"1697","endLine":67,"endColumn":54},{"ruleId":"1694","severity":1,"message":"1903","line":67,"column":56,"nodeType":"1696","messageId":"1697","endLine":67,"endColumn":65},{"ruleId":"1694","severity":1,"message":"1858","line":34,"column":25,"nodeType":"1696","messageId":"1697","endLine":34,"endColumn":30},{"ruleId":"1694","severity":1,"message":"1859","line":34,"column":32,"nodeType":"1696","messageId":"1697","endLine":34,"endColumn":39},{"ruleId":"1707","severity":1,"message":"1708","line":38,"column":7,"nodeType":"1709","messageId":"1710","endLine":38,"endColumn":20},{"ruleId":"1707","severity":1,"message":"1708","line":55,"column":7,"nodeType":"1709","messageId":"1710","endLine":55,"endColumn":20},{"ruleId":"1694","severity":1,"message":"1858","line":72,"column":25,"nodeType":"1696","messageId":"1697","endLine":72,"endColumn":30},{"ruleId":"1694","severity":1,"message":"1859","line":72,"column":32,"nodeType":"1696","messageId":"1697","endLine":72,"endColumn":39},{"ruleId":"1694","severity":1,"message":"1903","line":72,"column":56,"nodeType":"1696","messageId":"1697","endLine":72,"endColumn":65},"jest/no-try-expect",["1904"],"no-unused-vars","'Providers' is defined but never used.","Identifier","unusedVar","'DoctorIcon' is defined but never used.","'ConsulationIcon' is defined but never used.","'theme' is defined but never used.","'setConsultationState' is assigned a value but never used.","'setGraphState' is assigned a value but never used.","'subScriptionState' is assigned a value but never used.","'setSubScriptionState' is assigned a value but never used.","'setPartnerGraphState' is assigned a value but never used.","'color' is assigned a value but never used.","no-console","Unexpected console statement.","MemberExpression","unexpected","'Typography' is defined but never used.","'Avatar' is defined but never used.","'TrendingDownIcon' is defined but never used.","'displayPhoto' is defined but never used.","'btnValue' is defined but never used.","'type' is defined but never used.","'onCancel' is defined but never used.","'rest' is defined but never used.","react/prop-types","'disabled' is missing in props validation","Property","missingPropType","'showHeala' is missing in props validation","'Children' is defined but never used.","'ErrorMessage' is defined but never used.","'Field' is defined but never used.","'TextError' is defined but never used.","no-duplicate-imports","'@mui/styles' import is duplicated.","ImportDeclaration","import","'trucateString' is defined but never used.","'theme' is assigned a value but never used.","'email' is assigned a value but never used.","'labelId' is assigned a value but never used.","'@apollo/client' import is duplicated.","'e' is defined but never used.","'startDate' is missing in props validation","'endDate' is missing in props validation","'fontSize' is defined but never used.","'setHmoEnrollees' is missing in props validation","'setPageInfo' is missing in props validation","'queryParams' is missing in props validation","'queryParams.variables' is missing in props validation","'queryParams.fetchEnrollees' is missing in props validation","'queryParams.refetch' is missing in props validation","'components/graphQL/useQuery' import is duplicated.","'breadcrumbs' is missing in props validation","'breadcrumbs.length' is missing in props validation","'breadcrumbs[].pageTitle' is missing in props validation","'breadcrumbs[].pageIndex' is missing in props validation","'breadcrumbs.map' is missing in props validation","'Button' is defined but never used.","'ArrowForwardIosIcon' is defined but never used.","'components/layouts' import is duplicated.","'field' is defined but never used.","'width' is defined but never used.","'placeholderWidth' is defined but never used.","'lightRed' is assigned a value but never used.","'context' is defined but never used.","'progres' is defined but never used.","'drawerWidth' is assigned a value but never used.","'index' is defined but never used.","'react-router-dom' import is duplicated.","'padding' is defined but never used.","'DeleteIcon' is defined but never used.","'banks' is defined but never used.","'addNewPartnerValidationSchema' is defined but never used.","'EditDelBtn' is defined but never used.","'id' is assigned a value but never used.","'dropDown' is assigned a value but never used.","'categoryOptions' is assigned a value but never used.","'classificationOptions' is assigned a value but never used.","'specializationOptions' is assigned a value but never used.","'initialValues1' is assigned a value but never used.","'onSubmit1' is assigned a value but never used.","'handleGenerateLink' is assigned a value but never used.","'z' is assigned a value but never used.","'logoImageUrl' is assigned a value but never used.","'NoData' is defined but never used.","'Link' is defined but never used.","'Redirect' is defined but never used.","'PropTypes' is defined but never used.","'@mui/material' import is duplicated.","'history' is assigned a value but never used.","'error' is assigned a value but never used.","'Modals' is defined but never used.","'Copy' is defined but never used.","'trucateProfileLink' is defined but never used.","'helpers/filterHelperFunctions' import is duplicated.","'getPartners' is defined but never used.","'helpers/mockData' import is duplicated.","'patientConsultation' is assigned a value but never used.","'regenerate' is assigned a value but never used.","'daa' is assigned a value but never used.","'FormikControl' is defined but never used.","'Formik' is defined but never used.","'Form' is defined but never used.","'addDoctorValidationSchema' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fetchHospitals'. Either include it or remove the dependency array.","ArrayExpression",["1905"],"'errMsg' is defined but never used.","quotes","Strings must use doublequote.","TemplateLiteral","wrongQuotes",{"range":"1906","text":"1907"},{"range":"1908","text":"1909"},"'isFirstDayOfMonth' is defined but never used.","'onSubmit' is assigned a value but never used.",{"range":"1910","text":"1907"},{"range":"1911","text":"1909"},"'classes' is assigned a value but never used.","'props' is defined but never used.","'handleSelectedRows' is defined but never used.","'setSelectedRows' is assigned a value but never used.","'error' is defined but never used.","'dociId' is assigned a value but never used.","'firstName' is assigned a value but never used.","'lastName' is assigned a value but never used.","'plan' is assigned a value but never used.","'provider' is assigned a value but never used.","'consultations' is assigned a value but never used.","'status' is assigned a value but never used.","'isItemSelected' is assigned a value but never used.","'AddIcon' is defined but never used.","'EditIcon' is defined but never used.","'handleDeleteOpenDialog' is assigned a value but never used.","'rowsPerPage' is assigned a value but never used.","'page' is assigned a value but never used.","'alert' is assigned a value but never used.","'handleDialogOpens1' is assigned a value but never used.","'values' is defined but never used.","'CalendarIcon' is defined but never used.","'Alert' is defined but never used.","'fetchMoreData' is defined but never used.","'components/graphQL/Mutation' import is duplicated.","'PartnersIcon' is defined but never used.","'openAddHcp' is missing in props validation","'handleClose' is missing in props validation","'buttonType' is missing in props validation","'id' is missing in props validation","'pushTo' is missing in props validation","'onConfirm' is defined but never used.","'picture' is assigned a value but never used.",["1912"],"'components/Utilities/Time' import is duplicated.","'formatDuration' is defined but never used.","'components/Utilities' import is duplicated.","'ReferralDiv' is assigned a value but never used.","'SubscriptionDiv' is assigned a value but never used.","'SubscriptionDelete' is assigned a value but never used.","'Div2' is assigned a value but never used.","'Div' is assigned a value but never used.","'isSubmitting' is defined but never used.","'dirty' is defined but never used.","'isValid' is defined but never used.","'onChange' is assigned a value but never used.","'useState' is defined but never used.","'useEffect' is defined but never used.","'useSelector' is defined but never used.","'PersonAddAlt1Icon' is defined but never used.","'useLazyQuery' is defined but never used.","'Checkbox' is defined but never used.","'TableCell' is defined but never used.","'TableRow' is defined but never used.","'isSelected' is defined but never used.","'categoryFilterOptions' is defined but never used.","'defaultPageInfo' is defined but never used.","'useStyles' is defined but never used.","'useActions' is defined but never used.","'changeTableLimit' is defined but never used.","'deleteItem' is defined but never used.","'deleteVar' is defined but never used.","'filterData' is defined but never used.","'handlePageChange' is defined but never used.","'DeletePartner' is defined but never used.","'partnersHeadCells' is defined but never used.","'EnhancedTable' is defined but never used.","'EmptyTable' is defined but never used.","'addPartnerCategory' is defined but never used.","'regeneratePartnerProfileUrl' is defined but never used.","'getSingleProvider' is defined but never used.","'DELETE_PARTNER' is defined but never used.","'Loader' is defined but never used.","'addPartnerValidationSchema' is defined but never used.","'filterPartnersValidationSchema' is defined but never used.","'Filter' is defined but never used.","'PageInfo' is defined but never used.","'TableLayout' is defined but never used.","'useParams' is defined but never used.","'open' is missing in props validation","'category' is defined but never used.","'category' is missing in props validation","'CategoryValue' is defined but never used.","'CategoryValue' is missing in props validation","'da' is assigned a value but never used.","'load' is assigned a value but never used.","'enqueueSnackbar' is assigned a value but never used.","'setFieldValue' is defined but never used.","'setValues' is defined but never used.","no-conditional-expect",{"desc":"1913","fix":"1914"},[3887,3898],"\"/patients\"",[4342,4349],"\"/hcps\"",[5975,5986],[6470,6477],{"desc":"1913","fix":"1915"},"Update the dependencies array to be: [data, fetchHospitals]",{"range":"1916","text":"1917"},{"range":"1918","text":"1917"},[3278,3284],"[data, fetchHospitals]",[3188,3194]]