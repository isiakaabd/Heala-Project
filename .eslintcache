[{"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\index.js":"1","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\accessToken.js":"2","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\App.js":"3","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\index.js":"4","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\muiTheme.js":"5","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\hooks\\useActions.js":"6","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\graphQL\\Mutation.js":"7","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\routes\\Routes.js":"8","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\index.js":"9","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\index.js":"10","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\index.js":"11","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\store.js":"12","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\WhiteLabel.js":"13","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\WaitingListDetails.js":"14","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\WaitingList.js":"15","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\VideoCall.js":"16","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\TestList.js":"17","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\ViewReferral.js":"18","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\ViewMail.js":"19","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\ViewHCP.js":"20","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\ListManagment.js":"21","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\routes\\PrivateRoute.js":"22","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\action-creators\\index.js":"23","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\reducers\\index.js":"24","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\PreviousButton.js":"25","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\Time.js":"26","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\graphQL\\useQuery.js":"27","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Forms\\EditTestForm.js":"28","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\helpers\\filterHelperFunctions.js":"29","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\Success.js":"30","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\cards\\SettingsCard.js":"31","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\reducers\\hcpReducer.js":"32","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\reducers\\patientReducer.js":"33","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\reducers\\authReducer.js":"34","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\reducers\\tablesReducer.js":"35","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\action-creators\\hcp.js":"36","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\action-creators\\patient.js":"37","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\action-creators\\auth.js":"38","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\action-creators\\tablesActions.js":"39","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\graphQL\\fragment.js":"40","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\helpers\\func.js":"41","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\helpers\\validationSchemas.js":"42","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\Select.js":"43","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\index.js":"44","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\action-types\\index.js":"45","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\Calendar.js":"46","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\Input.js":"47","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\FormikControl.js":"48","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\Checkbox.js":"49","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\Checkboxs.js":"50","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\TextError.js":"51","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\DateTimePicker.js":"52","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\Textarea.js":"53","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\Date.js":"54","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\File.js":"55","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Typography.js":"56","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Forms\\UploadTestForm.js":"57","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\tableHeaders.js":"58","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\DeleteOrDisable.js":"59","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Forms\\AddTestForm.js":"60","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\EnhancedTable.js":"61","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\ConfirmModal.js":"62","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Rows\\TestListRow.js":"63","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\WaitingListTable.js":"64","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Forms\\DragAndDrop.js":"65","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\EnhancedTableToolbar.js":"66","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\EnhancedTableHeader.js":"67","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\styles\\patientsPageStyles.js":"68","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\helpers\\mockData.js":"69","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\tableData.js":"70","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\helpers\\selectedRows.js":"71","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\helpers\\isSelected.js":"72","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Subscription.js":"73","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\UserTypes.js":"74","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\SubscriptionModal.js":"75","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\UserTypeModal.js":"76","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\CustomButton.js":"77","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\Loader.js":"78","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Appointments.js":"79","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\HCP.js":"80","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\ViewDoctorVerification.js":"81","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\ReferralTab.js":"82","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\SinglePatient.js":"83","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\SingleHCP.js":"84","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Providers.js":"85","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Settings.js":"86","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Prescriptions.js":"87","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\ViewMessage.js":"88","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Permission.js":"89","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\PatientProfile.js":"90","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\PatientAppointment.js":"91","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Patients.js":"92","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Chat.js":"93","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Partners.js":"94","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Messages.js":"95","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\MedicalRecords.js":"96","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Management.js":"97","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Medications.js":"98","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Login.js":"99","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\HcpProfile.js":"100","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\PendingPayout.js":"101","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Hcps.js":"102","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\HcpEarnings.js":"103","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\HCPChat.js":"104","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\HcpConsultations.js":"105","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\HcpCaseNote.js":"106","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\HcpAvailability.js":"107","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Payout.js":"108","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\HcpAppointments.js":"109","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\HcpPatients.js":"110","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Financetable.js":"111","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Finance.js":"112","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\EditManagement.js":"113","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Email.js":"114","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\DoctorVerificationProfile.js":"115","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\CreateMessage.js":"116","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Dashboard.js":"117","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\CreateEmail.js":"118","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Consultations.js":"119","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Administrator.js":"120","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\DashboardChart.js":"121","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\CaseNotes.js":"122","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\EmptyTable.js":"123","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\Notifications.js":"124","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\HeaderProfile.js":"125","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\EnhancedTableAction.js":"126","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\NoData.js":"127","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\Backdrop.js":"128","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\CircularProgress.js":"129","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\Search.js":"130","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\SearchInput.js":"131","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\LineChart.js":"132","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\Modal.js":"133","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\FormSelect.js":"134","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\LinearProgress.js":"135","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\FilterList.js":"136","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\ProfileCard.js":"137","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\DataGrid.js":"138","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\FormInput.js":"139","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\CircularChart.js":"140","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\CheckBox.js":"141","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\Card.js":"142","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\SideMenu.js":"143","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\Header.js":"144","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\HeaderContents.js":"145","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\AvailabilityTable.js":"146","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\DisplayProfile.js":"147","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\Button.js":"148","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\AvailabilityCard.js":"149","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\helpers\\asideMenus.js":"150","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\helpers\\breadcrumb.js":"151","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Copy.js":"152","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\styles\\doctorsPageStyles.js":"153","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Forms\\Filters\\index.js":"154","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\hooks\\useCopy.js":"155","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\styles\\docVerificationPageStyles.js":"156","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Buttons\\ClearFiltersBtn.js":"157","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\LoginInput.js":"158","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\DataHeader.js":"159","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\index.js":"160","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\styles\\partnersPageStyles.js":"161","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\bMI.js":"162","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\styles\\loginPageStyles.js":"163","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\ReferPatient.js":"164","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\ProviderModal.js":"165","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\PermissionModal.js":"166","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\Filter.js":"167","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\RoleModal.js":"168","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\SubscriptionIncome.js":"169","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Buttons\\CloseBtn.js":"170","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\hooks\\useAlert.js":"171","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Rows\\PlanListRow.js":"172","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Forms\\Filters\\PatientFilters.js":"173","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Forms\\Filters\\DoctorsFilters.js":"174","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Forms\\CompoundSearch.js":"175"},{"size":2340,"mtime":1653344874578,"results":"176","hashOfConfig":"177"},{"size":165,"mtime":1653218411344,"results":"178","hashOfConfig":"177"},{"size":4833,"mtime":1655993538464,"results":"179","hashOfConfig":"177"},{"size":38,"mtime":1653218411668,"results":"180","hashOfConfig":"177"},{"size":3600,"mtime":1658128290339,"results":"181","hashOfConfig":"177"},{"size":567,"mtime":1653218411526,"results":"182","hashOfConfig":"177"},{"size":15222,"mtime":1657749984386,"results":"183","hashOfConfig":"177"},{"size":6867,"mtime":1657749984542,"results":"184","hashOfConfig":"177"},{"size":1160,"mtime":1654120107231,"results":"185","hashOfConfig":"177"},{"size":794,"mtime":1654120107263,"results":"186","hashOfConfig":"177"},{"size":2954,"mtime":1657725762568,"results":"187","hashOfConfig":"177"},{"size":296,"mtime":1653218411674,"results":"188","hashOfConfig":"177"},{"size":1700,"mtime":1655993152247,"results":"189","hashOfConfig":"177"},{"size":4703,"mtime":1655993152245,"results":"190","hashOfConfig":"177"},{"size":760,"mtime":1655993152243,"results":"191","hashOfConfig":"177"},{"size":4166,"mtime":1653218411622,"results":"192","hashOfConfig":"177"},{"size":7599,"mtime":1657749984531,"results":"193","hashOfConfig":"177"},{"size":7447,"mtime":1655993718537,"results":"194","hashOfConfig":"177"},{"size":3699,"mtime":1655993152238,"results":"195","hashOfConfig":"177"},{"size":24097,"mtime":1657749984537,"results":"196","hashOfConfig":"177"},{"size":1468,"mtime":1655993152171,"results":"197","hashOfConfig":"177"},{"size":894,"mtime":1653344874550,"results":"198","hashOfConfig":"177"},{"size":260,"mtime":1653218411664,"results":"199","hashOfConfig":"177"},{"size":385,"mtime":1653218411671,"results":"200","hashOfConfig":"177"},{"size":760,"mtime":1653344874358,"results":"201","hashOfConfig":"177"},{"size":2227,"mtime":1655993152109,"results":"202","hashOfConfig":"177"},{"size":25325,"mtime":1657799276394,"results":"203","hashOfConfig":"177"},{"size":4767,"mtime":1657749984375,"results":"204","hashOfConfig":"177"},{"size":8030,"mtime":1657802839604,"results":"205","hashOfConfig":"177"},{"size":2012,"mtime":1653344874428,"results":"206","hashOfConfig":"177"},{"size":1626,"mtime":1653344874370,"results":"207","hashOfConfig":"177"},{"size":394,"mtime":1653218411670,"results":"208","hashOfConfig":"177"},{"size":403,"mtime":1653218411672,"results":"209","hashOfConfig":"177"},{"size":2201,"mtime":1653218411670,"results":"210","hashOfConfig":"177"},{"size":806,"mtime":1653218411673,"results":"211","hashOfConfig":"177"},{"size":211,"mtime":1653218411663,"results":"212","hashOfConfig":"177"},{"size":216,"mtime":1653218411665,"results":"213","hashOfConfig":"177"},{"size":897,"mtime":1653218411662,"results":"214","hashOfConfig":"177"},{"size":557,"mtime":1653218411666,"results":"215","hashOfConfig":"177"},{"size":263,"mtime":1653218411523,"results":"216","hashOfConfig":"177"},{"size":1410,"mtime":1655993152255,"results":"217","hashOfConfig":"177"},{"size":3269,"mtime":1654771220843,"results":"218","hashOfConfig":"177"},{"size":3853,"mtime":1658127284665,"results":"219","hashOfConfig":"177"},{"size":311,"mtime":1653218411649,"results":"220","hashOfConfig":"177"},{"size":692,"mtime":1653218411667,"results":"221","hashOfConfig":"177"},{"size":1155,"mtime":1653344874553,"results":"222","hashOfConfig":"177"},{"size":1024,"mtime":1653344874560,"results":"223","hashOfConfig":"177"},{"size":1033,"mtime":1653344874560,"results":"224","hashOfConfig":"177"},{"size":1848,"mtime":1653344874555,"results":"225","hashOfConfig":"177"},{"size":839,"mtime":1653218411640,"results":"226","hashOfConfig":"177"},{"size":444,"mtime":1653218411510,"results":"227","hashOfConfig":"177"},{"size":1992,"mtime":1653218411642,"results":"228","hashOfConfig":"177"},{"size":2366,"mtime":1653344874568,"results":"229","hashOfConfig":"177"},{"size":1979,"mtime":1653218411641,"results":"230","hashOfConfig":"177"},{"size":4672,"mtime":1657749984545,"results":"231","hashOfConfig":"177"},{"size":240,"mtime":1655993152103,"results":"232","hashOfConfig":"177"},{"size":3568,"mtime":1657749984386,"results":"233","hashOfConfig":"177"},{"size":6583,"mtime":1657749984386,"results":"234","hashOfConfig":"177"},{"size":4570,"mtime":1657749984401,"results":"235","hashOfConfig":"177"},{"size":3504,"mtime":1657749984375,"results":"236","hashOfConfig":"177"},{"size":5225,"mtime":1657991458944,"results":"237","hashOfConfig":"177"},{"size":4140,"mtime":1654121002687,"results":"238","hashOfConfig":"177"},{"size":2236,"mtime":1654771333183,"results":"239","hashOfConfig":"177"},{"size":5079,"mtime":1653344874413,"results":"240","hashOfConfig":"177"},{"size":5074,"mtime":1657749984375,"results":"241","hashOfConfig":"177"},{"size":1668,"mtime":1654120107247,"results":"242","hashOfConfig":"177"},{"size":1821,"mtime":1653486398055,"results":"243","hashOfConfig":"177"},{"size":1626,"mtime":1657749984562,"results":"244","hashOfConfig":"177"},{"size":6085,"mtime":1657749984556,"results":"245","hashOfConfig":"177"},{"size":7937,"mtime":1653218411515,"results":"246","hashOfConfig":"177"},{"size":683,"mtime":1653218411656,"results":"247","hashOfConfig":"177"},{"size":82,"mtime":1653218411654,"results":"248","hashOfConfig":"177"},{"size":7871,"mtime":1657798508346,"results":"249","hashOfConfig":"177"},{"size":15605,"mtime":1657749984534,"results":"250","hashOfConfig":"177"},{"size":7254,"mtime":1657798464744,"results":"251","hashOfConfig":"177"},{"size":4496,"mtime":1653344874428,"results":"252","hashOfConfig":"177"},{"size":2610,"mtime":1654120107216,"results":"253","hashOfConfig":"177"},{"size":472,"mtime":1653218411504,"results":"254","hashOfConfig":"177"},{"size":2371,"mtime":1653344874438,"results":"255","hashOfConfig":"177"},{"size":11572,"mtime":1657749984464,"results":"256","hashOfConfig":"177"},{"size":27260,"mtime":1653344874533,"results":"257","hashOfConfig":"177"},{"size":10594,"mtime":1658039326305,"results":"258","hashOfConfig":"177"},{"size":7608,"mtime":1655993152219,"results":"259","hashOfConfig":"177"},{"size":7142,"mtime":1655993152217,"results":"260","hashOfConfig":"177"},{"size":15267,"mtime":1657749984521,"results":"261","hashOfConfig":"177"},{"size":2870,"mtime":1655993152207,"results":"262","hashOfConfig":"177"},{"size":8478,"mtime":1655993152200,"results":"263","hashOfConfig":"177"},{"size":3172,"mtime":1655993152240,"results":"264","hashOfConfig":"177"},{"size":16563,"mtime":1657749984518,"results":"265","hashOfConfig":"177"},{"size":6312,"mtime":1655993152189,"results":"266","hashOfConfig":"177"},{"size":19760,"mtime":1657749984509,"results":"267","hashOfConfig":"177"},{"size":10178,"mtime":1657803225675,"results":"268","hashOfConfig":"177"},{"size":8124,"mtime":1657749984422,"results":"269","hashOfConfig":"177"},{"size":20221,"mtime":1657749984476,"results":"270","hashOfConfig":"177"},{"size":10403,"mtime":1657749984476,"results":"271","hashOfConfig":"177"},{"size":4466,"mtime":1655993152177,"results":"272","hashOfConfig":"177"},{"size":12925,"mtime":1657749984476,"results":"273","hashOfConfig":"177"},{"size":6781,"mtime":1655993152179,"results":"274","hashOfConfig":"177"},{"size":10048,"mtime":1657804229339,"results":"275","hashOfConfig":"177"},{"size":4549,"mtime":1655993152167,"results":"276","hashOfConfig":"177"},{"size":7843,"mtime":1655993152194,"results":"277","hashOfConfig":"177"},{"size":17991,"mtime":1658126982795,"results":"278","hashOfConfig":"177"},{"size":8593,"mtime":1655993152163,"results":"279","hashOfConfig":"177"},{"size":7782,"mtime":1655993152153,"results":"280","hashOfConfig":"177"},{"size":9382,"mtime":1657749984469,"results":"281","hashOfConfig":"177"},{"size":22335,"mtime":1655993152159,"results":"282","hashOfConfig":"177"},{"size":1674,"mtime":1657749984466,"results":"283","hashOfConfig":"177"},{"size":10230,"mtime":1657749984515,"results":"284","hashOfConfig":"177"},{"size":13097,"mtime":1655993152155,"results":"285","hashOfConfig":"177"},{"size":6790,"mtime":1657749984471,"results":"286","hashOfConfig":"177"},{"size":7977,"mtime":1657749984460,"results":"287","hashOfConfig":"177"},{"size":10596,"mtime":1657749984453,"results":"288","hashOfConfig":"177"},{"size":11868,"mtime":1657749984430,"results":"289","hashOfConfig":"177"},{"size":9663,"mtime":1657749984433,"results":"290","hashOfConfig":"177"},{"size":7678,"mtime":1655993152142,"results":"291","hashOfConfig":"177"},{"size":8855,"mtime":1655993152138,"results":"292","hashOfConfig":"177"},{"size":2049,"mtime":1657749984428,"results":"293","hashOfConfig":"177"},{"size":10644,"mtime":1655993152136,"results":"294","hashOfConfig":"177"},{"size":9052,"mtime":1657749984425,"results":"295","hashOfConfig":"177"},{"size":13574,"mtime":1657798221066,"results":"296","hashOfConfig":"177"},{"size":23175,"mtime":1654160117451,"results":"297","hashOfConfig":"177"},{"size":22284,"mtime":1655993152127,"results":"298","hashOfConfig":"177"},{"size":1917,"mtime":1653344874388,"results":"299","hashOfConfig":"177"},{"size":3054,"mtime":1653344874408,"results":"300","hashOfConfig":"177"},{"size":4141,"mtime":1654120107263,"results":"301","hashOfConfig":"177"},{"size":2267,"mtime":1653344874393,"results":"302","hashOfConfig":"177"},{"size":822,"mtime":1653398062748,"results":"303","hashOfConfig":"177"},{"size":553,"mtime":1653344874338,"results":"304","hashOfConfig":"177"},{"size":1542,"mtime":1653218411494,"results":"305","hashOfConfig":"177"},{"size":1498,"mtime":1658049275835,"results":"306","hashOfConfig":"177"},{"size":1979,"mtime":1653344874363,"results":"307","hashOfConfig":"177"},{"size":5133,"mtime":1654120107231,"results":"308","hashOfConfig":"177"},{"size":2342,"mtime":1654120107231,"results":"309","hashOfConfig":"177"},{"size":1237,"mtime":1654120107216,"results":"310","hashOfConfig":"177"},{"size":1100,"mtime":1653218411503,"results":"311","hashOfConfig":"177"},{"size":1484,"mtime":1654019435597,"results":"312","hashOfConfig":"177"},{"size":1931,"mtime":1654120107231,"results":"313","hashOfConfig":"177"},{"size":4017,"mtime":1653344874345,"results":"314","hashOfConfig":"177"},{"size":970,"mtime":1653344874353,"results":"315","hashOfConfig":"177"},{"size":3423,"mtime":1653218411493,"results":"316","hashOfConfig":"177"},{"size":2009,"mtime":1653344874343,"results":"317","hashOfConfig":"177"},{"size":1148,"mtime":1654120107216,"results":"318","hashOfConfig":"177"},{"size":5419,"mtime":1655993245277,"results":"319","hashOfConfig":"177"},{"size":1585,"mtime":1655993152118,"results":"320","hashOfConfig":"177"},{"size":9857,"mtime":1655993152120,"results":"321","hashOfConfig":"177"},{"size":5491,"mtime":1657749984401,"results":"322","hashOfConfig":"177"},{"size":4207,"mtime":1655993152107,"results":"323","hashOfConfig":"177"},{"size":1343,"mtime":1653344874340,"results":"324","hashOfConfig":"177"},{"size":2530,"mtime":1655993152105,"results":"325","hashOfConfig":"177"},{"size":1530,"mtime":1653218411650,"results":"326","hashOfConfig":"177"},{"size":2677,"mtime":1657749984551,"results":"327","hashOfConfig":"177"},{"size":481,"mtime":1653344874325,"results":"328","hashOfConfig":"177"},{"size":1676,"mtime":1653218411676,"results":"329","hashOfConfig":"177"},{"size":1122,"mtime":1658128125994,"results":"330","hashOfConfig":"177"},{"size":1453,"mtime":1653344874378,"results":"331","hashOfConfig":"177"},{"size":1321,"mtime":1653218411675,"results":"332","hashOfConfig":"177"},{"size":642,"mtime":1653344874323,"results":"333","hashOfConfig":"177"},{"size":1134,"mtime":1653344874563,"results":"334","hashOfConfig":"177"},{"size":19795,"mtime":1653218411497,"results":"335","hashOfConfig":"177"},{"size":350,"mtime":1653218411561,"results":"336","hashOfConfig":"177"},{"size":2395,"mtime":1653218411677,"results":"337","hashOfConfig":"177"},{"size":163,"mtime":1653218411513,"results":"338","hashOfConfig":"177"},{"size":1961,"mtime":1655993152257,"results":"339","hashOfConfig":"177"},{"size":4295,"mtime":1653218411556,"results":"340","hashOfConfig":"177"},{"size":5970,"mtime":1653344874420,"results":"341","hashOfConfig":"177"},{"size":4747,"mtime":1653344874418,"results":"342","hashOfConfig":"177"},{"size":4128,"mtime":1653344874418,"results":"343","hashOfConfig":"177"},{"size":3304,"mtime":1653344874423,"results":"344","hashOfConfig":"177"},{"size":6936,"mtime":1657749984529,"results":"345","hashOfConfig":"177"},{"size":1287,"mtime":1657749984370,"results":"346","hashOfConfig":"177"},{"size":2600,"mtime":1657749984559,"results":"347","hashOfConfig":"177"},{"size":6352,"mtime":1657798419394,"results":"348","hashOfConfig":"177"},{"size":8573,"mtime":1657749984386,"results":"349","hashOfConfig":"177"},{"size":7358,"mtime":1658129225858,"results":"350","hashOfConfig":"177"},{"size":2989,"mtime":1657800508236,"results":"351","hashOfConfig":"177"},{"filePath":"352","messages":"353","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},"3xzfjc",{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"361","messages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":15,"source":"367","usedDeprecatedRules":"354"},{"filePath":"368","messages":"369","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"370","usedDeprecatedRules":"354"},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"381","usedDeprecatedRules":"354"},{"filePath":"382","messages":"383","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":10,"source":"384","usedDeprecatedRules":"354"},{"filePath":"385","messages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":6,"source":"391","usedDeprecatedRules":"354"},{"filePath":"392","messages":"393","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"394","messages":"395","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"396","usedDeprecatedRules":"354"},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"401","messages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"403","messages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"405","messages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"407","messages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"409","messages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"411","usedDeprecatedRules":"354"},{"filePath":"412","messages":"413","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"414","usedDeprecatedRules":"354"},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"417","usedDeprecatedRules":"354"},{"filePath":"418","messages":"419","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"420","messages":"421","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"422","messages":"423","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"424","messages":"425","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"428","messages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"432","messages":"433","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"434","messages":"435","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"436","messages":"437","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"438","messages":"439","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"440","messages":"441","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"442","messages":"443","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"444","messages":"445","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"450","messages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"456","messages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"458","messages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"460","messages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"462","messages":"463","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"464","messages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"468","messages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"470","messages":"471","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"472","usedDeprecatedRules":"354"},{"filePath":"473","messages":"474","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"475","messages":"476","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":3,"source":"477","usedDeprecatedRules":"354"},{"filePath":"478","messages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"480","messages":"481","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"482","usedDeprecatedRules":"354"},{"filePath":"483","messages":"484","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"485","usedDeprecatedRules":"354"},{"filePath":"486","messages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"488","messages":"489","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"490","usedDeprecatedRules":"354"},{"filePath":"491","messages":"492","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"493","messages":"494","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"495","messages":"496","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"497","usedDeprecatedRules":"354"},{"filePath":"498","messages":"499","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"500","messages":"501","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"504","messages":"505","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"506","messages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"510","messages":"511","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"512","messages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":13,"source":"516","usedDeprecatedRules":"354"},{"filePath":"517","messages":"518","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"519","messages":"520","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"521","messages":"522","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"523","messages":"524","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"525","messages":"526","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"527","messages":"528","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":7,"source":"529","usedDeprecatedRules":"354"},{"filePath":"530","messages":"531","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"532","messages":"533","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"534","messages":"535","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":2,"source":"536","usedDeprecatedRules":"354"},{"filePath":"537","messages":"538","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"539","usedDeprecatedRules":"354"},{"filePath":"540","messages":"541","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":9,"source":"542","usedDeprecatedRules":"354"},{"filePath":"543","messages":"544","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"545","usedDeprecatedRules":"354"},{"filePath":"546","messages":"547","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":5,"source":"548","usedDeprecatedRules":"354"},{"filePath":"549","messages":"550","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"551","usedDeprecatedRules":"354"},{"filePath":"552","messages":"553","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":11,"source":"554","usedDeprecatedRules":"354"},{"filePath":"555","messages":"556","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"557","usedDeprecatedRules":"354"},{"filePath":"558","messages":"559","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":11,"source":"560","usedDeprecatedRules":"354"},{"filePath":"561","messages":"562","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"563","messages":"564","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":7,"source":"565","usedDeprecatedRules":"354"},{"filePath":"566","messages":"567","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":10,"source":"568","usedDeprecatedRules":"354"},{"filePath":"569","messages":"570","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":5,"source":"571","usedDeprecatedRules":"354"},{"filePath":"572","messages":"573","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":10,"source":"574","usedDeprecatedRules":"354"},{"filePath":"575","messages":"576","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":12,"source":"577","usedDeprecatedRules":"354"},{"filePath":"578","messages":"579","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":4,"source":"580","usedDeprecatedRules":"354"},{"filePath":"581","messages":"582","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"583","messages":"584","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"585","usedDeprecatedRules":"354"},{"filePath":"586","messages":"587","errorCount":0,"fatalErrorCount":0,"warningCount":91,"fixableErrorCount":0,"fixableWarningCount":89,"source":"588","usedDeprecatedRules":"354"},{"filePath":"589","messages":"590","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"591","messages":"592","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"593","usedDeprecatedRules":"354"},{"filePath":"594","messages":"595","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":4,"source":"596","usedDeprecatedRules":"354"},{"filePath":"597","messages":"598","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":7,"source":"599","usedDeprecatedRules":"354"},{"filePath":"600","messages":"601","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":15,"source":"602","usedDeprecatedRules":"354"},{"filePath":"603","messages":"604","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"605","usedDeprecatedRules":"354"},{"filePath":"606","messages":"607","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":11,"source":"608","usedDeprecatedRules":"354"},{"filePath":"609","messages":"610","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":8,"source":"611","usedDeprecatedRules":"354"},{"filePath":"612","messages":"613","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":6,"source":"614","usedDeprecatedRules":"354"},{"filePath":"615","messages":"616","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":5,"source":"617","usedDeprecatedRules":"354"},{"filePath":"618","messages":"619","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":11,"source":"620","usedDeprecatedRules":"354"},{"filePath":"621","messages":"622","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":7,"source":"623","usedDeprecatedRules":"354"},{"filePath":"624","messages":"625","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":5,"source":"626","usedDeprecatedRules":"354"},{"filePath":"627","messages":"628","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"629","usedDeprecatedRules":"354"},{"filePath":"630","messages":"631","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":11,"source":"632","usedDeprecatedRules":"354"},{"filePath":"633","messages":"634","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"635","usedDeprecatedRules":"354"},{"filePath":"636","messages":"637","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":6,"source":"638","usedDeprecatedRules":"354"},{"filePath":"639","messages":"640","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":6,"source":"641","usedDeprecatedRules":"354"},{"filePath":"642","messages":"643","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"644","messages":"645","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"646","messages":"647","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":15,"source":"648","usedDeprecatedRules":"354"},{"filePath":"649","messages":"650","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"651","messages":"652","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"653","messages":"654","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"655","messages":"656","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"657","messages":"658","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"659","messages":"660","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"661","messages":"662","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"663","messages":"664","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"665","messages":"666","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"667","messages":"668","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"669","messages":"670","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"671","messages":"672","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"673","messages":"674","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"675","messages":"676","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"677","messages":"678","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"679","messages":"680","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"681","messages":"682","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"683","messages":"684","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"685","messages":"686","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"687","messages":"688","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"689","messages":"690","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"691","messages":"692","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"693","messages":"694","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":7,"source":"695","usedDeprecatedRules":"354"},{"filePath":"696","messages":"697","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":3,"source":"698","usedDeprecatedRules":"354"},{"filePath":"699","messages":"700","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":6,"source":"701","usedDeprecatedRules":"354"},{"filePath":"702","messages":"703","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"704","messages":"705","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"706","usedDeprecatedRules":"354"},{"filePath":"707","messages":"708","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"709","messages":"710","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"711","messages":"712","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"713","messages":"714","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"715","messages":"716","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"717","messages":"718","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"719","messages":"720","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"721","messages":"722","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"723","messages":"724","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"725","messages":"726","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"727","messages":"728","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"729","messages":"730","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"731","messages":"732","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"733","messages":"734","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"735","messages":"736","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"737","messages":"738","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"739","messages":"740","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"741","messages":"742","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"743","messages":"744","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"745","messages":"746","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":5,"source":"747","usedDeprecatedRules":"354"},{"filePath":"748","messages":"749","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"750","usedDeprecatedRules":"354"},{"filePath":"751","messages":"752","errorCount":0,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":11,"source":"753","usedDeprecatedRules":"354"},{"filePath":"754","messages":"755","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},{"filePath":"756","messages":"757","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":5,"source":"758","usedDeprecatedRules":"354"},{"filePath":"759","messages":"760","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"761","messages":"762","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"354"},"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\index.js",[],[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\accessToken.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\App.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\muiTheme.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\hooks\\useActions.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\graphQL\\Mutation.js",["763","764","765","766","767","768","769","770","771","772","773","774","775","776","777"],"import { gql } from \"@apollo/client\";\r\n\r\nexport const updateDoctorProvider = gql`\r\n  mutation updateDoctorProvider($dociId: String, $providerId: String) {\r\n    updateDoctorProvider(data: { dociId: $dociId, providerId: $providerId }) {\r\n      profile {\r\n        _id\r\n        dociId\r\n        createdAt\r\n        updatedAt\r\n        firstName\r\n        lastName\r\n        gender\r\n        phoneNumber\r\n        email\r\n        hospital\r\n        specialization\r\n        dob\r\n        cadre\r\n        picture\r\n        providerId\r\n      }\r\n      account {\r\n        _id\r\n        email\r\n        dociId\r\n        createdAt\r\n        updatedAt\r\n        isEmailVerified\r\n        role\r\n        providerId\r\n        userTypeId\r\n        enrolleeNumber\r\n        isPasswordTemporary\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const editUserType = gql`\r\n  mutation updateUserType($id: String!, $name: String, $icon: String!) {\r\n    updateUserType(data: { id: $id, name: $name, icon: $icon }) {\r\n      userType {\r\n        _id\r\n        name\r\n        icon\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const verifyHCP = gql`\r\n  mutation verifyHCP($id: String) {\r\n    verifyHCP(data: { id: $id }) {\r\n      _id\r\n      qualification\r\n      license\r\n      yearbook\r\n      alumni_association\r\n      reference\r\n      external_reference\r\n      status\r\n      createdAt\r\n      updatedAt\r\n      profileId\r\n    }\r\n  }\r\n`;\r\nexport const editprovider = gql`\r\n  mutation updateProvider($id: String!, $name: String, $icon: String) {\r\n    updateProvider(data: { id: $id, name: $name, icon: $icon }) {\r\n      provider {\r\n        _id\r\n        name\r\n        icon\r\n        userTypeId\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const Login_USER = gql`\r\n  mutation Login($data: LoginUserInput!) {\r\n    login(data: $data) {\r\n      message\r\n      account {\r\n        _id\r\n        dociId\r\n        access_token\r\n        refresh_token\r\n        role\r\n        userTypeId\r\n        email\r\n      }\r\n      errors {\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const rejectVerification = gql`\r\n  mutation rejectVerification($reason: String, $id: String) {\r\n    rejectVerification(data: { verificationId: $id, reason: $reason }) {\r\n      message\r\n      reason\r\n    }\r\n  }\r\n`;\r\nexport const CREATE_PLAN = gql`\r\n  mutation createPlan(\r\n    $name: String!\r\n    $amount: Float!\r\n    $description: String\r\n    $duration: String\r\n    $provider: String\r\n  ) {\r\n    createPlan(\r\n      data: {\r\n        name: $name\r\n        amount: $amount\r\n        description: $description\r\n        duration: $duration\r\n        provider: $provider\r\n      }\r\n    ) {\r\n      plan {\r\n        _id\r\n        name\r\n        amount\r\n        description\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_PLAN = gql`\r\n  mutation deletePlan($id: String!) {\r\n    deletePlan(data: { id: $id }) {\r\n      count\r\n      message\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const UPDATE_PLAN = gql`\r\n  mutation updatePlan(\r\n    $id: String\r\n    $name: String\r\n    $amount: Float\r\n    $provider: String\r\n    $description: String\r\n  ) {\r\n    updatePlan(\r\n      data: {\r\n        id: $id\r\n        name: $name\r\n        amount: $amount\r\n        provider: $provider\r\n        description: $description\r\n      }\r\n    ) {\r\n      plan {\r\n        _id\r\n        name\r\n        amount\r\n        description\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const CREATE_PERMISSION = gql`\r\n  mutation createPermission($name: String!, $description: String!) {\r\n    createPermission(data: { name: $name, description: $description }) {\r\n      permission {\r\n        _id\r\n        name\r\n        description\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const UPDATE_PERMISSION = gql`\r\n  mutation updatePermission(\r\n    $id: String!\r\n    $name: String!\r\n    $description: String!\r\n  ) {\r\n    updatePermission(\r\n      data: { id: $id, name: $name, description: $description }\r\n    ) {\r\n      permission {\r\n        _id\r\n        name\r\n        description\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const DELETE_PERMISSION = gql`\r\n  mutation deletePermission($id: String!) {\r\n    deletePermission(data: { id: $id }) {\r\n      count\r\n      message\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const deleteRole = gql`\r\n  mutation deleteRole($id: String!) {\r\n    deleteRole(data: { id: $id }) {\r\n      count\r\n      message\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const updateAppointment = gql`\r\n  mutation updateAppointment(\r\n    $id: String!\r\n    $doctor: String!\r\n    $patient: String\r\n    $date: String!\r\n    $time: String\r\n  ) {\r\n    updateAppointment(\r\n      data: {\r\n        id: $id\r\n        doctor: $doctor\r\n        patient: $patient\r\n        date: $date\r\n        time: $time\r\n      }\r\n    ) {\r\n      appointment {\r\n        _id\r\n        doctor\r\n        patient\r\n        date\r\n        time\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\n// message\r\nexport const CREATE_MESSAGE = gql`\r\n  mutation createMessage(\r\n    $recipient: String!\r\n    $sender: String!\r\n    $subject: String!\r\n    $body: String!\r\n  ) {\r\n    createMessage(\r\n      data: {\r\n        recipient: $recipient\r\n        sender: $sender\r\n        subject: $subject\r\n        body: $body\r\n      }\r\n    ) {\r\n      messages {\r\n        _id\r\n        recipient\r\n        subject\r\n        sender\r\n        createdAt\r\n        updatedAt\r\n        body\r\n      }\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const LOGOUT_USER = gql`\r\n  mutation logout($user: String!, $deviceId: String) {\r\n    logout(data: { user: $user, deviceId: $deviceId }) {\r\n      result\r\n    }\r\n  }\r\n`;\r\nexport const getNewAccessToken = gql`\r\n  mutation refreshToken {\r\n    refreshToken {\r\n      account {\r\n        access_token\r\n        refresh_token\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const deleteProfile = gql`\r\n  mutation deleteProfile($id: String!) {\r\n    deleteProfile(data: { id: $id }) {\r\n      count\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const createRole = gql`\r\n  mutation createRole(\r\n    $name: String!\r\n    $editable: Boolean!\r\n    $description: String!\r\n    $permissions: [String!]\r\n  ) {\r\n    createRole(\r\n      data: {\r\n        name: $name\r\n        editable: $editable\r\n        description: $description\r\n        permissions: $permissions\r\n      }\r\n    ) {\r\n      role {\r\n        _id\r\n        name\r\n        permissions\r\n        editable\r\n        description\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const createReminder = gql`\r\n  mutation createReminder {\r\n    createReminder(\r\n      data: {\r\n        date: \"2021-08-15T23:19:02+01:00\"\r\n        description: \"wake me up for my appointment\"\r\n        patient: \"6116f2828497025413dcec5d\"\r\n        type: \"appointment\"\r\n        interval: \"daily\"\r\n      }\r\n    ) {\r\n      reminder {\r\n        _id\r\n        date\r\n        description\r\n        type\r\n        createdAt\r\n        updatedAt\r\n        patient\r\n        interval\r\n      }\r\n      message\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const deleteAppointment = gql`\r\n  mutation deleteAppointment($id: String!) {\r\n    deleteAppointment(data: { id: $id }) {\r\n      count\r\n      message\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const addRole = gql`\r\n  mutation createRole(\r\n    $name: String!\r\n    $editable: Boolean\r\n    $description: String\r\n    $permissions: [String!]\r\n  ) {\r\n    createRole(\r\n      data: {\r\n        name: $name\r\n        editable: $editable\r\n        description: $description\r\n        permissions: $permissions\r\n      }\r\n    ) {\r\n      role {\r\n        _id\r\n        name\r\n        permissions\r\n        editable\r\n        description\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const editRole = gql`\r\n  mutation updateRole(\r\n    $id: String!\r\n    $name: String\r\n    $description: String\r\n    $permissions: [String!]\r\n  ) {\r\n    updateRole(\r\n      data: {\r\n        id: $id\r\n        name: $name\r\n        permissions: $permissions\r\n        description: $description\r\n      }\r\n    ) {\r\n      role {\r\n        _id\r\n        name\r\n        permissions\r\n        editable\r\n        description\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const requestReferral = gql`\r\n  mutation requestReferral(\r\n    $doctor: String!\r\n    $patient: String!\r\n    $type: String!\r\n    $reason: String!\r\n    $note: String!\r\n    $specialization: String!\r\n  ) {\r\n    requestReferral(\r\n      data: {\r\n        doctor: $doctor\r\n        patient: $patient\r\n        type: $type\r\n        reason: $reason\r\n        note: $note\r\n        specialization: $specialization\r\n      }\r\n    ) {\r\n      referral {\r\n        _id\r\n        doctor\r\n        patient\r\n        type\r\n        reason\r\n        note\r\n        specialization\r\n        testType\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const deleteDoctor = gql`\r\n  mutation deleteDoctorProfile($id: String!) {\r\n    deleteDoctorProfile(data: { id: $id }) {\r\n      count\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const addPartner = gql`\r\n  mutation addPartner(\r\n    $name: String!\r\n    $category: String!\r\n    $providerId: String!\r\n    $email: String!\r\n    $logoImageUrl: String!\r\n  ) {\r\n    addPartner(\r\n      data: {\r\n        name: $name\r\n        category: $category\r\n        providerId: $providerId\r\n        email: $email\r\n        logoImageUrl: $logoImageUrl\r\n      }\r\n    ) {\r\n      partner {\r\n        _id\r\n        name\r\n        email\r\n        category\r\n        logoImageUrl\r\n      }\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const addPartnerCategory = gql`\r\n  mutation addPartnerCategory($name: String!) {\r\n    addPartnerCategory(data: { name: $name }) {\r\n      category {\r\n        _id\r\n        name\r\n      }\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const addProvider = gql`\r\n  mutation createProvider(\r\n    $name: String!\r\n    $iconAlt: String\r\n    $icon: String!\r\n    $userTypeId: String!\r\n  ) {\r\n    createProvider(\r\n      data: {\r\n        name: $name\r\n        iconAlt: $iconAlt\r\n        icon: $icon\r\n        userTypeId: $userTypeId\r\n      }\r\n    ) {\r\n      provider {\r\n        _id\r\n        name\r\n        iconAlt\r\n        icon\r\n        userTypeId\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      message\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const deletProvider = gql`\r\n  mutation deleteProvider($id: String!) {\r\n    deleteProvider(data: { id: $id }) {\r\n      count\r\n      message\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const deleteUserType = gql`\r\n  mutation deleteUserType($id: String!) {\r\n    deleteUserType(data: { id: $id }) {\r\n      count\r\n      message\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const signup = gql`\r\n  mutation signup(\r\n    $authType: String!\r\n    $email: EmailAddress!\r\n    $password: String!\r\n    $role: String\r\n  ) {\r\n    signup(\r\n      data: {\r\n        authType: $authType\r\n        email: $email\r\n        password: $password\r\n        role: $role\r\n      }\r\n    ) {\r\n      account {\r\n        _id\r\n        email\r\n      }\r\n      message\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const createUserType = gql`\r\n  mutation createUserType($name: String!, $icon: String!) {\r\n    createUserType(data: { name: $name, icon: $icon }) {\r\n      userType {\r\n        _id\r\n        name\r\n        icon\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      message\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const createAllery = gql`\r\n  mutation createAllergy(\r\n    $food: String!\r\n    $medication: String!\r\n    $profile: String!\r\n    $severity: String!\r\n  ) {\r\n    createAllergy(\r\n      data: {\r\n        food: $food\r\n        medication: $medication\r\n        profile: $profile\r\n        severity: $severity\r\n      }\r\n    ) {\r\n      allergy {\r\n        _id\r\n        food\r\n        medication\r\n        profile\r\n        createdAt\r\n        updatedAt\r\n        severity\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const createDOctorProfile = gql`\r\n  mutation createDoctorProfile(\r\n    $firstName: String!\r\n    $lastName: String!\r\n    $gender: String\r\n    $dociId: String!\r\n    $phoneNumber: String!\r\n    $hospital: String!\r\n    $specialization: String!\r\n    $dob: String!\r\n    $cadre: String!\r\n    $image: String!\r\n    $providerId: String\r\n  ) {\r\n    createDoctorProfile(\r\n      data: {\r\n        firstName: $firstName\r\n        lastName: $lastName\r\n        gender: $gender\r\n        phoneNumber: $phoneNumber\r\n        dociId: $dociId\r\n        hospital: $hospital\r\n        specialization: $specialization\r\n        dob: $dob\r\n        cadre: $cadre\r\n        image: $image\r\n        providerId: $providerId\r\n      }\r\n    ) {\r\n      profile {\r\n        _id\r\n        dociId\r\n        createdAt\r\n        updatedAt\r\n        firstName\r\n        lastName\r\n        gender\r\n        phoneNumber\r\n        email\r\n        hospital\r\n        specialization\r\n        dob\r\n        cadre\r\n        picture\r\n      }\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const addTest = gql`\r\n  mutation addDiagnosticLabTest($name: String, $price: Float, $tat: String) {\r\n    addDiagnosticLabTest(data: { name: $name, price: $price, tat: $tat }) {\r\n      diagnosticLabTest {\r\n        _id\r\n        partner\r\n        name\r\n        price\r\n        tat\r\n      }\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const uploadTests = gql`\r\n  mutation uploadDiagnosticLabTests($fileUrl: String!) {\r\n    uploadDiagnosticLabTests(\r\n      data: { fileUrl: $fileUrl, bucket: \"heala-media\" }\r\n    ) {\r\n      result {\r\n        fileUrl\r\n        totalInserted\r\n        bucket\r\n      }\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const UPDATE_TEST = gql`\r\n  mutation updateDiagnosticLabTest(\r\n    $id: String!\r\n    $name: String!\r\n    $price: Float!\r\n    $tat: String!\r\n  ) {\r\n    updateDiagnosticLabTest(\r\n      data: { id: $id, name: $name, price: $price, tat: $tat }\r\n    ) {\r\n      diagnosticLabTest {\r\n        _id\r\n        partner\r\n        name\r\n        price\r\n        tat\r\n      }\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\routes\\Routes.js",["778"],"import React from \"react\";\r\nimport { Switch } from \"react-router-dom\";\r\nimport PrivateRoute from \"components/routes/PrivateRoute\";\r\nimport { CircularChart } from \"components/Utilities\";\r\nimport {\r\n  ViewHCP,\r\n  Chat,\r\n  Patients,\r\n  Subscription,\r\n  Hcps,\r\n  ViewDoctorVerification,\r\n  SingleHCP,\r\n  DoctorVerificationProfile,\r\n  Appointments,\r\n  HcpEarnings,\r\n  HcpAvailability,\r\n  HcpPatients,\r\n  HcpAppointments,\r\n  HcpProfile,\r\n  Medications,\r\n  SinglePatient,\r\n  CaseNotes,\r\n  MedicalRecords,\r\n  Prescriptions,\r\n  PatientAppointment,\r\n  Email,\r\n  HCP,\r\n  Consultations,\r\n  PatientProfile,\r\n  Dashboard,\r\n  HcpCaseNote,\r\n  HcpConsultations,\r\n  ViewMessage,\r\n  CreateMessage,\r\n  Messages,\r\n  WaitingListDetails,\r\n  WaitingList,\r\n  Permission,\r\n  Management,\r\n  Administrator,\r\n  ViewReferral,\r\n  Settings,\r\n  ReferralTab,\r\n  Partners,\r\n  Finance,\r\n  Payout,\r\n  HCPChat,\r\n  CreateEmail,\r\n  ViewMail,\r\n  EditManagement,\r\n  PendingPayout,\r\n  WhiteLabel,\r\n  UserTypes,\r\n  Providers,\r\n  Financetable,\r\n} from \"components/pages\";\r\nimport ListManagment from \"components/pages/ListManagment\";\r\nimport TestList from \"components/pages/TestList\";\r\nimport SubscriptionIncome from \"components/pages/SubscriptionIncome\";\r\n\r\nconst Routes = () => {\r\n  return (\r\n    <Switch>\r\n      {/*  =====  DASHBORD ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute path={[\"/\", \"/dashboard\"]} exact component={Dashboard} />\r\n\r\n      {/*  =====  PATENTS ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute exact path=\"/patients\" component={Patients} />\r\n\r\n      <PrivateRoute exact path=\"/patients/:patientId\" component={SinglePatient} />\r\n\r\n      <PrivateRoute exact path=\"/patients/:patientId/profile\" component={PatientProfile} />\r\n\r\n      <PrivateRoute exact path=\"/patients/:patientId/profile/chat\" component={Chat} />\r\n\r\n      <PrivateRoute path=\"/patients/:patientId/consultations\" exact component={Consultations} />\r\n\r\n      <PrivateRoute path=\"/patients/:patientId/prescriptions\" component={Prescriptions} />\r\n\r\n      <PrivateRoute path=\"/patients/:patientId/appointments\" component={PatientAppointment} />\r\n\r\n      <PrivateRoute path=\"/patients/:patientId/records\" component={MedicalRecords} />\r\n\r\n      <PrivateRoute\r\n        path=\"/patients/:patientId/consultations/case-notes/:rowId\"\r\n        component={CaseNotes}\r\n      />\r\n\r\n      <PrivateRoute path=\"/patients/:patientId/medications\" component={Medications} />\r\n\r\n      {/*  =====  DOCTORS ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute exact path=\"/hcps\" component={Hcps} />\r\n\r\n      <PrivateRoute exact path=\"/hcps/:hcpId\" component={SingleHCP} />\r\n\r\n      <PrivateRoute exact path=\"/hcps/:hcpId/profile\" component={HcpProfile} />\r\n\r\n      <PrivateRoute exact path=\"/hcps/:hcpId/profile/chat\" component={HCPChat} />\r\n      <PrivateRoute exact path=\"/hcps/:hcpId/verification\" component={ViewDoctorVerification} />\r\n\r\n      <PrivateRoute path=\"/hcps/:hcpId/appointments\" component={HcpAppointments} />\r\n\r\n      <PrivateRoute path=\"/hcps/:hcpId/availability\" component={HcpAvailability} />\r\n\r\n      <PrivateRoute path=\"/hcps/:hcpId/earnings\" component={HcpEarnings} />\r\n\r\n      <PrivateRoute path=\"/hcps/:hcpId/earnings\" component={HcpEarnings} />\r\n\r\n      <PrivateRoute path=\"/hcps/:hcpId/doctor-patients\" component={HcpPatients} />\r\n\r\n      <PrivateRoute exact path=\"/hcps/:hcpId/consultations\" component={HcpConsultations} />\r\n\r\n      <PrivateRoute path=\"/hcps/:hcpId/consultations/case-notes/:rowId\" component={HcpCaseNote} />\r\n\r\n      {/*  =====  PARTNERS ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute exact path=\"/partners\" component={Partners} />\r\n\r\n      {/*  =====  APPOINTMENTS ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute exact path=\"/appointments\" component={Appointments} />\r\n\r\n      <PrivateRoute exact path=\"/appointments/waiting-list\" component={WaitingList} />\r\n\r\n      <PrivateRoute path=\"/appointments/waiting-list/:listId\" component={WaitingListDetails} />\r\n\r\n      <PrivateRoute exact path=\"/appointments/consultation\" component={CircularChart} />\r\n\r\n      {/*  =====  MESSAGES ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute exact path=\"/messages\" component={Messages} />\r\n\r\n      <PrivateRoute path=\"/messages/create-message\" component={CreateMessage} />\r\n\r\n      <PrivateRoute path=\"/messages/:messageId\" component={ViewMessage} />\r\n\r\n      {/*  =====  EMAILS ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute path=\"/email/create-email\" component={CreateEmail} />\r\n\r\n      <PrivateRoute path=\"/email/:emailId\" component={ViewMail} />\r\n\r\n      <PrivateRoute path=\"/email\" component={Email} />\r\n\r\n      {/*  =====  DOCTORS VERIFICATION ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute exact path=\"/verification\" component={HCP} />\r\n\r\n      <PrivateRoute exact path=\"/verification\" component={HCP} />\r\n\r\n      {/*  =====  WHITE LABEL ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute exact path=\"/label\" component={WhiteLabel} />\r\n      <PrivateRoute path=\"/label/provider\" component={Providers} />\r\n\r\n      <PrivateRoute path=\"/label/types\" component={UserTypes} />\r\n\r\n      {/*  =====  FINANCE ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute exact path=\"/finance\" component={Finance} />\r\n\r\n      <PrivateRoute exact path=\"/finance/earnings\" component={Financetable} />\r\n\r\n      <PrivateRoute exact path=\"/finance/payouts\" component={Payout} />\r\n      <PrivateRoute exact path=\"/finance/pending\" component={PendingPayout} />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/finance/sub-income\"\r\n        component={SubscriptionIncome}\r\n      />\r\n\r\n      {/*  =====  REFERRALS ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute path=\"/referrals/:referralId\" component={ViewReferral} />\r\n\r\n      <PrivateRoute path=\"/referrals\" component={ReferralTab} />\r\n\r\n      {/*  =====  SUBSCRIPTION ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute path=\"/plans\" component={Subscription} />\r\n\r\n      {/*  =====  VIEW DOCTORS VERIFICATION ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute path=\"/verification/view/:viewId\" exact component={ViewHCP} />\r\n      <PrivateRoute\r\n        exact\r\n        path=\"/verification/view/:viewId/doctor/:id\"\r\n        component={DoctorVerificationProfile}\r\n      />\r\n\r\n      {/*  =====  SETTINGS ROUTES STARTS HERE ===== */}\r\n      <PrivateRoute exact path=\"/settings\" component={Settings} />\r\n\r\n      <PrivateRoute path=\"/settings/administrator\" component={Administrator} />\r\n\r\n      <PrivateRoute path=\"/settings/permissions\" component={Permission} />\r\n\r\n      <PrivateRoute exact path=\"/settings/management\" component={Management} />\r\n      <PrivateRoute exact path=\"/settings/management/:editId\" component={EditManagement} />\r\n      <PrivateRoute exact path=\"/settings/list-management\" component={ListManagment} />\r\n      <PrivateRoute exact path=\"/settings/list-management/tests\" component={TestList} />\r\n    </Switch>\r\n  );\r\n  // }\r\n};\r\n\r\nexport default Routes;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\store.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\WhiteLabel.js",["779","780"],"import React from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { ReactComponent as Administrator } from \"assets/images/administrator.svg\";\r\nimport { ReactComponent as ConsulationIcon } from \"assets/images/consultation.svg\";\r\nimport { Card } from \"components/Utilities\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst WhiteLabel = () => {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        alignItems=\"space-between\"\r\n        gap=\"5rem\"\r\n        paddingY=\"2rem\"\r\n        justifyContent={{ sm: \"center\", md: \"center\" }}\r\n      >\r\n        <Grid item container md={5} sm={5} xs={12}>\r\n          <Grid item container flexDirection=\"column\">\r\n            <Link to=\"/label/provider\" style={{ textDecoration: \"none\" }}>\r\n              <Card\r\n                alt=\"providers \"\r\n                title=\"Providers\"\r\n                background={theme.palette.common.lightGreen}\r\n              >\r\n                <Administrator fill={theme.palette.common.green} />\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item container md={5} sm={5} xs={12}>\r\n          <Grid item container flexDirection=\"column\">\r\n            <Link to=\"/label/types\" style={{ textDecoration: \"none\" }}>\r\n              <Card\r\n                alt=\"User Types\"\r\n                title=\"User Types\"\r\n                background={theme.palette.common.lightRed}\r\n              >\r\n                <ConsulationIcon fill={theme.palette.common.red} />\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default WhiteLabel;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\WaitingListDetails.js",["781","782","783","784","785","786","787","788","789","790"],"import React from \"react\";\r\nimport { Chip, Typography, Grid } from \"@mui/material\";\r\nimport { DisplayProfile, PreviousButton } from \"components/Utilities\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { makeStyles } from \"@mui/styles\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardGrid: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    padding: \"4rem 5rem\",\r\n    height: \"16.1rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\r\n  },\r\n  infoBadge: {\r\n    \"&.css-1dl0kns-MuiChip-root\": {\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"1.5rem\",\r\n      color: theme.palette.common.green,\r\n    },\r\n  },\r\n}));\r\n\r\nconst WaitingListDetails = () => {\r\n  const classes = useStyles();\r\n\r\n  const symptoms = [\"Headache\", \"Sore Throat\", \"Fever\"];\r\n\r\n  return (\r\n    <Grid container direction=\"column\" style={{ paddingBottom: \"10rem\" }}>\r\n      <Grid item style={{ marginBottom: \"3rem\" }}>\r\n        <PreviousButton path=\"/appointments/waiting-list\" />\r\n      </Grid>\r\n      <Grid item>\r\n        <DisplayProfile\r\n          fullName=\"Raphael Igbinedion\"\r\n          displayPhoto={displayPhoto}\r\n          medicalTitle=\"Medical ID\"\r\n          statusId={132467}\r\n        />\r\n      </Grid>\r\n      <Grid\r\n        item\r\n        container\r\n        justifyContent=\"space-between\"\r\n        style={{ paddingTop: \"5rem\" }}\r\n      >\r\n        {/* SYMPTOMS GRID */}\r\n        <Grid\r\n          item\r\n          md\r\n          className={classes.cardGrid}\r\n          style={{ marginRight: \"2rem\" }}\r\n        >\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            style={{ height: \"100%\" }}\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item>\r\n              <Typography variant=\"h4\">Symptoms: </Typography>\r\n            </Grid>\r\n\r\n            <Grid item container justifyContent=\"space-evenly\">\r\n              {symptoms.map((symptom) => (\r\n                <Grid item key={symptom}>\r\n                  <Chip\r\n                    variant=\"outlined\"\r\n                    label={symptom}\r\n                    className={classes.infoBadge}\r\n                  />\r\n                </Grid>\r\n              ))}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {/* CONSULTATION TYPE GRID */}\r\n        <Grid\r\n          item\r\n          md\r\n          className={classes.cardGrid}\r\n          style={{ marginLeft: \"2rem\" }}\r\n        >\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            style={{ height: \"100%\" }}\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item>\r\n              <Typography variant=\"h4\">Consultation Type</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Chip\r\n                variant=\"outlined\"\r\n                label=\"Type 1\"\r\n                className={classes.infoBadge}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid\r\n        item\r\n        container\r\n        justifyContent=\"space-between\"\r\n        style={{ paddingTop: \"5rem\" }}\r\n      >\r\n        {/* SCALE OF DISCOMFORT GRID */}\r\n        <Grid\r\n          item\r\n          md\r\n          className={classes.cardGrid}\r\n          style={{ marginRight: \"2rem\" }}\r\n        >\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            style={{ height: \"100%\" }}\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item>\r\n              <Typography variant=\"h4\">Scale of discomfort: </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Chip\r\n                variant=\"outlined\"\r\n                label=\"Once\"\r\n                className={classes.infoBadge}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {/* DATE OF FIRST NOTICE GRID */}\r\n        <Grid\r\n          item\r\n          md\r\n          className={classes.cardGrid}\r\n          style={{ marginLeft: \"2rem\" }}\r\n        >\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            style={{ height: \"100%\" }}\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item>\r\n              <Typography variant=\"h4\">Date of first notice</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Chip\r\n                variant=\"outlined\"\r\n                label=\"01-10-2021\"\r\n                className={classes.infoBadge}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default WaitingListDetails;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\WaitingList.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\VideoCall.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\TestList.js",["791","792","793","794","795","796"],"import React from \"react\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\n\r\nimport { TestListRow } from \"components/Rows/TestListRow\";\r\nimport ConfirmModal from \"components/modals/ConfirmModal\";\r\nimport { AddTestForm } from \"components/Forms/AddTestForm\";\r\nimport { deleteItem } from \"helpers/filterHelperFunctions\";\r\nimport EnhancedTable from \"components/layouts/EnhancedTable\";\r\nimport DeletePartner from \"components/modals/DeleteOrDisable\";\r\nimport { UploadTestForm } from \"components/Forms/UploadTestForm\";\r\nimport { testTableHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { DELETE_TEST, getListOfLabTests } from \"components/graphQL/useQuery\";\r\nimport {\r\n  CustomButton,\r\n  Loader,\r\n  PreviousButton,\r\n  Modals,\r\n} from \"components/Utilities\";\r\nimport { EditTestForm } from \"components/Forms/EditTestForm\";\r\n\r\nconst TestList = () => {\r\n  const theme = useTheme();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [list, setList] = React.useState([]);\r\n  const [delete_test] = useLazyQuery(DELETE_TEST);\r\n  const [editData, setEditData] = React.useState(null);\r\n  const [isDeleting, setIsDeleting] = React.useState({});\r\n  const [addTestModal, setAddTestModal] = React.useState(false);\r\n  const [confirmModal, setConfirmModal] = React.useState(false);\r\n  const [testToDelete, setTestToDelete] = React.useState(null);\r\n  const [editTestModal, setEditTestModal] = React.useState(false);\r\n  const [uploadListModal, setUploadListModal] = React.useState(false);\r\n  const [confirmDeleteModal, setConfirmDeleteModal] = React.useState(false);\r\n  const [fetchLabTestList, { loading, error, data, refetch }] =\r\n    useLazyQuery(getListOfLabTests);\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    fetchLabTestList();\r\n  }, [fetchLabTestList]);\r\n\r\n  React.useEffect(() => {\r\n    if (data) {\r\n      setList(data?.getDiagnosticLabTests?.data);\r\n    }\r\n  }, [data]);\r\n\r\n  React.useEffect(() => {\r\n    if (data) {\r\n      (data?.getDiagnosticLabTests?.data || []).map((test) => {\r\n        const newIsDeleting = isDeleting;\r\n        setIsDeleting({ [test?._id]: false, ...newIsDeleting });\r\n        return null;\r\n      });\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [data]);\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        height=\"100%\"\r\n      >\r\n        <Grid item container justifyContent=\"space-between\">\r\n          <PreviousButton path=\"/settings/list-management\" />\r\n\r\n          {/* === ADD BUTTONS === */}\r\n          <Grid item>\r\n            <Grid container>\r\n              <CustomButton\r\n                endIcon={<AddIcon />}\r\n                title=\"Add Test\"\r\n                type={buttonType}\r\n                onClick={() => setAddTestModal(true)}\r\n                sx={{ marginRight: \"1rem\" }}\r\n              />\r\n              <CustomButton\r\n                endIcon={<AddIcon />}\r\n                title=\"Upload list\"\r\n                type={buttonType}\r\n                onClick={() => setConfirmModal(true)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {error ? (\r\n          <NoData error={error} />\r\n        ) : loading ? (\r\n          <Loader />\r\n        ) : !list ? (\r\n          <EmptyTable\r\n            headCells={testTableHeadCells}\r\n            paginationLabel=\"Test per page\"\r\n          />\r\n        ) : list.length > 0 ? (\r\n          /* ================= TESTS TABLE ================= */\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={testTableHeadCells}\r\n              rows={list}\r\n              hasCheckbox={false}\r\n              fetchData={fetchLabTestList}\r\n              hasPagination={false}\r\n            >\r\n              {list.map((row, index) => {\r\n                const { _id } = row;\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n                return (\r\n                  <TestListRow\r\n                    key={_id}\r\n                    data={row}\r\n                    labelId={labelId}\r\n                    setEditData={setEditData}\r\n                    isDeleting={isDeleting[_id]}\r\n                    setTestIdToDelete={setTestToDelete}\r\n                    openEditModal={() => setEditTestModal(true)}\r\n                    openConfirmModal={() => setConfirmDeleteModal(true)}\r\n                  />\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={testTableHeadCells}\r\n            paginationLabel=\"Patients per page\"\r\n          />\r\n        )}\r\n\r\n        {/* ==== ADD TEST MODAL ==== */}\r\n        <Modals\r\n          isOpen={addTestModal}\r\n          title=\"Add Test\"\r\n          rowSpacing={5}\r\n          height=\"auto\"\r\n          handleClose={() => setAddTestModal(false)}\r\n        >\r\n          <AddTestForm\r\n            onSuccess={() => {\r\n              setAddTestModal(false);\r\n              refetch();\r\n            }}\r\n          />\r\n        </Modals>\r\n\r\n        {/* ==== EDIT TEST MODAL ==== */}\r\n        <Modals\r\n          isOpen={editTestModal}\r\n          title=\"Edit Test\"\r\n          rowSpacing={5}\r\n          height=\"auto\"\r\n          handleClose={() => setEditTestModal(false)}\r\n        >\r\n          <EditTestForm\r\n            data={editData}\r\n            onSuccess={() => {\r\n              setEditTestModal(false);\r\n              refetch();\r\n            }}\r\n          />\r\n        </Modals>\r\n\r\n        {/* ======== CONFIRM UPLOAD TEST MODAL ========= */}\r\n        <ConfirmModal\r\n          open={confirmModal}\r\n          setOpen={setConfirmModal}\r\n          title=\"Confirm Upload Tests\"\r\n          confirmationMsg=\"Uploading a new test JSON file will overwrite the current file.\"\r\n          onConfirm={() => {\r\n            setUploadListModal(false);\r\n            setUploadListModal(true);\r\n          }}\r\n          onCancel={() => {\r\n            setUploadListModal(false);\r\n          }}\r\n        />\r\n\r\n        {/* ==== UPLOAD TEST MODAL ==== */}\r\n        <Modals\r\n          isOpen={uploadListModal}\r\n          title=\"Add Test\"\r\n          rowSpacing={5}\r\n          height=\"auto\"\r\n          handleClose={() => setUploadListModal(false)}\r\n        >\r\n          <UploadTestForm\r\n            onSuccess={() => {\r\n              refetch();\r\n              setUploadListModal(false);\r\n            }}\r\n          />\r\n        </Modals>\r\n\r\n        {/*  ======= CONFIRM DELETE ======== */}\r\n        <DeletePartner\r\n          open={confirmDeleteModal}\r\n          setOpen={setConfirmDeleteModal}\r\n          title=\"Delete Test\"\r\n          btnValue=\"delete\"\r\n          onConfirm={() => {\r\n            deleteItem(\r\n              delete_test,\r\n              testToDelete,\r\n              setTestToDelete,\r\n              refetch,\r\n              Typography,\r\n              enqueueSnackbar,\r\n              setIsDeleting,\r\n              isDeleting\r\n            );\r\n            setUploadListModal(false);\r\n          }}\r\n          confirmationMsg=\"Are you sure you want to delete\"\r\n          onCancel={() => {\r\n            setUploadListModal(false);\r\n          }}\r\n        />\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TestList;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\ViewReferral.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\ViewMail.js",["797","798"],"import React from \"react\";\r\nimport { Grid, Chip, Divider, Typography, Avatar } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { PreviousButton } from \"components/Utilities\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport ReactHTMLParser from \"react-html-parser\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  parentGrid: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.1)\",\r\n  },\r\n  gridWrapper: {\r\n    padding: \"3rem 5rem\",\r\n  },\r\n  chip: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.25rem\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n      background: theme.palette.common.white,\r\n      color: theme.palette.common.green,\r\n      \"& .MuiChip-deleteIcon\": {\r\n        color: \"inherit\",\r\n        fontSize: \"inherit\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst ViewMail = () => {\r\n  const { emailId } = useParams();\r\n\r\n  const classes = useStyles();\r\n  const { emailData } = useSelector((state) => state.tables);\r\n  const details = emailData[emailId];\r\n  const parseTextArea = ReactHTMLParser(details.textarea);\r\n\r\n  return (\r\n    <Grid container direction=\"column\">\r\n      <Grid item style={{ marginBottom: \"3rem\" }}>\r\n        <PreviousButton path={`/email`} />\r\n      </Grid>\r\n      <Grid item container direction=\"column\" className={classes.parentGrid}>\r\n        <Grid item className={classes.gridWrapper}>\r\n          <Typography variant=\"h3\"> {details.message}</Typography>\r\n        </Grid>\r\n        <Divider />\r\n        <Grid item container style={{ padding: \"1.5rem 5rem\" }}>\r\n          <Grid container alignItems=\"center\" flexWrap=\"nowrap\">\r\n            <Grid item container alignItems=\"center\" gap={2}>\r\n              <Grid item>\r\n                <Chip\r\n                  avatar={<Avatar alt=\"name\" src={displayPhoto} />}\r\n                  label=\"Doctor's Name \"\r\n                  variant=\"outlined\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Chip\r\n                  variant=\"outlined\"\r\n                  deleteIcon={<ArrowForwardIosIcon />}\r\n                  onClick={() =>\r\n                    window.open(`mailto:${details.email}`, \"_blank\")\r\n                  }\r\n                  onDelete={() => console.log(\" \")}\r\n                  label={details.email}\r\n                  className={classes.chip}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n            <Divider orientation=\"vertical\" />\r\n            <Divider orientation=\"vertical\" />\r\n            <Grid item container></Grid>\r\n            <Grid item container>\r\n              <Grid container rowSpacing={1} columnSpacing={2}>\r\n                {details.name.map((item) => {\r\n                  return (\r\n                    <Grid item key={item}>\r\n                      <Chip\r\n                        avatar={<Avatar alt={item} src={displayPhoto} />}\r\n                        label={item}\r\n                        variant=\"outlined\"\r\n                      />\r\n                    </Grid>\r\n                  );\r\n                })}\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Divider />\r\n        <Grid\r\n          item\r\n          className={classes.gridWrapper}\r\n          style={{ lineHeight: 1.85, fontSize: \"1.5rem\" }}\r\n        >\r\n          {/* <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}> */}\r\n          {parseTextArea}\r\n          {/* </Typography> */}\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default ViewMail;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\ViewHCP.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\ListManagment.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\routes\\PrivateRoute.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\action-creators\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\reducers\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\PreviousButton.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\Time.js",["799"],"import moment from \"moment\";\r\n\r\nexport const dateMoment = (dateString) => {\r\n  return moment(dateString).utc().format(\"DD-MM-YYYY\");\r\n};\r\nexport const timeMoment = (dateString) => {\r\n  return moment(dateString).format(\"hh:mm A\");\r\n};\r\n\r\nexport const timeConverter = (str) => {\r\n  const date = new Date(str),\r\n    mnth = (\"0\" + (date.getMonth() + 1)).slice(-2),\r\n    day = (\"0\" + date.getDate()).slice(-2);\r\n  return [date.getFullYear(), mnth, day].join(\"-\");\r\n};\r\n\r\nexport const hours = (z) => {\r\n  let time = z.split(\":\")[0];\r\n  if (time < 1 && time > -1) return `12 AM`;\r\n  if (time < 12) return `${z} AM`;\r\n  if (time > 12) {\r\n    let newTime = +time - 12;\r\n    return `${newTime} PM`;\r\n  } else return `${time} Noon`;\r\n};\r\n\r\nexport const daily = (value) => {\r\n  let result = \"\";\r\n  if (value == 1) result = \"daily\";\r\n  else result = `${value} days`;\r\n  return result;\r\n};\r\nexport const duration = (value) => {\r\n  let result = \"\";\r\n  if (value == 1) result = \"once\";\r\n  if (value == 2) result = \"twice\";\r\n  if (value == 3) result = \"thrice\";\r\n  else if (value > 3) result = `${value} times`;\r\n  return result;\r\n};\r\n\r\nexport const returnpercent = (a, b) => {\r\n  //% Increase/Decrease = (present m(onth total - past month total) / past month total × 100\\\\\r\n  let x = b - a;\r\n  let y = x / a;\r\n  return y;\r\n};\r\n// month count (monthly increase)\r\n// current month / prev. month ...pending\r\nexport const financialPercent = (a, b) => {\r\n  return Math.round((a / (b + a)) * 100);\r\n};\r\n\r\nexport const selectOptions = [\r\n  { key: \"One day\", value: \"1\" },\r\n  { key: \"Five Days\", value: \"5\" },\r\n  { key: \"One Month\", value: \"30\" },\r\n  { key: \"Three Months\", value: \"90\" },\r\n  { key: \"One Year\", value: \"365\" },\r\n];\r\nexport const formatNumber = (num) => {\r\n  return new Intl.NumberFormat().format(num);\r\n};\r\nexport const unformat = (amount, locale) => {\r\n  let thousandSeparator = Intl.NumberFormat(locale)\r\n    .format(11111)\r\n    .replace(/\\p{Number}/gu, \"\");\r\n  let decimalSeparator = Intl.NumberFormat(locale)\r\n    .format(1.1)\r\n    .replace(/\\p{Number}/gu, \"\");\r\n\r\n  return parseFloat(\r\n    amount\r\n      .replace(new RegExp(\"\\\\\" + thousandSeparator, \"g\"), \"\")\r\n      .replace(new RegExp(\"\\\\\" + decimalSeparator), \",\")\r\n  );\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\graphQL\\useQuery.js",["800"],"import { gql, useQuery } from \"@apollo/client\";\r\nimport { PageInfo } from \"./fragment\";\r\n\r\nexport const doctor = gql`\r\n  query doctorProfile($id: ID!) {\r\n    doctorProfile(id: $id) {\r\n      _id\r\n      firstName\r\n      lastName\r\n      gender\r\n      phoneNumber\r\n      createdAt\r\n      updatedAt\r\n      email\r\n      hospital\r\n      specialization\r\n      dob\r\n      cadre\r\n      picture\r\n      provider\r\n      consultations\r\n      status\r\n      dociId\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getPlans = gql`\r\n  ${PageInfo}\r\n  query getPlans($amount: Float, $page: Int, $first: Int, $provider: String) {\r\n    getPlans(\r\n      filterBy: { amount: $amount, provider: $provider }\r\n      page: $page\r\n      orderBy: \"-createdAt\"\r\n      first: $first\r\n    ) {\r\n      plan {\r\n        _id\r\n        name\r\n        providerData\r\n        amount\r\n        description\r\n        provider\r\n        duration\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      pageInfo {\r\n        ...pageDetails\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getSinglePlan = gql`\r\n  query getPlan($id: ID!) {\r\n    getPlan(id: $id) {\r\n      name\r\n      amount\r\n      providerData\r\n      description\r\n      provider\r\n      duration\r\n    }\r\n  }\r\n`;\r\nexport const DoctorCount = gql`\r\n  query DoctorCount {\r\n    DoctorCount\r\n  }\r\n`;\r\nexport const getUserType = gql`\r\n  query getUserType($id: ID!) {\r\n    getUserType(id: $id, orderBy: \"-createdAt\") {\r\n      _id\r\n      name\r\n      icon\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const dashboard = gql`\r\n  query getStats {\r\n    getStats(filterBy: { providerId: \"61db6f8968b248001aec4fcb\" }) {\r\n      patientStats\r\n      doctorStats\r\n      totalEarnings\r\n      totalPayout\r\n      appointmentStats\r\n      subscribers\r\n      availabilityCalendar {\r\n        _id\r\n        doctor\r\n        doctorData\r\n        day\r\n        available\r\n        times {\r\n          start\r\n          stop\r\n        }\r\n        createdAt\r\n        updatedAt\r\n      }\r\n    }\r\n  }\r\n`;\r\n// ${PageInfo}\r\nexport const getEarningStats = gql`\r\n  query getEarningStats($q: String, $page: Int, $providerId: String, $status: String) {\r\n    getEarningStats(filterBy: { status: $status, providerId: $providerId }, q: $q, page: $page) {\r\n      totalEarnings\r\n      totalPayout\r\n      earningData\r\n      payoutData\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getFinanceStats = gql`\r\n  query getEarningStats($q: String, $page: Int) {\r\n    getEarningStats(q: $q, page: $page) {\r\n      subscriptionIncome\r\n      totalPayout\r\n    }\r\n  }\r\n`;\r\n// pageInfo {\r\n//   ...pageDetails\r\n// }\r\n\r\nexport const getEarningData = gql`\r\n  query getEarningStats($first: Int, $page: Int) {\r\n    getEarningStats(q: \"365\", page: $page, first: $first, orderBy: \"-createdAt\") {\r\n      earningData\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getSubscriptionsIncome = gql`\r\n  query getEarningStats($first: Int, $page: Int) {\r\n    getEarningStats(q: \"365\", page: $page, first: $first, orderBy: \"-createdAt\") {\r\n      subscriptionIncomeData\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getPayoutData = gql`\r\n  query getEarningStats($first: Int, $page: Int, $status: String) {\r\n    getEarningStats(\r\n      filterBy: { status: $status }\r\n      q: \"365\"\r\n      page: $page\r\n      first: $first\r\n      orderBy: \"-createdAt\"\r\n    ) {\r\n      payoutData\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getMessage = gql`\r\n  ${PageInfo}\r\n  query getMessages($recipient: String, $page: Int, $first: Int) {\r\n    getMessages(\r\n      filterBy: { recipient: $recipient }\r\n      page: $page\r\n      orderBy: \"-createdAt\"\r\n      first: $first\r\n    ) {\r\n      messages {\r\n        _id\r\n        recipient\r\n        subject\r\n        sender\r\n        createdAt\r\n        updatedAt\r\n        body\r\n        recipientData\r\n      }\r\n      pageInfo {\r\n        ...pageDetails\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getPermissions = gql`\r\n  ${PageInfo}\r\n  query getPermissions($page: Int, $first: Int) {\r\n    getPermissions(page: $page, orderBy: \"-createdAt\", first: $first) {\r\n      permission {\r\n        _id\r\n        name\r\n        description\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      pageInfo {\r\n        ...pageDetails\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getSinglePermissions = gql`\r\n  query getPermission($id: ID!) {\r\n    getPermission(id: $id) {\r\n      _id\r\n      name\r\n      description\r\n    }\r\n  }\r\n`;\r\nexport const getConsultations = gql`\r\n  ${PageInfo}\r\n  query getConsultations($id: ID!, $orderBy: String!, $page: Int, $first: Int) {\r\n    getConsultations(filterBy: { patient: $id }, orderBy: $orderBy, page: $page, first: $first) {\r\n      data {\r\n        _id\r\n        patient\r\n        consultationOwner\r\n        symptoms {\r\n          name\r\n        }\r\n        description\r\n        discomfortLevel\r\n        firstNotice\r\n        doctor\r\n        type\r\n        status\r\n        contactMedium\r\n        doctorData\r\n        patientData\r\n        diagnosis {\r\n          ailment\r\n          severity\r\n        }\r\n        doctorNote\r\n        prescription {\r\n          drugName\r\n          dosageQuantity\r\n          dosage\r\n          dosageFrequency {\r\n            day\r\n            duration\r\n          }\r\n          mode\r\n        }\r\n        createdAt\r\n        referralId\r\n        updatedAt\r\n      }\r\n      pageInfo {\r\n        ...pageDetails\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getDocConsult = gql`\r\n  ${PageInfo}\r\n  query getConsultations($id: String!, $page: Int, $first: Int) {\r\n    getConsultations(filterBy: { doctor: $id }, page: $page, first: $first) {\r\n      data {\r\n        _id\r\n        patient\r\n        consultationOwner\r\n        contactMedium\r\n        symptoms {\r\n          name\r\n        }\r\n        description\r\n        discomfortLevel\r\n        firstNotice\r\n        doctor\r\n        diagnosis {\r\n          ailment\r\n          severity\r\n        }\r\n        doctorNote\r\n        prescription {\r\n          drugName\r\n          dosageQuantity\r\n          dosage\r\n          dosageFrequency {\r\n            day\r\n            duration\r\n          }\r\n          mode\r\n        }\r\n        createdAt\r\n        patientData\r\n        updatedAt\r\n        referralId\r\n        status\r\n      }\r\n      pageInfo {\r\n        ...pageDetails\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getConsult = gql`\r\n  query getConsultation($id: ID!) {\r\n    getConsultation(id: $id) {\r\n      _id\r\n      patient\r\n      consultationOwner\r\n      patientData\r\n      doctorData\r\n      contactMedium\r\n      status\r\n      symptoms {\r\n        name\r\n      }\r\n      description\r\n      discomfortLevel\r\n      firstNotice\r\n      doctor\r\n      diagnosis {\r\n        ailment\r\n        severity\r\n      }\r\n      doctorNote\r\n      prescription {\r\n        drugName\r\n        dosageQuantity\r\n        dosage\r\n        dosageFrequency {\r\n          day\r\n          duration\r\n        }\r\n        mode\r\n      }\r\n      createdAt\r\n      updatedAt\r\n      type\r\n      referralId\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getAppoint = gql`\r\n  ${PageInfo}\r\n  query getAppointments($id: ID!, $orderBy: String, $page: Int, $first: Int) {\r\n    getAppointments(filterBy: { patient: $id }, page: $page, orderBy: $orderBy, first: $first) {\r\n      data {\r\n        _id\r\n        doctor\r\n        patient\r\n        date\r\n        time\r\n        createdAt\r\n        updatedAt\r\n        patientData\r\n        doctorData\r\n      }\r\n      pageInfo {\r\n        ...pageDetails\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getDOCAppoint = gql`\r\n  query getAppointments($id: ID!, $orderBy: String!) {\r\n    getAppointments(filterBy: { doctor: $id }, orderBy: $orderBy) {\r\n      data {\r\n        _id\r\n        doctor\r\n        patient\r\n        date\r\n        time\r\n        createdAt\r\n        updatedAt\r\n        patientData\r\n        doctorData\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const findProfile = gql`\r\n  query findProfile($id: ID!) {\r\n    profile(id: $id) {\r\n      _id\r\n      firstName\r\n      lastName\r\n      height\r\n      weight\r\n      bloodGroup\r\n      genotype\r\n      gender\r\n      phoneNumber\r\n      provider\r\n      plan\r\n      dociId\r\n      status\r\n      consultations\r\n      createdAt\r\n      image\r\n    }\r\n  }\r\n`;\r\nexport const myMedic = gql`\r\n  ${PageInfo}\r\n  query getMyMedications($id: ID!, $orderBy: String!, $page: Int, $first: Int) {\r\n    getMedications(filterBy: { patient: $id }, page: $page, orderBy: $orderBy, first: $first) {\r\n      medication {\r\n        _id\r\n        name\r\n        interval\r\n        createdAt\r\n        updatedAt\r\n        doctor\r\n        dosage\r\n        patient\r\n      }\r\n      pageInfo {\r\n        ...pageDetails\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getRefferals = gql`\r\n  ${PageInfo}\r\n  query getReferrals(\r\n    $doctor: String\r\n    $id: String\r\n    $page: Int\r\n    $specialization: String\r\n    $patient: String\r\n    $type: String\r\n    $first: Int\r\n  ) {\r\n    getReferrals(\r\n      filterBy: {\r\n        doctor: $doctor\r\n        _id: $id\r\n        specialization: $specialization\r\n        patient: $patient\r\n        type: $type\r\n      }\r\n      orderBy: \"-createdAt\"\r\n      page: $page\r\n      first: $first\r\n    ) {\r\n      referral {\r\n        _id\r\n        doctor\r\n        patient\r\n        type\r\n        reason\r\n        note\r\n        specialization\r\n        createdAt\r\n        updatedAt\r\n        doctorData\r\n        patientData\r\n      }\r\n      pageInfo {\r\n        ...pageDetails\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getRefferal = gql`\r\n  query getReferral($id: ID!) {\r\n    getReferral(id: $id) {\r\n      _id\r\n      doctor\r\n      patient\r\n      doctorData\r\n      patientData\r\n      type\r\n      reason\r\n      note\r\n      specialization\r\n      totalMarkUp\r\n      trackingId\r\n      tests {\r\n        name\r\n        price\r\n        tat\r\n      }\r\n      consultationId\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const getRoles = gql`\r\n  ${PageInfo}\r\n  query getRoles($name: String, $page: Int, $first: Int) {\r\n    getRoles(filterBy: { name: $name }, page: $page, orderBy: \"-createdAt\", first: $first) {\r\n      role {\r\n        _id\r\n        name\r\n        permissions\r\n        editable\r\n        description\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      pageInfo {\r\n        ...pageDetails\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getRole = gql`\r\n  query getRole($id: ID!) {\r\n    getRole(id: $id) {\r\n      _id\r\n      name\r\n      permissions\r\n      editable\r\n      description\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const getAMessage = gql`\r\n  query getMessage($id: ID!) {\r\n    getMessage(id: $id) {\r\n      _id\r\n      recipient\r\n      subject\r\n      recipientData\r\n      sender\r\n      createdAt\r\n      updatedAt\r\n      body\r\n    }\r\n  }\r\n`;\r\nexport const findAccounts = gql`\r\n  ${PageInfo}\r\n  query findAccounts($email: EmailAddress, $page: Int) {\r\n    accounts(orderBy: \"-createdAt\", page: $page, filterBy: { email: $email }) {\r\n      data {\r\n        _id\r\n        role\r\n        email\r\n        dociId\r\n        createdAt\r\n        updatedAt\r\n        isEmailVerified\r\n        providerId\r\n        userTypeId\r\n        isActive\r\n        authType\r\n      }\r\n      pageInfo {\r\n        ...pageDetails\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const verifiedEmail = gql`\r\n  query findAccounts($dociId: String) {\r\n    accounts(filterBy: { dociId: $dociId }) {\r\n      data {\r\n        isEmailVerified\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const findAdmin = gql`\r\n  ${PageInfo}\r\n  query findAccounts($email: String, $page: Int, $first: Int) {\r\n    accounts(\r\n      filterBy: { role: \"admin\", email: $email }\r\n      page: $page\r\n      orderBy: \"-createdAt\"\r\n      first: $first\r\n    ) {\r\n      data {\r\n        _id\r\n        role\r\n        email\r\n        dociId\r\n        createdAt\r\n        updatedAt\r\n        role\r\n        isActive\r\n      }\r\n      pageInfo {\r\n        ...pageDetails\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const findAllergies = gql`\r\n  query findAllergies($id: String!) {\r\n    findAllergies(filterBy: { profile: $id }) {\r\n      allergies {\r\n        _id\r\n        medication\r\n        severity\r\n        food\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getLabResult = gql`\r\n  query getLabResults($id: ID!) {\r\n    getLabResults(filterBy: { patient: $id }) {\r\n      lab {\r\n        _id\r\n        url\r\n        partner\r\n        doctor\r\n        createdAt\r\n        updatedAt\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getConsultation = gql`\r\n  query getConsultation($id: ID!) {\r\n    getConsultation(id: $id) {\r\n      _id\r\n      doctor\r\n      status\r\n      patient\r\n      ailment\r\n      severity\r\n      description\r\n      treatment\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const getVerification = gql`\r\n  ${PageInfo}\r\n  query getVerifications($page: Int, $first: Int, $status: Boolean) {\r\n    getVerifications(\r\n      page: $page\r\n      orderBy: \"-createdAt\"\r\n      first: $first\r\n      filterBy: { status: $status }\r\n    ) {\r\n      verification {\r\n        _id\r\n        qualification\r\n        license\r\n        yearbook\r\n        alumni_association\r\n        reference\r\n        external_reference\r\n        status\r\n        createdAt\r\n        doctorData\r\n        updatedAt\r\n        profileId\r\n      }\r\n      pageInfo {\r\n        ...pageDetails\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const verification = gql`\r\n  query getVerification($id: ID!) {\r\n    getVerification(id: $id) {\r\n      _id\r\n      qualification\r\n      license\r\n      yearbook\r\n      alumni_association\r\n      reference\r\n      external_reference\r\n      status\r\n      doctorData\r\n      createdAt\r\n      updatedAt\r\n      profileId\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getMyEarnings = gql`\r\n  query getMyEarnings {\r\n    getMyEarnings {\r\n      data {\r\n        _id\r\n        doctor\r\n        balance\r\n        createdAt\r\n        updatedAt\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getPatients = gql`\r\n  ${PageInfo}\r\n  query findProfiles(\r\n    $gender: String\r\n    $page: Int\r\n    $first: Int\r\n    $firstName: String\r\n    $lastName: String\r\n    $id: String\r\n    $provider: String\r\n  ) {\r\n    profiles(\r\n      filterBy: {\r\n        gender: $gender\r\n        dociId: $id\r\n        firstName: $firstName\r\n        lastName: $lastName\r\n        providerId: $provider\r\n      }\r\n      orderBy: \"-createdAt\"\r\n      page: $page\r\n      first: $first\r\n    ) {\r\n      data {\r\n        _id\r\n        firstName\r\n        lastName\r\n        height\r\n        weight\r\n        bloodGroup\r\n        dociId\r\n        genotype\r\n        gender\r\n        phoneNumber\r\n        provider\r\n        plan\r\n        status\r\n        consultations\r\n        createdAt\r\n        image\r\n      }\r\n      pageInfo {\r\n        ...pageDetails\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getPatientsByStatus = gql`\r\n  ${PageInfo}\r\n  query findProfiles($status: Boolean, $first: Int) {\r\n    profilesByStatus(filterBy: { isActive: $status }, orderBy: \"-createdAt\", first: $first) {\r\n      data {\r\n        _id\r\n        firstName\r\n        lastName\r\n        height\r\n        weight\r\n        bloodGroup\r\n        dociId\r\n        genotype\r\n        gender\r\n        phoneNumber\r\n        provider\r\n        plan\r\n        status\r\n        consultations\r\n        createdAt\r\n        image\r\n      }\r\n      pageInfo {\r\n        ...pageDetails\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getPatientsByPlan = gql`\r\n  ${PageInfo}\r\n  query findProfiles($planId: String, $first: Int) {\r\n    profilesByPlan(filterBy: { planId: $planId }, orderBy: \"-createdAt\", first: $first) {\r\n      data {\r\n        _id\r\n        firstName\r\n        lastName\r\n        height\r\n        weight\r\n        bloodGroup\r\n        dociId\r\n        genotype\r\n        gender\r\n        phoneNumber\r\n        provider\r\n        plan\r\n        status\r\n        consultations\r\n        createdAt\r\n        image\r\n      }\r\n      pageInfo {\r\n        ...pageDetails\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getDoctorsProfile = gql`\r\n  ${PageInfo}\r\n  query doctorProfiles(\r\n    $id: String\r\n    $firstName: String\r\n    $lastName: String\r\n    $gender: String\r\n    $cadre: String\r\n    $providerId: String\r\n    $specialization: String\r\n    $page: Int\r\n    $first: Int\r\n  ) {\r\n    doctorProfiles(\r\n      filterBy: {\r\n        dociId: $id\r\n        firstName: $firstName\r\n        lastName: $lastName\r\n        gender: $gender\r\n        cadre: $cadre\r\n        providerId: $providerId\r\n        specialization: $specialization\r\n      }\r\n      first: $first\r\n      page: $page\r\n    ) {\r\n      profile {\r\n        _id\r\n        firstName\r\n        lastName\r\n        gender\r\n        phoneNumber\r\n        createdAt\r\n        updatedAt\r\n        email\r\n        hospital\r\n        specialization\r\n        dob\r\n        cadre\r\n        picture\r\n        provider\r\n        consultations\r\n        status\r\n        dociId\r\n      }\r\n      pageInfo {\r\n        ...pageDetails\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getDoctorsProfileByStatus = gql`\r\n  ${PageInfo}\r\n  query doctorProfiles($status: Boolean, $first: Int, $page: Int) {\r\n    doctorProfilesByStatus(\r\n      filterBy: { isActive: $status, role: \"doctor\" }\r\n      first: $first\r\n      page: $page\r\n    ) {\r\n      profile {\r\n        _id\r\n        firstName\r\n        lastName\r\n        gender\r\n        phoneNumber\r\n        createdAt\r\n        updatedAt\r\n        email\r\n        hospital\r\n        specialization\r\n        dob\r\n        cadre\r\n        picture\r\n        provider\r\n        consultations\r\n        status\r\n        dociId\r\n      }\r\n      pageInfo {\r\n        ...pageDetails\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getProfile = gql`\r\n  query findProfile($profileId: ID!) {\r\n    profile(id: $profileId) {\r\n      _id\r\n      firstName\r\n      lastName\r\n      height\r\n      weight\r\n      bloodGroup\r\n      genotype\r\n      gender\r\n      phoneNumber\r\n      provider\r\n      plan\r\n      status\r\n      dociId\r\n      consultations\r\n      createdAt\r\n      image\r\n    }\r\n  }\r\n`;\r\nexport const getMyEarningDoc = gql`\r\n  query getMyEarnings($doc: String) {\r\n    getMyEarnings(filterBy: { doctor: $doc }, page: 1) {\r\n      data {\r\n        _id\r\n        doctor\r\n        balance\r\n        doctorData\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      pageInfo {\r\n        totalDocs\r\n        limit\r\n        offset\r\n        hasPrevPage\r\n        hasNextPage\r\n        page\r\n        totalPages\r\n        pagingCounter\r\n        prevPage\r\n        nextPage\r\n      }\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getProfileByDociId = gql`\r\n  query findProfiles($dociId: String!) {\r\n    profiles(filterBy: { dociId: $dociId }) {\r\n      data {\r\n        _id\r\n        firstName\r\n        lastName\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getDoctorByDociId = gql`\r\n  query doctorProfiles($dociId: String!) {\r\n    doctorProfiles(filterBy: { dociId: $dociId }) {\r\n      profile {\r\n        firstName\r\n        lastName\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getMedication = gql`\r\n  ${PageInfo}\r\n  query getMedication($id: ID!) {\r\n    getMedication(id: $id) {\r\n      medication {\r\n        _id\r\n        name\r\n        interval\r\n        doctor\r\n        createdAt\r\n        updatedAt\r\n        dosage\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getAppointment = gql`\r\n  query getAppointment($id: ID!) {\r\n    getAppointment(id: $id) {\r\n      _id\r\n      doctor\r\n      patient\r\n      date\r\n      time\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const getAllAppointment = gql`\r\n  query getAppointments {\r\n    getAppointments {\r\n      data {\r\n        _id\r\n        doctor\r\n        patient\r\n        date\r\n        time\r\n        createdAt\r\n        updatedAt\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getMedications = gql`\r\n  query getMedications {\r\n    getMedications {\r\n      medication {\r\n        _id\r\n        name\r\n        interval\r\n        doctor\r\n        createdAt\r\n        updatedAt\r\n        dosage\r\n        patient\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getAvailability = gql`\r\n  query getAvailabilities($id: String!) {\r\n    getAvailabilities(filterBy: { doctor: $id }) {\r\n      availability {\r\n        _id\r\n        createdAt\r\n        updatedAt\r\n        day\r\n        available\r\n        times {\r\n          start\r\n          stop\r\n        }\r\n      }\r\n      errors {\r\n        field\r\n        message\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getMyConsultation = gql`\r\n  query getMyConsultations {\r\n    getMyConsultations {\r\n      data {\r\n        _id\r\n        doctor\r\n        patient\r\n        ailment\r\n        severity\r\n        description\r\n        treatment\r\n        createdAt\r\n        updatedAt\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getUserDetails = gql`\r\n  query findAccount($id: ID!) {\r\n    account(id: $id) {\r\n      _id\r\n      email\r\n      dociId\r\n      createdAt\r\n      updatedAt\r\n      isEmailVerified\r\n    }\r\n  }\r\n`;\r\nexport const getProviders = gql`\r\n  ${PageInfo}\r\n  query getProviders($name: String, $userTypeId: String, $page: Int, $first: Int) {\r\n    getProviders(\r\n      filterBy: { name: $name, userTypeId: $userTypeId }\r\n      page: $page\r\n      orderBy: \"-createdAt\"\r\n      first: $first\r\n    ) {\r\n      provider {\r\n        _id\r\n        name\r\n        icon\r\n        userTypeId\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      pageInfo {\r\n        ...pageDetails\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getEmailList = gql`\r\n  query getEmailList($role: String) {\r\n    getEmailList(filterBy: { role: $role }, orderBy: \"-createdAt\") {\r\n      data {\r\n        _id\r\n        email\r\n        createdAt\r\n        updatedAt\r\n        profileData\r\n        role\r\n        email\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getPartners = gql`\r\n  query getPartners {\r\n    getPartners {\r\n      data {\r\n        _id\r\n        name\r\n        email\r\n        category\r\n        logoImageUrl\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getAllergies = gql`\r\n  query findAllergies {\r\n    findAllergies {\r\n      allergies {\r\n        _id\r\n        food\r\n        medication\r\n        profile\r\n        createdAt\r\n        updatedAt\r\n        severity\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getReminder = gql`\r\n  query getReminder($id: ID!) {\r\n    getReminder(id: $id) {\r\n      reminder {\r\n        _id\r\n        date\r\n        description\r\n        type\r\n        createdAt\r\n        updatedAt\r\n        patient\r\n        interval\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getDoctorPatients = gql`\r\n  ${PageInfo}\r\n  query getDoctorPatients($id: String!, $page: Int, $first: Int) {\r\n    getDoctorPatients(filterBy: { doctor: $id }, page: $page, first: $first) {\r\n      data {\r\n        _id\r\n        doctor\r\n        patient\r\n        patientData\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      pageInfo {\r\n        ...pageDetails\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const findMultipleProfiles = gql`\r\n  query findMultipleProfiles($ids: String) {\r\n    findMultipleProfiles(ids: $ids) {\r\n      profiles {\r\n        _id\r\n        firstName\r\n        lastName\r\n        height\r\n        weight\r\n        bloodGroup\r\n        genotype\r\n        gender\r\n        phoneNumber\r\n        provider\r\n        plan\r\n        status\r\n        consultations\r\n        createdAt\r\n        image\r\n        rating\r\n      }\r\n    }\r\n  }\r\n`;\r\n//\r\nexport const getNotifications = gql`\r\n  query getNotifications($user: String) {\r\n    getNotifications(user: $user) {\r\n      data {\r\n        user\r\n        content\r\n        itemId\r\n        ticker\r\n        title\r\n        seen\r\n        tag\r\n        useSound\r\n        role\r\n        saveNotification\r\n        previewImageUri\r\n        previewImageUriThumbnail\r\n        createdAt\r\n        updatedAt\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getSingleProvider = gql`\r\n  query getPartnerCategories {\r\n    getPartnerCategories {\r\n      data\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getCategory = gql`\r\n  query getProvider($id: ID!) {\r\n    getProvider(id: $id) {\r\n      _id\r\n      name\r\n      icon\r\n      userTypeId\r\n      createdAt\r\n      updatedAt\r\n    }\r\n  }\r\n`;\r\nexport const getUserTypes = gql`\r\n  query getUserTypes($first: Int) {\r\n    getUserTypes(first: $first) {\r\n      userType {\r\n        _id\r\n        name\r\n        icon\r\n        createdAt\r\n        updatedAt\r\n      }\r\n      pageInfo {\r\n        totalDocs\r\n        limit\r\n        offset\r\n        hasPrevPage\r\n        hasNextPage\r\n        page\r\n        totalPages\r\n        pagingCounter\r\n        prevPage\r\n        nextPage\r\n      }\r\n    }\r\n  }\r\n`;\r\nexport const getUsertypess = gql`\r\n  query getUserTypeProviders($userTypeId: String) {\r\n    getUserTypeProviders(filterBy: { userTypeId: $userTypeId }) {\r\n      provider {\r\n        _id\r\n        name\r\n        icon\r\n        userTypeId\r\n        createdAt\r\n        updatedAt\r\n        userTypeData {\r\n          name\r\n          icon\r\n          createdAt\r\n          updatedAt\r\n        }\r\n      }\r\n      pageInfo {\r\n        totalDocs\r\n        limit\r\n        offset\r\n        hasPrevPage\r\n        hasNextPage\r\n        page\r\n        totalPages\r\n        pagingCounter\r\n        prevPage\r\n        nextPage\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const getListOfLabTests = gql`\r\n  query getDiagnosticLabTests {\r\n    getDiagnosticLabTests {\r\n      data {\r\n        _id\r\n        partner\r\n        name\r\n        price\r\n        tat\r\n      }\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_TEST = gql`\r\n  query deleteDiagnosticLabTest($id: ID!) {\r\n    deleteDiagnosticLabTest(id: $id) {\r\n      _id\r\n      partner\r\n      name\r\n      price\r\n      tat\r\n    }\r\n  }\r\n`;\r\n\r\nexport const DELETE_PARTNER = gql`\r\n  query deletePartner($id: ID!) {\r\n    deletePartner(id: $id) {\r\n      _id\r\n      name\r\n      email\r\n      category\r\n      logoImageUrl\r\n      accountId\r\n      dociId\r\n    }\r\n  }\r\n`;\r\n\r\n// export const UserProfile = (id) => {\r\n//   const { data, error, loading } = useQuery(getUserDetails, {\r\n//     variables: {\r\n//       id,\r\n//     },\r\n//   });\r\n//   return {\r\n//     data,\r\n//     error,\r\n//     loading,\r\n//   };\r\n// };\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Forms\\EditTestForm.js",["801"],"import React from \"react\";\r\nimport t from \"prop-types\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\n\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { FormikControl } from \"components/validation\";\r\nimport { UPDATE_TEST } from \"components/graphQL/Mutation\";\r\nimport { editTestValidation } from \"helpers/validationSchemas\";\r\nimport {\r\n  handleError,\r\n  showSuccessMsg,\r\n} from \"../../helpers/filterHelperFunctions\";\r\nimport { CustomSelect } from \"components/validation/Select\";\r\n\r\nexport const EditTestForm = ({ onSuccess, data }) => {\r\n  const theme = useTheme();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [updateTest] = useMutation(UPDATE_TEST);\r\n  const [value, setValue] = React.useState(\"Hours\");\r\n  const tatArr = data.tat.split(\" \");\r\n  const initialValues = {\r\n    id: data?._id,\r\n    name: data?.name,\r\n    price: data.price,\r\n    tatNumber: tatArr[0],\r\n    tatDuration: tatArr[1],\r\n  };\r\n\r\n  const onSubmit = async (values) => {\r\n    try {\r\n      const { id, name, price, tatNumber, tatDuration } = values;\r\n      const variables = {\r\n        id: id,\r\n        name: name,\r\n        price: Number(price),\r\n        tat: `${tatNumber} ${tatDuration}`,\r\n      };\r\n\r\n      const { data } = await updateTest({\r\n        variables: variables,\r\n      });\r\n      if (data) {\r\n        showSuccessMsg(enqueueSnackbar, Typography, \"Test Updated.\");\r\n        onSuccess();\r\n      }\r\n    } catch (err) {\r\n      handleError(err, enqueueSnackbar);\r\n      console.log(\"failed to update test\", err);\r\n    }\r\n  };\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validationSchema={editTestValidation}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n      validateOnBlur={false}\r\n    >\r\n      {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\r\n        /* setValues(initialValues); */\r\n        return (\r\n          <Form style={{ marginTop: \"1rem\" }}>\r\n            <Grid container direction=\"column\" gap={2}>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl control=\"input\" id=\"id\" name=\"id\" hidden />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Test Name\"\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  placeholder=\"Enter Test name\"\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Test price\"\r\n                  id=\"price\"\r\n                  name=\"price\"\r\n                  placeholder=\"Enter Test price\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <Grid container spacing={2}>\r\n                  <Grid item flexGrow={1}>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      label=\"Turnaround time (TAT)\"\r\n                      id=\"tat\"\r\n                      name=\"tatNumber\"\r\n                      placeholder=\"48\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item sx={{ display: \"flex\", alignItems: \"flex-end\" }}>\r\n                    <CustomSelect\r\n                      Control\r\n                      name=\"tatDuration\"\r\n                      disable={false}\r\n                      value={value}\r\n                      options={[\r\n                        { key: \"Minutes\", value: \"Minutes\" },\r\n                        { key: \"Hours\", value: \"Hours\" },\r\n                        { key: \"Days\", value: \"Days\" },\r\n                      ]}\r\n                      onChange={(e) => {\r\n                        setValue(e?.target?.value);\r\n                      }}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item container>\r\n                <CustomButton\r\n                  title=\"Update Test\"\r\n                  width=\"100%\"\r\n                  type={buttonType}\r\n                  isSubmitting={isSubmitting}\r\n                  disabled={isSubmitting}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nEditTestForm.propTypes = {\r\n  onSuccess: t.func.isRequired,\r\n  data: t.object,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\helpers\\filterHelperFunctions.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\Success.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\cards\\SettingsCard.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\reducers\\hcpReducer.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\reducers\\patientReducer.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\reducers\\authReducer.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\reducers\\tablesReducer.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\action-creators\\hcp.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\action-creators\\patient.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\action-creators\\auth.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\action-creators\\tablesActions.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\graphQL\\fragment.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\helpers\\func.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\helpers\\validationSchemas.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\Select.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\store\\action-types\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\Calendar.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\Input.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\FormikControl.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\Checkbox.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\Checkboxs.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\TextError.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\DateTimePicker.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\Textarea.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\Date.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\File.js",["802","803","804","805"],"import React, { useRef, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Field, ErrorMessage } from \"formik\";\r\nimport { TextError } from \"components/Utilities/TextError\";\r\nimport {\r\n  FormControl,\r\n  FormLabel,\r\n  Grid,\r\n  Avatar,\r\n  Button,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport { Loader } from \"components/Utilities\";\r\nimport { RequiredIcon } from \"components/Typography\";\r\nimport {\r\n  compressAndUploadImage,\r\n  showErrorMsg,\r\n  showSuccessMsg,\r\n  uploadImage,\r\n} from \"../../helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  FormLabel: {\r\n    \"&.MuiFormLabel-root\": {\r\n      ...theme.typography.FormLabel,\r\n    },\r\n  },\r\n\r\n  uploadBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      background: \"#f2f2f2\",\r\n      boxShadow: \"none\",\r\n      borderRadius: \"5px\",\r\n      fontSize: \"1.4rem\",\r\n      color: theme.palette.common.black,\r\n\r\n      \"&:hover\": {\r\n        background: \"#f2f3f3\",\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nexport const Formiks = ({ name, setFieldValue, onBlur }) => {\r\n  const fileRef = useRef(null);\r\n  const classes = useStyles();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [preview, setPreview] = useState(\"\");\r\n  const [isCompleted, setIsCompleted] = React.useState(null);\r\n  const [progress, setProgress] = useState();\r\n  const [isCompressing, setIsCompressing] = React.useState(false);\r\n\r\n  React.useEffect(() => {\r\n    isCompleted === \"passed\" &&\r\n      showSuccessMsg(enqueueSnackbar, Typography, \"Image upload complete.\");\r\n    if (isCompleted === \"failed\") {\r\n      showErrorMsg(enqueueSnackbar, \"Image upload failed, Try again.\");\r\n    }\r\n  }, [isCompleted]);\r\n\r\n  const onChange = async (e) => {\r\n    const file = e.target.files[0];\r\n    setProgress(1);\r\n    compressAndUploadImage(\r\n      file,\r\n      uploadImage,\r\n      setPreview,\r\n      name,\r\n      setFieldValue,\r\n      setProgress,\r\n      setIsCompressing,\r\n      setIsCompleted\r\n    );\r\n\r\n    const reader = new FileReader();\r\n    reader.readAsDataURL(file);\r\n    reader.onloadend = (e) => setPreview(reader.result);\r\n  };\r\n\r\n  return (\r\n    <Grid container spacing={2} alignItems=\"center\">\r\n      {progress < 100 || isCompressing ? (\r\n        <Grid\r\n          container\r\n          item\r\n          direction=\"row\"\r\n          justifyContent=\"center\"\r\n          alignItems=\"center\"\r\n        >\r\n          <Typography display={\"inline\"}>\r\n            {isCompressing ? \"Compressing image\" : \"Uploading image\"}\r\n          </Typography>\r\n          <Loader />\r\n        </Grid>\r\n      ) : (\r\n        <>\r\n          <Grid item>\r\n            <FormControl fullWidth>\r\n              <Grid item container>\r\n                <input\r\n                  accept=\"image/*\"\r\n                  onChange={onChange}\r\n                  type=\"file\"\r\n                  name={name}\r\n                  onBlur={onBlur}\r\n                  hidden\r\n                  ref={fileRef}\r\n                />\r\n                <Button\r\n                  variant=\"contained\"\r\n                  onClick={() => fileRef.current.click()}\r\n                  component=\"span\"\r\n                  className={classes.uploadBtn}\r\n                >\r\n                  Upload Photo\r\n                </Button>\r\n              </Grid>\r\n            </FormControl>\r\n          </Grid>\r\n          <Grid item>\r\n            {preview && isCompleted !== \"failed\" ? (\r\n              <Avatar sx={{ backgroundColor: \"#eaeaea\" }} src={preview} />\r\n            ) : (\r\n              \"\"\r\n            )}\r\n          </Grid>\r\n        </>\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nFormiks.propTypes = {\r\n  value: PropTypes.string,\r\n  label: PropTypes.string,\r\n  onChange: PropTypes.func,\r\n  children: PropTypes.node.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  onBlur: PropTypes.func,\r\n  setFieldValue: PropTypes.func,\r\n};\r\n\r\nconst Files = (props) => {\r\n  const { name, label, isRequired, ...rest } = props;\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container direction=\"column\" gap={1}>\r\n      <FormLabel className={classes.FormLabel}>\r\n        {label} {isRequired && <RequiredIcon />}\r\n      </FormLabel>\r\n      <Field name={name} as={Formiks} label={label} {...rest} />\r\n      <ErrorMessage name={name} component={TextError} />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nFiles.propTypes = {\r\n  label: PropTypes.string,\r\n  name: PropTypes.string.isRequired,\r\n  options: PropTypes.array.isRequired,\r\n  placeholder: PropTypes.string,\r\n  isRequired: PropTypes.bool,\r\n};\r\n\r\nexport default Files;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Typography.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Forms\\UploadTestForm.js",["806","807","808","809"],"import React from \"react\";\r\nimport t from \"prop-types\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Alert, Grid, Typography } from \"@mui/material\";\r\n\r\nimport DragAndDrop from \"./DragAndDrop\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { uploadTests } from \"components/graphQL/Mutation\";\r\nimport { uploadTestFileValidation } from \"helpers/validationSchemas\";\r\nimport {\r\n  handleError,\r\n  showErrorMsg,\r\n  showSuccessMsg,\r\n  uploadImage,\r\n} from \"../../helpers/filterHelperFunctions\";\r\n\r\nexport const UploadTestForm = ({ onSuccess }) => {\r\n  const theme = useTheme();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [uploadTestFile] = useMutation(uploadTests);\r\n  const [progress, setProgress] = React.useState(0);\r\n\r\n  const addTestIntialValues = {\r\n    testFile: null,\r\n  };\r\n\r\n  const onSubmit = async (values) => {\r\n    const throwError = () =>\r\n      showErrorMsg(\r\n        enqueueSnackbar,\r\n        \"Something went wrong while uploading file.\"\r\n      );\r\n    try {\r\n      const { testFile: file } = values;\r\n      const fileUrl = await uploadImage(file, setProgress);\r\n\r\n      if (typeof fileUrl !== \"string\") {\r\n        throwError();\r\n        return;\r\n      }\r\n\r\n      const { data } = await uploadTestFile({\r\n        variables: {\r\n          fileUrl: fileUrl,\r\n        },\r\n      });\r\n\r\n      if (!data) {\r\n        throwError();\r\n        return;\r\n      }\r\n\r\n      const testAdded = data?.uploadDiagnosticLabTests?.result?.totalInserted;\r\n      showSuccessMsg(\r\n        enqueueSnackbar,\r\n        Typography,\r\n        `${testAdded && testAdded} Tests Added.`\r\n      );\r\n      onSuccess();\r\n    } catch (error) {\r\n      console.log(\"Error from onSubmit Test JSON file\", error);\r\n      handleError(error, enqueueSnackbar);\r\n    }\r\n  };\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={addTestIntialValues}\r\n      onSubmit={onSubmit}\r\n      validationSchema={uploadTestFileValidation}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n      validateOnBlur={false}\r\n    >\r\n      {({ isSubmitting, dirty, isValid, setFieldValue, setErrors }) => {\r\n        return (\r\n          <Form style={{ marginTop: \"1rem\" }}>\r\n            <Alert severity=\"warning\" sx={{ margin: \"1rem 0rem\" }}>\r\n              <strong>CAUTION - </strong> Uploading a new test JSON file will{\" \"}\r\n              overwrite the current file.\r\n            </Alert>\r\n            <Grid container direction=\"column\" space={2}>\r\n              <Grid item>\r\n                <DragAndDrop\r\n                  name=\"testFile\"\r\n                  maxFiles={1}\r\n                  hasPreview={false}\r\n                  uploadFunc={(file) => {\r\n                    setErrors({});\r\n                    setFieldValue(\"testFile\", file);\r\n                  }}\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <CustomButton\r\n                  title=\"Upload file\"\r\n                  width=\"100%\"\r\n                  type={buttonType}\r\n                  isSubmitting={isSubmitting}\r\n                  disabled={!dirty || !isValid || isSubmitting}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nUploadTestForm.propTypes = {\r\n  onSuccess: t.func.isRequired,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\tableHeaders.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\DeleteOrDisable.js",["810","811"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid, Modal, Fade, Typography, Box, Backdrop } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { BsExclamationCircle } from \"react-icons/bs\";\r\nimport LogoutRoundedIcon from \"@mui/icons-material/LogoutRounded\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  closeIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      cursor: \"pointer\",\r\n\r\n      \"&:hover\": {\r\n        cursor: \"pointer\",\r\n        color: theme.palette.common.lightGreen,\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  height: \"auto\",\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: 24,\r\n  borderRadius: \"1rem\",\r\n};\r\n\r\nconst DeleteOrDisable = ({\r\n  open,\r\n  setOpen,\r\n  title,\r\n  confirmationMsg,\r\n  btnValue,\r\n  type,\r\n  onConfirm,\r\n  onCancel,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const discardButton = {\r\n    background: theme.palette.info.main,\r\n    hover: theme.palette.info.light,\r\n    active: theme.palette.info.dark,\r\n  };\r\n\r\n  const disableButton = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.common.danger,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      aria-labelledby=\"transition-modal-title\"\r\n      aria-describedby=\"transition-modal-description\"\r\n      open={open}\r\n      onClose={() => setOpen(false)}\r\n      closeAfterTransition\r\n      BackdropComponent={Backdrop}\r\n      BackdropProps={{\r\n        timeout: 500,\r\n      }}\r\n    >\r\n      <Fade in={open}>\r\n        <Box\r\n          sx={style}\r\n          width={{ md: \"30vw\", sm: \"30vw\", xs: \"80vw\" }}\r\n          padding={{ sm: 2, xs: 2, md: 4 }}\r\n        >\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n          >\r\n            <Grid item alignSelf=\"flex-end\">\r\n              <CloseIcon\r\n                color=\"primary\"\r\n                fontSize=\"large\"\r\n                className={classes.closeIcon}\r\n                onClick={() => setOpen(false)}\r\n              />\r\n            </Grid>\r\n            <Grid item style={{ marginBottom: \"3rem\" }}>\r\n              {type === \"logout\" ? (\r\n                <LogoutRoundedIcon\r\n                  sx={{ fontSize: \"10rem\", color: \"red\" }}\r\n                  color={theme.palette.warning.main}\r\n                />\r\n              ) : (\r\n                <BsExclamationCircle\r\n                  size=\"10rem\"\r\n                  color={theme.palette.warning.main}\r\n                />\r\n              )}\r\n            </Grid>\r\n            <Grid item style={{ marginBottom: \"2rem\" }}>\r\n              <Typography variant=\"h2\">{title}</Typography>\r\n            </Grid>\r\n            <Grid item style={{ marginBottom: \"2rem\" }}>\r\n              <Typography\r\n                textAlign=\"center\"\r\n                variant=\"body1\"\r\n              >{`Are you sure you want to ${confirmationMsg}?`}</Typography>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              container\r\n              justifyContent=\"space-between\"\r\n              rowGap={3}\r\n              sx={{ justifyContent: \"space-between\" }}\r\n            >\r\n              <Grid item columms={{ md: 4, sm: 4, xs: 3 }}>\r\n                <CustomButton\r\n                  title=\"Discard\"\r\n                  textColor={theme.palette.common.black}\r\n                  type={discardButton}\r\n                  width=\"100%\"\r\n                  onClick={() => setOpen(false)}\r\n                />\r\n              </Grid>\r\n              <Grid item columms={{ md: 4, sm: 4, xs: 3 }}>\r\n                <CustomButton\r\n                  title={`Yes, ${btnValue}`}\r\n                  type={disableButton}\r\n                  width=\"100%\"\r\n                  onClick={() => {\r\n                    setOpen(false);\r\n                    onConfirm();\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Fade>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nDeleteOrDisable.propTypes = {\r\n  open: PropTypes.bool,\r\n  setOpen: PropTypes.func,\r\n  title: PropTypes.string,\r\n  confirmationMsg: PropTypes.string,\r\n  btnValue: PropTypes.string,\r\n  type: PropTypes.string,\r\n  onConfirm: PropTypes.func,\r\n  onCancel: PropTypes.func,\r\n};\r\n\r\nexport default DeleteOrDisable;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Forms\\AddTestForm.js",["812"],"import React from \"react\";\r\nimport t from \"prop-types\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { FormikControl } from \"components/validation\";\r\nimport { addTest } from \"components/graphQL/Mutation\";\r\nimport { addTestValidation } from \"helpers/validationSchemas\";\r\nimport {\r\n  handleError,\r\n  showSuccessMsg,\r\n} from \"../../helpers/filterHelperFunctions\";\r\n\r\nexport const AddTestForm = ({ onSuccess }) => {\r\n  const theme = useTheme();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [addSingleTest] = useMutation(addTest);\r\n\r\n  const addTestIntialValues = {\r\n    name: \"\",\r\n    price: null,\r\n    tat: \"\",\r\n  };\r\n\r\n  const onSubmit = async (values) => {\r\n    try {\r\n      const { name, price, tat } = values;\r\n      const variables = {\r\n        name: name,\r\n        price: Number(price),\r\n        tat: parseInt(tat) > 1 ? `${tat} Hours` : `${tat} Hour`,\r\n      };\r\n      console.log(\"add test values\", variables);\r\n      const { data } = await addSingleTest({\r\n        variables: variables,\r\n      });\r\n      if (data) {\r\n        showSuccessMsg(enqueueSnackbar, Typography, \"Test added.\");\r\n        onSuccess();\r\n      }\r\n    } catch (err) {\r\n      handleError(err, enqueueSnackbar);\r\n      console.log(\"failed to add test\", err);\r\n    }\r\n  };\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={addTestIntialValues}\r\n      onSubmit={onSubmit}\r\n      validationSchema={addTestValidation}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n      validateOnBlur={false}\r\n    >\r\n      {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\r\n        return (\r\n          <Form style={{ marginTop: \"1rem\" }}>\r\n            <Grid container direction=\"column\" gap={2}>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Test Name\"\r\n                  id=\"name\"\r\n                  name=\"name\"\r\n                  placeholder=\"Enter Test name\"\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" gap={1}>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Test price\"\r\n                  id=\"price\"\r\n                  name=\"price\"\r\n                  placeholder=\"Enter Test price\"\r\n                />\r\n              </Grid>\r\n              <Grid item>\r\n                <FormikControl\r\n                  control=\"input\"\r\n                  label=\"Turnaround time (TAT) - (hours)\"\r\n                  id=\"tat\"\r\n                  name=\"tat\"\r\n                  placeholder=\"48\"\r\n                />\r\n              </Grid>\r\n              <Grid item container>\r\n                <CustomButton\r\n                  title=\"Add Test\"\r\n                  width=\"100%\"\r\n                  type={buttonType}\r\n                  isSubmitting={isSubmitting}\r\n                  disabled={!dirty || !isValid || isSubmitting}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nAddTestForm.propTypes = {\r\n  onSuccess: t.func,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\EnhancedTable.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\ConfirmModal.js",["813","814","815","816"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid, Modal, Fade, Typography, Box, Backdrop } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\nimport { CustomButton } from \"components/Utilities\";\r\nimport { BsExclamationCircle } from \"react-icons/bs\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  closeIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      cursor: \"pointer\",\r\n\r\n      \"&:hover\": {\r\n        color: theme.palette.common.lightGreen,\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst style = {\r\n  position: \"absolute\",\r\n  top: \"50%\",\r\n  left: \"50%\",\r\n  transform: \"translate(-50%, -50%)\",\r\n  width: \"auto\",\r\n  minWidth: \"40rem\",\r\n  height: \"auto\",\r\n  bgcolor: \"background.paper\",\r\n  boxShadow: 24,\r\n  borderRadius: \"1rem\",\r\n  padding: \"3rem\",\r\n};\r\n\r\nconst ConfirmModal = ({\r\n  open,\r\n  setOpen,\r\n  title,\r\n  confirmationMsg,\r\n  btnValue,\r\n  type,\r\n  onConfirm,\r\n  onCancel,\r\n  ...rest\r\n}) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const rejectBtn = {\r\n    background: theme.palette.disabled.main,\r\n    hover: theme.palette.common.errorColor,\r\n    active: theme.palette.info.dark,\r\n  };\r\n\r\n  const acceptBtn = {\r\n    background: theme.palette.primary.light,\r\n    hover: theme.palette.success.main,\r\n    active: theme.palette.disabled.main,\r\n  };\r\n\r\n  return (\r\n    <Modal\r\n      aria-labelledby=\"transition-modal-title\"\r\n      aria-describedby=\"transition-modal-description\"\r\n      open={open}\r\n      onClose={() => setOpen(false)}\r\n      closeAfterTransition\r\n      BackdropComponent={Backdrop}\r\n      BackdropProps={{\r\n        timeout: 500,\r\n      }}\r\n    >\r\n      <Fade in={open}>\r\n        <Box sx={style}>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"center\"\r\n          >\r\n            <Grid item alignSelf=\"flex-end\">\r\n              <CloseIcon\r\n                color=\"primary\"\r\n                fontSize=\"medium\"\r\n                className={classes.closeIcon}\r\n                onClick={() => setOpen(false)}\r\n              />\r\n            </Grid>\r\n            <Grid item style={{ marginBottom: \"3rem\" }}>\r\n              <BsExclamationCircle\r\n                size=\"10rem\"\r\n                color={theme.palette.warning.main}\r\n              />\r\n            </Grid>\r\n            <Grid item style={{ marginBottom: \"2rem\" }}>\r\n              <Typography variant=\"h2\">{title}</Typography>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              style={{ marginBottom: \"2rem\" }}\r\n              sx={{ textAlign: \"center\" }}\r\n            >\r\n              <Typography variant=\"body1\">{`Are you sure you want to continue?`}</Typography>\r\n              <Typography variant=\"body1\">{`${confirmationMsg}`}</Typography>\r\n            </Grid>\r\n            <Grid\r\n              item\r\n              container\r\n              justifyContent=\"space-between\"\r\n              gap={3}\r\n              sx={{ justifyContent: \"space-between\" }}\r\n            >\r\n              <Grid item md>\r\n                <CustomButton\r\n                  title=\"Reject\"\r\n                  type={rejectBtn}\r\n                  width=\"100%\"\r\n                  onClick={() => setOpen(false)}\r\n                />\r\n              </Grid>\r\n              <Grid item md>\r\n                <CustomButton\r\n                  title={`Confirm`}\r\n                  type={acceptBtn}\r\n                  width=\"100%\"\r\n                  onClick={() => {\r\n                    setOpen(false);\r\n                    onConfirm();\r\n                  }}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Box>\r\n      </Fade>\r\n    </Modal>\r\n  );\r\n};\r\n\r\nConfirmModal.propTypes = {\r\n  open: PropTypes.bool.isRequired,\r\n  setOpen: PropTypes.func.isRequired,\r\n  title: PropTypes.string.isRequired,\r\n  confirmationMsg: PropTypes.string.isRequired,\r\n  btnValue: PropTypes.string,\r\n  type: PropTypes.string,\r\n  onConfirm: PropTypes.func,\r\n  onCancel: PropTypes.func,\r\n};\r\n\r\nexport default ConfirmModal;","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Rows\\TestListRow.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\WaitingListTable.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Forms\\DragAndDrop.js",["817","818","819","820"],"import React from \"react\";\r\nimport t from \"prop-types\";\r\nimport { ErrorMessage } from \"formik\";\r\nimport { useDropzone } from \"react-dropzone\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\n\r\nimport styled from \"styled-components\";\r\nimport { TextError } from \"components/Utilities/TextError\";\r\nimport { CustomButton, Loader } from \"components/Utilities\";\r\nimport { IsImg } from \"helpers/filterHelperFunctions\";\r\n\r\nconst getColor = (props) => {\r\n  if (props.isDragAccept) {\r\n    return \"#00e676\";\r\n  }\r\n  if (props.isDragReject) {\r\n    return \"#ff1744\";\r\n  }\r\n  if (props.isFocused) {\r\n    return \"#2196f3\";\r\n  }\r\n  return \"#eeeeee\";\r\n};\r\n\r\nconst Container = styled.div`\r\n  min-height: 250px;\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  padding: 20px;\r\n  border-width: 2px;\r\n  border-radius: 2px;\r\n  border-color: ${(props) => getColor(props)};\r\n  border-style: dashed;\r\n  background-color: #fafafa;\r\n  color: #777171;\r\n  outline: none;\r\n  transition: border 0.24s ease-in-out;\r\n`;\r\n\r\nconst thumb = {\r\n  display: \"inline-flex\",\r\n  borderRadius: 2,\r\n  backgroundColor: \"#eaeaea\",\r\n  border: \"1px solid #eaeaea\",\r\n  marginBottom: 8,\r\n  marginRight: 8,\r\n  width: 100,\r\n  height: 100,\r\n  padding: 4,\r\n  boxSizing: \"border-box\",\r\n};\r\n\r\nconst thumbInner = {\r\n  display: \"flex\",\r\n  backgroundColor: \"#eaeaea\",\r\n  minWidth: 0,\r\n  overflow: \"hidden\",\r\n};\r\n\r\nconst img = {\r\n  display: \"block\",\r\n  backgroundColor: \"#eaeaea\",\r\n  width: \"auto\",\r\n  height: \"100%\",\r\n};\r\n\r\nconst errorContainer = {\r\n  margin: \"1rem 0rem\",\r\n};\r\n\r\nconst DragAndDrop = ({ name, maxFiles, hasPreview, uploadFunc }) => {\r\n  const theme = useTheme();\r\n  const [preview, setPreview] = React.useState(\"\");\r\n  const [progress] = React.useState();\r\n  const [isCompleted] = React.useState(null);\r\n  const [isCompressing] = React.useState(false);\r\n  const [file, setFile] = React.useState(null);\r\n  const {\r\n    getRootProps,\r\n    getInputProps,\r\n    isFocused,\r\n    isDragAccept,\r\n    isDragReject,\r\n    open,\r\n  } = useDropzone({\r\n    accept: \"application/json\",\r\n    maxFiles: maxFiles,\r\n    autoFocus: true,\r\n    onDropAccepted: (acceptedFiles) => {\r\n      setFile(acceptedFiles[0]);\r\n      if (hasPreview || IsImg(acceptedFiles[0])) {\r\n        const reader = new FileReader();\r\n        reader.readAsDataURL(acceptedFiles[0]);\r\n        reader.onloadend = (e) => setPreview(reader.result);\r\n        // call the upload func\r\n        /* compressAndUploadImage(\r\n          acceptedFiles[0],\r\n          uploadImage,\r\n          setPreview,\r\n          name,\r\n          setFieldValue,\r\n          setProgress,\r\n          setIsCompressing,\r\n          setIsCompleted\r\n        ); */\r\n      } else {\r\n        uploadFunc(acceptedFiles[0]);\r\n      }\r\n    },\r\n  });\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <Container {...getRootProps({ isFocused, isDragAccept, isDragReject })}>\r\n          <input {...getInputProps()} />\r\n          <Typography>\r\n            Drag and drop your file(s), or click to select files or Click on the\r\n            button below\r\n          </Typography>\r\n          <Grid\r\n            item\r\n            container\r\n            justifyContent=\"center\"\r\n            style={{ marginTop: \"15px\" }}\r\n          >\r\n            <CustomButton\r\n              variant=\"contained\"\r\n              title=\" Select file(s)\"\r\n              type={buttonType}\r\n              onClick={(e) => {\r\n                e.preventDefault();\r\n                open();\r\n              }}\r\n            />\r\n          </Grid>\r\n        </Container>\r\n      </div>\r\n      <div style={errorContainer}>\r\n        <ErrorMessage name={name} component={TextError} />\r\n      </div>\r\n      <aside style={{ marginTop: \"1.5rem\" }}>\r\n        <Grid item>\r\n          {progress < 100 || isCompressing ? (\r\n            <Grid\r\n              container\r\n              item\r\n              direction=\"row\"\r\n              justifyContent=\"center\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Typography display={\"inline\"}>\r\n                {isCompressing ? \"Compressing file\" : \"Uploading file\"}\r\n              </Typography>\r\n              <Loader />\r\n            </Grid>\r\n          ) : preview && isCompleted !== \"failed\" && IsImg(file) ? (\r\n            <div style={thumb}>\r\n              <div style={thumbInner}>\r\n                <img src={preview} alt=\"preview\" style={img} />\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <Typography sx={{ marginBottom: \"1rem\", color: \"green\" }}>\r\n              {file && file.name}\r\n            </Typography>\r\n          )}\r\n        </Grid>\r\n      </aside>\r\n    </div>\r\n  );\r\n};\r\n\r\nDragAndDrop.propTypes = {\r\n  name: t.string.isRequired,\r\n  maxFiles: t.number.isRequired,\r\n  hasPreview: t.bool.isRequired,\r\n  uploadFunc: t.func.isRequired,\r\n};\r\n\r\nexport default DragAndDrop;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\EnhancedTableToolbar.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\EnhancedTableHeader.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\styles\\patientsPageStyles.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\helpers\\mockData.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\tableData.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\helpers\\selectedRows.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\helpers\\isSelected.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Subscription.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\UserTypes.js",["821","822","823","824","825","826","827","828","829","830","831","832","833","834","835","836","837","838","839"],"import React, { useState, useEffect } from \"react\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { partnersHeadCells2 } from \"components/Utilities/tableHeaders\";\r\nimport PropTypes from \"prop-types\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  Grid,\r\n  TableRow,\r\n  Button,\r\n  Avatar,\r\n  TableCell,\r\n  Checkbox,\r\n  Alert,\r\n} from \"@mui/material\";\r\nimport {\r\n  CustomButton,\r\n  Loader,\r\n  Modals,\r\n  Search,\r\n  FilterList,\r\n} from \"components/Utilities\";\r\nimport { EnhancedTable, EmptyTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { UserTypeModal } from \"components/modals/UserTypeModal\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport DeleteOrDisable from \"components/modals/DeleteOrDisable\";\r\nimport { getUserTypes } from \"components/graphQL/useQuery\";\r\nimport { deleteUserType } from \"components/graphQL/Mutation\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  fetchMoreData,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  FormLabel: {\r\n    fontSize: \"1.6rem\",\r\n    color: theme.palette.common.dark,\r\n  },\r\n  btn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"10rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n  \"&.MuiButton-root\": {\r\n    ...theme.typography.btn,\r\n    background: theme.palette.common.black,\r\n    width: \"100%\",\r\n  },\r\n  tableBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      height: \"3rem\",\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"2rem\",\r\n      boxShadow: \"none\",\r\n\r\n      \"&:hover\": {\r\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.5rem\",\r\n      },\r\n    },\r\n  },\r\n  redBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightRed,\r\n      color: theme.palette.common.red,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.error.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n  greenBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.success.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n\r\n  checkbox: {\r\n    \"& .MuiSvgIcon-root\": {\r\n      fontSize: 28,\r\n    },\r\n    \"&.Mui-checked\": {\r\n      color: \"green !important\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst UserTypes = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n  const [deleteUser] = useMutation(deleteUserType);\r\n  const handleDialogOpen = () => {\r\n    setIsOpen(true);\r\n  };\r\n  const handleDeleteOpenDialog = (id) => {\r\n    setId(id);\r\n    setdeleteModal(true);\r\n  };\r\n  const onConfirm = async () => {\r\n    try {\r\n      await deleteUser({\r\n        variables: { id },\r\n        refetchQueries: [{ query: getUserTypes }],\r\n      });\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [id, setId] = useState(null);\r\n  const [deleteModal, setdeleteModal] = useState(false);\r\n  const [singleData, setSingleData] = useState();\r\n  const [fetchUserTypes, { loading, data, error, refetch }] =\r\n    useLazyQuery(getUserTypes);\r\n\r\n  useEffect(() => {\r\n    fetchUserTypes({\r\n      variables: {\r\n        first: pageInfo?.limit,\r\n      },\r\n    });\r\n  }, [fetchUserTypes, pageInfo]);\r\n\r\n  const onChange = async (e) => {\r\n    setSearchHcp(e);\r\n    if (e == \"\") {\r\n      refetch();\r\n    } else refetch({ recipient: e });\r\n  };\r\n  const [userType, setUsertypes] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setPageInfo(data.getUserTypes.pageInfo);\r\n      setUsertypes(data.getUserTypes.userType);\r\n    }\r\n  }, [data]);\r\n  const { rowsPerPage, selectedRows, page } = useSelector(\r\n    (state) => state.tables\r\n  );\r\n  const { setSelectedRows } = useActions();\r\n  const initialValues = {\r\n    name: \"\",\r\n    type: \"\",\r\n    description: \"\",\r\n  };\r\n\r\n  const [searchHcp, setSearchHcp] = useState(\"\");\r\n  const [isOpens, setIsOpens] = useState(false);\r\n  const handleDialogCloses = () => setIsOpens(false);\r\n  const [editId, setEditId] = useState(null);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const handleEditCloseDialog = () => {\r\n    setEdit(false);\r\n  };\r\n  const [alert, setAlert] = useState(null);\r\n  /*   const handleDialogOpens1 = () => setIsOpens(true); */\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    userTypeId: \"\",\r\n  };\r\n  const onSubmit1 = async (values) => {\r\n    // const { name, userTypeId } = values;\r\n    // await provider.refetch({\r\n    //   name,\r\n    //   userTypeId,\r\n    // });\r\n    handleDialogCloses();\r\n  };\r\n  const validationSchema1 = Yup.object({\r\n    name: Yup.string(\"Enter your hospital\"),\r\n    userTypeId: Yup.string(\"ENter your userTypeId\"),\r\n  });\r\n  const [edit, setEdit] = useState(false);\r\n  const handleDialogClose = async () => {\r\n    setIsOpen(false);\r\n    setEditId(null);\r\n    setSingleData();\r\n  };\r\n  const handleEditOpenDialog = (id) => {\r\n    setEdit(true);\r\n    setEditId(id);\r\n  };\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        height=\"100%\"\r\n      >\r\n        {alert && Object.keys(alert).length > 0 && (\r\n          <Alert\r\n            variant=\"filled\"\r\n            severity={alert.type}\r\n            sx={{ justifyContent: \"center\", width: \"70%\", margin: \"0 auto\" }}\r\n          >\r\n            {alert.message}\r\n          </Alert>\r\n        )}\r\n        <Grid\r\n          item\r\n          gap={{ sm: 4, xs: 2 }}\r\n          container\r\n          direction={{ sm: \"row\", xs: \"column\" }}\r\n        >\r\n          {/* <Grid item flex={{ sm: 1, xs: 1 }}>\r\n            <Search\r\n              value={searchHcp}\r\n              placeholder=\"Type to search User types...\"\r\n              onChange={(e) => onChange(e.target.value)}\r\n              height=\"5rem\"\r\n            />\r\n          </Grid> */}\r\n          <Grid\r\n            item\r\n            flex={{ sm: 1, xs: 1 }}\r\n            container\r\n            alignItems=\"center\"\r\n            flexWrap=\"nowrap\"\r\n            gap={1}\r\n            justifyContent=\"space-between\"\r\n          >\r\n            <Grid item>\r\n              {/* <FilterList title=\"Filter\" onClick={handleDialogOpens1} /> */}\r\n            </Grid>\r\n            <Grid item>\r\n              <CustomButton\r\n                endIcon={<AddIcon />}\r\n                onClick={handleDialogOpen}\r\n                title=\"Add new User Types\"\r\n                type={buttonType}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {userType.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={partnersHeadCells2}\r\n              rows={userType}\r\n              paginationLabel=\"Patients per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                changeTableLimit(fetchUserTypes, { first: e });\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                await handlePageChange(fetchUserTypes, page, pageInfo, {});\r\n              }}\r\n            >\r\n              {userType\r\n                .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row._id, selectedRows);\r\n\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row._id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              row.id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell align=\"center\" className={classes.tableCell}>\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                          }}\r\n                        >\r\n                          <span style={{ marginRight: \"1rem\" }}>\r\n                            <Avatar\r\n                              src={row.icon}\r\n                              sx={{ width: 24, height: 24 }}\r\n                            />\r\n                          </span>\r\n                          <span style={{ fontSize: \"1.25rem\" }}>\r\n                            {row.name}\r\n                          </span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell align=\"center\" className={classes.tableCell}>\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"space-around\",\r\n                          }}\r\n                        >\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            disableRipple\r\n                            className={`${classes.tableBtn} ${classes.greenBtn}`}\r\n                            onClick={() => handleEditOpenDialog(row._id)}\r\n                            endIcon={<EditIcon color=\"success\" />}\r\n                          >\r\n                            Edit UserType\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            disableRipple\r\n                            className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                            onClick={() => handleDeleteOpenDialog(row._id)}\r\n                            endIcon={<DeleteIcon color=\"error\" />}\r\n                          >\r\n                            Delete UserType\r\n                          </Button>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={partnersHeadCells2}\r\n            paginationLabel=\"Providers  per page\"\r\n          />\r\n        )}\r\n      </Grid>\r\n      <Modals\r\n        isOpen={isOpen}\r\n        title=\"Add new User Types\"\r\n        rowSpacing={5}\r\n        handleClose={handleDialogClose}\r\n      >\r\n        <UserTypeModal\r\n          handleDialogClose={handleDialogClose}\r\n          type=\"add\"\r\n          setAlert={setAlert}\r\n          editId={editId}\r\n          initialValues={initialValues}\r\n        />\r\n      </Modals>\r\n      {/* edit Modal */}\r\n      <Modals\r\n        isOpen={edit}\r\n        title=\"Edit Provider\"\r\n        rowSpacing={5}\r\n        handleClose={handleEditCloseDialog}\r\n      >\r\n        <UserTypeModal\r\n          handleDialogClose={handleEditCloseDialog}\r\n          type=\"edit\"\r\n          editId={editId}\r\n          setAlert={setAlert}\r\n          initialValues={initialValues}\r\n          setSingleData={setSingleData}\r\n          singleData={singleData}\r\n        />\r\n      </Modals>\r\n\r\n      <DeleteOrDisable\r\n        open={deleteModal}\r\n        setOpen={setdeleteModal}\r\n        title=\"Delete UserTypes\"\r\n        onConfirm={onConfirm}\r\n        confirmationMsg=\"delete usertypes\"\r\n        btnValue=\"Delete\"\r\n      />\r\n\r\n      <Modals\r\n        isOpen={isOpens}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        handleClose={handleDialogCloses}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={validationSchema1}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" rowGap={4}>\r\n                  <Grid item container>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      name=\"name\"\r\n                      label=\"Hospital Name\"\r\n                      placeholder=\"Enter Hospital Name\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item container>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      name=\"userTypeId\"\r\n                      label=\"User Type\"\r\n                      placeholder=\"Enter User Type\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item>\r\n                    <CustomButton\r\n                      title=\"Apply Filter\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UserTypes;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\SubscriptionModal.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\UserTypeModal.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\CustomButton.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\Loader.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Appointments.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\HCP.js",["840","841","842","843","844","845","846"],"import React, { useState, useEffect } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  Avatar,\r\n  Chip,\r\n  TableRow,\r\n  TableCell,\r\n  Checkbox,\r\n} from \"@mui/material\";\r\n\r\nimport useAlert from \"../../hooks/useAlert\";\r\nimport Filter from \"components/Forms/Filters\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { getVerification } from \"components/graphQL/useQuery\";\r\nimport { HCPHeader } from \"components/Utilities/tableHeaders\";\r\nimport { useStyles } from \"../../styles/docVerificationPageStyles\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport { docVerifyStatusFilterBy } from \"helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  deleteVar,\r\n  filterData,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\n\r\nconst HCP = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { displayAlert } = useAlert();\r\n  const [pageInfo, setPageInfo] = useState({\r\n    page: 0,\r\n    totalPages: 1,\r\n    hasNextPage: false,\r\n    hasPrevPage: false,\r\n    limit: 10,\r\n    totalDocs: 0,\r\n  });\r\n\r\n  const [statusFilterValue, setStatusFilterValue] = useState(\"\");\r\n  const [fetchVerifications, { loading, data, error, variables, refetch }] =\r\n    useLazyQuery(getVerification);\r\n\r\n  useEffect(() => {\r\n    fetchVerifications({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchVerifications, pageInfo]);\r\n\r\n  /* const [response, setResponse] = useState(\"\"); */\r\n\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  /*   const [searchMail, setSearchMail] = useState(\"\"); */\r\n\r\n  const [respondData, setRespondData] = useState([]); //setRespondData\r\n\r\n  useEffect(() => {\r\n    try {\r\n      if (data) {\r\n        setRespondData(data.getVerifications.verification);\r\n        setPageInfo(data.getVerifications.pageInfo);\r\n      }\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  }, [data]);\r\n\r\n  const onFilterStatusChange = async (value) => {\r\n    try {\r\n      deleteVar(variables);\r\n      setStatusFilterValue(value);\r\n      const filterVariables = { status: value };\r\n\r\n      filterData(filterVariables, {\r\n        fetchData: fetchVerifications,\r\n        refetch: refetch,\r\n        variables: variables,\r\n      })\r\n        .then((data) => {\r\n          setRespondData(data.getVerifications.verification || []);\r\n          setPageInfo(data.getVerifications.pageInfo || {});\r\n        })\r\n        .catch(() => {\r\n          refresh(setStatusFilterValue, \"\");\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setStatusFilterValue, \"\");\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", `Something went wrong while filtering. Try again.`);\r\n    setFilterValue(defaultVal);\r\n\r\n    deleteVar(variables);\r\n\r\n    refetch()\r\n      .then(({ data }) => {\r\n        setRespondData(data.getVerifications.verification || []);\r\n        setPageInfo(data.getVerifications.pageInfo || {});\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", `Failed to get patients data, Try again`);\r\n      });\r\n  };\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        height=\"100%\"\r\n      >\r\n        <Grid item container>\r\n          {/* {response ? (\r\n            <Grid\r\n              item\r\n              width={300}\r\n              margin=\"0 auto\"\r\n              justifyContent=\"left\"\r\n              alignItems=\"center\"\r\n            >\r\n              <Alert severity=\"success\">\r\n                <Typography variant=\"h1\">{response}</Typography>\r\n              </Alert>\r\n            </Grid>\r\n          ) : null} */}\r\n          <Grid\r\n            item\r\n            direction={{ sm: \"row\", xs: \"column\" }}\r\n            gap={{ md: 4, sm: 4, xs: 2 }}\r\n            container\r\n          >\r\n            {/* <Grid item flex={1}>\r\n              <Search\r\n                value={searchMail}\r\n                onChange={(e) => setSearchMail(e.target.value)}\r\n                placeholder=\"Type to search Doctors...\"\r\n                height=\"5rem\"\r\n              />\r\n            </Grid> */}\r\n            <Grid item>\r\n              <Filter\r\n                onHandleChange={(e) => onFilterStatusChange(e?.target?.value)}\r\n                onClickClearBtn={() => onFilterStatusChange(\"\")}\r\n                options={docVerifyStatusFilterBy}\r\n                name=\"status\"\r\n                placeholder=\"By status\"\r\n                value={statusFilterValue}\r\n                hasClearBtn={true}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {respondData.length > 0 ? (\r\n          <Grid container item height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={HCPHeader}\r\n              rows={respondData}\r\n              paginationLabel=\"verification per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                changeTableLimit(fetchVerifications, { first: e });\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                handlePageChange(fetchVerifications, page, pageInfo, {});\r\n              }}\r\n            >\r\n              {respondData\r\n                // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const { createdAt, status, qualification, doctorData, _id } =\r\n                    row;\r\n                  const isItemSelected = isSelected(_id, selectedRows);\r\n\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={_id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.black }}\r\n                      >\r\n                        {dateMoment(createdAt)}\r\n                      </TableCell>\r\n\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ marginRight: \"1rem\" }}>\r\n                            <Avatar\r\n                              alt={`image of ${\r\n                                doctorData && doctorData.firstName\r\n                              }`}\r\n                              src={\r\n                                doctorData ? doctorData.picture : displayPhoto\r\n                              }\r\n                              sx={{ width: 24, height: 24 }}\r\n                            />\r\n                          </span>\r\n                          <span style={{ fontSize: \"1.25rem\" }}>\r\n                            {doctorData && doctorData.firstName}\r\n                          </span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.black }}\r\n                      >\r\n                        {doctorData && doctorData.lastName}\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        {qualification && qualification.degree}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.red }}\r\n                      >\r\n                        <Chip\r\n                          label={status ? \"Verified\" : \"Not Verified\"}\r\n                          className={classes.badge}\r\n                          style={{\r\n                            background:\r\n                              status === true\r\n                                ? theme.palette.common.lightGreen\r\n                                : theme.palette.common.lightRed,\r\n                            color:\r\n                              status === true\r\n                                ? theme.palette.common.green\r\n                                : theme.palette.common.red,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        {qualification && dateMoment(qualification.year)}\r\n                      </TableCell>\r\n\r\n                      <TableCell>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          className={classes.button}\r\n                          style={{\r\n                            whiteSpace: \"nowrap\",\r\n                            padding: \"5% 50%\",\r\n                            marginLeft: \"-10%\",\r\n                          }}\r\n                          component={Link}\r\n                          endIcon={<ArrowForwardIosIcon />}\r\n                          to={`/verification/view/${_id}`}\r\n                        >\r\n                          View Verification{\" \"}\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={HCPHeader}\r\n            paginationLabel=\"Verification  per page\"\r\n          />\r\n        )}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HCP;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\ViewDoctorVerification.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\ReferralTab.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\SinglePatient.js",["847","848","849"],"import React, { useEffect, useState, memo, createElement } from \"react\";\r\nimport { Grid, Typography, Avatar } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport PersonRemoveIcon from \"@mui/icons-material/PersonRemove\";\r\n// import TrendingUpIcon from \"@mui/icons-material/TrendingUp\";\r\nimport { Card, CustomButton, Loader } from \"components/Utilities\";\r\nimport DisablePatient from \"components/modals/DeleteOrDisable\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { findProfile } from \"components/graphQL/useQuery\";\r\nimport { ReactComponent as ConsultationIcon } from \"assets/images/consultation.svg\";\r\nimport { ReactComponent as UserIcon } from \"assets/images/user.svg\";\r\nimport { ReactComponent as PrescriptionIcon } from \"assets/images/prescription.svg\";\r\nimport AssignmentIcon from \"@mui/icons-material/Assignment\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport PropTypes from \"prop-types\";\r\n// import ReferPatient from \"components/modals/ReferPatient\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { getPatients } from \"components/graphQL/useQuery\";\r\nimport { deleteProfile } from \"components/graphQL/Mutation\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridContainer: {\r\n    paddingBottom: \"10rem\",\r\n  },\r\n\r\n  gridsWrapper: {\r\n    \"@media(max-width:600px)\": {\r\n      \"&.MuiGrid-root\": {\r\n        flexDirection: \"column\",\r\n        rowGap: \"1.5rem\",\r\n        alignItems: \"center\",\r\n        \"& .detailsContainer\": {\r\n          justifyContent: \"space-around\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n  parentGrid: {\r\n    textDecoration: \"none\",\r\n    color: theme.palette.primary.main,\r\n  },\r\n\r\n  icon: {\r\n    \"&.css-1o5jd4y-MuiSvgIcon-root\": {\r\n      fontSize: \"4rem\",\r\n    },\r\n  },\r\n  \"@media(max-width:600px)\": {\r\n    \"&.MuiGrid-root\": {\r\n      flexDirection: \"column\",\r\n      rowGap: \"1.5rem\",\r\n    },\r\n  },\r\n  container: {\r\n    \"&.MuiGrid-root\": {\r\n      paddingTop: \"5rem\",\r\n      flexWrap: \"wrap\",\r\n      \"@media(max-width:600px)\": {\r\n        \"&\": {\r\n          padding: 0,\r\n          paddingTop: \"1rem\",\r\n          // flexDirection: \"column\",\r\n          rowGap: \"1.5rem\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n}));\r\nconst SinglePatient = () => {\r\n  const history = useHistory();\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { patientId } = useParams();\r\n  const [disableUser] = useMutation(deleteProfile);\r\n  const onConfirm = async () => {\r\n    try {\r\n      await disableUser({\r\n        variables: { id: patientId },\r\n        refetchQueries: [{ query: getPatients }],\r\n      });\r\n\r\n      history.push(\"/patients\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const cards2 = [\r\n    {\r\n      id: 1,\r\n      title: \"Patient Profile\",\r\n      background: theme.palette.common.lightRed,\r\n      path: \"profile\",\r\n      icon: UserIcon,\r\n      fill: theme.palette.common.red,\r\n    },\r\n    {\r\n      id: 4,\r\n      title: \"Medical Records\",\r\n      background: theme.palette.common.lightGreen,\r\n      path: \"records\",\r\n      icon: AssignmentIcon,\r\n      fill: theme.palette.common.green,\r\n    },\r\n    {\r\n      id: 5,\r\n      title: \"Consultations\",\r\n      background: theme.palette.common.lightRed,\r\n      path: \"consultations\",\r\n      icon: UserIcon,\r\n      fill: theme.palette.common.red,\r\n    },\r\n    {\r\n      id: 3,\r\n      title: \"Prescriptions\",\r\n      background: theme.palette.common.lightRed,\r\n      path: \"prescriptions\",\r\n      icon: PrescriptionIcon,\r\n      fill: theme.palette.common.red,\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Appointments\",\r\n      background: theme.palette.common.lightGreen,\r\n      path: \"appointments\",\r\n      icon: ConsultationIcon,\r\n      fill: theme.palette.common.green,\r\n    },\r\n    /* {\r\n      id: 6,\r\n      title: \"Medications\",\r\n      background: theme.palette.common.lightGreen,\r\n      path: \"medications\",\r\n      icon: UserIcon,\r\n      fill: theme.palette.common.green,\r\n    }, */\r\n  ];\r\n\r\n  const trasparentButton = {\r\n    background: \"transparent\",\r\n    hover: \"#fafafa\",\r\n    active: \"#f4f4f4\",\r\n  };\r\n\r\n  const [patientProfile, setPatientProfile] = useState(\"\");\r\n  const { loading, error, data } = useQuery(findProfile, {\r\n    variables: {\r\n      id: patientId,\r\n    },\r\n    fetchPolicy: \"cache-and-network\",\r\n    nextFetchPolicy: \"cache-only\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      localStorage.setItem(\"userDociId\", data.profile.dociId);\r\n      setPatientProfile(data.profile);\r\n    }\r\n  }, [data, patientId]);\r\n\r\n  const [openDisablePatient, setOpenDisablePatient] = useState(false);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  else {\r\n    return (\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        className={classes.gridContainer}\r\n        gap={2}\r\n      >\r\n        <Grid\r\n          item\r\n          justifyContent=\"space-between\"\r\n          alignItems=\"center\"\r\n          container\r\n          p={2}\r\n          className={classes.gridsWrapper}\r\n        >\r\n          <Grid\r\n            item\r\n            alignItems=\"center\"\r\n            container\r\n            gap={2}\r\n            className=\"detailsContainer\"\r\n            sx={{ flex: 1 }}\r\n          >\r\n            <Grid item>\r\n              <Avatar\r\n                alt={patientProfile.firstName}\r\n                src={patientProfile.image ? patientProfile.image : displayPhoto}\r\n                sx={{ width: 50, height: 50 }}\r\n              />\r\n            </Grid>\r\n\r\n            <Typography variant=\"h2\">\r\n              {patientProfile.firstName} {patientProfile.lastName}\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<PersonRemoveIcon />}\r\n              title=\"Disable Patient\"\r\n              type={trasparentButton}\r\n              textColor={theme.palette.common.red}\r\n              onClick={() => setOpenDisablePatient(true)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          <Grid\r\n            container\r\n            justifyContent=\"center\"\r\n            p={2}\r\n            flexWrap=\"wrap\"\r\n            // sx={{ background: \"yellow\" }}\r\n            columnSpacing={{ md: 6, sm: 4, xs: 4 }}\r\n            rowSpacing={{ md: 6, sm: 4, xs: 4 }}\r\n            // spacing={2}\r\n          >\r\n            {cards2.map((card) => (\r\n              <Grid\r\n                key={card.id}\r\n                item\r\n                xs={10}\r\n                sm={6}\r\n                md={4}\r\n                className={classes.parentGrid}\r\n                component={Link}\r\n                // gap={3}\r\n                p={0}\r\n                to={`/patients/${patientId}/${card.path}`}\r\n              >\r\n                <Card\r\n                  title={card.title}\r\n                  background={card.background}\r\n                  header=\"h4\"\r\n                >\r\n                  {createElement(card.icon, {\r\n                    fill: card.fill,\r\n                    color: \"success\",\r\n                    style: { fontSize: \"clamp(2.5rem, 3vw,4rem)\" },\r\n                  })}\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n        <DisablePatient\r\n          open={openDisablePatient}\r\n          setOpen={setOpenDisablePatient}\r\n          title=\"Delete Patient\"\r\n          btnValue=\"delete\"\r\n          onConfirm={onConfirm}\r\n          confirmationMsg=\"disable Patient\"\r\n        />\r\n      </Grid>\r\n    );\r\n  }\r\n};\r\n\r\nexport default memo(SinglePatient);\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\SingleHCP.js",["850","851","852"],"import React, { useState, useEffect, createElement } from \"react\";\r\nimport { Grid, Typography, Avatar } from \"@mui/material\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { doctor, getDoctorsProfile } from \"components/graphQL/useQuery\";\r\nimport PersonRemoveIcon from \"@mui/icons-material/PersonRemove\";\r\nimport PaymentsIcon from \"@mui/icons-material/Payments\";\r\nimport { Card, CustomButton, Loader } from \"components/Utilities\";\r\nimport DisablePatient from \"components/modals/DeleteOrDisable\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { ReactComponent as ConsultationIcon } from \"assets/images/consultation.svg\";\r\nimport { ReactComponent as UserIcon } from \"assets/images/user.svg\";\r\nimport { ReactComponent as CalendarIcon } from \"assets/images/calendar.svg\";\r\nimport { Link, useParams, useHistory } from \"react-router-dom\";\r\nimport { deleteDoctor } from \"components/graphQL/Mutation\";\r\n//\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridContainer: {\r\n    paddingBottom: \"10rem\",\r\n  },\r\n\r\n  gridsWrapper: {\r\n    \"@media(max-width:600px)\": {\r\n      \"&.MuiGrid-root\": {\r\n        flexDirection: \"column\",\r\n        rowGap: \"1.5rem\",\r\n        alignItems: \"center\",\r\n        \"& .detailsContainer\": {\r\n          justifyContent: \"space-around\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n  parentGrid: {\r\n    textDecoration: \"none\",\r\n    color: theme.palette.primary.main,\r\n  },\r\n\r\n  icon: {\r\n    \"&.css-1o5jd4y-MuiSvgIcon-root\": {\r\n      fontSize: \"4rem\",\r\n    },\r\n  },\r\n  \"@media(max-width:600px)\": {\r\n    \"&.MuiGrid-root\": {\r\n      flexDirection: \"column\",\r\n      rowGap: \"1.5rem\",\r\n    },\r\n  },\r\n  container: {\r\n    \"&.MuiGrid-root\": {\r\n      paddingTop: \"5rem\",\r\n      flexWrap: \"wrap\",\r\n      \"@media(max-width:600px)\": {\r\n        \"&\": {\r\n          padding: 0,\r\n          paddingTop: \"1rem\",\r\n          // flexDirection: \"column\",\r\n          rowGap: \"1.5rem\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n}));\r\nconst SingleHCP = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const { hcpId } = useParams();\r\n  const history = useHistory();\r\n  const [disableUser] = useMutation(deleteDoctor);\r\n  const [doctorProfile, setDoctorProfile] = useState(\"\");\r\n  const [openDisableDoctor, setOpenDisableDoctor] = useState(false);\r\n  const profile = useQuery(doctor, {\r\n    variables: {\r\n      id: hcpId,\r\n    },\r\n  });\r\n  const onConfirm = async () => {\r\n    try {\r\n      await disableUser({\r\n        variables: { id: hcpId },\r\n        refetchQueries: [{ query: getDoctorsProfile }],\r\n      });\r\n      history.push(\"/hcps\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n  useEffect(() => {\r\n    if (profile.data) {\r\n      setDoctorProfile(profile.data.doctorProfile);\r\n    }\r\n  }, [profile.data, hcpId]);\r\n\r\n  const cards2 = [\r\n    {\r\n      id: 1,\r\n      title: \"Doctor Profile\",\r\n      background: theme.palette.common.lightRed,\r\n      path: \"profile\",\r\n      icon: UserIcon,\r\n      fill: theme.palette.common.red,\r\n    },\r\n    {\r\n      id: 2,\r\n      title: \"Availability\",\r\n      background: theme.palette.common.lightGreen,\r\n      path: \"availability\",\r\n      icon: ConsultationIcon,\r\n      fill: theme.palette.common.green,\r\n    },\r\n    {\r\n      id: 3,\r\n      title: \"Consultations\",\r\n      background: theme.palette.common.lightRed,\r\n      path: \"consultations\",\r\n      icon: ConsultationIcon,\r\n      fill: theme.palette.common.red,\r\n    },\r\n    {\r\n      id: 4,\r\n      title: \"Earnings\",\r\n      background: theme.palette.common.lightGreen,\r\n      path: \"earnings\",\r\n      icon: PaymentsIcon,\r\n      fill: theme.palette.common.green,\r\n    },\r\n    {\r\n      id: 5,\r\n      title: \"Patients\",\r\n      background: theme.palette.common.lightRed,\r\n      path: \"doctor-patients\",\r\n      icon: UserIcon,\r\n      fill: theme.palette.common.red,\r\n    },\r\n    {\r\n      id: 6,\r\n      title: \"Appointments\",\r\n      background: theme.palette.common.lightGreen,\r\n      path: \"appointments\",\r\n      icon: CalendarIcon,\r\n      fill: theme.palette.common.green,\r\n    },\r\n  ];\r\n\r\n  const trasparentButton = {\r\n    background: \"transparent\",\r\n    hover: \"#fafafa\",\r\n    active: \"#f4f4f4\",\r\n  };\r\n\r\n  if (profile.loading) return <Loader />;\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        rowSpacing={2}\r\n        className={classes.gridContainer}\r\n      >\r\n        <Grid\r\n          item\r\n          container\r\n          alignItems=\"center\"\r\n          justifyContent=\"space-between\"\r\n          p={2}\r\n          className={classes.gridsWrapper}\r\n        >\r\n          {/* Display photo and profile name grid */}\r\n          <Grid\r\n            item\r\n            alignItems=\"center\"\r\n            container\r\n            gap={2}\r\n            className=\"detailsContainer\"\r\n            sx={{ flex: 1 }}\r\n          >\r\n            <Grid item>\r\n              <Avatar\r\n                alt={doctorProfile?.firstName}\r\n                src={doctorProfile?.picture}\r\n                sx={{ width: 50, height: 50 }}\r\n              />\r\n            </Grid>\r\n\r\n            <Typography variant=\"h2\">{`${doctorProfile.firstName} ${doctorProfile.lastName}`}</Typography>\r\n          </Grid>\r\n          {/* Action Buttons grid */}\r\n\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<PersonRemoveIcon />}\r\n              title=\"Disable Doctor\"\r\n              onClick={() => setOpenDisableDoctor(true)}\r\n              type={trasparentButton}\r\n              textColor={theme.palette.common.red}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        {/* BOTTOM CARDS SECTION */}\r\n        <Grid item>\r\n          <Grid\r\n            container\r\n            justifyContent=\"center\"\r\n            p={2}\r\n            flexWrap=\"wrap\"\r\n            // sx={{ background: \"yellow\" }}\r\n            columnSpacing={{ md: 6, sm: 4, xs: 4 }}\r\n            rowSpacing={{ md: 6, sm: 4, xs: 4 }}\r\n            // spacing={2}\r\n          >\r\n            {cards2.map((card) => (\r\n              <Grid\r\n                key={card.id}\r\n                item\r\n                xs={10}\r\n                sm={6}\r\n                md={4}\r\n                className={classes.parentGrid}\r\n                component={Link}\r\n                to={`/hcps/${hcpId}/${card.path}`}\r\n              >\r\n                <Card\r\n                  title={card.title}\r\n                  background={card.background}\r\n                  header=\"h4\"\r\n                >\r\n                  {createElement(card.icon, {\r\n                    fill: card.fill,\r\n                    color:\r\n                      card.id === 4 || card.id === 6 ? \"success\" : undefined,\r\n                    style: { fontSize: \"clamp(2.5rem, 3vw,4rem)\" },\r\n                  })}\r\n                </Card>\r\n              </Grid>\r\n            ))}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <DisablePatient\r\n        open={openDisableDoctor}\r\n        setOpen={setOpenDisableDoctor}\r\n        title=\"Delete Doctor\"\r\n        btnValue=\"delete\"\r\n        confirmationMsg=\"delete Doctor\"\r\n        onConfirm={onConfirm}\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default SingleHCP;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Providers.js",["853","854","855","856","857","858","859","860","861","862","863","864","865"],"import React, { useState, useEffect } from \"react\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { partnersHeadCells2 } from \"components/Utilities/tableHeaders\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport {\r\n  Grid,\r\n  TableRow,\r\n  TableCell,\r\n  Checkbox,\r\n  Alert,\r\n  Button,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport { CustomButton, Loader, Search, Modals } from \"components/Utilities\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport { DeleteOrDisable, ProviderModal } from \"components/modals\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { useMutation, useLazyQuery, useQuery } from \"@apollo/client\";\r\nimport { getProviders /**/ } from \"components/graphQL/useQuery\";\r\nimport { deletProvider } from \"components/graphQL/Mutation\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  fetchMoreData,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  FormLabel: {\r\n    fontSize: \"1.6rem\",\r\n    color: theme.palette.common.dark,\r\n  },\r\n  btn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"10rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n  tableBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      height: \"3rem\",\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"2rem\",\r\n      boxShadow: \"none\",\r\n\r\n      \"&:hover\": {\r\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.5rem\",\r\n      },\r\n    },\r\n  },\r\n  redBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightRed,\r\n      color: theme.palette.common.red,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.error.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n  greenBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.success.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n  \"&.MuiButton-root\": {\r\n    ...theme.typography.btn,\r\n    background: theme.palette.common.black,\r\n    width: \"100%\",\r\n  },\r\n  checkbox: {\r\n    \"& .MuiSvgIcon-root\": {\r\n      fontSize: 28,\r\n    },\r\n    \"&.Mui-checked\": {\r\n      color: \"green !important\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Providers = () => {\r\n  const classes = useStyles();\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [fetchProviders, { error, loading, refetch }] =\r\n    useLazyQuery(getProviders);\r\n  const { data: dat, error: err, loading: load } = useQuery(getProviders);\r\n\r\n  useEffect(() => {\r\n    fetchProviders({\r\n      variables: {\r\n        first: pageInfo?.limit || 10,\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n    //eslint-disable-next-line\r\n  }, [fetchProviders]);\r\n\r\n  const onChange = async (e) => {\r\n    setSearchHcp(e);\r\n    if (e == \"\") {\r\n      refetch();\r\n    } else refetch({ name: e });\r\n  };\r\n  const [id, setId] = useState(null);\r\n  const [deleteModal, setdeleteModal] = useState(false);\r\n  const [deleteProvider] = useMutation(deletProvider);\r\n  // const [singleProvider] = useLazyQuery(getSingleProvider);\r\n  const handleDeleteOpenDialog = (id) => {\r\n    setId(id);\r\n    setdeleteModal(true);\r\n  };\r\n  const [providers, setProviders] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (dat) {\r\n      setProviders(dat.getProviders.provider);\r\n      setPageInfo(dat.getProviders.pageInfo);\r\n    }\r\n  }, [dat]);\r\n\r\n  const theme = useTheme();\r\n  const handleDialogOpen = () => setIsOpen(true);\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n\r\n  const initialValues = {\r\n    name: \"\",\r\n    type: \"\",\r\n    image: null,\r\n    iconAlt: null,\r\n  };\r\n\r\n  const onConfirm = async () => {\r\n    try {\r\n      await deleteProvider({\r\n        variables: { id },\r\n        refetchQueries: [{ query: getProviders }],\r\n      });\r\n    } catch (error) {\r\n      console.log(error.message);\r\n    }\r\n  };\r\n\r\n  const [searchHcp, setSearchHcp] = useState(\"\");\r\n  const [editId, setEditId] = useState(null);\r\n  const [isOpens, setIsOpens] = useState(false);\r\n  const handleEditCloseDialog = () => {\r\n    setEdit(false);\r\n  };\r\n  const [alert, setAlert] = useState(null);\r\n  const [edit, setEdit] = useState(false);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const handleDialogClose = async () => {\r\n    setIsOpen(false);\r\n    setEditId(null);\r\n    setSingleData();\r\n  };\r\n\r\n  /*   const handleDialogOpens1 = () => setIsOpens(true); */\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    userTypeId: \"\",\r\n  };\r\n  const onSubmit1 = async (values) => {\r\n    const { name, userTypeId } = values;\r\n    await refetch({\r\n      name,\r\n      userTypeId,\r\n    });\r\n    handleDialogCloses();\r\n  };\r\n  const validationSchema1 = Yup.object({\r\n    name: Yup.string(\"Enter your hospital\").trim(),\r\n    userTypeId: Yup.string(\"Enter your userTypeId\").trim(),\r\n  });\r\n\r\n  const handleDialogCloses = () => setIsOpens(false);\r\n  const handleEditOpenDialog = (id) => {\r\n    setEdit(true);\r\n    setEditId(id);\r\n  };\r\n  const [singleData, setSingleData] = useState();\r\n\r\n  if (loading || load) return <Loader />;\r\n  if (error || err) return <NoData error={error} />;\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        height=\"100%\"\r\n      >\r\n        {alert && Object.keys(alert).length > 0 && (\r\n          <Alert\r\n            variant=\"filled\"\r\n            severity={alert.type}\r\n            sx={{ justifyContent: \"center\", width: \"70%\", margin: \"0 auto\" }}\r\n          >\r\n            {alert.message}\r\n          </Alert>\r\n        )}\r\n        <Grid\r\n          item\r\n          gap={{ sm: 4, xs: 2 }}\r\n          container\r\n          direction={{ md: \"row\", sm: \"column\" }}\r\n        >\r\n          {/* <Grid item flex={1}>\r\n            <Search\r\n              value={searchHcp}\r\n              placeholder=\"Type to search Providers by Hospital name e.g Lagoon Hospital\"\r\n              onChange={(e) => onChange(e.target.value)}\r\n              height=\"5rem\"\r\n            />\r\n          </Grid> */}\r\n          <Grid item container justifyContent=\"space-between\">\r\n            <Grid item>\r\n              {/* <FilterList title=\"Filter partner\" onClick={handleDialogOpens1} /> */}\r\n            </Grid>\r\n            <Grid item>\r\n              <CustomButton\r\n                endIcon={<AddIcon />}\r\n                title=\"Add new Provider\"\r\n                type={buttonType}\r\n                onClick={handleDialogOpen}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {providers.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={partnersHeadCells2}\r\n              rows={providers}\r\n              paginationLabel=\"Providers per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                await changeTableLimit(fetchProviders, { first: e });\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                await handlePageChange(fetchProviders, page, pageInfo, {});\r\n              }}\r\n            >\r\n              {providers.map((row, index) => {\r\n                const { _id, name, icon } = row;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell align=\"center\" className={classes.tableCell}>\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                        }}\r\n                      >\r\n                        <span style={{ marginRight: \"1rem\" }}>\r\n                          <Avatar src={icon} sx={{ width: 24, height: 24 }} />\r\n                        </span>\r\n                        <span style={{ fontSize: \"1.25rem\" }}>{name}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell align=\"center\" className={classes.tableCell}>\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                          justifyContent: \"space-around\",\r\n                        }}\r\n                      >\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          disableRipple\r\n                          className={`${classes.tableBtn} ${classes.greenBtn}`}\r\n                          onClick={() => handleEditOpenDialog(_id)}\r\n                          endIcon={<EditIcon color=\"success\" />}\r\n                        >\r\n                          Edit Provider\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          disableRipple\r\n                          className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                          onClick={() => handleDeleteOpenDialog(_id)}\r\n                          endIcon={<DeleteIcon color=\"error\" />}\r\n                        >\r\n                          Delete Provider\r\n                        </Button>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={partnersHeadCells2}\r\n            paginationLabel=\"Providers  per page\"\r\n          />\r\n        )}\r\n      </Grid>\r\n\r\n      <Modals\r\n        isOpen={isOpen}\r\n        title=\"Add new Provider\"\r\n        rowSpacing={5}\r\n        handleClose={handleDialogClose}\r\n      >\r\n        <ProviderModal\r\n          handleDialogClose={handleDialogClose}\r\n          type=\"add\"\r\n          setAlert={setAlert}\r\n          editId={editId}\r\n          setSingleData={setSingleData}\r\n          initialValues={initialValues}\r\n        />\r\n      </Modals>\r\n      {/* edit Modal */}\r\n      <Modals\r\n        isOpen={edit}\r\n        title=\"Edit Provider\"\r\n        rowSpacing={5}\r\n        handleClose={handleEditCloseDialog}\r\n      >\r\n        <ProviderModal\r\n          handleDialogClose={handleEditCloseDialog}\r\n          type=\"edit\"\r\n          editId={editId}\r\n          setAlert={setAlert}\r\n          initialValues={initialValues}\r\n          singleData={singleData}\r\n          setSingleData={setSingleData}\r\n        />\r\n      </Modals>\r\n\r\n      <DeleteOrDisable\r\n        open={deleteModal}\r\n        setOpen={setdeleteModal}\r\n        title=\"Delete Provider\"\r\n        onConfirm={onConfirm}\r\n        confirmationMsg=\"delete provider\"\r\n        btnValue=\"Delete\"\r\n      />\r\n\r\n      <Modals\r\n        isOpen={isOpens}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        handleClose={handleDialogCloses}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={validationSchema1}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\">\r\n                  <Grid item container>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      name=\"name\"\r\n                      label=\"Hospital Name\"\r\n                      placeholder=\"Enter Hospital Name\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    style={{ marginBottom: \"18rem\", marginTop: \"3rem\" }}\r\n                  >\r\n                    <Grid container>\r\n                      <Grid item container>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          name=\"userTypeId\"\r\n                          label=\"User Type\"\r\n                          placeholder=\"Enter User Type\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <CustomButton\r\n                      title=\"Apply Filter\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Providers;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Settings.js",["866"],"import React from \"react\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { ReactComponent as Administrator } from \"assets/images/administrator.svg\";\r\nimport { ReactComponent as ConsulationIcon } from \"assets/images/consultation.svg\";\r\nimport { Card } from \"components/Utilities\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst Settings = () => {\r\n  const theme = useTheme();\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      alignItems=\"space-between\"\r\n      gap=\"5rem\"\r\n      paddingY=\"2rem\"\r\n      justifyContent={{ sm: \"center\", md: \"center\" }}\r\n    >\r\n      <Grid item container md={5} sm={5} xs={12}>\r\n        <Grid item container flexDirection=\"column\">\r\n          <Link to=\"/settings/administrator\" style={{ textDecoration: \"none\" }}>\r\n            <Card\r\n              alt=\"A administrator icon used as a representation for the administrator \"\r\n              title=\"Administrator\"\r\n              background={theme.palette.common.lightGreen}\r\n            >\r\n              <Administrator fill={theme.palette.common.green} />\r\n            </Card>\r\n          </Link>\r\n        </Grid>\r\n      </Grid>\r\n      {/* 2 */}\r\n      <Grid item container md={5} sm={5} xs={12}>\r\n        <Grid item container flexDirection=\"column\">\r\n          <Link to=\"/settings/management\" style={{ textDecoration: \"none\" }}>\r\n            <Card\r\n              alt=\"An icon used as a representation for making consultation with the doctor\"\r\n              title=\"Role Management\"\r\n              background={theme.palette.common.lightRed}\r\n            >\r\n              <ConsulationIcon fill={theme.palette.common.red} />\r\n            </Card>\r\n          </Link>\r\n        </Grid>\r\n      </Grid>\r\n      {/* 3 */}\r\n      <Grid item container md={5} sm={5} xs={12}>\r\n        <Grid item container flexDirection=\"column\">\r\n          <Link to=\"/settings/permissions\" style={{ textDecoration: \"none\" }}>\r\n            <Card\r\n              alt=\"An icon used as a permission for making consultation with the doctor\"\r\n              title=\"Permissions\"\r\n              background={theme.palette.common.lightRed}\r\n            >\r\n              <ConsulationIcon fill={theme.palette.common.red} />\r\n            </Card>\r\n          </Link>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item container md={5} sm={5} xs={12}>\r\n        <Grid item container flexDirection=\"column\">\r\n          <Link\r\n            to=\"/settings/list-management\"\r\n            style={{ textDecoration: \"none\" }}\r\n          >\r\n            <Card\r\n              alt=\"list management Icon\"\r\n              title=\"List management\"\r\n              background={theme.palette.common.lightRed}\r\n            >\r\n              <ConsulationIcon fill={theme.palette.common.red} />\r\n            </Card>\r\n          </Link>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Settings;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Prescriptions.js",["867","868","869","870","871"],"import React, { useEffect, useState } from \"react\";\r\nimport { Typography, Grid, Avatar, Divider } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\nimport { getConsultations } from \"components/graphQL/useQuery\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n  item: {\r\n    \"&.MuiGrid-root > *\": {\r\n      flex: 1,\r\n    },\r\n  },\r\n  parentGrid: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.1)\",\r\n  },\r\n  infoBadge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.5rem\",\r\n      borderRadius: \"1.5rem\",\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n    },\r\n  },\r\n  title: {\r\n    \"&.MuiTypography-root\": {\r\n      color: theme.palette.common.grey,\r\n      marginRight: \"2rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Prescriptions = () => {\r\n  const classes = useStyles();\r\n\r\n  const { patientId } = useParams();\r\n\r\n  const { loading, error, data } = useQuery(getConsultations, {\r\n    variables: {\r\n      id: patientId,\r\n      orderBy: \"-createdAt\",\r\n    },\r\n  });\r\n\r\n  const [consultations, setConsultations] = useState({});\r\n  const [pre, setPre] = useState([]);\r\n  const [doc, setDoc] = useState(null);\r\n  useEffect(() => {\r\n    if (data && data.getConsultations.data) {\r\n      const datas = data.getConsultations.data[0];\r\n      if (datas) {\r\n        setConsultations(datas);\r\n        setPre(datas.prescription);\r\n        setDoc(datas.doctorData);\r\n      }\r\n    }\r\n  }, [data, consultations, pre, doc]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid container direction=\"column\" flexWrap=\"nowrap\" height=\"100%\" gap={2}>\r\n      <Grid item>\r\n        <Typography variant=\"h2\">Prescriptions</Typography>\r\n      </Grid>\r\n      {Object.entries(consultations).length > 0 ? (\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          width=\"100%\"\r\n          className={classes.parentGrid}\r\n        >\r\n          <Grid\r\n            item\r\n            container\r\n            flexDirection=\"row\"\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n            flexWrap=\"no-wrap\"\r\n            padding=\" 2rem 0\"\r\n            rowGap={{ xs: 2 }}\r\n            width=\"90%\"\r\n            margin=\"auto\"\r\n          >\r\n            <Grid item>\r\n              <Grid item container gap={2} alignItems=\"center\">\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Doctor:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Avatar\r\n                    src={\r\n                      consultations && doc && doc.picture\r\n                        ? doc.picture\r\n                        : displayPhoto\r\n                    }\r\n                    alt=\"Display photo of the sender\"\r\n                  />\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"h5\">\r\n                    {doc.firstName\r\n                      ? `${doc && doc.firstName} ${doc && doc.lastName}`\r\n                      : \"no doctor\"}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid item container gap={2} alignItems=\"center\">\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Prescription Date:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"h5\">\r\n                    {dateMoment(consultations.updatedAt)}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item alignItems=\"center\">\r\n              <Grid item container gap={2} alignItems=\"center\">\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Symptoms:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"h5\">\r\n                    {consultations.symptoms\r\n                      ? consultations.symptoms.map((i) => `${i.name}, `)\r\n                      : \"No Symptom\"}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider />\r\n\r\n          {pre && pre.length > 0 && (\r\n            <>\r\n              <Grid\r\n                container\r\n                flexDirection=\"row\"\r\n                alignItems=\"center\"\r\n                justifyContent=\"space-between\"\r\n                flexWrap=\"no-wrap\"\r\n                padding=\" 2rem 0\"\r\n                width=\"90%\"\r\n                margin=\"auto\"\r\n              >\r\n                <Grid\r\n                  item\r\n                  container\r\n                  alignItems=\"center\"\r\n                  className={classes.item}\r\n                  justifyContent=\"space-between\"\r\n                  gap={2}\r\n                >\r\n                  <Grid item>\r\n                    <Typography variant=\"h5\">Drugs</Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography variant=\"h5\">Dosage</Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography variant=\"h5\">Frequency</Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography variant=\"h5\">Mode</Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Divider />\r\n            </>\r\n          )}\r\n          {pre &&\r\n            pre.length > 0 &&\r\n            pre.map((i, index) => {\r\n              return (\r\n                <>\r\n                  <Grid\r\n                    container\r\n                    flexDirection=\"row\"\r\n                    alignItems=\"center\"\r\n                    justifyContent=\"space-between\"\r\n                    flexWrap=\"no-wrap\"\r\n                    padding=\" 2rem 0\"\r\n                    width=\"90%\"\r\n                    margin=\"auto\"\r\n                    key={index}\r\n                  >\r\n                    <Grid\r\n                      item\r\n                      container\r\n                      className={classes.item}\r\n                      alignItems=\"center\"\r\n                      justifyContent=\"space-between\"\r\n                      gap={2}\r\n                    >\r\n                      <Grid item>\r\n                        <Typography variant=\"body1\">{i.drugName}</Typography>\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography variant=\"body1\">{i.dosage}</Typography>\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography variant=\"body1\">{`${i.dosageFrequency.day}day / ${i.dosageFrequency.duration}duration`}</Typography>\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography variant=\"body1\">{i.mode}</Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Divider />\r\n                </>\r\n              );\r\n            })}\r\n          <Grid\r\n            item\r\n            container\r\n            rowSpacing={2}\r\n            flexDirection=\"column\"\r\n            padding=\" 2rem 0\"\r\n            width=\"90%\"\r\n            margin=\"auto\"\r\n          >\r\n            <Grid item>\r\n              <Typography variant=\"body1\" className={classes.title}>\r\n                Doctor Notes:\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}>\r\n                {consultations.doctorNote\r\n                  ? consultations.doctorNote\r\n                  : \"No Note\"}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      ) : (\r\n        <NoData />\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Prescriptions;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\ViewMessage.js",["872","873"],"import React, { useEffect, useState } from \"react\";\r\nimport { Grid, Typography, Avatar, Chip, Divider } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { getAMessage } from \"components/graphQL/useQuery\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  parentGrid: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.1)\",\r\n  },\r\n  gridWrapper: {\r\n    padding: \"4rem\",\r\n  },\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      border: `1px solid ${theme.palette.common.lighterGrey} !important`,\r\n    },\r\n    \"& .MuiChip-label\": {\r\n      fontSize: \"1.25rem\",\r\n      color: theme.palette.common.green,\r\n    },\r\n  },\r\n}));\r\n\r\nconst ViewMessage = () => {\r\n  const classes = useStyles();\r\n  const { messageId } = useParams();\r\n  const { loading, data, error } = useQuery(getAMessage, {\r\n    variables: { id: messageId },\r\n  });\r\n\r\n  const [message, setMessage] = useState([]);\r\n  useEffect(() => {\r\n    if (data) setMessage(data.getMessage);\r\n  }, [message, data]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  const { body, recipientData, subject } = message;\r\n  return (\r\n    <Grid container direction=\"column\">\r\n      <Grid item container direction=\"column\" className={classes.parentGrid}>\r\n        <Grid item className={classes.gridWrapper}>\r\n          <Typography variant=\"h3\">{subject}</Typography>\r\n        </Grid>\r\n        <Divider />\r\n\r\n        <Grid\r\n          item\r\n          direction=\"column\"\r\n          className={classes.gridWrapper}\r\n          container\r\n          gap={2}\r\n        >\r\n          <Grid item container gap={2} alignItems=\"center\">\r\n            <Grid item>\r\n              <Avatar\r\n                src={recipientData ? recipientData.image : displayPhoto}\r\n                alt={`Display photo of the sender ${\r\n                  recipientData && recipientData.firstName\r\n                }`}\r\n              />\r\n            </Grid>\r\n            <Grid item>\r\n              <Typography variant=\"h5\">\r\n                {recipientData && Object.keys(recipientData).length > 0\r\n                  ? `${recipientData?.firstName} ${recipientData?.lastName}`\r\n                  : \"No Value\"}\r\n              </Typography>\r\n            </Grid>\r\n          </Grid>\r\n          <Grid item>\r\n            <Chip\r\n              variant=\"outlined\"\r\n              label={\r\n                recipientData && Object.keys(recipientData).length > 0\r\n                  ? recipientData.dociId\r\n                  : \"No Heala ID\"\r\n              }\r\n              className={classes.badge}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Divider />\r\n        <Grid item className={classes.gridWrapper}>\r\n          <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}>\r\n            {body ? body : \"No Value\"}\r\n          </Typography>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default ViewMessage;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Permission.js",["874","875","876","877","878","879","880","881","882","883","884"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { Loader, CustomButton, Modals } from \"components/Utilities\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Button,\r\n  TableRow,\r\n  TableCell,\r\n  Checkbox,\r\n  Alert,\r\n  Chip,\r\n} from \"@mui/material\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { PermissionHeader } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport { PermissionModal, DeleteOrDisable } from \"components/modals\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getPermissions } from \"components/graphQL/useQuery\";\r\nimport { useMutation } from \"@apollo/client\";\r\nimport { DELETE_PERMISSION } from \"components/graphQL/Mutation\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  flexContainer: {\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    margin: \"auto\",\r\n    width: \"100%\",\r\n    paddingBottom: \"2rem \",\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  FormLabel: {\r\n    \"&.MuiFormLabel-root\": {\r\n      ...theme.typography.FormLabel,\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n  tableBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      height: \"3rem\",\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"2rem\",\r\n      boxShadow: \"none\",\r\n\r\n      \"&:hover\": {\r\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.5rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  redBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightRed,\r\n      color: theme.palette.common.red,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.error.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n\r\n  greenBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.success.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst referralOptions = [\"Hello\", \"World\", \"Goodbye\", \"World\"];\r\nconst Permission = () => {\r\n  const [singlePermission, setSinglePermission] = useState();\r\n\r\n  const checkbox = [\r\n    { key: \"create\", value: \"create\" },\r\n    { key: \"update\", value: \"update\" },\r\n    { key: \"read\", value: \"read\" },\r\n    { key: \"delete\", value: \"delete\" },\r\n  ];\r\n\r\n  const initialValues = {\r\n    name: \"\",\r\n    // checkbox: [],\r\n    description: \"\",\r\n  };\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    date: \"\",\r\n    category: \"\",\r\n  };\r\n\r\n  const validationSchema1 = Yup.object({\r\n    name: Yup.string(\"Enter your Permission\")\r\n      .trim()\r\n      .required(\"permission is required\"),\r\n    date: Yup.string(\"Select Date\").required(\"Date is required\"),\r\n    category: Yup.string(\"Select Category\")\r\n      .trim()\r\n      .required(\"Category is required\"),\r\n  });\r\n  const onSubmit1 = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    // checkbox: Yup.array().min(1, \"Add atleast a permission\"),\r\n    name: Yup.string(\"Enter your Permission\").required(\r\n      \"permission is required\"\r\n    ),\r\n    description: Yup.string(\"Enter Description\").required(\r\n      \"Description is required\"\r\n    ),\r\n  });\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [deleteModal, setdeleteModal] = useState(false);\r\n  const [isEdit, setIsEdit] = useState(false);\r\n  const [editId, setEditId] = useState(null);\r\n  const handleEditCloseDialog = useCallback(() => {\r\n    setIsEdit(false);\r\n    setSinglePermission(\"\");\r\n  }, []);\r\n  const [editDetails] = useState(null);\r\n  const [deleteId, setDeleteId] = useState(null);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const handleDialogOpen = () => setIsOpen(true);\r\n  const [alert, setAlert] = useState(null);\r\n  const handleDeleteOpenDialog = (id) => {\r\n    setdeleteModal(true);\r\n    setDeleteId(id);\r\n  };\r\n  const handleEditOpenDialog = async (id) => {\r\n    setEditId(id);\r\n    setIsEdit(true);\r\n  };\r\n\r\n  const onConfirm = async () => {\r\n    try {\r\n      const { data } = await deletPlan({\r\n        variables: { id: deleteId },\r\n        refetchQueries: [{ query: getPermissions }],\r\n      });\r\n      setAlert({\r\n        message: data.deletePermission.message,\r\n        type: \"success\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert(null);\r\n      }, 5000);\r\n    } catch (error) {\r\n      setAlert({\r\n        message: \"Plan  not successfully deleted\",\r\n        type: \"danger\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert(null);\r\n      }, 5000);\r\n    }\r\n  };\r\n  const handleDialogClose = () => setIsOpen(false);\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [fetchPermissions, { loading, data, error }] =\r\n    useLazyQuery(getPermissions);\r\n\r\n  useEffect(() => {\r\n    fetchPermissions({\r\n      variables: {\r\n        first: pageInfo?.limit,\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchPermissions, pageInfo]);\r\n\r\n  const [deletPlan] = useMutation(DELETE_PERMISSION);\r\n  const [permission, setPermission] = useState([]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setPermission(data.getPermissions.permission);\r\n      setPageInfo(data.getPermissions.pageInfo);\r\n    }\r\n  }, [permission, data]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <>\r\n      {alert && Object.keys(alert).length > 0 && (\r\n        <Alert\r\n          variant=\"filled\"\r\n          severity={alert.type}\r\n          sx={{ justifyContent: \"center\", width: \"70%\", margin: \"0 auto\" }}\r\n        >\r\n          {alert.message}\r\n        </Alert>\r\n      )}\r\n      <Grid container direction=\"column\">\r\n        <Grid item sm container>\r\n          <Grid item flex={1}>\r\n            <Typography variant=\"h1\" color=\" #2D2F39\">\r\n              Permission management\r\n            </Typography>\r\n          </Grid>\r\n\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<AddIcon />}\r\n              title=\"Add New Permission\"\r\n              type={buttonType}\r\n              onClick={handleDialogOpen}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        {/* The Search and Filter ends here */}\r\n        {Permission.length > 0 ? (\r\n          <Grid item container>\r\n            <EnhancedTable\r\n              headCells={PermissionHeader}\r\n              rows={Permission}\r\n              paginationLabel=\"permission per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                changeTableLimit(fetchPermissions, { first: e });\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                handlePageChange(fetchPermissions, page, pageInfo, {});\r\n              }}\r\n            >\r\n              {permission\r\n                // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row._id, selectedRows);\r\n\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  const data = row.name.split(\":\")[0];\r\n                  const newPerm = row.description.split(\":\")[1];\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row._id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              row.id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                      >\r\n                        <Grid\r\n                          container\r\n                          rowSpacing={2}\r\n                          style={{\r\n                            maxWidth: \"25rem\",\r\n                            display: \"inline-flex\",\r\n                            justifyContent: \"left\",\r\n                            alignItems: \"center\",\r\n                          }}\r\n                        >\r\n                          <Grid item xs={6}>\r\n                            <Chip label={data} className={classes.badge} />\r\n                          </Grid>\r\n                        </Grid>\r\n                      </TableCell>\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                      >\r\n                        <Grid\r\n                          container\r\n                          rowSpacing={2}\r\n                          style={{\r\n                            maxWidth: \"25rem\",\r\n                            display: \"inline-flex\",\r\n                            justifyContent: \"left\",\r\n                            alignItems: \"center\",\r\n                          }}\r\n                        >\r\n                          <Grid item xs={6}>\r\n                            <Chip label={newPerm} className={classes.badge} />\r\n                          </Grid>\r\n                        </Grid>\r\n                      </TableCell>\r\n\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"left\",\r\n                            justifyContent: \"space-around\",\r\n                          }}\r\n                        >\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            disableRipple\r\n                            onClick={() => handleEditOpenDialog(row._id)}\r\n                            className={`${classes.tableBtn} ${classes.greenBtn}`}\r\n                            endIcon={<EditIcon color=\"success\" />}\r\n                          >\r\n                            Edit\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            disableRipple\r\n                            onClick={() => handleDeleteOpenDialog(row._id)}\r\n                            className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                            to=\"/view\"\r\n                            endIcon={<DeleteIcon color=\"error\" />}\r\n                          >\r\n                            Delete\r\n                          </Button>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={PermissionHeader}\r\n            paginationLabel=\"Permission  per page\"\r\n          />\r\n        )}\r\n      </Grid>\r\n\r\n      <Modals\r\n        isOpen={isOpen}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        handleClose={handleDialogClose}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={validationSchema1}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\">\r\n                  <Grid item container spacing={2}>\r\n                    <Grid item xs={6} marginBottom={4}>\r\n                      <FormikControl\r\n                        control=\"select\"\r\n                        options={referralOptions}\r\n                        name=\"name\"\r\n                        label=\"Name\"\r\n                        placeholder=\"Enter Plan Name\"\r\n                      />\r\n                    </Grid>\r\n                    {/* second grid */}\r\n                    <Grid item xs={6}>\r\n                      <FormikControl\r\n                        control=\"select\"\r\n                        options={referralOptions}\r\n                        name=\"date\"\r\n                        label=\"Date\"\r\n                        placeholder=\"Choose Date\"\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid item container spacing={2}>\r\n                    <FormikControl\r\n                      control=\"select\"\r\n                      options={referralOptions}\r\n                      name=\"category\"\r\n                      label=\"Category\"\r\n                      placeholder=\"Save Category\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item container xs={12} marginTop={20}>\r\n                  <CustomButton\r\n                    title=\"Apply Filter\"\r\n                    width=\"100%\"\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                    type={buttonType}\r\n                  />\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      {/* // modal */}\r\n\r\n      <Modals\r\n        isOpen={isOpen}\r\n        title=\"Add new permission\"\r\n        handleClose={handleDialogClose}\r\n      >\r\n        <PermissionModal\r\n          handleDialogClose={handleDialogClose}\r\n          type=\"add\"\r\n          options={checkbox}\r\n          initialValues={initialValues}\r\n          validationSchema={validationSchema}\r\n          setAlert={setAlert}\r\n        />\r\n      </Modals>\r\n\r\n      {/* edit modala */}\r\n      <Modals\r\n        isOpen={isEdit}\r\n        title=\"Edit permission\"\r\n        handleClose={handleEditCloseDialog}\r\n      >\r\n        <PermissionModal\r\n          handleDialogClose={handleEditCloseDialog}\r\n          type=\"edit\"\r\n          options={checkbox}\r\n          singlePermission={singlePermission}\r\n          editId={editId}\r\n          validationSchema={validationSchema}\r\n          setAlert={setAlert}\r\n          editDetails={editDetails}\r\n          setSinglePermission={setSinglePermission}\r\n        />\r\n      </Modals>\r\n      {/* delete modal */}\r\n      <DeleteOrDisable\r\n        open={deleteModal}\r\n        setOpen={setdeleteModal}\r\n        title=\"Delete Permission\"\r\n        confirmationMsg=\"delete permission\"\r\n        btnValue=\"Delete\"\r\n        onConfirm={onConfirm}\r\n      />\r\n    </>\r\n  );\r\n};\r\nexport default Permission;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\PatientProfile.js",["885","886","887","888"],"import React, { useState, useEffect } from \"react\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport {\r\n  CustomButton,\r\n  Loader,\r\n  DisplayProfile,\r\n  ProfileCard,\r\n} from \"components/Utilities\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport PersonRemoveIcon from \"@mui/icons-material/PersonRemove\";\r\nimport { DeleteOrDisable } from \"components/modals\";\r\nimport { useParams, useHistory } from \"react-router-dom\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { deleteProfile } from \"components/graphQL/Mutation\";\r\nimport {\r\n  getPatients,\r\n  getProfile,\r\n  verifiedEmail,\r\n} from \"components/graphQL/useQuery\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridsWrapper: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    padding: \"1rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.3rem !important\",\r\n      //   height: \"2.7rem\",\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n      borderRadius: \"1.5rem\",\r\n    },\r\n  },\r\n\r\n  cardGrid: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    padding: \"4rem 5rem\",\r\n    height: \"16.1rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\r\n  },\r\n\r\n  linkIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      fontSize: \"1.25rem\",\r\n      color: theme.palette.common.green,\r\n      marginLeft: \"1.2rem\",\r\n    },\r\n  },\r\n  link: {\r\n    textDecoration: \"none\",\r\n    color: theme.palette.common.green,\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  buttonsGridWrapper: {\r\n    height: \"16.1rem\",\r\n  },\r\n}));\r\n\r\nconst PatientProfile = () => {\r\n  const { patientId } = useParams();\r\n  const doci = localStorage.getItem(\"userDociId\");\r\n  const { loading, data, error } = useQuery(getProfile, {\r\n    variables: {\r\n      profileId: patientId,\r\n    },\r\n  });\r\n  const { data: emailStatus, loading: emailLoading } = useQuery(verifiedEmail, {\r\n    variables: {\r\n      dociId: doci,\r\n    },\r\n  });\r\n\r\n  const [disableUser] = useMutation(deleteProfile);\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [patientProfile, setPatientProfile] = useState(\"\");\r\n  const [emailStat, setEmailStat] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (emailStatus) {\r\n      setEmailStat(emailStatus.accounts.data[0].isEmailVerified);\r\n    }\r\n  }, [emailStatus]);\r\n  useEffect(() => {\r\n    if (data) {\r\n      setPatientProfile(data.profile);\r\n    }\r\n  }, [data, patientId]);\r\n\r\n  const history = useHistory();\r\n  const onConfirm = async () => {\r\n    try {\r\n      await disableUser({\r\n        variables: { id: patientId },\r\n        refetchQueries: [{ query: getPatients }],\r\n      });\r\n      history.push(\"/patients\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  const [openDisablePatient, setOpenDisablePatient] = useState(false);\r\n\r\n  const trasparentButton = {\r\n    background: \"transparent\",\r\n    hover: \"#fafafa\",\r\n    active: \"#f4f4f4\",\r\n  };\r\n\r\n  if (loading || emailLoading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  const {\r\n    firstName,\r\n    lastName,\r\n    dociId,\r\n    status,\r\n    gender,\r\n    image,\r\n    createdAt,\r\n    provider,\r\n    phoneNumber,\r\n    email,\r\n  } = patientProfile;\r\n  return (\r\n    <Grid container direction=\"column\" gap={4}>\r\n      <Grid item>\r\n        <DisplayProfile\r\n          fullName={`${firstName} ${lastName}`}\r\n          displayPhoto={image ? image : displayPhoto}\r\n          medicalTitle=\"User ID\"\r\n          statusId={dociId?.split(\"-\")[1]}\r\n          status={status ? status : \"No Value\"}\r\n          chatPath={`/patients/${patientId}/profile/chat`}\r\n        />\r\n      </Grid>\r\n      {/* <Grid item container> */}\r\n      <Grid item container spacing={4} justifyContent=\"space-between\">\r\n        <Grid item container md={6} sm={6} xs={12}>\r\n          <ProfileCard text=\"Gender\" value={gender} />\r\n        </Grid>\r\n        <Grid item container md={6} sm={6} xs={12}>\r\n          <ProfileCard text=\"Created At\" value={dateMoment(createdAt)} />\r\n        </Grid>\r\n        <Grid item container md={6} sm={6} xs={12}>\r\n          <ProfileCard\r\n            text=\"Provider\"\r\n            value={provider ? provider : \"No Provider\"}\r\n          />\r\n        </Grid>\r\n        <Grid item container md={6} sm={6} xs={12}>\r\n          <ProfileCard\r\n            text=\"Verified\"\r\n            value={emailStat == \"false\" ? \"Not Verified\" : \"Verified\"}\r\n          />\r\n        </Grid>\r\n        <Grid item container md={6} sm={6} xs={12} mx=\"auto\">\r\n          <ProfileCard\r\n            text=\"Email Address\"\r\n            value={\r\n              email ? (\r\n                <a href={`mailto:${email}`} className={classes.link}>\r\n                  {email}\r\n                </a>\r\n              ) : (\r\n                \"No Email Provided\"\r\n              )\r\n            }\r\n          />\r\n        </Grid>\r\n        <Grid item container md={6} sm={6} xs={12}>\r\n          <ProfileCard\r\n            text=\"Phone Number\"\r\n            value={\r\n              phoneNumber ? (\r\n                <a href={`tel:+234${phoneNumber}`} className={classes.link}>\r\n                  {phoneNumber}\r\n                </a>\r\n              ) : (\r\n                \"No Phone Number\"\r\n              )\r\n            }\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid\r\n        item\r\n        container\r\n        justifyContent=\"center\"\r\n        alignItems=\"center\"\r\n        className={`${classes.gridsWrapper} ${classes.buttonsGridWrapper}`}\r\n      >\r\n        <Grid item>\r\n          <CustomButton\r\n            endIcon={<PersonRemoveIcon />}\r\n            title=\"Disable Patient\"\r\n            type={trasparentButton}\r\n            textColor={theme.palette.common.red}\r\n            onClick={() => setOpenDisablePatient(true)}\r\n          />\r\n        </Grid>\r\n\r\n        <DeleteOrDisable\r\n          open={openDisablePatient}\r\n          setOpen={setOpenDisablePatient}\r\n          title=\"Delete Partner\"\r\n          btnValue=\"disable\"\r\n          confirmationMsg=\"disable Patient\"\r\n          onConfirm={onConfirm}\r\n        />\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default PatientProfile;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\PatientAppointment.js",["889","890","891","892","893","894","895","896","897","898","899","900"],"import React, { useState, useEffect } from \"react\";\r\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\r\nimport {\r\n  CustomButton,\r\n  /* FilterList, */ Modals,\r\n  Loader,\r\n} from \"components/Utilities\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport {\r\n  Grid,\r\n  Alert,\r\n  Typography,\r\n  TableRow,\r\n  TableCell,\r\n  Checkbox,\r\n  Button,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport { deleteAppointment } from \"components/graphQL/Mutation\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport { getAppoint, getDOCAppoint } from \"components/graphQL/useQuery\";\r\nimport { DeleteOrDisable } from \"components/modals\";\r\nimport { consultationsHeadCells2 } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport AssignmentIcon from \"@mui/icons-material/Assignment\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { timeConverter, timeMoment } from \"components/Utilities/Time\";\r\nimport * as Yup from \"yup\";\r\nimport { updateAppointment } from \"components/graphQL/Mutation\";\r\nimport {\r\n  changeTableLimit,\r\n  fetchMoreData,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableCell: {\r\n    \"&.css-1jilxo7-MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n  btn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n\r\n  tableBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      height: \"3rem\",\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"2rem\",\r\n      boxShadow: \"none\",\r\n\r\n      \"&:hover\": {\r\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.5rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  redBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightRed,\r\n      color: theme.palette.common.red,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.error.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n\r\n  greenBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.success.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\n/* const filterOptions = [\r\n  { id: 0, value: \"Name\" },\r\n  { id: 1, value: \"Date\" },\r\n  { id: 2, value: \"Description\" },\r\n]; */\r\n\r\nconst PatientAppointment = () => {\r\n  const [updateAppoint] = useMutation(updateAppointment);\r\n  const [deleteAppointments] = useMutation(deleteAppointment);\r\n  const [pageInfo, setPageInfo] = useState([]);\r\n  const [alert, setAlert] = useState(null);\r\n  const [editId, setEditid] = useState(null);\r\n  const [doctorId, setDoctorId] = useState(null);\r\n  const handleDelete = (id) => {\r\n    setId(id);\r\n    setdeleteModal(true);\r\n  };\r\n\r\n  const handleSchedule = (id, doctor) => {\r\n    setIsPatients(true);\r\n    setEditid(id);\r\n    setDoctorId(doctor);\r\n  };\r\n  const onConfirm = async () => {\r\n    try {\r\n      await deleteAppointments({\r\n        variables: { id },\r\n        refetchQueries: [\r\n          {\r\n            query: getAppoint,\r\n            variables: {\r\n              id: patientId,\r\n              orderBy: \"-createdAt\",\r\n            },\r\n          },\r\n        ],\r\n      });\r\n      setAlert({\r\n        message: \"appointment deleted successfully\",\r\n        type: \"success\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert(null);\r\n      }, 5000);\r\n    } catch (error) {\r\n      setAlert({\r\n        message: \"appointment  not successfully deleted\",\r\n        type: \"danger\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert(null);\r\n      }, 5000);\r\n      console.log(error);\r\n    }\r\n  };\r\n  const [deleteModal, setdeleteModal] = useState(false);\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [isPatient, setIsPatient] = useState(false);\r\n  const [isPatients, setIsPatients] = useState(false);\r\n  const [id, setId] = useState(null);\r\n  /* const handlePatientOpen = () => setIsPatient(true); */\r\n  const handlePatientClose = () => setIsPatient(false);\r\n  const handlePatientCloses = () => setIsPatients(false);\r\n  const { patientId } = useParams();\r\n  const [patientAppointment, setPatientAppointment] = useState([]);\r\n  const initialValues = {\r\n    status: \"\",\r\n    gender: \"\",\r\n    date: \"\",\r\n    plan: \"\",\r\n  };\r\n  const initialValues1 = {\r\n    date: \"\",\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    date: Yup.string(\"Enter your affliate\").required(\"Date is required\"),\r\n    plan: Yup.string(\"Select your plan\").required(\"Plan is required\"),\r\n    gender: Yup.string(\"Select your gender\").required(\"Gender is required\"),\r\n    status: Yup.string(\"Select your status\").required(\"Status is required\"),\r\n  });\r\n  const validationSchema1 = Yup.object({\r\n    date: Yup.string(\"select date and time \").required(\r\n      \"Date  and time is required\"\r\n    ),\r\n  });\r\n  const onSubmit1 = async (values) => {\r\n    const { date } = values;\r\n    const timeValue = timeMoment(date);\r\n    const dateValue = timeConverter(date);\r\n    await updateAppoint({\r\n      variables: {\r\n        id: editId,\r\n        date: dateValue,\r\n        time: timeValue,\r\n        doctor: doctorId,\r\n      },\r\n      refetchQueries: [\r\n        {\r\n          query: getAppoint,\r\n          variables: {\r\n            id: patientId,\r\n            orderBy: \"-createdAt\",\r\n          },\r\n        },\r\n        {\r\n          query: getDOCAppoint,\r\n          variables: {\r\n            id: doctorId,\r\n            orderBy: \"-createdAt\",\r\n          },\r\n        },\r\n      ],\r\n    });\r\n    handlePatientCloses();\r\n  };\r\n  const onSubmit = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const [getPatientsAppointment, { loading, data, error }] =\r\n    useLazyQuery(getAppoint);\r\n\r\n  useEffect(() => {\r\n    getPatientsAppointment({\r\n      variables: {\r\n        id: patientId,\r\n        orderBy: \"-createdAt\",\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [getPatientsAppointment, patientId]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setPatientAppointment(data.getAppointments.data);\r\n      setPageInfo(data.getAppointments.pageInfo);\r\n    }\r\n  }, [data, patientId]);\r\n\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const genderType = [\r\n    { key: \"Male\", value: \"Male\" },\r\n    { key: \"Female\", value: \"Female\" },\r\n    { key: \"Prefer not to say\", value: \"Prefer not to say\" },\r\n  ];\r\n  const plans = [\r\n    { key: \"Plan 1\", value: \"Plan 1\" },\r\n    { key: \"Plan 2\", value: \"Plan 2\" },\r\n    { key: \"Plan 3\", value: \"Plan 3\" },\r\n    { key: \"Plan 4\", value: \"Plan 4\" },\r\n  ];\r\n  const plans1 = [\r\n    { key: \"Plan 1\", value: \"Plan 1\" },\r\n    { key: \"Plan 2\", value: \"Plan 2\" },\r\n    { key: \"Plan 3\", value: \"Plan 3\" },\r\n    { key: \"Plan 4\", value: \"Plan 4\" },\r\n  ];\r\n  const statusType = [\r\n    { key: \"Active\", value: \"Active\" },\r\n    { key: \"Blocked\", value: \"Blocked\" },\r\n  ];\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <>\r\n      {alert && Object.keys(alert).length > 0 && (\r\n        <Alert\r\n          variant=\"filled\"\r\n          severity={alert.type}\r\n          sx={{ justifyContent: \"center\", width: \"70%\", margin: \"0 auto\" }}\r\n        >\r\n          {alert.message}\r\n        </Alert>\r\n      )}\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        height=\"100%\"\r\n      >\r\n        <>\r\n          <Grid\r\n            item\r\n            container\r\n            flexWrap=\"nowrap\"\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item flex={1}>\r\n              <Typography variant=\"h2\">Appointments</Typography>\r\n            </Grid>\r\n            {/* <Grid item>\r\n              <FilterList\r\n                onClick={handlePatientOpen}\r\n                options={filterOptions}\r\n                title=\"Filter\"\r\n              />\r\n            </Grid> */}\r\n          </Grid>\r\n          {patientAppointment.length > 0 ? (\r\n            <Grid item container height=\"100%\" direction=\"column\">\r\n              <EnhancedTable\r\n                headCells={consultationsHeadCells2}\r\n                rows={patientAppointment}\r\n                paginationLabel=\"Patients per page\"\r\n                hasCheckbox={true}\r\n                changeLimit={async (e) => {\r\n                  await changeTableLimit(getPatientsAppointment, { first: e });\r\n                }}\r\n                dataPageInfo={pageInfo}\r\n                handlePagination={async (page) => {\r\n                  await handlePageChange(\r\n                    getPatientsAppointment,\r\n                    page,\r\n                    pageInfo\r\n                  );\r\n                }}\r\n              >\r\n                {patientAppointment\r\n                  // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                  .map((row, index) => {\r\n                    const isItemSelected = isSelected(row._id, selectedRows);\r\n                    const labelId = `enhanced-table-checkbox-${index}`;\r\n                    return (\r\n                      <TableRow\r\n                        hover\r\n                        role=\"checkbox\"\r\n                        aria-checked={isItemSelected}\r\n                        tabIndex={-1}\r\n                        key={row._id}\r\n                        selected={isItemSelected}\r\n                      >\r\n                        <TableCell padding=\"checkbox\">\r\n                          <Checkbox\r\n                            onClick={() =>\r\n                              handleSelectedRows(\r\n                                row.id,\r\n                                selectedRows,\r\n                                setSelectedRows\r\n                              )\r\n                            }\r\n                            color=\"primary\"\r\n                            checked={isItemSelected}\r\n                            inputProps={{\r\n                              \"aria-labelledby\": labelId,\r\n                            }}\r\n                          />\r\n                        </TableCell>\r\n                        <TableCell\r\n                          align=\"left\"\r\n                          className={classes.tableCell}\r\n                          style={{ maxWidth: \"20rem\" }}\r\n                        >\r\n                          <div\r\n                            style={{\r\n                              height: \"100%\",\r\n                              display: \"flex\",\r\n                              alignItems: \"center\",\r\n                            }}\r\n                          >\r\n                            <span style={{ marginRight: \"1rem\" }}>\r\n                              <Avatar\r\n                                alt={`Display Photo of ${row.doctorData.firstName}`}\r\n                                src={\r\n                                  row.doctorData.picture\r\n                                    ? row.doctorData.picture\r\n                                    : displayPhoto\r\n                                }\r\n                                sx={{ width: 24, height: 24 }}\r\n                              />\r\n                            </span>\r\n                            <span style={{ fontSize: \"1.25rem\" }}>\r\n                              {`${row.doctorData.firstName} \r\n                             ${row.doctorData.lastName}`}\r\n                            </span>\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" className={classes.tableCell}>\r\n                          {row.date}\r\n                        </TableCell>\r\n                        <TableCell\r\n                          align=\"left\"\r\n                          className={classes.tableCell}\r\n                          style={{\r\n                            color: theme.palette.common.grey,\r\n                            maxWidth: \"20rem\",\r\n                          }}\r\n                        >\r\n                          {/* {hours(}row.time) */} {row.time}\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" className={classes.tableCell}>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            disableRipple\r\n                            className={`${classes.tableBtn} ${classes.greenBtn}`}\r\n                            endIcon={<AssignmentIcon color=\"success\" />}\r\n                            onClick={() => handleSchedule(row._id, row.doctor)}\r\n                          >\r\n                            Reschedule\r\n                          </Button>\r\n                        </TableCell>\r\n                        <TableCell align=\"left\" className={classes.tableCell}>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            disableRipple\r\n                            onClick={() => handleDelete(row._id)}\r\n                            className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                            endIcon={<DeleteIcon color=\"error\" />}\r\n                          >\r\n                            Cancel\r\n                          </Button>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={consultationsHeadCells2}\r\n              paginationLabel=\"Appointments per page\"\r\n            />\r\n          )}\r\n        </>\r\n      </Grid>\r\n\r\n      <Modals\r\n        isOpen={isPatients}\r\n        title=\"Reschedule Appointment\"\r\n        rowSpacing={5}\r\n        height=\"auto\"\r\n        handleClose={handlePatientCloses}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={validationSchema1}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid, setFieldValue }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={2}>\r\n                  <Grid item container>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item md>\r\n                        <FormikControl\r\n                          control=\"time\"\r\n                          name=\"date\"\r\n                          label=\"Date\"\r\n                          placeholder=\"Choose Date and Time\"\r\n                          setFieldValue={setFieldValue}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    container\r\n                    alignItems=\"flex-end\"\r\n                    marginTop={5}\r\n                    xs={12}\r\n                  >\r\n                    <CustomButton\r\n                      title=\"Reschedule Appointment\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      <Modals\r\n        isOpen={isPatient}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        height=\"auto\"\r\n        handleClose={handlePatientClose}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={onSubmit}\r\n          validationSchema={validationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={2}>\r\n                  <Grid item container>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item md>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={plans}\r\n                          name=\"date\"\r\n                          label=\"Date\"\r\n                          placeholder=\"Choose Date\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={plans1}\r\n                          name=\"plan\"\r\n                          label=\"Plan\"\r\n                          placeholder=\"Select Plan\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container gap={3}>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item md>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={genderType}\r\n                          name=\"gender\"\r\n                          label=\"Gender\"\r\n                          placeholder=\"Choose Gender\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item md>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={statusType}\r\n                          name=\"status\"\r\n                          label=\"Status\"\r\n                          placeholder=\"Select status\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    container\r\n                    alignItems=\"flex-end\"\r\n                    marginTop={5}\r\n                    xs={12}\r\n                  >\r\n                    <CustomButton\r\n                      title=\" Apply Filter\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n      {/* delete modal */}\r\n      <DeleteOrDisable\r\n        open={deleteModal}\r\n        onConfirm={() => console.log(\"confrimed\")}\r\n        setOpen={setdeleteModal}\r\n        title=\"Cancel Consultation\"\r\n        confirmationMsg=\"cancel appointment\"\r\n        btnValue=\"cancel\"\r\n      />\r\n\r\n      <DeleteOrDisable\r\n        open={deleteModal}\r\n        setOpen={setdeleteModal}\r\n        title=\"Delete Appointment\"\r\n        onConfirm={onConfirm}\r\n        confirmationMsg=\"delete appointment\"\r\n        btnValue=\"Delete\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PatientAppointment;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Patients.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Chat.js",["901","902","903","904","905","906","907"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { Grid, Typography, Divider } from \"@mui/material\";\r\nimport { Loader, CustomButton, PreviousButton } from \"components/Utilities\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { CREATE_MESSAGE } from \"components/graphQL/Mutation\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  showSuccessMsg,\r\n  handleError,\r\n} from \"../../helpers/filterHelperFunctions\";\r\nimport { getMessage, getProfile } from \"components/graphQL/useQuery\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridWrapper: {\r\n    \"&.MuiGrid-item\": {\r\n      borderRadius: \"1rem\",\r\n      background: \"#fff\",\r\n      padding: \"2rem 4rem\",\r\n      maxWidth: \"60rem !important\",\r\n      boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.1)\",\r\n    },\r\n  },\r\n  inputGrid: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n  },\r\n  heading: {\r\n    \"&.MuiTypography-root\": {\r\n      color: theme.palette.common.grey,\r\n      //   fontSize: \"1rem\"\r\n    },\r\n  },\r\n  formInput: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    fontSize: \"1.5rem\",\r\n    padding: \".5rem 1rem\",\r\n    border: \"none\",\r\n    background: \"transparent\",\r\n    color: theme.palette.common.grey,\r\n\r\n    \"&:focus\": {\r\n      outline: \"none\",\r\n    },\r\n  },\r\n  textArea: {\r\n    border: \"1px solid rgba(0, 0, 0, 0.03)\",\r\n    resize: \"none\",\r\n    borderRadius: \"0.5rem\",\r\n  },\r\n  divider: {\r\n    \"&.MuiDivider-root\": {\r\n      borderColor: \"rgba(0, 0, 0, 0.03)\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Chat = () => {\r\n  const { patientId } = useParams();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  let history = useHistory();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [createNewMessage] = useMutation(CREATE_MESSAGE, {\r\n    refetchQueries: [{ query: getMessage }],\r\n  });\r\n  const { data, loading } = useQuery(getProfile, {\r\n    variables: { profileId: patientId },\r\n  });\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n  const [profile, setprofile] = useState(\"\");\r\n  const { firstName, lastName } = profile;\r\n\r\n  const initialValues = {\r\n    subject: \"\",\r\n    recipient: `${firstName} ${lastName} ` || \"\",\r\n    textarea: \"\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setprofile(data.profile);\r\n    }\r\n  }, [data]);\r\n\r\n  const validationSchema = Yup.object({\r\n    subject: Yup.string(\"Enter your subject\")\r\n      .trim()\r\n      .required(\"Subject is required\"),\r\n    textarea: Yup.string(\"Enter your message\")\r\n      .trim()\r\n      .required(\"Message is required\"),\r\n    recipient: Yup.string(\"Enter your recipient\")\r\n      .trim()\r\n      .required(\"recipients is required\"),\r\n  });\r\n  const onSubmit = async (values, onSubmitProps) => {\r\n    const id = localStorage.getItem(\"user_id\");\r\n    const { subject, textarea } = values;\r\n\r\n    try {\r\n      await createNewMessage({\r\n        variables: {\r\n          sender: id,\r\n          recipient: patientId,\r\n          subject,\r\n          body: textarea,\r\n        },\r\n      });\r\n      showSuccessMsg(enqueueSnackbar, Typography, \"Message sent\");\r\n    } catch (error) {\r\n      handleError(error, enqueueSnackbar);\r\n      console.log(error);\r\n    }\r\n    onSubmitProps.resetForm();\r\n    history.push(`/patients/${patientId}/profile`);\r\n    /* setSelectedScopedMenu(0); */\r\n  };\r\n\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validateOnBlur={false}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n      enableReinitialize\r\n    >\r\n      {({ isValid, isSubmitting, dirty }) => {\r\n        return (\r\n          <Form>\r\n            <Grid container direction=\"column\">\r\n              <Grid item style={{ marginBottom: \"3rem\" }}>\r\n                <PreviousButton path={`/patients/${patientId}/profile`} />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" alignItems=\"center\">\r\n                <Grid item>\r\n                  <Typography variant=\"h4\" style={{ marginBottom: \"3rem\" }}>\r\n                    Create New Message\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  container\r\n                  direction=\"column\"\r\n                  className={classes.gridWrapper}\r\n                >\r\n                  <Grid item>\r\n                    <Grid\r\n                      item\r\n                      container\r\n                      alignItems=\"center\"\r\n                      sx={{ gap: \"0!important\" }}\r\n                    >\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Recipient:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item className={classes.inputGrid}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          id=\"message\"\r\n                          name=\"recipient\"\r\n                          disabled\r\n                          variant=\"standard\"\r\n                          className={classes.formInput}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Subject:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item className={classes.inputGrid}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          id=\"subject\"\r\n                          name=\"subject\"\r\n                          variant=\"standard\"\r\n                          className={classes.formInput}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container direction=\"column\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Message:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item style={{ height: \"15rem\" }}>\r\n                        <FormikControl\r\n                          control=\"textarea\"\r\n                          id=\"textarea\"\r\n                          name=\"textarea\"\r\n                          variant=\"standard\"\r\n                          fLabel={true}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    {/* <Divider className={classes.divider} /> */}\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    style={{ alignSelf: \"flex-end\", marginTop: \"2rem\" }}\r\n                  >\r\n                    <CustomButton\r\n                      title=\"Send Message\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                      // endIcon={<ArrowForwardIosIcon style={{ fontSize: \"1.5rem\" }} />}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default Chat;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Partners.js",["908","909","910","911","912","913","914","915","916","917"],"import React, { useState, useEffect } from \"react\";\r\nimport { Formik, Form } from \"formik\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\r\nimport { useQuery, useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  Button,\r\n  Checkbox,\r\n  TableCell,\r\n  Avatar,\r\n  TableRow,\r\n  Grid,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { useStyles } from \"styles/partnersPageStyles\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { deleteItem } from \"helpers/filterHelperFunctions\";\r\nimport DeletePartner from \"components/modals/DeleteOrDisable\";\r\nimport { partnersHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport { addPartner, addPartnerCategory } from \"components/graphQL/Mutation\";\r\nimport {\r\n  getPartners,\r\n  getSingleProvider,\r\n  getProviders,\r\n  DELETE_PARTNER,\r\n} from \"components/graphQL/useQuery\";\r\nimport { CustomButton, Loader, Modals } from \"components/Utilities\";\r\nimport {\r\n  addNewPartnerValidationSchema,\r\n  addPartnerValidationSchema,\r\n  filterPartnersValidationSchema,\r\n} from \"helpers/validationSchemas\";\r\n\r\nconst Partners = () => {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const [setCategoryDatas] = useState([]);\r\n  const { setSelectedRows } = useActions();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const [partner, setPartners] = useState([]);\r\n  const [dropDown, setDropDown] = useState([]);\r\n  const [addPartners] = useMutation(addPartner);\r\n  const categoryData = useQuery(getSingleProvider);\r\n  const [delete_partner] = useLazyQuery(DELETE_PARTNER);\r\n  /*   const [searchPartner, setSearchPartner] = useState(\"\"); */\r\n  const [isDeleting, setIsDeleting] = React.useState({});\r\n  const [addPartnerCat] = useMutation(addPartnerCategory);\r\n  const { data: da, loading: load } = useQuery(getProviders);\r\n  const [openAddPartner, setOpenAddPartner] = useState(false);\r\n  const [openFilterPartner, setOpenFilterPartner] = useState(false);\r\n  const [openDeletePartner, setOpenDeletePartner] = useState(false);\r\n  const [partnerToDelete, setPartnerToDelete] = React.useState(null);\r\n  const { selectedRows, page } = useSelector((state) => state.tables);\r\n  const [openAddPartnerCategory, setAddPartnerCategory] = useState(false);\r\n  const { loading, error, data, refetch } = useQuery(getPartners, {\r\n    notifyOnNetworkStatusChange: true,\r\n  });\r\n\r\n  const specializations = [\r\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\r\n    { key: \"Hospital\", value: \"Hospital\" },\r\n  ];\r\n  const specializations5 = [\r\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\r\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\r\n    { key: \"Hospital\", value: \"Hospital\" },\r\n  ];\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const darkButtonType = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const initialValues = {\r\n    Name: \"\",\r\n    date: \"\",\r\n    category: \"\",\r\n  };\r\n\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    email: \"\",\r\n    specialization: \"\",\r\n    image: null,\r\n    provider: \"\",\r\n  };\r\n\r\n  const initialValues2 = {\r\n    category: \"\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (da) {\r\n      const datas = da.getProviders.provider;\r\n      setDropDown(\r\n        datas &&\r\n          datas.map((i) => {\r\n            return { key: i.name, value: i._id };\r\n          })\r\n      );\r\n    }\r\n  }, [da]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setPartners(data.getPartners.data);\r\n    }\r\n  }, [data, categoryData, setCategoryDatas]);\r\n\r\n  React.useEffect(() => {\r\n    partner.map((p) => {\r\n      const newIsDeleting = isDeleting;\r\n      setIsDeleting({ [p._id]: false, ...newIsDeleting });\r\n      return null;\r\n    });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [partner]);\r\n\r\n  const onSubmit = (values) => {\r\n    console.log(values);\r\n  };\r\n\r\n  const onSubmit2 = async (values, onSubmitProps) => {\r\n    const { category } = values;\r\n\r\n    await addPartnerCat({\r\n      variables: {\r\n        name: category,\r\n      },\r\n    });\r\n    setAddPartnerCategory(false);\r\n    onSubmitProps.resetForm();\r\n  };\r\n\r\n  const onSubmit1 = async (values, onSubmitProps) => {\r\n    let { name, email, specialization, provider, image } = values;\r\n    name = name.trim();\r\n\r\n    try {\r\n      await addPartners({\r\n        variables: {\r\n          name,\r\n          email,\r\n          category: specialization,\r\n          logoImageUrl: image,\r\n          providerId: provider,\r\n        },\r\n        refetchQueries: [{ query: getPartners }],\r\n      });\r\n      enqueueSnackbar(\"Partner added successfully\", {\r\n        variant: \"success\",\r\n      });\r\n      onSubmitProps.resetForm();\r\n      setOpenAddPartner(false);\r\n    } catch (err) {\r\n      console.log(err, \"err\");\r\n      enqueueSnackbar(\"Email is already taken\", {\r\n        variant: \"error\",\r\n      });\r\n    }\r\n  };\r\n\r\n  /* const onChange = async (e) => {\r\n    setSearchPartner(e);\r\n    if (e == \"\") {\r\n      refetch();\r\n    } else refetch({ dociId: `DOCI-${e.toUpperCase()}` });\r\n  }; */\r\n\r\n  if (error || categoryData.error)\r\n    return <NoData error={error || categoryData.error} />;\r\n  return (\r\n    <Grid\r\n      container\r\n      direction=\"column\"\r\n      gap={{ sm: 4, xs: 2 }}\r\n      flexWrap=\"nowrap\"\r\n      height=\"100%\"\r\n    >\r\n      <Grid\r\n        item\r\n        container\r\n        gap={2}\r\n        direction={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n      >\r\n        {/* <Grid item flex={{ sm: 2, xs: 2, md: 2 }}>\r\n          <Search\r\n            value={searchPartner}\r\n            onChange={(e) => onChange(e.target.value)}\r\n            placeholder=\"Type to search Partner...\"\r\n            height=\"5rem\"\r\n          />\r\n        </Grid> */}\r\n        <Grid\r\n          item\r\n          container\r\n          justifyContent=\"space-between\"\r\n          flex={{ sm: 1, xs: 1, md: 1 }}\r\n        >\r\n          {/* <Grid item>\r\n            <FilterList\r\n              title=\"Filter\"\r\n              onClick={() => setOpenFilterPartner(true)}\r\n            />\r\n          </Grid> */}\r\n\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<PersonAddAlt1Icon />}\r\n              title=\"Add  Partner\"\r\n              type={darkButtonType}\r\n              onClick={() => setOpenAddPartner(true)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      {load || loading ? (\r\n        <Loader />\r\n      ) : partner.length > 0 ? (\r\n        <Grid item container height=\"100%\" direction=\"column\">\r\n          <EnhancedTable\r\n            headCells={partnersHeadCells}\r\n            rows={partner}\r\n            page={page}\r\n            type=\"editRole\"\r\n            paginationLabel=\"Partner per page\"\r\n            hasCheckbox={true}\r\n          >\r\n            {partner\r\n              // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((row, index) => {\r\n                const isItemSelected = isSelected(row.id, selectedRows);\r\n\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={row._id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(\r\n                            row.id,\r\n                            selectedRows,\r\n                            setSelectedRows\r\n                          )\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ maxWidth: \"20rem\" }}\r\n                    >\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"left\",\r\n                        }}\r\n                      >\r\n                        <span style={{ marginRight: \"1rem\" }}>\r\n                          <Avatar\r\n                            alt={`Display Photo of ${row.name}`}\r\n                            src={row.logoImageUrl}\r\n                            sx={{ width: 24, height: 24 }}\r\n                          />\r\n                        </span>\r\n                        <span style={{ fontSize: \"1.25rem\" }}>{row.name}</span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{\r\n                        color: theme.palette.common.grey,\r\n                        maxWidth: \"20rem\",\r\n                      }}\r\n                    >\r\n                      {row.category}\r\n                    </TableCell>\r\n                    <TableCell align=\"center\" className={classes.tableCell}>\r\n                      {isDeleting[row._id] ? (\r\n                        <Loader />\r\n                      ) : (\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          disableRipple\r\n                          className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                          endIcon={<DeleteIcon color=\"error\" />}\r\n                          onClick={() => {\r\n                            setPartnerToDelete(row?._id || \"\");\r\n                            setOpenDeletePartner(true);\r\n                          }}\r\n                        >\r\n                          Delete partner\r\n                        </Button>\r\n                      )}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n          </EnhancedTable>\r\n        </Grid>\r\n      ) : (\r\n        <EmptyTable\r\n          headCells={partnersHeadCells}\r\n          paginationLabel=\"Doctors per page\"\r\n        />\r\n      )}\r\n      <Modals\r\n        isOpen={openFilterPartner}\r\n        title=\"Filter\"\r\n        rowSpacing={5}\r\n        width={{ sm: \"40vw\", xs: \"90vw\", md: \"40vw\" }}\r\n        handleClose={() => setOpenFilterPartner(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={onSubmit}\r\n          validateOnBlur={false}\r\n          validationSchema={filterPartnersValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={3}>\r\n                  <Grid item marginBottom={3}>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          name=\"Name\"\r\n                          label=\"Name\"\r\n                          placeholder=\"Select name\"\r\n                        />\r\n                      </Grid>\r\n                      <Grid item xs={6}>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializations}\r\n                          name=\"date\"\r\n                          label=\"Date\"\r\n                          placeholder=\"Choose Date\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  container\r\n                  spacing={2}\r\n                  style={{ marginBottom: \"10rem\" }}\r\n                >\r\n                  <Grid item xs={6}>\r\n                    <FormikControl\r\n                      control=\"select\"\r\n                      options={specializations}\r\n                      name=\"category\"\r\n                      label=\"Category\"\r\n                      placeholder=\"Select Category\"\r\n                    />\r\n                  </Grid>\r\n                  {/* Placeholder grid */}\r\n                  <Grid item md></Grid>\r\n                </Grid>\r\n                <Grid item container xs={12}>\r\n                  <CustomButton\r\n                    title=\"Apply Filter\"\r\n                    width=\"100%\"\r\n                    type={buttonType}\r\n                    isSubmitting={isSubmitting}\r\n                    disabled={!(dirty || isValid)}\r\n                  />\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      {/* ADD NEW PARTER MODAL */}\r\n      <Modals\r\n        isOpen={openAddPartner}\r\n        title=\"Add Partners\"\r\n        rowSpacing={5}\r\n        handleClose={() => setOpenAddPartner(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={addNewPartnerValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty, values, setFieldValue }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid container direction=\"column\" gap={4}>\r\n                  <Grid item container>\r\n                    <Grid item container direction=\"column\" gap={1}>\r\n                      <Grid item container>\r\n                        <Grid item container>\r\n                          <FormikControl\r\n                            control=\"input\"\r\n                            label=\"Name\"\r\n                            id=\"name\"\r\n                            name=\"name\"\r\n                            placeholder=\"Enter Partner name\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                      <Grid item container>\r\n                        <Grid item container>\r\n                          <FormikControl\r\n                            control=\"input\"\r\n                            label=\"Email\"\r\n                            id=\"name\"\r\n                            name=\"email\"\r\n                            placeholder=\"Enter Email\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n\r\n                      <Grid item container>\r\n                        <Grid item container>\r\n                          <FormikControl\r\n                            control=\"select\"\r\n                            options={\r\n                              [\r\n                                { key: \"Diagnostics\", value: \"diagnostics\" },\r\n                                { key: \"Pharmacy\", value: \"pharmacy\" },\r\n                                { key: \"Hospital\", value: \"hospital\" },\r\n                              ] || \"\"\r\n                            }\r\n                            name=\"specialization\"\r\n                            label=\"Category\"\r\n                            placeholder=\"Category\"\r\n                          />\r\n                        </Grid>\r\n                      </Grid>\r\n                      {values.specialization === \"hospital\" ? (\r\n                        <Grid item container>\r\n                          <Grid item container>\r\n                            <FormikControl\r\n                              control=\"select\"\r\n                              options={dropDown || \"\"}\r\n                              name=\"provider\"\r\n                              label=\"Provider\"\r\n                              id=\"provider\"\r\n                              placeholder=\"select Provider\"\r\n                            />\r\n                          </Grid>\r\n                        </Grid>\r\n                      ) : null}\r\n                      <Grid item container direction=\"column\" gap={2}>\r\n                        <Grid item container>\r\n                          <Grid container spacing={2}>\r\n                            <Grid item md>\r\n                              <FormikControl\r\n                                control=\"file\"\r\n                                name=\"image\"\r\n                                label=\"Company Logo\"\r\n                                setFieldValue={setFieldValue}\r\n                              />\r\n                            </Grid>\r\n                          </Grid>\r\n                        </Grid>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <CustomButton\r\n                      title=\"Add Partner\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n\r\n      {/* Add Partner Category */}\r\n      <Modals\r\n        isOpen={openAddPartnerCategory}\r\n        title=\"Add Partners Category\"\r\n        rowSpacing={5}\r\n        handleClose={() => setAddPartnerCategory(false)}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues2}\r\n          onSubmit={onSubmit2}\r\n          validationSchema={addPartnerValidationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, isValid, dirty }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid container direction=\"column\" gap={3}>\r\n                  <Grid item container>\r\n                    <Grid item container direction=\"column\" gap={1}>\r\n                      <Grid item container>\r\n                        <FormikControl\r\n                          control=\"select\"\r\n                          options={specializations5}\r\n                          name=\"category\"\r\n                          label=\"Category\"\r\n                          placeholder=\"Specialization\"\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <CustomButton\r\n                      title=\"Add Partner\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n      <DeletePartner\r\n        open={openDeletePartner}\r\n        setOpen={setOpenDeletePartner}\r\n        title=\"Delete Partner\"\r\n        btnValue=\"delete\"\r\n        onConfirm={() => {\r\n          deleteItem(\r\n            delete_partner,\r\n            partnerToDelete,\r\n            setPartnerToDelete,\r\n            refetch,\r\n            Typography,\r\n            enqueueSnackbar,\r\n            setIsDeleting,\r\n            isDeleting\r\n          );\r\n          setOpenDeletePartner(false);\r\n        }}\r\n        confirmationMsg=\"delete partner\"\r\n        onCancel={() => {\r\n          setPartnerToDelete(null);\r\n        }}\r\n      />\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Partners;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Messages.js",["918","919","920","921","922"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { debounce } from \"lodash\";\r\nimport { NoData, EnhancedTable, EmptyTable } from \"components/layouts\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { TableRow, TableCell } from \"@mui/material\";\r\nimport { Loader, CustomButton } from \"components/Utilities\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { dateMoment, timeMoment } from \"components/Utilities/Time\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { messagesHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { Avatar, Button, Checkbox, Grid } from \"@mui/material\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getMessage } from \"components/graphQL/useQuery\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"0.5rem\",\r\n      maxWidth: \"10rem\",\r\n      fontSize: \".85rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"0.85rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".2rem\",\r\n      },\r\n    },\r\n  },\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.25rem !important\",\r\n      height: \"2.7rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n  tableBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      height: \"3rem\",\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"2rem\",\r\n      boxShadow: \"none\",\r\n\r\n      \"&:hover\": {\r\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.5rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  redBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightRed,\r\n      color: theme.palette.common.red,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.error.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst Messages = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [pageInfo, setPageInfo] = useState({\r\n    page: 0,\r\n    totalPages: 1,\r\n    hasNextPage: false,\r\n    hasPrevPage: false,\r\n    limit: 10,\r\n    totalDocs: 0,\r\n  });\r\n  const greenButtonType = {\r\n    background: theme.palette.primary.main,\r\n    hover: theme.palette.primary.light,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n\r\n  /*   const [searchMessage, setSearchMessage] = useState(\"\"); */\r\n  const [message, setMessage] = useState([]);\r\n\r\n  const [fetchMessages, { loading, data, error }] = useLazyQuery(getMessage);\r\n\r\n  useEffect(() => {\r\n    fetchMessages({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchMessages, pageInfo]);\r\n\r\n  /*   const onChange = async (e) => {\r\n    setSearchMessage(e);\r\n    if (e === \"\") {\r\n      refetch();\r\n    } else refetch({ recipient: e });\r\n  }; */\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setMessage(data.getMessages.messages);\r\n      setPageInfo(data.getMessages.pageInfo);\r\n    }\r\n  }, [message, data]);\r\n\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  //eslint-disable-next-line\r\n  const debouncer = useCallback(debounce(fetchMessages, 3000), []);\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  else {\r\n    return (\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        height=\"100%\"\r\n      >\r\n        <Grid\r\n          item\r\n          gap={{ md: 4, sm: 4, xs: 2 }}\r\n          direction={{ sm: \"row\", xs: \"column\" }}\r\n          container\r\n          justifyContent=\"space-between\"\r\n        >\r\n          {/* <Grid item flex={1}>\r\n            <Search\r\n              value={searchMessage}\r\n              onChange={(e) => onChange(e.target.value)}\r\n              placeholder=\"Type to search Messages by recipient e.g HEALA-7NE6ELLO\r\n              \"\r\n              height=\"5rem\"\r\n            />\r\n          </Grid> */}\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<AddIcon />}\r\n              title=\"New Message\"\r\n              type={greenButtonType}\r\n              component={Link}\r\n              to=\"/messages/create-message\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        {message.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={messagesHeadCells}\r\n              rows={message}\r\n              paginationLabel=\"Message per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                changeTableLimit(fetchMessages, { first: e });\r\n              }}\r\n              fetchData={fetchMessages}\r\n              handlePagination={async (page) => {\r\n                handlePageChange(fetchMessages, page, pageInfo, {});\r\n              }}\r\n            >\r\n              {message\r\n                // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const { subject, createdAt, _id, recipientData } = row;\r\n                  const isItemSelected = isSelected(_id, selectedRows);\r\n\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={_id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              _id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"20rem\" }}\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"flex-start\",\r\n                          }}\r\n                        >\r\n                          <span style={{ marginRight: \"1rem\" }}>\r\n                            <Avatar\r\n                              alt={`Display Photo of  ${\r\n                                recipientData && recipientData.firstName\r\n                              }`}\r\n                              src={\r\n                                recipientData && recipientData.image\r\n                                  ? recipientData.image\r\n                                  : displayPhoto\r\n                              }\r\n                              sx={{ width: 24, height: 24 }}\r\n                            />\r\n                          </span>\r\n                          <span style={{ fontSize: \"1.25rem\" }}>\r\n                            {recipientData && recipientData.firstName\r\n                              ? `${recipientData.firstName} ${recipientData.lastName}`\r\n                              : \"No Value\"}\r\n                          </span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"15rem\" }}\r\n                      >\r\n                        {subject}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.grey }}\r\n                      >\r\n                        {dateMoment(createdAt)}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.grey }}\r\n                      >\r\n                        {timeMoment(createdAt)}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Button\r\n                          variant=\"contained\"\r\n                          className={classes.button}\r\n                          component={Link}\r\n                          to={`messages/${_id}`}\r\n                          endIcon={<ArrowForwardIosIcon />}\r\n                          /* onClick={() => setSelectedSubMenu(6)} */\r\n                        >\r\n                          View Message\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={messagesHeadCells}\r\n            paginationLabel=\"Messages  per page\"\r\n          />\r\n        )}\r\n      </Grid>\r\n    );\r\n  }\r\n};\r\n\r\nexport default Messages;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\MedicalRecords.js",["923","924","925","926","927","928","929","930","931","932","933"],"import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport { Loader, ProfileCard } from \"components/Utilities\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { calculateBMI } from \"components/Utilities/bMI\";\r\nimport {\r\n  getProfile,\r\n  findAllergies,\r\n  getLabResult,\r\n} from \"components/graphQL/useQuery\";\r\nimport { NoData } from \"components/layouts\";\r\n\r\nconst MedicalRecords = () => {\r\n  const { patientId } = useParams();\r\n  const [patientProfile, setPatientProfile] = useState(undefined);\r\n\r\n  const [patients, { loading, data, error }] = useLazyQuery(getProfile);\r\n  const [alergy, allergyResult] = useLazyQuery(findAllergies, {\r\n    variables: { id: patientId },\r\n  });\r\n  const [labResult, labResults] = useLazyQuery(getLabResult, {\r\n    variables: { id: patientId },\r\n  });\r\n  const [alergies, setAlergies] = useState([]);\r\n  const [lab, setLab] = useState([]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      try {\r\n        patients({ variables: { profileId: patientId } });\r\n        alergy();\r\n        labResult();\r\n        setAlergies(allergyResult.data.findAllergies.allergies);\r\n        setLab(labResults.data.getLabResults.lab);\r\n      } catch (err) {\r\n        console.error(err);\r\n      }\r\n    })();\r\n  }, [\r\n    alergy,\r\n    patients,\r\n    patientId,\r\n    labResult,\r\n    allergyResult.data,\r\n    labResults.data,\r\n  ]);\r\n\r\n  useEffect(() => {\r\n    if (data && data.profile) {\r\n      setPatientProfile(data.profile);\r\n    }\r\n  }, [data]);\r\n\r\n  if (loading || allergyResult.loading) return <Loader />;\r\n  if (error || allergyResult.error)\r\n    return <NoData error={allergyResult.error || error} />;\r\n  if (patientProfile) {\r\n    const value =\r\n      alergies.length > 0 &&\r\n      alergies?.map((alergy) => alergy.name).filter((i) => i !== undefined);\r\n\r\n    const labResult = lab?.map((alergy) => alergy);\r\n\r\n    return (\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        gap={{\r\n          md: 5,\r\n          sm: 4,\r\n          xs: 3,\r\n        }}\r\n        paddingBottom={{ md: 10, sm: 5, xs: 3 }}\r\n      >\r\n        <Grid item>\r\n          <Typography variant=\"h2\">Medical Records</Typography>\r\n        </Grid>\r\n        <Grid item container spacing={4} justifyContent=\"space-between\">\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"Height\"\r\n              value={\r\n                patientProfile.height ? patientProfile.height : \"No Height\"\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"Weight\"\r\n              value={\r\n                patientProfile.weight ? patientProfile.weight : \"No Weight\"\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"Blood Group\"\r\n              value={\r\n                patientProfile.bloodGroup\r\n                  ? patientProfile.bloodGroup\r\n                  : \"No Blood Group\"\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"GenoType\"\r\n              value={\r\n                patientProfile.genotype\r\n                  ? patientProfile.genotype\r\n                  : \"No Genotype\"\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"BMI\"\r\n              value={\r\n                patientProfile.height\r\n                  ? calculateBMI(\r\n                      patientProfile.height,\r\n                      patientProfile.weight\r\n                    ).toFixed(2)\r\n                  : \"No Value\"\r\n              }\r\n            />\r\n          </Grid>\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"Allergies\"\r\n              value={value.length > 0 ? value : \"No Allergy\"}\r\n            />\r\n          </Grid>\r\n          <Grid item container md={6} sm={6} xs={12}>\r\n            <ProfileCard\r\n              text=\"Lab Results\"\r\n              value={value.length > 0 ? labResult : \"No Lab Result\"}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    );\r\n  } else return <NoData />;\r\n};\r\n\r\nexport default MedicalRecords;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Management.js",["934","935","936","937","938","939","940","941","942","943","944","945"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Button,\r\n  TableRow,\r\n  TableCell,\r\n  Checkbox,\r\n  Chip,\r\n} from \"@mui/material\";\r\nimport {\r\n  Loader,\r\n  /* Search,  */ CustomButton,\r\n  Modals,\r\n} from \"components/Utilities\";\r\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { roleHeader } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport DeleteIcon from \"@mui/icons-material/Delete\";\r\nimport EditIcon from \"@mui/icons-material/Edit\";\r\nimport { DeleteOrDisable, RoleModal } from \"components/modals\";\r\nimport { useMutation, useLazyQuery } from \"@apollo/client\";\r\nimport { getRoles } from \"components/graphQL/useQuery\";\r\nimport { deleteRole } from \"components/graphQL/Mutation\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  changeTableLimit,\r\n  /* fetchMoreData, */ handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  searchGrid: {\r\n    \"&.MuiGrid-root\": {\r\n      flex: 1,\r\n      marginRight: \"5rem\",\r\n    },\r\n  },\r\n  \"&.makeStyles-tableHeaderCell-27.MuiTableCell-root\": {\r\n    background: \"red !important\",\r\n    textAlign: \"center\",\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      width: \"100%\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"15rem\",\r\n      fontSize: \"1.3rem\",\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n  tableBtn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      height: \"3rem\",\r\n      width: \"100% !important\",\r\n      fontSize: \"1.25rem\",\r\n      borderRadius: \"2rem\",\r\n      boxShadow: \"none\",\r\n\r\n      \"&:hover\": {\r\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n          color: \"#fff\",\r\n        },\r\n      },\r\n\r\n      \"&:active\": {\r\n        boxShadow: \"none\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.5rem\",\r\n      },\r\n    },\r\n  },\r\n  redBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightRed,\r\n      color: theme.palette.common.red,\r\n      width: \"100%\",\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.error.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n  greenBtn: {\r\n    \"&.MuiButton-root\": {\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n\r\n      \"&:hover\": {\r\n        background: theme.palette.success.light,\r\n        color: \"#fff\",\r\n      },\r\n    },\r\n  },\r\n  tableCell: {\r\n    \"&.css-1tykg82-MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n      textAlign: \"center !important\",\r\n      width: \"100%\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n    modal: {\r\n      background: \"red !important\",\r\n      \"& > * \": {\r\n        padding: \"2rem 1rem\",\r\n      },\r\n    },\r\n    \".css-11lq3yg-MuiGrid-root\": {\r\n      background: \"red\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Management = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [deleteRoles] = useMutation(deleteRole);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [deleteModal, setdeleteModal] = useState(false);\r\n  /* const [searchMail, setSearchMail] = useState(\"\"); */\r\n  // const [edit, setEdit] = useState(false);\r\n  const [id, setId] = useState(false);\r\n\r\n  const handleDialogOpen = () => {\r\n    setIsOpen(true);\r\n  };\r\n  const handleDialogClose = () => {\r\n    setIsOpen(false);\r\n  };\r\n  const handleDeleteOpenDialog = (id) => {\r\n    setdeleteModal(true);\r\n    setId(id);\r\n  };\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n\r\n  const onConfirm = async () => {\r\n    deleteRoles({ variables: { id }, refetchQueries: [{ query: getRoles }] });\r\n  };\r\n\r\n  const [rolesManagements, setRolesManagements] = useState([]);\r\n  const [fetchRoles, { loading, data, error /* refetch */ }] =\r\n    useLazyQuery(getRoles);\r\n\r\n  useEffect(() => {\r\n    fetchRoles({\r\n      variables: { first: pageInfo?.limit },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchRoles, pageInfo]);\r\n\r\n  /* const onChange = async (e) => {\r\n    setSearchMail(e);\r\n    if (e == \"\") {\r\n      refetch();\r\n    } else refetch({ name: e });\r\n  }; */\r\n  useEffect(() => {\r\n    if (data) {\r\n      setRolesManagements(data.getRoles.role);\r\n      setPageInfo(data.getRoles.pageInfo);\r\n    }\r\n  }, [data, rolesManagements]);\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const checkbox = {\r\n    \"permission 1\": true,\r\n    \"permission 2\": true,\r\n    \"permission 3\": false,\r\n    \"permission 4\": true,\r\n  };\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <>\r\n      <Grid container direction=\"column\" gap={2}>\r\n        <>\r\n          <Grid\r\n            item\r\n            container\r\n            direction={{ xs: \"column\", sm: \"row\" }}\r\n            gap={{ md: 4, sm: 4, xs: 2 }}\r\n          >\r\n            {/* <Grid item flex={1}>\r\n              <Search\r\n                value={searchMail}\r\n                onChange={(e) => onChange(e.target.value)}\r\n                placeholder=\"Type to search roles by role...\"\r\n                height=\"5rem\"\r\n              />\r\n            </Grid> */}\r\n\r\n            <Grid item>\r\n              <CustomButton\r\n                endIcon={<AddIcon />}\r\n                title=\"Add new role\"\r\n                type={buttonType}\r\n                onClick={handleDialogOpen}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          {rolesManagements.length > 0 ? (\r\n            <Grid item container>\r\n              <EnhancedTable\r\n                headCells={roleHeader}\r\n                rows={rolesManagements}\r\n                paginationLabel=\"subscription per page\"\r\n                hasCheckbox={true}\r\n                changeLimit={async (e) => {\r\n                  await changeTableLimit(fetchRoles, { first: e });\r\n                }}\r\n                dataPageInfo={pageInfo}\r\n                handlePagination={async (page) => {\r\n                  await handlePageChange(fetchRoles, page, pageInfo, {});\r\n                }}\r\n              >\r\n                {rolesManagements.map((row, index) => {\r\n                  const isItemSelected = isSelected(row._id, selectedRows);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n                  let newData;\r\n                  if (row.permissions) {\r\n                    const data = [\r\n                      ...new Set(row.permissions.map((i) => i.split(\":\")[0])),\r\n                    ];\r\n                    const dataLength = data.length - 5;\r\n                    newData = [\r\n                      ...data.slice(0, 5),\r\n                      dataLength ? `+${dataLength}` : null,\r\n                    ].filter((i) => i !== null);\r\n                  }\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row._id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              row.id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{\r\n                          color: theme.palette.common.black,\r\n                          minWidth: \"10rem\",\r\n                        }}\r\n                      >\r\n                        {row.name}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        id={labelId}\r\n                        scope=\"row\"\r\n                        align=\"center\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.black }}\r\n                      >\r\n                        <Grid\r\n                          container\r\n                          justifyContent=\"flex-start\"\r\n                          gap={1}\r\n                          alignItems=\"center\"\r\n                        >\r\n                          {newData &&\r\n                            newData.map((i) => {\r\n                              return (\r\n                                <Chip\r\n                                  label={i}\r\n                                  key={i}\r\n                                  className={classes.badge}\r\n                                />\r\n                              );\r\n                            })}\r\n                        </Grid>\r\n                      </TableCell>\r\n                      <TableCell align=\"left\" className={classes.tableCell}>\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"space-between\",\r\n                            minWidth: \"25rem\",\r\n                            gap: \"1rem\",\r\n                          }}\r\n                        >\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            className={`${classes.tableBtn} ${classes.greenBtn}`}\r\n                            component={Link}\r\n                            to={`/settings/management/${row._id}`}\r\n                            endIcon={<EditIcon color=\"success\" />}\r\n                          >\r\n                            Edit role\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            disableRipple\r\n                            className={`${classes.tableBtn} ${classes.redBtn}`}\r\n                            onClick={() => handleDeleteOpenDialog(row._id)}\r\n                            endIcon={<DeleteIcon color=\"error\" />}\r\n                          >\r\n                            Delete role\r\n                          </Button>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n              </EnhancedTable>\r\n            </Grid>\r\n          ) : (\r\n            <EmptyTable\r\n              headCells={roleHeader}\r\n              paginationLabel=\"Admin  per page\"\r\n            />\r\n          )}\r\n        </>\r\n      </Grid>\r\n      {/* // modal */}\r\n      <Modals\r\n        isOpen={isOpen}\r\n        title=\"Add new role\"\r\n        handleClose={handleDialogClose}\r\n      >\r\n        <RoleModal\r\n          handleDialogClose={handleDialogClose}\r\n          type=\"add\"\r\n          checkbox={checkbox}\r\n        />\r\n      </Modals>\r\n\r\n      {/* Edit */}\r\n      {/* <Modals isOpen={edit} title=\"Edit role\" handleClose={handleEditDialogCloses}>\r\n        <RoleModal handleDialogClose={handleEditDialogCloses} type=\"edit\" checkbox={checkbox1} />\r\n      </Modals> */}\r\n      {/* delete modal */}\r\n      <DeleteOrDisable\r\n        open={deleteModal}\r\n        setOpen={setdeleteModal}\r\n        title=\"Delete Role\"\r\n        onConfirm={onConfirm}\r\n        confirmationMsg=\"delete role\"\r\n        btnValue=\"Delete\"\r\n      />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Management;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Medications.js",["946","947","948","949","950"],"import React, { useEffect, useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Grid,\r\n  Avatar,\r\n  Checkbox,\r\n  TableCell,\r\n  TableRow,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { EnhancedTable, EmptyTable, NoData } from \"components/layouts\";\r\nimport { medicationsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { myMedic } from \"components/graphQL/useQuery\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\nimport { changeTableLimit, fetchMoreData } from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Medications = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [pageInfo, setPageInfo] = useState([]);\r\n  const { patientId } = useParams();\r\n\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [medications, setMedications] = useState([]);\r\n\r\n  const [fetchMedications, { loading, error, data }] = useLazyQuery(myMedic);\r\n\r\n  useEffect(() => {\r\n    fetchMedications({\r\n      variables: {\r\n        id: patientId,\r\n        orderBy: \"-createdAt\",\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchMedications, patientId]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setMedications(data.getMedications.medication);\r\n      setPageInfo(data.getMedications.pageInfo);\r\n    }\r\n  }, [data]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\r\n      <Grid item container height=\"100%\" direction=\"column\" gap={2}>\r\n        <Grid item>\r\n          <Typography variant=\"h2\">Medications</Typography>\r\n        </Grid>\r\n        {medications.length > 0 ? (\r\n          <Grid item container height=\"100%\" direction=\"column\">\r\n            <EnhancedTable\r\n              headCells={medicationsHeadCells}\r\n              rows={medications}\r\n              paginationLabel=\"Medication per page\"\r\n              handleChangePage={fetchMoreData}\r\n              hasCheckbox={true}\r\n              changeLimit={changeTableLimit}\r\n              fetchData={fetchMedications}\r\n              dataPageInfo={pageInfo}\r\n            >\r\n              {medications\r\n                // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                .map((row, index) => {\r\n                  const isItemSelected = isSelected(row._id, selectedRows);\r\n                  const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                  return (\r\n                    <TableRow\r\n                      hover\r\n                      role=\"checkbox\"\r\n                      aria-checked={isItemSelected}\r\n                      tabIndex={-1}\r\n                      key={row._id}\r\n                      selected={isItemSelected}\r\n                    >\r\n                      <TableCell padding=\"checkbox\">\r\n                        <Checkbox\r\n                          onClick={() =>\r\n                            handleSelectedRows(\r\n                              row.id,\r\n                              selectedRows,\r\n                              setSelectedRows\r\n                            )\r\n                          }\r\n                          color=\"primary\"\r\n                          checked={isItemSelected}\r\n                          inputProps={{\r\n                            \"aria-labelledby\": labelId,\r\n                          }}\r\n                        />\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ color: theme.palette.common.grey }}\r\n                      >\r\n                        {dateMoment(row.createdAt)}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"20rem\" }}\r\n                      >\r\n                        {row.name}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"20rem\" }}\r\n                      >\r\n                        {row.dosage ? row.dosage : \"No Value\"}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"20rem\" }}\r\n                      >\r\n                        {row.interval ? row.interval : \"No Value\"}\r\n                      </TableCell>\r\n                      <TableCell\r\n                        align=\"left\"\r\n                        className={classes.tableCell}\r\n                        style={{ maxWidth: \"20rem\" }}\r\n                      >\r\n                        <div\r\n                          style={{\r\n                            height: \"100%\",\r\n                            display: \"flex\",\r\n                            alignItems: \"center\",\r\n                            justifyContent: \"left\",\r\n                          }}\r\n                        >\r\n                          <span style={{ marginRight: \"1rem\" }}>\r\n                            <Avatar\r\n                              alt={`Display Photo of ${row.caregiver}`}\r\n                              src={displayPhoto}\r\n                              sx={{ width: 24, height: 24 }}\r\n                            />\r\n                          </span>\r\n                          <span style={{ fontSize: \"1.25rem\" }}>\r\n                            {row.doctor}\r\n                          </span>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  );\r\n                })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={medicationsHeadCells}\r\n            paginationLabel=\"Medications per page\"\r\n          />\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Medications;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Login.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\HcpProfile.js",["951","952","953","954"],"import React, { useState, useEffect, useLayoutEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid } from \"@mui/material\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport LocationOnIcon from \"@mui/icons-material/LocationOn\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { doctor } from \"components/graphQL/useQuery\";\r\nimport { Loader, DisplayProfile, ProfileCard } from \"components/Utilities\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridsWrapper: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    padding: \"1rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.3rem !important\",\r\n      //   height: \"2.7rem\",\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n      borderRadius: \"1.5rem\",\r\n    },\r\n  },\r\n\r\n  cardGrid: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    padding: \"4rem 5rem\",\r\n    height: \"16.1rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\r\n  },\r\n\r\n  linkIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      fontSize: \"1.25rem\",\r\n      color: theme.palette.common.green,\r\n      marginLeft: \"1.2rem\",\r\n    },\r\n  },\r\n  link: {\r\n    textDecoration: \"none\",\r\n    color: theme.palette.common.green,\r\n    cursor: \"pointer\",\r\n  },\r\n\r\n  buttonsGridWrapper: {\r\n    height: \"16.1rem\",\r\n  },\r\n}));\r\n\r\nconst HcpProfile = () => {\r\n  const classes = useStyles();\r\n\r\n  const { hcpId } = useParams();\r\n\r\n  const [doctorProfile, setDoctorProfile] = useState(\"\");\r\n\r\n  const { loading, error, data } = useQuery(doctor, {\r\n    variables: {\r\n      id: hcpId,\r\n    },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setDoctorProfile(data.doctorProfile);\r\n    }\r\n  }, [data, hcpId]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  const {\r\n    dociId,\r\n    picture,\r\n    firstName,\r\n    lastName,\r\n    specialization,\r\n    email,\r\n    hospital,\r\n    phoneNumber,\r\n    gender,\r\n    dob,\r\n  } = doctorProfile;\r\n  return (\r\n    <Grid container direction=\"column\" gap={4}>\r\n      {/* Display photo and profile name grid */}\r\n      <Grid item>\r\n        <DisplayProfile\r\n          fullName={`${firstName} ${lastName}`}\r\n          displayPhoto={picture}\r\n          medicalTitle=\"Medical ID\"\r\n          statusId={dociId?.split(\"-\")[1]}\r\n          specialization={specialization ? specialization : \"Not assigned\"}\r\n          chatPath={`/hcps/${hcpId}/profile/chat`}\r\n          type=\"doctor\"\r\n        />\r\n      </Grid>\r\n      {/* PERSONAL INFO SECTION */}\r\n      <Grid item container spacing={4} justifyContent=\"space-between\">\r\n        <Grid item container md={6} sm={6} xs={12}>\r\n          <ProfileCard text=\"Gender\" value={gender} />\r\n        </Grid>\r\n        <Grid item container md={6} sm={6} xs={12}>\r\n          <ProfileCard\r\n            text=\"Date Of Birth\"\r\n            value={dob ? dateMoment(dob) : \"DOB not Provided\"}\r\n          />\r\n        </Grid>\r\n\r\n        <Grid item container md={6} sm={6} xs={12} mx=\"auto\">\r\n          <ProfileCard\r\n            text=\"Email Address\"\r\n            value={\r\n              email ? (\r\n                <a href={`mailto:${email}`} className={classes.link}>\r\n                  {email}\r\n                </a>\r\n              ) : (\r\n                \"NO Email Provided\"\r\n              )\r\n            }\r\n          />\r\n        </Grid>\r\n        <Grid item container md={6} sm={6} xs={12}>\r\n          <ProfileCard\r\n            text=\"Phone Number\"\r\n            value={\r\n              phoneNumber ? (\r\n                <a href={`tel:+234${phoneNumber}`} className={classes.link}>\r\n                  {phoneNumber}\r\n                </a>\r\n              ) : (\r\n                \"No Phone Number\"\r\n              )\r\n            }\r\n          />\r\n        </Grid>\r\n        <Grid item container md={12} sm={12} xs={12}>\r\n          <ProfileCard\r\n            text=\"Hospital\"\r\n            value={\r\n              hospital ? (\r\n                <a href={email} className={classes.link}>\r\n                  <span>{hospital}</span>\r\n                  <LocationOnIcon\r\n                    className={`${classes.linkIcon} ${classes.locationIcon}`}\r\n                  />\r\n                </a>\r\n              ) : (\r\n                \"No Hospital attached\"\r\n              )\r\n            }\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HcpProfile;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\PendingPayout.js",["955","956","957","958","959","960","961","962","963","964","965","966","967","968","969","970","971","972","973","974","975","976","977","978","979","980","981","982","983","984","985","986","987","988","989","990","991","992","993","994","995","996","997","998","999","1000","1001","1002","1003","1004","1005","1006","1007","1008","1009","1010","1011","1012","1013","1014","1015","1016","1017","1018","1019","1020","1021","1022","1023","1024","1025","1026","1027","1028","1029","1030","1031","1032","1033","1034","1035","1036","1037","1038","1039","1040","1041","1042","1043","1044","1045"],"import React, { useEffect } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  TableRow,\r\n  TableCell,\r\n  Avatar,\r\n  Checkbox,\r\n} from \"@mui/material\";\r\nimport { EnhancedTable, EmptyTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { rows } from \"components/Utilities/DataHeader\";\r\nimport { pendingHeader } from \"components/Utilities/tableHeaders\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport TrendingUpIcon from \"@mui/icons-material/TrendingUp\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { CustomButton, PreviousButton } from \"components/Utilities\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  searchGrid: {\r\n    \"&.css-13i4rnv-MuiGrid-root\": {\r\n      flex: 1,\r\n      marginRight: \"5rem\",\r\n    },\r\n  },\r\n  iconWrapper: {\r\n    width: 20,\r\n    height: 20,\r\n    borderRadius: \"50%\",\r\n    display: \"grid\",\r\n    placeContent: \"center\",\r\n    marginLeft: \"1rem\",\r\n    background: theme.palette.common.lightRed,\r\n  },\r\n  button: {\r\n    \"&.css-1zf5oc-MuiButtonBase-root-MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"10rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.css-1jilxo7-MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst PendingPayout = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const { rowsPerPage, selectedRows, page } = useSelector(\r\n    (state) => state.tables\r\n  );\r\n  const { setSelectedRows } = useActions();\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  return (\r\n    <Grid container direction=\"column\" rowSpacing={2}>\r\n      <Grid item>\r\n        <PreviousButton\r\n          path=\"/finance\" /* onClick={() => setSelectedSubMenu(0)} */\r\n        />\r\n      </Grid>\r\n\r\n      <Grid\r\n        item\r\n        container\r\n        justifyContent=\"space-between\"\r\n        style={{ paddingBottom: \"3rem\" }}\r\n      >\r\n        <Grid item>\r\n          <Grid item container alignItems=\"center\">\r\n            <Typography noWrap variant=\"h1\" component=\"div\" color=\"#2D2F39\">\r\n              Pending Payout\r\n            </Typography>\r\n            <Grid item className={classes.iconWrapper} marginLeft=\"1rem\">\r\n              <TrendingUpIcon color=\"error\" className={classes.cardIcon} />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item>\r\n          <CustomButton\r\n            endIcon={<TrendingUpIcon />}\r\n            title=\"Process Payout\"\r\n            type={buttonType}\r\n            to=\"/finance/pending\"\r\n            // onClick={handleAdminOpen}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      {rows.length > 0 ? (\r\n        <Grid item container>\r\n          <EnhancedTable\r\n            headCells={pendingHeader}\r\n            rows={rows}\r\n            page={page}\r\n            paginationLabel=\"payout per page\"\r\n            hasCheckbox={true}\r\n            hasPagination={false}\r\n          >\r\n            {rows\r\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n              .map((row, index) => {\r\n                const isItemSelected = isSelected(row.id, selectedRows);\r\n\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={row.id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(\r\n                            row.id,\r\n                            selectedRows,\r\n                            setSelectedRows\r\n                          )\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"center\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.black }}\r\n                    >\r\n                      {row.entryDate}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.black }}\r\n                    >\r\n                      {row.medical}\r\n                    </TableCell>\r\n                    <TableCell align=\"center\" className={classes.tableCell}>\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                        }}\r\n                      >\r\n                        <span style={{ marginRight: \"1rem\" }}>\r\n                          <Avatar\r\n                            alt=\"Remy Sharp\"\r\n                            src={displayPhoto}\r\n                            sx={{ width: 24, height: 24 }}\r\n                          />\r\n                        </span>\r\n                        <span style={{ fontSize: \"1.25rem\" }}>\r\n                          {row.firstName} {row.lastName}\r\n                        </span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"center\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.red }}\r\n                    >\r\n                      {row.amount}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"center\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.red }}\r\n                    >\r\n                      {row.account}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"center\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.green }}\r\n                    >\r\n                      {row.bank}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n          </EnhancedTable>\r\n        </Grid>\r\n      ) : (\r\n        <EmptyTable\r\n          headCells={pendingHeader}\r\n          paginationLabel=\"Payout  per page\"\r\n        />\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default PendingPayout;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Hcps.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\HcpEarnings.js",["1046","1047","1048","1049"],"import React, { useState, useEffect } from \"react\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport TrendingDownIcon from \"@mui/icons-material/TrendingDown\";\r\nimport TrendingUpIcon from \"@mui/icons-material/TrendingUp\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { CircularProgressBar, Loader, FormSelect } from \"components/Utilities\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { getEarningStats, getMyEarningDoc } from \"components/graphQL/useQuery\";\r\nimport {\r\n  financialPercent,\r\n  selectOptions,\r\n  formatNumber,\r\n} from \"components/Utilities/Time\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardContainer: {\r\n    \"&.MuiCard-root\": {\r\n      width: \"100%\",\r\n      height: \"15.8rem\",\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\",\r\n      background: \"white\",\r\n      marginRight: \"5rem\",\r\n      \"&:hover\": {\r\n        boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.15)\",\r\n        cursor: \"pointer\",\r\n      },\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n      \"& .MuiCardContent-root .MuiTypography-h5\": {\r\n        textDecoration: \"none !important\",\r\n        textTransform: \"uppercase\",\r\n      },\r\n    },\r\n  },\r\n\r\n  iconWrapper: {\r\n    width: 60,\r\n    height: 60,\r\n    borderRadius: \"50%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  cardGrid: {\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    height: \"25.8rem\",\r\n  },\r\n  flexContainer: {\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    margin: \"auto\",\r\n    width: \"100%\",\r\n\r\n    // padding: \"2rem 4rem\",\r\n    \"&:first-child\": {\r\n      borderBottom: \".5px solid #F8F8F8\",\r\n    },\r\n  },\r\n  lightGreen: {\r\n    color: theme.palette.common.green,\r\n  },\r\n\r\n  lightRed: {\r\n    color: theme.palette.common.red,\r\n  },\r\n  mainContainer: {\r\n    flexDirection: \"column\",\r\n    width: \"100%\",\r\n    background: \"white\",\r\n    borderRadius: \"2rem\",\r\n    boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.15)\",\r\n  },\r\n  parentGrid: {\r\n    textDecoration: \"none\",\r\n    width: \"24.7rem\",\r\n    color: theme.palette.primary.main,\r\n    \"&.MuiGrid-item\": {\r\n      ...theme.typography.cardParentGrid,\r\n      minWidth: \"20rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n    },\r\n  },\r\n\r\n  cardIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      fontSize: \"3rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst HcpEarnings = () => {\r\n  const classes = useStyles();\r\n  // const theme = useTheme();\r\n\r\n  const { hcpId } = useParams();\r\n\r\n  const [form, setForm] = useState(\"\");\r\n  const { data, error, loading, refetch } = useQuery(getEarningStats, {\r\n    variables: { q: \"365\" },\r\n  });\r\n  const { data: datas } = useQuery(getMyEarningDoc, {\r\n    variables: { doc: hcpId },\r\n  });\r\n\r\n  // console.log(datas.getMyEarnings.data[0].balance, \"kkk\");\r\n  const [x, setX] = useState(0);\r\n\r\n  const [totalEarning, setTotalEarning] = useState([]);\r\n  const [totalPayouts, setTotalPayouts] = useState([]);\r\n  const financialValue = financialPercent(totalEarning, totalPayouts);\r\n  const [finances, setFinances] = useState(financialValue);\r\n  const onChange = async (e) => {\r\n    setForm(e.target.value);\r\n    await refetch({ q: e.target.value });\r\n  };\r\n\r\n  const theme = useTheme();\r\n  useEffect(() => {\r\n    if (datas !== undefined) {\r\n      if (datas.getMyEarnings.length > 0) {\r\n        setX(datas?.getMyEarnings?.data[0]?.balance);\r\n      }\r\n    }\r\n\r\n    if (data) {\r\n      const { totalEarnings, totalPayout } = data.getEarningStats;\r\n\r\n      setTotalEarning(totalEarnings);\r\n      setTotalPayouts(totalPayout);\r\n      const value = financialPercent(totalEarnings, totalPayout);\r\n      setFinances(value);\r\n    }\r\n  }, [form, data, datas]);\r\n  // const classes = useStyles();\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid\r\n      container\r\n      padding={{ md: \"2rem 4rem\", sm: \"2rem, 4rem\", xs: \"1rem\" }}\r\n      className={classes.mainContainer}\r\n      gap={3}\r\n    >\r\n      <Grid\r\n        item\r\n        flexWrap=\"nowrap\"\r\n        // flexDirection={{ md: \"row\", sm: \"column\", xs: \"column\" }}\r\n        container\r\n        className={classes.flexContainer}\r\n      >\r\n        <Grid item flex={1}>\r\n          <Typography variant=\"h5\" fontSize=\"clamp(2rem, 2vw, 3.3rem)\">\r\n            Earnings\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item>\r\n          <FormSelect\r\n            placeholder=\"Select days\"\r\n            value={form}\r\n            onChange={onChange}\r\n            options={selectOptions}\r\n            name=\"finance\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Grid\r\n        item\r\n        container\r\n        rowGap={4}\r\n        flexDirection={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n        sx={{ alignItems: \"center\", justifyContent: \"space-between\" }}\r\n      >\r\n        <Grid item>\r\n          <CircularProgressBar\r\n            height=\"17rem\"\r\n            width=\"17rem\"\r\n            color={theme.palette.common.green}\r\n            trailColor={theme.palette.common.red}\r\n            value={finances}\r\n            strokeWidth={8}\r\n          />\r\n        </Grid>\r\n        <Grid item flex={1}>\r\n          <Grid\r\n            container\r\n            alignItems=\"center\"\r\n            rowGap={4}\r\n            justifyContent={{\r\n              md: \"space-around\",\r\n              xs: \"flex-start\",\r\n              sm: \"space-around\",\r\n            }}\r\n          >\r\n            <Grid\r\n              item\r\n              spacing={2}\r\n              sx={{ justifyContent: \"center\", alignItems: \"center\" }}\r\n            >\r\n              <Grid container alignItems=\"center\" gap={{ md: 2, sm: 2, xs: 4 }}>\r\n                <Grid\r\n                  className={classes.iconWrapper}\r\n                  sx={{ background: theme.palette.common.lightGreen }}\r\n                >\r\n                  <Grid item>\r\n                    <TrendingDownIcon\r\n                      color=\"success\"\r\n                      className={classes.cardIcon}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography noWrap variant=\"h2\">\r\n                    <span\r\n                      style={{\r\n                        textDecoration: \"line-through\",\r\n                        textDecorationStyle: \"double\",\r\n                      }}\r\n                    >\r\n                      N{\"\"}\r\n                    </span>\r\n                    {formatNumber(+x)}\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"body2\"\r\n                    style={{\r\n                      color: theme.palette.common.lightGrey,\r\n                    }}\r\n                  >\r\n                    Total earnings\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            {/* second */}\r\n            <Grid item>\r\n              <Grid container alignItems=\"center\" gap={{ md: 2, sm: 2, xs: 4 }}>\r\n                <Grid\r\n                  className={classes.iconWrapper}\r\n                  sx={{ background: theme.palette.common.lightRed }}\r\n                >\r\n                  <Grid item>\r\n                    <TrendingUpIcon\r\n                      color=\"error\"\r\n                      className={classes.cardIcon}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography noWrap variant=\"h2\">\r\n                    <span\r\n                      style={{\r\n                        textDecoration: \"line-through\",\r\n                        textDecorationStyle: \"double\",\r\n                      }}\r\n                    >\r\n                      N{\"\"}\r\n                    </span>\r\n                    {formatNumber(+totalPayouts)}\r\n                  </Typography>\r\n                  <Typography\r\n                    variant=\"body2\"\r\n                    style={{\r\n                      color: theme.palette.common.lightGrey,\r\n                      // fontSize: \"clamp(2,3vw,2.275rem)\",\r\n                    }}\r\n                  >\r\n                    Total withdrawal\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            {/* second */}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HcpEarnings;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\HCPChat.js",["1050","1051","1052","1053"],"import React, { useEffect, useState } from \"react\";\r\nimport { Grid, Typography, Divider } from \"@mui/material\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { CustomButton, Loader, PreviousButton } from \"components/Utilities\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { CREATE_MESSAGE } from \"components/graphQL/Mutation\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { getMessage, doctor } from \"components/graphQL/useQuery\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridWrapper: {\r\n    \"&.MuiGrid-item\": {\r\n      borderRadius: \"1rem\",\r\n      background: \"#fff\",\r\n      padding: \"2rem 4rem\",\r\n      maxWidth: \"60rem !important\",\r\n      boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.1)\",\r\n    },\r\n  },\r\n  inputGrid: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n  },\r\n  heading: {\r\n    \"&.MuiTypography-root\": {\r\n      color: theme.palette.common.grey,\r\n      //   fontSize: \"1rem\"\r\n    },\r\n  },\r\n  formInput: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    fontSize: \"1.5rem\",\r\n    padding: \".5rem 1rem\",\r\n    border: \"none\",\r\n    background: \"transparent\",\r\n    color: theme.palette.common.grey,\r\n\r\n    \"&:focus\": {\r\n      outline: \"none\",\r\n    },\r\n  },\r\n  textArea: {\r\n    border: \"1px solid rgba(0, 0, 0, 0.03)\",\r\n    resize: \"none\",\r\n    borderRadius: \"0.5rem\",\r\n  },\r\n  divider: {\r\n    \"&.MuiDivider-root\": {\r\n      borderColor: \"rgba(0, 0, 0, 0.03)\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst HCPChat = () => {\r\n  const { hcpId } = useParams();\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  let history = useHistory();\r\n  const [createNewMessage] = useMutation(CREATE_MESSAGE, {\r\n    refetchQueries: [{ query: getMessage }],\r\n  });\r\n  const { data, loading } = useQuery(doctor, { variables: { id: hcpId } });\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n  const [profile, setprofile] = useState(\"\");\r\n  const { firstName, lastName } = profile;\r\n\r\n  const initialValues = {\r\n    subject: \"\",\r\n    recipient: `${firstName} ${lastName} ` || \"\",\r\n    textarea: \"\",\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setprofile(data.doctorProfile);\r\n    }\r\n  }, [data]);\r\n\r\n  const validationSchema = Yup.object({\r\n    subject: Yup.string(\"Enter your subject\").required(\"Subject is required\"),\r\n    textarea: Yup.string(\"Enter your message\").required(\"Message is required\"),\r\n    recipient: Yup.string(\"Enter your recipient\").required(\r\n      \"recipients is required\"\r\n    ),\r\n  });\r\n  const onSubmit = async (values, onSubmitProps) => {\r\n    const id = localStorage.getItem(\"user_id\");\r\n    const { subject, textarea } = values;\r\n\r\n    try {\r\n      await createNewMessage({\r\n        variables: {\r\n          sender: id,\r\n          recipient: hcpId,\r\n          subject,\r\n          body: textarea,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    onSubmitProps.resetForm();\r\n    history.goBack();\r\n  };\r\n\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validateOnBlur={false}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n      enableReinitialize\r\n    >\r\n      {({ isValid, isSubmitting, dirty }) => {\r\n        return (\r\n          <Form>\r\n            <Grid container direction=\"column\">\r\n              <Grid item style={{ marginBottom: \"3rem\" }}>\r\n                <PreviousButton\r\n                  path={`/hcps/${hcpId}/profile`}\r\n                  /* onClick={() => setSelectedScopedMenu(0)} */\r\n                />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" alignItems=\"center\">\r\n                <Grid item>\r\n                  <Typography variant=\"h4\" style={{ marginBottom: \"3rem\" }}>\r\n                    Create New Message\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  container\r\n                  direction=\"column\"\r\n                  className={classes.gridWrapper}\r\n                >\r\n                  <Grid item>\r\n                    <Grid\r\n                      item\r\n                      container\r\n                      alignItems=\"center\"\r\n                      sx={{ gap: \"0!important\" }}\r\n                    >\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Recipient:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item className={classes.inputGrid}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          id=\"message\"\r\n                          name=\"recipient\"\r\n                          disabled\r\n                          variant=\"standard\"\r\n                          className={classes.formInput}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Subject:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item className={classes.inputGrid}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          id=\"subject\"\r\n                          name=\"subject\"\r\n                          variant=\"standard\"\r\n                          className={classes.formInput}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container direction=\"column\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Message:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item style={{ height: \"15rem\" }}>\r\n                        <FormikControl\r\n                          control=\"textarea\"\r\n                          id=\"textarea\"\r\n                          name=\"textarea\"\r\n                          variant=\"standard\"\r\n                          fLabel={true}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    {/* <Divider className={classes.divider} /> */}\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    style={{ alignSelf: \"flex-end\", marginTop: \"2rem\" }}\r\n                  >\r\n                    <CustomButton\r\n                      title=\"Send Message\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                      // endIcon={<ArrowForwardIosIcon style={{ fontSize: \"1.5rem\" }} />}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\n\r\nexport default HCPChat;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\HcpConsultations.js",["1054","1055","1056","1057","1058","1059","1060"],"import React, { useEffect, useState } from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getDocConsult } from \"components/graphQL/useQuery\";\r\nimport {\r\n  Avatar,\r\n  Typography,\r\n  TableRow,\r\n  Button,\r\n  TableCell,\r\n  Checkbox,\r\n  Grid,\r\n} from \"@mui/material\";\r\nimport { consultationsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { NoData, EnhancedTable, EmptyTable } from \"components/layouts\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { Loader, PreviousButton } from \"components/Utilities\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableCell: {\r\n    \"&.css-1jilxo7-MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"12rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\n/* const filterOptions = [\r\n  { id: 0, value: \"Name\" },\r\n  { id: 1, value: \"Date\" },\r\n  { id: 2, value: \"Description\" },\r\n]; */\r\n\r\nconst HcpConsultations = (props) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [pageInfo, setPageInfo] = useState([]);\r\n  const { hcpId } = useParams();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [consultations, setConsultations] = useState([]);\r\n\r\n  const [fetchDocConsultations, { loading, data, error }] =\r\n    useLazyQuery(getDocConsult);\r\n\r\n  useEffect(() => {\r\n    fetchDocConsultations({\r\n      variables: {\r\n        id: hcpId,\r\n        orderBy: \"-createdAt\",\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchDocConsultations, hcpId]);\r\n\r\n  useEffect(() => {\r\n    if (data && data.getConsultations.data) {\r\n      setConsultations(data.getConsultations.data);\r\n      setPageInfo(data.getConsultations.pageInfo);\r\n    }\r\n  }, [data, hcpId]);\r\n\r\n  if (error) return <NoData error={error} />;\r\n  if (loading) return <Loader />;\r\n  return (\r\n    <Grid container direction=\"column\" height=\"100%\" gap={2}>\r\n      <Grid item>\r\n        <PreviousButton\r\n          path={`/hcps/${hcpId}`} /* onClick={() => setSelectedHcpMenu(0)} */\r\n        />\r\n      </Grid>\r\n\r\n      <Grid item container justifyContent=\"space-between\" alignItems=\"center\">\r\n        <Grid item>\r\n          <Typography variant=\"h2\">Consultations</Typography>\r\n        </Grid>\r\n        {/* <Grid item>\r\n          <FilterList\r\n            options={filterOptions}\r\n            title=\"Filter consultations\"\r\n            width=\"18.7rem\"\r\n          />\r\n        </Grid> */}\r\n      </Grid>\r\n      {consultations.length > 0 ? (\r\n        <Grid item>\r\n          <EnhancedTable\r\n            headCells={consultationsHeadCells}\r\n            rows={consultations}\r\n            paginationLabel=\"Consultations per page\"\r\n            hasCheckbox={true}\r\n            changeLimit={async (e) => {\r\n              await changeTableLimit(fetchDocConsultations, {\r\n                first: e,\r\n                id: hcpId,\r\n              });\r\n            }}\r\n            dataPageInfo={pageInfo}\r\n            handlePagination={async (page) => {\r\n              await handlePageChange(fetchDocConsultations, page, pageInfo, {\r\n                id: hcpId,\r\n              });\r\n            }}\r\n          >\r\n            {consultations.map((row, index) => {\r\n              // eslint-disable-next-line\r\n              const {\r\n                _id,\r\n                createdAt,\r\n                symptoms,\r\n                status,\r\n                type,\r\n                contactMedium,\r\n                patientData,\r\n\r\n                // eslint-disable-next-line\r\n              } = row;\r\n              const isItemSelected = isSelected(row._id, selectedRows);\r\n              const labelId = `enhanced-table-checkbox-${index}`;\r\n              return (\r\n                <TableRow\r\n                  hover\r\n                  role=\"checkbox\"\r\n                  aria-checked={isItemSelected}\r\n                  tabIndex={-1}\r\n                  key={_id}\r\n                  selected={isItemSelected}\r\n                >\r\n                  <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                      onClick={() =>\r\n                        handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                      }\r\n                      color=\"primary\"\r\n                      checked={isItemSelected}\r\n                      inputProps={{\r\n                        \"aria-labelledby\": labelId,\r\n                      }}\r\n                    />\r\n                  </TableCell>\r\n\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    {dateMoment(createdAt)}\r\n                  </TableCell>\r\n                  <TableCell\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{ maxWidth: \"20rem\" }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        height: \"100%\",\r\n                        display: \"flex\",\r\n                        alignItems: \"left\",\r\n                      }}\r\n                    >\r\n                      <span style={{ marginRight: \"1rem\" }}>\r\n                        <Avatar\r\n                          alt={`Display Photo of ${patientData.firstName}`}\r\n                          src={\r\n                            patientData.picture\r\n                              ? patientData.picture\r\n                              : displayPhoto\r\n                          }\r\n                          sx={{ width: 24, height: 24 }}\r\n                        />\r\n                      </span>\r\n                      <span\r\n                        style={{ fontSize: \"1.25rem\" }}\r\n                      >{`${patientData.firstName} ${patientData.lastName}`}</span>\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{\r\n                      color: theme.palette.common.grey,\r\n                      maxWidth: \"20rem\",\r\n                    }}\r\n                  >\r\n                    <Grid container gap={1}>\r\n                      {symptoms\r\n                        ? symptoms.map((i) => {\r\n                            return <p key={i.name}>{i.name}</p>;\r\n                          })\r\n                        : \"No Value\"}\r\n                    </Grid>\r\n                  </TableCell>\r\n                  <TableCell\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{\r\n                      color: theme.palette.common.grey,\r\n                      maxWidth: \"20rem\",\r\n                    }}\r\n                  >\r\n                    {contactMedium}\r\n                  </TableCell>\r\n                  <TableCell\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{\r\n                      color: theme.palette.common.grey,\r\n                      maxWidth: \"20rem\",\r\n                    }}\r\n                  >\r\n                    {type ? type : \"No Value\"}\r\n                  </TableCell>\r\n                  <TableCell\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{\r\n                      color: theme.palette.common.grey,\r\n                      maxWidth: \"20rem\",\r\n                    }}\r\n                  >\r\n                    {status ? status : \"No Value\"}\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      className={classes.button}\r\n                      component={Link}\r\n                      to={`/hcps/${hcpId}/consultations/case-notes/${_id}`}\r\n                      endIcon={<ArrowForwardIosIcon />}\r\n                    >\r\n                      View Details\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </EnhancedTable>\r\n        </Grid>\r\n      ) : (\r\n        <EmptyTable\r\n          headCells={consultationsHeadCells}\r\n          paginationLabel=\"Consultation  per page\"\r\n        />\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HcpConsultations;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\HcpCaseNote.js",["1061","1062","1063","1064","1065","1066","1067","1068","1069","1070","1071","1072","1073","1074","1075"],"import React, { useEffect, Fragment, useState } from \"react\";\r\nimport { Grid, Chip, Avatar, Typography, Divider } from \"@mui/material\";\r\nimport { Modals, Loader, CustomButton } from \"components/Utilities\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { getConsult } from \"components/graphQL/useQuery\";\r\nimport { dateMoment, duration } from \"components/Utilities/Time\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { trucateString } from \"helpers/filterHelperFunctions\";\r\nimport Copy from \"components/Copy\";\r\nimport { daily } from \"components/Utilities/Time\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  parentGridWrapper: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.1)\",\r\n\r\n    \"&:not(:last-of-type)\": {\r\n      marginBottom: \"5rem\",\r\n    },\r\n  },\r\n\r\n  infoBadge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.5rem\",\r\n      borderRadius: \"1.5rem\",\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n    },\r\n  },\r\n\r\n  title: {\r\n    \"&.MuiTypography-root\": {\r\n      color: theme.palette.common.grey,\r\n      // marginRight: \"2rem\",\r\n      whitespace: \"wrap\",\r\n    },\r\n  },\r\n  item: {\r\n    padding: \"2rem 3rem\",\r\n    justifyContent: \"space-between\",\r\n    width: \"100%\",\r\n    flexWrap: \"nowrap\",\r\n    // justifyContent: \"space-between\",\r\n    \"&.MuiGrid-root > *\": {\r\n      flex: 1,\r\n    },\r\n  },\r\n  subItem: {\r\n    \"&.MuiGrid-container\": {\r\n      flexDirection: \"column\",\r\n      wordBreak: \"break-word\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst HcpCaseNotes = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const { rowId } = useParams();\r\n\r\n  const [consult, setConsult] = useState([]);\r\n\r\n  const { loading, data, error } = useQuery(getConsult, {\r\n    variables: {\r\n      id: rowId,\r\n    },\r\n  });\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const handleDialogOpen = () => {\r\n    setIsOpen(true);\r\n  };\r\n  const handleDialogClose = () => {\r\n    setIsOpen(false);\r\n  };\r\n  useEffect(() => {\r\n    if (data) {\r\n      setConsult(data.getConsultation);\r\n    }\r\n  }, [data, rowId]);\r\n  if (error) return <NoData error={error} />;\r\n\r\n  if (loading) return <Loader />;\r\n  const {\r\n    prescription,\r\n    type,\r\n    consultationOwner,\r\n    referralId,\r\n    createdAt,\r\n    discomfortLevel,\r\n    status,\r\n    description,\r\n    doctorNote,\r\n    severity,\r\n    firstNotice,\r\n    contactMedium,\r\n    updatedAt,\r\n    patientData,\r\n    doctorData,\r\n    symptoms,\r\n  } = consult;\r\n\r\n  return (\r\n    <>\r\n      <Grid container direction=\"column\" gap={2}>\r\n        <Grid item>\r\n          <Typography variant=\"h2\">Consultation Details</Typography>\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          className={classes.parentGridWrapper}\r\n        >\r\n          <Grid\r\n            item\r\n            container\r\n            flexWrap=\"wrap\"\r\n            className={classes.item}\r\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\r\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\r\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\r\n          >\r\n            <Grid item>\r\n              <Grid container className={classes.subItem} gap={2}>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Consultation Date:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item container>\r\n                  <Typography variant=\"h5\">{dateMoment(createdAt)}</Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid item container className={classes.subItem} gap={2}>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Referral:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  {referralId ? (\r\n                    <Grid item container gap={2}>\r\n                      <Typography variant=\"body1\">\r\n                        {trucateString(referralId, 10)}\r\n                      </Typography>\r\n                      <Copy text={referralId} name=\"Consultation ID\" />\r\n                    </Grid>\r\n                  ) : (\r\n                    \"No value\"\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid\r\n                item\r\n                container\r\n                flexDirection=\"column\"\r\n                gap={2}\r\n                className={classes.subItem}\r\n              >\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Consultation ID:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  {referralId ? (\r\n                    <Grid item container gap={2}>\r\n                      <Typography variant=\"h5\">\r\n                        {trucateString(referralId, 10)}\r\n                      </Typography>\r\n                      <Copy text={referralId} name=\"Consultation ID\" />\r\n                    </Grid>\r\n                  ) : (\r\n                    <Typography variant=\"h5\"> No value</Typography>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider color={theme.palette.common.lighterGrey} />\r\n          <Grid\r\n            item\r\n            container\r\n            className={classes.item}\r\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\r\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\r\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\r\n          >\r\n            <Grid item>\r\n              <Grid container className={classes.subItem} gap={2}>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Doctor:\r\n                  </Typography>\r\n                </Grid>\r\n                {patientData && Object.keys(patientData).length > 0 ? (\r\n                  <Grid item container alignItems=\"center\">\r\n                    <Grid item marginRight={2}>\r\n                      <Avatar\r\n                        src={patientData.image}\r\n                        alt={`Display photo of the ${patientData.firstName}`}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Typography variant=\"h5\">{`${patientData.firstName} ${patientData.lastName}`}</Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                ) : (\r\n                  <Typography variant=\"h5\">No Doctor</Typography>\r\n                )}\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid item container className={classes.subItem} gap={2}>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Contact:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\">\r\n                    {contactMedium ? contactMedium : \"No Value\"}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid item container className={classes.subItem} gap={2}>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Owner:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\">\r\n                    {consultationOwner ? consultationOwner : \"No Value\"}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider color={theme.palette.common.lighterGrey} />\r\n\r\n          <Grid\r\n            item\r\n            container\r\n            className={classes.item}\r\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\r\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\r\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\r\n          >\r\n            <Grid item container className={classes.subItem} gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Severity:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Grid container gap={1}>\r\n                  <Typography variant=\"body1\">\r\n                    {severity ? severity : \"No value\"}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container className={classes.subItem} gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  First Notice:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"body1\">\r\n                  {\" \"}\r\n                  {firstNotice ? firstNotice : \"No value\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container className={classes.subItem} gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Discomfort:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"body1\">\r\n                  {discomfortLevel ? discomfortLevel : \"No Value\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Divider color={theme.palette.common.lighterGrey} />\r\n          <Grid\r\n            item\r\n            container\r\n            className={classes.item}\r\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\r\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\r\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\r\n          >\r\n            <Grid item container className={classes.subItem} gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Symptoms:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Grid container gap={1}>\r\n                  {symptoms ? (\r\n                    symptoms.map((symptom, index) => {\r\n                      return (\r\n                        <Typography key={index} variant=\"body1\">\r\n                          {`${symptom.name},`}\r\n                        </Typography>\r\n                      );\r\n                    })\r\n                  ) : (\r\n                    <Typography variant=\"body1\">No Value</Typography>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid\r\n                item\r\n                container\r\n                flexDirection=\"column\"\r\n                className={classes.subItem}\r\n                gap={2}\r\n              >\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Status:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Chip\r\n                    variant=\"contained\"\r\n                    label={status}\r\n                    className={classes.infoBadge}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid item container className={classes.subItem} gap={2}>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Type:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\">\r\n                    {type ? type : \"No Value\"}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider color={theme.palette.common.lighterGrey} />\r\n          <Grid\r\n            item\r\n            container\r\n            className={classes.item}\r\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\r\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\r\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\r\n          >\r\n            <Grid item container className={classes.subItem} gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Description:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}>\r\n                  {description ? description : \"No Value\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container direction=\"column\" gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Doctors Note:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}>\r\n                  {doctorNote ? doctorNote : \"No Value\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container direction=\"column\" gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Updated At:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}>\r\n                  {dateMoment(updatedAt)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider color={theme.palette.common.lighterGrey} />\r\n          <Grid\r\n            item\r\n            container\r\n            style={{ padding: \"2rem 3rem\" }}\r\n            justifyContent=\"flex-end\"\r\n          >\r\n            {prescription && (\r\n              <Grid item container width={{ md: \"20%\", xs: \"100%\", sm: \"50%\" }}>\r\n                <CustomButton\r\n                  title=\"View Prescription\"\r\n                  width=\"100%\"\r\n                  type={buttonType}\r\n                  onClick={handleDialogOpen}\r\n                />\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Modals\r\n        isOpen={isOpen}\r\n        height={{ xs: \"90vh\" }}\r\n        title=\"Prescription\"\r\n        width={{ md: \"50vw\", sm: \"70vw\", xs: \"90vw\" }}\r\n        rowSpacing={2}\r\n        handleClose={handleDialogClose}\r\n      >\r\n        <Grid item container width=\"100%\" direction=\"row\">\r\n          <Grid\r\n            item\r\n            container\r\n            padding={{ md: \"2rem 0\", sm: \"1rem 0\", xs: \"1rem 0\" }}\r\n            // alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n            width=\"100%\"\r\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\r\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\r\n            rowGap={{ xs: \"1rem\", sm: \"1.5rem\" }}\r\n          >\r\n            <Grid item>\r\n              <Grid\r\n                item\r\n                container\r\n                className={classes.subItem}\r\n                gap={{ md: 2, sm: 2, xs: 0 }}\r\n              >\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Doctor:\r\n                  </Typography>\r\n                </Grid>\r\n                {doctorData && Object.keys(doctorData).length > 0 ? (\r\n                  <Grid container alignItems=\"center\">\r\n                    <Grid item marginRight={2}>\r\n                      <Avatar\r\n                        src={doctorData.image}\r\n                        alt={`Display photo of the ${doctorData.firstName}`}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Typography variant=\"h5\">{`${doctorData.firstName} ${doctorData.lastName}`}</Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                ) : (\r\n                  <Typography variant=\"body1\">No Doctor</Typography>\r\n                )}\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid\r\n                item\r\n                container\r\n                className={classes.subItem}\r\n                gap={{ md: 2, sm: 2, xs: 0 }}\r\n              >\r\n                <Grid>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Prescription Date\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"h5\">{dateMoment(createdAt)}</Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid\r\n                item\r\n                container\r\n                className={classes.subItem}\r\n                gap={{ md: 2, sm: 2, xs: 0 }}\r\n              >\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Symptoms\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Grid container gap={1}>\r\n                    {symptoms ? (\r\n                      symptoms.map((i) => {\r\n                        return (\r\n                          <Typography key={i.name} variant=\"h5\">\r\n                            {i.name}\r\n                          </Typography>\r\n                        );\r\n                      })\r\n                    ) : (\r\n                      <Typography variant=\"h5\">No Value</Typography>\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider color={theme.palette.common.lighterGrey} />\r\n          {prescription && (\r\n            <Fragment>\r\n              <Grid\r\n                item\r\n                container\r\n                style={{ padding: \"2rem 0rem\" }}\r\n                alignItems=\"center\"\r\n                justifyContent=\"space-between\"\r\n                sx={{ flexWrap: \"nowrap\" }}\r\n              >\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Drug\r\n                  </Typography>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Dosage\r\n                  </Typography>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Frequency\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Mode\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n              <Divider color={theme.palette.common.lighterGrey} />\r\n            </Fragment>\r\n          )}\r\n\r\n          {prescription &&\r\n            prescription.map((i, index) => {\r\n              return (\r\n                <>\r\n                  <Grid\r\n                    key={index}\r\n                    item\r\n                    container\r\n                    style={{ color: \"#4f4f4f\" }}\r\n                    alignItems=\"center\"\r\n                    justifyContent=\"space-between\"\r\n                    sx={{ flexWrap: \"nowrap\", textAlign: \"left\" }}\r\n                  >\r\n                    <Grid item>\r\n                      <Typography variant=\"body1\" className={classes.title}>\r\n                        {i.drugName}\r\n                      </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                      <Typography variant=\"body1\" className={classes.title}>\r\n                        {`${i.dosageQuantity} ${i.dosage}`}\r\n                      </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                      <Typography variant=\"body1\" className={classes.title}>\r\n                        {duration(i.dosageFrequency.duration)}{\" \"}\r\n                        {daily(i.dosageFrequency.day)}\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Typography variant=\"body1\" className={classes.title}>\r\n                        {i.mode}\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Divider color={theme.palette.common.lighterGrey} />\r\n                </>\r\n              );\r\n            })}\r\n          <Grid\r\n            item\r\n            container\r\n            padding={{ md: \"2rem 0\", sm: \"1rem 0\", xs: \"1rem 0\" }}\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n            sx={{ flexWrap: \"nowrap\" }}\r\n          >\r\n            <Grid\r\n              item\r\n              container\r\n              direction=\"column\"\r\n              gap={{ md: 2, sm: 2, xs: 0 }}\r\n            >\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Doctors Note:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}>\r\n                  {doctorNote ? doctorNote : \"No Value\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Modals>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HcpCaseNotes;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\HcpAvailability.js",["1076"],"import React, { useEffect, useState } from \"react\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport { AvailabilityCard, Loader } from \"components/Utilities\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { getAvailability } from \"components/graphQL/useQuery\";\r\nimport { NoData } from \"components/layouts\";\r\n\r\nconst HcpAvailability = () => {\r\n  const [availabiltyArray, setAvailabiltyArray] = useState([]);\r\n  const { hcpId } = useParams();\r\n  const { loading, data, error } = useQuery(getAvailability, {\r\n    variables: {\r\n      id: hcpId,\r\n    },\r\n  });\r\n  useEffect(() => {\r\n    if (data) setAvailabiltyArray(data?.getAvailabilities?.availability);\r\n  }, [data]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\r\n      <Grid item>\r\n        <Typography variant=\"h2\">HCP Availability</Typography>\r\n      </Grid>\r\n      <Grid\r\n        item\r\n        container\r\n        direction=\"column\"\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        height=\"100%\"\r\n      >\r\n        {availabiltyArray.length > 0 ? (\r\n          availabiltyArray.map((availability, index) => {\r\n            if (availability?.times) {\r\n              return (\r\n                <Grid item key={index}>\r\n                  <AvailabilityCard availability={availability} />\r\n                </Grid>\r\n              );\r\n            } else {\r\n              return null;\r\n            }\r\n          })\r\n        ) : (\r\n          <NoData />\r\n        )}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HcpAvailability;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Payout.js",["1077","1078","1079","1080","1081","1082","1083","1084","1085","1086","1087"],"import React, { useEffect, useState } from \"react\";\r\nimport { NoData, EmptyTable } from \"components/layouts\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Chip,\r\n  Checkbox,\r\n  TableRow,\r\n  TableCell,\r\n} from \"@mui/material\";\r\nimport { timeMoment, dateMoment } from \"components/Utilities/Time\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getPayoutData } from \"components/graphQL/useQuery\";\r\nimport { EnhancedTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { payoutHeader } from \"components/Utilities/tableHeaders\";\r\nimport useAlert from \"../../hooks/useAlert\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport Filter from \"components/Forms/Filters\";\r\nimport { defaultPageInfo, payoutFilterBy } from \"helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  deleteVar,\r\n  fetchMoreData,\r\n  filterData,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  iconWrapper: {\r\n    width: 20,\r\n    height: 20,\r\n    borderRadius: \"50%\",\r\n    display: \"grid\",\r\n    placeContent: \"center\",\r\n    marginLeft: \"1rem\",\r\n    background: theme.palette.common.lightGreen,\r\n  },\r\n  button: {\r\n    \"&.css-1zf5oc-MuiButtonBase-root-MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"10rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.css-1jilxo7-MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Payout = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { displayAlert } = useAlert();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [payout, setPayout] = useState([]);\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n\r\n  const [statusFilterValue, setStatusFilterValue] = useState(\"\");\r\n  const [fetchPayout, { loading, error, refetch, variables }] =\r\n    useLazyQuery(getPayoutData);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      fetchPayout({ variables: { first: pageInfo?.limit } }).then(\r\n        ({ data }) => {\r\n          if (!data) throw Error(\"Couldn't fetch doctors payout data\");\r\n          setPageInfo(data?.getEarningStats?.payoutData?.PageInfo);\r\n          setPayout(data?.getEarningStats?.payoutData?.data);\r\n        }\r\n      );\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }, [fetchPayout, pageInfo?.limit]);\r\n\r\n  const onFilterStatusChange = async (value) => {\r\n    try {\r\n      deleteVar(variables);\r\n      setStatusFilterValue(value);\r\n      const filterVariables = { status: value };\r\n\r\n      filterData(filterVariables, {\r\n        fetchData: fetchPayout,\r\n        refetch: refetch,\r\n        variables: variables,\r\n      })\r\n        .then((data) => {\r\n          setPayout(data?.getEarningStats?.payoutData?.data || []);\r\n          setPageInfo(data?.getEarningStats?.payoutData?.PageInfo || {});\r\n        })\r\n        .catch(() => {\r\n          refresh(setStatusFilterValue, \"\");\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setStatusFilterValue, \"\");\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", `Something went wrong while filtering. Try again.`);\r\n    setFilterValue(defaultVal);\r\n\r\n    deleteVar(variables);\r\n\r\n    refetch()\r\n      .then(({ data }) => {\r\n        setPayout(data?.getEarningStats?.payoutData?.data || []);\r\n        setPageInfo(data?.getEarningStats?.payoutData?.PageInfo || {});\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", `Failed to get patients data, Try again`);\r\n      });\r\n  };\r\n\r\n  const setTableData = async (response, errMsg) => {\r\n    response\r\n      .then(({ data }) => {\r\n        setPageInfo(data?.getEarningStats?.payoutData?.PageInfo);\r\n        setPayout(data?.getEarningStats?.payoutData?.data);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", errMsg);\r\n      });\r\n  };\r\n\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid container direction=\"column\" rowSpacing={2}>\r\n      <>\r\n        <Grid\r\n          item\r\n          container\r\n          justifyContent=\"space-between\"\r\n          style={{ paddingBottom: \"3rem\" }}\r\n        >\r\n          <Grid item container spacing={3} alignItems=\"center\">\r\n            <Grid item flex={1}>\r\n              <Typography noWrap variant=\"h1\" color=\"#2D2F39\">\r\n                Doctors Payout Table\r\n              </Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Filter\r\n                onHandleChange={(e) => onFilterStatusChange(e?.target?.value)}\r\n                onClickClearBtn={() => onFilterStatusChange(\"\")}\r\n                options={payoutFilterBy}\r\n                name=\"status\"\r\n                placeholder=\"None\"\r\n                value={statusFilterValue}\r\n                hasClearBtn={true}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {loading ? (\r\n          <Loader />\r\n        ) : payout.length > 0 ? (\r\n          <Grid item container>\r\n            <EnhancedTable\r\n              headCells={payoutHeader}\r\n              rows={payout}\r\n              paginationLabel=\"payout per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                const res = await changeTableLimit(fetchPayout, { first: e });\r\n                await setTableData(res, \"Failed to change table limit.\");\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                const res = await handlePageChange(\r\n                  fetchPayout,\r\n                  page,\r\n                  pageInfo,\r\n                  {}\r\n                );\r\n                await setTableData(res, \"Failed to change table page.\");\r\n              }}\r\n              fetchData={fetchPayout}\r\n              handleChangePage={fetchMoreData}\r\n            >\r\n              {payout.map((row, index) => {\r\n                const { amount, createdAt, status, _id } = row;\r\n                const isItemSelected = isSelected(_id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={_id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.black }}\r\n                    >\r\n                      {dateMoment(createdAt)}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.black }}\r\n                    >\r\n                      {timeMoment(createdAt)}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.red }}\r\n                    >\r\n                      {amount}\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <Chip\r\n                        label={status}\r\n                        className={classes.badge}\r\n                        style={{\r\n                          background:\r\n                            status === \"Success\"\r\n                              ? theme.palette.common.lightGreen\r\n                              : status === \"Failed\"\r\n                              ? theme.palette.common.lightGreen\r\n                              : theme.palette.common.lightRed,\r\n                          color:\r\n                            status === \"Success\"\r\n                              ? theme.palette.common.green\r\n                              : status === \"Failed\"\r\n                              ? theme.palette.common.danger\r\n                              : theme.palette.common.red,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={payoutHeader}\r\n            paginationLabel=\"Payout  per page\"\r\n          />\r\n        )}\r\n      </>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Payout;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\HcpAppointments.js",["1088","1089","1090","1091","1092","1093","1094","1095"],"import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Alert, Divider, Avatar, Typography } from \"@mui/material\";\r\nimport { Modals, CustomButton, Loader } from \"components/Utilities\";\r\nimport { timeConverter, timeMoment } from \"components/Utilities/Time\";\r\nimport * as Yup from \"yup\";\r\nimport { updateAppointment } from \"components/graphQL/Mutation\";\r\nimport { DeleteOrDisable } from \"components/modals\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { useQuery, useMutation } from \"@apollo/client\";\r\nimport { getAppoint, getDOCAppoint } from \"components/graphQL/useQuery\";\r\nimport { deleteAppointment } from \"components/graphQL/Mutation\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { ReactComponent as CalendarIcon } from \"assets/images/calendar.svg\";\r\nimport { ReactComponent as TimerIcon } from \"assets/images/timer.svg\";\r\nimport AssignmentIcon from \"@mui/icons-material/Assignment\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { NoData } from \"components/layouts\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  parentGridWrapper: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.1)\",\r\n\r\n    \"&:not(:last-of-type)\": {\r\n      marginBottom: \"5rem\",\r\n    },\r\n  },\r\n\r\n  infoBadge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.5rem\",\r\n      borderRadius: \"1.5rem\",\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n    },\r\n  },\r\n\r\n  title: {\r\n    \"&.MuiTypography-root\": {\r\n      color: theme.palette.common.grey,\r\n      // marginRight: \"2rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst HcpAppointments = () => {\r\n  const { hcpId } = useParams();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [appointment, setAppointment] = useState([]);\r\n  const [updateAppoint] = useMutation(updateAppointment);\r\n  const { loading, data, error } = useQuery(getDOCAppoint, {\r\n    variables: {\r\n      id: hcpId,\r\n      orderBy: \"-createdAt\",\r\n    },\r\n  });\r\n  const [deleteAppointments] = useMutation(deleteAppointment);\r\n  useEffect(() => {\r\n    if (data) {\r\n      setAppointment(data.getAppointments.data);\r\n    }\r\n  }, [data, hcpId]);\r\n  const handleDeleteOpenDialog = (id) => {\r\n    setId(id);\r\n    setdeleteModal(true);\r\n  };\r\n\r\n  const greenButton = {\r\n    background: theme.palette.common.lightGreen,\r\n    hover: theme.palette.success.light,\r\n    active: theme.palette.success.dark,\r\n  };\r\n  const [patientId, setPatientId] = useState(null);\r\n  const handleSchedule = (id, patient) => {\r\n    setIsPatients(true);\r\n    setEditid(id);\r\n    setPatientId(patient);\r\n  };\r\n  const [id, setId] = useState(null);\r\n  const [isPatients, setIsPatients] = useState(false);\r\n  const [deleteModal, setdeleteModal] = useState(false);\r\n  const [alert, setAlert] = useState(null);\r\n  const onConfirm = async () => {\r\n    try {\r\n      await deleteAppointments({\r\n        variables: { id },\r\n\r\n        refetchQueries: [\r\n          {\r\n            query: getDOCAppoint,\r\n            variables: {\r\n              id: hcpId,\r\n              orderBy: \"-createdAt\",\r\n            },\r\n          },\r\n        ],\r\n      });\r\n      setAlert({\r\n        message: \"appointment deleted successfully\",\r\n        type: \"success\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert(null);\r\n      }, 5000);\r\n    } catch (error) {\r\n      setAlert({\r\n        message: \"appointment  not successfully deleted\",\r\n        type: \"danger\",\r\n      });\r\n      setTimeout(() => {\r\n        setAlert(null);\r\n      }, 5000);\r\n      console.log(error);\r\n    }\r\n  };\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n  const handlePatientCloses = () => setIsPatients(false);\r\n  const redButton = {\r\n    background: theme.palette.common.lightRed,\r\n    hover: theme.palette.error.light,\r\n    active: theme.palette.error.dark,\r\n  };\r\n\r\n  const [editId, setEditid] = useState(null);\r\n  const initialValues1 = {\r\n    date: \"\",\r\n  };\r\n  const validationSchema1 = Yup.object({\r\n    date: Yup.string(\"select date and time \").required(\r\n      \"Date  and time is required\"\r\n    ),\r\n  });\r\n  const onSubmit1 = async (values) => {\r\n    const { date } = values;\r\n\r\n    const timeValue = timeMoment(date);\r\n    const dateValue = timeConverter(date);\r\n    await updateAppoint({\r\n      variables: {\r\n        id: editId,\r\n        date: dateValue,\r\n        time: timeValue,\r\n        doctor: hcpId,\r\n        patient: patientId,\r\n      },\r\n      refetchQueries: [\r\n        {\r\n          query: getAppoint,\r\n          variables: {\r\n            id: patientId,\r\n            orderBy: \"-createdAt\",\r\n          },\r\n        },\r\n        {\r\n          query: getDOCAppoint,\r\n          variables: {\r\n            id: hcpId,\r\n            orderBy: \"-createdAt\",\r\n          },\r\n        },\r\n      ],\r\n    });\r\n    handlePatientCloses();\r\n  };\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        gap={2}\r\n        flexWrap=\"nowrap\"\r\n        direction=\"column\"\r\n        height=\"100%\"\r\n      >\r\n        {alert && Object.keys(alert).length > 0 && (\r\n          <Alert\r\n            variant=\"filled\"\r\n            severity={alert.type}\r\n            sx={{ justifyContent: \"center\", width: \"70%\", margin: \"0 auto\" }}\r\n          >\r\n            {alert.message}\r\n          </Alert>\r\n        )}\r\n\r\n        <Grid item style={{ marginBottom: \"3rem\", padding: \"2rem\" }}>\r\n          <Typography variant=\"h2\">Doctor Appointments</Typography>\r\n        </Grid>\r\n        {appointment.length > 0 ? (\r\n          appointment.map((appoint) => (\r\n            <Grid\r\n              item\r\n              container\r\n              direction=\"column\"\r\n              key={appoint._id}\r\n              className={classes.parentGridWrapper}\r\n            >\r\n              <Grid\r\n                item\r\n                container\r\n                style={{ maxWidth: \"60rem\", padding: \"4rem 5rem\" }}\r\n              >\r\n                <Grid\r\n                  item\r\n                  container\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"space-between\"\r\n                >\r\n                  <Grid item>\r\n                    <Typography variant=\"body1\" className={classes.title}>\r\n                      Consultation Date:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item style={{ marginRight: \"1.5rem\" }}>\r\n                        <CalendarIcon\r\n                          fill={theme.palette.common.lightGrey}\r\n                          height={14}\r\n                          width={10}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography variant=\"body1\">{appoint.date}</Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item style={{ marginRight: \"1.5rem\" }}>\r\n                        <TimerIcon fill={theme.palette.common.red} />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography variant=\"body1\">{appoint.time}</Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Divider color={theme.palette.common.lighterGrey} />\r\n              <Grid item style={{ padding: \"2rem 5rem\" }}>\r\n                <Grid container gap={2} alignItems=\"center\">\r\n                  <Grid item>\r\n                    <Typography variant=\"body1\" className={classes.title}>\r\n                      Patient:\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Avatar\r\n                      src={\r\n                        appoint.patientData.picture\r\n                          ? appoint.patientData.picture\r\n                          : displayPhoto\r\n                      }\r\n                      alt=\"Display Photo of the patient\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography variant=\"body1\">{`${appoint.patientData.firstName} ${appoint.patientData.lastName}`}</Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Divider color={theme.palette.common.lighterGrey} />\r\n              <Grid item style={{ padding: \"3rem 5rem\" }}>\r\n                <Grid container direction=\"column\">\r\n                  <Grid item style={{ marginBottom: \"1rem\" }}>\r\n                    <Typography variant=\"body1\" className={classes.title}>\r\n                      Meeting Details\r\n                    </Typography>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography variant=\"body2\">\r\n                      {appoint.details ? appoint.details : \"No Value\"}\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Divider color={theme.palette.common.lighterGrey} />\r\n              <Grid item>\r\n                <Grid\r\n                  container\r\n                  justifyContent=\"flex-end\"\r\n                  style={{ padding: \"2rem 5rem\" }}\r\n                >\r\n                  <Grid item style={{ marginRight: \"3rem\" }}>\r\n                    <CustomButton\r\n                      title=\"Reschedule\"\r\n                      type={greenButton}\r\n                      height=\"3.5rem\"\r\n                      textColorOnHover=\"#fff\"\r\n                      onClick={() =>\r\n                        handleSchedule(appoint._id, appoint.patient)\r\n                      }\r\n                      textColor={theme.palette.common.green}\r\n                      endIcon={<AssignmentIcon color=\"success\" />}\r\n                      borderRadius=\"3rem\"\r\n                    />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <CustomButton\r\n                      title=\"Cancel\"\r\n                      type={redButton}\r\n                      height=\"3.5rem\"\r\n                      textColorOnHover=\"#fff\"\r\n                      onClick={() => handleDeleteOpenDialog(appoint._id)}\r\n                      textColor={theme.palette.common.red}\r\n                      endIcon={<AssignmentIcon color=\"error\" />}\r\n                      borderRadius=\"3rem\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          ))\r\n        ) : (\r\n          <NoData />\r\n        )}\r\n      </Grid>\r\n\r\n      <DeleteOrDisable\r\n        open={deleteModal}\r\n        setOpen={setdeleteModal}\r\n        title=\"Delete Appointment\"\r\n        onConfirm={onConfirm}\r\n        confirmationMsg=\"delete Appointment\"\r\n        btnValue=\"Delete\"\r\n      />\r\n\r\n      <Modals\r\n        isOpen={isPatients}\r\n        title=\"Reschedule Appointment\"\r\n        rowSpacing={5}\r\n        height=\"auto\"\r\n        handleClose={handlePatientCloses}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validationSchema={validationSchema1}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid, setFieldValue }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container direction=\"column\" gap={2}>\r\n                  <Grid item container>\r\n                    <Grid container spacing={2}>\r\n                      <Grid item md>\r\n                        <FormikControl\r\n                          control=\"time\"\r\n                          name=\"date\"\r\n                          label=\"Date\"\r\n                          placeholder=\"Choose Date and Time\"\r\n                          setFieldValue={setFieldValue}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    container\r\n                    alignItems=\"flex-end\"\r\n                    marginTop={5}\r\n                    xs={12}\r\n                  >\r\n                    <CustomButton\r\n                      title=\"Reschedule Appointment\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default HcpAppointments;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\HcpPatients.js",["1096","1097","1098","1099","1100","1101"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  Avatar,\r\n  TableRow,\r\n  Checkbox,\r\n  TableCell,\r\n  Button,\r\n} from \"@mui/material\";\r\nimport { NoData, EmptyTable, EnhancedTable } from \"components/layouts\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { hcpPatientsHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Link, useParams } from \"react-router-dom\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { getDoctorPatients } from \"components/graphQL/useQuery\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      whitespace: \"nowrap\",\r\n      maxWidth: \"15rem\",\r\n      width: \"100%\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nconst HcpPatients = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [pageInfo, setPageInfo] = useState([]);\r\n\r\n  const { hcpId } = useParams();\r\n\r\n  const { setSelectedRows } = useActions();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n\r\n  const [fetchDoctorsPatients, { loading, error, data }] =\r\n    useLazyQuery(getDoctorPatients);\r\n\r\n  useEffect(() => {\r\n    fetchDoctorsPatients({\r\n      variables: { id: hcpId },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchDoctorsPatients, hcpId]);\r\n\r\n  const [profiles, setProfiles] = useState([]);\r\n  useEffect(() => {\r\n    if (data) {\r\n      setProfiles(data.getDoctorPatients.data);\r\n      setPageInfo(data.getDoctorPatients.pageInfo);\r\n    }\r\n  }, [data]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\r\n      <Grid item>\r\n        <Typography variant=\"h2\">Doctor Patients</Typography>\r\n      </Grid>\r\n      {profiles.length > 0 ? (\r\n        <Grid item container direction=\"column\" height=\"100%\">\r\n          <EnhancedTable\r\n            headCells={hcpPatientsHeadCells}\r\n            rows={profiles}\r\n            paginationLabel=\"List Per Page\"\r\n            hasCheckbox={true}\r\n            changeLimit={async (e) => {\r\n              await changeTableLimit(fetchDoctorsPatients, {\r\n                first: e,\r\n                id: hcpId,\r\n              });\r\n            }}\r\n            dataPageInfo={pageInfo}\r\n            handlePagination={async (page) => {\r\n              await handlePageChange(fetchDoctorsPatients, page, pageInfo, {\r\n                id: hcpId,\r\n              });\r\n            }}\r\n          >\r\n            {profiles.map((row, index) => {\r\n              const { _id, patientData } = row;\r\n              const isItemSelected = isSelected(_id, selectedRows);\r\n              const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n              return (\r\n                <TableRow\r\n                  hover\r\n                  role=\"checkbox\"\r\n                  aria-checked={isItemSelected}\r\n                  tabIndex={-1}\r\n                  key={_id}\r\n                  selected={isItemSelected}\r\n                >\r\n                  <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                      onClick={() =>\r\n                        handleSelectedRows(_id, selectedRows, setSelectedRows)\r\n                      }\r\n                      color=\"primary\"\r\n                      checked={isItemSelected}\r\n                      inputProps={{\r\n                        \"aria-labelledby\": labelId,\r\n                      }}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell\r\n                    id={labelId}\r\n                    scope=\"row\"\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{ color: theme.palette.common.grey }}\r\n                  >\r\n                    {patientData && patientData?.dociId?.split(\"-\")[1]}\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <div\r\n                      style={{\r\n                        height: \"100%\",\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        textAlign: \"left\",\r\n                      }}\r\n                    >\r\n                      <span style={{ marginRight: \"1rem\" }}>\r\n                        <Avatar\r\n                          alt=\"Remy Sharp\"\r\n                          src={row.image}\r\n                          sx={{ width: 24, height: 24 }}\r\n                        />\r\n                      </span>\r\n                      <span style={{ fontSize: \"1.25rem\" }}>\r\n                        {patientData?.firstName\r\n                          ? `${patientData?.firstName} ${patientData?.lastName}`\r\n                          : \"No Patient Name\"}\r\n                        {row.lastName}\r\n                      </span>\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    {patientData?.gender && patientData?.gender}\r\n                  </TableCell>\r\n                  <TableCell>\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      className={classes.button}\r\n                      component={Link}\r\n                      to={`/patients/${patientData?._id}/profile`}\r\n                      endIcon={<ArrowForwardIosIcon />}\r\n                    >\r\n                      View Patient Profile\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </EnhancedTable>\r\n        </Grid>\r\n      ) : (\r\n        <EmptyTable\r\n          headCells={hcpPatientsHeadCells}\r\n          paginationLabel=\"List  per page\"\r\n        />\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default HcpPatients;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Financetable.js",["1102","1103","1104","1105","1106"],"import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Typography, TableCell, TableRow, Checkbox } from \"@mui/material\";\r\nimport TrendingDownIcon from \"@mui/icons-material/TrendingDown\";\r\nimport {\r\n  timeMoment,\r\n  dateMoment,\r\n  formatNumber,\r\n} from \"components/Utilities/Time\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { financeHeader } from \"components/Utilities/tableHeaders\";\r\n// import displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getEarningData } from \"components/graphQL/useQuery\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    \"&.css-1zf5oc-MuiButtonBase-root-MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"10rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n  iconWrapper: {\r\n    width: 20,\r\n    height: 20,\r\n    borderRadius: \"50%\",\r\n    display: \"grid\",\r\n    placeContent: \"center\",\r\n    background: theme.palette.common.lightGreen,\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.css-1jilxo7-MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.css-1eelh6y-MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Financetable = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [earning, setEarning] = useState([]);\r\n  const [fetchEarningData, { loading, data, error }] =\r\n    useLazyQuery(getEarningData);\r\n\r\n  useEffect(() => {\r\n    fetchEarningData({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchEarningData, pageInfo]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setEarning(data.getEarningStats.earningData.data);\r\n      setPageInfo(data.getEarningStats.earningData.PageInfo);\r\n    }\r\n  }, [earning, data]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid container direction=\"column\" gap={2} height=\"100%\">\r\n      <>\r\n        <Grid item container gap={1} alignItems=\"center\">\r\n          <Grid item flex={1}>\r\n            <Typography noWrap variant=\"h1\" component=\"div\" color=\"#2D2F39\">\r\n              Doctors Earnings table\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item className={classes.iconWrapper}>\r\n            <TrendingDownIcon color=\"success\" className={classes.cardIcon} />\r\n          </Grid>\r\n        </Grid>\r\n        {earning.length > 0 ? (\r\n          <Grid item container>\r\n            <EnhancedTable\r\n              headCells={financeHeader}\r\n              rows={earning}\r\n              paginationLabel=\"finance per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                await changeTableLimit(fetchEarningData, { first: e });\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                await handlePageChange(fetchEarningData, page, pageInfo, {});\r\n              }}\r\n            >\r\n              {earning.map((row, index) => {\r\n                const { createdAt, balance } = row;\r\n                // const { firstName, picture, lastName, specialization } = doctorData[0];\r\n                const isItemSelected = isSelected(row._id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={row._id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(\r\n                            row.id,\r\n                            selectedRows,\r\n                            setSelectedRows\r\n                          )\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.black }}\r\n                    >\r\n                      {dateMoment(createdAt)}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.black }}\r\n                    >\r\n                      {timeMoment(createdAt)}\r\n                    </TableCell>\r\n                    {/* <TableCell align=\"left\" className={classes.tableCell}>\r\n                      <div\r\n                        style={{\r\n                          height: \"100%\",\r\n                          display: \"flex\",\r\n                          alignItems: \"center\",\r\n                        }}\r\n                      >\r\n                        <span style={{ marginRight: \"1rem\" }}>\r\n                          <Avatar\r\n                            alt={firstName ? firstName : \"image\"}\r\n                            src={doctorData ? picture : displayPhoto}\r\n                            sx={{ width: 24, height: 24 }}\r\n                          />\r\n                        </span>\r\n                        <span style={{ fontSize: \"1.25rem\" }}>\r\n                          {doctorData && `${firstName} ${lastName}`}\r\n                        </span>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell align=\"left\" className={classes.tableCell}>\r\n                      {specialization ? specialization : \"No Value\"}\r\n                    </TableCell> */}\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.red }}\r\n                    >\r\n                      {formatNumber(balance.toFixed(2))}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={financeHeader}\r\n            paginationLabel=\"Finance  per page\"\r\n          />\r\n        )}\r\n      </>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Financetable;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Finance.js",["1107","1108","1109","1110","1111","1112","1113","1114","1115","1116","1117"],"import React, { useState, useEffect } from \"react\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { Loader, CircularProgressBar, FormSelect } from \"components/Utilities\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport TrendingDownIcon from \"@mui/icons-material/TrendingDown\";\r\nimport TrendingUpIcon from \"@mui/icons-material/TrendingUp\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Card } from \"components/Utilities\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getFinanceStats } from \"components/graphQL/useQuery\";\r\nimport {\r\n  financialPercent,\r\n  selectOptions,\r\n  formatNumber,\r\n} from \"components/Utilities/Time\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardContainer: {\r\n    \"&.MuiCard-root\": {\r\n      width: \"100%\",\r\n      height: \"15.8rem\",\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      flexDirection: \"column\",\r\n      alignItems: \"center\",\r\n      background: \"white\",\r\n      marginRight: \"5rem\",\r\n      \"&:hover\": {\r\n        boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.15)\",\r\n        cursor: \"pointer\",\r\n      },\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n      \"& .MuiCardContent-root .MuiTypography-h5\": {\r\n        textDecoration: \"none !important\",\r\n        textTransform: \"uppercase\",\r\n      },\r\n    },\r\n  },\r\n\r\n  iconWrapper: {\r\n    width: 60,\r\n    height: 60,\r\n    borderRadius: \"50%\",\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  cardGrid: {\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    height: \"25.8rem\",\r\n  },\r\n  flexContainer: {\r\n    justifyContent: \"space-between\",\r\n    alignItems: \"center\",\r\n    margin: \"auto\",\r\n    width: \"100%\",\r\n    \"&:first-child\": {\r\n      borderBottom: \".5px solid #F8F8F8\",\r\n    },\r\n  },\r\n  lightGreen: {\r\n    color: theme.palette.common.green,\r\n  },\r\n\r\n  lightRed: {\r\n    color: theme.palette.common.red,\r\n  },\r\n  mainContainer: {\r\n    width: \"100%\",\r\n    background: \"white\",\r\n    borderRadius: \"2rem\",\r\n    boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.15)\",\r\n  },\r\n  parentGrid: {\r\n    textDecoration: \"none\",\r\n    width: \"24.7rem\",\r\n    color: theme.palette.primary.main,\r\n    \"&.MuiGrid-item\": {\r\n      ...theme.typography.cardParentGrid,\r\n      minWidth: \"20rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n    },\r\n  },\r\n\r\n  cardIcon: {\r\n    \"&.MuiSvgIcon-root\": {\r\n      fontSize: \"3rem\",\r\n    },\r\n  },\r\n}));\r\nconst Finance = () => {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const [range, setRange] = useState(\"365\");\r\n  const [totalIncome, setTotalIncome] = useState(0);\r\n  const [totalExpenditure, setTotalExpenditure] = useState(0);\r\n  const financialValue = financialPercent(totalIncome, totalExpenditure);\r\n  const [finances, setFinances] = useState(financialValue);\r\n  const [fetchFinanceStats, { error, loading }] = useLazyQuery(getFinanceStats);\r\n\r\n  useEffect(() => {\r\n    try {\r\n      fetchFinanceStats({ variables: { q: range } }).then(({ data }) => {\r\n        if (!data) throw Error(\"couldn't fetch data\");\r\n        const { subscriptionIncome, totalPayout } = data.getEarningStats;\r\n        setTotalIncome(subscriptionIncome);\r\n        setTotalExpenditure(totalPayout);\r\n        const value = financialPercent(subscriptionIncome, totalPayout);\r\n        setFinances(value);\r\n      });\r\n    } catch (error) {\r\n      console.error(error);\r\n    }\r\n  }, [range, fetchFinanceStats]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid container gap={3}>\r\n      <Grid\r\n        item\r\n        container\r\n        rowGap={4}\r\n        padding={{ md: \"2rem 4rem\", sm: \"2rem, 4rem\", xs: \"1rem\" }}\r\n        className={classes.mainContainer}\r\n        flexDirection={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n        sx={{ alignItems: \"center\", justifyContent: \"space-between\" }}\r\n      >\r\n        <Grid item container className={classes.flexContainer}>\r\n          <Grid item>\r\n            <Typography variant=\"h1\" color=\"#2D2F39\">\r\n              Earning\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <FormSelect\r\n              placeholder=\"Select days\"\r\n              value={range}\r\n              onChange={(e) => setRange(e?.target?.value)}\r\n              options={selectOptions}\r\n              name=\"finance\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          container\r\n          alignItems=\"center\"\r\n          flexDirection={{ md: \"row\", sm: \"row\", xs: \"column\" }}\r\n          spacing={{ md: 2, xs: 2, sm: 2 }}\r\n        >\r\n          <Grid item>\r\n            <CircularProgressBar\r\n              height=\"17rem\"\r\n              width=\"17rem\"\r\n              color={theme.palette.common.green}\r\n              trailColor={theme.palette.common.red}\r\n              value={finances}\r\n              strokeWidth={8}\r\n            />\r\n          </Grid>\r\n          <Grid item flex={1}>\r\n            <Grid\r\n              container\r\n              alignItems=\"center\"\r\n              rowGap={4}\r\n              justifyContent={{\r\n                md: \"space-around\",\r\n                xs: \"flex-start\",\r\n                sm: \"space-around\",\r\n              }}\r\n            >\r\n              <Grid\r\n                item\r\n                spacing={2}\r\n                sx={{ justifyContent: \"center\", alignItems: \"center\" }}\r\n              >\r\n                <Grid\r\n                  container\r\n                  alignItems=\"center\"\r\n                  gap={{ md: 2, sm: 2, xs: 4 }}\r\n                >\r\n                  <Grid\r\n                    className={classes.iconWrapper}\r\n                    sx={{ background: theme.palette.common.lightGreen }}\r\n                  >\r\n                    <Grid item>\r\n                      <TrendingDownIcon\r\n                        color=\"success\"\r\n                        className={classes.cardIcon}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography noWrap variant=\"h2\">\r\n                      <span\r\n                        style={{\r\n                          textDecoration: \"line-through\",\r\n                          textDecorationStyle: \"double\",\r\n                        }}\r\n                      >\r\n                        N{\"\"}\r\n                      </span>\r\n                      {formatNumber(totalIncome)}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      style={{\r\n                        color: theme.palette.common.lightGrey,\r\n                      }}\r\n                    >\r\n                      Total earnings\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              {/* second */}\r\n              <Grid item>\r\n                <Grid\r\n                  container\r\n                  alignItems=\"center\"\r\n                  gap={{ md: 2, sm: 2, xs: 4 }}\r\n                >\r\n                  <Grid\r\n                    className={classes.iconWrapper}\r\n                    sx={{ background: theme.palette.common.lightRed }}\r\n                  >\r\n                    <Grid item>\r\n                      <TrendingUpIcon\r\n                        color=\"error\"\r\n                        className={classes.cardIcon}\r\n                      />\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Typography noWrap variant=\"h2\">\r\n                      <span\r\n                        style={{\r\n                          textDecoration: \"line-through\",\r\n                          textDecorationStyle: \"double\",\r\n                        }}\r\n                      >\r\n                        N{\"\"}\r\n                      </span>\r\n                      {formatNumber(+totalExpenditure)}\r\n                    </Typography>\r\n                    <Typography\r\n                      variant=\"body2\"\r\n                      style={{\r\n                        color: theme.palette.common.lightGrey,\r\n                      }}\r\n                    >\r\n                      Total withdrawal\r\n                    </Typography>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              {/* second */}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      {/* iterms */}\r\n      <Grid item container spacing={2} justifyContent=\"space-between\">\r\n        {/* 1 */}\r\n        <Grid item container md={4} sm={4} xs={12}>\r\n          <Grid item container flexDirection=\"column\">\r\n            <Link to=\"/finance/payouts\" style={{ textDecoration: \"none\" }}>\r\n              <Card\r\n                title=\"Doctor Payout\"\r\n                background={theme.palette.common.lightRed}\r\n              >\r\n                <TrendingUpIcon color=\"error\" className={classes.cardIcon} />\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n        {/* 2 */}\r\n        <Grid item container md={4} sm={4} xs={12}>\r\n          <Grid item container flexDirection=\"column\">\r\n            <Link to=\"/finance/earnings\" style={{ textDecoration: \"none\" }}>\r\n              <Card\r\n                title=\"Doctor Earnings\"\r\n                background={theme.palette.common.lightGreen}\r\n              >\r\n                <Grid className={classes.iconWrapper}>\r\n                  <TrendingDownIcon\r\n                    color=\"success\"\r\n                    className={classes.cardIcon}\r\n                  />\r\n                </Grid>\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n        {/* 3 */}\r\n        <Grid item container md={4} sm={4} xs={12}>\r\n          <Grid item container flexDirection=\"column\">\r\n            <Link to=\"/finance/sub-income\" style={{ textDecoration: \"none\" }}>\r\n              <Card\r\n                title=\"Subscription Income\"\r\n                background={theme.palette.common.lightGreen}\r\n              >\r\n                <Grid className={classes.iconWrapper}>\r\n                  <TrendingDownIcon\r\n                    color=\"success\"\r\n                    className={classes.cardIcon}\r\n                  />\r\n                </Grid>\r\n              </Card>\r\n            </Link>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nFinance.propTypes = {\r\n  /* setSelectedSubMenu: PropTypes.func, */\r\n};\r\n\r\nexport default Finance;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\EditManagement.js",["1118","1119","1120","1121","1122","1123","1124"],"import React, { useEffect, useState } from \"react\";\r\nimport { useSnackbar } from \"notistack\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { Formik, Form } from \"formik\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { EnhancedTable, NoData } from \"components/layouts\";\r\nimport { editManagement } from \"components/Utilities/tableHeaders\";\r\nimport {\r\n  PreviousButton,\r\n  CustomButton,\r\n  Loader,\r\n  Modals,\r\n} from \"components/Utilities\";\r\nimport { editRole } from \"components/graphQL/Mutation\";\r\nimport { getRoles, getRole } from \"components/graphQL/useQuery\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { TableRow, TableCell, Grid, Typography } from \"@mui/material\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { arrangeItems } from \"../../helpers/func\";\r\nimport { handleError, showSuccessMsg } from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  filterBtnGrid: {\r\n    \"&.MuiGrid-root\": {\r\n      marginRight: \"3rem\",\r\n    },\r\n  },\r\n  chip: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.25rem\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n      background: theme.palette.common.white,\r\n      color: theme.palette.common.green,\r\n      \"& .MuiChip-deleteIcon\": {\r\n        color: \"inherit\",\r\n        fontSize: \"inherit\",\r\n      },\r\n    },\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"0.5rem\",\r\n      maxWidth: \"7rem\",\r\n      fontSize: \".85rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"0.85rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".2rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n  btn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n      gap: \"4rem\",\r\n    },\r\n  },\r\n}));\r\nconst EditManagement = () => {\r\n  let history = useHistory();\r\n  const { enqueueSnackbar } = useSnackbar();\r\n  const { editId } = useParams();\r\n  const [last, setLast] = useState([]);\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const handleDialogOpen = () => setIsOpen(true);\r\n  const [role, setRole] = useState([]);\r\n  const [state, setState] = useState({\r\n    description: \"\",\r\n    name: \"\",\r\n  });\r\n  const { data, loading, error } = useQuery(getRole, {\r\n    variables: { id: editId },\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      const { name, description, permissions } = data.getRole;\r\n      setState({\r\n        name,\r\n        description,\r\n      });\r\n\r\n      setLast(permissions);\r\n      setRole(permissions === null ? [] : arrangeItems(permissions)); //h);  arrangeItems(\r\n    }\r\n  }, [data]);\r\n  const handleDialogClose = () => setIsOpen(false);\r\n  const initialValues1 = {\r\n    name: \"\",\r\n    value: \"\",\r\n  };\r\n\r\n  const onSubmit1 = (values, onSubmitProps) => {\r\n    const { name, value } = values;\r\n\r\n    const z = role.filter((i) => i.name === name);\r\n    const index = role.findIndex((object) => object.name === z[0].name);\r\n    const j = role[index];\r\n    j.value = [value, ...j.value];\r\n\r\n    setRole(role);\r\n    setLast([`${name}:${value}`, ...last]);\r\n    onSubmitProps.resetForm();\r\n  };\r\n\r\n  const [editRoles] = useMutation(editRole, {\r\n    refetchQueries: [{ query: getRoles }],\r\n  });\r\n  const onSubmit = async (values) => {\r\n    try {\r\n      const { name, description, permissions } = values;\r\n      await editRoles({\r\n        variables: {\r\n          id: editId,\r\n          name,\r\n          description,\r\n          permissions,\r\n        },\r\n      });\r\n      showSuccessMsg(\r\n        enqueueSnackbar,\r\n        Typography,\r\n        \"Premissions updated successfully.\"\r\n      );\r\n      history.push(\"/settings/management\");\r\n    } catch (error) {\r\n      handleError(error, enqueueSnackbar);\r\n    }\r\n  };\r\n\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n  };\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { name, description } = state;\r\n\r\n  const initialValues = {\r\n    permissions: last,\r\n    name,\r\n    description,\r\n  };\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <>\r\n      <Grid container direction=\"column\" rowSpacing={2}>\r\n        <Grid item>\r\n          <PreviousButton path=\"/settings/management\" />\r\n        </Grid>\r\n        <Formik\r\n          initialValues={initialValues}\r\n          onSubmit={onSubmit}\r\n          // validationSchema={validationSchema}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n          enableReinitialize\r\n        >\r\n          {({ isSubmitting }) => {\r\n            return (\r\n              <>\r\n                <Form>\r\n                  <Grid\r\n                    item\r\n                    container\r\n                    flexWrap=\"nowrap\"\r\n                    alignItems=\"center\"\r\n                    style={{ paddingBottom: \"3rem\" }}\r\n                  >\r\n                    <Grid item container alignItems=\"center\">\r\n                      <Typography\r\n                        noWrap\r\n                        variant=\"h1\"\r\n                        component=\"div\"\r\n                        color=\"#2D2F39\"\r\n                      >\r\n                        User Permissions\r\n                      </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid\r\n                      item\r\n                      container\r\n                      gap={2}\r\n                      justifyContent=\"end\"\r\n                      alignItems=\"center\"\r\n                      justifySelf=\"flex-end\"\r\n                    >\r\n                      <Grid item>\r\n                        <CustomButton\r\n                          endIcon={<AddIcon />}\r\n                          title=\"Add New Permission\"\r\n                          type={buttonType}\r\n                          role\r\n                          onClick={handleDialogOpen}\r\n                        />\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <CustomButton\r\n                          title=\"Save Permission\"\r\n                          type={buttonType}\r\n                          isSubmitting={isSubmitting}\r\n                          maxWidth=\"100%\"\r\n                          className={classes.btn}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n\r\n                  <Grid item container>\r\n                    <EnhancedTable\r\n                      headCells={editManagement}\r\n                      rows={role}\r\n                      type=\"editRole\"\r\n                      hasCheckbox={false}\r\n                    >\r\n                      {role.map((row, index) => {\r\n                        const isItemSelected = isSelected(index, selectedRows);\r\n                        const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                        return (\r\n                          <TableRow\r\n                            hover\r\n                            role=\"checkbox\"\r\n                            aria-checked={isItemSelected}\r\n                            tabIndex={-1}\r\n                            key={index}\r\n                            selected={isItemSelected}\r\n                          >\r\n                            <TableCell\r\n                              role=\"checkbox\"\r\n                              sx={{ padding: \"0 5rem\" }}\r\n                            ></TableCell>\r\n                            <TableCell\r\n                              id={labelId}\r\n                              scope=\"row\"\r\n                              align=\"left\"\r\n                              className={classes.tableCell}\r\n                              style={{ color: theme.palette.common.black }}\r\n                            >\r\n                              {row.name}\r\n                            </TableCell>\r\n                            <TableCell\r\n                              id={labelId}\r\n                              scope=\"row\"\r\n                              align=\"left\"\r\n                              style={{\r\n                                color: theme.palette.common.black,\r\n                                display: \"flex\",\r\n                              }}\r\n                            >\r\n                              {[\r\n                                row.name === \"account\" ? \"count\" : \"create\",\r\n                                \"get-all\",\r\n                                \"get\",\r\n                                \"delete\",\r\n                                \"update\",\r\n                              ].map((type, index) => {\r\n                                const value = row.value.includes(type)\r\n                                  ? `${row.name}:${type}`\r\n                                  : \"\";\r\n                                return (\r\n                                  <FormikControl\r\n                                    control=\"check\"\r\n                                    name=\"permissions\"\r\n                                    label={type}\r\n                                    key={index}\r\n                                    value={value}\r\n                                  />\r\n                                );\r\n                              })}\r\n                            </TableCell>\r\n                          </TableRow>\r\n                        );\r\n                      })}\r\n                    </EnhancedTable>\r\n                  </Grid>\r\n                </Form>\r\n              </>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Grid>\r\n      <Modals\r\n        isOpen={isOpen}\r\n        title=\"Add New Role\"\r\n        rowSpacing={5}\r\n        handleClose={handleDialogClose}\r\n      >\r\n        <Formik\r\n          initialValues={initialValues1}\r\n          onSubmit={onSubmit1}\r\n          validateOnChange={false}\r\n          validateOnMount={false}\r\n          validateOnBlur={false}\r\n        >\r\n          {({ isSubmitting, dirty, isValid }) => {\r\n            return (\r\n              <Form style={{ marginTop: \"3rem\" }}>\r\n                <Grid item container gap={4} direction=\"column\">\r\n                  <Grid item container spacing={2}>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      name=\"name\"\r\n                      label=\"Name\"\r\n                      placeholder=\"Enter Plan Name\"\r\n                    />\r\n                  </Grid>\r\n\r\n                  <Grid item container spacing={2}>\r\n                    <FormikControl\r\n                      control=\"input\"\r\n                      name=\"value\"\r\n                      label=\"Value\"\r\n                      placeholder=\"Enter Value\"\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n                <Grid item container xs={12} marginTop={20}>\r\n                  <CustomButton\r\n                    title=\"Add New Role\"\r\n                    width=\"100%\"\r\n                    type={buttonType}\r\n                  />\r\n                </Grid>\r\n              </Form>\r\n            );\r\n          }}\r\n        </Formik>\r\n      </Modals>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default EditManagement;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Email.js",["1125","1126","1127","1128","1129"],"import React, { useState, useEffect } from \"react\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport AddIcon from \"@mui/icons-material/Add\";\r\nimport { Loader, CustomButton } from \"components/Utilities\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport {\r\n  TableRow,\r\n  Alert,\r\n  TableCell,\r\n  Checkbox,\r\n  Button,\r\n  Grid,\r\n  Typography,\r\n} from \"@mui/material\";\r\nimport { Link } from \"react-router-dom\";\r\n// import Filter from \"components/Forms/Filters\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { getEmailList } from \"components/graphQL/useQuery\";\r\nimport { emailHeader } from \"components/Utilities/tableHeaders\";\r\n// import DownloadSharpIcon from \"@mui/icons-material/DownloadSharp\";\r\n// import { onFilterValueChange } from \"helpers/filterHelperFunctions\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\n// import { emailPageDefaultFilterValues } from \"helpers/mockData\";\r\n//roleFilterBy\r\nconst useStyles = makeStyles((theme) => ({\r\n  chip: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.25rem\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n      background: theme.palette.common.white,\r\n      color: theme.palette.common.green,\r\n      \"& .MuiChip-deleteIcon\": {\r\n        color: \"inherit\",\r\n        fontSize: \"inherit\",\r\n      },\r\n    },\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"0.5rem\",\r\n      maxWidth: \"7rem\",\r\n      fontSize: \".85rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"0.85rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".2rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n  btn: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.btn,\r\n      width: \"100%\",\r\n    },\r\n  },\r\n  FormLabel: {\r\n    \"&.MuiFormLabel-root\": {\r\n      ...theme.typography.FormLabel,\r\n    },\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst Email = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [\r\n    fetchEmails,\r\n    {\r\n      loading,\r\n      error,\r\n      data,\r\n      // refetch, variables\r\n    },\r\n  ] = useLazyQuery(getEmailList);\r\n  const [emails, setEmails] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetchEmails();\r\n  }, [fetchEmails]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setEmails(data.getEmailList.data);\r\n    }\r\n  }, [data]);\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [response] = useState(\"\");\r\n  /* const [searchMail, setSearchMail] = useState(\"\"); */\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  // const [filterValues, setFilterValues] = useState(emailPageDefaultFilterValues);\r\n\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <>\r\n      <Grid\r\n        container\r\n        direction=\"column\"\r\n        height=\"100%\"\r\n        flexWrap=\"nowrap\"\r\n        gap={2}\r\n      >\r\n        {response ? (\r\n          <Grid\r\n            item\r\n            width={300}\r\n            margin=\"auto\"\r\n            justifyContent=\"center\"\r\n            alignItems=\"center\"\r\n            textAlign=\"center\"\r\n          >\r\n            <Alert severity=\"success\">\r\n              <Typography variant=\"h1\">{response}</Typography>\r\n            </Alert>\r\n          </Grid>\r\n        ) : null}\r\n        <Grid\r\n          item\r\n          direction={{ sm: \"row\", xs: \"column\" }}\r\n          container\r\n          gap={{ md: 4, sm: 4, xs: 2 }}\r\n        >\r\n          {/* <Grid item flex={1}>\r\n            <Search\r\n              value={searchMail}\r\n              onChange={(e) => setSearchMail(e.target.value)}\r\n              placeholder=\"Enter your email here...\"\r\n              height=\"5rem\"\r\n            />\r\n          </Grid> */}\r\n          {/*<Grid item>\r\n            <Filter\r\n              onHandleChange={(e) =>\r\n                onFilterValueChange(\r\n                  e,\r\n                  \"role\",\r\n                  filterValues,\r\n                  setFilterValues,\r\n                  fetchEmails,\r\n                  variables,\r\n                  refetch,\r\n                )\r\n              }\r\n              options={roleFilterBy}\r\n              name=\"role\"\r\n              placeholder=\"All roles\"\r\n              value={filterValues.role}\r\n            />\r\n          </Grid>\r\n         <Grid item>\r\n            <CustomButton\r\n              endIcon={<DownloadSharpIcon />}\r\n              title=\"Download Email\"\r\n              type={buttonType}\r\n            />\r\n          </Grid> */}\r\n          <Grid item>\r\n            <CustomButton\r\n              endIcon={<AddIcon />}\r\n              component={Link}\r\n              to=\"/email/create-email\"\r\n              title=\"Add Email\"\r\n              type={buttonType}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        {/* The Search and Filter ends here */}\r\n\r\n        {loading ? (\r\n          <Loader />\r\n        ) : emails && emails.length > 0 ? (\r\n          <Grid item container direction=\"column\" height=\"100%\">\r\n            <EnhancedTable\r\n              headCells={emailHeader}\r\n              rows={emails}\r\n              paginationLabel=\"email per page\"\r\n              handleChangePage={() => console.log(\"\")}\r\n              hasCheckbox={true}\r\n              changeLimit={() => console.log(\"\")}\r\n              fetchData={() => console.log(\"\")}\r\n              dataPageInfo={{}}\r\n              hasPagination={false}\r\n            >\r\n              {emails &&\r\n                emails\r\n                  // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\r\n                  .map((row, index) => {\r\n                    const { _id, email, createdAt, role } = row;\r\n                    const isItemSelected = isSelected(_id, selectedRows);\r\n\r\n                    const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                    return (\r\n                      <TableRow\r\n                        hover\r\n                        role=\"checkbox\"\r\n                        aria-checked={isItemSelected}\r\n                        tabIndex={-1}\r\n                        key={_id}\r\n                        selected={isItemSelected}\r\n                      >\r\n                        <TableCell padding=\"checkbox\">\r\n                          <Checkbox\r\n                            onClick={() =>\r\n                              handleSelectedRows(\r\n                                _id,\r\n                                selectedRows,\r\n                                setSelectedRows\r\n                              )\r\n                            }\r\n                            color=\"primary\"\r\n                            checked={isItemSelected}\r\n                            inputProps={{\r\n                              \"aria-labelledby\": labelId,\r\n                            }}\r\n                          />\r\n                        </TableCell>\r\n\r\n                        <TableCell\r\n                          id={labelId}\r\n                          scope=\"row\"\r\n                          align=\"left\"\r\n                          className={classes.tableCell}\r\n                          style={{ color: theme.palette.common.black }}\r\n                        >\r\n                          {dateMoment(createdAt)}\r\n                        </TableCell>\r\n                        <TableCell\r\n                          id={labelId}\r\n                          scope=\"row\"\r\n                          align=\"left\"\r\n                          className={classes.tableCell}\r\n                          style={{ color: theme.palette.common.black }}\r\n                        >\r\n                          {email}\r\n                        </TableCell>\r\n\r\n                        <TableCell\r\n                          align=\"left\"\r\n                          className={classes.tableCell}\r\n                          style={{ color: theme.palette.common.red }}\r\n                        >\r\n                          {role}\r\n                        </TableCell>\r\n\r\n                        <TableCell>\r\n                          <Button\r\n                            variant=\"contained\"\r\n                            className={classes.button}\r\n                            component={Link}\r\n                            disabled\r\n                            to={`email/${index}`}\r\n                            endIcon={<ArrowForwardIosIcon />}\r\n                            /* onClick={() => setSelectedSubMenu(7)} */\r\n                          >\r\n                            View mail\r\n                          </Button>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    );\r\n                  })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={emailHeader}\r\n            paginationLabel=\"Email  per page\"\r\n          />\r\n        )}\r\n      </Grid>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Email;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\DoctorVerificationProfile.js",["1130","1131","1132"],"import React, { useEffect, useState } from \"react\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { Chip, Grid, Typography } from \"@mui/material\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport LocationOnIcon from \"@mui/icons-material/LocationOn\";\r\nimport { IoCopy } from \"react-icons/io5\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { doctor } from \"components/graphQL/useQuery\";\r\nimport { Loader, DisplayProfile } from \"components/Utilities\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\n\r\nconst DoctorVerificationProfile = () => {\r\n  const useStyles = makeStyles((theme) => ({\r\n    gridsWrapper: {\r\n      background: \"#fff\",\r\n      borderRadius: \"1rem\",\r\n      padding: \"4rem\",\r\n      boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\r\n    },\r\n\r\n    badge: {\r\n      \"&.MuiChip-root\": {\r\n        fontSize: \"1.3rem\",\r\n        //   height: \"2.7rem\",\r\n        background: theme.palette.common.lightGreen,\r\n        color: theme.palette.common.green,\r\n        borderRadius: \"1.5rem\",\r\n      },\r\n    },\r\n\r\n    cardGrid: {\r\n      background: \"#fff\",\r\n      borderRadius: \"1rem\",\r\n      padding: \"4rem 5rem\",\r\n      width: \"100%\",\r\n      boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\r\n    },\r\n\r\n    infoBadge: {\r\n      \"&.MuiChip-root\": {\r\n        fontSize: \"1.25rem\",\r\n        borderRadius: \"1.5rem\",\r\n        color: theme.palette.common.green,\r\n      },\r\n    },\r\n\r\n    link: {\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      fontSize: \"1.25rem\",\r\n      color: theme.palette.common.green,\r\n      border: `1px solid ${theme.palette.common.lightGrey}`,\r\n      padding: \".75rem\",\r\n      borderRadius: \"1.5rem\",\r\n      textDecoration: \"none\",\r\n    },\r\n\r\n    linkIcon: {\r\n      \"&.MuiSvgIcon-root\": {\r\n        fontSize: \"1.25rem\",\r\n        color: theme.palette.common.green,\r\n        marginLeft: \"1.2rem\",\r\n      },\r\n    },\r\n\r\n    locationIcon: {\r\n      \"&.MuiSvgIcon-root\": {\r\n        fontSize: \"2rem\",\r\n      },\r\n    },\r\n\r\n    buttonsGridWrapper: {\r\n      marginTop: \"5rem !important\",\r\n      height: \"16.1rem\",\r\n    },\r\n  }));\r\n  const classes = useStyles();\r\n\r\n  const { id } = useParams();\r\n  const [doctorProfile, setDoctorProfile] = useState(\"\");\r\n\r\n  const { loading, error, data } = useQuery(doctor, {\r\n    variables: {\r\n      id,\r\n    },\r\n  });\r\n  useEffect(() => {\r\n    if (data) {\r\n      setDoctorProfile(data.doctorProfile);\r\n    }\r\n  }, [data, id]);\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  const {\r\n    dociId,\r\n    picture,\r\n    firstName,\r\n    lastName,\r\n    specialization,\r\n    email,\r\n    hospital,\r\n    phoneNumber,\r\n    gender,\r\n    dob,\r\n  } = doctorProfile;\r\n  return (\r\n    <Grid container direction=\"column\" gap={3} width=\"100%\">\r\n      {/* Display photo and profile name grid */}\r\n      <Grid item container>\r\n        <DisplayProfile\r\n          fullName={`${firstName} ${lastName}`}\r\n          displayPhoto={picture}\r\n          medicalTitle=\"Medical ID\"\r\n          statusId={dociId && dociId.split(\"-\")[1]}\r\n          specialization={specialization ? specialization : \"Not assigned\"}\r\n          type=\"\"\r\n        />\r\n      </Grid>\r\n      {/* PERSONAL INFO SECTION */}\r\n      <Grid\r\n        item\r\n        container\r\n        justifyContent=\"space-between\"\r\n        gap={5}\r\n        sx={{ width: \"100%\" }}\r\n      >\r\n        {/* GENDER GRID */}\r\n        <Grid item md className={classes.cardGrid}>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            style={{ height: \"100%\" }}\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item>\r\n              <Typography variant=\"h4\">Gender</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Chip\r\n                variant=\"outlined\"\r\n                label={gender}\r\n                className={classes.infoBadge}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {/* DATE OF BIRTH GRID */}\r\n        <Grid item md className={classes.cardGrid}>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            style={{ height: \"100%\" }}\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item>\r\n              <Typography variant=\"h4\">Date of Birth</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              <Chip\r\n                variant=\"outlined\"\r\n                label={dob ? dateMoment(dob) : <span>DOB not Provided</span>}\r\n                className={classes.infoBadge}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item container justifyContent=\"space-between\" gap={5}>\r\n        {/* EMAIL ADDRESS GRID */}\r\n        <Grid item md className={classes.cardGrid}>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            style={{ height: \"100%\" }}\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item>\r\n              <Typography variant=\"h4\">Email Address</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              {email ? (\r\n                <a href={`mailto:${email}`} className={classes.link}>\r\n                  <span>{email}</span>\r\n                  <ArrowForwardIosIcon className={classes.linkIcon} />\r\n                </a>\r\n              ) : (\r\n                <span className={classes.link}>No Email Address</span>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {/* PhONE NUMBER GRID */}\r\n        <Grid item md className={classes.cardGrid}>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            style={{ height: \"100%\" }}\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item>\r\n              <Typography variant=\"h4\">Phone Number</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              {phoneNumber ? (\r\n                <a href={phoneNumber} className={classes.link}>\r\n                  <span>{phoneNumber} </span>\r\n                  <IoCopy\r\n                    className={classes.linkIcon}\r\n                    size={12.5}\r\n                    style={{ marginLeft: \"1.2rem\" }}\r\n                  />\r\n                </a>\r\n              ) : (\r\n                <span className={classes.link}>No Phone Number</span>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item container justifyContent=\"space-between\">\r\n        {/* HOSPITAL GRID */}\r\n        <Grid item md className={classes.cardGrid}>\r\n          <Grid\r\n            container\r\n            direction=\"column\"\r\n            style={{ height: \"100%\" }}\r\n            justifyContent=\"space-between\"\r\n            alignItems=\"center\"\r\n          >\r\n            <Grid item>\r\n              <Typography variant=\"h4\">Hospital</Typography>\r\n            </Grid>\r\n            <Grid item>\r\n              {hospital ? (\r\n                <a href={email} className={classes.link}>\r\n                  <span>{hospital}</span>\r\n                  <LocationOnIcon\r\n                    className={`${classes.linkIcon} ${classes.locationIcon}`}\r\n                  />\r\n                </a>\r\n              ) : (\r\n                <span className={classes.link}>No Hospital attached</span>\r\n              )}\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n        {/* PLACEHOLDER GRID */}\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default DoctorVerificationProfile;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\CreateMessage.js",["1133","1134","1135","1136","1137","1138","1139","1140","1141","1142","1143","1144"],"import React, { useEffect, useState, useCallback } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { CustomButton, PreviousButton } from \"components/Utilities\";\r\nimport { Divider, Grid, Typography } from \"@mui/material\";\r\nimport FormikControl from \"components/validation/FormikControl\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { CREATE_MESSAGE } from \"components/graphQL/Mutation\";\r\nimport { useMutation, useQuery } from \"@apollo/client\";\r\nimport { Formik, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport {\r\n  getMessage,\r\n  getProfileByDociId,\r\n  getDoctorByDociId,\r\n} from \"components/graphQL/useQuery\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridWrapper: {\r\n    \"&.MuiGrid-item\": {\r\n      borderRadius: \"1rem\",\r\n      background: \"#fff\",\r\n      padding: \"2rem 4rem\",\r\n      maxWidth: \"60rem !important\",\r\n      boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.1)\",\r\n    },\r\n  },\r\n  inputGrid: {\r\n    flex: 1,\r\n  },\r\n  heading: {\r\n    \"&.MuiTypography-root\": {\r\n      color: theme.palette.common.grey,\r\n      //   fontSize: \"1rem\"\r\n    },\r\n  },\r\n  formInput: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    fontSize: \"1.5rem\",\r\n    padding: \".5rem 1rem\",\r\n    border: \"none\",\r\n    background: \"transparent\",\r\n    color: theme.palette.common.grey,\r\n\r\n    \"&:focus\": {\r\n      outline: \"none\",\r\n    },\r\n  },\r\n  textArea: {\r\n    border: \"1px solid rgba(0, 0, 0, 0.03)\",\r\n    resize: \"none\",\r\n    borderRadius: \"0.5rem\",\r\n  },\r\n  divider: {\r\n    \"&.MuiDivider-root\": {\r\n      borderColor: \"rgba(0, 0, 0, 0.03)\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst CreateMessage = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  let history = useHistory();\r\n  const [createNewMessage] = useMutation(CREATE_MESSAGE, {\r\n    refetchQueries: [{ query: getMessage }],\r\n  });\r\n  const [recipientValue, setRecipientvalue] = useState(\"\");\r\n  const { data, refetch, error } = useQuery(getProfileByDociId, {\r\n    fetchPolicy: \"network-only\",\r\n    nextFetchPolicy: \"network-only\",\r\n  });\r\n  const { data: doctorProfile, refetch: refetch2 } = useQuery(\r\n    getDoctorByDociId,\r\n    {\r\n      fetchPolicy: \"network-only\",\r\n      nextFetchPolicy: \"network-only\",\r\n    }\r\n  );\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const validationSchema = Yup.object({\r\n    subject: Yup.string(\"Enter your subject\")\r\n      .trim()\r\n      .required(\"Subject is required\"),\r\n    textarea: Yup.string(\"Enter your message\")\r\n      .trim()\r\n      .required(\"Message is required\"),\r\n    recipient: Yup.string(\"Enter your recipient\")\r\n      .trim()\r\n      .required(\"recipients is required\"),\r\n  });\r\n\r\n  const [recipient, setRecipient] = useState(\"\");\r\n  const { firstName, lastName, _id } = recipient.length > 0 && recipient[0];\r\n\r\n  const onSubmit = async (values, onSubmitProps) => {\r\n    const id = localStorage.getItem(\"user_id\");\r\n    const { subject, textarea, recipient } = values;\r\n\r\n    try {\r\n      await createNewMessage({\r\n        variables: {\r\n          sender: id,\r\n          recipient: _id ? _id : recipient,\r\n          subject,\r\n          body: textarea,\r\n        },\r\n      });\r\n\r\n      history.push(\"/messages\");\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n    onSubmitProps.resetForm();\r\n  };\r\n  const onChange = useCallback(\r\n    async (e) => {\r\n      setRecipientvalue(e);\r\n      await refetch({\r\n        dociId: `HEALA-${e.toUpperCase()}`,\r\n      });\r\n      if ((data && data.profiles.data.length < 1) || error) {\r\n        await refetch2({ dociId: `HEALA-${e.toUpperCase()}` });\r\n      }\r\n    },\r\n    [refetch, refetch2, data, error]\r\n  );\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (data && data.profiles.data.length > 0) {\r\n        setRecipient(data.profiles.data);\r\n      }\r\n    })();\r\n  }, [data, recipientValue, onChange]);\r\n  useEffect(() => {\r\n    (async () => {\r\n      if (doctorProfile && doctorProfile.doctorProfiles.profile.length > 0) {\r\n        setRecipient(doctorProfile.doctorProfiles.profile);\r\n      }\r\n    })();\r\n  }, [doctorProfile, onChange, recipientValue]);\r\n  const initialValues = {\r\n    subject: \"\",\r\n    recipient: recipient ? `${firstName} ${lastName} ` : \"\",\r\n    textarea: \"\",\r\n  };\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n      validateOnBlur={false}\r\n      enableReinitialize\r\n    >\r\n      {({ isValid, isSubmitting, dirty, values }) => {\r\n        return (\r\n          <Form onChange={setRecipientvalue(values.recipient)}>\r\n            {/* /*setRecipientvalue(values.recipient)*/}\r\n            <Grid container direction=\"column\">\r\n              <Grid item style={{ marginBottom: \"3rem\" }}>\r\n                <PreviousButton path={`/messages`} />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" alignItems=\"center\">\r\n                <Grid item>\r\n                  <Typography variant=\"h4\" style={{ marginBottom: \"3rem\" }}>\r\n                    Create New Message\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid\r\n                  item\r\n                  container\r\n                  direction=\"column\"\r\n                  className={classes.gridWrapper}\r\n                >\r\n                  <Grid item style={{ marginBottom: \"3rem\" }}>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Recipient:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item className={classes.inputGrid}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          id=\"message\"\r\n                          onBlur={() => onChange(values.recipient)}\r\n                          name=\"recipient\"\r\n                          variant=\"standard\"\r\n                          className={classes.formInput}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid item style={{ marginBottom: \"3rem\" }}>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Subject:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item className={classes.inputGrid}>\r\n                        <FormikControl\r\n                          control=\"input\"\r\n                          id=\"subject\"\r\n                          name=\"subject\"\r\n                          variant=\"standard\"\r\n                          className={classes.formInput}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid item>\r\n                    <Grid container direction=\"column\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Message:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item style={{ height: \"15rem\" }}>\r\n                        <FormikControl\r\n                          control=\"textarea\"\r\n                          id=\"textarea\"\r\n                          name=\"textarea\"\r\n                          variant=\"standard\"\r\n                          fLabel={true}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    {/* <Divider className={classes.divider} /> */}\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    style={{ alignSelf: \"flex-end\", marginTop: \"2rem\" }}\r\n                  >\r\n                    <CustomButton\r\n                      title=\"Send Message\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                      // endIcon={<ArrowForwardIosIcon style={{ fontSize: \"1.5rem\" }} />}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n\r\n  // );\r\n};\r\n\r\nexport default CreateMessage;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Dashboard.js",["1145","1146"],"import React, { useEffect, useState } from \"react\";\r\nimport { Grid, Typography } from \"@mui/material\";\r\nimport { getProviders } from \"components/graphQL/useQuery\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { dashboard } from \"components/graphQL/useQuery\";\r\nimport {\r\n  NoData,\r\n  AvailabilityTable,\r\n  DashboardCharts,\r\n  EmptyTable,\r\n} from \"components/layouts\";\r\nimport { Loader, FormSelect } from \"components/Utilities\";\r\n\r\nconst Dashboard = () => {\r\n  const [form, setForm] = useState(\"\");\r\n  const [dropDown, setDropDown] = useState([]);\r\n  const { data: da } = useQuery(getProviders);\r\n\r\n  const { data, error, loading, refetch } = useQuery(dashboard, {\r\n    notifyOnNetworkStatusChange: true,\r\n  });\r\n\r\n  useEffect(() => {\r\n    if (da) {\r\n      const datas = da.getProviders.provider;\r\n      setDropDown(\r\n        datas &&\r\n          datas.map((i) => {\r\n            return { key: i.name, value: i._id };\r\n          })\r\n      );\r\n    }\r\n  }, [da]);\r\n  const onChange = async (e) => {\r\n    setForm(e.target.value);\r\n    await refetch({ providerId: e.target.value });\r\n  };\r\n\r\n  if (loading) return <Loader />;\r\n\r\n  if (error) return <NoData error={error} />;\r\n\r\n  return (\r\n    <Grid container direction=\"column\" gap={3}>\r\n      <Grid item container alignItems=\"center\" flexWrap={\"nowrap\"}>\r\n        <Grid item sx={{ flexGrow: 1 }}>\r\n          <Typography variant=\"h1\">Dashboard</Typography>\r\n        </Grid>\r\n\r\n        <Grid item>\r\n          <FormSelect\r\n            placeholder=\"All Stats\"\r\n            value={form}\r\n            onChange={onChange}\r\n            options={dropDown}\r\n            name=\"finance\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n      {data ? (\r\n        <>\r\n          {/* <Grid item container sx={{ overflow: \"hidden\" }}> */}\r\n          <DashboardCharts data={data} refetch={refetch} />\r\n          {/* </Grid> */}\r\n\r\n          <AvailabilityTable data={data?.getStats.availabilityCalendar} />\r\n        </>\r\n      ) : (\r\n        <EmptyTable />\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Dashboard;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\CreateEmail.js",["1147","1148","1149","1150","1151","1152","1153","1154"],"import React, { useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { CKEditor } from \"@ckeditor/ckeditor5-react\";\r\nimport ClassicEditor from \"@ckeditor/ckeditor5-build-classic\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Grid, Divider, Typography } from \"@mui/material\";\r\nimport ChipInput from \"material-ui-chip-input\";\r\nimport { PreviousButton, CustomButton } from \"components/Utilities\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { makeStyles } from \"@mui/styles\";\r\n// import ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { Formik, Field, ErrorMessage, Form } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { TextError } from \"components/Utilities/TextError\";\r\nimport { useHistory } from \"react-router\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridWrapper: {\r\n    \"&.MuiGrid-item\": {\r\n      borderRadius: \"1rem\",\r\n      background: \"#fff\",\r\n      padding: \"2rem 4rem\",\r\n      maxWidth: \"70rem !important\",\r\n      boxShadow: \"-1px 0px 10px -2px rgba(0,0,0,0.1)\",\r\n      \"& .MuiFormControl-root\": {\r\n        \"& .WAMuiChipInput-standard-6 \": {\r\n          display: \"flex\",\r\n          alignItems: \"center\",\r\n          fontSize: \"1.5rem\",\r\n        },\r\n        \"& .WAMuiChipInput-chip-16\": {\r\n          padding: \".6rem\",\r\n          fontSize: \"1.5rem\",\r\n        },\r\n      },\r\n    },\r\n  },\r\n  formInput: {\r\n    width: \"100%\",\r\n    height: \"100%\",\r\n    fontSize: \"1.5rem\",\r\n    padding: \".5rem 1rem\",\r\n    border: \"none\",\r\n    background: \"transparent\",\r\n    color: theme.palette.common.grey,\r\n    \"& .MuiChipInput-chipContainer\": {\r\n      position: \"relative\",\r\n      display: \"none\",\r\n      marginTop: 0,\r\n      border: \"none !important\",\r\n    },\r\n\r\n    \"&:focus\": {\r\n      outline: \"none\",\r\n      borderBottom: \"none !important\",\r\n    },\r\n  },\r\n  inputGrid: {\r\n    flex: 1,\r\n  },\r\n  btns: {\r\n    ...theme.typography.btn,\r\n    padding: \"2rem 3rem\",\r\n  },\r\n  heading: {\r\n    \"&.MuiTypography-root\": {\r\n      color: theme.palette.common.grey,\r\n    },\r\n  },\r\n\r\n  textArea: {\r\n    border: \"1px solid rgba(0, 0, 0, 0.03)\",\r\n    resize: \"none\",\r\n    fontSize: \"30px\",\r\n    height: 300,\r\n    borderRadius: \"0.5rem\",\r\n  },\r\n  divider: {\r\n    \"&.MuiDivider-root\": {\r\n      borderColor: \"rgba(0, 0, 0, 0.03)\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst CreateEmail = () => {\r\n  const isEvent = (event) =>\r\n    event && (event instanceof Event || event.nativeEvent instanceof Event);\r\n  const history = useHistory();\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const { emailData } = useActions();\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  const onSubmit = (values, onSubmitProps) => {\r\n    onSubmitProps.setSubmitting(false);\r\n    emailData(values);\r\n    onSubmitProps.resetForm();\r\n    history.push(\"/email\");\r\n  };\r\n  const initialValues = {\r\n    id: Math.floor(Math.random() * 100 + 1),\r\n    name: [],\r\n    message: \"\",\r\n    textarea: \"\",\r\n    entryData: \"July 17, 2021\",\r\n    plan: \"HCP\",\r\n    email: \"Sule@gmail.com\",\r\n  };\r\n  const validationSchema = Yup.object({\r\n    name: Yup.array().of(\r\n      Yup.string().email(\"Enter a valid email\").required(\"Email is required\")\r\n    ),\r\n    message: Yup.string(\"Enter your subject\").required(\"Subject is required\"),\r\n    textarea: Yup.string(\"Enter your message\").required(\"Message is required\"),\r\n  });\r\n\r\n  return (\r\n    <Formik\r\n      initialValues={initialValues}\r\n      onSubmit={onSubmit}\r\n      validateOnBlur={false}\r\n      validationSchema={validationSchema}\r\n      validateOnChange={false}\r\n      validateOnMount={false}\r\n    >\r\n      {({ isSubmitting, isValid, dirty }) => {\r\n        return (\r\n          <Form>\r\n            <Grid container direction=\"column\">\r\n              <Grid item style={{ marginBottom: \"3rem\" }}>\r\n                <PreviousButton path={`/email`} />\r\n              </Grid>\r\n              <Grid item container direction=\"column\" alignItems=\"center\">\r\n                <Grid item>\r\n                  <Typography variant=\"h4\" style={{ marginBottom: \"3rem\" }}>\r\n                    Create new Email\r\n                  </Typography>\r\n                </Grid>\r\n\r\n                <Grid\r\n                  item\r\n                  container\r\n                  direction=\"column\"\r\n                  className={classes.gridWrapper}\r\n                >\r\n                  <Grid item style={{ marginBottom: \"3rem\" }}>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Recipient(s):\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item className={classes.inputGrid}>\r\n                        <Field name=\"name\">\r\n                          {({ field, form }) => {\r\n                            const { value, name, onChange } = field;\r\n                            const { setFieldValue } = form;\r\n                            return (\r\n                              <ChipWrapper>\r\n                                <ChipInput\r\n                                  fullWidth\r\n                                  {...field}\r\n                                  name=\"name\"\r\n                                  id=\"name\"\r\n                                  value={value}\r\n                                  style={{\r\n                                    padding: \"1.2rem\",\r\n                                  }}\r\n                                  disableUnderline\r\n                                  onAdd={(newVal) => {\r\n                                    const newArr = [...value, newVal];\r\n                                    if (isEvent(newArr)) {\r\n                                      onChange(newArr);\r\n                                    } else {\r\n                                      setFieldValue(name, newArr);\r\n                                    }\r\n                                  }}\r\n                                  onDelete={(deletedVal) => {\r\n                                    const newArr = value.filter(\r\n                                      (state) => state !== deletedVal\r\n                                    );\r\n                                    if (isEvent(newArr)) {\r\n                                      onChange(newArr);\r\n                                    } else {\r\n                                      setFieldValue(name, newArr);\r\n                                    }\r\n                                  }}\r\n                                />\r\n                              </ChipWrapper>\r\n                            );\r\n                          }}\r\n                        </Field>\r\n                      </Grid>\r\n                    </Grid>\r\n                    <ErrorMessage name=\"name\" component={TextError} />\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid item style={{ marginBottom: \"3rem\" }}>\r\n                    <Grid container alignItems=\"center\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Subject:\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid item className={classes.inputGrid}>\r\n                        <Field\r\n                          id=\"message\"\r\n                          name=\"message\"\r\n                          variant=\"standard\"\r\n                          className={classes.formInput}\r\n                        />\r\n                      </Grid>\r\n                    </Grid>\r\n                    <ErrorMessage name=\"message\" component={TextError} />\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid item container>\r\n                    <Grid item container direction=\"column\" maxWidth=\"100%\">\r\n                      <Grid item>\r\n                        <Typography variant=\"body2\" className={classes.heading}>\r\n                          Message:{\" \"}\r\n                        </Typography>\r\n                      </Grid>\r\n                      <Grid\r\n                        item\r\n                        container\r\n                        sx={{ marginBottom: \"2rem\" }}\r\n                        maxWidth=\"100%\"\r\n                      >\r\n                        <Field name=\"textarea\">\r\n                          {({ field, form }) => {\r\n                            return (\r\n                              <Wrapper>\r\n                                <CKEditor\r\n                                  id=\"textarea\"\r\n                                  className=\"textarea\"\r\n                                  name=\"textarea\"\r\n                                  data={field.value}\r\n                                  editor={ClassicEditor}\r\n                                  onChange={(e, editor) => {\r\n                                    form.setFieldValue(\r\n                                      \"textarea\",\r\n                                      editor.getData(\"text\")\r\n                                    );\r\n                                  }}\r\n                                />\r\n                              </Wrapper>\r\n                            );\r\n                          }}\r\n                        </Field>\r\n                      </Grid>\r\n                    </Grid>\r\n                    <ErrorMessage name=\"textarea\" component={TextError} />\r\n                    <Divider className={classes.divider} />\r\n                  </Grid>\r\n                  <Grid\r\n                    item\r\n                    style={{ alignSelf: \"flex-end\", marginTop: \"2rem\" }}\r\n                  >\r\n                    <CustomButton\r\n                      title=\"Send Mail\"\r\n                      width=\"100%\"\r\n                      type={buttonType}\r\n                      isSubmitting={isSubmitting}\r\n                      disabled={!(dirty || isValid)}\r\n                    />\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Form>\r\n        );\r\n      }}\r\n    </Formik>\r\n  );\r\n};\r\nconst Wrapper = styled.div`\r\n  display: inline-block;\r\n  max-width: 100%;\r\n  margin-bottom: 2rem;\r\n  font-size: 1.5rem !important;\r\n  overflow: scroll;\r\n  p {\r\n    height: 50px;\r\n    max-height: 200px;\r\n    overflow: scroll;\r\n  }\r\n`;\r\nconst ChipWrapper = styled.div`\r\n  font-size: 1.4rem;\r\n`;\r\n\r\nexport default CreateEmail;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Consultations.js",["1155","1156","1157","1158","1159","1160"],"import React, { useEffect, useState } from \"react\";\r\nimport { dateMoment } from \"components/Utilities/Time\";\r\nimport { Link } from \"react-router-dom\";\r\nimport {\r\n  Grid,\r\n  Typography,\r\n  TableRow,\r\n  TableCell,\r\n  Checkbox,\r\n  Button,\r\n  Avatar,\r\n} from \"@mui/material\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport { consultationsHeadCells4 } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getConsultations } from \"components/graphQL/useQuery\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableCell: {\r\n    \"&.css-1jilxo7-MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"12rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\n/* const filterOptions = [\r\n  { id: 0, value: \"Name\" },\r\n  { id: 1, value: \"Date\" },\r\n  { id: 2, value: \"Description\" },\r\n]; */\r\n\r\nconst Consultations = () => {\r\n  const [pageInfo, setPageInfo] = useState({});\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { patientConsultation } = useActions();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const [consultations, setConsultations] = useState([]);\r\n  const { setSelectedRows } = useActions();\r\n  const { patientId } = useParams();\r\n\r\n  const [fetchConsultations, { loading, data, error }] =\r\n    useLazyQuery(getConsultations);\r\n\r\n  useEffect(() => {\r\n    fetchConsultations({\r\n      variables: {\r\n        id: patientId,\r\n        orderBy: \"-createdAt\",\r\n      },\r\n    });\r\n  }, [fetchConsultations, patientId]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setConsultations(data.getConsultations.data);\r\n      patientConsultation(data);\r\n      setPageInfo(data.getConsultations.pageInfo);\r\n    }\r\n  }, [data, consultations, patientConsultation]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error.message} />;\r\n\r\n  return (\r\n    <Grid container gap={2} flexWrap=\"nowrap\" direction=\"column\" height=\"100%\">\r\n      <Grid\r\n        item\r\n        container\r\n        flexWrap=\"nowrap\"\r\n        justifyContent=\"space-between\"\r\n        alignItems=\"center\"\r\n        sx={{ margin: \"1rem 0rem\" }}\r\n      >\r\n        <Grid item flex={1}>\r\n          <Typography variant=\"h2\">Consultations</Typography>\r\n        </Grid>\r\n        {/* <Grid item>\r\n          <FilterList options={filterOptions} title=\"Filter\" />\r\n        </Grid> */}\r\n      </Grid>\r\n      {consultations.length > 0 ? (\r\n        <Grid item container direction=\"column\" height=\"100%\">\r\n          <EnhancedTable\r\n            headCells={consultationsHeadCells4}\r\n            rows={consultations}\r\n            paginationLabel=\"Patients per page\"\r\n            hasCheckbox={true}\r\n            changeLimit={async (e) => {\r\n              await changeTableLimit(fetchConsultations, {\r\n                first: e,\r\n                id: patientId,\r\n              });\r\n            }}\r\n            dataPageInfo={pageInfo}\r\n            handlePagination={async (page) => {\r\n              await handlePageChange(fetchConsultations, page, pageInfo, {\r\n                id: patientId,\r\n              });\r\n            }}\r\n          >\r\n            {consultations.map((row, index) => {\r\n              const { doctorData } = row;\r\n              const isItemSelected = isSelected(row._id, selectedRows);\r\n              const labelId = `enhanced-table-checkbox-${index}`;\r\n              return (\r\n                <TableRow\r\n                  hover\r\n                  role=\"checkbox\"\r\n                  aria-checked={isItemSelected}\r\n                  tabIndex={-1}\r\n                  key={row._id}\r\n                  selected={isItemSelected}\r\n                >\r\n                  <TableCell padding=\"checkbox\">\r\n                    <Checkbox\r\n                      onClick={() =>\r\n                        handleSelectedRows(\r\n                          row._id,\r\n                          selectedRows,\r\n                          setSelectedRows\r\n                        )\r\n                      }\r\n                      color=\"primary\"\r\n                      checked={isItemSelected}\r\n                      inputProps={{\r\n                        \"aria-labelledby\": labelId,\r\n                      }}\r\n                    />\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    {dateMoment(row.createdAt)}\r\n                  </TableCell>\r\n                  <TableCell\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{ maxWidth: \"25rem\" }}\r\n                  >\r\n                    <div\r\n                      style={{\r\n                        height: \"100%\",\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                      }}\r\n                    >\r\n                      <span style={{ marginRight: \"1rem\" }}>\r\n                        <Avatar\r\n                          alt={`Display Photo of ${doctorData.firstName}`}\r\n                          src={\r\n                            doctorData.picture\r\n                              ? doctorData.picture\r\n                              : displayPhoto\r\n                          }\r\n                          sx={{ width: 24, height: 24 }}\r\n                        />\r\n                      </span>\r\n                      <span style={{ fontSize: \"1.25rem\" }}>\r\n                        {doctorData.firstName\r\n                          ? `${doctorData.firstName} ${doctorData.lastName}`\r\n                          : \"No Doctor\"}\r\n                      </span>\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Grid container gap={1}>\r\n                      {row.symptoms\r\n                        ? row.symptoms.map((i) => {\r\n                            return <p key={i.name}>{i.name}</p>;\r\n                          })\r\n                        : \"No Value\"}\r\n                    </Grid>\r\n                  </TableCell>\r\n                  <TableCell\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{\r\n                      color: theme.palette.common.grey,\r\n                      width: \"4rem\",\r\n                    }}\r\n                  >\r\n                    {row.contactMedium ? row.contactMedium : \"No Value\"}\r\n                  </TableCell>\r\n                  <TableCell\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{\r\n                      color: theme.palette.common.grey,\r\n                    }}\r\n                  >\r\n                    {row.type ? row.type : \"No Value\"}\r\n                  </TableCell>\r\n                  <TableCell\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{\r\n                      color: theme.palette.common.grey,\r\n                    }}\r\n                  >\r\n                    {row.status ? row.status : \"No Value\"}\r\n                  </TableCell>\r\n                  <TableCell align=\"left\">\r\n                    <Button\r\n                      variant=\"contained\"\r\n                      className={classes.button}\r\n                      component={Link}\r\n                      to={`/patients/${patientId}/consultations/case-notes/${row._id}`}\r\n                      endIcon={<ArrowForwardIosIcon />}\r\n                    >\r\n                      View Details\r\n                    </Button>\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n            })}\r\n          </EnhancedTable>\r\n        </Grid>\r\n      ) : (\r\n        <EmptyTable\r\n          headCells={consultationsHeadCells4}\r\n          paginationLabel=\"Patients per page\"\r\n        />\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Consultations;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\Administrator.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\DashboardChart.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\CaseNotes.js",["1161","1162","1163","1164","1165","1166","1167","1168","1169","1170","1171","1172","1173","1174","1175"],"import React, { useEffect, useState, Fragment } from \"react\";\r\nimport { Grid, Typography, Divider, Chip, Avatar } from \"@mui/material\";\r\nimport { Modals, CustomButton, Loader } from \"components/Utilities\";\r\nimport Copy from \"components/Copy\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { NoData } from \"components/layouts\";\r\nimport { useParams } from \"react-router-dom\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { getConsult } from \"components/graphQL/useQuery\";\r\nimport { trucateString } from \"helpers/filterHelperFunctions\";\r\nimport { dateMoment, duration, daily } from \"components/Utilities/Time\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  parentGridWrapper: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.1)\",\r\n\r\n    \"&:not(:last-of-type)\": {\r\n      marginBottom: \"5rem\",\r\n    },\r\n  },\r\n\r\n  infoBadge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.5rem\",\r\n      borderRadius: \"1.5rem\",\r\n      background: theme.palette.common.lightGreen,\r\n      color: theme.palette.common.green,\r\n    },\r\n  },\r\n\r\n  title: {\r\n    \"&.MuiTypography-root\": {\r\n      color: theme.palette.common.grey,\r\n      // marginRight: \"2rem\",\r\n      whitespace: \"wrap\",\r\n    },\r\n  },\r\n  item: {\r\n    padding: \"2rem 3rem\",\r\n    justifyContent: \"space-between\",\r\n    width: \"100%\",\r\n    flexWrap: \"nowrap\",\r\n    // justifyContent: \"space-between\",\r\n    \"&.MuiGrid-root > *\": {\r\n      flex: 1,\r\n    },\r\n  },\r\n  subItem: {\r\n    \"&.MuiGrid-container\": {\r\n      flexDirection: \"column\",\r\n      wordBreak: \"break-word\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst CaseNotes = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { rowId } = useParams();\r\n  const [caseNoteState, setCaseNoteState] = useState([]);\r\n\r\n  const { loading, data, error } = useQuery(getConsult, {\r\n    variables: {\r\n      id: rowId,\r\n    },\r\n  });\r\n\r\n  const buttonType = {\r\n    background: theme.palette.common.black,\r\n    hover: theme.palette.primary.main,\r\n    active: theme.palette.primary.dark,\r\n    disabled: theme.palette.common.black,\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setCaseNoteState(data.getConsultation);\r\n    }\r\n  }, [data, rowId]);\r\n\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const handleDialogOpen = () => {\r\n    setIsOpen(true);\r\n  };\r\n  const handleDialogClose = () => {\r\n    setIsOpen(false);\r\n  };\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  const {\r\n    prescription,\r\n    type,\r\n    consultationOwner,\r\n    referralId,\r\n    createdAt,\r\n    discomfortLevel,\r\n    status,\r\n    description,\r\n    updatedAt,\r\n    doctorData,\r\n    doctorNote,\r\n    severity,\r\n    firstNotice,\r\n    contactMedium,\r\n    symptoms,\r\n  } = caseNoteState;\r\n\r\n  return (\r\n    <>\r\n      <Grid container direction=\"column\" gap={2}>\r\n        <Grid item>\r\n          <Typography variant=\"h2\">Consultation Details</Typography>\r\n        </Grid>\r\n\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          className={classes.parentGridWrapper}\r\n        >\r\n          <Grid\r\n            item\r\n            container\r\n            flexWrap=\"wrap\"\r\n            className={classes.item}\r\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\r\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\r\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\r\n          >\r\n            <Grid item>\r\n              <Grid container className={classes.subItem} gap={2}>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Consultation Date:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item container>\r\n                  <Typography variant=\"h5\">{dateMoment(createdAt)}</Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid item container className={classes.subItem} gap={2}>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Referral:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  {referralId ? (\r\n                    <Grid item container gap={2}>\r\n                      <Typography variant=\"body1\">\r\n                        {trucateString(referralId, 10)}\r\n                      </Typography>\r\n                      <Copy text={referralId} name=\"Consultation ID\" />\r\n                    </Grid>\r\n                  ) : (\r\n                    \"No value\"\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid\r\n                item\r\n                container\r\n                flexDirection=\"column\"\r\n                gap={2}\r\n                className={classes.subItem}\r\n              >\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Consultation ID:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  {referralId ? (\r\n                    <Grid item container gap={2}>\r\n                      <Typography variant=\"h5\">\r\n                        {trucateString(referralId, 10)}\r\n                      </Typography>\r\n                      <Copy text={referralId} name=\"Consultation ID\" />\r\n                    </Grid>\r\n                  ) : (\r\n                    <Typography variant=\"h5\"> No value</Typography>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider color={theme.palette.common.lighterGrey} />\r\n          <Grid\r\n            item\r\n            container\r\n            className={classes.item}\r\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\r\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\r\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\r\n          >\r\n            <Grid item>\r\n              <Grid container className={classes.subItem} gap={2}>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Doctor:\r\n                  </Typography>\r\n                </Grid>\r\n                {doctorData && Object.keys(doctorData).length > 0 ? (\r\n                  <Grid item container alignItems=\"center\">\r\n                    <Grid item marginRight={2}>\r\n                      <Avatar\r\n                        src={doctorData.image}\r\n                        alt={`Display photo of the ${doctorData.firstName}`}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Typography variant=\"h5\">{`${doctorData.firstName} ${doctorData.lastName}`}</Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                ) : (\r\n                  <Typography variant=\"h5\">No Doctor</Typography>\r\n                )}\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid item container className={classes.subItem} gap={2}>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Contact:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\">\r\n                    {contactMedium ? contactMedium : \"No Value\"}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid item container className={classes.subItem} gap={2}>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Owner:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\">\r\n                    {consultationOwner ? consultationOwner : \"No Value\"}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider color={theme.palette.common.lighterGrey} />\r\n\r\n          <Grid\r\n            item\r\n            container\r\n            className={classes.item}\r\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\r\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\r\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\r\n          >\r\n            <Grid item container className={classes.subItem} gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Severity:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Grid container gap={1}>\r\n                  <Typography variant=\"body1\">\r\n                    {severity ? severity : \"No value\"}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container className={classes.subItem} gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  First Notice:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"body1\">\r\n                  {\" \"}\r\n                  {firstNotice ? firstNotice : \"No value\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container className={classes.subItem} gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Discomfort:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"body1\">\r\n                  {discomfortLevel ? discomfortLevel : \"No Value\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Divider color={theme.palette.common.lighterGrey} />\r\n          <Grid\r\n            item\r\n            container\r\n            className={classes.item}\r\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\r\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\r\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\r\n          >\r\n            <Grid item container className={classes.subItem} gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Symptoms:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Grid container gap={1}>\r\n                  {symptoms ? (\r\n                    symptoms.map((symptom, index) => {\r\n                      return (\r\n                        <Typography key={index} variant=\"body1\">\r\n                          {`${symptom.name},`}\r\n                        </Typography>\r\n                      );\r\n                    })\r\n                  ) : (\r\n                    <Typography variant=\"body1\">No Value</Typography>\r\n                  )}\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid\r\n                item\r\n                container\r\n                flexDirection=\"column\"\r\n                className={classes.subItem}\r\n                gap={2}\r\n              >\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Status:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Chip\r\n                    variant=\"contained\"\r\n                    label={status}\r\n                    className={classes.infoBadge}\r\n                  />\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid item container className={classes.subItem} gap={2}>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Type:\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\">\r\n                    {type ? type : \"No Value\"}\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider color={theme.palette.common.lighterGrey} />\r\n          <Grid\r\n            item\r\n            container\r\n            className={classes.item}\r\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\r\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\r\n            rowGap={{ xs: \"1.5rem\", sm: \"1.5rem\" }}\r\n          >\r\n            <Grid item container className={classes.subItem} gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Description:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}>\r\n                  {description ? description : \"No Value\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container direction=\"column\" gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Doctors Note:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}>\r\n                  {doctorNote ? doctorNote : \"No Value\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container direction=\"column\" gap={2}>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Updated At:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}>\r\n                  {dateMoment(updatedAt)}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider color={theme.palette.common.lighterGrey} />\r\n          <Grid\r\n            item\r\n            container\r\n            style={{ padding: \"2rem 3rem\" }}\r\n            justifyContent=\"flex-end\"\r\n          >\r\n            {prescription && (\r\n              <Grid item container width={{ md: \"20%\", xs: \"100%\", sm: \"50%\" }}>\r\n                <CustomButton\r\n                  title=\"View Prescription\"\r\n                  width=\"100%\"\r\n                  type={buttonType}\r\n                  onClick={handleDialogOpen}\r\n                />\r\n              </Grid>\r\n            )}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n\r\n      <Modals\r\n        isOpen={isOpen}\r\n        height={{ xs: \"90vh\" }}\r\n        title=\"Prescription\"\r\n        width={{ md: \"50vw\", sm: \"70vw\", xs: \"90vw\" }}\r\n        rowSpacing={2}\r\n        handleClose={handleDialogClose}\r\n      >\r\n        <Grid item container width=\"100%\" direction=\"row\">\r\n          <Grid\r\n            item\r\n            container\r\n            padding={{ md: \"2rem 0\", sm: \"1rem 0\", xs: \"1rem 0\" }}\r\n            // alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n            width=\"100%\"\r\n            flexDirection={{ xs: \"column\", sm: \"row\", md: \"row\" }}\r\n            alignItems={{ md: \"center\", xs: \"flex-start\", sm: \"flex-start\" }}\r\n            rowGap={{ xs: \"1rem\", sm: \"1.5rem\" }}\r\n          >\r\n            <Grid item>\r\n              <Grid\r\n                item\r\n                container\r\n                className={classes.subItem}\r\n                gap={{ md: 2, sm: 2, xs: 0 }}\r\n              >\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Doctor:\r\n                  </Typography>\r\n                </Grid>\r\n                {doctorData && Object.keys(doctorData).length > 0 ? (\r\n                  <Grid container alignItems=\"center\">\r\n                    <Grid item marginRight={2}>\r\n                      <Avatar\r\n                        src={doctorData.image}\r\n                        alt={`Display photo of the ${doctorData.firstName}`}\r\n                      />\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Typography variant=\"h5\">{`${doctorData.firstName} ${doctorData.lastName}`}</Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                ) : (\r\n                  <Typography variant=\"body1\">No Doctor</Typography>\r\n                )}\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid\r\n                item\r\n                container\r\n                className={classes.subItem}\r\n                gap={{ md: 2, sm: 2, xs: 0 }}\r\n              >\r\n                <Grid>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Prescription Date\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"h5\">{dateMoment(createdAt)}</Typography>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item>\r\n              <Grid\r\n                item\r\n                container\r\n                className={classes.subItem}\r\n                gap={{ md: 2, sm: 2, xs: 0 }}\r\n              >\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Symptoms\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Grid container gap={1}>\r\n                    {symptoms ? (\r\n                      symptoms.map((i) => {\r\n                        return (\r\n                          <Typography key={i.name} variant=\"h5\">\r\n                            {i.name}\r\n                          </Typography>\r\n                        );\r\n                      })\r\n                    ) : (\r\n                      <Typography variant=\"h5\">No Value</Typography>\r\n                    )}\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n          <Divider color={theme.palette.common.lighterGrey} />\r\n          {prescription && (\r\n            <Fragment>\r\n              <Grid\r\n                item\r\n                container\r\n                style={{ padding: \"2rem 0rem\" }}\r\n                alignItems=\"center\"\r\n                justifyContent=\"space-between\"\r\n                sx={{ flexWrap: \"nowrap\" }}\r\n              >\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Drug\r\n                  </Typography>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Dosage\r\n                  </Typography>\r\n                </Grid>\r\n\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Frequency\r\n                  </Typography>\r\n                </Grid>\r\n                <Grid item>\r\n                  <Typography variant=\"body1\" className={classes.title}>\r\n                    Mode\r\n                  </Typography>\r\n                </Grid>\r\n              </Grid>\r\n              <Divider color={theme.palette.common.lighterGrey} />\r\n            </Fragment>\r\n          )}\r\n\r\n          {prescription &&\r\n            prescription.map((i, index) => {\r\n              return (\r\n                <>\r\n                  <Grid\r\n                    key={index}\r\n                    item\r\n                    container\r\n                    style={{ color: \"#4f4f4f\" }}\r\n                    alignItems=\"center\"\r\n                    justifyContent=\"space-between\"\r\n                    sx={{ flexWrap: \"nowrap\", textAlign: \"left\" }}\r\n                  >\r\n                    <Grid item>\r\n                      <Typography variant=\"body1\" className={classes.title}>\r\n                        {i.drugName}\r\n                      </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                      <Typography variant=\"body1\" className={classes.title}>\r\n                        {`${i.dosageQuantity} ${i.dosage}`}\r\n                      </Typography>\r\n                    </Grid>\r\n\r\n                    <Grid item>\r\n                      <Typography variant=\"body1\" className={classes.title}>\r\n                        {duration(i.dosageFrequency.duration)}{\" \"}\r\n                        {daily(i.dosageFrequency.day)}\r\n                      </Typography>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Typography variant=\"body1\" className={classes.title}>\r\n                        {i.mode}\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Divider color={theme.palette.common.lighterGrey} />\r\n                </>\r\n              );\r\n            })}\r\n          <Grid\r\n            item\r\n            container\r\n            padding={{ md: \"2rem 0\", sm: \"1rem 0\", xs: \"1rem 0\" }}\r\n            alignItems=\"center\"\r\n            justifyContent=\"space-between\"\r\n            sx={{ flexWrap: \"nowrap\" }}\r\n          >\r\n            <Grid\r\n              item\r\n              container\r\n              direction=\"column\"\r\n              gap={{ md: 2, sm: 2, xs: 0 }}\r\n            >\r\n              <Grid item>\r\n                <Typography variant=\"body1\" className={classes.title}>\r\n                  Doctors Note:\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item>\r\n                <Typography variant=\"body1\" style={{ lineHeight: 1.85 }}>\r\n                  {doctorNote ? doctorNote : \"No Value\"}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n      </Modals>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default CaseNotes;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\EmptyTable.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\Notifications.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\HeaderProfile.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\EnhancedTableAction.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\NoData.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\Backdrop.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\CircularProgress.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\Search.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\SearchInput.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\LineChart.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\Modal.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\FormSelect.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\LinearProgress.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\FilterList.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\ProfileCard.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\DataGrid.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\FormInput.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\CircularChart.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\CheckBox.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\Card.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\SideMenu.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\Header.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\HeaderContents.js",["1176","1177","1178","1179","1180","1181","1182"],"import React, { Fragment, useState, useEffect, useMemo } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { Typography, Toolbar, Grid } from \"@mui/material\";\r\nimport ArrowUpwardIcon from \"@mui/icons-material/ArrowUpward\";\r\nimport { Link, useLocation, useHistory } from \"react-router-dom\";\r\nimport KeyboardArrowRightIcon from \"@mui/icons-material/KeyboardArrowRight\";\r\nimport HeaderProfile from \"./HeaderProfile\";\r\nimport { findAccounts } from \"components/graphQL/useQuery\";\r\nimport { getPatients, DoctorCount } from \"components/graphQL/useQuery\";\r\nimport { patterns, predicateBreadcrumbFromUrl } from \"helpers/breadcrumb\";\r\nimport { propTypes } from \"react-bootstrap/esm/Image\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  toolbar: {\r\n    alignItems: \"center\",\r\n    // width: \"100%\",\r\n    height: \"100%\",\r\n    flex: 1,\r\n    justifyContent: \"space-between\",\r\n  },\r\n  text: {\r\n    color: theme.palette.common.lightGrey,\r\n    fontSize: \"clamp(1rem, 1.2vw, 1.5rem)\",\r\n    fontWeight: 300,\r\n  },\r\n  name: {\r\n    fontSize: \"clamp(1.5rem, 1.5vw, 2rem)\", //clamp(1.5rem, 1.5vw, 2.25rem)\r\n    fontWeight: 300,\r\n  },\r\n  titleWrapper: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n  link: {\r\n    textDecoration: \"none\",\r\n  },\r\n  title: {\r\n    // fontSize: \"clamp(1.2rem, 1vw+1rem, 2.4rem )\",\r\n    fontSize: \"clamp(1.5rem, 1.5vw, 2.25rem)\",\r\n    color: theme.palette.common.red,\r\n    \"&.MuiTypography-root\": {\r\n      marginRight: \".5rem\",\r\n    },\r\n  },\r\n  subtitle: {\r\n    color: theme.palette.common.green,\r\n    \"&.MuiTypography-root\": {\r\n      fontSize: \"clamp(0.6rem, 1vw + .5rem, 1.25rem)\",\r\n      marginLeft: \".5rem\",\r\n      alignSelf: \"flex-end\",\r\n    },\r\n  },\r\n  customSubHeaderWrapper: {\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n  },\r\n}));\r\n\r\nconst CustomHeaderText = ({ title, total, path }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      flex={1}\r\n      flexDirection=\"column\"\r\n      justifyContent=\"center\"\r\n      rowGap={1}\r\n    >\r\n      <Grid item container flexWrap=\"nowrap\" alignItems=\"center\">\r\n        <Link to={`/${path}`} className={classes.link}>\r\n          <Typography variant=\"h3\" classes={{ root: classes.title }}>\r\n            {title}\r\n          </Typography>\r\n        </Link>\r\n        <ArrowUpwardIcon color=\"success\" />\r\n      </Grid>\r\n      <Grid item>\r\n        <Typography variant=\"h5\" className={classes.subtitle}>\r\n          {total} total\r\n        </Typography>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nCustomHeaderText.propTypes = {\r\n  title: PropTypes.string,\r\n  total: PropTypes.number,\r\n  path: PropTypes.string,\r\n  data: PropTypes.object,\r\n};\r\n\r\nconst CustomHeaderTitle = ({ title, path, onClick = null }) => {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <div className={classes.titleWrapper}>\r\n      {!onClick ? (\r\n        <Link to={`/${path}`} className={classes.link}>\r\n          <Typography>{title}</Typography>\r\n        </Link>\r\n      ) : (\r\n        <Typography\r\n          sx={{\r\n            cursor: \"pointer\",\r\n          }}\r\n          onClick={onClick}\r\n          variant=\"h3\"\r\n          classes={{ root: classes.title }}\r\n        >\r\n          {title}\r\n        </Typography>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nCustomHeaderTitle.propTypes = {\r\n  onClick: propTypes.func,\r\n  title: PropTypes.string,\r\n  path: PropTypes.string,\r\n  variant: PropTypes.string,\r\n};\r\n\r\n// SUBMENU HEADERS\r\nconst CustomSubHeaderText = (props) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const {\r\n    title,\r\n    subTitle,\r\n    subSubTitle,\r\n    scopedSubTitle,\r\n    scopedMenu,\r\n    scopedSubMenu,\r\n    titleColor = theme.palette.common.red,\r\n  } = props;\r\n\r\n  return (\r\n    <div className={classes.customSubHeaderWrapper}>\r\n      <Typography variant=\"h3\" style={{ color: theme.palette.common.grey }}>\r\n        {title}\r\n      </Typography>\r\n      <KeyboardArrowRightIcon\r\n        style={{\r\n          fontSize: \"2rem\",\r\n          color: theme.palette.common.grey,\r\n        }}\r\n      />\r\n      <Typography\r\n        variant=\"h3\"\r\n        classes={{ root: classes.title }}\r\n        style={{\r\n          color: titleColor,\r\n        }}\r\n      >\r\n        {subTitle}\r\n      </Typography>\r\n      {scopedMenu !== 0 && (\r\n        <Fragment>\r\n          <KeyboardArrowRightIcon\r\n            style={{ fontSize: \"2rem\", color: theme.palette.common.grey }}\r\n          />\r\n          <Typography\r\n            variant=\"h3\"\r\n            classes={{ root: classes.title }}\r\n            style={{\r\n              color:\r\n                scopedSubMenu === 0\r\n                  ? theme.palette.common.red\r\n                  : theme.palette.common.grey,\r\n            }}\r\n          >\r\n            {subSubTitle}\r\n          </Typography>\r\n        </Fragment>\r\n      )}\r\n\r\n      {scopedSubMenu !== 0 && (\r\n        <Fragment>\r\n          <KeyboardArrowRightIcon\r\n            style={{ fontSize: \"2rem\", color: theme.palette.common.grey }}\r\n          />\r\n          <Typography\r\n            variant=\"h3\"\r\n            classes={{ root: classes.title }}\r\n            style={{ color: theme.palette.common.red }}\r\n          >\r\n            {scopedSubTitle}\r\n          </Typography>\r\n        </Fragment>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nCustomSubHeaderText.propTypes = {\r\n  title: PropTypes.string,\r\n  subTitle: PropTypes.string,\r\n  subSubTitle: PropTypes.string,\r\n  scopedSubTitle: PropTypes.string,\r\n  titleColor: PropTypes.string,\r\n  scopedMenu: PropTypes.number,\r\n  scopedSubMenu: PropTypes.number,\r\n  data: PropTypes.object,\r\n};\r\n\r\n// HEADER DYNAMIC RENDERING COMPONENT\r\nconst HeaderText = () => {\r\n  const classes = useStyles();\r\n  const { pathname } = useLocation();\r\n  const email = localStorage.getItem(\"email\");\r\n  const [profileAcc, setProfileAcc] = useState([]);\r\n  const [docCount, setDocCount] = useState([]);\r\n  const [patientCount, setPatientCount] = useState([]);\r\n\r\n  const breadcrumbs = useMemo(\r\n    () => predicateBreadcrumbFromUrl(patterns, pathname.substring(1)),\r\n    [pathname]\r\n  );\r\n\r\n  const [profile, { data }] = useLazyQuery(findAccounts, {\r\n    variables: { email },\r\n  });\r\n\r\n  const [patient, patientContent] = useLazyQuery(getPatients);\r\n  const [doctor, doctorContent] = useLazyQuery(DoctorCount, {\r\n    fetchPolicy: \"cache-first\",\r\n  });\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      profile();\r\n      if (data) {\r\n        setProfileAcc(data.accounts.data[0]);\r\n      }\r\n    })();\r\n  }, [profile, email, data]);\r\n\r\n  useEffect(() => {\r\n    (async () => {\r\n      patient();\r\n      doctor();\r\n      if (patientContent.data)\r\n        setPatientCount(patientContent.data.profiles.pageInfo.totalDocs);\r\n      if (doctorContent.data) setDocCount(doctorContent.data.DoctorCount);\r\n    })();\r\n  }, [doctor, patient, patientContent.data, doctorContent.data]);\r\n\r\n  const counts = {\r\n    Doctors: docCount,\r\n    Patients: patientCount,\r\n  };\r\n\r\n  switch (pathname) {\r\n    case \"/dashboard\":\r\n      return (\r\n        <div>\r\n          <Typography variant=\"h5\" className={classes.text} gutterBottom>\r\n            Welcome,\r\n          </Typography>\r\n          <Typography variant=\"h3\" color=\"primary\" className={classes.name}>\r\n            {profileAcc && profileAcc.role}\r\n          </Typography>\r\n        </div>\r\n      );\r\n    default:\r\n      return <Breadcrumb breadcrumbs={breadcrumbs} counts={counts} />;\r\n  }\r\n};\r\n\r\nHeaderText.propTypes = {\r\n  selectedMenu: PropTypes.number,\r\n};\r\n\r\nconst HeaderContent = () => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Toolbar className={classes.toolbar}>\r\n      <HeaderText />\r\n      <HeaderProfile />\r\n    </Toolbar>\r\n  );\r\n};\r\n\r\nHeaderContent.propTypes = {};\r\n\r\nconst Breadcrumb = ({ breadcrumbs = [], counts = {} }) => {\r\n  const theme = useTheme();\r\n  const classes = useStyles();\r\n  const history = useHistory();\r\n\r\n  return (\r\n    <Grid container justifyContent=\"flex-start\" alignItems=\"center\">\r\n      {breadcrumbs.map((text, index) => {\r\n        return (\r\n          <>\r\n            {breadcrumbs.length < 2 ? (\r\n              <Grid container alignContent=\"center\">\r\n                <Grid item>\r\n                  <CustomHeaderTitle\r\n                    title={text}\r\n                    variant=\"h2\"\r\n                    onClick={() => {\r\n                      const page = index - (breadcrumbs.length - 1);\r\n                      history.go(page);\r\n                    }}\r\n                  />\r\n                </Grid>\r\n                {counts[text] && (\r\n                  <Grid\r\n                    item\r\n                    sx={{ marginLeft: \"0.5rem\", display: \"flex\" }}\r\n                    alignContent=\"center\"\r\n                  >\r\n                    <Grid container alignContent=\"center\">\r\n                      <ArrowUpwardIcon color=\"success\" />\r\n                      <Typography variant=\"h5\" className={classes.subtitle}>\r\n                        {counts[text]} total\r\n                      </Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                )}\r\n              </Grid>\r\n            ) : (\r\n              <CustomHeaderTitle\r\n                title={text}\r\n                onClick={() => {\r\n                  const page = index - (breadcrumbs.length - 1);\r\n                  history.go(page);\r\n                }}\r\n              />\r\n            )}\r\n\r\n            {breadcrumbs.length > 0 && breadcrumbs.length - 1 > index ? (\r\n              <KeyboardArrowRightIcon\r\n                size={10}\r\n                style={{\r\n                  color: theme.palette.common.grey,\r\n                }}\r\n              />\r\n            ) : null}\r\n          </>\r\n        );\r\n      })}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nBreadcrumb.propTypes = {\r\n  breadcrumbs: PropTypes.array,\r\n  counts: PropTypes.object,\r\n};\r\n\r\nexport default HeaderContent;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\layouts\\AvailabilityTable.js",["1183","1184","1185","1186","1187"],"import React, { useState, useEffect } from \"react\";\r\nimport {\r\n  TableRow,\r\n  Grid,\r\n  Typography,\r\n  TableCell,\r\n  Avatar,\r\n  Chip,\r\n} from \"@mui/material\";\r\nimport EnhancedTable from \"./EnhancedTable\";\r\nimport { availabilityHeadCells } from \"components/Utilities/tableHeaders\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport displayPhoto from \"assets/images/avatar.svg\";\r\nimport { hours } from \"components/Utilities/Time\";\r\nimport { EmptyTable } from \"components/layouts\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableCell: {\r\n    \"&.MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n  button: {\r\n    \"&.MuiButton-root\": {\r\n      ...theme.typography.rowBtn,\r\n      paddingTop: \".5rem\",\r\n      paddingBottom: \".5rem\",\r\n      background: theme.palette.common.lightGrey,\r\n      color: theme.palette.primary.dark,\r\n\r\n      \"&:hover\": {\r\n        background: \"#ccc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: theme.palette.primary.light,\r\n        color: \"#fff\",\r\n      },\r\n\r\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.2rem !important\",\r\n      height: \"2.7rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst AvailabilityTable = ({ data }) => {\r\n  const [avaliablity, setAvaliablity] = useState([]);\r\n  useEffect(() => {\r\n    setAvaliablity(data);\r\n  }, [data]);\r\n\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n\r\n  const { page, rowsPerPage } = useSelector((state) => state.tables);\r\n\r\n  return (\r\n    <Grid item container direction=\"column\" height=\"100%\" rowGap={2}>\r\n      <Grid item>\r\n        <Typography variant=\"h4\">Availability Table</Typography>\r\n      </Grid>\r\n      {avaliablity && avaliablity.length > 0 ? (\r\n        <Grid\r\n          item\r\n          container\r\n          direction=\"column\"\r\n          overflow=\"hidden\"\r\n          maxWidth={{ md: \"100%\", sm: \"100%\", xs: \"100%\" }}\r\n        >\r\n          <EnhancedTable\r\n            title=\"Availability Calendar\"\r\n            headCells={availabilityHeadCells}\r\n            rows={avaliablity}\r\n            paginationLabel=\"List per page\"\r\n            hasCheckbox={false}\r\n            hasPagination={false}\r\n          >\r\n            {avaliablity.map((row, index) => {\r\n              const { _id, doctorData, times, day } = row;\r\n              const labelId = `enhanced-table-checkbox-${index}`;\r\n              const rowdata = doctorData && (\r\n                <TableRow hover tabIndex={-1} key={_id}>\r\n                  <TableCell\r\n                    id={labelId}\r\n                    scope=\"row\"\r\n                    align=\"left\"\r\n                    className={classes.tableCell}\r\n                    style={{ color: theme.palette.common.grey }}\r\n                  >\r\n                    {doctorData ? doctorData?.dociId : \"no doctor\"}\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <div\r\n                      style={{\r\n                        height: \"100%\",\r\n                        display: \"flex\",\r\n                        alignItems: \"center\",\r\n                        textAlign: \"left\",\r\n                      }}\r\n                    >\r\n                      <span style={{ marginRight: \"1rem\" }}>\r\n                        <Avatar\r\n                          alt=\"Remy Sharp\"\r\n                          src={doctorData ? doctorData.picture : displayPhoto}\r\n                          sx={{ width: 24, height: 24 }}\r\n                        />\r\n                      </span>\r\n                      <span style={{ fontSize: \"1.25rem\" }}>\r\n                        {doctorData\r\n                          ? `${doctorData?.firstName} ${doctorData?.lastName}`\r\n                          : \"no name\"}\r\n                      </span>\r\n                    </div>\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    {day && day}\r\n                  </TableCell>\r\n                  <TableCell align=\"left\" className={classes.tableCell}>\r\n                    <Grid container gap={1}>\r\n                      {times &&\r\n                        times.map((time) => {\r\n                          return (\r\n                            <Chip\r\n                              key={index}\r\n                              label={`${hours(time.start)} - ${hours(\r\n                                time.stop\r\n                              )} `}\r\n                              className={classes.badge}\r\n                              style={{\r\n                                background: theme.palette.common.lightGreen,\r\n                                color: theme.palette.common.green,\r\n                              }}\r\n                            />\r\n                          );\r\n                        })}\r\n                    </Grid>\r\n                  </TableCell>\r\n                </TableRow>\r\n              );\r\n              return rowdata;\r\n            })}\r\n          </EnhancedTable>\r\n        </Grid>\r\n      ) : (\r\n        <EmptyTable\r\n          headCells={availabilityHeadCells}\r\n          paginationLabel=\"Availability  per page\"\r\n        />\r\n      )}\r\n    </Grid>\r\n  );\r\n};\r\nAvailabilityTable.propTypes = {\r\n  data: PropTypes.object,\r\n};\r\n\r\nexport default AvailabilityTable;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\DisplayProfile.js",["1188","1189","1190","1191","1192","1193"],"import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Typography, Chip, Avatar, Grid } from \"@mui/material\";\r\nimport CustomButton from \"./CustomButton\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { HiChat } from \"react-icons/hi\";\r\nimport { useParams } from \"react-router-dom\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  gridsWrapper: {\r\n    background: \"#fff\",\r\n    borderRadius: \"1rem\",\r\n    padding: \"2rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\r\n  },\r\n\r\n  badge: {\r\n    \"&.MuiChip-root\": {\r\n      fontSize: \"1.3rem !important\",\r\n      borderRadius: \"1.5rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst DisplayProfile = ({\r\n  fullName,\r\n  displayPhoto,\r\n  medicalTitle,\r\n  statusId,\r\n  specialization,\r\n  status,\r\n  type,\r\n}) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { patientId, hcpId } = useParams();\r\n\r\n  const greenButton = {\r\n    background: theme.palette.success.main,\r\n    hover: theme.palette.success.light,\r\n    active: theme.palette.success.dark,\r\n  };\r\n\r\n  return (\r\n    <Grid\r\n      container\r\n      justifyContent=\"space-between\"\r\n      alignItems=\"center\"\r\n      flexWrap=\"wrap\"\r\n      direction=\"row\"\r\n      className={classes.gridsWrapper}\r\n      rowGap={2}\r\n    >\r\n      <Grid item>\r\n        <Grid container gap={2} alignItems=\"center\">\r\n          <Avatar\r\n            alt={`Display Photo`}\r\n            src={displayPhoto}\r\n            sx={{ width: 50, height: 50 }}\r\n          />\r\n          <Typography variant=\"h3\">{fullName}</Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item>\r\n        <Grid container alignItems=\"center\" justifyContent=\"space-between\">\r\n          {specialization ? (\r\n            <Grid item>\r\n              <Typography variant=\"h4\" style={{ fontWeight: 400 }}>\r\n                <span style={{ color: theme.palette.common.lightGrey }}>\r\n                  Specialization:\r\n                </span>{\" \"}\r\n                <Chip\r\n                  label={specialization}\r\n                  color=\"success\"\r\n                  className={classes.badge}\r\n                />\r\n              </Typography>\r\n            </Grid>\r\n          ) : status ? (\r\n            <Grid item>\r\n              <Typography variant=\"h4\">\r\n                <span style={{ color: theme.palette.common.lightGrey }}>\r\n                  Status:\r\n                </span>{\" \"}\r\n                <Chip\r\n                  label={status}\r\n                  color={status === \"Active\" ? \"success\" : \"error\"}\r\n                  className={classes.badge}\r\n                  style={{\r\n                    background:\r\n                      status === \"Active\"\r\n                        ? theme.palette.common.lightGreen\r\n                        : theme.palette.common.lightRed,\r\n                    color:\r\n                      status === \"Active\"\r\n                        ? theme.palette.common.green\r\n                        : theme.palette.common.red,\r\n                  }}\r\n                />\r\n              </Typography>\r\n            </Grid>\r\n          ) : null}\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item>\r\n        <Typography variant=\"h4\" color=\"error\" style={{ fontWeight: 400 }}>\r\n          <span style={{ color: theme.palette.common.lightGrey }}>\r\n            {medicalTitle}:\r\n          </span>{\" \"}\r\n          {statusId}\r\n        </Typography>\r\n      </Grid>\r\n      {type !== \"\" ? (\r\n        <Grid item>\r\n          <CustomButton\r\n            endIcon={<HiChat />}\r\n            title=\"Message\"\r\n            type={greenButton}\r\n            component={Link}\r\n            to={\r\n              type !== \"doctor\"\r\n                ? `/patients/${patientId}/profile/chat`\r\n                : `/hcps/${hcpId}/profile/chat`\r\n            }\r\n          />\r\n        </Grid>\r\n      ) : null}\r\n    </Grid>\r\n  );\r\n};\r\n\r\nDisplayProfile.propTypes = {\r\n  fullName: PropTypes.string,\r\n  displayPhoto: PropTypes.string,\r\n  medicalTitle: PropTypes.string,\r\n  statusId: PropTypes.string,\r\n  specialization: PropTypes.string,\r\n  status: PropTypes.string,\r\n  chatPath: PropTypes.string,\r\n  type: PropTypes.string,\r\n};\r\n\r\nexport default DisplayProfile;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\Button.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\AvailabilityCard.js",["1194","1195"],"import React from \"react\";\r\nimport { PropTypes } from \"prop-types\";\r\nimport { Grid, Typography, Divider } from \"@mui/material\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { hours } from \"components/Utilities/Time\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  cardGrid: {\r\n    background: \"#fff\",\r\n    borderRadius: \"2rem\",\r\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.1)\",\r\n  },\r\n}));\r\n\r\nconst AvailabilityCard = ({ availability }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <Grid container direction=\"column\" className={classes.cardGrid}>\r\n      <Grid item style={{ padding: \"2rem\" }}>\r\n        <Grid container justifyContent=\"center\" gap={2}>\r\n          <Grid item>\r\n            <Typography variant=\"body1\">Day:</Typography>\r\n          </Grid>\r\n          <Grid item>\r\n            <Typography variant=\"body1\">{availability?.day} </Typography>\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n      <Divider />\r\n      <Grid item style={{ padding: \"2rem\" }}>\r\n        <Grid item container justifyContent=\"center\">\r\n          <Grid item>\r\n            <Typography variant=\"body1\">Time: </Typography>\r\n          </Grid>\r\n          <Grid container>\r\n            {availability?.times?.map((time, index) => {\r\n              return (\r\n                <Grid\r\n                  container\r\n                  direction=\"column\"\r\n                  gap={2}\r\n                  key={index}\r\n                  alignItems=\"center\"\r\n                  justifyContent=\"center\"\r\n                >\r\n                  <Grid item>\r\n                    <Grid item container gap={2}>\r\n                      <Grid item>\r\n                        <Typography variant=\"body1\">{`${hours(\r\n                          time?.start\r\n                        )}`}</Typography>\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography variant=\"body1\">-</Typography>\r\n                      </Grid>\r\n                      <Grid item>\r\n                        <Typography variant=\"body1\">\r\n                          {`${hours(time?.stop)}`}{\" \"}\r\n                        </Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Divider />\r\n                </Grid>\r\n              );\r\n            })}\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </Grid>\r\n  );\r\n};\r\nAvailabilityCard.propTypes = {\r\n  day: PropTypes.string,\r\n  time: PropTypes.string,\r\n  availability: PropTypes.string,\r\n};\r\n\r\nexport default AvailabilityCard;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\helpers\\asideMenus.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\helpers\\breadcrumb.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Copy.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\styles\\doctorsPageStyles.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Forms\\Filters\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\hooks\\useCopy.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\styles\\docVerificationPageStyles.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Buttons\\ClearFiltersBtn.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\validation\\LoginInput.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\DataHeader.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\index.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\styles\\partnersPageStyles.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Utilities\\bMI.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\styles\\loginPageStyles.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\ReferPatient.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\ProviderModal.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\PermissionModal.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\Filter.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\modals\\RoleModal.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\pages\\SubscriptionIncome.js",["1196","1197","1198","1199","1200"],"import React, { useState, useEffect } from \"react\";\r\nimport { Grid, Typography, TableCell, TableRow, Checkbox } from \"@mui/material\";\r\nimport TrendingDownIcon from \"@mui/icons-material/TrendingDown\";\r\nimport {\r\n  timeMoment,\r\n  dateMoment,\r\n  formatNumber,\r\n} from \"components/Utilities/Time\";\r\nimport { EnhancedTable, NoData, EmptyTable } from \"components/layouts\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport { useTheme } from \"@mui/material/styles\";\r\nimport { financeHeader } from \"components/Utilities/tableHeaders\";\r\n// import displayPhoto from \"assets/images/avatar.svg\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { useActions } from \"components/hooks/useActions\";\r\nimport { handleSelectedRows } from \"helpers/selectedRows\";\r\nimport { isSelected } from \"helpers/isSelected\";\r\nimport { Loader } from \"components/Utilities\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\nimport { getSubscriptionsIncome } from \"components/graphQL/useQuery\";\r\nimport { defaultPageInfo } from \"helpers/mockData\";\r\nimport {\r\n  changeTableLimit,\r\n  handlePageChange,\r\n} from \"helpers/filterHelperFunctions\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    \"&.css-1zf5oc-MuiButtonBase-root-MuiButton-root\": {\r\n      background: \"#fff\",\r\n      color: theme.palette.common.grey,\r\n      textTransform: \"none\",\r\n      borderRadius: \"2rem\",\r\n      display: \"flex\",\r\n      alignItems: \"center\",\r\n      padding: \"1rem\",\r\n      maxWidth: \"10rem\",\r\n\r\n      \"&:hover\": {\r\n        background: \"#fcfcfc\",\r\n      },\r\n\r\n      \"&:active\": {\r\n        background: \"#fafafa\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon>*:nth-of-type(1)\": {\r\n        fontSize: \"1.2rem\",\r\n      },\r\n\r\n      \"& .css-9tj150-MuiButton-endIcon\": {\r\n        marginLeft: \".3rem\",\r\n        marginTop: \"-.2rem\",\r\n      },\r\n    },\r\n  },\r\n  iconWrapper: {\r\n    width: 20,\r\n    height: 20,\r\n    borderRadius: \"50%\",\r\n    display: \"grid\",\r\n    placeContent: \"center\",\r\n    background: theme.palette.common.lightGreen,\r\n  },\r\n\r\n  tableCell: {\r\n    \"&.css-1jilxo7-MuiTableCell-root\": {\r\n      fontSize: \"1.25rem\",\r\n    },\r\n  },\r\n\r\n  badge: {\r\n    \"&.css-1eelh6y-MuiChip-root\": {\r\n      fontSize: \"1.6rem !important\",\r\n      height: \"3rem\",\r\n      borderRadius: \"1.3rem\",\r\n    },\r\n  },\r\n}));\r\n\r\nconst SubscriptionIncome = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const { selectedRows } = useSelector((state) => state.tables);\r\n  const { setSelectedRows } = useActions();\r\n  const [pageInfo, setPageInfo] = useState(defaultPageInfo);\r\n  const [subIncome, setSubIncome] = useState([]);\r\n  const [fetchSubIncome, { loading, data, error }] = useLazyQuery(\r\n    getSubscriptionsIncome\r\n  );\r\n\r\n  useEffect(() => {\r\n    fetchSubIncome({\r\n      variables: {\r\n        first: pageInfo.limit,\r\n      },\r\n      notifyOnNetworkStatusChange: true,\r\n    });\r\n  }, [fetchSubIncome, pageInfo]);\r\n\r\n  useEffect(() => {\r\n    if (data) {\r\n      setSubIncome(data.getEarningStats.subscriptionIncomeData.data);\r\n      setPageInfo(data.getEarningStats.subscriptionIncomeData.PageInfo);\r\n    }\r\n  }, [setSubIncome, data]);\r\n\r\n  if (loading) return <Loader />;\r\n  if (error) return <NoData error={error} />;\r\n  return (\r\n    <Grid container direction=\"column\" gap={2} height=\"100%\">\r\n      <>\r\n        <Grid item container gap={1} alignItems=\"center\">\r\n          <Grid item flex={1}>\r\n            <Typography noWrap variant=\"h1\" component=\"div\" color=\"#2D2F39\">\r\n              Subscription Earnings table\r\n            </Typography>\r\n          </Grid>\r\n          <Grid item className={classes.iconWrapper}>\r\n            <TrendingDownIcon color=\"success\" className={classes.cardIcon} />\r\n          </Grid>\r\n        </Grid>\r\n        {subIncome.length > 0 ? (\r\n          <Grid item container>\r\n            <EnhancedTable\r\n              headCells={financeHeader}\r\n              rows={subIncome}\r\n              paginationLabel=\"finance per page\"\r\n              hasCheckbox={true}\r\n              changeLimit={async (e) => {\r\n                await changeTableLimit(fetchSubIncome, { first: e });\r\n              }}\r\n              dataPageInfo={pageInfo}\r\n              handlePagination={async (page) => {\r\n                await handlePageChange(fetchSubIncome, page, pageInfo, {});\r\n              }}\r\n            >\r\n              {subIncome.map((row, index) => {\r\n                const { createdAt, amount } = row;\r\n                // const { firstName, picture, lastName, specialization } = doctorData[0];\r\n                const isItemSelected = isSelected(row._id, selectedRows);\r\n                const labelId = `enhanced-table-checkbox-${index}`;\r\n\r\n                return (\r\n                  <TableRow\r\n                    hover\r\n                    role=\"checkbox\"\r\n                    aria-checked={isItemSelected}\r\n                    tabIndex={-1}\r\n                    key={row._id}\r\n                    selected={isItemSelected}\r\n                  >\r\n                    <TableCell padding=\"checkbox\">\r\n                      <Checkbox\r\n                        onClick={() =>\r\n                          handleSelectedRows(\r\n                            row.id,\r\n                            selectedRows,\r\n                            setSelectedRows\r\n                          )\r\n                        }\r\n                        color=\"primary\"\r\n                        checked={isItemSelected}\r\n                        inputProps={{\r\n                          \"aria-labelledby\": labelId,\r\n                        }}\r\n                      />\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.black }}\r\n                    >\r\n                      {dateMoment(createdAt)}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      id={labelId}\r\n                      scope=\"row\"\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.black }}\r\n                    >\r\n                      {timeMoment(createdAt)}\r\n                    </TableCell>\r\n                    <TableCell\r\n                      align=\"left\"\r\n                      className={classes.tableCell}\r\n                      style={{ color: theme.palette.common.red }}\r\n                    >\r\n                      {formatNumber(amount.toFixed(2))}\r\n                    </TableCell>\r\n                  </TableRow>\r\n                );\r\n              })}\r\n            </EnhancedTable>\r\n          </Grid>\r\n        ) : (\r\n          <EmptyTable\r\n            headCells={financeHeader}\r\n            paginationLabel=\"Finance  per page\"\r\n          />\r\n        )}\r\n      </>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default SubscriptionIncome;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Buttons\\CloseBtn.js",["1201"],"import React from \"react\";\r\nimport t from \"prop-types\";\r\nimport { makeStyles } from \"@mui/styles\";\r\nimport CloseIcon from \"@mui/icons-material/Close\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  button: {\r\n    textTransform: \"capitalize\",\r\n    fontFamily: \"Circular Std\",\r\n    fontSize: \"1.6rem\",\r\n    fontStyle: \"normal\",\r\n    fontWeight: 300,\r\n    lineHeight: \"2.4rem\",\r\n    letterSpacing: \"0px\",\r\n    textAlign: \"left\",\r\n    height: \"100%\",\r\n  },\r\n\r\n  closeBtn: {\r\n    \"&.button\": {\r\n      display: \"flex\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      color: theme.palette.common.black,\r\n      stroke: theme.palette.common.black,\r\n      background: \"#f2f2f2\",\r\n      borderRadius: \"100%\",\r\n      padding: \"0.6rem 0.3rem\",\r\n      border: \"none\",\r\n      cursor: \"pointer\",\r\n\r\n      \"&:hover\": {\r\n        color: \"red\",\r\n        stroke: \"red\",\r\n      },\r\n    },\r\n  },\r\n}));\r\n\r\nexport const CloseBtn = ({ onHandleClick, ...props }) => {\r\n  const classes = useStyles();\r\n  return (\r\n    <button\r\n      {...props}\r\n      onClick={() => onHandleClick()}\r\n      className={`button ${classes.closeBtn}`}\r\n    >\r\n      <CloseIcon sx={{ height: \"10px\", weight: \"10px !important\" }} />\r\n    </button>\r\n  );\r\n};\r\n\r\nCloseBtn.propTypes = {\r\n  onHandleClick: t.func,\r\n};\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\hooks\\useAlert.js",["1202","1203","1204","1205","1206","1207","1208","1209","1210","1211","1212"],"import { useSnackbar } from \"notistack\";\r\nimport { Typography } from \"@mui/material\";\r\nimport React from \"react\";\r\n\r\nconst useAlert = () => {\r\n  const { enqueueSnackbar } = useSnackbar();\r\n\r\n  const showErrorMsg = (errorMsg) => {\r\n    return enqueueSnackbar(\r\n      <Typography style={{ fontSize: \"1.2rem\" }}>{`${errorMsg}`}</Typography>,\r\n      {\r\n        variant: \"error\",\r\n        preventDuplicate: true,\r\n        anchorOrigin: {\r\n          horizontal: \"center\",\r\n          vertical: \"top\",\r\n        },\r\n        autoHideDuration: 10000,\r\n      }\r\n    );\r\n  };\r\n\r\n  const showSuccessMsg = (successMsg) => {\r\n    return enqueueSnackbar(\r\n      <Typography style={{ fontSize: \"1.2rem\" }}>{successMsg}</Typography>,\r\n      {\r\n        variant: \"success\",\r\n        preventDuplicate: true,\r\n        anchorOrigin: {\r\n          horizontal: \"right\",\r\n          vertical: \"top\",\r\n        },\r\n        autoHideDuration: 5000,\r\n      }\r\n    );\r\n  };\r\n\r\n  const getErrorMsg = (error) => {\r\n    try {\r\n      if (error?.graphQLErrors && error?.graphQLErrors?.length > 0) {\r\n        const errMsgs = (error?.graphQLErrors || []).map((err) => err.message);\r\n        return errMsgs || \"Something went wrong. Try again!!!\";\r\n      } else if (error?.networkError) {\r\n        const errMsgs = error?.networkError?.result?.errors?.map(\r\n          (err) => err.message\r\n        );\r\n        return errMsgs || \"Something went wrong. Try again!!!\";\r\n      } else if (error?.message) {\r\n        return error.message;\r\n      }\r\n    } catch (error) {\r\n      console.error(\"error from get error func.\", error);\r\n      return \"Something went wrong. Try again!!!\";\r\n    }\r\n  };\r\n\r\n  const displayAlert = (type, message) => {\r\n    switch (type) {\r\n      case \"success\":\r\n        return showSuccessMsg(message);\r\n\r\n      case \"error\":\r\n        if (typeof message === \"object\") {\r\n          return (message || []).map((msg) => showErrorMsg(msg));\r\n        } else {\r\n          return showErrorMsg(message);\r\n        }\r\n\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const watchFunction = (successMsg, errorMsg, promise) =>\r\n    promise\r\n      .then((data) => {\r\n        if (!data) {\r\n          displayAlert(\"error\", \"Something went wrong, try again.\");\r\n          throw Error(\"Something went wrong in watchFunction\");\r\n        }\r\n        displayAlert(\"success\", successMsg);\r\n        return data;\r\n      })\r\n      .catch((error) => {\r\n        const msg = getErrorMsg(error);\r\n        displayAlert(\"error\", msg || errorMsg);\r\n        throw error;\r\n      });\r\n\r\n  return { displayAlert, watchFunction };\r\n};\r\nexport default useAlert;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Rows\\PlanListRow.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Forms\\Filters\\PatientFilters.js",["1213","1214","1215","1216","1217","1218"],"import React, { useEffect, useState } from \"react\";\r\nimport t from \"prop-types\";\r\nimport { Grid } from \"@mui/material\";\r\n\r\nimport Filter from \".\";\r\nimport useAlert from \"../../../hooks/useAlert\";\r\nimport {\r\n  genderType,\r\n  patientsProfileDefaultFilterByValues,\r\n  /* statusFilterBy, */\r\n} from \"helpers/mockData\";\r\nimport { deleteVar, filterData } from \"helpers/filterHelperFunctions\";\r\nimport { getPlans, getProviders } from \"components/graphQL/useQuery\";\r\nimport { useLazyQuery } from \"@apollo/client\";\r\n\r\nconst PatientFilters = ({ setProfiles, setPageInfo, queryParams }) => {\r\n  const { displayAlert } = useAlert();\r\n  const [plans, setPlans] = useState([]);\r\n  const [fetchPlans] = useLazyQuery(getPlans);\r\n  const [providers, setProviders] = useState([]);\r\n  const [fetchProviders] = useLazyQuery(getProviders);\r\n  const [providerId, setProviderId] = useState(null);\r\n  const [filterPlanValue, setFilterPlanValue] = useState(\"\");\r\n  const [statusFilterValue, setStatusFilterValue] = useState(\"\");\r\n  const { patientsParams, patientsByStatusParams, patientsByPlanParams } =\r\n    queryParams;\r\n  const { fetchPatient, loading, refetch, variables } = patientsParams;\r\n  const [profileFilterValues, setProfileFilterValues] = useState(\r\n    patientsProfileDefaultFilterByValues\r\n  );\r\n  const {\r\n    byStatusLoading,\r\n    /* byStatusVaribles,\r\n    byStatusRefetch,\r\n    fetchPatientByStatus, */\r\n  } = patientsByStatusParams;\r\n  const { byPlanLoading, byPlanVaribles, byPlanRefetch, fetchPatientByPlan } =\r\n    patientsByPlanParams;\r\n\r\n  useEffect(() => {\r\n    fetchProviders()\r\n      .then(({ data }) => {\r\n        if (!data) throw Error(\"Couldn't get list of providers\");\r\n        const providersList = (data?.getProviders?.provider).map((provider) => {\r\n          const { _id, name } = provider;\r\n          return { key: name, value: _id };\r\n        });\r\n        setProviders(providersList);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (providerId === \"\" || providerId === null) return;\r\n    fetchPlans({ variables: { provider: providerId } })\r\n      .then(({ data }) => {\r\n        if (!data) throw Error(\"Couldn't get list of plans\");\r\n        const planList = (data?.getPlans?.plan || []).map((plan) => {\r\n          const { _id, name } = plan;\r\n          return { key: name, value: _id };\r\n        });\r\n        setPlans(planList);\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n      });\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [providerId]);\r\n\r\n  const onFilterProfileChange = async (name, value) => {\r\n    try {\r\n      if (name === \"provider\") setProviderId(value);\r\n      setStatusFilterValue(\"\");\r\n      deleteVar(variables);\r\n      const filterValues = { ...profileFilterValues, [name]: value };\r\n      setProfileFilterValues(filterValues);\r\n      filterData(filterValues, {\r\n        fetchData: fetchPatient,\r\n        refetch,\r\n        variables,\r\n      })\r\n        .then((data) => {\r\n          setProfiles(data?.profiles?.data || []);\r\n          setPageInfo(data?.profiles?.pageInfo || {});\r\n        })\r\n        .catch(() => {\r\n          refresh(setProfileFilterValues, patientsProfileDefaultFilterByValues);\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setProfileFilterValues, patientsProfileDefaultFilterByValues);\r\n    }\r\n  };\r\n\r\n  /*   const onFilterStatusChange = async (value) => {\r\n    try {\r\n      setProfileFilterValues({ gender: \"\", provider: \"\" });\r\n      deleteVar(byStatusVaribles);\r\n      setStatusFilterValue(value);\r\n      const filterVariables = { status: value };\r\n\r\n      filterData(filterVariables, {\r\n        fetchData: fetchPatientByStatus,\r\n        refetch: byStatusRefetch,\r\n        variables: byStatusVaribles,\r\n      })\r\n        .then((data) => {\r\n          setProfiles(data?.profilesByStatus?.data || []);\r\n          setPageInfo(data?.profilesByStatus?.pageInfo || {});\r\n        })\r\n        .catch(() => {\r\n          refresh(setStatusFilterValue, \"\");\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setStatusFilterValue, \"\");\r\n    }\r\n  }; */\r\n\r\n  const onFilterPlanChange = async (value) => {\r\n    try {\r\n      if (value === \"\") {\r\n        setProfileFilterValues({\r\n          ...patientsProfileDefaultFilterByValues,\r\n        });\r\n      } else {\r\n        setProfileFilterValues({\r\n          ...patientsProfileDefaultFilterByValues,\r\n          provider: profileFilterValues.provider,\r\n        });\r\n      }\r\n      deleteVar(byPlanVaribles);\r\n      setFilterPlanValue(value);\r\n      const filterVariables = { planId: value };\r\n\r\n      filterData(filterVariables, {\r\n        fetchData: fetchPatientByPlan,\r\n        refetch: byPlanRefetch,\r\n        variables: byPlanVaribles,\r\n      })\r\n        .then((data) => {\r\n          setProfiles(data?.profilesByPlan?.data || []);\r\n          setPageInfo(data?.profilesByPlan?.pageInfo || {});\r\n        })\r\n        .catch(() => {\r\n          refresh(setStatusFilterValue, \"\");\r\n        });\r\n    } catch (error) {\r\n      console.error(error);\r\n      refresh(setStatusFilterValue, \"\");\r\n    }\r\n  };\r\n\r\n  const refresh = async (setFilterValue, defaultVal) => {\r\n    displayAlert(\"error\", `Something went wrong while filtering. Try again.`);\r\n    setFilterValue(defaultVal);\r\n\r\n    deleteVar(variables);\r\n\r\n    refetch()\r\n      .then(({ data }) => {\r\n        setProfiles(data?.profiles?.data || []);\r\n        setPageInfo(data?.profiles?.pageInfo || {});\r\n      })\r\n      .catch((error) => {\r\n        console.error(error);\r\n        displayAlert(\"error\", `Failed to get patients data, Try again`);\r\n      });\r\n  };\r\n  return (\r\n    <Grid item container flexWrap=\"wrap\" spacing={4} alignItems=\"flex-end\">\r\n      {/* FILTER BY GENDER */}\r\n      <Grid item>\r\n        <Filter\r\n          label=\"By Gender\"\r\n          onHandleChange={(e) =>\r\n            onFilterProfileChange(\"gender\", e?.target?.value)\r\n          }\r\n          onClickClearBtn={() => onFilterProfileChange(\"gender\", \"\")}\r\n          options={genderType}\r\n          name=\"gender\"\r\n          placeholder=\"None\"\r\n          value={profileFilterValues.gender}\r\n          hasClearBtn={true}\r\n          disable={loading || byStatusLoading || byPlanLoading}\r\n        />\r\n      </Grid>\r\n\r\n      {/* FILTER BY PROVIDER AND PLAN */}\r\n      <Grid item>\r\n        <Filter\r\n          label=\"By Provider and Plan\"\r\n          onHandleChange={(e) =>\r\n            onFilterProfileChange(\"provider\", e?.target?.value)\r\n          }\r\n          onClickClearBtn={() => onFilterProfileChange(\"provider\", \"\")}\r\n          options={providers}\r\n          name=\"provider\"\r\n          placeholder=\"Provider\"\r\n          value={profileFilterValues.provider}\r\n          hasClearBtn={true}\r\n          disable={loading || byStatusLoading || byPlanLoading}\r\n        />\r\n      </Grid>\r\n      {profileFilterValues.provider === \"\" ? null : (\r\n        <Grid item>\r\n          <Filter\r\n            label=\"\"\r\n            onHandleChange={(e) => onFilterPlanChange(e?.target?.value)}\r\n            onClickClearBtn={() => onFilterPlanChange(\"\")}\r\n            options={plans}\r\n            name=\"plan\"\r\n            placeholder=\"Provider Plan\"\r\n            value={filterPlanValue}\r\n            hasClearBtn={true}\r\n            disable={loading || byStatusLoading || byPlanLoading}\r\n          />\r\n        </Grid>\r\n      )}\r\n\r\n      {/* FILTER BY STATUS */}\r\n      {/* <Grid item>\r\n        <Filter\r\n          label=\"By Status\"\r\n          onHandleChange={(e) => onFilterStatusChange(e?.target?.value)}\r\n          onClickClearBtn={() => onFilterStatusChange(\"\")}\r\n          options={statusFilterBy}\r\n          name=\"status\"\r\n          placeholder=\"None\"\r\n          value={statusFilterValue}\r\n          hasClearBtn={true}\r\n          disable={loading || byStatusLoading || byPlanLoading}\r\n        />\r\n      </Grid> */}\r\n      {/* ==== CLEAR FILTERS BUTTON ===== */}\r\n      {/* <Grid item>\r\n            <ClearFiltersBtn\r\n              title=\"Clear filters\"\r\n              onHandleClick={() => {\r\n                resetFilters(\r\n                  setFilterValues,\r\n                  patientsPageDefaultFilterValues,\r\n                  variables,\r\n                  fetchPatient\r\n                );\r\n              }}\r\n            />\r\n          </Grid> */}\r\n    </Grid>\r\n  );\r\n};\r\nPatientFilters.propTypes = {\r\n  setProfiles: t.func.isRequired,\r\n  setPageInfo: t.func.isRequired,\r\n  queryParams: t.object.isRequired,\r\n};\r\n\r\nexport default PatientFilters;\r\n","C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Forms\\Filters\\DoctorsFilters.js",[],"C:\\Users\\isiakaabd\\Desktop\\projects\\Heala-Office\\DProject\\src\\components\\Forms\\CompoundSearch.js",[],{"ruleId":"1219","severity":1,"message":"1220","line":214,"column":29,"nodeType":null,"messageId":"1221","endLine":218,"endColumn":3,"fix":"1222"},{"ruleId":"1219","severity":1,"message":"1223","line":219,"column":22,"nodeType":null,"messageId":"1221","endLine":221,"endColumn":5,"fix":"1224"},{"ruleId":"1219","severity":1,"message":"1225","line":269,"column":14,"nodeType":null,"messageId":"1221","endLine":275,"endColumn":6,"fix":"1226"},{"ruleId":"1219","severity":1,"message":"1227","line":296,"column":26,"nodeType":null,"messageId":"1221","endLine":301,"endColumn":3,"fix":"1228"},{"ruleId":"1219","severity":1,"message":"1229","line":303,"column":14,"nodeType":null,"messageId":"1221","endLine":308,"endColumn":6,"fix":"1230"},{"ruleId":"1219","severity":1,"message":"1231","line":460,"column":23,"nodeType":null,"messageId":"1221","endLine":465,"endColumn":3,"fix":"1232"},{"ruleId":"1219","severity":1,"message":"1233","line":467,"column":14,"nodeType":null,"messageId":"1221","endLine":472,"endColumn":6,"fix":"1234"},{"ruleId":"1219","severity":1,"message":"1235","line":585,"column":27,"nodeType":null,"messageId":"1221","endLine":590,"endColumn":3,"fix":"1236"},{"ruleId":"1219","severity":1,"message":"1237","line":591,"column":20,"nodeType":null,"messageId":"1221","endLine":598,"endColumn":5,"fix":"1238"},{"ruleId":"1219","severity":1,"message":"1239","line":641,"column":19,"nodeType":null,"messageId":"1221","endLine":646,"endColumn":3,"fix":"1240"},{"ruleId":"1219","severity":1,"message":"1241","line":647,"column":12,"nodeType":null,"messageId":"1221","endLine":654,"endColumn":5,"fix":"1242"},{"ruleId":"1219","severity":1,"message":"1243","line":693,"column":14,"nodeType":null,"messageId":"1221","endLine":698,"endColumn":6,"fix":"1244"},{"ruleId":"1219","severity":1,"message":"1245","line":785,"column":30,"nodeType":null,"messageId":"1221","endLine":787,"endColumn":5,"fix":"1246"},{"ruleId":"1219","severity":1,"message":"1247","line":802,"column":36,"nodeType":null,"messageId":"1221","endLine":807,"endColumn":3,"fix":"1248"},{"ruleId":"1219","severity":1,"message":"1249","line":808,"column":29,"nodeType":null,"messageId":"1221","endLine":810,"endColumn":5,"fix":"1250"},{"ruleId":"1219","severity":1,"message":"1251","line":159,"column":20,"nodeType":null,"messageId":"1221","endLine":163,"endColumn":6,"fix":"1252"},{"ruleId":"1219","severity":1,"message":"1253","line":24,"column":20,"nodeType":null,"messageId":"1221","endLine":28,"endColumn":15,"fix":"1254"},{"ruleId":"1219","severity":1,"message":"1255","line":37,"column":20,"nodeType":null,"messageId":"1221","endLine":41,"endColumn":15,"fix":"1256"},{"ruleId":"1219","severity":1,"message":"1257","line":42,"column":12,"nodeType":null,"messageId":"1221","endLine":47,"endColumn":7,"fix":"1258"},{"ruleId":"1219","severity":1,"message":"1259","line":49,"column":14,"nodeType":null,"messageId":"1221","endLine":54,"endColumn":9,"fix":"1260"},{"ruleId":"1219","severity":1,"message":"1261","line":69,"column":24,"nodeType":null,"messageId":"1221","endLine":73,"endColumn":18,"fix":"1262"},{"ruleId":"1219","severity":1,"message":"1263","line":80,"column":14,"nodeType":null,"messageId":"1221","endLine":85,"endColumn":9,"fix":"1264"},{"ruleId":"1219","severity":1,"message":"1265","line":97,"column":20,"nodeType":null,"messageId":"1221","endLine":101,"endColumn":14,"fix":"1266"},{"ruleId":"1219","severity":1,"message":"1257","line":106,"column":12,"nodeType":null,"messageId":"1221","endLine":111,"endColumn":7,"fix":"1267"},{"ruleId":"1219","severity":1,"message":"1259","line":113,"column":14,"nodeType":null,"messageId":"1221","endLine":118,"endColumn":9,"fix":"1268"},{"ruleId":"1219","severity":1,"message":"1269","line":130,"column":20,"nodeType":null,"messageId":"1221","endLine":134,"endColumn":14,"fix":"1270"},{"ruleId":"1219","severity":1,"message":"1263","line":139,"column":14,"nodeType":null,"messageId":"1221","endLine":144,"endColumn":9,"fix":"1271"},{"ruleId":"1219","severity":1,"message":"1272","line":156,"column":20,"nodeType":null,"messageId":"1221","endLine":160,"endColumn":14,"fix":"1273"},{"ruleId":"1219","severity":1,"message":"1274","line":18,"column":9,"nodeType":null,"messageId":"1221","endLine":23,"endColumn":1,"fix":"1275"},{"ruleId":"1219","severity":1,"message":"1276","line":39,"column":64,"nodeType":null,"messageId":"1277","endLine":40,"endColumn":4,"fix":"1278"},{"ruleId":"1219","severity":1,"message":"1279","line":71,"column":12,"nodeType":null,"messageId":"1221","endLine":77,"endColumn":7,"fix":"1280"},{"ruleId":"1219","severity":1,"message":"1281","line":106,"column":22,"nodeType":null,"messageId":"1221","endLine":109,"endColumn":10,"fix":"1282"},{"ruleId":"1219","severity":1,"message":"1283","line":139,"column":22,"nodeType":null,"messageId":"1221","endLine":142,"endColumn":10,"fix":"1284"},{"ruleId":"1219","severity":1,"message":"1285","line":224,"column":25,"nodeType":null,"messageId":"1286","endLine":224,"endColumn":25,"fix":"1287"},{"ruleId":"1219","severity":1,"message":"1288","line":67,"column":33,"nodeType":null,"messageId":"1221","endLine":69,"endColumn":19,"fix":"1289"},{"ruleId":"1219","severity":1,"message":"1290","line":97,"column":14,"nodeType":null,"messageId":"1221","endLine":101,"endColumn":9,"fix":"1291"},{"ruleId":"1219","severity":1,"message":"1285","line":75,"column":57,"nodeType":null,"messageId":"1286","endLine":75,"endColumn":57,"fix":"1292"},{"ruleId":"1293","severity":1,"message":"1294","line":1,"column":15,"nodeType":"1295","messageId":"1296","endLine":1,"endColumn":23},{"ruleId":"1219","severity":1,"message":"1297","line":13,"column":9,"nodeType":null,"messageId":"1221","endLine":16,"endColumn":1,"fix":"1298"},{"ruleId":"1219","severity":1,"message":"1299","line":7,"column":9,"nodeType":null,"messageId":"1221","endLine":14,"endColumn":1,"fix":"1300"},{"ruleId":"1301","severity":1,"message":"1302","line":68,"column":6,"nodeType":"1303","endLine":68,"endColumn":19,"suggestions":"1304"},{"ruleId":"1219","severity":1,"message":"1285","line":81,"column":21,"nodeType":null,"messageId":"1286","endLine":81,"endColumn":21,"fix":"1305"},{"ruleId":"1219","severity":1,"message":"1306","line":92,"column":14,"nodeType":null,"messageId":"1221","endLine":98,"endColumn":9,"fix":"1307"},{"ruleId":"1293","severity":1,"message":"1308","line":24,"column":10,"nodeType":"1295","messageId":"1296","endLine":24,"endColumn":18},{"ruleId":"1219","severity":1,"message":"1309","line":32,"column":20,"nodeType":null,"messageId":"1221","endLine":35,"endColumn":7,"fix":"1310"},{"ruleId":"1219","severity":1,"message":"1311","line":57,"column":22,"nodeType":null,"messageId":"1221","endLine":61,"endColumn":7,"fix":"1312"},{"ruleId":"1219","severity":1,"message":"1313","line":88,"column":78,"nodeType":null,"messageId":"1221","endLine":89,"endColumn":36,"fix":"1314"},{"ruleId":"1219","severity":1,"message":"1315","line":79,"column":16,"nodeType":null,"messageId":"1221","endLine":84,"endColumn":11,"fix":"1316"},{"ruleId":"1219","severity":1,"message":"1317","line":100,"column":37,"nodeType":null,"messageId":"1221","endLine":103,"endColumn":16,"fix":"1318"},{"ruleId":"1219","severity":1,"message":"1297","line":12,"column":9,"nodeType":null,"messageId":"1221","endLine":15,"endColumn":1,"fix":"1319"},{"ruleId":"1219","severity":1,"message":"1315","line":76,"column":16,"nodeType":null,"messageId":"1221","endLine":81,"endColumn":11,"fix":"1320"},{"ruleId":"1219","severity":1,"message":"1321","line":91,"column":35,"nodeType":null,"messageId":"1221","endLine":94,"endColumn":14,"fix":"1322"},{"ruleId":"1219","severity":1,"message":"1323","line":99,"column":18,"nodeType":null,"messageId":"1221","endLine":103,"endColumn":13,"fix":"1324"},{"ruleId":"1219","severity":1,"message":"1325","line":152,"column":29,"nodeType":null,"messageId":"1286","endLine":152,"endColumn":29,"fix":"1326"},{"ruleId":"1219","severity":1,"message":"1327","line":82,"column":10,"nodeType":null,"messageId":"1221","endLine":89,"endColumn":2,"fix":"1328"},{"ruleId":"1219","severity":1,"message":"1329","line":128,"column":81,"nodeType":null,"messageId":"1277","endLine":129,"endColumn":12,"fix":"1330"},{"ruleId":"1219","severity":1,"message":"1331","line":131,"column":16,"nodeType":null,"messageId":"1221","endLine":136,"endColumn":11,"fix":"1332"},{"ruleId":"1219","severity":1,"message":"1333","line":155,"column":18,"nodeType":null,"messageId":"1221","endLine":161,"endColumn":13,"fix":"1334"},{"ruleId":"1293","severity":1,"message":"1335","line":4,"column":8,"nodeType":"1295","messageId":"1296","endLine":4,"endColumn":17},{"ruleId":"1219","severity":1,"message":"1336","line":9,"column":9,"nodeType":null,"messageId":"1221","endLine":17,"endColumn":1,"fix":"1337"},{"ruleId":"1219","severity":1,"message":"1338","line":18,"column":9,"nodeType":null,"messageId":"1221","endLine":24,"endColumn":1,"fix":"1339"},{"ruleId":"1293","severity":1,"message":"1340","line":22,"column":3,"nodeType":"1295","messageId":"1296","endLine":22,"endColumn":9},{"ruleId":"1293","severity":1,"message":"1341","line":23,"column":3,"nodeType":"1295","messageId":"1296","endLine":23,"endColumn":13},{"ruleId":"1219","severity":1,"message":"1342","line":40,"column":9,"nodeType":null,"messageId":"1221","endLine":44,"endColumn":1,"fix":"1343"},{"ruleId":"1293","severity":1,"message":"1344","line":42,"column":3,"nodeType":"1295","messageId":"1296","endLine":42,"endColumn":16},{"ruleId":"1219","severity":1,"message":"1276","line":192,"column":62,"nodeType":null,"messageId":"1277","endLine":193,"endColumn":4,"fix":"1345"},{"ruleId":"1293","severity":1,"message":"1346","line":203,"column":9,"nodeType":"1295","messageId":"1296","endLine":203,"endColumn":17},{"ruleId":"1219","severity":1,"message":"1347","line":217,"column":59,"nodeType":null,"messageId":"1221","endLine":219,"endColumn":3,"fix":"1348"},{"ruleId":"1293","severity":1,"message":"1349","line":227,"column":10,"nodeType":"1295","messageId":"1296","endLine":227,"endColumn":19},{"ruleId":"1219","severity":1,"message":"1279","line":267,"column":12,"nodeType":null,"messageId":"1221","endLine":273,"endColumn":7,"fix":"1350"},{"ruleId":"1219","severity":1,"message":"1351","line":283,"column":14,"nodeType":null,"messageId":"1221","endLine":288,"endColumn":9,"fix":"1352"},{"ruleId":"1219","severity":1,"message":"1353","line":306,"column":24,"nodeType":null,"messageId":"1221","endLine":308,"endColumn":13,"fix":"1354"},{"ruleId":"1219","severity":1,"message":"1355","line":352,"column":41,"nodeType":null,"messageId":"1221","endLine":358,"endColumn":27,"fix":"1356"},{"ruleId":"1219","severity":1,"message":"1357","line":375,"column":36,"nodeType":null,"messageId":"1221","endLine":378,"endColumn":28,"fix":"1358"},{"ruleId":"1219","severity":1,"message":"1359","line":380,"column":65,"nodeType":null,"messageId":"1221","endLine":382,"endColumn":27,"fix":"1360"},{"ruleId":"1219","severity":1,"message":"1361","line":420,"column":22,"nodeType":null,"messageId":"1221","endLine":423,"endColumn":10,"fix":"1362"},{"ruleId":"1219","severity":1,"message":"1363","line":467,"column":14,"nodeType":null,"messageId":"1221","endLine":472,"endColumn":7,"fix":"1364"},{"ruleId":"1219","severity":1,"message":"1365","line":6,"column":9,"nodeType":null,"messageId":"1221","endLine":14,"endColumn":1,"fix":"1366"},{"ruleId":"1219","severity":1,"message":"1279","line":128,"column":12,"nodeType":null,"messageId":"1221","endLine":134,"endColumn":7,"fix":"1367"},{"ruleId":"1219","severity":1,"message":"1368","line":194,"column":80,"nodeType":null,"messageId":"1277","endLine":195,"endColumn":20,"fix":"1369"},{"ruleId":"1219","severity":1,"message":"1370","line":211,"column":41,"nodeType":null,"messageId":"1221","endLine":217,"endColumn":27,"fix":"1371"},{"ruleId":"1219","severity":1,"message":"1372","line":245,"column":48,"nodeType":null,"messageId":"1221","endLine":247,"endColumn":31,"fix":"1373"},{"ruleId":"1219","severity":1,"message":"1374","line":248,"column":36,"nodeType":null,"messageId":"1221","endLine":250,"endColumn":31,"fix":"1375"},{"ruleId":"1219","severity":1,"message":"1376","line":317,"column":22,"nodeType":null,"messageId":"1221","endLine":320,"endColumn":10,"fix":"1377"},{"ruleId":"1293","severity":1,"message":"1335","line":17,"column":8,"nodeType":"1295","messageId":"1296","endLine":17,"endColumn":17},{"ruleId":"1219","severity":1,"message":"1378","line":170,"column":12,"nodeType":null,"messageId":"1221","endLine":175,"endColumn":7,"fix":"1379"},{"ruleId":"1219","severity":1,"message":"1380","line":238,"column":22,"nodeType":null,"messageId":"1221","endLine":242,"endColumn":17,"fix":"1381"},{"ruleId":"1219","severity":1,"message":"1382","line":157,"column":12,"nodeType":null,"messageId":"1221","endLine":163,"endColumn":7,"fix":"1383"},{"ruleId":"1219","severity":1,"message":"1380","line":227,"column":22,"nodeType":null,"messageId":"1221","endLine":231,"endColumn":17,"fix":"1384"},{"ruleId":"1219","severity":1,"message":"1385","line":234,"column":27,"nodeType":null,"messageId":"1277","endLine":235,"endColumn":22,"fix":"1386"},{"ruleId":"1219","severity":1,"message":"1387","line":7,"column":9,"nodeType":null,"messageId":"1221","endLine":15,"endColumn":1,"fix":"1388"},{"ruleId":"1293","severity":1,"message":"1340","line":16,"column":32,"nodeType":"1295","messageId":"1296","endLine":16,"endColumn":38},{"ruleId":"1219","severity":1,"message":"1342","line":32,"column":9,"nodeType":null,"messageId":"1221","endLine":36,"endColumn":1,"fix":"1389"},{"ruleId":"1293","severity":1,"message":"1344","line":34,"column":3,"nodeType":"1295","messageId":"1296","endLine":34,"endColumn":16},{"ruleId":"1219","severity":1,"message":"1276","line":148,"column":56,"nodeType":null,"messageId":"1277","endLine":149,"endColumn":4,"fix":"1390"},{"ruleId":"1293","severity":1,"message":"1346","line":162,"column":9,"nodeType":"1295","messageId":"1296","endLine":162,"endColumn":17},{"ruleId":"1293","severity":1,"message":"1349","line":216,"column":10,"nodeType":"1295","messageId":"1296","endLine":216,"endColumn":19},{"ruleId":"1219","severity":1,"message":"1279","line":260,"column":12,"nodeType":null,"messageId":"1221","endLine":266,"endColumn":7,"fix":"1391"},{"ruleId":"1219","severity":1,"message":"1392","line":276,"column":14,"nodeType":null,"messageId":"1221","endLine":281,"endColumn":9,"fix":"1393"},{"ruleId":"1219","severity":1,"message":"1394","line":336,"column":39,"nodeType":null,"messageId":"1221","endLine":338,"endColumn":25,"fix":"1395"},{"ruleId":"1219","severity":1,"message":"1361","line":395,"column":22,"nodeType":null,"messageId":"1221","endLine":398,"endColumn":10,"fix":"1396"},{"ruleId":"1219","severity":1,"message":"1363","line":444,"column":14,"nodeType":null,"messageId":"1221","endLine":449,"endColumn":7,"fix":"1397"},{"ruleId":"1219","severity":1,"message":"1398","line":470,"column":24,"nodeType":null,"messageId":"1221","endLine":473,"endColumn":19,"fix":"1399"},{"ruleId":"1219","severity":1,"message":"1400","line":63,"column":16,"nodeType":null,"messageId":"1221","endLine":66,"endColumn":11,"fix":"1401"},{"ruleId":"1219","severity":1,"message":"1402","line":79,"column":14,"nodeType":null,"messageId":"1221","endLine":85,"endColumn":9,"fix":"1403"},{"ruleId":"1219","severity":1,"message":"1404","line":107,"column":26,"nodeType":null,"messageId":"1221","endLine":111,"endColumn":21,"fix":"1405"},{"ruleId":"1219","severity":1,"message":"1406","line":117,"column":35,"nodeType":null,"messageId":"1221","endLine":119,"endColumn":22,"fix":"1407"},{"ruleId":"1219","severity":1,"message":"1408","line":132,"column":44,"nodeType":null,"messageId":"1221","endLine":134,"endColumn":19,"fix":"1409"},{"ruleId":"1219","severity":1,"message":"1410","line":252,"column":42,"nodeType":null,"messageId":"1221","endLine":254,"endColumn":18,"fix":"1411"},{"ruleId":"1219","severity":1,"message":"1412","line":54,"column":14,"nodeType":null,"messageId":"1221","endLine":60,"endColumn":9,"fix":"1413"},{"ruleId":"1219","severity":1,"message":"1414","line":65,"column":53,"nodeType":null,"messageId":"1221","endLine":67,"endColumn":17,"fix":"1415"},{"ruleId":"1219","severity":1,"message":"1416","line":34,"column":9,"nodeType":null,"messageId":"1221","endLine":37,"endColumn":1,"fix":"1417"},{"ruleId":"1219","severity":1,"message":"1418","line":143,"column":46,"nodeType":null,"messageId":"1221","endLine":145,"endColumn":7,"fix":"1419"},{"ruleId":"1219","severity":1,"message":"1418","line":147,"column":44,"nodeType":null,"messageId":"1221","endLine":149,"endColumn":7,"fix":"1420"},{"ruleId":"1219","severity":1,"message":"1421","line":157,"column":56,"nodeType":null,"messageId":"1221","endLine":159,"endColumn":5,"fix":"1422"},{"ruleId":"1219","severity":1,"message":"1423","line":160,"column":59,"nodeType":null,"messageId":"1221","endLine":162,"endColumn":5,"fix":"1424"},{"ruleId":"1219","severity":1,"message":"1276","line":222,"column":55,"nodeType":null,"messageId":"1277","endLine":223,"endColumn":4,"fix":"1425"},{"ruleId":"1219","severity":1,"message":"1355","line":309,"column":41,"nodeType":null,"messageId":"1221","endLine":315,"endColumn":27,"fix":"1426"},{"ruleId":"1219","severity":1,"message":"1427","line":402,"column":22,"nodeType":null,"messageId":"1221","endLine":405,"endColumn":10,"fix":"1428"},{"ruleId":"1219","severity":1,"message":"1429","line":409,"column":14,"nodeType":null,"messageId":"1221","endLine":414,"endColumn":7,"fix":"1430"},{"ruleId":"1219","severity":1,"message":"1431","line":476,"column":14,"nodeType":null,"messageId":"1221","endLine":480,"endColumn":7,"fix":"1432"},{"ruleId":"1219","severity":1,"message":"1433","line":492,"column":14,"nodeType":null,"messageId":"1221","endLine":496,"endColumn":7,"fix":"1434"},{"ruleId":"1219","severity":1,"message":"1435","line":6,"column":9,"nodeType":null,"messageId":"1221","endLine":11,"endColumn":1,"fix":"1436"},{"ruleId":"1219","severity":1,"message":"1437","line":19,"column":9,"nodeType":null,"messageId":"1221","endLine":23,"endColumn":1,"fix":"1438"},{"ruleId":"1219","severity":1,"message":"1439","line":157,"column":23,"nodeType":null,"messageId":"1221","endLine":160,"endColumn":10,"fix":"1440"},{"ruleId":"1219","severity":1,"message":"1441","line":163,"column":23,"nodeType":null,"messageId":"1221","endLine":166,"endColumn":10,"fix":"1442"},{"ruleId":"1219","severity":1,"message":"1443","line":3,"column":9,"nodeType":null,"messageId":"1221","endLine":7,"endColumn":1,"fix":"1444"},{"ruleId":"1219","severity":1,"message":"1342","line":38,"column":9,"nodeType":null,"messageId":"1221","endLine":42,"endColumn":1,"fix":"1445"},{"ruleId":"1293","severity":1,"message":"1344","line":40,"column":3,"nodeType":"1295","messageId":"1296","endLine":40,"endColumn":16},{"ruleId":"1219","severity":1,"message":"1446","line":188,"column":56,"nodeType":null,"messageId":"1221","endLine":190,"endColumn":5,"fix":"1447"},{"ruleId":"1219","severity":1,"message":"1276","line":226,"column":61,"nodeType":null,"messageId":"1277","endLine":227,"endColumn":4,"fix":"1448"},{"ruleId":"1219","severity":1,"message":"1279","line":291,"column":12,"nodeType":null,"messageId":"1221","endLine":297,"endColumn":7,"fix":"1449"},{"ruleId":"1219","severity":1,"message":"1450","line":299,"column":16,"nodeType":null,"messageId":"1221","endLine":305,"endColumn":11,"fix":"1451"},{"ruleId":"1219","severity":1,"message":"1452","line":329,"column":42,"nodeType":null,"messageId":"1221","endLine":333,"endColumn":19,"fix":"1453"},{"ruleId":"1219","severity":1,"message":"1454","line":353,"column":50,"nodeType":null,"messageId":"1221","endLine":357,"endColumn":31,"fix":"1455"},{"ruleId":"1219","severity":1,"message":"1456","line":381,"column":38,"nodeType":null,"messageId":"1221","endLine":385,"endColumn":33,"fix":"1457"},{"ruleId":"1219","severity":1,"message":"1458","line":476,"column":24,"nodeType":null,"messageId":"1221","endLine":482,"endColumn":19,"fix":"1459"},{"ruleId":"1219","severity":1,"message":"1458","line":561,"column":24,"nodeType":null,"messageId":"1221","endLine":567,"endColumn":19,"fix":"1460"},{"ruleId":"1219","severity":1,"message":"1461","line":14,"column":9,"nodeType":null,"messageId":"1221","endLine":17,"endColumn":1,"fix":"1462"},{"ruleId":"1219","severity":1,"message":"1418","line":99,"column":46,"nodeType":null,"messageId":"1221","endLine":101,"endColumn":7,"fix":"1463"},{"ruleId":"1219","severity":1,"message":"1418","line":102,"column":47,"nodeType":null,"messageId":"1221","endLine":104,"endColumn":7,"fix":"1464"},{"ruleId":"1219","severity":1,"message":"1418","line":105,"column":50,"nodeType":null,"messageId":"1221","endLine":107,"endColumn":7,"fix":"1465"},{"ruleId":"1219","severity":1,"message":"1466","line":156,"column":22,"nodeType":null,"messageId":"1221","endLine":161,"endColumn":17,"fix":"1467"},{"ruleId":"1219","severity":1,"message":"1468","line":163,"column":26,"nodeType":null,"messageId":"1221","endLine":168,"endColumn":21,"fix":"1469"},{"ruleId":"1219","severity":1,"message":"1470","line":225,"column":24,"nodeType":null,"messageId":"1221","endLine":228,"endColumn":19,"fix":"1471"},{"ruleId":"1219","severity":1,"message":"1472","line":10,"column":9,"nodeType":null,"messageId":"1221","endLine":18,"endColumn":1,"fix":"1473"},{"ruleId":"1219","severity":1,"message":"1285","line":115,"column":13,"nodeType":null,"messageId":"1286","endLine":115,"endColumn":13,"fix":"1474"},{"ruleId":"1219","severity":1,"message":"1276","line":186,"column":35,"nodeType":null,"messageId":"1277","endLine":187,"endColumn":4,"fix":"1475"},{"ruleId":"1219","severity":1,"message":"1476","line":189,"column":10,"nodeType":null,"messageId":"1221","endLine":195,"endColumn":5,"fix":"1477"},{"ruleId":"1219","severity":1,"message":"1478","line":196,"column":12,"nodeType":null,"messageId":"1221","endLine":201,"endColumn":7,"fix":"1479"},{"ruleId":"1219","severity":1,"message":"1480","line":210,"column":14,"nodeType":null,"messageId":"1221","endLine":215,"endColumn":9,"fix":"1481"},{"ruleId":"1219","severity":1,"message":"1482","line":263,"column":39,"nodeType":null,"messageId":"1221","endLine":269,"endColumn":25,"fix":"1483"},{"ruleId":"1219","severity":1,"message":"1484","line":333,"column":20,"nodeType":null,"messageId":"1221","endLine":336,"endColumn":8,"fix":"1485"},{"ruleId":"1219","severity":1,"message":"1486","line":379,"column":22,"nodeType":null,"messageId":"1221","endLine":384,"endColumn":17,"fix":"1487"},{"ruleId":"1219","severity":1,"message":"1285","line":580,"column":23,"nodeType":null,"messageId":"1286","endLine":580,"endColumn":23,"fix":"1488"},{"ruleId":"1219","severity":1,"message":"1416","line":21,"column":9,"nodeType":null,"messageId":"1221","endLine":24,"endColumn":1,"fix":"1489"},{"ruleId":"1219","severity":1,"message":"1279","line":154,"column":12,"nodeType":null,"messageId":"1221","endLine":160,"endColumn":7,"fix":"1490"},{"ruleId":"1219","severity":1,"message":"1370","line":220,"column":41,"nodeType":null,"messageId":"1221","endLine":226,"endColumn":27,"fix":"1491"},{"ruleId":"1219","severity":1,"message":"1492","line":249,"column":57,"nodeType":null,"messageId":"1221","endLine":251,"endColumn":31,"fix":"1493"},{"ruleId":"1219","severity":1,"message":"1494","line":306,"column":22,"nodeType":null,"messageId":"1221","endLine":309,"endColumn":10,"fix":"1495"},{"ruleId":"1293","severity":1,"message":"1335","line":2,"column":8,"nodeType":"1295","messageId":"1296","endLine":2,"endColumn":17},{"ruleId":"1219","severity":1,"message":"1496","line":8,"column":9,"nodeType":null,"messageId":"1221","endLine":12,"endColumn":1,"fix":"1497"},{"ruleId":"1219","severity":1,"message":"1498","line":41,"column":7,"nodeType":null,"messageId":"1221","endLine":48,"endColumn":3,"fix":"1499"},{"ruleId":"1219","severity":1,"message":"1276","line":57,"column":36,"nodeType":null,"messageId":"1277","endLine":58,"endColumn":4,"fix":"1500"},{"ruleId":"1219","severity":1,"message":"1501","line":61,"column":29,"nodeType":null,"messageId":"1277","endLine":62,"endColumn":6,"fix":"1502"},{"ruleId":"1219","severity":1,"message":"1503","line":84,"column":22,"nodeType":null,"messageId":"1221","endLine":86,"endColumn":15,"fix":"1504"},{"ruleId":"1219","severity":1,"message":"1505","line":92,"column":22,"nodeType":null,"messageId":"1221","endLine":94,"endColumn":15,"fix":"1506"},{"ruleId":"1219","severity":1,"message":"1507","line":100,"column":22,"nodeType":null,"messageId":"1221","endLine":104,"endColumn":15,"fix":"1508"},{"ruleId":"1219","severity":1,"message":"1509","line":110,"column":22,"nodeType":null,"messageId":"1221","endLine":114,"endColumn":15,"fix":"1510"},{"ruleId":"1219","severity":1,"message":"1511","line":122,"column":34,"nodeType":null,"messageId":"1221","endLine":125,"endColumn":21,"fix":"1512"},{"ruleId":"1219","severity":1,"message":"1513","line":131,"column":25,"nodeType":null,"messageId":"1221","endLine":134,"endColumn":12,"fix":"1514"},{"ruleId":"1219","severity":1,"message":"1515","line":2,"column":9,"nodeType":null,"messageId":"1221","endLine":9,"endColumn":1,"fix":"1516"},{"ruleId":"1219","severity":1,"message":"1517","line":10,"column":9,"nodeType":null,"messageId":"1221","endLine":14,"endColumn":1,"fix":"1518"},{"ruleId":"1219","severity":1,"message":"1276","line":180,"column":63,"nodeType":null,"messageId":"1277","endLine":181,"endColumn":4,"fix":"1519"},{"ruleId":"1219","severity":1,"message":"1520","line":264,"column":35,"nodeType":null,"messageId":"1221","endLine":266,"endColumn":21,"fix":"1521"},{"ruleId":"1219","severity":1,"message":"1522","line":268,"column":32,"nodeType":null,"messageId":"1221","endLine":270,"endColumn":60,"fix":"1523"},{"ruleId":"1219","severity":1,"message":"1524","line":271,"column":21,"nodeType":null,"messageId":"1221","endLine":271,"endColumn":47,"fix":"1525"},{"ruleId":"1219","severity":1,"message":"1355","line":284,"column":41,"nodeType":null,"messageId":"1221","endLine":290,"endColumn":27,"fix":"1526"},{"ruleId":"1219","severity":1,"message":"1527","line":317,"column":30,"nodeType":null,"messageId":"1221","endLine":322,"endColumn":25,"fix":"1528"},{"ruleId":"1219","severity":1,"message":"1529","line":325,"column":38,"nodeType":null,"messageId":"1221","endLine":331,"endColumn":32,"fix":"1530"},{"ruleId":"1219","severity":1,"message":"1531","line":372,"column":24,"nodeType":null,"messageId":"1221","endLine":375,"endColumn":12,"fix":"1532"},{"ruleId":"1219","severity":1,"message":"1533","line":380,"column":14,"nodeType":null,"messageId":"1221","endLine":384,"endColumn":7,"fix":"1534"},{"ruleId":"1219","severity":1,"message":"1535","line":385,"column":19,"nodeType":null,"messageId":"1221","endLine":389,"endColumn":8,"fix":"1536"},{"ruleId":"1293","severity":1,"message":"1335","line":2,"column":8,"nodeType":"1295","messageId":"1296","endLine":2,"endColumn":17},{"ruleId":"1219","severity":1,"message":"1537","line":3,"column":9,"nodeType":null,"messageId":"1221","endLine":10,"endColumn":1,"fix":"1538"},{"ruleId":"1219","severity":1,"message":"1355","line":102,"column":41,"nodeType":null,"messageId":"1221","endLine":108,"endColumn":27,"fix":"1539"},{"ruleId":"1219","severity":1,"message":"1540","line":164,"column":65,"nodeType":null,"messageId":"1221","endLine":166,"endColumn":27,"fix":"1541"},{"ruleId":"1219","severity":1,"message":"1542","line":175,"column":22,"nodeType":null,"messageId":"1221","endLine":178,"endColumn":10,"fix":"1543"},{"ruleId":"1293","severity":1,"message":"1544","line":1,"column":38,"nodeType":"1295","messageId":"1296","endLine":1,"endColumn":53},{"ruleId":"1293","severity":1,"message":"1335","line":2,"column":8,"nodeType":"1295","messageId":"1296","endLine":2,"endColumn":17},{"ruleId":"1219","severity":1,"message":"1545","line":110,"column":23,"nodeType":null,"messageId":"1221","endLine":113,"endColumn":10,"fix":"1546"},{"ruleId":"1219","severity":1,"message":"1547","line":151,"column":34,"nodeType":null,"messageId":"1221","endLine":153,"endColumn":18,"fix":"1548"},{"ruleId":"1293","severity":1,"message":"1549","line":1,"column":17,"nodeType":"1295","messageId":"1296","endLine":1,"endColumn":26},{"ruleId":"1293","severity":1,"message":"1335","line":2,"column":8,"nodeType":"1295","messageId":"1296","endLine":2,"endColumn":17},{"ruleId":"1219","severity":1,"message":"1550","line":3,"column":9,"nodeType":null,"messageId":"1221","endLine":10,"endColumn":1,"fix":"1551"},{"ruleId":"1219","severity":1,"message":"1347","line":89,"column":59,"nodeType":null,"messageId":"1221","endLine":91,"endColumn":3,"fix":"1552"},{"ruleId":"1219","severity":1,"message":"1553","line":102,"column":24,"nodeType":null,"messageId":"1221","endLine":104,"endColumn":8,"fix":"1554"},{"ruleId":"1219","severity":1,"message":"1555","line":107,"column":12,"nodeType":null,"messageId":"1221","endLine":112,"endColumn":7,"fix":"1556"},{"ruleId":"1219","severity":1,"message":"1557","line":143,"column":18,"nodeType":null,"messageId":"1221","endLine":145,"endColumn":15,"fix":"1558"},{"ruleId":"1219","severity":1,"message":"1559","line":146,"column":1,"nodeType":null,"messageId":"1277","endLine":146,"endColumn":3,"fix":"1560"},{"ruleId":"1219","severity":1,"message":"1559","line":148,"column":1,"nodeType":null,"messageId":"1277","endLine":148,"endColumn":3,"fix":"1561"},{"ruleId":"1219","severity":1,"message":"1559","line":150,"column":15,"nodeType":null,"messageId":"1277","endLine":150,"endColumn":17,"fix":"1562"},{"ruleId":"1219","severity":1,"message":"1559","line":151,"column":1,"nodeType":null,"messageId":"1277","endLine":151,"endColumn":3,"fix":"1563"},{"ruleId":"1219","severity":1,"message":"1559","line":152,"column":19,"nodeType":null,"messageId":"1277","endLine":152,"endColumn":21,"fix":"1564"},{"ruleId":"1219","severity":1,"message":"1559","line":153,"column":1,"nodeType":null,"messageId":"1277","endLine":153,"endColumn":3,"fix":"1565"},{"ruleId":"1219","severity":1,"message":"1559","line":154,"column":19,"nodeType":null,"messageId":"1277","endLine":154,"endColumn":21,"fix":"1566"},{"ruleId":"1219","severity":1,"message":"1559","line":155,"column":1,"nodeType":null,"messageId":"1277","endLine":155,"endColumn":3,"fix":"1567"},{"ruleId":"1219","severity":1,"message":"1559","line":156,"column":19,"nodeType":null,"messageId":"1277","endLine":156,"endColumn":21,"fix":"1568"},{"ruleId":"1219","severity":1,"message":"1559","line":157,"column":1,"nodeType":null,"messageId":"1277","endLine":157,"endColumn":3,"fix":"1569"},{"ruleId":"1219","severity":1,"message":"1559","line":158,"column":17,"nodeType":null,"messageId":"1277","endLine":158,"endColumn":19,"fix":"1570"},{"ruleId":"1219","severity":1,"message":"1559","line":159,"column":1,"nodeType":null,"messageId":"1277","endLine":159,"endColumn":3,"fix":"1571"},{"ruleId":"1219","severity":1,"message":"1559","line":160,"column":21,"nodeType":null,"messageId":"1277","endLine":160,"endColumn":23,"fix":"1572"},{"ruleId":"1219","severity":1,"message":"1573","line":161,"column":1,"nodeType":null,"messageId":"1221","endLine":167,"endColumn":25,"fix":"1574"},{"ruleId":"1219","severity":1,"message":"1559","line":168,"column":23,"nodeType":null,"messageId":"1277","endLine":168,"endColumn":25,"fix":"1575"},{"ruleId":"1219","severity":1,"message":"1559","line":169,"column":1,"nodeType":null,"messageId":"1277","endLine":169,"endColumn":3,"fix":"1576"},{"ruleId":"1219","severity":1,"message":"1559","line":170,"column":23,"nodeType":null,"messageId":"1277","endLine":170,"endColumn":25,"fix":"1577"},{"ruleId":"1219","severity":1,"message":"1559","line":171,"column":1,"nodeType":null,"messageId":"1277","endLine":171,"endColumn":3,"fix":"1578"},{"ruleId":"1219","severity":1,"message":"1559","line":172,"column":23,"nodeType":null,"messageId":"1277","endLine":172,"endColumn":25,"fix":"1579"},{"ruleId":"1219","severity":1,"message":"1559","line":173,"column":1,"nodeType":null,"messageId":"1277","endLine":173,"endColumn":3,"fix":"1580"},{"ruleId":"1219","severity":1,"message":"1559","line":174,"column":19,"nodeType":null,"messageId":"1277","endLine":174,"endColumn":21,"fix":"1581"},{"ruleId":"1219","severity":1,"message":"1582","line":175,"column":1,"nodeType":null,"messageId":"1221","endLine":175,"endColumn":21,"fix":"1583"},{"ruleId":"1219","severity":1,"message":"1559","line":176,"column":1,"nodeType":null,"messageId":"1277","endLine":176,"endColumn":3,"fix":"1584"},{"ruleId":"1219","severity":1,"message":"1585","line":177,"column":1,"nodeType":null,"messageId":"1221","endLine":177,"endColumn":23,"fix":"1586"},{"ruleId":"1219","severity":1,"message":"1559","line":178,"column":1,"nodeType":null,"messageId":"1277","endLine":178,"endColumn":3,"fix":"1587"},{"ruleId":"1219","severity":1,"message":"1585","line":179,"column":1,"nodeType":null,"messageId":"1221","endLine":179,"endColumn":23,"fix":"1588"},{"ruleId":"1219","severity":1,"message":"1559","line":180,"column":1,"nodeType":null,"messageId":"1277","endLine":180,"endColumn":3,"fix":"1589"},{"ruleId":"1219","severity":1,"message":"1559","line":181,"column":19,"nodeType":null,"messageId":"1277","endLine":181,"endColumn":21,"fix":"1590"},{"ruleId":"1219","severity":1,"message":"1559","line":182,"column":1,"nodeType":null,"messageId":"1277","endLine":182,"endColumn":3,"fix":"1591"},{"ruleId":"1219","severity":1,"message":"1582","line":183,"column":1,"nodeType":null,"messageId":"1221","endLine":183,"endColumn":21,"fix":"1592"},{"ruleId":"1219","severity":1,"message":"1559","line":184,"column":19,"nodeType":null,"messageId":"1277","endLine":184,"endColumn":21,"fix":"1593"},{"ruleId":"1219","severity":1,"message":"1585","line":185,"column":1,"nodeType":null,"messageId":"1221","endLine":185,"endColumn":23,"fix":"1594"},{"ruleId":"1219","severity":1,"message":"1559","line":186,"column":21,"nodeType":null,"messageId":"1277","endLine":186,"endColumn":23,"fix":"1595"},{"ruleId":"1219","severity":1,"message":"1585","line":187,"column":1,"nodeType":null,"messageId":"1221","endLine":187,"endColumn":23,"fix":"1596"},{"ruleId":"1219","severity":1,"message":"1559","line":188,"column":1,"nodeType":null,"messageId":"1277","endLine":188,"endColumn":3,"fix":"1597"},{"ruleId":"1219","severity":1,"message":"1559","line":189,"column":21,"nodeType":null,"messageId":"1277","endLine":189,"endColumn":23,"fix":"1598"},{"ruleId":"1219","severity":1,"message":"1559","line":190,"column":1,"nodeType":null,"messageId":"1277","endLine":190,"endColumn":3,"fix":"1599"},{"ruleId":"1219","severity":1,"message":"1559","line":191,"column":21,"nodeType":null,"messageId":"1277","endLine":191,"endColumn":23,"fix":"1600"},{"ruleId":"1219","severity":1,"message":"1559","line":192,"column":19,"nodeType":null,"messageId":"1277","endLine":192,"endColumn":21,"fix":"1601"},{"ruleId":"1219","severity":1,"message":"1559","line":193,"column":1,"nodeType":null,"messageId":"1277","endLine":193,"endColumn":3,"fix":"1602"},{"ruleId":"1219","severity":1,"message":"1559","line":194,"column":1,"nodeType":null,"messageId":"1277","endLine":194,"endColumn":3,"fix":"1603"},{"ruleId":"1219","severity":1,"message":"1559","line":195,"column":23,"nodeType":null,"messageId":"1277","endLine":195,"endColumn":25,"fix":"1604"},{"ruleId":"1219","severity":1,"message":"1559","line":196,"column":1,"nodeType":null,"messageId":"1277","endLine":196,"endColumn":3,"fix":"1605"},{"ruleId":"1219","severity":1,"message":"1559","line":197,"column":25,"nodeType":null,"messageId":"1277","endLine":197,"endColumn":27,"fix":"1606"},{"ruleId":"1219","severity":1,"message":"1559","line":198,"column":1,"nodeType":null,"messageId":"1277","endLine":198,"endColumn":3,"fix":"1607"},{"ruleId":"1219","severity":1,"message":"1559","line":199,"column":23,"nodeType":null,"messageId":"1277","endLine":199,"endColumn":25,"fix":"1608"},{"ruleId":"1219","severity":1,"message":"1559","line":200,"column":21,"nodeType":null,"messageId":"1277","endLine":200,"endColumn":23,"fix":"1609"},{"ruleId":"1219","severity":1,"message":"1559","line":201,"column":1,"nodeType":null,"messageId":"1277","endLine":201,"endColumn":3,"fix":"1610"},{"ruleId":"1219","severity":1,"message":"1559","line":202,"column":1,"nodeType":null,"messageId":"1277","endLine":202,"endColumn":3,"fix":"1611"},{"ruleId":"1219","severity":1,"message":"1559","line":203,"column":27,"nodeType":null,"messageId":"1277","endLine":203,"endColumn":29,"fix":"1612"},{"ruleId":"1219","severity":1,"message":"1559","line":204,"column":1,"nodeType":null,"messageId":"1277","endLine":204,"endColumn":3,"fix":"1613"},{"ruleId":"1219","severity":1,"message":"1559","line":205,"column":27,"nodeType":null,"messageId":"1277","endLine":205,"endColumn":29,"fix":"1614"},{"ruleId":"1219","severity":1,"message":"1615","line":206,"column":1,"nodeType":null,"messageId":"1221","endLine":206,"endColumn":27,"fix":"1616"},{"ruleId":"1219","severity":1,"message":"1559","line":207,"column":1,"nodeType":null,"messageId":"1277","endLine":207,"endColumn":3,"fix":"1617"},{"ruleId":"1219","severity":1,"message":"1559","line":208,"column":1,"nodeType":null,"messageId":"1277","endLine":208,"endColumn":3,"fix":"1618"},{"ruleId":"1219","severity":1,"message":"1559","line":209,"column":25,"nodeType":null,"messageId":"1277","endLine":209,"endColumn":27,"fix":"1619"},{"ruleId":"1219","severity":1,"message":"1620","line":210,"column":1,"nodeType":null,"messageId":"1221","endLine":210,"endColumn":25,"fix":"1621"},{"ruleId":"1219","severity":1,"message":"1559","line":211,"column":21,"nodeType":null,"messageId":"1277","endLine":211,"endColumn":23,"fix":"1622"},{"ruleId":"1219","severity":1,"message":"1582","line":212,"column":1,"nodeType":null,"messageId":"1221","endLine":212,"endColumn":21,"fix":"1623"},{"ruleId":"1219","severity":1,"message":"1559","line":213,"column":19,"nodeType":null,"messageId":"1277","endLine":213,"endColumn":21,"fix":"1624"},{"ruleId":"1219","severity":1,"message":"1585","line":214,"column":1,"nodeType":null,"messageId":"1221","endLine":214,"endColumn":23,"fix":"1625"},{"ruleId":"1219","severity":1,"message":"1559","line":215,"column":1,"nodeType":null,"messageId":"1277","endLine":215,"endColumn":3,"fix":"1626"},{"ruleId":"1219","severity":1,"message":"1559","line":216,"column":1,"nodeType":null,"messageId":"1277","endLine":216,"endColumn":3,"fix":"1627"},{"ruleId":"1219","severity":1,"message":"1559","line":217,"column":19,"nodeType":null,"messageId":"1277","endLine":217,"endColumn":21,"fix":"1628"},{"ruleId":"1219","severity":1,"message":"1585","line":218,"column":1,"nodeType":null,"messageId":"1221","endLine":218,"endColumn":23,"fix":"1629"},{"ruleId":"1219","severity":1,"message":"1559","line":219,"column":1,"nodeType":null,"messageId":"1277","endLine":219,"endColumn":3,"fix":"1630"},{"ruleId":"1219","severity":1,"message":"1559","line":220,"column":19,"nodeType":null,"messageId":"1277","endLine":220,"endColumn":21,"fix":"1631"},{"ruleId":"1219","severity":1,"message":"1559","line":221,"column":1,"nodeType":null,"messageId":"1277","endLine":221,"endColumn":3,"fix":"1632"},{"ruleId":"1219","severity":1,"message":"1559","line":222,"column":21,"nodeType":null,"messageId":"1277","endLine":222,"endColumn":23,"fix":"1633"},{"ruleId":"1219","severity":1,"message":"1559","line":223,"column":1,"nodeType":null,"messageId":"1277","endLine":223,"endColumn":3,"fix":"1634"},{"ruleId":"1219","severity":1,"message":"1559","line":224,"column":19,"nodeType":null,"messageId":"1277","endLine":224,"endColumn":21,"fix":"1635"},{"ruleId":"1219","severity":1,"message":"1559","line":225,"column":1,"nodeType":null,"messageId":"1277","endLine":225,"endColumn":3,"fix":"1636"},{"ruleId":"1219","severity":1,"message":"1559","line":226,"column":19,"nodeType":null,"messageId":"1277","endLine":226,"endColumn":21,"fix":"1637"},{"ruleId":"1219","severity":1,"message":"1559","line":227,"column":1,"nodeType":null,"messageId":"1277","endLine":227,"endColumn":3,"fix":"1638"},{"ruleId":"1219","severity":1,"message":"1559","line":228,"column":21,"nodeType":null,"messageId":"1277","endLine":228,"endColumn":23,"fix":"1639"},{"ruleId":"1219","severity":1,"message":"1559","line":229,"column":1,"nodeType":null,"messageId":"1277","endLine":229,"endColumn":3,"fix":"1640"},{"ruleId":"1219","severity":1,"message":"1559","line":230,"column":21,"nodeType":null,"messageId":"1277","endLine":230,"endColumn":23,"fix":"1641"},{"ruleId":"1219","severity":1,"message":"1559","line":231,"column":19,"nodeType":null,"messageId":"1277","endLine":231,"endColumn":21,"fix":"1642"},{"ruleId":"1219","severity":1,"message":"1559","line":232,"column":1,"nodeType":null,"messageId":"1277","endLine":232,"endColumn":3,"fix":"1643"},{"ruleId":"1219","severity":1,"message":"1559","line":233,"column":1,"nodeType":null,"messageId":"1277","endLine":233,"endColumn":3,"fix":"1644"},{"ruleId":"1219","severity":1,"message":"1559","line":234,"column":17,"nodeType":null,"messageId":"1277","endLine":234,"endColumn":19,"fix":"1645"},{"ruleId":"1219","severity":1,"message":"1559","line":235,"column":15,"nodeType":null,"messageId":"1277","endLine":235,"endColumn":17,"fix":"1646"},{"ruleId":"1219","severity":1,"message":"1559","line":236,"column":1,"nodeType":null,"messageId":"1277","endLine":236,"endColumn":3,"fix":"1647"},{"ruleId":"1219","severity":1,"message":"1648","line":240,"column":20,"nodeType":null,"messageId":"1221","endLine":243,"endColumn":8,"fix":"1649"},{"ruleId":"1219","severity":1,"message":"1650","line":12,"column":9,"nodeType":null,"messageId":"1221","endLine":16,"endColumn":1,"fix":"1651"},{"ruleId":"1219","severity":1,"message":"1652","line":211,"column":18,"nodeType":null,"messageId":"1221","endLine":215,"endColumn":13,"fix":"1653"},{"ruleId":"1219","severity":1,"message":"1654","line":222,"column":38,"nodeType":null,"messageId":"1221","endLine":225,"endColumn":20,"fix":"1655"},{"ruleId":"1219","severity":1,"message":"1656","line":259,"column":36,"nodeType":null,"messageId":"1221","endLine":262,"endColumn":20,"fix":"1657"},{"ruleId":"1219","severity":1,"message":"1658","line":94,"column":60,"nodeType":null,"messageId":"1221","endLine":96,"endColumn":5,"fix":"1659"},{"ruleId":"1219","severity":1,"message":"1466","line":145,"column":22,"nodeType":null,"messageId":"1221","endLine":150,"endColumn":17,"fix":"1660"},{"ruleId":"1219","severity":1,"message":"1468","line":152,"column":26,"nodeType":null,"messageId":"1221","endLine":157,"endColumn":21,"fix":"1661"},{"ruleId":"1219","severity":1,"message":"1470","line":214,"column":24,"nodeType":null,"messageId":"1221","endLine":217,"endColumn":19,"fix":"1662"},{"ruleId":"1219","severity":1,"message":"1663","line":5,"column":9,"nodeType":null,"messageId":"1221","endLine":13,"endColumn":1,"fix":"1664"},{"ruleId":"1219","severity":1,"message":"1416","line":27,"column":9,"nodeType":null,"messageId":"1221","endLine":30,"endColumn":1,"fix":"1665"},{"ruleId":"1219","severity":1,"message":"1276","line":84,"column":60,"nodeType":null,"messageId":"1277","endLine":85,"endColumn":4,"fix":"1666"},{"ruleId":"1219","severity":1,"message":"1667","line":109,"column":24,"nodeType":null,"messageId":"1221","endLine":111,"endColumn":8,"fix":"1668"},{"ruleId":"1219","severity":1,"message":"1669","line":172,"column":37,"nodeType":null,"messageId":"1221","endLine":174,"endColumn":23,"fix":"1670"},{"ruleId":"1219","severity":1,"message":"1671","line":201,"column":32,"nodeType":null,"messageId":"1221","endLine":205,"endColumn":27,"fix":"1672"},{"ruleId":"1219","severity":1,"message":"1673","line":277,"column":20,"nodeType":null,"messageId":"1221","endLine":280,"endColumn":8,"fix":"1674"},{"ruleId":"1219","severity":1,"message":"1675","line":121,"column":14,"nodeType":null,"messageId":"1221","endLine":126,"endColumn":9,"fix":"1676"},{"ruleId":"1219","severity":1,"message":"1677","line":158,"column":51,"nodeType":null,"messageId":"1221","endLine":160,"endColumn":23,"fix":"1678"},{"ruleId":"1219","severity":1,"message":"1679","line":170,"column":20,"nodeType":null,"messageId":"1221","endLine":176,"endColumn":15,"fix":"1680"},{"ruleId":"1219","severity":1,"message":"1677","line":185,"column":48,"nodeType":null,"messageId":"1221","endLine":187,"endColumn":23,"fix":"1681"},{"ruleId":"1219","severity":1,"message":"1682","line":277,"column":47,"nodeType":null,"messageId":"1221","endLine":279,"endColumn":19,"fix":"1683"},{"ruleId":"1219","severity":1,"message":"1684","line":290,"column":45,"nodeType":null,"messageId":"1221","endLine":293,"endColumn":17,"fix":"1685"},{"ruleId":"1219","severity":1,"message":"1686","line":342,"column":20,"nodeType":null,"messageId":"1221","endLine":348,"endColumn":15,"fix":"1687"},{"ruleId":"1219","severity":1,"message":"1688","line":355,"column":24,"nodeType":null,"messageId":"1221","endLine":359,"endColumn":18,"fix":"1689"},{"ruleId":"1219","severity":1,"message":"1690","line":371,"column":47,"nodeType":null,"messageId":"1221","endLine":373,"endColumn":19,"fix":"1691"},{"ruleId":"1219","severity":1,"message":"1692","line":425,"column":16,"nodeType":null,"messageId":"1221","endLine":430,"endColumn":11,"fix":"1693"},{"ruleId":"1219","severity":1,"message":"1694","line":465,"column":20,"nodeType":null,"messageId":"1221","endLine":470,"endColumn":15,"fix":"1695"},{"ruleId":"1219","severity":1,"message":"1694","line":494,"column":20,"nodeType":null,"messageId":"1221","endLine":499,"endColumn":15,"fix":"1696"},{"ruleId":"1219","severity":1,"message":"1694","line":511,"column":20,"nodeType":null,"messageId":"1221","endLine":516,"endColumn":15,"fix":"1697"},{"ruleId":"1219","severity":1,"message":"1698","line":605,"column":63,"nodeType":null,"messageId":"1277","endLine":606,"endColumn":24,"fix":"1699"},{"ruleId":"1219","severity":1,"message":"1700","line":627,"column":18,"nodeType":null,"messageId":"1221","endLine":632,"endColumn":13,"fix":"1701"},{"ruleId":"1219","severity":1,"message":"1702","line":28,"column":12,"nodeType":null,"messageId":"1221","endLine":35,"endColumn":7,"fix":"1703"},{"ruleId":"1219","severity":1,"message":"1704","line":3,"column":9,"nodeType":null,"messageId":"1221","endLine":10,"endColumn":1,"fix":"1705"},{"ruleId":"1219","severity":1,"message":"1276","line":99,"column":64,"nodeType":null,"messageId":"1277","endLine":100,"endColumn":4,"fix":"1706"},{"ruleId":"1219","severity":1,"message":"1707","line":104,"column":67,"nodeType":null,"messageId":"1277","endLine":105,"endColumn":9,"fix":"1708"},{"ruleId":"1219","severity":1,"message":"1709","line":106,"column":1,"nodeType":null,"messageId":"1221","endLine":106,"endColumn":11,"fix":"1710"},{"ruleId":"1219","severity":1,"message":"1559","line":107,"column":9,"nodeType":null,"messageId":"1277","endLine":107,"endColumn":11,"fix":"1711"},{"ruleId":"1219","severity":1,"message":"1709","line":108,"column":1,"nodeType":null,"messageId":"1221","endLine":108,"endColumn":11,"fix":"1712"},{"ruleId":"1219","severity":1,"message":"1713","line":109,"column":7,"nodeType":null,"messageId":"1221","endLine":110,"endColumn":7,"fix":"1714"},{"ruleId":"1219","severity":1,"message":"1715","line":174,"column":14,"nodeType":null,"messageId":"1221","endLine":179,"endColumn":9,"fix":"1716"},{"ruleId":"1219","severity":1,"message":"1717","line":214,"column":52,"nodeType":null,"messageId":"1221","endLine":219,"endColumn":17,"fix":"1718"},{"ruleId":"1219","severity":1,"message":"1394","line":241,"column":39,"nodeType":null,"messageId":"1221","endLine":243,"endColumn":25,"fix":"1719"},{"ruleId":"1219","severity":1,"message":"1720","line":302,"column":22,"nodeType":null,"messageId":"1221","endLine":305,"endColumn":10,"fix":"1721"},{"ruleId":"1219","severity":1,"message":"1446","line":139,"column":56,"nodeType":null,"messageId":"1221","endLine":141,"endColumn":5,"fix":"1722"},{"ruleId":"1219","severity":1,"message":"1723","line":180,"column":12,"nodeType":null,"messageId":"1221","endLine":186,"endColumn":7,"fix":"1724"},{"ruleId":"1219","severity":1,"message":"1725","line":209,"column":20,"nodeType":null,"messageId":"1221","endLine":213,"endColumn":15,"fix":"1726"},{"ruleId":"1219","severity":1,"message":"1727","line":214,"column":22,"nodeType":null,"messageId":"1221","endLine":219,"endColumn":17,"fix":"1728"},{"ruleId":"1219","severity":1,"message":"1729","line":261,"column":28,"nodeType":null,"messageId":"1221","endLine":265,"endColumn":23,"fix":"1730"},{"ruleId":"1219","severity":1,"message":"1731","line":291,"column":22,"nodeType":null,"messageId":"1221","endLine":295,"endColumn":17,"fix":"1732"},{"ruleId":"1219","severity":1,"message":"1733","line":302,"column":37,"nodeType":null,"messageId":"1221","endLine":304,"endColumn":23,"fix":"1734"},{"ruleId":"1219","severity":1,"message":"1458","line":372,"column":24,"nodeType":null,"messageId":"1221","endLine":378,"endColumn":19,"fix":"1735"},{"ruleId":"1219","severity":1,"message":"1736","line":2,"column":9,"nodeType":null,"messageId":"1221","endLine":10,"endColumn":1,"fix":"1737"},{"ruleId":"1219","severity":1,"message":"1416","line":24,"column":9,"nodeType":null,"messageId":"1221","endLine":27,"endColumn":1,"fix":"1738"},{"ruleId":"1219","severity":1,"message":"1276","line":74,"column":59,"nodeType":null,"messageId":"1277","endLine":75,"endColumn":4,"fix":"1739"},{"ruleId":"1219","severity":1,"message":"1669","line":135,"column":37,"nodeType":null,"messageId":"1221","endLine":137,"endColumn":23,"fix":"1740"},{"ruleId":"1219","severity":1,"message":"1741","line":164,"column":32,"nodeType":null,"messageId":"1221","endLine":168,"endColumn":24,"fix":"1742"},{"ruleId":"1219","severity":1,"message":"1743","line":198,"column":20,"nodeType":null,"messageId":"1221","endLine":201,"endColumn":8,"fix":"1744"},{"ruleId":"1219","severity":1,"message":"1745","line":4,"column":9,"nodeType":null,"messageId":"1221","endLine":8,"endColumn":1,"fix":"1746"},{"ruleId":"1219","severity":1,"message":"1416","line":22,"column":9,"nodeType":null,"messageId":"1221","endLine":25,"endColumn":1,"fix":"1747"},{"ruleId":"1219","severity":1,"message":"1276","line":88,"column":55,"nodeType":null,"messageId":"1277","endLine":89,"endColumn":4,"fix":"1748"},{"ruleId":"1219","severity":1,"message":"1482","line":154,"column":39,"nodeType":null,"messageId":"1221","endLine":160,"endColumn":25,"fix":"1749"},{"ruleId":"1219","severity":1,"message":"1750","line":222,"column":22,"nodeType":null,"messageId":"1221","endLine":225,"endColumn":10,"fix":"1751"},{"ruleId":"1219","severity":1,"message":"1650","line":13,"column":9,"nodeType":null,"messageId":"1221","endLine":17,"endColumn":1,"fix":"1752"},{"ruleId":"1219","severity":1,"message":"1753","line":186,"column":20,"nodeType":null,"messageId":"1221","endLine":190,"endColumn":15,"fix":"1754"},{"ruleId":"1219","severity":1,"message":"1755","line":191,"column":22,"nodeType":null,"messageId":"1221","endLine":195,"endColumn":17,"fix":"1756"},{"ruleId":"1219","severity":1,"message":"1757","line":201,"column":40,"nodeType":null,"messageId":"1221","endLine":204,"endColumn":22,"fix":"1758"},{"ruleId":"1219","severity":1,"message":"1755","line":232,"column":22,"nodeType":null,"messageId":"1221","endLine":236,"endColumn":17,"fix":"1759"},{"ruleId":"1219","severity":1,"message":"1760","line":242,"column":38,"nodeType":null,"messageId":"1221","endLine":245,"endColumn":22,"fix":"1761"},{"ruleId":"1219","severity":1,"message":"1762","line":283,"column":20,"nodeType":null,"messageId":"1221","endLine":286,"endColumn":15,"fix":"1763"},{"ruleId":"1219","severity":1,"message":"1764","line":296,"column":20,"nodeType":null,"messageId":"1221","endLine":299,"endColumn":15,"fix":"1765"},{"ruleId":"1219","severity":1,"message":"1766","line":301,"column":36,"nodeType":null,"messageId":"1221","endLine":304,"endColumn":18,"fix":"1767"},{"ruleId":"1219","severity":1,"message":"1768","line":314,"column":20,"nodeType":null,"messageId":"1221","endLine":317,"endColumn":15,"fix":"1769"},{"ruleId":"1219","severity":1,"message":"1766","line":319,"column":36,"nodeType":null,"messageId":"1221","endLine":322,"endColumn":18,"fix":"1770"},{"ruleId":"1219","severity":1,"message":"1771","line":13,"column":9,"nodeType":null,"messageId":"1221","endLine":18,"endColumn":1,"fix":"1772"},{"ruleId":"1219","severity":1,"message":"1773","line":151,"column":22,"nodeType":null,"messageId":"1221","endLine":155,"endColumn":7,"fix":"1774"},{"ruleId":"1219","severity":1,"message":"1775","line":207,"column":34,"nodeType":null,"messageId":"1221","endLine":212,"endColumn":23,"fix":"1776"},{"ruleId":"1219","severity":1,"message":"1777","line":266,"column":39,"nodeType":null,"messageId":"1221","endLine":269,"endColumn":29,"fix":"1778"},{"ruleId":"1219","severity":1,"message":"1779","line":295,"column":71,"nodeType":null,"messageId":"1221","endLine":297,"endColumn":34,"fix":"1780"},{"ruleId":"1219","severity":1,"message":"1781","line":320,"column":14,"nodeType":null,"messageId":"1221","endLine":325,"endColumn":7,"fix":"1782"},{"ruleId":"1219","severity":1,"message":"1783","line":356,"column":32,"nodeType":null,"messageId":"1221","endLine":360,"endColumn":18,"fix":"1784"},{"ruleId":"1219","severity":1,"message":"1785","line":8,"column":9,"nodeType":null,"messageId":"1221","endLine":16,"endColumn":1,"fix":"1786"},{"ruleId":"1219","severity":1,"message":"1787","line":135,"column":12,"nodeType":null,"messageId":"1221","endLine":141,"endColumn":7,"fix":"1788"},{"ruleId":"1219","severity":1,"message":"1789","line":156,"column":14,"nodeType":null,"messageId":"1221","endLine":161,"endColumn":9,"fix":"1790"},{"ruleId":"1219","severity":1,"message":"1791","line":243,"column":43,"nodeType":null,"messageId":"1221","endLine":249,"endColumn":29,"fix":"1792"},{"ruleId":"1219","severity":1,"message":"1793","line":304,"column":22,"nodeType":null,"messageId":"1221","endLine":307,"endColumn":10,"fix":"1794"},{"ruleId":"1219","severity":1,"message":"1795","line":122,"column":12,"nodeType":null,"messageId":"1221","endLine":128,"endColumn":7,"fix":"1796"},{"ruleId":"1219","severity":1,"message":"1797","line":142,"column":20,"nodeType":null,"messageId":"1221","endLine":146,"endColumn":14,"fix":"1798"},{"ruleId":"1219","severity":1,"message":"1547","line":243,"column":34,"nodeType":null,"messageId":"1221","endLine":245,"endColumn":18,"fix":"1799"},{"ruleId":"1293","severity":1,"message":"1335","line":2,"column":8,"nodeType":"1295","messageId":"1296","endLine":2,"endColumn":17},{"ruleId":"1219","severity":1,"message":"1800","line":13,"column":9,"nodeType":null,"messageId":"1221","endLine":17,"endColumn":1,"fix":"1801"},{"ruleId":"1219","severity":1,"message":"1802","line":75,"column":63,"nodeType":null,"messageId":"1221","endLine":77,"endColumn":4,"fix":"1803"},{"ruleId":"1219","severity":1,"message":"1559","line":78,"column":5,"nodeType":null,"messageId":"1277","endLine":78,"endColumn":7,"fix":"1804"},{"ruleId":"1219","severity":1,"message":"1559","line":79,"column":1,"nodeType":null,"messageId":"1277","endLine":79,"endColumn":3,"fix":"1805"},{"ruleId":"1219","severity":1,"message":"1806","line":80,"column":1,"nodeType":null,"messageId":"1221","endLine":81,"endColumn":3,"fix":"1807"},{"ruleId":"1219","severity":1,"message":"1418","line":91,"column":46,"nodeType":null,"messageId":"1221","endLine":93,"endColumn":7,"fix":"1808"},{"ruleId":"1219","severity":1,"message":"1418","line":94,"column":47,"nodeType":null,"messageId":"1221","endLine":96,"endColumn":7,"fix":"1809"},{"ruleId":"1219","severity":1,"message":"1418","line":97,"column":50,"nodeType":null,"messageId":"1221","endLine":99,"endColumn":7,"fix":"1810"},{"ruleId":"1219","severity":1,"message":"1285","line":135,"column":37,"nodeType":null,"messageId":"1286","endLine":135,"endColumn":37,"fix":"1811"},{"ruleId":"1219","severity":1,"message":"1466","line":182,"column":22,"nodeType":null,"messageId":"1221","endLine":187,"endColumn":17,"fix":"1812"},{"ruleId":"1219","severity":1,"message":"1470","line":246,"column":24,"nodeType":null,"messageId":"1221","endLine":249,"endColumn":19,"fix":"1813"},{"ruleId":"1219","severity":1,"message":"1814","line":6,"column":9,"nodeType":null,"messageId":"1221","endLine":11,"endColumn":1,"fix":"1815"},{"ruleId":"1219","severity":1,"message":"1285","line":30,"column":13,"nodeType":null,"messageId":"1286","endLine":30,"endColumn":13,"fix":"1816"},{"ruleId":"1293","severity":1,"message":"1549","line":1,"column":17,"nodeType":"1295","messageId":"1296","endLine":1,"endColumn":26},{"ruleId":"1293","severity":1,"message":"1335","line":5,"column":8,"nodeType":"1295","messageId":"1296","endLine":5,"endColumn":17},{"ruleId":"1219","severity":1,"message":"1817","line":118,"column":26,"nodeType":null,"messageId":"1221","endLine":120,"endColumn":5,"fix":"1818"},{"ruleId":"1219","severity":1,"message":"1466","line":148,"column":22,"nodeType":null,"messageId":"1221","endLine":153,"endColumn":17,"fix":"1819"},{"ruleId":"1219","severity":1,"message":"1820","line":187,"column":65,"nodeType":null,"messageId":"1221","endLine":189,"endColumn":37,"fix":"1821"},{"ruleId":"1219","severity":1,"message":"1822","line":232,"column":28,"nodeType":null,"messageId":"1221","endLine":237,"endColumn":23,"fix":"1823"},{"ruleId":"1219","severity":1,"message":"1824","line":249,"column":56,"nodeType":null,"messageId":"1221","endLine":252,"endColumn":37,"fix":"1825"},{"ruleId":"1219","severity":1,"message":"1470","line":264,"column":24,"nodeType":null,"messageId":"1221","endLine":267,"endColumn":19,"fix":"1826"},{"ruleId":"1219","severity":1,"message":"1827","line":4,"column":9,"nodeType":null,"messageId":"1221","endLine":12,"endColumn":1,"fix":"1828"},{"ruleId":"1219","severity":1,"message":"1416","line":27,"column":9,"nodeType":null,"messageId":"1221","endLine":30,"endColumn":1,"fix":"1829"},{"ruleId":"1219","severity":1,"message":"1276","line":85,"column":57,"nodeType":null,"messageId":"1277","endLine":86,"endColumn":4,"fix":"1830"},{"ruleId":"1219","severity":1,"message":"1831","line":160,"column":37,"nodeType":null,"messageId":"1221","endLine":166,"endColumn":23,"fix":"1832"},{"ruleId":"1219","severity":1,"message":"1833","line":192,"column":32,"nodeType":null,"messageId":"1221","endLine":196,"endColumn":27,"fix":"1834"},{"ruleId":"1219","severity":1,"message":"1835","line":261,"column":20,"nodeType":null,"messageId":"1221","endLine":264,"endColumn":8,"fix":"1836"},{"ruleId":"1219","severity":1,"message":"1675","line":118,"column":14,"nodeType":null,"messageId":"1221","endLine":123,"endColumn":9,"fix":"1837"},{"ruleId":"1219","severity":1,"message":"1677","line":155,"column":51,"nodeType":null,"messageId":"1221","endLine":157,"endColumn":23,"fix":"1838"},{"ruleId":"1219","severity":1,"message":"1679","line":167,"column":20,"nodeType":null,"messageId":"1221","endLine":173,"endColumn":15,"fix":"1839"},{"ruleId":"1219","severity":1,"message":"1677","line":182,"column":48,"nodeType":null,"messageId":"1221","endLine":184,"endColumn":23,"fix":"1840"},{"ruleId":"1219","severity":1,"message":"1682","line":274,"column":47,"nodeType":null,"messageId":"1221","endLine":276,"endColumn":19,"fix":"1841"},{"ruleId":"1219","severity":1,"message":"1684","line":287,"column":45,"nodeType":null,"messageId":"1221","endLine":290,"endColumn":17,"fix":"1842"},{"ruleId":"1219","severity":1,"message":"1686","line":339,"column":20,"nodeType":null,"messageId":"1221","endLine":345,"endColumn":15,"fix":"1843"},{"ruleId":"1219","severity":1,"message":"1688","line":352,"column":24,"nodeType":null,"messageId":"1221","endLine":356,"endColumn":18,"fix":"1844"},{"ruleId":"1219","severity":1,"message":"1690","line":368,"column":47,"nodeType":null,"messageId":"1221","endLine":370,"endColumn":19,"fix":"1845"},{"ruleId":"1219","severity":1,"message":"1692","line":422,"column":16,"nodeType":null,"messageId":"1221","endLine":427,"endColumn":11,"fix":"1846"},{"ruleId":"1219","severity":1,"message":"1694","line":463,"column":20,"nodeType":null,"messageId":"1221","endLine":468,"endColumn":15,"fix":"1847"},{"ruleId":"1219","severity":1,"message":"1694","line":492,"column":20,"nodeType":null,"messageId":"1221","endLine":497,"endColumn":15,"fix":"1848"},{"ruleId":"1219","severity":1,"message":"1694","line":509,"column":20,"nodeType":null,"messageId":"1221","endLine":514,"endColumn":15,"fix":"1849"},{"ruleId":"1219","severity":1,"message":"1698","line":603,"column":63,"nodeType":null,"messageId":"1277","endLine":604,"endColumn":24,"fix":"1850"},{"ruleId":"1219","severity":1,"message":"1700","line":625,"column":18,"nodeType":null,"messageId":"1221","endLine":630,"endColumn":13,"fix":"1851"},{"ruleId":"1219","severity":1,"message":"1852","line":66,"column":10,"nodeType":null,"messageId":"1221","endLine":72,"endColumn":5,"fix":"1853"},{"ruleId":"1219","severity":1,"message":"1854","line":166,"column":34,"nodeType":null,"messageId":"1221","endLine":168,"endColumn":10,"fix":"1855"},{"ruleId":"1219","severity":1,"message":"1856","line":173,"column":21,"nodeType":null,"messageId":"1221","endLine":176,"endColumn":18,"fix":"1857"},{"ruleId":"1219","severity":1,"message":"1854","line":186,"column":34,"nodeType":null,"messageId":"1221","endLine":188,"endColumn":10,"fix":"1858"},{"ruleId":"1219","severity":1,"message":"1285","line":224,"column":15,"nodeType":null,"messageId":"1286","endLine":224,"endColumn":15,"fix":"1859"},{"ruleId":"1219","severity":1,"message":"1860","line":249,"column":31,"nodeType":null,"messageId":"1277","endLine":250,"endColumn":8,"fix":"1861"},{"ruleId":"1219","severity":1,"message":"1862","line":316,"column":24,"nodeType":null,"messageId":"1221","endLine":320,"endColumn":19,"fix":"1863"},{"ruleId":"1219","severity":1,"message":"1864","line":2,"column":9,"nodeType":null,"messageId":"1221","endLine":9,"endColumn":1,"fix":"1865"},{"ruleId":"1293","severity":1,"message":"1866","line":67,"column":11,"nodeType":"1295","messageId":"1296","endLine":67,"endColumn":15},{"ruleId":"1293","severity":1,"message":"1867","line":67,"column":17,"nodeType":"1295","messageId":"1296","endLine":67,"endColumn":28},{"ruleId":"1219","severity":1,"message":"1868","line":137,"column":70,"nodeType":null,"messageId":"1221","endLine":139,"endColumn":31,"fix":"1869"},{"ruleId":"1219","severity":1,"message":"1870","line":157,"column":20,"nodeType":null,"messageId":"1221","endLine":160,"endColumn":8,"fix":"1871"},{"ruleId":"1219","severity":1,"message":"1872","line":58,"column":18,"nodeType":null,"messageId":"1221","endLine":62,"endColumn":10,"fix":"1873"},{"ruleId":"1219","severity":1,"message":"1874","line":71,"column":73,"nodeType":null,"messageId":"1221","endLine":73,"endColumn":17,"fix":"1875"},{"ruleId":"1219","severity":1,"message":"1876","line":74,"column":22,"nodeType":null,"messageId":"1221","endLine":78,"endColumn":16,"fix":"1877"},{"ruleId":"1219","severity":1,"message":"1878","line":84,"column":73,"nodeType":null,"messageId":"1221","endLine":86,"endColumn":17,"fix":"1879"},{"ruleId":"1219","severity":1,"message":"1880","line":97,"column":42,"nodeType":null,"messageId":"1221","endLine":99,"endColumn":24,"fix":"1881"},{"ruleId":"1219","severity":1,"message":"1882","line":109,"column":67,"nodeType":null,"messageId":"1221","endLine":112,"endColumn":10,"fix":"1883"},{"ruleId":"1219","severity":1,"message":"1884","line":49,"column":63,"nodeType":null,"messageId":"1221","endLine":51,"endColumn":25,"fix":"1885"},{"ruleId":"1219","severity":1,"message":"1886","line":57,"column":53,"nodeType":null,"messageId":"1221","endLine":59,"endColumn":24,"fix":"1887"},{"ruleId":"1219","severity":1,"message":"1745","line":4,"column":9,"nodeType":null,"messageId":"1221","endLine":8,"endColumn":1,"fix":"1888"},{"ruleId":"1219","severity":1,"message":"1416","line":22,"column":9,"nodeType":null,"messageId":"1221","endLine":25,"endColumn":1,"fix":"1889"},{"ruleId":"1219","severity":1,"message":"1890","line":88,"column":67,"nodeType":null,"messageId":"1221","endLine":90,"endColumn":3,"fix":"1891"},{"ruleId":"1219","severity":1,"message":"1482","line":155,"column":39,"nodeType":null,"messageId":"1221","endLine":161,"endColumn":25,"fix":"1892"},{"ruleId":"1219","severity":1,"message":"1750","line":200,"column":22,"nodeType":null,"messageId":"1221","endLine":203,"endColumn":10,"fix":"1893"},{"ruleId":"1219","severity":1,"message":"1894","line":43,"column":12,"nodeType":null,"messageId":"1221","endLine":47,"endColumn":5,"fix":"1895"},{"ruleId":"1219","severity":1,"message":"1285","line":19,"column":8,"nodeType":null,"messageId":"1286","endLine":19,"endColumn":8,"fix":"1896"},{"ruleId":"1219","severity":1,"message":"1897","line":24,"column":28,"nodeType":null,"messageId":"1221","endLine":26,"endColumn":6,"fix":"1898"},{"ruleId":"1219","severity":1,"message":"1559","line":27,"column":1,"nodeType":null,"messageId":"1277","endLine":27,"endColumn":3,"fix":"1899"},{"ruleId":"1219","severity":1,"message":"1900","line":28,"column":1,"nodeType":null,"messageId":"1221","endLine":28,"endColumn":9,"fix":"1901"},{"ruleId":"1219","severity":1,"message":"1559","line":29,"column":7,"nodeType":null,"messageId":"1277","endLine":29,"endColumn":9,"fix":"1902"},{"ruleId":"1219","severity":1,"message":"1709","line":30,"column":1,"nodeType":null,"messageId":"1221","endLine":30,"endColumn":11,"fix":"1903"},{"ruleId":"1219","severity":1,"message":"1559","line":31,"column":9,"nodeType":null,"messageId":"1277","endLine":31,"endColumn":11,"fix":"1904"},{"ruleId":"1219","severity":1,"message":"1900","line":32,"column":1,"nodeType":null,"messageId":"1221","endLine":32,"endColumn":9,"fix":"1905"},{"ruleId":"1219","severity":1,"message":"1559","line":33,"column":1,"nodeType":null,"messageId":"1277","endLine":33,"endColumn":3,"fix":"1906"},{"ruleId":"1219","severity":1,"message":"1907","line":34,"column":5,"nodeType":null,"messageId":"1221","endLine":35,"endColumn":5,"fix":"1908"},{"ruleId":"1219","severity":1,"message":"1909","line":44,"column":66,"nodeType":null,"messageId":"1221","endLine":46,"endColumn":9,"fix":"1910"},{"ruleId":"1293","severity":1,"message":"1911","line":24,"column":10,"nodeType":"1295","messageId":"1296","endLine":24,"endColumn":27},{"ruleId":"1219","severity":1,"message":"1276","line":25,"column":75,"nodeType":null,"messageId":"1277","endLine":26,"endColumn":4,"fix":"1912"},{"ruleId":"1219","severity":1,"message":"1285","line":29,"column":41,"nodeType":null,"messageId":"1286","endLine":29,"endColumn":41,"fix":"1913"},{"ruleId":"1219","severity":1,"message":"1276","line":37,"column":79,"nodeType":null,"messageId":"1277","endLine":38,"endColumn":4,"fix":"1914"},{"ruleId":"1219","severity":1,"message":"1915","line":179,"column":33,"nodeType":null,"messageId":"1221","endLine":181,"endColumn":11,"fix":"1916"},{"ruleId":"1219","severity":1,"message":"1917","line":196,"column":33,"nodeType":null,"messageId":"1221","endLine":198,"endColumn":11,"fix":"1918"},"prettier/prettier","Replace `␍⏎····$id:·String!␍⏎····$name:·String!␍⏎····$description:·String!␍⏎··` with `$id:·String!,·$name:·String!,·$description:·String!`","replace",{"range":"1919","text":"1920"},"Replace `␍⏎······data:·{·id:·$id,·name:·$name,·description:·$description·}␍⏎····` with `data:·{·id:·$id,·name:·$name,·description:·$description·}`",{"range":"1921","text":"1922"},"Replace `␍⏎········id:·$id␍⏎········doctor:·$doctor␍⏎········patient:·$patient␍⏎········date:·$date␍⏎········time:·$time␍⏎·····` with `·id:·$id,·doctor:·$doctor,·patient:·$patient,·date:·$date,·time:·$time`",{"range":"1923","text":"1924"},"Replace `␍⏎····$recipient:·String!␍⏎····$sender:·String!␍⏎····$subject:·String!␍⏎····$body:·String!␍⏎··` with `$recipient:·String!,·$sender:·String!,·$subject:·String!,·$body:·String!`",{"range":"1925","text":"1926"},"Replace `␍⏎········recipient:·$recipient␍⏎········sender:·$sender␍⏎········subject:·$subject␍⏎········body:·$body␍⏎·····` with `·recipient:·$recipient,·sender:·$sender,·subject:·$subject,·body:·$body`",{"range":"1927","text":"1928"},"Replace `␍⏎····$id:·String!␍⏎····$name:·String␍⏎····$description:·String␍⏎····$permissions:·[String!]␍⏎··` with `$id:·String!,·$name:·String,·$description:·String,·$permissions:·[String!]`",{"range":"1929","text":"1930"},"Replace `␍⏎········id:·$id␍⏎········name:·$name␍⏎········permissions:·$permissions␍⏎········description:·$description␍⏎·····` with `·id:·$id,·name:·$name,·permissions:·$permissions,·description:·$description`",{"range":"1931","text":"1932"},"Replace `␍⏎····$name:·String!␍⏎····$iconAlt:·String␍⏎····$icon:·String!␍⏎····$userTypeId:·String!␍⏎··` with `$name:·String!,·$iconAlt:·String,·$icon:·String!,·$userTypeId:·String!`",{"range":"1933","text":"1934"},"Replace `␍⏎······data:·{␍⏎········name:·$name␍⏎········iconAlt:·$iconAlt␍⏎········icon:·$icon␍⏎········userTypeId:·$userTypeId␍⏎······}␍⏎····` with `data:·{·name:·$name,·iconAlt:·$iconAlt,·icon:·$icon,·userTypeId:·$userTypeId·}`",{"range":"1935","text":"1936"},"Replace `␍⏎····$authType:·String!␍⏎····$email:·EmailAddress!␍⏎····$password:·String!␍⏎····$role:·String␍⏎··` with `$authType:·String!,·$email:·EmailAddress!,·$password:·String!,·$role:·String`",{"range":"1937","text":"1938"},"Replace `␍⏎······data:·{␍⏎········authType:·$authType␍⏎········email:·$email␍⏎········password:·$password␍⏎········role:·$role␍⏎······}␍⏎····` with `data:·{·authType:·$authType,·email:·$email,·password:·$password,·role:·$role·}`",{"range":"1939","text":"1940"},"Replace `␍⏎········food:·$food␍⏎········medication:·$medication␍⏎········profile:·$profile␍⏎········severity:·$severity␍⏎·····` with `·food:·$food,·medication:·$medication,·profile:·$profile,·severity:·$severity`",{"range":"1941","text":"1942"},"Replace `␍⏎······data:·{·fileUrl:·$fileUrl,·bucket:·\"heala-media\"·}␍⏎····` with `data:·{·fileUrl:·$fileUrl,·bucket:·\"heala-media\"·}`",{"range":"1943","text":"1944"},"Replace `␍⏎····$id:·String!␍⏎····$name:·String!␍⏎····$price:·Float!␍⏎····$tat:·String!␍⏎··` with `$id:·String!,·$name:·String!,·$price:·Float!,·$tat:·String!`",{"range":"1945","text":"1946"},"Replace `␍⏎······data:·{·id:·$id,·name:·$name,·price:·$price,·tat:·$tat·}␍⏎····` with `data:·{·id:·$id,·name:·$name,·price:·$price,·tat:·$tat·}`",{"range":"1947","text":"1948"},"Replace `␍⏎········exact␍⏎········path=\"/finance/sub-income\"␍⏎········component={SubscriptionIncome}␍⏎·····` with `·exact·path=\"/finance/sub-income\"·component={SubscriptionIncome}`",{"range":"1949","text":"1950"},"Replace `␍⏎················alt=\"providers·\"␍⏎················title=\"Providers\"␍⏎················background={theme.palette.common.lightGreen}␍⏎··············` with `·alt=\"providers·\"·title=\"Providers\"·background={theme.palette.common.lightGreen}`",{"range":"1951","text":"1952"},"Replace `␍⏎················alt=\"User·Types\"␍⏎················title=\"User·Types\"␍⏎················background={theme.palette.common.lightRed}␍⏎··············` with `·alt=\"User·Types\"·title=\"User·Types\"·background={theme.palette.common.lightRed}`",{"range":"1953","text":"1954"},"Replace `␍⏎········item␍⏎········container␍⏎········justifyContent=\"space-between\"␍⏎········style={{·paddingTop:·\"5rem\"·}}␍⏎······` with `·item·container·justifyContent=\"space-between\"·style={{·paddingTop:·\"5rem\"·}}`",{"range":"1955","text":"1956"},"Replace `␍⏎··········item␍⏎··········md␍⏎··········className={classes.cardGrid}␍⏎··········style={{·marginRight:·\"2rem\"·}}␍⏎········` with `·item·md·className={classes.cardGrid}·style={{·marginRight:·\"2rem\"·}}`",{"range":"1957","text":"1958"},"Replace `␍⏎····················variant=\"outlined\"␍⏎····················label={symptom}␍⏎····················className={classes.infoBadge}␍⏎·················` with `·variant=\"outlined\"·label={symptom}·className={classes.infoBadge}`",{"range":"1959","text":"1960"},"Replace `␍⏎··········item␍⏎··········md␍⏎··········className={classes.cardGrid}␍⏎··········style={{·marginLeft:·\"2rem\"·}}␍⏎········` with `·item·md·className={classes.cardGrid}·style={{·marginLeft:·\"2rem\"·}}`",{"range":"1961","text":"1962"},"Replace `␍⏎················variant=\"outlined\"␍⏎················label=\"Type·1\"␍⏎················className={classes.infoBadge}␍⏎·············` with `·variant=\"outlined\"·label=\"Type·1\"·className={classes.infoBadge}`",{"range":"1963","text":"1964"},{"range":"1965","text":"1956"},{"range":"1966","text":"1958"},"Replace `␍⏎················variant=\"outlined\"␍⏎················label=\"Once\"␍⏎················className={classes.infoBadge}␍⏎·············` with `·variant=\"outlined\"·label=\"Once\"·className={classes.infoBadge}`",{"range":"1967","text":"1968"},{"range":"1969","text":"1962"},"Replace `␍⏎················variant=\"outlined\"␍⏎················label=\"01-10-2021\"␍⏎················className={classes.infoBadge}␍⏎·············` with `·variant=\"outlined\"·label=\"01-10-2021\"·className={classes.infoBadge}`",{"range":"1970","text":"1971"},"Replace `␍⏎··CustomButton,␍⏎··Loader,␍⏎··PreviousButton,␍⏎··Modals,␍⏎` with `·CustomButton,·Loader,·PreviousButton,·Modals·`",{"range":"1972","text":"1973"},"Delete `␍⏎···`","delete",{"range":"1974","text":"1975"},"Replace `␍⏎········container␍⏎········direction=\"column\"␍⏎········gap={2}␍⏎········flexWrap=\"nowrap\"␍⏎········height=\"100%\"␍⏎······` with `·container·direction=\"column\"·gap={2}·flexWrap=\"nowrap\"·height=\"100%\"`",{"range":"1976","text":"1977"},"Replace `␍⏎············headCells={testTableHeadCells}␍⏎············paginationLabel=\"Test·per·page\"␍⏎·········` with `·headCells={testTableHeadCells}·paginationLabel=\"Test·per·page\"`",{"range":"1978","text":"1979"},"Replace `␍⏎············headCells={testTableHeadCells}␍⏎············paginationLabel=\"Patients·per·page\"␍⏎·········` with `·headCells={testTableHeadCells}·paginationLabel=\"Patients·per·page\"`",{"range":"1980","text":"1981"},"Insert `,`","insert",{"range":"1982","text":"1983"},"Replace `␍⏎····················window.open(`mailto:${details.email}`,·\"_blank\")␍⏎··················` with `·window.open(`mailto:${details.email}`,·\"_blank\")`",{"range":"1984","text":"1985"},"Replace `␍⏎··········item␍⏎··········className={classes.gridWrapper}␍⏎··········style={{·lineHeight:·1.85,·fontSize:·\"1.5rem\"·}}␍⏎········` with `·item·className={classes.gridWrapper}·style={{·lineHeight:·1.85,·fontSize:·\"1.5rem\"·}}`",{"range":"1986","text":"1987"},{"range":"1988","text":"1983"},"no-unused-vars","'useQuery' is defined but never used.","Identifier","unusedVar","Replace `␍⏎··handleError,␍⏎··showSuccessMsg,␍⏎` with `·handleError,·showSuccessMsg·`",{"range":"1989","text":"1990"},"Replace `␍⏎··FormControl,␍⏎··FormLabel,␍⏎··Grid,␍⏎··Avatar,␍⏎··Button,␍⏎··Typography,␍⏎` with `·FormControl,·FormLabel,·Grid,·Avatar,·Button,·Typography·`",{"range":"1991","text":"1992"},"react-hooks/exhaustive-deps","React Hook React.useEffect has a missing dependency: 'enqueueSnackbar'. Either include it or remove the dependency array.","ArrayExpression",["1993"],{"range":"1994","text":"1983"},"Replace `␍⏎··········container␍⏎··········item␍⏎··········direction=\"row\"␍⏎··········justifyContent=\"center\"␍⏎··········alignItems=\"center\"␍⏎········` with `·container·item·direction=\"row\"·justifyContent=\"center\"·alignItems=\"center\"`",{"range":"1995","text":"1996"},"'progress' is assigned a value but never used.","Replace `␍⏎········enqueueSnackbar,␍⏎········\"Something·went·wrong·while·uploading·file.\"␍⏎······` with `enqueueSnackbar,·\"Something·went·wrong·while·uploading·file.\"`",{"range":"1997","text":"1998"},"Replace `␍⏎········enqueueSnackbar,␍⏎········Typography,␍⏎········`${testAdded·&&·testAdded}·Tests·Added.`␍⏎······` with `enqueueSnackbar,·Typography,·`${testAdded·&&·testAdded}·Tests·Added.``",{"range":"1999","text":"2000"},"Replace `{\"·\"}␍⏎··············overwrite·the·current` with `·overwrite·the·current␍⏎·············`",{"range":"2001","text":"2002"},"Replace `␍⏎············container␍⏎············direction=\"column\"␍⏎············alignItems=\"center\"␍⏎············justifyContent=\"center\"␍⏎··········` with `·container·direction=\"column\"·alignItems=\"center\"·justifyContent=\"center\"`",{"range":"2003","text":"2004"},"Replace `␍⏎··················size=\"10rem\"␍⏎··················color={theme.palette.warning.main}␍⏎···············` with `·size=\"10rem\"·color={theme.palette.warning.main}`",{"range":"2005","text":"2006"},{"range":"2007","text":"1990"},{"range":"2008","text":"2004"},"Replace `␍⏎················size=\"10rem\"␍⏎················color={theme.palette.warning.main}␍⏎·············` with `·size=\"10rem\"·color={theme.palette.warning.main}`",{"range":"2009","text":"2006"},"Replace `␍⏎··············item␍⏎··············style={{·marginBottom:·\"2rem\"·}}␍⏎··············sx={{·textAlign:·\"center\"·}}␍⏎············` with `·item·style={{·marginBottom:·\"2rem\"·}}·sx={{·textAlign:·\"center\"·}}`",{"range":"2010","text":"2011"},"Insert `␍⏎`",{"range":"2012","text":"2013"},"Replace `␍⏎····getRootProps,␍⏎····getInputProps,␍⏎····isFocused,␍⏎····isDragAccept,␍⏎····isDragReject,␍⏎····open,␍⏎·` with `·getRootProps,·getInputProps,·isFocused,·isDragAccept,·isDragReject,·open`",{"range":"2014","text":"2015"},"Delete `␍⏎···········`",{"range":"2016","text":"1975"},"Replace `␍⏎············item␍⏎············container␍⏎············justifyContent=\"center\"␍⏎············style={{·marginTop:·\"15px\"·}}␍⏎··········` with `·item·container·justifyContent=\"center\"·style={{·marginTop:·\"15px\"·}}`",{"range":"2017","text":"2018"},"Replace `␍⏎··············container␍⏎··············item␍⏎··············direction=\"row\"␍⏎··············justifyContent=\"center\"␍⏎··············alignItems=\"center\"␍⏎············` with `·container·item·direction=\"row\"·justifyContent=\"center\"·alignItems=\"center\"`",{"range":"2019","text":"1996"},"'PropTypes' is defined but never used.","Replace `␍⏎··Grid,␍⏎··TableRow,␍⏎··Button,␍⏎··Avatar,␍⏎··TableCell,␍⏎··Checkbox,␍⏎··Alert,␍⏎` with `·Grid,·TableRow,·Button,·Avatar,·TableCell,·Checkbox,·Alert·`",{"range":"2020","text":"2021"},"Replace `␍⏎··CustomButton,␍⏎··Loader,␍⏎··Modals,␍⏎··Search,␍⏎··FilterList,␍⏎` with `·CustomButton,·Loader,·Modals,·Search,·FilterList·`",{"range":"2022","text":"2023"},"'Search' is defined but never used.","'FilterList' is defined but never used.","Replace `␍⏎··changeTableLimit,␍⏎··fetchMoreData,␍⏎··handlePageChange,␍⏎` with `·changeTableLimit,·fetchMoreData,·handlePageChange·`",{"range":"2024","text":"2025"},"'fetchMoreData' is defined but never used.",{"range":"2026","text":"1975"},"'onChange' is assigned a value but never used.","Replace `␍⏎····(state)·=>·state.tables␍⏎··` with `(state)·=>·state.tables`",{"range":"2027","text":"2028"},"'searchHcp' is assigned a value but never used.",{"range":"2029","text":"1977"},"Replace `␍⏎··········item␍⏎··········gap={{·sm:·4,·xs:·2·}}␍⏎··········container␍⏎··········direction={{·sm:·\"row\",·xs:·\"column\"·}}␍⏎········` with `·item·gap={{·sm:·4,·xs:·2·}}·container·direction={{·sm:·\"row\",·xs:·\"column\"·}}`",{"range":"2030","text":"2031"},"Replace `␍⏎··············{/*·<FilterList·title=\"Filter\"·onClick={handleDialogOpens1}·/>·*/}␍⏎············` with `{/*·<FilterList·title=\"Filter\"·onClick={handleDialogOpens1}·/>·*/}`",{"range":"2032","text":"2033"},"Replace `␍⏎····························handleSelectedRows(␍⏎······························row.id,␍⏎······························selectedRows,␍⏎······························setSelectedRows␍⏎····························)␍⏎··························` with `·handleSelectedRows(row.id,·selectedRows,·setSelectedRows)`",{"range":"2034","text":"2035"},"Replace `␍⏎······························src={row.icon}␍⏎······························sx={{·width:·24,·height:·24·}}␍⏎···························` with `·src={row.icon}·sx={{·width:·24,·height:·24·}}`",{"range":"2036","text":"2037"},"Replace `␍⏎····························{row.name}␍⏎··························` with `{row.name}`",{"range":"2038","text":"2039"},"Replace `␍⏎············headCells={partnersHeadCells2}␍⏎············paginationLabel=\"Providers··per·page\"␍⏎·········` with `·headCells={partnersHeadCells2}·paginationLabel=\"Providers··per·page\"`",{"range":"2040","text":"2041"},"Replace `␍⏎········isOpen={isOpens}␍⏎········title=\"Filter\"␍⏎········rowSpacing={5}␍⏎········handleClose={handleDialogCloses}␍⏎······` with `·isOpen={isOpens}·title=\"Filter\"·rowSpacing={5}·handleClose={handleDialogCloses}`",{"range":"2042","text":"2043"},"Replace `␍⏎··Grid,␍⏎··Button,␍⏎··Avatar,␍⏎··Chip,␍⏎··TableRow,␍⏎··TableCell,␍⏎··Checkbox,␍⏎` with `·Grid,·Button,·Avatar,·Chip,·TableRow,·TableCell,·Checkbox·`",{"range":"2044","text":"2045"},{"range":"2046","text":"1977"},"Delete `␍⏎···················`",{"range":"2047","text":"1975"},"Replace `␍⏎····························handleSelectedRows(␍⏎······························_id,␍⏎······························selectedRows,␍⏎······························setSelectedRows␍⏎····························)␍⏎··························` with `·handleSelectedRows(_id,·selectedRows,·setSelectedRows)`",{"range":"2048","text":"2049"},"Replace `␍⏎································doctorData·&&·doctorData.firstName␍⏎······························` with `doctorData·&&·doctorData.firstName`",{"range":"2050","text":"2051"},"Replace `␍⏎································doctorData·?·doctorData.picture·:·displayPhoto␍⏎······························` with `doctorData·?·doctorData.picture·:·displayPhoto`",{"range":"2052","text":"2053"},"Replace `␍⏎············headCells={HCPHeader}␍⏎············paginationLabel=\"Verification··per·page\"␍⏎·········` with `·headCells={HCPHeader}·paginationLabel=\"Verification··per·page\"`",{"range":"2054","text":"2055"},"Replace `␍⏎········container␍⏎········direction=\"column\"␍⏎········className={classes.gridContainer}␍⏎········gap={2}␍⏎······` with `·container·direction=\"column\"·className={classes.gridContainer}·gap={2}`",{"range":"2056","text":"2057"},"Replace `␍⏎··················title={card.title}␍⏎··················background={card.background}␍⏎··················header=\"h4\"␍⏎················` with `·title={card.title}·background={card.background}·header=\"h4\"`",{"range":"2058","text":"2059"},"Replace `␍⏎········container␍⏎········direction=\"column\"␍⏎········gap={2}␍⏎········rowSpacing={2}␍⏎········className={classes.gridContainer}␍⏎······` with `·container·direction=\"column\"·gap={2}·rowSpacing={2}·className={classes.gridContainer}`",{"range":"2060","text":"2061"},{"range":"2062","text":"2059"},"Delete `␍⏎·····················`",{"range":"2063","text":"1975"},"Replace `␍⏎··Grid,␍⏎··TableRow,␍⏎··TableCell,␍⏎··Checkbox,␍⏎··Alert,␍⏎··Button,␍⏎··Avatar,␍⏎` with `·Grid,·TableRow,·TableCell,·Checkbox,·Alert,·Button,·Avatar·`",{"range":"2064","text":"2065"},{"range":"2066","text":"2025"},{"range":"2067","text":"1975"},{"range":"2068","text":"1977"},"Replace `␍⏎··········item␍⏎··········gap={{·sm:·4,·xs:·2·}}␍⏎··········container␍⏎··········direction={{·md:·\"row\",·sm:·\"column\"·}}␍⏎········` with `·item·gap={{·sm:·4,·xs:·2·}}·container·direction={{·md:·\"row\",·sm:·\"column\"·}}`",{"range":"2069","text":"2070"},"Replace `␍⏎··························handleSelectedRows(_id,·selectedRows,·setSelectedRows)␍⏎························` with `·handleSelectedRows(_id,·selectedRows,·setSelectedRows)`",{"range":"2071","text":"2049"},{"range":"2072","text":"2041"},{"range":"2073","text":"2043"},"Replace `␍⏎····················item␍⏎····················style={{·marginBottom:·\"18rem\",·marginTop:·\"3rem\"·}}␍⏎··················` with `·item·style={{·marginBottom:·\"18rem\",·marginTop:·\"3rem\"·}}`",{"range":"2074","text":"2075"},"Replace `␍⏎············to=\"/settings/list-management\"␍⏎············style={{·textDecoration:·\"none\"·}}␍⏎··········` with `·to=\"/settings/list-management\"·style={{·textDecoration:·\"none\"·}}`",{"range":"2076","text":"2077"},"Replace `␍⏎··········item␍⏎··········container␍⏎··········direction=\"column\"␍⏎··········width=\"100%\"␍⏎··········className={classes.parentGrid}␍⏎········` with `·item·container·direction=\"column\"·width=\"100%\"·className={classes.parentGrid}`",{"range":"2078","text":"2079"},"Replace `␍⏎······················consultations·&&·doc·&&·doc.picture␍⏎························?·doc.picture␍⏎························:·displayPhoto␍⏎····················` with `consultations·&&·doc·&&·doc.picture·?·doc.picture·:·displayPhoto`",{"range":"2080","text":"2081"},"Replace `␍⏎······················?·`${doc·&&·doc.firstName}·${doc·&&·doc.lastName}`␍⏎·····················` with `·?·`${doc·&&·doc.firstName}·${doc·&&·doc.lastName}``",{"range":"2082","text":"2083"},"Replace `␍⏎····················{dateMoment(consultations.updatedAt)}␍⏎··················` with `{dateMoment(consultations.updatedAt)}`",{"range":"2084","text":"2085"},"Replace `␍⏎··················?·consultations.doctorNote␍⏎·················` with `·?·consultations.doctorNote`",{"range":"2086","text":"2087"},"Replace `␍⏎··········item␍⏎··········direction=\"column\"␍⏎··········className={classes.gridWrapper}␍⏎··········container␍⏎··········gap={2}␍⏎········` with `·item·direction=\"column\"·className={classes.gridWrapper}·container·gap={2}`",{"range":"2088","text":"2089"},"Replace `␍⏎··················recipientData·&&·recipientData.firstName␍⏎················` with `recipientData·&&·recipientData.firstName`",{"range":"2090","text":"2091"},"Replace `␍⏎··changeTableLimit,␍⏎··handlePageChange,␍⏎` with `·changeTableLimit,·handlePageChange·`",{"range":"2092","text":"2093"},"Replace `␍⏎······.trim()␍⏎······` with `.trim()`",{"range":"2094","text":"2095"},{"range":"2096","text":"2095"},"Replace `␍⏎······\"permission·is·required\"␍⏎····` with `\"permission·is·required\"`",{"range":"2097","text":"2098"},"Replace `␍⏎······\"Description·is·required\"␍⏎····` with `\"Description·is·required\"`",{"range":"2099","text":"2100"},{"range":"2101","text":"1975"},{"range":"2102","text":"2035"},"Replace `␍⏎············headCells={PermissionHeader}␍⏎············paginationLabel=\"Permission··per·page\"␍⏎·········` with `·headCells={PermissionHeader}·paginationLabel=\"Permission··per·page\"`",{"range":"2103","text":"2104"},"Replace `␍⏎········isOpen={isOpen}␍⏎········title=\"Filter\"␍⏎········rowSpacing={5}␍⏎········handleClose={handleDialogClose}␍⏎······` with `·isOpen={isOpen}·title=\"Filter\"·rowSpacing={5}·handleClose={handleDialogClose}`",{"range":"2105","text":"2106"},"Replace `␍⏎········isOpen={isOpen}␍⏎········title=\"Add·new·permission\"␍⏎········handleClose={handleDialogClose}␍⏎······` with `·isOpen={isOpen}·title=\"Add·new·permission\"·handleClose={handleDialogClose}`",{"range":"2107","text":"2108"},"Replace `␍⏎········isOpen={isEdit}␍⏎········title=\"Edit·permission\"␍⏎········handleClose={handleEditCloseDialog}␍⏎······` with `·isOpen={isEdit}·title=\"Edit·permission\"·handleClose={handleEditCloseDialog}`",{"range":"2109","text":"2110"},"Replace `␍⏎··CustomButton,␍⏎··Loader,␍⏎··DisplayProfile,␍⏎··ProfileCard,␍⏎` with `·CustomButton,·Loader,·DisplayProfile,·ProfileCard·`",{"range":"2111","text":"2112"},"Replace `␍⏎··getPatients,␍⏎··getProfile,␍⏎··verifiedEmail,␍⏎` with `·getPatients,·getProfile,·verifiedEmail·`",{"range":"2113","text":"2114"},"Replace `␍⏎············text=\"Provider\"␍⏎············value={provider·?·provider·:·\"No·Provider\"}␍⏎·········` with `·text=\"Provider\"·value={provider·?·provider·:·\"No·Provider\"}`",{"range":"2115","text":"2116"},"Replace `␍⏎············text=\"Verified\"␍⏎············value={emailStat·==·\"false\"·?·\"Not·Verified\"·:·\"Verified\"}␍⏎·········` with `·text=\"Verified\"·value={emailStat·==·\"false\"·?·\"Not·Verified\"·:·\"Verified\"}`",{"range":"2117","text":"2118"},"Replace `␍⏎··CustomButton,␍⏎··/*·FilterList,·*/·Modals,␍⏎··Loader,␍⏎` with `·CustomButton,·/*·FilterList,·*/·Modals,·Loader·`",{"range":"2119","text":"2120"},{"range":"2121","text":"2025"},"Replace `␍⏎······\"Date··and·time·is·required\"␍⏎····` with `\"Date··and·time·is·required\"`",{"range":"2122","text":"2123"},{"range":"2124","text":"1975"},{"range":"2125","text":"1977"},"Replace `␍⏎············item␍⏎············container␍⏎············flexWrap=\"nowrap\"␍⏎············justifyContent=\"space-between\"␍⏎············alignItems=\"center\"␍⏎··········` with `·item·container·flexWrap=\"nowrap\"·justifyContent=\"space-between\"·alignItems=\"center\"`",{"range":"2126","text":"2127"},"Replace `␍⏎····················getPatientsAppointment,␍⏎····················page,␍⏎····················pageInfo␍⏎··················` with `getPatientsAppointment,·page,·pageInfo`",{"range":"2128","text":"2129"},"Replace `␍⏎································row.id,␍⏎································selectedRows,␍⏎································setSelectedRows␍⏎······························` with `row.id,·selectedRows,·setSelectedRows`",{"range":"2130","text":"2131"},"Replace `␍⏎··································row.doctorData.picture␍⏎····································?·row.doctorData.picture␍⏎····································:·displayPhoto␍⏎································` with `row.doctorData.picture·?·row.doctorData.picture·:·displayPhoto`",{"range":"2132","text":"2133"},"Replace `␍⏎····················item␍⏎····················container␍⏎····················alignItems=\"flex-end\"␍⏎····················marginTop={5}␍⏎····················xs={12}␍⏎··················` with `·item·container·alignItems=\"flex-end\"·marginTop={5}·xs={12}`",{"range":"2134","text":"2135"},{"range":"2136","text":"2135"},"Replace `␍⏎··showSuccessMsg,␍⏎··handleError,␍⏎` with `·showSuccessMsg,·handleError·`",{"range":"2137","text":"2138"},{"range":"2139","text":"2095"},{"range":"2140","text":"2095"},{"range":"2141","text":"2095"},"Replace `␍⏎··················item␍⏎··················container␍⏎··················direction=\"column\"␍⏎··················className={classes.gridWrapper}␍⏎················` with `·item·container·direction=\"column\"·className={classes.gridWrapper}`",{"range":"2142","text":"2143"},"Replace `␍⏎······················item␍⏎······················container␍⏎······················alignItems=\"center\"␍⏎······················sx={{·gap:·\"0!important\"·}}␍⏎····················` with `·item·container·alignItems=\"center\"·sx={{·gap:·\"0!important\"·}}`",{"range":"2144","text":"2145"},"Replace `␍⏎····················item␍⏎····················style={{·alignSelf:·\"flex-end\",·marginTop:·\"2rem\"·}}␍⏎··················` with `·item·style={{·alignSelf:·\"flex-end\",·marginTop:·\"2rem\"·}}`",{"range":"2146","text":"2147"},"Replace `␍⏎··Button,␍⏎··Checkbox,␍⏎··TableCell,␍⏎··Avatar,␍⏎··TableRow,␍⏎··Grid,␍⏎··Typography,␍⏎` with `·Button,·Checkbox,·TableCell,·Avatar,·TableRow,·Grid,·Typography·`",{"range":"2148","text":"2149"},{"range":"2150","text":"1983"},{"range":"2151","text":"1975"},"Replace `␍⏎······container␍⏎······direction=\"column\"␍⏎······gap={{·sm:·4,·xs:·2·}}␍⏎······flexWrap=\"nowrap\"␍⏎······height=\"100%\"␍⏎····` with `·container·direction=\"column\"·gap={{·sm:·4,·xs:·2·}}·flexWrap=\"nowrap\"·height=\"100%\"`",{"range":"2152","text":"2153"},"Replace `␍⏎········item␍⏎········container␍⏎········gap={2}␍⏎········direction={{·md:·\"row\",·sm:·\"row\",·xs:·\"column\"·}}␍⏎······` with `·item·container·gap={2}·direction={{·md:·\"row\",·sm:·\"row\",·xs:·\"column\"·}}`",{"range":"2154","text":"2155"},"Replace `␍⏎··········item␍⏎··········container␍⏎··········justifyContent=\"space-between\"␍⏎··········flex={{·sm:·1,·xs:·1,·md:·1·}}␍⏎········` with `·item·container·justifyContent=\"space-between\"·flex={{·sm:·1,·xs:·1,·md:·1·}}`",{"range":"2156","text":"2157"},"Replace `␍⏎··························handleSelectedRows(␍⏎····························row.id,␍⏎····························selectedRows,␍⏎····························setSelectedRows␍⏎··························)␍⏎························` with `·handleSelectedRows(row.id,·selectedRows,·setSelectedRows)`",{"range":"2158","text":"2035"},"Replace `␍⏎··········headCells={partnersHeadCells}␍⏎··········paginationLabel=\"Doctors·per·page\"␍⏎·······` with `·headCells={partnersHeadCells}·paginationLabel=\"Doctors·per·page\"`",{"range":"2159","text":"2160"},"Replace `␍⏎··················item␍⏎··················container␍⏎··················spacing={2}␍⏎··················style={{·marginBottom:·\"10rem\"·}}␍⏎················` with `·item·container·spacing={2}·style={{·marginBottom:·\"10rem\"·}}`",{"range":"2161","text":"2162"},{"range":"2163","text":"1983"},{"range":"2164","text":"2093"},{"range":"2165","text":"1977"},{"range":"2166","text":"2049"},"Replace `␍⏎································recipientData·&&·recipientData.firstName␍⏎······························` with `recipientData·&&·recipientData.firstName`",{"range":"2167","text":"2091"},"Replace `␍⏎············headCells={messagesHeadCells}␍⏎············paginationLabel=\"Messages··per·page\"␍⏎·········` with `·headCells={messagesHeadCells}·paginationLabel=\"Messages··per·page\"`",{"range":"2168","text":"2169"},"Replace `␍⏎··getProfile,␍⏎··findAllergies,␍⏎··getLabResult,␍⏎` with `·getProfile,·findAllergies,·getLabResult·`",{"range":"2170","text":"2171"},"Replace `␍⏎····alergy,␍⏎····patients,␍⏎····patientId,␍⏎····labResult,␍⏎····allergyResult.data,␍⏎····labResults.data,␍⏎··` with `alergy,·patients,·patientId,·labResult,·allergyResult.data,·labResults.data`",{"range":"2172","text":"2173"},{"range":"2174","text":"1975"},"Delete `␍⏎·····`",{"range":"2175","text":"1975"},"Replace `␍⏎················patientProfile.height·?·patientProfile.height·:·\"No·Height\"␍⏎··············` with `patientProfile.height·?·patientProfile.height·:·\"No·Height\"`",{"range":"2176","text":"2177"},"Replace `␍⏎················patientProfile.weight·?·patientProfile.weight·:·\"No·Weight\"␍⏎··············` with `patientProfile.weight·?·patientProfile.weight·:·\"No·Weight\"`",{"range":"2178","text":"2179"},"Replace `␍⏎················patientProfile.bloodGroup␍⏎··················?·patientProfile.bloodGroup␍⏎··················:·\"No·Blood·Group\"␍⏎··············` with `patientProfile.bloodGroup·?·patientProfile.bloodGroup·:·\"No·Blood·Group\"`",{"range":"2180","text":"2181"},"Replace `␍⏎················patientProfile.genotype␍⏎··················?·patientProfile.genotype␍⏎··················:·\"No·Genotype\"␍⏎··············` with `patientProfile.genotype·?·patientProfile.genotype·:·\"No·Genotype\"`",{"range":"2182","text":"2183"},"Replace `␍⏎······················patientProfile.height,␍⏎······················patientProfile.weight␍⏎····················` with `patientProfile.height,·patientProfile.weight`",{"range":"2184","text":"2185"},"Replace `␍⏎··············text=\"Allergies\"␍⏎··············value={value.length·>·0·?·value·:·\"No·Allergy\"}␍⏎···········` with `·text=\"Allergies\"·value={value.length·>·0·?·value·:·\"No·Allergy\"}`",{"range":"2186","text":"2187"},"Replace `␍⏎··Grid,␍⏎··Button,␍⏎··TableRow,␍⏎··TableCell,␍⏎··Checkbox,␍⏎··Chip,␍⏎` with `·Grid,·Button,·TableRow,·TableCell,·Checkbox,·Chip·`",{"range":"2188","text":"2189"},"Replace `␍⏎··Loader,␍⏎··/*·Search,··*/·CustomButton,␍⏎··Modals,␍⏎` with `·Loader,·/*·Search,··*/·CustomButton,·Modals·`",{"range":"2190","text":"2191"},{"range":"2192","text":"1975"},"Replace `␍⏎······················...new·Set(row.permissions.map((i)·=>·i.split(\":\")[0])),␍⏎····················` with `...new·Set(row.permissions.map((i)·=>·i.split(\":\")[0]))`",{"range":"2193","text":"2194"},"Replace `␍⏎······················...data.slice(0,·5),␍⏎······················dataLength·?·`+${dataLength}`·:·null,` with `...data.slice(0,·5),·dataLength·?·`+${dataLength}`·:·null].filter(`",{"range":"2195","text":"2196"},"Replace `].filter((i)·=>·i·!==·null` with `··(i)·=>·i·!==·null,␍⏎····················`",{"range":"2197","text":"2198"},{"range":"2199","text":"2035"},"Replace `␍⏎··························container␍⏎··························justifyContent=\"flex-start\"␍⏎··························gap={1}␍⏎··························alignItems=\"center\"␍⏎························` with `·container·justifyContent=\"flex-start\"·gap={1}·alignItems=\"center\"`",{"range":"2200","text":"2201"},"Replace `(␍⏎································<Chip␍⏎··································label={i}␍⏎··································key={i}␍⏎··································className={classes.badge}␍⏎································/>␍⏎······························)` with `<Chip·label={i}·key={i}·className={classes.badge}·/>`",{"range":"2202","text":"2203"},"Replace `␍⏎··············headCells={roleHeader}␍⏎··············paginationLabel=\"Admin··per·page\"␍⏎···········` with `·headCells={roleHeader}·paginationLabel=\"Admin··per·page\"`",{"range":"2204","text":"2205"},"Replace `␍⏎········isOpen={isOpen}␍⏎········title=\"Add·new·role\"␍⏎········handleClose={handleDialogClose}␍⏎······` with `·isOpen={isOpen}·title=\"Add·new·role\"·handleClose={handleDialogClose}`",{"range":"2206","text":"2207"},"Replace `␍⏎··········handleDialogClose={handleDialogClose}␍⏎··········type=\"add\"␍⏎··········checkbox={checkbox}␍⏎·······` with `·handleDialogClose={handleDialogClose}·type=\"add\"·checkbox={checkbox}`",{"range":"2208","text":"2209"},"Replace `␍⏎··Grid,␍⏎··Avatar,␍⏎··Checkbox,␍⏎··TableCell,␍⏎··TableRow,␍⏎··Typography,␍⏎` with `·Grid,·Avatar,·Checkbox,·TableCell,·TableRow,·Typography·`",{"range":"2210","text":"2211"},{"range":"2212","text":"2035"},"Replace `␍⏎····························{row.doctor}␍⏎··························` with `{row.doctor}`",{"range":"2213","text":"2214"},"Replace `␍⏎············headCells={medicationsHeadCells}␍⏎············paginationLabel=\"Medications·per·page\"␍⏎·········` with `·headCells={medicationsHeadCells}·paginationLabel=\"Medications·per·page\"`",{"range":"2215","text":"2216"},"'useLayoutEffect' is defined but never used.","Replace `␍⏎············text=\"Date·Of·Birth\"␍⏎············value={dob·?·dateMoment(dob)·:·\"DOB·not·Provided\"}␍⏎·········` with `·text=\"Date·Of·Birth\"·value={dob·?·dateMoment(dob)·:·\"DOB·not·Provided\"}`",{"range":"2217","text":"2218"},"Replace `␍⏎····················className={`${classes.linkIcon}·${classes.locationIcon}`}␍⏎·················` with `·className={`${classes.linkIcon}·${classes.locationIcon}`}`",{"range":"2219","text":"2220"},"'useEffect' is defined but never used.","Replace `␍⏎··Grid,␍⏎··Typography,␍⏎··TableRow,␍⏎··TableCell,␍⏎··Avatar,␍⏎··Checkbox,␍⏎` with `·Grid,·Typography,·TableRow,·TableCell,·Avatar,·Checkbox·`",{"range":"2221","text":"2222"},{"range":"2223","text":"2028"},"Replace `␍⏎··········path=\"/finance\"·/*·onClick={()·=>·setSelectedSubMenu(0)}·*/␍⏎·······` with `·path=\"/finance\"·/*·onClick={()·=>·setSelectedSubMenu(0)}·*/`",{"range":"2224","text":"2225"},"Replace `␍⏎········item␍⏎········container␍⏎········justifyContent=\"space-between\"␍⏎········style={{·paddingBottom:·\"3rem\"·}}␍⏎······` with `·item·container·justifyContent=\"space-between\"·style={{·paddingBottom:·\"3rem\"·}}`",{"range":"2226","text":"2227"},"Replace `␍⏎··············.slice(page·*·rowsPerPage,·page·*·rowsPerPage·+·rowsPerPage)␍⏎··············` with `.slice(page·*·rowsPerPage,·page·*·rowsPerPage·+·rowsPerPage)`",{"range":"2228","text":"2229"},"Delete `··`",{"range":"2230","text":"1975"},{"range":"2231","text":"1975"},{"range":"2232","text":"1975"},{"range":"2233","text":"1975"},{"range":"2234","text":"1975"},{"range":"2235","text":"1975"},{"range":"2236","text":"1975"},{"range":"2237","text":"1975"},{"range":"2238","text":"1975"},{"range":"2239","text":"1975"},{"range":"2240","text":"1975"},{"range":"2241","text":"1975"},{"range":"2242","text":"1975"},"Replace `························onClick={()·=>␍⏎··························handleSelectedRows(␍⏎····························row.id,␍⏎····························selectedRows,␍⏎····························setSelectedRows␍⏎··························)␍⏎························` with `······················onClick={()·=>·handleSelectedRows(row.id,·selectedRows,·setSelectedRows)`",{"range":"2243","text":"2244"},{"range":"2245","text":"1975"},{"range":"2246","text":"1975"},{"range":"2247","text":"1975"},{"range":"2248","text":"1975"},{"range":"2249","text":"1975"},{"range":"2250","text":"1975"},{"range":"2251","text":"1975"},"Replace `····················` with `··················`",{"range":"2252","text":"2253"},{"range":"2254","text":"1975"},"Replace `······················` with `····················`",{"range":"2255","text":"2256"},{"range":"2257","text":"1975"},{"range":"2258","text":"2256"},{"range":"2259","text":"1975"},{"range":"2260","text":"1975"},{"range":"2261","text":"1975"},{"range":"2262","text":"2253"},{"range":"2263","text":"1975"},{"range":"2264","text":"2256"},{"range":"2265","text":"1975"},{"range":"2266","text":"2256"},{"range":"2267","text":"1975"},{"range":"2268","text":"1975"},{"range":"2269","text":"1975"},{"range":"2270","text":"1975"},{"range":"2271","text":"1975"},{"range":"2272","text":"1975"},{"range":"2273","text":"1975"},{"range":"2274","text":"1975"},{"range":"2275","text":"1975"},{"range":"2276","text":"1975"},{"range":"2277","text":"1975"},{"range":"2278","text":"1975"},{"range":"2279","text":"1975"},{"range":"2280","text":"1975"},{"range":"2281","text":"1975"},{"range":"2282","text":"1975"},{"range":"2283","text":"1975"},{"range":"2284","text":"1975"},"Replace `··························` with `························`",{"range":"2285","text":"2286"},{"range":"2287","text":"1975"},{"range":"2288","text":"1975"},{"range":"2289","text":"1975"},"Replace `························` with `······················`",{"range":"2290","text":"2291"},{"range":"2292","text":"1975"},{"range":"2293","text":"2253"},{"range":"2294","text":"1975"},{"range":"2295","text":"2256"},{"range":"2296","text":"1975"},{"range":"2297","text":"1975"},{"range":"2298","text":"1975"},{"range":"2299","text":"2256"},{"range":"2300","text":"1975"},{"range":"2301","text":"1975"},{"range":"2302","text":"1975"},{"range":"2303","text":"1975"},{"range":"2304","text":"1975"},{"range":"2305","text":"1975"},{"range":"2306","text":"1975"},{"range":"2307","text":"1975"},{"range":"2308","text":"1975"},{"range":"2309","text":"1975"},{"range":"2310","text":"1975"},{"range":"2311","text":"1975"},{"range":"2312","text":"1975"},{"range":"2313","text":"1975"},{"range":"2314","text":"1975"},{"range":"2315","text":"1975"},{"range":"2316","text":"1975"},{"range":"2317","text":"1975"},"Replace `␍⏎··········headCells={pendingHeader}␍⏎··········paginationLabel=\"Payout··per·page\"␍⏎·······` with `·headCells={pendingHeader}·paginationLabel=\"Payout··per·page\"`",{"range":"2318","text":"2319"},"Replace `␍⏎··financialPercent,␍⏎··selectOptions,␍⏎··formatNumber,␍⏎` with `·financialPercent,·selectOptions,·formatNumber·`",{"range":"2320","text":"2321"},"Replace `␍⏎··············item␍⏎··············spacing={2}␍⏎··············sx={{·justifyContent:·\"center\",·alignItems:·\"center\"·}}␍⏎············` with `·item·spacing={2}·sx={{·justifyContent:·\"center\",·alignItems:·\"center\"·}}`",{"range":"2322","text":"2323"},"Replace `␍⏎······················color=\"success\"␍⏎······················className={classes.cardIcon}␍⏎···················` with `·color=\"success\"·className={classes.cardIcon}`",{"range":"2324","text":"2325"},"Replace `␍⏎······················color=\"error\"␍⏎······················className={classes.cardIcon}␍⏎···················` with `·color=\"error\"·className={classes.cardIcon}`",{"range":"2326","text":"2327"},"Replace `␍⏎······\"recipients·is·required\"␍⏎····` with `\"recipients·is·required\"`",{"range":"2328","text":"2329"},{"range":"2330","text":"2143"},{"range":"2331","text":"2145"},{"range":"2332","text":"2147"},"Replace `␍⏎··Avatar,␍⏎··Typography,␍⏎··TableRow,␍⏎··Button,␍⏎··TableCell,␍⏎··Checkbox,␍⏎··Grid,␍⏎` with `·Avatar,·Typography,·TableRow,·Button,·TableCell,·Checkbox,·Grid·`",{"range":"2333","text":"2334"},{"range":"2335","text":"2093"},{"range":"2336","text":"1975"},"Replace `␍⏎··········path={`/hcps/${hcpId}`}·/*·onClick={()·=>·setSelectedHcpMenu(0)}·*/␍⏎·······` with `·path={`/hcps/${hcpId}`}·/*·onClick={()·=>·setSelectedHcpMenu(0)}·*/`",{"range":"2337","text":"2338"},"Replace `␍⏎························handleSelectedRows(_id,·selectedRows,·setSelectedRows)␍⏎······················` with `·handleSelectedRows(_id,·selectedRows,·setSelectedRows)`",{"range":"2339","text":"2049"},"Replace `␍⏎····························patientData.picture␍⏎······························?·patientData.picture␍⏎······························:·displayPhoto␍⏎··························` with `patientData.picture·?·patientData.picture·:·displayPhoto`",{"range":"2340","text":"2341"},"Replace `␍⏎··········headCells={consultationsHeadCells}␍⏎··········paginationLabel=\"Consultation··per·page\"␍⏎·······` with `·headCells={consultationsHeadCells}·paginationLabel=\"Consultation··per·page\"`",{"range":"2342","text":"2343"},"Replace `␍⏎··········item␍⏎··········container␍⏎··········direction=\"column\"␍⏎··········className={classes.parentGridWrapper}␍⏎········` with `·item·container·direction=\"column\"·className={classes.parentGridWrapper}`",{"range":"2344","text":"2345"},"Replace `␍⏎························{trucateString(referralId,·10)}␍⏎······················` with `{trucateString(referralId,·10)}`",{"range":"2346","text":"2347"},"Replace `␍⏎················item␍⏎················container␍⏎················flexDirection=\"column\"␍⏎················gap={2}␍⏎················className={classes.subItem}␍⏎··············` with `·item·container·flexDirection=\"column\"·gap={2}·className={classes.subItem}`",{"range":"2348","text":"2349"},{"range":"2350","text":"2347"},"Replace `␍⏎····················{severity·?·severity·:·\"No·value\"}␍⏎··················` with `{severity·?·severity·:·\"No·value\"}`",{"range":"2351","text":"2352"},"Replace `␍⏎··················{\"·\"}␍⏎··················{firstNotice·?·firstNotice·:·\"No·value\"}␍⏎················` with `·{firstNotice·?·firstNotice·:·\"No·value\"}`",{"range":"2353","text":"2354"},"Replace `␍⏎················item␍⏎················container␍⏎················flexDirection=\"column\"␍⏎················className={classes.subItem}␍⏎················gap={2}␍⏎··············` with `·item·container·flexDirection=\"column\"·className={classes.subItem}·gap={2}`",{"range":"2355","text":"2356"},"Replace `␍⏎····················variant=\"contained\"␍⏎····················label={status}␍⏎····················className={classes.infoBadge}␍⏎·················` with `·variant=\"contained\"·label={status}·className={classes.infoBadge}`",{"range":"2357","text":"2358"},"Replace `␍⏎····················{type·?·type·:·\"No·Value\"}␍⏎··················` with `{type·?·type·:·\"No·Value\"}`",{"range":"2359","text":"2360"},"Replace `␍⏎············item␍⏎············container␍⏎············style={{·padding:·\"2rem·3rem\"·}}␍⏎············justifyContent=\"flex-end\"␍⏎··········` with `·item·container·style={{·padding:·\"2rem·3rem\"·}}·justifyContent=\"flex-end\"`",{"range":"2361","text":"2362"},"Replace `␍⏎················item␍⏎················container␍⏎················className={classes.subItem}␍⏎················gap={{·md:·2,·sm:·2,·xs:·0·}}␍⏎··············` with `·item·container·className={classes.subItem}·gap={{·md:·2,·sm:·2,·xs:·0·}}`",{"range":"2363","text":"2364"},{"range":"2365","text":"2364"},{"range":"2366","text":"2364"},"Delete `{\"·\"}␍⏎·······················`",{"range":"2367","text":"1975"},"Replace `␍⏎··············item␍⏎··············container␍⏎··············direction=\"column\"␍⏎··············gap={{·md:·2,·sm:·2,·xs:·0·}}␍⏎············` with `·item·container·direction=\"column\"·gap={{·md:·2,·sm:·2,·xs:·0·}}`",{"range":"2368","text":"2369"},"Replace `␍⏎········item␍⏎········container␍⏎········direction=\"column\"␍⏎········gap={2}␍⏎········flexWrap=\"nowrap\"␍⏎········height=\"100%\"␍⏎······` with `·item·container·direction=\"column\"·gap={2}·flexWrap=\"nowrap\"·height=\"100%\"`",{"range":"2370","text":"2371"},"Replace `␍⏎··Grid,␍⏎··Typography,␍⏎··Chip,␍⏎··Checkbox,␍⏎··TableRow,␍⏎··TableCell,␍⏎` with `·Grid,·Typography,·Chip,·Checkbox,·TableRow,·TableCell·`",{"range":"2372","text":"2373"},{"range":"2374","text":"1975"},"Delete `␍⏎········`",{"range":"2375","text":"1975"},"Replace `··········` with `········`",{"range":"2376","text":"2377"},{"range":"2378","text":"1975"},{"range":"2379","text":"2377"},"Replace `··}␍⏎······` with `}`",{"range":"2380","text":"2381"},"Replace `␍⏎··········item␍⏎··········container␍⏎··········justifyContent=\"space-between\"␍⏎··········style={{·paddingBottom:·\"3rem\"·}}␍⏎········` with `·item·container·justifyContent=\"space-between\"·style={{·paddingBottom:·\"3rem\"·}}`",{"range":"2382","text":"2227"},"Replace `␍⏎··················fetchPayout,␍⏎··················page,␍⏎··················pageInfo,␍⏎··················{}␍⏎················` with `fetchPayout,·page,·pageInfo,·{}`",{"range":"2383","text":"2384"},{"range":"2385","text":"2049"},"Replace `␍⏎············headCells={payoutHeader}␍⏎············paginationLabel=\"Payout··per·page\"␍⏎·········` with `·headCells={payoutHeader}·paginationLabel=\"Payout··per·page\"`",{"range":"2386","text":"2387"},{"range":"2388","text":"2123"},"Replace `␍⏎········container␍⏎········gap={2}␍⏎········flexWrap=\"nowrap\"␍⏎········direction=\"column\"␍⏎········height=\"100%\"␍⏎······` with `·container·gap={2}·flexWrap=\"nowrap\"·direction=\"column\"·height=\"100%\"`",{"range":"2389","text":"2390"},"Replace `␍⏎················item␍⏎················container␍⏎················style={{·maxWidth:·\"60rem\",·padding:·\"4rem·5rem\"·}}␍⏎··············` with `·item·container·style={{·maxWidth:·\"60rem\",·padding:·\"4rem·5rem\"·}}`",{"range":"2391","text":"2392"},"Replace `␍⏎··················item␍⏎··················container␍⏎··················alignItems=\"center\"␍⏎··················justifyContent=\"space-between\"␍⏎················` with `·item·container·alignItems=\"center\"·justifyContent=\"space-between\"`",{"range":"2393","text":"2394"},"Replace `␍⏎························appoint.patientData.picture␍⏎··························?·appoint.patientData.picture␍⏎··························:·displayPhoto␍⏎······················` with `appoint.patientData.picture·?·appoint.patientData.picture·:·displayPhoto`",{"range":"2395","text":"2396"},"Replace `␍⏎··················container␍⏎··················justifyContent=\"flex-end\"␍⏎··················style={{·padding:·\"2rem·5rem\"·}}␍⏎················` with `·container·justifyContent=\"flex-end\"·style={{·padding:·\"2rem·5rem\"·}}`",{"range":"2397","text":"2398"},"Replace `␍⏎························handleSchedule(appoint._id,·appoint.patient)␍⏎······················` with `·handleSchedule(appoint._id,·appoint.patient)`",{"range":"2399","text":"2400"},{"range":"2401","text":"2135"},"Replace `␍⏎··Grid,␍⏎··Typography,␍⏎··Avatar,␍⏎··TableRow,␍⏎··Checkbox,␍⏎··TableCell,␍⏎··Button,␍⏎` with `·Grid,·Typography,·Avatar,·TableRow,·Checkbox,·TableCell,·Button·`",{"range":"2402","text":"2403"},{"range":"2404","text":"2093"},{"range":"2405","text":"1975"},{"range":"2406","text":"2049"},"Replace `␍⏎··························alt=\"Remy·Sharp\"␍⏎··························src={row.image}␍⏎··························sx={{·width:·24,·height:·24·}}␍⏎·······················` with `·alt=\"Remy·Sharp\"·src={row.image}·sx={{·width:·24,·height:·24·}}`",{"range":"2407","text":"2408"},"Replace `␍⏎··········headCells={hcpPatientsHeadCells}␍⏎··········paginationLabel=\"List··per·page\"␍⏎·······` with `·headCells={hcpPatientsHeadCells}·paginationLabel=\"List··per·page\"`",{"range":"2409","text":"2410"},"Replace `␍⏎··timeMoment,␍⏎··dateMoment,␍⏎··formatNumber,␍⏎` with `·timeMoment,·dateMoment,·formatNumber·`",{"range":"2411","text":"2412"},{"range":"2413","text":"2093"},{"range":"2414","text":"1975"},{"range":"2415","text":"2035"},"Replace `␍⏎············headCells={financeHeader}␍⏎············paginationLabel=\"Finance··per·page\"␍⏎·········` with `·headCells={financeHeader}·paginationLabel=\"Finance··per·page\"`",{"range":"2416","text":"2417"},{"range":"2418","text":"2321"},"Replace `␍⏎················item␍⏎················spacing={2}␍⏎················sx={{·justifyContent:·\"center\",·alignItems:·\"center\"·}}␍⏎··············` with `·item·spacing={2}·sx={{·justifyContent:·\"center\",·alignItems:·\"center\"·}}`",{"range":"2419","text":"2323"},"Replace `␍⏎··················container␍⏎··················alignItems=\"center\"␍⏎··················gap={{·md:·2,·sm:·2,·xs:·4·}}␍⏎················` with `·container·alignItems=\"center\"·gap={{·md:·2,·sm:·2,·xs:·4·}}`",{"range":"2420","text":"2421"},"Replace `␍⏎························color=\"success\"␍⏎························className={classes.cardIcon}␍⏎·····················` with `·color=\"success\"·className={classes.cardIcon}`",{"range":"2422","text":"2325"},{"range":"2423","text":"2421"},"Replace `␍⏎························color=\"error\"␍⏎························className={classes.cardIcon}␍⏎·····················` with `·color=\"error\"·className={classes.cardIcon}`",{"range":"2424","text":"2327"},"Replace `␍⏎················title=\"Doctor·Payout\"␍⏎················background={theme.palette.common.lightRed}␍⏎··············` with `·title=\"Doctor·Payout\"·background={theme.palette.common.lightRed}`",{"range":"2425","text":"2426"},"Replace `␍⏎················title=\"Doctor·Earnings\"␍⏎················background={theme.palette.common.lightGreen}␍⏎··············` with `·title=\"Doctor·Earnings\"·background={theme.palette.common.lightGreen}`",{"range":"2427","text":"2428"},"Replace `␍⏎····················color=\"success\"␍⏎····················className={classes.cardIcon}␍⏎·················` with `·color=\"success\"·className={classes.cardIcon}`",{"range":"2429","text":"2325"},"Replace `␍⏎················title=\"Subscription·Income\"␍⏎················background={theme.palette.common.lightGreen}␍⏎··············` with `·title=\"Subscription·Income\"·background={theme.palette.common.lightGreen}`",{"range":"2430","text":"2431"},{"range":"2432","text":"2325"},"Replace `␍⏎··PreviousButton,␍⏎··CustomButton,␍⏎··Loader,␍⏎··Modals,␍⏎` with `·PreviousButton,·CustomButton,·Loader,·Modals·`",{"range":"2433","text":"2434"},"Replace `␍⏎········enqueueSnackbar,␍⏎········Typography,␍⏎········\"Premissions·updated·successfully.\"␍⏎······` with `enqueueSnackbar,·Typography,·\"Premissions·updated·successfully.\"`",{"range":"2435","text":"2436"},"Replace `␍⏎························noWrap␍⏎························variant=\"h1\"␍⏎························component=\"div\"␍⏎························color=\"#2D2F39\"␍⏎······················` with `·noWrap·variant=\"h1\"·component=\"div\"·color=\"#2D2F39\"`",{"range":"2437","text":"2438"},"Replace `␍⏎······························role=\"checkbox\"␍⏎······························sx={{·padding:·\"0·5rem\"·}}␍⏎····························` with `·role=\"checkbox\"·sx={{·padding:·\"0·5rem\"·}}`",{"range":"2439","text":"2440"},"Replace `␍⏎··································?·`${row.name}:${type}`␍⏎·································` with `·?·`${row.name}:${type}``",{"range":"2441","text":"2442"},"Replace `␍⏎········isOpen={isOpen}␍⏎········title=\"Add·New·Role\"␍⏎········rowSpacing={5}␍⏎········handleClose={handleDialogClose}␍⏎······` with `·isOpen={isOpen}·title=\"Add·New·Role\"·rowSpacing={5}·handleClose={handleDialogClose}`",{"range":"2443","text":"2444"},"Replace `␍⏎····················title=\"Add·New·Role\"␍⏎····················width=\"100%\"␍⏎····················type={buttonType}␍⏎·················` with `·title=\"Add·New·Role\"·width=\"100%\"·type={buttonType}`",{"range":"2445","text":"2446"},"Replace `␍⏎··TableRow,␍⏎··Alert,␍⏎··TableCell,␍⏎··Checkbox,␍⏎··Button,␍⏎··Grid,␍⏎··Typography,␍⏎` with `·TableRow,·Alert,·TableCell,·Checkbox,·Button,·Grid,·Typography·`",{"range":"2447","text":"2448"},"Replace `␍⏎········container␍⏎········direction=\"column\"␍⏎········height=\"100%\"␍⏎········flexWrap=\"nowrap\"␍⏎········gap={2}␍⏎······` with `·container·direction=\"column\"·height=\"100%\"·flexWrap=\"nowrap\"·gap={2}`",{"range":"2449","text":"2450"},"Replace `␍⏎··········item␍⏎··········direction={{·sm:·\"row\",·xs:·\"column\"·}}␍⏎··········container␍⏎··········gap={{·md:·4,·sm:·4,·xs:·2·}}␍⏎········` with `·item·direction={{·sm:·\"row\",·xs:·\"column\"·}}·container·gap={{·md:·4,·sm:·4,·xs:·2·}}`",{"range":"2451","text":"2452"},"Replace `␍⏎······························handleSelectedRows(␍⏎································_id,␍⏎································selectedRows,␍⏎································setSelectedRows␍⏎······························)␍⏎····························` with `·handleSelectedRows(_id,·selectedRows,·setSelectedRows)`",{"range":"2453","text":"2049"},"Replace `␍⏎············headCells={emailHeader}␍⏎············paginationLabel=\"Email··per·page\"␍⏎·········` with `·headCells={emailHeader}·paginationLabel=\"Email··per·page\"`",{"range":"2454","text":"2455"},"Replace `␍⏎········item␍⏎········container␍⏎········justifyContent=\"space-between\"␍⏎········gap={5}␍⏎········sx={{·width:·\"100%\"·}}␍⏎······` with `·item·container·justifyContent=\"space-between\"·gap={5}·sx={{·width:·\"100%\"·}}`",{"range":"2456","text":"2457"},"Replace `␍⏎················variant=\"outlined\"␍⏎················label={gender}␍⏎················className={classes.infoBadge}␍⏎·············` with `·variant=\"outlined\"·label={gender}·className={classes.infoBadge}`",{"range":"2458","text":"2459"},{"range":"2460","text":"2220"},"Replace `␍⏎··getMessage,␍⏎··getProfileByDociId,␍⏎··getDoctorByDociId,␍⏎` with `·getMessage,·getProfileByDociId,·getDoctorByDociId·`",{"range":"2461","text":"2462"},"Replace `␍⏎····getDoctorByDociId,␍⏎···` with `getDoctorByDociId,`",{"range":"2463","text":"2464"},{"range":"2465","text":"1975"},{"range":"2466","text":"1975"},"Replace `····}␍⏎··` with `··}`",{"range":"2467","text":"2468"},{"range":"2469","text":"2095"},{"range":"2470","text":"2095"},{"range":"2471","text":"2095"},{"range":"2472","text":"1983"},{"range":"2473","text":"2143"},{"range":"2474","text":"2147"},"Replace `␍⏎··NoData,␍⏎··AvailabilityTable,␍⏎··DashboardCharts,␍⏎··EmptyTable,␍⏎` with `·NoData,·AvailabilityTable,·DashboardCharts,·EmptyTable·`",{"range":"2475","text":"2476"},{"range":"2477","text":"1983"},"Replace `␍⏎······Yup.string().email(\"Enter·a·valid·email\").required(\"Email·is·required\")␍⏎····` with `Yup.string().email(\"Enter·a·valid·email\").required(\"Email·is·required\")`",{"range":"2478","text":"2479"},{"range":"2480","text":"2143"},"Replace `␍⏎······································(state)·=>·state·!==·deletedVal␍⏎····································` with `(state)·=>·state·!==·deletedVal`",{"range":"2481","text":"2482"},"Replace `␍⏎························item␍⏎························container␍⏎························sx={{·marginBottom:·\"2rem\"·}}␍⏎························maxWidth=\"100%\"␍⏎······················` with `·item·container·sx={{·marginBottom:·\"2rem\"·}}·maxWidth=\"100%\"`",{"range":"2483","text":"2484"},"Replace `␍⏎······································\"textarea\",␍⏎······································editor.getData(\"text\")␍⏎····································` with `\"textarea\",·editor.getData(\"text\")`",{"range":"2485","text":"2486"},{"range":"2487","text":"2147"},"Replace `␍⏎··Grid,␍⏎··Typography,␍⏎··TableRow,␍⏎··TableCell,␍⏎··Checkbox,␍⏎··Button,␍⏎··Avatar,␍⏎` with `·Grid,·Typography,·TableRow,·TableCell,·Checkbox,·Button,·Avatar·`",{"range":"2488","text":"2489"},{"range":"2490","text":"2093"},{"range":"2491","text":"1975"},"Replace `␍⏎························handleSelectedRows(␍⏎··························row._id,␍⏎··························selectedRows,␍⏎··························setSelectedRows␍⏎························)␍⏎······················` with `·handleSelectedRows(row._id,·selectedRows,·setSelectedRows)`",{"range":"2492","text":"2493"},"Replace `␍⏎····························doctorData.picture␍⏎······························?·doctorData.picture␍⏎······························:·displayPhoto␍⏎··························` with `doctorData.picture·?·doctorData.picture·:·displayPhoto`",{"range":"2494","text":"2495"},"Replace `␍⏎··········headCells={consultationsHeadCells4}␍⏎··········paginationLabel=\"Patients·per·page\"␍⏎·······` with `·headCells={consultationsHeadCells4}·paginationLabel=\"Patients·per·page\"`",{"range":"2496","text":"2497"},{"range":"2498","text":"2345"},{"range":"2499","text":"2347"},{"range":"2500","text":"2349"},{"range":"2501","text":"2347"},{"range":"2502","text":"2352"},{"range":"2503","text":"2354"},{"range":"2504","text":"2356"},{"range":"2505","text":"2358"},{"range":"2506","text":"2360"},{"range":"2507","text":"2362"},{"range":"2508","text":"2364"},{"range":"2509","text":"2364"},{"range":"2510","text":"2364"},{"range":"2511","text":"1975"},{"range":"2512","text":"2369"},"Replace `␍⏎······container␍⏎······flex={1}␍⏎······flexDirection=\"column\"␍⏎······justifyContent=\"center\"␍⏎······rowGap={1}␍⏎····` with `·container·flex={1}·flexDirection=\"column\"·justifyContent=\"center\"·rowGap={1}`",{"range":"2513","text":"2514"},"Replace `␍⏎············style={{·fontSize:·\"2rem\",·color:·theme.palette.common.grey·}}␍⏎·········` with `·style={{·fontSize:·\"2rem\",·color:·theme.palette.common.grey·}}`",{"range":"2515","text":"2516"},"Replace `␍⏎················scopedSubMenu·===·0␍⏎··················?·theme.palette.common.red␍⏎·················` with `·scopedSubMenu·===·0·?·theme.palette.common.red`",{"range":"2517","text":"2518"},{"range":"2519","text":"2516"},{"range":"2520","text":"1983"},"Delete `␍⏎·······`",{"range":"2521","text":"1975"},"Replace `␍⏎····················item␍⏎····················sx={{·marginLeft:·\"0.5rem\",·display:·\"flex\"·}}␍⏎····················alignContent=\"center\"␍⏎··················` with `·item·sx={{·marginLeft:·\"0.5rem\",·display:·\"flex\"·}}·alignContent=\"center\"`",{"range":"2522","text":"2523"},"Replace `␍⏎··TableRow,␍⏎··Grid,␍⏎··Typography,␍⏎··TableCell,␍⏎··Avatar,␍⏎··Chip,␍⏎` with `·TableRow,·Grid,·Typography,·TableCell,·Avatar,·Chip·`",{"range":"2524","text":"2525"},"'page' is assigned a value but never used.","'rowsPerPage' is assigned a value but never used.","Replace `␍⏎································time.stop␍⏎······························` with `time.stop`",{"range":"2526","text":"2527"},"Replace `␍⏎··········headCells={availabilityHeadCells}␍⏎··········paginationLabel=\"Availability··per·page\"␍⏎·······` with `·headCells={availabilityHeadCells}·paginationLabel=\"Availability··per·page\"`",{"range":"2528","text":"2529"},"Replace `␍⏎············alt={`Display·Photo`}␍⏎············src={displayPhoto}␍⏎············sx={{·width:·50,·height:·50·}}␍⏎·········` with `·alt={`Display·Photo`}·src={displayPhoto}·sx={{·width:·50,·height:·50·}}`",{"range":"2530","text":"2531"},"Replace `␍⏎··················Specialization:␍⏎················` with `Specialization:`",{"range":"2532","text":"2533"},"Replace `␍⏎··················label={specialization}␍⏎··················color=\"success\"␍⏎··················className={classes.badge}␍⏎···············` with `·label={specialization}·color=\"success\"·className={classes.badge}`",{"range":"2534","text":"2535"},"Replace `␍⏎··················Status:␍⏎················` with `Status:`",{"range":"2536","text":"2537"},"Replace `␍⏎························?·theme.palette.common.green␍⏎·······················` with `·?·theme.palette.common.green`",{"range":"2538","text":"2539"},"Replace `␍⏎············{medicalTitle}:␍⏎··········</span>{\"·\"}␍⏎·········` with `{medicalTitle}:</span>`",{"range":"2540","text":"2541"},"Replace `␍⏎··························time?.start␍⏎························` with `time?.start`",{"range":"2542","text":"2543"},"Replace `␍⏎··························{`${hours(time?.stop)}`}{\"·\"}␍⏎·······················` with `{`${hours(time?.stop)}`}`",{"range":"2544","text":"2545"},{"range":"2546","text":"2412"},{"range":"2547","text":"2093"},"Replace `␍⏎····getSubscriptionsIncome␍⏎··` with `getSubscriptionsIncome`",{"range":"2548","text":"2549"},{"range":"2550","text":"2035"},{"range":"2551","text":"2417"},"Replace `␍⏎······{...props}␍⏎······onClick={()·=>·onHandleClick()}␍⏎······className={`button·${classes.closeBtn}`}␍⏎····` with `·{...props}·onClick={()·=>·onHandleClick()}·className={`button·${classes.closeBtn}`}`",{"range":"2552","text":"2553"},{"range":"2554","text":"1983"},"Replace `␍⏎······<Typography·style={{·fontSize:·\"1.2rem\"·}}>{successMsg}</Typography>,␍⏎·····` with `<Typography·style={{·fontSize:·\"1.2rem\"·}}>{successMsg}</Typography>,`",{"range":"2555","text":"2556"},{"range":"2557","text":"1975"},"Replace `········` with `······`",{"range":"2558","text":"2559"},{"range":"2560","text":"1975"},{"range":"2561","text":"2377"},{"range":"2562","text":"1975"},{"range":"2563","text":"2559"},{"range":"2564","text":"1975"},"Replace `··}␍⏎····` with `}`",{"range":"2565","text":"2381"},"Replace `␍⏎··········(err)·=>·err.message␍⏎········` with `(err)·=>·err.message`",{"range":"2566","text":"2567"},"'statusFilterValue' is assigned a value but never used.",{"range":"2568","text":"1975"},{"range":"2569","text":"1983"},{"range":"2570","text":"1975"},"Replace `␍⏎············onFilterProfileChange(\"gender\",·e?.target?.value)␍⏎··········` with `·onFilterProfileChange(\"gender\",·e?.target?.value)`",{"range":"2571","text":"2572"},"Replace `␍⏎············onFilterProfileChange(\"provider\",·e?.target?.value)␍⏎··········` with `·onFilterProfileChange(\"provider\",·e?.target?.value)`",{"range":"2573","text":"2574"},[4131,4200],"$id: String!, $name: String!, $description: String!",[4226,4297],"data: { id: $id, name: $name, description: $description }",[5142,5260]," id: $id, doctor: $doctor, patient: $patient, date: $date, time: $time",[5563,5657],"$recipient: String!, $sender: String!, $subject: String!, $body: String!",[5695,5806]," recipient: $recipient, sender: $sender, subject: $subject, body: $body",[8547,8643],"$id: String!, $name: String, $description: String, $permissions: [String!]",[8678,8793]," id: $id, name: $name, permissions: $permissions, description: $description",[10816,10908],"$name: String!, $iconAlt: String, $icon: String!, $userTypeId: String!",[10932,11064],"data: { name: $name, iconAlt: $iconAlt, icon: $icon, userTypeId: $userTypeId }",[11787,11885],"$authType: String!, $email: EmailAddress!, $password: String!, $role: String",[11901,12033],"data: { authType: $authType, email: $email, password: $password, role: $role }",[12723,12840]," food: $food, medication: $medication, profile: $profile, severity: $severity",[14559,14623],"data: { fileUrl: $fileUrl, bucket: \"heala-media\" }",[14852,14933],"$id: String!, $name: String!, $price: Float!, $tat: String!",[14966,15036],"data: { id: $id, name: $name, price: $price, tat: $tat }",[5422,5520]," exact path=\"/finance/sub-income\" component={SubscriptionIncome}",[838,985]," alt=\"providers \" title=\"Providers\" background={theme.palette.common.lightGreen}",[1338,1484]," alt=\"User Types\" title=\"User Types\" background={theme.palette.common.lightRed}",[1227,1348]," item container justifyContent=\"space-between\" style={{ paddingTop: \"5rem\" }}",[1395,1518]," item md className={classes.cardGrid} style={{ marginRight: \"2rem\" }}",[2010,2157]," variant=\"outlined\" label={symptom} className={classes.infoBadge}",[2316,2438]," item md className={classes.cardGrid} style={{ marginLeft: \"2rem\" }}",[2804,2934]," variant=\"outlined\" label=\"Type 1\" className={classes.infoBadge}",[3022,3143],[3201,3324],[3694,3822]," variant=\"outlined\" label=\"Once\" className={classes.infoBadge}",[3940,4062],[4431,4565]," variant=\"outlined\" label=\"01-10-2021\" className={classes.infoBadge}",[923,983]," CustomButton, Loader, PreviousButton, Modals ",[1874,1879],"",[2641,2763]," container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\"",[3660,3760]," headCells={testTableHeadCells} paginationLabel=\"Test per page\"",[4911,5015]," headCells={testTableHeadCells} paginationLabel=\"Patients per page\"",[7309,7309],",",[2297,2387]," window.open(`mailto:${details.email}`, \"_blank\")",[3347,3476]," item className={classes.gridWrapper} style={{ lineHeight: 1.85, fontSize: \"1.5rem\" }}",[2214,2214],[532,569]," handleError, showSuccessMsg ",[288,366]," FormControl, FormLabel, Grid, Avatar, Button, Typography ",{"desc":"2575","fix":"2576"},[2135,2135],[2407,2547]," container item direction=\"row\" justifyContent=\"center\" alignItems=\"center\"",[1038,1126],"enqueueSnackbar, \"Something went wrong while uploading file.\"",[1634,1739],"enqueueSnackbar, Typography, `${testAdded && testAdded} Tests Added.`",[2600,2642]," overwrite the current\r\n             ",[1952,2089]," container direction=\"column\" alignItems=\"center\" justifyContent=\"center\"",[2688,2791]," size=\"10rem\" color={theme.palette.warning.main}",[525,562],[1793,1930],[2299,2396],[2579,2705]," item style={{ marginBottom: \"2rem\" }} sx={{ textAlign: \"center\" }}",[4140,4140],"\r\n",[1985,2092]," getRootProps, getInputProps, isFocused, isDragAccept, isDragReject, open",[3280,3293],[3348,3481]," item container justifyContent=\"center\" style={{ marginTop: \"15px\" }}",[4045,4209],[402,485]," Grid, TableRow, Button, Avatar, TableCell, Checkbox, Alert ",[518,585]," CustomButton, Loader, Modals, Search, FilterList ",[1468,1530]," changeTableLimit, fetchMoreData, handlePageChange ",[4907,4912],[5503,5536],"(state) => state.tables",[6880,7002],[7308,7440]," item gap={{ sm: 4, xs: 2 }} container direction={{ sm: \"row\", xs: \"column\" }}",[7992,8088],"{/* <FilterList title=\"Filter\" onClick={handleDialogOpens1} /> */}",[9754,9993]," handleSelectedRows(row.id, selectedRows, setSelectedRows)",[10729,10866]," src={row.icon} sx={{ width: 24, height: 24 }}",[10970,11038],"{row.name}",[12676,12782]," headCells={partnersHeadCells2} paginationLabel=\"Providers  per page\"",[13913,14037]," isOpen={isOpens} title=\"Filter\" rowSpacing={5} handleClose={handleDialogCloses}",[245,327]," Grid, Button, Avatar, Chip, TableRow, TableCell, Checkbox ",[3869,3991],[6194,6215],[6821,7057]," handleSelectedRows(_id, selectedRows, setSelectedRows)",[8223,8323],"doctorData && doctorData.firstName",[8363,8475],"doctorData ? doctorData.picture : displayPhoto",[11398,11498]," headCells={HCPHeader} paginationLabel=\"Verification  per page\"",[4804,4919]," container direction=\"column\" className={classes.gridContainer} gap={2}",[6824,6959]," title={card.title} background={card.background} header=\"h4\"",[4260,4399]," container direction=\"column\" gap={2} rowSpacing={2} className={classes.gridContainer}",[6317,6452],[6566,6589],[356,439]," Grid, TableRow, TableCell, Checkbox, Alert, Button, Avatar ",[1353,1415],[3872,3877],[6869,6991],[7297,7429]," item gap={{ sm: 4, xs: 2 }} container direction={{ md: \"row\", sm: \"column\" }}",[9522,9630],[12042,12148],[13318,13442],[14211,14331]," item style={{ marginBottom: \"18rem\", marginTop: \"3rem\" }}",[2400,2504]," to=\"/settings/list-management\" style={{ textDecoration: \"none\" }}",[2235,2378]," item container direction=\"column\" width=\"100%\" className={classes.parentGrid}",[3070,3230],"consultations && doc && doc.picture ? doc.picture : displayPhoto",[3443,3540]," ? `${doc && doc.firstName} ${doc && doc.lastName}`",[4022,4101],"{dateMoment(consultations.updatedAt)}",[8213,8278]," ? consultations.doctorNote",[1700,1839]," item direction=\"column\" className={classes.gridWrapper} container gap={2}",[2077,2155],"recipientData && recipientData.firstName",[1396,1440]," changeTableLimit, handlePageChange ",[3723,3746],".trim()",[3894,3917],[4191,4229],"\"permission is required\"",[4291,4330],"\"Description is required\"",[6120,6125],[9034,9273],[12871,12976]," headCells={PermissionHeader} paginationLabel=\"Permission  per page\"",[13023,13145]," isOpen={isOpen} title=\"Filter\" rowSpacing={5} handleClose={handleDialogClose}",[15307,15417]," isOpen={isOpen} title=\"Add new permission\" handleClose={handleDialogClose}",[15737,15848]," isOpen={isEdit} title=\"Edit permission\" handleClose={handleEditCloseDialog}",[246,311]," CustomButton, Loader, DisplayProfile, ProfileCard ",[753,804]," getPatients, getProfile, verifiedEmail ",[4315,4412]," text=\"Provider\" value={provider ? provider : \"No Provider\"}",[4509,4621]," text=\"Verified\" value={emailStat == \"false\" ? \"Not Verified\" : \"Verified\"}",[134,193]," CustomButton, /* FilterList, */ Modals, Loader ",[1493,1555],[5416,5458],"\"Date  and time is required\"",[6300,6305],[8115,8237],[8267,8428]," item container flexWrap=\"nowrap\" justifyContent=\"space-between\" alignItems=\"center\"",[9398,9520],"getPatientsAppointment, page, pageInfo",[10405,10574],"row.id, selectedRows, setSelectedRows",[11635,11841],"row.doctorData.picture ? row.doctorData.picture : displayPhoto",[15559,15743]," item container alignItems=\"flex-end\" marginTop={5} xs={12}",[18565,18749],[684,721]," showSuccessMsg, handleError ",[2804,2827],[2908,2931],[3015,3038],[4609,4769]," item container direction=\"column\" className={classes.gridWrapper}",[4828,5005]," item container alignItems=\"center\" sx={{ gap: \"0!important\" }}",[7439,7559]," item style={{ alignSelf: \"flex-end\", marginTop: \"2rem\" }}",[496,584]," Button, Checkbox, TableCell, Avatar, TableRow, Grid, Typography ",[3996,3996],[5705,5710],[5788,5913]," container direction=\"column\" gap={{ sm: 4, xs: 2 }} flexWrap=\"nowrap\" height=\"100%\"",[5927,6045]," item container gap={2} direction={{ md: \"row\", sm: \"row\", xs: \"column\" }}",[6342,6473]," item container justifyContent=\"space-between\" flex={{ sm: 1, xs: 1, md: 1 }}",[8056,8283],[10831,10927]," headCells={partnersHeadCells} paginationLabel=\"Doctors per page\"",[12507,12662]," item container spacing={2} style={{ marginBottom: \"10rem\" }}",[19974,19974],[1134,1178],[4205,4327],[6560,6796],[7776,7882],[10222,10326]," headCells={messagesHeadCells} paginationLabel=\"Messages  per page\"",[363,415]," getProfile, findAllergies, getLabResult ",[1370,1481],"alergy, patients, patientId, labResult, allergyResult.data, labResults.data",[1701,1706],[1836,1843],[2496,2589],"patientProfile.height ? patientProfile.height : \"No Height\"",[2758,2851],"patientProfile.weight ? patientProfile.weight : \"No Weight\"",[3025,3169],"patientProfile.bloodGroup ? patientProfile.bloodGroup : \"No Blood Group\"",[3340,3477],"patientProfile.genotype ? patientProfile.genotype : \"No Genotype\"",[3717,3830],"patientProfile.height, patientProfile.weight",[4007,4115]," text=\"Allergies\" value={value.length > 0 ? value : \"No Allergy\"}",[61,132]," Grid, Button, TableRow, TableCell, Checkbox, Chip ",[165,221]," Loader, /* Search,  */ CustomButton, Modals ",[4820,4825],[7461,7563],"...new Set(row.permissions.map((i) => i.split(\":\")[0]))",[7655,7760],"...data.slice(0, 5), dataLength ? `+${dataLength}` : null].filter(",[7782,7808],"  (i) => i !== null,\r\n                    ",[8288,8527],[9615,9815]," container justifyContent=\"flex-start\" gap={1} alignItems=\"center\"",[9944,10202],"<Chip label={i} key={i} className={classes.badge} />",[11953,12053]," headCells={roleHeader} paginationLabel=\"Admin  per page\"",[12137,12241]," isOpen={isOpen} title=\"Add new role\" handleClose={handleDialogClose}",[12262,12373]," handleDialogClose={handleDialogClose} type=\"add\" checkbox={checkbox}",[98,175]," Grid, Avatar, Checkbox, TableCell, TableRow, Typography ",[3597,3836],[6278,6348],"{row.doctor}",[6586,6695]," headCells={medicationsHeadCells} paginationLabel=\"Medications per page\"",[2985,3094]," text=\"Date Of Birth\" value={dob ? dateMoment(dob) : \"DOB not Provided\"}",[4232,4330]," className={`${classes.linkIcon} ${classes.locationIcon}`}",[88,165]," Grid, Typography, TableRow, TableCell, Avatar, Checkbox ",[2305,2338],[2655,2735]," path=\"/finance\" /* onClick={() => setSelectedSubMenu(0)} */",[2768,2892]," item container justifyContent=\"space-between\" style={{ paddingBottom: \"3rem\" }}",[3909,4001],".slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)",[4025,4027],[4101,4103],[4186,4188],[4198,4200],[4245,4247],[4254,4256],[4309,4311],[4342,4344],[4395,4397],[4411,4413],[4474,4476],[4479,4481],[4551,4553],[4564,4829],"                      onClick={() => handleSelectedRows(row.id, selectedRows, setSelectedRows)",[4854,4856],[4873,4875],[4945,4947],[4962,4964],[5039,5041],[5045,5047],[5089,5091],[5105,5125],"                  ",[5137,5139],[5173,5195],"                    ",[5208,5210],[5246,5268],[5299,5301],[5386,5388],[5391,5393],[5430,5450],[5482,5484],[5496,5518],[5552,5554],[5567,5589],[5603,5605],[5676,5678],[5725,5727],[5768,5770],[5803,5805],[5819,5821],[5897,5899],[5947,5949],[5959,5961],[6026,6028],[6046,6048],[6117,6119],[6143,6145],[6148,6150],[6212,6214],[6273,6275],[6293,6295],[6367,6369],[6401,6427],"                        ",[6431,6433],[6464,6466],[6552,6554],[6586,6610],"                      ",[6639,6641],[6649,6669],[6701,6703],[6715,6737],[6753,6755],[6806,6808],[6891,6893],[6896,6918],[6932,6934],[6984,6986],[6998,7000],[7056,7058],[7089,7091],[7174,7176],[7179,7181],[7234,7236],[7250,7252],[7302,7304],[7320,7322],[7393,7395],[7460,7462],[7465,7467],[7499,7501],[7549,7551],[7578,7580],[7584,7586],[7680,7772]," headCells={pendingHeader} paginationLabel=\"Payout  per page\"",[632,690]," financialPercent, selectOptions, formatNumber ",[5684,5816]," item spacing={2} sx={{ justifyContent: \"center\", alignItems: \"center\" }}",[6134,6246]," color=\"success\" className={classes.cardIcon}",[7443,7553]," color=\"error\" className={classes.cardIcon}",[2778,2816],"\"recipients is required\"",[4264,4424],[4483,4660],[7094,7214],[213,301]," Avatar, Typography, TableRow, Button, TableCell, Checkbox, Grid ",[1084,1128],[2449,2454],[3114,3202]," path={`/hcps/${hcpId}`} /* onClick={() => setSelectedHcpMenu(0)} */",[5215,5319],[6359,6535],"patientData.picture ? patientData.picture : displayPhoto",[9201,9308]," headCells={consultationsHeadCells} paginationLabel=\"Consultation  per page\"",[3042,3168]," item container direction=\"column\" className={classes.parentGridWrapper}",[4447,4528],"{trucateString(referralId, 10)}",[4837,5012]," item container flexDirection=\"column\" gap={2} className={classes.subItem}",[5376,5457],[9024,9100],"{severity ? severity : \"No value\"}",[9512,9615]," {firstNotice ? firstNotice : \"No value\"}",[11416,11591]," item container flexDirection=\"column\" className={classes.subItem} gap={2}",[11836,11983]," variant=\"contained\" label={status} className={classes.infoBadge}",[12418,12486],"{type ? type : \"No Value\"}",[14502,14640]," item container style={{ padding: \"2rem 3rem\" }} justifyContent=\"flex-end\"",[15838,15995]," item container className={classes.subItem} gap={{ md: 2, sm: 2, xs: 0 }}",[16978,17135],[17556,17713],[20900,20930],[21669,21807]," item container direction=\"column\" gap={{ md: 2, sm: 2, xs: 0 }}",[1017,1153]," item container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\"",[119,194]," Grid, Typography, Chip, Checkbox, TableRow, TableCell ",[2821,2826],[2957,2967],[2984,2994],"        ",[3065,3067],[3126,3136],[3195,3206],"}",[5042,5176],[6536,6662],"fetchPayout, page, pageInfo, {}",[7539,7647],[10056,10153]," headCells={payoutHeader} paginationLabel=\"Payout  per page\"",[4329,4371],[5225,5347]," container gap={2} flexWrap=\"nowrap\" direction=\"column\" height=\"100%\"",[6096,6230]," item container style={{ maxWidth: \"60rem\", padding: \"4rem 5rem\" }}",[6254,6414]," item container alignItems=\"center\" justifyContent=\"space-between\"",[8218,8394],"appoint.patientData.picture ? appoint.patientData.picture : displayPhoto",[9544,9688]," container justifyContent=\"flex-end\" style={{ padding: \"2rem 5rem\" }}",[9995,10089]," handleSchedule(appoint._id, appoint.patient)",[12420,12604],[61,149]," Grid, Typography, Avatar, TableRow, Checkbox, TableCell, Button ",[923,967],[2055,2060],[4097,4201],[5285,5455]," alt=\"Remy Sharp\" src={row.image} sx={{ width: 24, height: 24 }}",[6624,6721]," headCells={hcpPatientsHeadCells} paginationLabel=\"List  per page\"",[209,258]," timeMoment, dateMoment, formatNumber ",[1019,1063],[2627,2632],[4998,5225],[7795,7894]," headCells={financeHeader} paginationLabel=\"Finance  per page\"",[660,718],[5414,5554],[5578,5713]," container alignItems=\"center\" gap={{ md: 2, sm: 2, xs: 4 }}",[5961,6079],[7049,7184],[7428,7544],[8866,8981]," title=\"Doctor Payout\" background={theme.palette.common.lightRed}",[9368,9487]," title=\"Doctor Earnings\" background={theme.palette.common.lightGreen}",[9581,9687],[10024,10147]," title=\"Subscription Income\" background={theme.palette.common.lightGreen}",[10241,10347],[621,681]," PreviousButton, CustomButton, Loader, Modals ",[4168,4268],"enqueueSnackbar, Typography, \"Premissions updated successfully.\"",[5787,5963]," noWrap variant=\"h1\" component=\"div\" color=\"#2D2F39\"",[8048,8183]," role=\"checkbox\" sx={{ padding: \"0 5rem\" }}",[9424,9518]," ? `${row.name}:${type}`",[10308,10436]," isOpen={isOpen} title=\"Add New Role\" rowSpacing={5} handleClose={handleDialogClose}",[11562,11696]," title=\"Add New Role\" width=\"100%\" type={buttonType}",[378,465]," TableRow, Alert, TableCell, Checkbox, Button, Grid, Typography ",[3619,3741]," container direction=\"column\" height=\"100%\" flexWrap=\"nowrap\" gap={2}",[4146,4285]," item direction={{ sm: \"row\", xs: \"column\" }} container gap={{ md: 4, sm: 4, xs: 2 }}",[7087,7335],[9492,9587]," headCells={emailHeader} paginationLabel=\"Email  per page\"",[3303,3433]," item container justifyContent=\"space-between\" gap={5} sx={{ width: \"100%\" }}",[3870,4000]," variant=\"outlined\" label={gender} className={classes.infoBadge}",[7264,7362],[637,699]," getMessage, getProfileByDociId, getDoctorByDociId ",[2173,2202],"getDoctorByDociId,",[2210,2212],[2242,2244],[2282,2291],"  }",[2584,2607],[2688,2711],[2795,2818],[3832,3832],[5368,5528],[8150,8270],[275,345]," NoData, AvailabilityTable, DashboardCharts, EmptyTable ",[934,934],[3294,3379],"Yup.string().email(\"Enter a valid email\").required(\"Email is required\")",[4355,4515],[6272,6381],"(state) => state !== deletedVal",[8343,8528]," item container sx={{ marginBottom: \"2rem\" }} maxWidth=\"100%\"",[9138,9289],"\"textarea\", editor.getData(\"text\")",[9752,9872],[160,248]," Grid, Typography, TableRow, TableCell, Checkbox, Button, Avatar ",[1072,1116],[2479,2484],[4919,5135]," handleSelectedRows(row._id, selectedRows, setSelectedRows)",[6178,6352],"doctorData.picture ? doctorData.picture : displayPhoto",[8878,8981]," headCells={consultationsHeadCells4} paginationLabel=\"Patients per page\"",[2998,3124],[4403,4484],[4793,4968],[5332,5413],[8974,9050],[9462,9565],[11366,11541],[11786,11933],[12368,12436],[14452,14590],[15790,15947],[16930,17087],[17508,17665],[20852,20882],[21621,21759],[2027,2145]," container flex={1} flexDirection=\"column\" justifyContent=\"center\" rowGap={1}",[4417,4504]," style={{ fontSize: \"2rem\", color: theme.palette.common.grey }}",[4647,4749]," scopedSubMenu === 0 ? theme.palette.common.red",[4980,5067],[6113,6113],[6672,6681],[8573,8730]," item sx={{ marginLeft: \"0.5rem\", display: \"flex\" }} alignContent=\"center\"",[61,134]," TableRow, Grid, Typography, TableCell, Avatar, Chip ",[4563,4638],"time.stop",[5246,5352]," headCells={availabilityHeadCells} paginationLabel=\"Availability  per page\"",[1434,1556]," alt={`Display Photo`} src={displayPhoto} sx={{ width: 50, height: 50 }}",[1946,1999],"Specialization:",[2034,2173]," label={specialization} color=\"success\" className={classes.badge}",[2392,2437],"Status:",[2912,2991]," ? theme.palette.common.green",[3328,3392],"{medicalTitle}:</span>",[1684,1749],"time?.start",[2020,2102],"{`${hours(time?.stop)}`}",[209,258],[1027,1071],[2657,2689],"getSubscriptionsIncome",[5058,5285],[6748,6847],[1020,1131]," {...props} onClick={() => onHandleClick()} className={`button ${classes.closeBtn}`}",[548,548],[637,721],"<Typography style={{ fontSize: \"1.2rem\" }}>{successMsg}</Typography>,",[725,727],[754,762],"      ",[793,795],[812,822],[852,854],[872,880],[884,886],[921,930],[1312,1354],"(err) => err.message",[1079,1084],[1279,1279],[1507,1512],[5956,6031]," onFilterProfileChange(\"gender\", e?.target?.value)",[6513,6590]," onFilterProfileChange(\"provider\", e?.target?.value)","Update the dependencies array to be: [enqueueSnackbar, isCompleted]",{"range":"2577","text":"2578"},[1842,1855],"[enqueueSnackbar, isCompleted]"]