[{"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/index.js":"1","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/accessToken.js":"2","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/App.js":"3","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/index.js":"4","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/muiTheme.js":"5","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/ScrollToView.js":"6","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/SideMenu.js":"7","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/Header.js":"8","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/Loader.js":"9","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Login.js":"10","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/routes/Routes.js":"11","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/HeaderContents.js":"12","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/store.js":"13","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/routes/PrivateRoute.js":"14","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/modals/DeleteOrDisable.js":"15","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/helpers/asideMenus.js":"16","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/hooks/useActions.js":"17","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/graphQL/Mutation.js":"18","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/validation/LoginInput.js":"19","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/index.js":"20","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/index.js":"21","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/HeaderProfile.js":"22","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/graphQL/useQuery.js":"23","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/SearchInput.js":"24","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/WhiteLabel.js":"25","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/WaitingListDetails.js":"26","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/WaitingList.js":"27","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/ViewMail.js":"28","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/ViewReferral.js":"29","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/ViewHCP.js":"30","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/reducers/index.js":"31","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/Notifications.js":"32","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/TextError.js":"33","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/graphQL/fragment.js":"34","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/reducers/hcpReducer.js":"35","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/reducers/patientReducer.js":"36","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/reducers/authReducer.js":"37","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/reducers/tablesReducer.js":"38","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/action-creators/index.js":"39","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/Card.js":"40","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/PreviousButton.js":"41","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/Time.js":"42","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/NoData.js":"43","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/WaitingListTable.js":"44","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/action-creators/hcp.js":"45","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/action-creators/patient.js":"46","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/action-creators/auth.js":"47","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/action-creators/tablesActions.js":"48","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/action-types/index.js":"49","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/EnhancedTable.js":"50","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/tableData.js":"51","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/helpers/selectedRows.js":"52","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/helpers/isSelected.js":"53","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/tableHeaders.js":"54","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/EnhancedTableToolbar.js":"55","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/EnhancedTableHeader.js":"56","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/DisplayProfile.js":"57","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/CustomButton.js":"58","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/VideoCall.js":"59","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/UserTypes.js":"60","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/SinglePatient.js":"61","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Subscription.js":"62","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/SingleHCP.js":"63","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Settings.js":"64","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/ReferralTab.js":"65","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Prescriptions.js":"66","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/ViewMessage.js":"67","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Providers.js":"68","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Permission.js":"69","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/PendingPayout.js":"70","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Patients.js":"71","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/PatientProfile.js":"72","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/PatientAppointment.js":"73","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Partners.js":"74","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Chat.js":"75","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Messages.js":"76","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Medications.js":"77","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/MedicalRecords.js":"78","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Management.js":"79","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Hcps.js":"80","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/HcpProfile.js":"81","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/HcpEarnings.js":"82","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/HcpPatients.js":"83","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/HcpConsultations.js":"84","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Payout.js":"85","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/HCPChat.js":"86","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/HcpAvailability.js":"87","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/HcpCaseNote.js":"88","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/HcpAppointments.js":"89","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/HCP.js":"90","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Financetable.js":"91","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Finance.js":"92","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Email.js":"93","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/EditManagement.js":"94","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Dashboard.js":"95","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/CreateMessage.js":"96","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Consultations.js":"97","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/CreateEmail.js":"98","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/CaseNotes.js":"99","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Appointments.js":"100","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Administrator.js":"101","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/Search.js":"102","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/Modal.js":"103","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/LineChart.js":"104","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/LinearProgress.js":"105","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/FormSelect.js":"106","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/FormInput.js":"107","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/FilterList.js":"108","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/DataGrid.js":"109","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/CircularChart.js":"110","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/CheckBox.js":"111","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/Button.js":"112","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/AvailabilityCard.js":"113","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/modals/UserTypeModal.js":"114","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/modals/ReferPatient.js":"115","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/modals/SubscriptionModal.js":"116","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/modals/PermissionModal.js":"117","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/validation/FormikControl.js":"118","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/bMI.js":"119","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/modals/RoleModal.js":"120","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/CircularProgress.js":"121","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/modals/Filter.js":"122","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/AvailabilityTable.js":"123","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/DashboardChart.js":"124","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/DataHeader.js":"125","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/index.js":"126","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/modals/ProviderModal.js":"127","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/validation/DateTimePicker.js":"128","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/validation/File.js":"129","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/PageHero.js":"130","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/LineGraph.js":"131","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/EnhancedTableAction.js":"132","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/Card.js":"133","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/validation/Textarea.js":"134","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/validation/Date.js":"135","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/validation/Select.js":"136","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/validation/Checkbox.js":"137","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/validation/Input.js":"138","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/Texts.js":"139"},{"size":1122,"mtime":1645390013584,"results":"140","hashOfConfig":"141"},{"size":156,"mtime":1645390013556,"results":"142","hashOfConfig":"141"},{"size":4850,"mtime":1645390013556,"results":"143","hashOfConfig":"141"},{"size":37,"mtime":1645390013584,"results":"144","hashOfConfig":"141"},{"size":3100,"mtime":1645390013576,"results":"145","hashOfConfig":"141"},{"size":392,"mtime":1645390013572,"results":"146","hashOfConfig":"141"},{"size":5431,"mtime":1645390013576,"results":"147","hashOfConfig":"141"},{"size":1721,"mtime":1645390013576,"results":"148","hashOfConfig":"141"},{"size":457,"mtime":1645390013576,"results":"149","hashOfConfig":"141"},{"size":9842,"mtime":1645390013580,"results":"150","hashOfConfig":"141"},{"size":18348,"mtime":1645396116227,"results":"151","hashOfConfig":"141"},{"size":14006,"mtime":1645390013576,"results":"152","hashOfConfig":"141"},{"size":290,"mtime":1645390013588,"results":"153","hashOfConfig":"141"},{"size":874,"mtime":1645390013584,"results":"154","hashOfConfig":"141"},{"size":4204,"mtime":1645390013576,"results":"155","hashOfConfig":"141"},{"size":1504,"mtime":1645391977338,"results":"156","hashOfConfig":"141"},{"size":553,"mtime":1645390013576,"results":"157","hashOfConfig":"141"},{"size":11492,"mtime":1645399312258,"results":"158","hashOfConfig":"141"},{"size":1114,"mtime":1645390013584,"results":"159","hashOfConfig":"141"},{"size":963,"mtime":1645390013576,"results":"160","hashOfConfig":"141"},{"size":2740,"mtime":1645390013584,"results":"161","hashOfConfig":"141"},{"size":3015,"mtime":1645390013576,"results":"162","hashOfConfig":"141"},{"size":17256,"mtime":1645397714756,"results":"163","hashOfConfig":"141"},{"size":1927,"mtime":1645390013576,"results":"164","hashOfConfig":"141"},{"size":2448,"mtime":1645390013584,"results":"165","hashOfConfig":"141"},{"size":5120,"mtime":1645390013584,"results":"166","hashOfConfig":"141"},{"size":1716,"mtime":1645390013584,"results":"167","hashOfConfig":"141"},{"size":4145,"mtime":1645390013584,"results":"168","hashOfConfig":"141"},{"size":8547,"mtime":1645390013584,"results":"169","hashOfConfig":"141"},{"size":13570,"mtime":1645392688185,"results":"170","hashOfConfig":"141"},{"size":371,"mtime":1645390013584,"results":"171","hashOfConfig":"141"},{"size":2716,"mtime":1645390013576,"results":"172","hashOfConfig":"141"},{"size":425,"mtime":1645390013576,"results":"173","hashOfConfig":"141"},{"size":247,"mtime":1645390013576,"results":"174","hashOfConfig":"141"},{"size":375,"mtime":1645390013584,"results":"175","hashOfConfig":"141"},{"size":384,"mtime":1645390013584,"results":"176","hashOfConfig":"141"},{"size":1924,"mtime":1645390013584,"results":"177","hashOfConfig":"141"},{"size":770,"mtime":1645390013588,"results":"178","hashOfConfig":"141"},{"size":256,"mtime":1645390013584,"results":"179","hashOfConfig":"141"},{"size":1131,"mtime":1645390013572,"results":"180","hashOfConfig":"141"},{"size":743,"mtime":1645390013576,"results":"181","hashOfConfig":"141"},{"size":1925,"mtime":1645390013576,"results":"182","hashOfConfig":"141"},{"size":638,"mtime":1645390013576,"results":"183","hashOfConfig":"141"},{"size":4934,"mtime":1645390013576,"results":"184","hashOfConfig":"141"},{"size":203,"mtime":1645390013584,"results":"185","hashOfConfig":"141"},{"size":208,"mtime":1645390013584,"results":"186","hashOfConfig":"141"},{"size":857,"mtime":1645390013584,"results":"187","hashOfConfig":"141"},{"size":527,"mtime":1645390013584,"results":"188","hashOfConfig":"141"},{"size":678,"mtime":1645390013584,"results":"189","hashOfConfig":"141"},{"size":6279,"mtime":1645390013576,"results":"190","hashOfConfig":"141"},{"size":7642,"mtime":1645390013576,"results":"191","hashOfConfig":"141"},{"size":664,"mtime":1645390013584,"results":"192","hashOfConfig":"141"},{"size":81,"mtime":1645390013584,"results":"193","hashOfConfig":"141"},{"size":6010,"mtime":1645390013576,"results":"194","hashOfConfig":"141"},{"size":1739,"mtime":1645390013576,"results":"195","hashOfConfig":"141"},{"size":1798,"mtime":1645390013576,"results":"196","hashOfConfig":"141"},{"size":4987,"mtime":1645390013576,"results":"197","hashOfConfig":"141"},{"size":2328,"mtime":1645390013572,"results":"198","hashOfConfig":"141"},{"size":4063,"mtime":1645390013584,"results":"199","hashOfConfig":"141"},{"size":14438,"mtime":1645390013584,"results":"200","hashOfConfig":"141"},{"size":9487,"mtime":1645390013584,"results":"201","hashOfConfig":"141"},{"size":13331,"mtime":1645390013584,"results":"202","hashOfConfig":"141"},{"size":7987,"mtime":1645390013584,"results":"203","hashOfConfig":"141"},{"size":4065,"mtime":1645390013584,"results":"204","hashOfConfig":"141"},{"size":14432,"mtime":1645390013584,"results":"205","hashOfConfig":"141"},{"size":7481,"mtime":1645390013580,"results":"206","hashOfConfig":"141"},{"size":3127,"mtime":1645390013584,"results":"207","hashOfConfig":"141"},{"size":15161,"mtime":1645390013584,"results":"208","hashOfConfig":"141"},{"size":15742,"mtime":1645390013580,"results":"209","hashOfConfig":"141"},{"size":7212,"mtime":1645390013580,"results":"210","hashOfConfig":"141"},{"size":12045,"mtime":1645397368748,"results":"211","hashOfConfig":"141"},{"size":11717,"mtime":1645390013580,"results":"212","hashOfConfig":"141"},{"size":19315,"mtime":1645394694083,"results":"213","hashOfConfig":"141"},{"size":19992,"mtime":1645395195231,"results":"214","hashOfConfig":"141"},{"size":8153,"mtime":1645390013576,"results":"215","hashOfConfig":"141"},{"size":9708,"mtime":1645390013580,"results":"216","hashOfConfig":"141"},{"size":7243,"mtime":1645390013580,"results":"217","hashOfConfig":"141"},{"size":10754,"mtime":1645390013580,"results":"218","hashOfConfig":"141"},{"size":12826,"mtime":1645390013580,"results":"219","hashOfConfig":"141"},{"size":21348,"mtime":1645399724871,"results":"220","hashOfConfig":"141"},{"size":8612,"mtime":1645390013580,"results":"221","hashOfConfig":"141"},{"size":6853,"mtime":1645390013580,"results":"222","hashOfConfig":"141"},{"size":7284,"mtime":1645390013580,"results":"223","hashOfConfig":"141"},{"size":10316,"mtime":1645390013580,"results":"224","hashOfConfig":"141"},{"size":9166,"mtime":1645390013580,"results":"225","hashOfConfig":"141"},{"size":8116,"mtime":1645390013580,"results":"226","hashOfConfig":"141"},{"size":2261,"mtime":1645390013580,"results":"227","hashOfConfig":"141"},{"size":19687,"mtime":1645390013580,"results":"228","hashOfConfig":"141"},{"size":13161,"mtime":1645394694087,"results":"229","hashOfConfig":"141"},{"size":10384,"mtime":1645390013580,"results":"230","hashOfConfig":"141"},{"size":8218,"mtime":1645390013580,"results":"231","hashOfConfig":"141"},{"size":8950,"mtime":1645390013580,"results":"232","hashOfConfig":"141"},{"size":13707,"mtime":1645390013580,"results":"233","hashOfConfig":"141"},{"size":9272,"mtime":1645390013580,"results":"234","hashOfConfig":"141"},{"size":2617,"mtime":1645390013580,"results":"235","hashOfConfig":"141"},{"size":8841,"mtime":1645390013580,"results":"236","hashOfConfig":"141"},{"size":9867,"mtime":1645390013580,"results":"237","hashOfConfig":"141"},{"size":10403,"mtime":1645390013580,"results":"238","hashOfConfig":"141"},{"size":20447,"mtime":1645390013576,"results":"239","hashOfConfig":"141"},{"size":2267,"mtime":1645390013576,"results":"240","hashOfConfig":"141"},{"size":14261,"mtime":1645394694087,"results":"241","hashOfConfig":"141"},{"size":1630,"mtime":1645390013576,"results":"242","hashOfConfig":"141"},{"size":2227,"mtime":1645394609311,"results":"243","hashOfConfig":"141"},{"size":5147,"mtime":1645390013576,"results":"244","hashOfConfig":"141"},{"size":1061,"mtime":1645390013576,"results":"245","hashOfConfig":"141"},{"size":1337,"mtime":1645390013576,"results":"246","hashOfConfig":"141"},{"size":961,"mtime":1645390013576,"results":"247","hashOfConfig":"141"},{"size":1424,"mtime":1645390013576,"results":"248","hashOfConfig":"141"},{"size":3914,"mtime":1645390013572,"results":"249","hashOfConfig":"141"},{"size":3389,"mtime":1645390013572,"results":"250","hashOfConfig":"141"},{"size":1955,"mtime":1645390013572,"results":"251","hashOfConfig":"141"},{"size":1325,"mtime":1645390013572,"results":"252","hashOfConfig":"141"},{"size":2409,"mtime":1645390013572,"results":"253","hashOfConfig":"141"},{"size":4339,"mtime":1645390013576,"results":"254","hashOfConfig":"141"},{"size":4119,"mtime":1645390013576,"results":"255","hashOfConfig":"141"},{"size":6915,"mtime":1645390013576,"results":"256","hashOfConfig":"141"},{"size":4603,"mtime":1645390013576,"results":"257","hashOfConfig":"141"},{"size":912,"mtime":1645390013584,"results":"258","hashOfConfig":"141"},{"size":172,"mtime":1645390013576,"results":"259","hashOfConfig":"141"},{"size":3175,"mtime":1645390013576,"results":"260","hashOfConfig":"141"},{"size":1502,"mtime":1645390013572,"results":"261","hashOfConfig":"141"},{"size":4024,"mtime":1645397565014,"results":"262","hashOfConfig":"141"},{"size":5575,"mtime":1645390013576,"results":"263","hashOfConfig":"141"},{"size":24096,"mtime":1645390013576,"results":"264","hashOfConfig":"141"},{"size":19075,"mtime":1645390013576,"results":"265","hashOfConfig":"141"},{"size":808,"mtime":1645390013576,"results":"266","hashOfConfig":"141"},{"size":5185,"mtime":1645390013576,"results":"267","hashOfConfig":"141"},{"size":1927,"mtime":1645390013584,"results":"268","hashOfConfig":"141"},{"size":3620,"mtime":1645390013584,"results":"269","hashOfConfig":"141"},{"size":1315,"mtime":1645390013576,"results":"270","hashOfConfig":"141"},{"size":2501,"mtime":1645390013576,"results":"271","hashOfConfig":"141"},{"size":2244,"mtime":1645390013576,"results":"272","hashOfConfig":"141"},{"size":1103,"mtime":1645390013576,"results":"273","hashOfConfig":"141"},{"size":2309,"mtime":1645390013584,"results":"274","hashOfConfig":"141"},{"size":1913,"mtime":1645390013584,"results":"275","hashOfConfig":"141"},{"size":2049,"mtime":1645390013584,"results":"276","hashOfConfig":"141"},{"size":1830,"mtime":1645390013584,"results":"277","hashOfConfig":"141"},{"size":1037,"mtime":1645390013584,"results":"278","hashOfConfig":"141"},{"size":2664,"mtime":1645390013576,"results":"279","hashOfConfig":"141"},{"filePath":"280","messages":"281","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"6l7may",{"filePath":"282","messages":"283","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"284","messages":"285","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"286","messages":"287","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"288","messages":"289","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"290","messages":"291","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"292","messages":"293","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"294","messages":"295","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"296","messages":"297","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"298","messages":"299","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"300","messages":"301","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"302"},{"filePath":"303","messages":"304","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"305","messages":"306","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"307","messages":"308","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"309","messages":"310","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"311","messages":"312","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"313","messages":"314","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"315","messages":"316","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":2,"source":"317"},{"filePath":"318","messages":"319","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"320","messages":"321","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"322","messages":"323","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"324","messages":"325","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"326","messages":"327","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"328","messages":"329","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"330","messages":"331","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"332","messages":"333","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"334","messages":"335","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"336","messages":"337","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"338","messages":"339","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"340","messages":"341","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":1,"source":"342"},{"filePath":"343","messages":"344","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"345","messages":"346","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"347","messages":"348","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"349","messages":"350","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"351","messages":"352","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"353","messages":"354","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"355","messages":"356","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"357","messages":"358","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"359","messages":"360","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"361","messages":"362","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"363","messages":"364","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"365","messages":"366","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"367","messages":"368","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"369","messages":"370","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"371","messages":"372","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"373","messages":"374","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"375","messages":"376","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"377","messages":"378","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"379","messages":"380","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"381","messages":"382","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"383","messages":"384","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"385","messages":"386","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"387","messages":"388","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"389","messages":"390","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"391","messages":"392","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"393","messages":"394","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"395","messages":"396","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"397","messages":"398","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"399","messages":"400","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"401","messages":"402","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"403","messages":"404","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"405","messages":"406","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"407","messages":"408","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"409","messages":"410","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"411","messages":"412","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"413","messages":"414","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"415","messages":"416","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"417","messages":"418","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"419","messages":"420","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"421","messages":"422","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"423","messages":"424","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":10,"source":"425"},{"filePath":"426","messages":"427","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"428","messages":"429","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"430","messages":"431","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":2,"source":"432"},{"filePath":"433","messages":"434","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"435","messages":"436","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"437","messages":"438","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"439","messages":"440","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"441","messages":"442","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"443","messages":"444","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":1,"source":"445"},{"filePath":"446","messages":"447","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"448","messages":"449","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"450","messages":"451","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"452","messages":"453","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"454","messages":"455","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"456","messages":"457","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"458","messages":"459","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"460","messages":"461","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"462","messages":"463","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"464","messages":"465","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"466","messages":"467","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"468","messages":"469","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"470","messages":"471","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"472","messages":"473","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"474","messages":"475","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"476","messages":"477","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"478","messages":"479","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"480","messages":"481","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"482","messages":"483","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"484","messages":"485","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"486","messages":"487","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"488","messages":"489","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"490","messages":"491","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"492","messages":"493","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"494","messages":"495","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"496","messages":"497","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"498","messages":"499","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"500","messages":"501","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"502","messages":"503","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"504","messages":"505","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"506","messages":"507","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"508","messages":"509","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"510","messages":"511","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"512","messages":"513","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"514","messages":"515","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"516","messages":"517","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"518","messages":"519","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"520","messages":"521","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"522","messages":"523","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"524","messages":"525","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"526","messages":"527","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"528","messages":"529","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"530","messages":"531","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"532","messages":"533","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"534","messages":"535","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"536","messages":"537","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"538","messages":"539","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"540","messages":"541","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"542","messages":"543","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"544","messages":"545","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"546","messages":"547","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"548","messages":"549","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"550","messages":"551","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"552","messages":"553","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"554","messages":"555","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"556","messages":"557","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"558","messages":"559","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"560","messages":"561","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"562","messages":"563","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/index.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/accessToken.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/App.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/index.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/muiTheme.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/ScrollToView.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/SideMenu.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/Header.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/Loader.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Login.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/routes/Routes.js",["564","565"],"import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Switch } from \"react-router-dom\";\nimport PrivateRoute from \"components/routes/PrivateRoute\";\nimport { CircularChart } from \"components/Utilities\";\nimport {\n  ViewHCP,\n  Chat,\n  Patients,\n  Subscription,\n  Hcps,\n  SingleHCP,\n  Appointments,\n  HcpEarnings,\n  HcpAvailability,\n  HcpPatients,\n  HcpAppointments,\n  HcpProfile,\n  Medications,\n  SinglePatient,\n  CaseNotes,\n  MedicalRecords,\n  Prescriptions,\n  PatientAppointment,\n  Email,\n  Consultations,\n  PatientProfile,\n  Dashboard,\n  HcpCaseNote,\n  HcpConsultations,\n  ViewMessage,\n  CreateMessage,\n  Messages,\n  WaitingListDetails,\n  WaitingList,\n  Permission,\n  Management,\n  Administrator,\n  ViewReferral,\n  Settings,\n  ReferralTab,\n  Partners,\n  Finance,\n  Payout,\n  HCPChat,\n  CreateEmail,\n  ViewMail,\n  EditManagement,\n  PendingPayout,\n  WhiteLabel,\n  UserTypes,\n  Providers,\n  HCP,\n  Financetable\n  \n\n} from \"components/pages\";\n\nconst Routes = (props) => {\n  const {\n    selectedMenu,\n    setSelectedMenu,\n    selectedSubMenu,\n    selectedPatientMenu,\n    selectedHcpMenu,\n    setSelectedSubMenu,\n    setSelectedPatientMenu,\n    setSelectedHcpMenu,\n    waitingListMenu,\n    setWaitingListMenu,\n    selectedAppointmentMenu,\n    setSelectedAppointmentMenu,\n    chatMediaActive,\n    setChatMediaActive,\n    setSelectedManagementMenu,\n    selectedScopedMenu,\n    setSelectedScopedMenu,\n    \n  } = props;\n\n  return (\n    <Switch>\n      <PrivateRoute\n        path={[\"/\", \"/dashboard\"]}\n        exact\n        component={Dashboard}\n        chatMediaActive={chatMediaActive}\n        setChatMediaActive={setChatMediaActive}\n      />\n\n      <PrivateRoute\n        exact\n        path=\"/patients\"\n        component={Patients}\n        setSelectedSubMenu={setSelectedSubMenu}\n        setSelectedPatientMenu={setSelectedPatientMenu}\n      />\n\n      <PrivateRoute\n        exact\n        path=\"/patients/:patientId\"\n        component={SinglePatient}\n        selectedMenu={selectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        selectedPatientMenu={selectedPatientMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedPatientMenu={setSelectedPatientMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute\n        exact\n        path=\"/patients/:patientId/profile\"\n        component={PatientProfile}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n        chatMediaActive={chatMediaActive}\n        setChatMediaActive={setChatMediaActive}\n      />\n\n      <PrivateRoute\n        exact\n        path=\"/patients/:patientId/profile/chat\"\n        component={Chat}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n        setSelectedPatientMenu={setSelectedPatientMenu}\n        setSelectedScopedMenu={setSelectedScopedMenu}\n        chatMediaActive={chatMediaActive}\n        setChatMediaActive={setChatMediaActive}\n      />\n\n      <PrivateRoute\n        path=\"/patients/:patientId/consultations\"\n        exact\n        component={Consultations}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        selectedPatientMenu={selectedPatientMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n        setSelectedPatientMenu={setSelectedPatientMenu}\n        selectedScopedMenu={selectedScopedMenu}\n        setSelectedScopedMenu={setSelectedScopedMenu}\n      />\n\n      <PrivateRoute\n        path=\"/patients/:patientId/prescriptions\"\n        component={Prescriptions}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n        selectedPatientMenu={selectedPatientMenu}\n        setSelectedPatientMenu={setSelectedPatientMenu}\n      />\n\n      <PrivateRoute\n        path=\"/patients/:patientId/appointments\"\n        component={PatientAppointment}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n        selectedPatientMenu={selectedPatientMenu}\n        setSelectedPatientMenu={setSelectedPatientMenu}\n      />\n\n      <PrivateRoute\n        path=\"/patients/:patientId/records\"\n        component={MedicalRecords}\n        selectedMenu={selectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        selectedPatientMenu={selectedPatientMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n        setSelectedPatientMenu={setSelectedPatientMenu}\n      />\n\n      <PrivateRoute\n        path=\"/patients/:patientId/consultations/case-note/:rowId\"\n        component={CaseNotes}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        selectedScopedMenu={selectedScopedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n        selectedPatientMenu={selectedPatientMenu}\n        setSelectedPatientMenu={setSelectedPatientMenu}\n        setSelectedScopedMenu={setSelectedScopedMenu}\n      />\n\n      <PrivateRoute\n        path=\"/patients/:patientId/medications\"\n        component={Medications}\n        selectedMenu={selectedMenu}\n        selectedPatientMenu={selectedPatientMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedPatientMenu={setSelectedPatientMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute\n        exact\n        path=\"/hcps\"\n        component={Hcps}\n        setSelectedHcpMenu={setSelectedHcpMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute\n        exact\n        path=\"/hcps/:hcpId\"\n        component={SingleHCP}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        selectedHcpMenu={selectedHcpMenu}\n        setSelectedHcpMenu={setSelectedHcpMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n        selectedScopedMenu={selectedScopedMenu}\n        setSelectedScopedMenu={setSelectedScopedMenu}\n      />\n\n      <PrivateRoute\n        exact\n        path=\"/hcps/:hcpId/profile\"\n        component={HcpProfile}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        selectedHcpMenu={selectedHcpMenu}\n        selectedSubMenu={selectedSubMenu}\n        chatMediaActive={chatMediaActive}\n        setSelectedHcpMenu={setSelectedHcpMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n        setChatMediaActive={setChatMediaActive}\n      />\n\n      <PrivateRoute\n        exact\n        path=\"/hcps/:hcpId/profile/chat\"\n        component={HCPChat}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedHcpMenu={setSelectedHcpMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n        setSelectedScopedMenu={setSelectedScopedMenu}\n        chatMediaActive={chatMediaActive}\n        setChatMediaActive={setChatMediaActive}\n      />\n\n      <PrivateRoute\n        path=\"/hcps/:hcpId/appointments\"\n        component={HcpAppointments}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        selectedHcpMenu={selectedHcpMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedHcpMenu={setSelectedHcpMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute\n        path=\"/hcps/:hcpId/availability\"\n        component={HcpAvailability}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        selectedHcpMenu={selectedHcpMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedHcpMenu={setSelectedHcpMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute\n        path=\"/hcps/:hcpId/earnings\"\n        component={HcpEarnings}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        selectedHcpMenu={selectedHcpMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedHcpMenu={setSelectedHcpMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute\n        path=\"/hcps/:hcpId/earnings\"\n        component={HcpEarnings}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        selectedHcpMenu={selectedHcpMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedHcpMenu={setSelectedHcpMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute\n        path=\"/hcps/:hcpId/patients\"\n        component={HcpPatients}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        selectedHcpMenu={selectedHcpMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedHcpMenu={setSelectedHcpMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute\n        exact\n        path=\"/hcps/:hcpId/consultations\"\n        component={HcpConsultations}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        selectedHcpMenu={selectedHcpMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedHcpMenu={setSelectedHcpMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n        selectedScopedMenu={selectedScopedMenu}\n        setSelectedScopedMenu={setSelectedScopedMenu}\n      />\n\n      <PrivateRoute\n        path=\"/hcps/:hcpId/consultations/case-notes/:rowId\"\n        component={HcpCaseNote}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        selectedHcpMenu={selectedHcpMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedHcpMenu={setSelectedHcpMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n        selectedScopedMenu={selectedScopedMenu}\n        setSelectedScopedMenu={setSelectedScopedMenu}\n      />\n\n      <PrivateRoute exact path=\"/partners\" component={Partners} />\n\n      <PrivateRoute\n        exact\n        path=\"/appointments\"\n        component={Appointments}\n        setSelectedSubMenu={setSelectedSubMenu}\n        setSelectedAppointmentMenu={setSelectedAppointmentMenu}\n      />\n\n      <PrivateRoute\n        exact\n        path=\"/appointments/waiting-list\"\n        component={WaitingList}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n        setWaitingListMenu={setWaitingListMenu}\n        setSelectedAppointmentMenu={setSelectedAppointmentMenu}\n        selectedAppointmentMenu={selectedAppointmentMenu}\n      />\n\n      <PrivateRoute\n        path=\"/appointments/waiting-list/:listId\"\n        component={WaitingListDetails}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n        waitingListMenu={waitingListMenu}\n        setSelectedAppointmentMenu={setSelectedAppointmentMenu}\n        selectedAppointmentMenu={selectedAppointmentMenu}\n        setWaitingListMenu={setWaitingListMenu}\n      />\n\n      <PrivateRoute exact path=\"/appointments/consultation\" component={CircularChart} />\n\n      <PrivateRoute\n        exact\n        path=\"/messages\"\n        component={Messages}\n        selectedMenu={selectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute\n        path=\"/messages/create-message\"\n        component={CreateMessage}\n        selectedMenu={selectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute\n        path=\"/messages/:messageId\"\n        component={ViewMessage}\n        selectedMenu={selectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n      <PrivateRoute\n        path=\"/email/create-email\"\n        component={CreateEmail}\n        selectedMenu={selectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute\n        path=\"/email/:emailId\"\n        component={ViewMail}\n        selectedMenu={selectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute\n        path=\"/email\"\n        selectedMenu={selectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n        component={Email}\n      />\n      {/* <PrivateRoute\n        exact\n        path=\"/verification\"\n        component={HCPVerification}\n        setSelectedSubMenu={setSelectedSubMenu}\n      /> */}\n\n      <PrivateRoute\n        exact\n        path=\"/verification\"\n        component={HCP}\n        selectedMenu={selectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n        setSelectedHcpMenu={setSelectedHcpMenu}\n      />\n      <PrivateRoute\n        exact\n        path=\"/label\"\n        component={WhiteLabel}\n        selectedMenu={selectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n      <PrivateRoute\n        path=\"/label/provider\"\n        component={Providers}\n        selectedMenu={selectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute\n        path=\"/label/types\"\n        component={UserTypes}\n        selectedMenu={selectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute\n        exact\n        path=\"/finance\"\n        component={Finance}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute\n        exact\n        path=\"/finance/earnings\"\n        component={Financetable}\n        selectedMenu={selectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute\n        exact\n        path=\"/finance/payouts\"\n        component={Payout}\n        selectedMenu={selectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n      <PrivateRoute\n        exact\n        path=\"/finance/pending\"\n        component={PendingPayout}\n        selectedMenu={selectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute\n        path=\"/referrals/:referralId\"\n        component={ViewReferral}\n        selectedMenu={selectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n        setSelectedHcpMenu={setSelectedHcpMenu}\n      />\n\n      <PrivateRoute\n        path=\"/referrals\"\n        component={ReferralTab}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute path=\"/plans\" component={Subscription} />\n\n      <PrivateRoute\n        path=\"/verification/view/:viewId\"\n        component={ViewHCP}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n        selectedSubMenu={selectedSubMenu}\n      />\n\n      <PrivateRoute\n        exact\n        path=\"/settings\"\n        component={Settings}\n        selectedMenu={selectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute\n        path=\"/settings/administrator\"\n        component={Administrator}\n        selectedMenu={selectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute\n        path=\"/settings/permissions\"\n        component={Permission}\n        selectedMenu={selectedMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n      />\n\n      <PrivateRoute\n        exact\n        path=\"/settings/management\"\n        component={Management}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedManagementMenu={setSelectedManagementMenu}\n      />\n      <PrivateRoute\n        exact\n        path=\"/settings/management/:editId\"\n        component={EditManagement}\n        selectedMenu={selectedMenu}\n        setSelectedMenu={setSelectedMenu}\n        setSelectedSubMenu={setSelectedSubMenu}\n        selectedSubMenu={selectedSubMenu}\n        setSelectedManagementMenu={setSelectedManagementMenu}\n      />\n    </Switch>\n  );\n  // }\n};\n\nRoutes.propTypes = {\n  selectedMenu: PropTypes.number.isRequired,\n  selectedPatientMenu: PropTypes.number.isRequired,\n  selectedSubMenu: PropTypes.number.isRequired,\n  selectedHcpMenu: PropTypes.number.isRequired,\n  selectedAppointmentMenu: PropTypes.number.isRequired,\n  waitingListMenu: PropTypes.number.isRequired,\n  selectedScopedMenu: PropTypes.number.isRequired,\n  chatMediaActive: PropTypes.bool.isRequired,\n  setSelectedMenu: PropTypes.func.isRequired,\n  setSelectedSubMenu: PropTypes.func.isRequired,\n  setSelectedPatientMenu: PropTypes.func.isRequired,\n  setSelectedHcpMenu: PropTypes.func.isRequired,\n  setWaitingListMenu: PropTypes.func.isRequired,\n  setSelectedAppointmentMenu: PropTypes.func.isRequired,\n  setChatMediaActive: PropTypes.func.isRequired,\n  setSelectedScopedMenu: PropTypes.func.isRequired,\n  setSelectedManagementMenu: PropTypes.func.isRequired,\n};\n\nexport default Routes;\n","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/HeaderContents.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/store.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/routes/PrivateRoute.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/modals/DeleteOrDisable.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/helpers/asideMenus.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/hooks/useActions.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/graphQL/Mutation.js",["566","567"],"import { gql } from \"@apollo/client\";\n\nexport const editUserType = gql`\n  mutation updateUserType($id: String!, $name: String, $icon: String!) {\n    updateUserType(data: { id: $id, name: $name, icon: $icon }) {\n      userType {\n        _id\n        name\n        icon\n        createdAt\n        updatedAt\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const editprovider = gql`\n  mutation updateProvider($id: String!, $name: String, $icon: String) {\n    updateProvider(data: { id: $id, name: $name, icon: $icon }) {\n      provider {\n        _id\n        name\n        icon\n        userTypeId\n        createdAt\n        updatedAt\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const Login_USER = gql`\n  mutation Login($data: LoginUserInput!) {\n    login(data: $data) {\n      message\n      account {\n        _id\n        dociId\n        access_token\n        refresh_token\n        role\n        userTypeId\n        email\n      }\n      errors {\n        message\n      }\n    }\n  }\n`;\nexport const CREATE_PLAN = gql`\n  mutation createPlan(\n    $name: String!\n    $amount: Float!\n    $description: String\n    $duration: String\n    $provider: String\n  ) {\n    createPlan(\n      data: {\n        name: $name\n        amount: $amount\n        description: $description\n        duration: $duration\n        provider: $provider\n      }\n    ) {\n      plan {\n        _id\n        name\n        amount\n        description\n        createdAt\n        updatedAt\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\n\nexport const DELETE_PLAN = gql`\n  mutation deletePlan($id: String!) {\n    deletePlan(data: { id: $id }) {\n      count\n      message\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const UPDATE_PLAN = gql`\n  mutation updatePlan(\n    $id: String\n    $name: String\n    $amount: Float\n    $provider: String\n    $description: String\n  ) {\n    updatePlan(\n      data: {\n        id: $id\n        name: $name\n        amount: $amount\n        provider: $provider\n        description: $description\n      }\n    ) {\n      plan {\n        _id\n        name\n        amount\n        description\n        createdAt\n        updatedAt\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\n\nexport const CREATE_PERMISSION = gql`\n  mutation createPermission($name: String!, $description: String!) {\n    createPermission(data: { name: $name, description: $description }) {\n      permission {\n        _id\n        name\n        description\n        createdAt\n        updatedAt\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const UPDATE_PERMISSION = gql`\n  mutation updatePermission($id: String!, $name: String!, $description: String!) {\n    updatePermission(data: { id: $id, name: $name, description: $description }) {\n      permission {\n        _id\n        name\n        description\n        createdAt\n        updatedAt\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const DELETE_PERMISSION = gql`\n  mutation deletePermission($id: String!) {\n    deletePermission(data: { id: $id }) {\n      count\n      message\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const deleteRole = gql`\n  mutation deleteRole($id: String!) {\n    deleteRole(data: { id: $id }) {\n      count\n      message\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const updateAppointment = gql`\n  mutation updateAppointment(\n    $id: String!\n    $doctor: String!\n    $patient: String\n    $date: String!\n    $time: String\n  ) {\n    updateAppointment(\n      data: { id: $id, doctor: $doctor, patient: $patient, date: $date, time: $time }\n    ) {\n      appointment {\n        _id\n        doctor\n        patient\n        date\n        time\n        createdAt\n        updatedAt\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\n\n// message\nexport const CREATE_MESSAGE = gql`\n  mutation createMessage($recipient: String!, $sender: String!, $subject: String!, $body: String!) {\n    createMessage(\n      data: { recipient: $recipient, sender: $sender, subject: $subject, body: $body }\n    ) {\n      messages {\n        _id\n        recipient\n        subject\n        sender\n        createdAt\n        updatedAt\n        body\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\n\nexport const LOGOUT_USER = gql`\n  mutation logout {\n    logout\n  }\n`;\nexport const getNewAccessToken = gql`\n  mutation refreshToken {\n    refreshToken {\n      account {\n        access_token\n        refresh_token\n      }\n    }\n  }\n`;\nexport const deleteProfile = gql`\n  mutation deleteProfile($id: String!) {\n    deleteProfile(data: { id: $id }) {\n      count\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const createRole = gql`\n  mutation createRole(\n    $name: String!\n    $editable: Boolean!\n    $description: String!\n    $permissions: [String!]\n  ) {\n    createRole(\n      data: {\n        name: $name\n        editable: $editable\n        description: $description\n        permissions: $permissions\n      }\n    ) {\n      role {\n        _id\n        name\n        permissions\n        editable\n        description\n        createdAt\n        updatedAt\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const createReminder = gql`\n  mutation createReminder {\n    createReminder(\n      data: {\n        date: \"2021-08-15T23:19:02+01:00\"\n        description: \"wake me up for my appointment\"\n        patient: \"6116f2828497025413dcec5d\"\n        type: \"appointment\"\n        interval: \"daily\"\n      }\n    ) {\n      reminder {\n        _id\n        date\n        description\n        type\n        createdAt\n        updatedAt\n        patient\n        interval\n      }\n      message\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const deleteAppointment = gql`\n  mutation deleteAppointment($id: String!) {\n    deleteAppointment(data: { id: $id }) {\n      count\n      message\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const addRole = gql`\n  mutation createRole(\n    $name: String!\n    $editable: Boolean\n    $description: String\n    $permissions: [String!]\n  ) {\n    createRole(\n      data: {\n        name: $name\n        editable: $editable\n        description: $description\n        permissions: $permissions\n      }\n    ) {\n      role {\n        _id\n        name\n        permissions\n        editable\n        description\n        createdAt\n        updatedAt\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\n\nexport const editRole = gql`\n  mutation updateRole($id: String!, $name: String, $description: String, $permissions: [String!]) {\n    updateRole(\n      data: { id: $id, name: $name, permissions: $permissions, description: $description }\n    ) {\n      role {\n        _id\n        name\n        permissions\n        editable\n        description\n        createdAt\n        updatedAt\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const requestReferral = gql`\n  mutation requestReferral(\n    $doctor: String!\n    $patient: String!\n    $type: String!\n    $reason: String!\n    $note: String!\n    $specialization: String!\n  ) {\n    requestReferral(\n      data: {\n        doctor: $doctor\n        patient: $patient\n        type: $type\n        reason: $reason\n        note: $note\n        specialization: $specialization\n      }\n    ) {\n      referral {\n        _id\n        doctor\n        patient\n        type\n        reason\n        note\n        specialization\n        testType\n        createdAt\n        updatedAt\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const deleteDoctor = gql`\n  mutation deleteDoctorProfile($id: String!) {\n    deleteDoctorProfile(data: { id: $id }) {\n      count\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const addPartner = gql`\n  mutation addPartner($name: String!, $category: String!, $email: String!, $logoImageUrl: String!) {\n    addPartner(\n      data: { name: $name, category: $category, email: $email, logoImageUrl: $logoImageUrl }\n    ) {\n      partner {\n        _id\n        name\n        email\n        category\n        logoImageUrl\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const addPartnerCategory = gql`\n  mutation addPartnerCategory($name: String!) {\n    addPartnerCategory(data: { name: $name }) {\n      category {\n        _id\n        name\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const addProvider = gql`\n  mutation createProvider($name: String!, $icon: String!, $userTypeId: String!) {\n    createProvider(data: { name: $name, icon: $icon, userTypeId: $userTypeId }) {\n      provider {\n        _id\n        name\n        icon\n        userTypeId\n        createdAt\n        updatedAt\n      }\n      message\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const deletProvider = gql`\n  mutation deleteProvider($id: String!) {\n    deleteProvider(data: { id: $id }) {\n      count\n      message\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const deleteUserType = gql`\n  mutation deleteUserType($id: String!) {\n    deleteUserType(data: { id: $id }) {\n      count\n      message\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const signup = gql`\n  mutation signup($authType: String!, $email: EmailAddress!, $password: String!, $role: String) {\n    signup(data: { authType: $authType, email: $email, password: $password, role: $role }) {\n      account {\n        _id\n        email\n      }\n      message\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const createUserType = gql`\n  mutation createUserType($name: String!, $icon: String!) {\n    createUserType(data: { name: $name, icon: $icon }) {\n      userType {\n        _id\n        name\n        icon\n        createdAt\n        updatedAt\n      }\n      message\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const createAllery = gql`\n  mutation createAllergy(\n    $food: String!\n    $medication: String!\n    $profile: String!\n    $severity: String!\n  ) {\n    createAllergy(\n      data: { food: $food, medication: $medication, profile: $profile, severity: $severity }\n    ) {\n      allergy {\n        _id\n        food\n        medication\n        profile\n        createdAt\n        updatedAt\n        severity\n      }\n    }\n  }\n`;\nexport const createDOctorProfile = gql`\n  mutation createDoctorProfile(\n    $firstName: String!\n    $lastName: String!\n    $gender: String\n    $dociId: String!\n    $phoneNumber: String!\n    $hospital: String!\n    $specialization: String!\n    $dob: String!\n    $cadre: String!\n    $image: String!\n    $providerId: String\n\n  ) {\n    createDoctorProfile(\n      data: {\n        firstName: $firstName\n        lastName: $lastName\n        gender: $gender\n        phoneNumber: $phoneNumber\n        dociId: $dociId\n        hospital: $hospital\n        specialization: $specialization\n        dob: $dob\n        cadre: $cadre\n        image: $image\n        providerId:$providerId\n\n      }\n    ) {\n      profile {\n        _id\n        dociId\n        createdAt\n        updatedAt\n        firstName\n        lastName\n        gender\n        phoneNumber\n        email\n        hospital\n        specialization\n        dob\n        cadre\n        picture\n      }\n      errors {\n        field\n        message\n      }\n    }\n  }\n`;\n","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/validation/LoginInput.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/index.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/index.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/HeaderProfile.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/graphQL/useQuery.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/SearchInput.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/WhiteLabel.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/WaitingListDetails.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/WaitingList.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/ViewMail.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/ViewReferral.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/ViewHCP.js",["568"],"import React, { useEffect, useState } from \"react\";\nimport Loader from \"components/Utilities/Loader\";\nimport NoData from \"components/layouts/NoData\";\nimport PropTypes from \"prop-types\";\nimport { Grid, Typography, Avatar } from \"@mui/material\";\nimport { useParams } from \"react-router-dom\";\nimport { makeStyles } from \"@mui/styles\";\nimport PreviousButton from \"components/Utilities/PreviousButton\";\nimport { dateMoment } from \"components/Utilities/Time\";\nimport { useQuery } from \"@apollo/client\";\nimport { verification } from \"components/graphQL/useQuery\";\nimport displayPhoto from \"assets/images/avatar.svg\";\n\nconst useStyles = makeStyles((theme) => ({\n  parentGridWrapper: {\n    background: \"#fff\",\n    borderRadius: \"1rem\",\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.1)\",\n    \"&:not(:last-of-type)\": {\n      marginBottom: \"5rem\",\n    },\n  },\n  gridsWrapper: {\n    background: \"#fff\",\n    borderRadius: \"1rem\",\n    padding: \"1rem\",\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\n  },\n\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.3rem !important\",\n      //   height: \"2.7rem\",\n      background: theme.palette.common.lightGreen,\n      color: theme.palette.common.green,\n      borderRadius: \"1.5rem\",\n    },\n  },\n\n  cardGrid: {\n    background: \"#fff\",\n    borderRadius: \"1rem\",\n    padding: \"4rem 5rem\",\n    height: \"14.1rem\",\n    boxShadow: \"0px 0px 5px -1px rgba(0,0,0,0.2)\",\n  },\n  firstContainer: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n\n  infoBadge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.25rem\",\n      borderRadius: \"1.5rem\",\n      color: theme.palette.common.green,\n    },\n  },\n\n  link: {\n    display: \"flex\",\n    alignItems: \"center\",\n    fontSize: \"1.25rem\",\n    color: theme.palette.common.green,\n    border: `1px solid ${theme.palette.common.lightGrey}`,\n    padding: \".75rem\",\n    borderRadius: \"1.5rem\",\n    textDecoration: \"none\",\n  },\n\n  linkIcon: {\n    \"&.MuiSvgIcon-root\": {\n      fontSize: \"1.25rem\",\n      color: theme.palette.common.green,\n      marginLeft: \"1.2rem\",\n    },\n  },\n\n  buttonsGridWrapper: {\n    marginTop: \"5rem !important\",\n    height: \"16.1rem\",\n  },\n\n  title: {\n    \"&.MuiTypography-root\": {\n      color: theme.palette.common.grey,\n      // marginRight: \"2rem\",\n    },\n  },\n}));\n\nconst ViewHCP = ({ selectedMenu, selectedSubMenu, setSelectedMenu, setSelectedSubMenu }) => {\n  const { viewId } = useParams();\n  const { loading, data, error } = useQuery(verification, { variables: { id: viewId } });\n  const [respondData, setRespondData] = useState([]);\n\n  useEffect(() => {\n    if (data) {\n      setRespondData(data.getVerification);\n    }\n  }, [data]);\n\n  const classes = useStyles();\n  useEffect(() => {\n    setSelectedMenu(7);\n    setSelectedSubMenu(8);\n\n    // eslint-disable-next-line\n  }, [selectedMenu, selectedSubMenu]);\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error.message} />;\n  // eslint-disable-next-line\n  const {\n    createdAt,\n    qualification,\n    license,\n    alumni_association,\n    reference,\n    doctorData,\n    // eslint-disable-next-line\n  } = respondData;\n\n  console.log(respondData,'docD')\n  return (\n    <Grid container direction=\"column\" gap={2}>\n      <Grid item>\n        <PreviousButton path=\"/verification\" />\n      </Grid>\n      <Grid\n        item\n        flexWrap=\"nowrap\"\n        width=\"100%\"\n        justifyContent=\"space-between\"\n        container\n        alignItems=\"center\"\n        className={`${classes.cardGrid} ${classes.firstContainer}`}\n      >\n        <Grid item container justifyContent=\"center\" width=\"30%\">\n          <Grid item>\n            <Avatar\n              src={doctorData ? doctorData.picture : displayPhoto}\n              sx={{ minWidth: \"150px\", minHeight: \"150px\" }}\n            />\n          </Grid>\n        </Grid>\n        <Grid item container direction=\"column\" alignItems=\"center\" gap={3} sx={{ height: \"100%\" }}>\n          <Grid container direction=\"row\" justifyContent=\"space-around\">\n            <Grid item>\n              <Grid container direction=\"column\" gap={1}>\n                <Grid item>\n                  <Typography variant=\"body1\">Doctor Name</Typography>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"h4\">\n                    {doctorData ? `${doctorData.firstName} ${doctorData.lastName}` : \"No Doctor\"}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid container direction=\"column\" gap={1}>\n                <Grid item>\n                  <Typography variant=\"body1\">Hospital</Typography>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"h4\">\n                    {doctorData ? `${doctorData.hospital}` : \"No Hospital \"}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid container direction=\"column\" gap={1}>\n                <Grid item>\n                  <Typography variant=\"body1\">Gender:</Typography>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"h4\">\n                    {doctorData ? `${doctorData.gender} ` : \"Not Specified\"}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n          <Grid container direction=\"row\" justifyContent=\"space-around\">\n            <Grid item>\n              <Grid container direction=\"column\" gap={1}>\n                <Grid item>\n                  <Typography variant=\"body1\">Medical ID:</Typography>\n                </Grid>\n                <Grid item>\n                  <Typography variant=\"h4\">\n                    {doctorData ? `${doctorData.dociId.split(\"-\")[1]}` : \"No ID \"}{\" \"}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid container direction=\"column\" gap={1}>\n                <Grid item>\n                  <Typography variant=\"body1\">Specialization:</Typography>\n                </Grid>\n                <Grid item width=\"100%\">\n                  <Typography variant=\"h4\">\n                    {doctorData ? `${doctorData.specialization}` : \"No specialization \"}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n            <Grid item>\n              <Grid container direction=\"column\" gap={1} width=\"100%\">\n                <Grid item>\n                  <Typography variant=\"body1\">DOB:</Typography>\n                </Grid>\n                <Grid item width=\"100%\">\n                  <Typography variant=\"h4\">\n                    {doctorData ? `${dateMoment(doctorData.dob)}` : \"No DOB \"}{\" \"}\n                  </Typography>\n                </Grid>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item container justifyContent=\"space-between\" style={{ paddingTop: \"2rem\" }}>\n        <Grid item md className={classes.cardGrid} style={{ marginRight: \"2rem\" }}>\n          <Grid\n            container\n            direction=\"column\"\n            style={{ height: \"100%\" }}\n            justifyContent=\"space-between\"\n            alignItems=\"flex-start\"\n          >\n            <Grid item>\n              <Typography variant=\"h4\">Qualification</Typography>\n            </Grid>\n            <Grid item container gap={2}>\n              <Grid className={classes.link}>\n                {qualification ? qualification.degree : \"No Value\"}\n              </Grid>\n              <Grid className={classes.link}>\n                {qualification\n                  ? qualification.year && dateMoment(qualification.year).slice(-4)\n                  : \"No Value\"}\n              </Grid>\n              {qualification ? (\n                <a\n                  href={qualification.image}\n                  rel=\"noreferrer\"\n                  target=\"_blank\"\n                  className={classes.link}\n                >\n                  <span>Qualification PNG</span>\n                </a>\n              ) : (\n                <p className={classes.link}> No QUalification</p>\n              )}\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Grid item md className={classes.cardGrid} style={{ marginLeft: \"2rem\" }}>\n          <Grid\n            container\n            direction=\"column\"\n            style={{ height: \"100%\" }}\n            justifyContent=\"space-between\"\n            alignItems=\"flex-start\"\n          >\n            <Grid item>\n              <Typography variant=\"h4\">License</Typography>\n            </Grid>\n            {license ? (\n              <Grid item container gap={2}>\n                <Grid item>\n                  <Typography className={classes.link} variant=\"h4\">\n                    {license ? license.number : \"No Value\"}\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <Typography className={classes.link} variant=\"h4\">\n                    {license ? license.type : \"No Value\"}\n                  </Typography>\n                </Grid>\n                <Grid item>\n                  <a href={license.image} rel=\"noreferrer\" target=\"_blank\" className={classes.link}>\n                    <span>IMG</span>\n                  </a>\n                </Grid>\n              </Grid>\n            ) : (\n              <Grid item>\n                <Typography className={classes.link} variant=\"h4\">\n                  No License\n                </Typography>\n              </Grid>\n            )}\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item container justifyContent=\"space-between\" style={{ paddingTop: \"2rem\" }}>\n        <Grid item md className={classes.cardGrid} style={{ marginRight: \"2rem\" }}>\n          <Grid\n            container\n            direction=\"column\"\n            style={{ height: \"100%\" }}\n            justifyContent=\"space-between\"\n            alignItems=\"flex-start\"\n          >\n            <Grid item>\n              <Typography variant=\"h4\">Year Book</Typography>\n            </Grid>\n            <Grid item container gap={2}>\n              <Grid item>\n                <Typography variant=\"h4\" className={classes.link}>\n                  {createdAt && dateMoment(createdAt).slice(-4)}\n                </Typography>\n              </Grid>\n              <Grid item>\n                {qualification ? (\n                  <a\n                    href={qualification.image}\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                    className={classes.link}\n                  >\n                    <span>Qualification PNG</span>\n                  </a>\n                ) : (\n                  <p className={classes.link}> No QUalification</p>\n                )}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Grid item md className={classes.cardGrid} style={{ marginLeft: \"2rem\" }}>\n          <Grid\n            container\n            direction=\"column\"\n            style={{ height: \"100%\" }}\n            justifyContent=\"space-between\"\n            alignItems=\"flex-start\"\n          >\n            <Grid item>\n              <Typography variant=\"h4\">Alumni</Typography>\n            </Grid>\n            <Grid item container gap={2}>\n              <Grid item>\n                {alumni_association ? (\n                  <a\n                    href={alumni_association.image}\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                    className={classes.link}\n                  >\n                    <span>{alumni_association.facebook_group_name}</span>\n                  </a>\n                ) : (\n                  <p className={classes.link}> No alumni association</p>\n                )}\n              </Grid>\n              <Grid item>\n                {alumni_association ? (\n                  <a\n                    href={alumni_association.image}\n                    rel=\"noreferrer\"\n                    target=\"_blank\"\n                    className={classes.link}\n                  >\n                    <span>{alumni_association.instagram_handle}</span>\n                  </a>\n                ) : (\n                  <p className={classes.link}> No alumni association</p>\n                )}\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n      </Grid>\n      <Grid item container justifyContent=\"space-between\" style={{ paddingTop: \"2rem\" }}>\n        <Grid item md style={{ marginRight: \" 2rem\" }} className={classes.cardGrid}>\n          <Grid\n            container\n            direction=\"column\"\n            style={{ height: \"100%\" }}\n            justifyContent=\"space-between\"\n            alignItems=\"flex-start\"\n          >\n            <Grid item>\n              <Typography variant=\"h4\">Reference ID</Typography>\n            </Grid>\n            <Grid item container gap={2}>\n              <Grid item>\n                <Typography variant=\"h4\" className={classes.link}>\n                  {reference ? reference.reference_code : \"No Reference\"}\n                </Typography>\n              </Grid>\n            </Grid>\n          </Grid>\n        </Grid>\n\n        <Grid\n          item\n          md\n          style={{ marginLeft: \"2rem\", display: \"hidden\" }}\n          className={classes.cardGrid}\n        ></Grid>\n      </Grid>\n    </Grid>\n  );\n};\n\nViewHCP.propTypes = {\n  selectedMenu: PropTypes.number.isRequired,\n  selectedSubMenu: PropTypes.number.isRequired,\n  setSelectedMenu: PropTypes.func.isRequired,\n  setSelectedSubMenu: PropTypes.func.isRequired,\n};\n\nexport default ViewHCP;\n","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/reducers/index.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/Notifications.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/TextError.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/graphQL/fragment.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/reducers/hcpReducer.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/reducers/patientReducer.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/reducers/authReducer.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/reducers/tablesReducer.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/action-creators/index.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/Card.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/PreviousButton.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/Time.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/NoData.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/WaitingListTable.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/action-creators/hcp.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/action-creators/patient.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/action-creators/auth.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/action-creators/tablesActions.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/store/action-types/index.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/EnhancedTable.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/tableData.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/helpers/selectedRows.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/helpers/isSelected.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/tableHeaders.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/EnhancedTableToolbar.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/EnhancedTableHeader.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/DisplayProfile.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/CustomButton.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/VideoCall.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/UserTypes.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/SinglePatient.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Subscription.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/SingleHCP.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Settings.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/ReferralTab.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Prescriptions.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/ViewMessage.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Providers.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Permission.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/PendingPayout.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Patients.js",["569","570","571","572","573","574","575","576","577","578","579","580","581"],"import React, { useState, useEffect } from \"react\";\nimport CustomButton from \"components/Utilities/CustomButton\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport PropTypes from \"prop-types\";\nimport Loader from \"components/Utilities/Loader\";\nimport NoData from \"components/layouts/NoData\";\nimport { Button, Avatar, Chip, Checkbox, TableCell, TableRow, Grid } from \"@mui/material\";\nimport Modals from \"components/Utilities/Modal\";\nimport Search from \"components/Utilities/Search\";\nimport FilterList from \"components/Utilities/FilterList\";\nimport EnhancedTable from \"components/layouts/EnhancedTable\";\nimport { makeStyles } from \"@mui/styles\";\nimport { useTheme } from \"@mui/material/styles\";\nimport { patientsHeadCells } from \"components/Utilities/tableHeaders\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { useQuery, useLazyQuery } from \"@apollo/client\";\nimport { getPatients } from \"components/graphQL/useQuery\";\n\nconst genderType = [\n  { key: \"Male\", value: \"0\" },\n  { key: \"Female\", value: \"1\" },\n];\n\nconst useStyles = makeStyles((theme) => ({\n  searchGrid: {\n    \"&.MuiGrid-root\": {\n      flex: 1,\n      marginRight: \"5rem\",\n    },\n  },\n  button: {\n    \"&.MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"1rem\",\n      maxWidth: \"10rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.2rem\",\n      },\n\n      \"& .MuiButton-endIcon\": {\n        marginLeft: \".3rem\",\n        marginTop: \"-.2rem\",\n      },\n    },\n  },\n\n  tableCell: {\n    \"&.MuiTableCell-root\": {\n      fontSize: \"1.25rem\",\n      textAlign: \"left\",\n    },\n  },\n\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.25rem !important\",\n      height: \"2.7rem\",\n\n      borderRadius: \"1.3rem\",\n    },\n  },\n  searchFilterBtn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      background: theme.palette.common.black,\n      width: \"100%\",\n    },\n  },\n}));\n\nconst Patients = ({ setSelectedSubMenu, setSelectedPatientMenu }) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  // const inputRef = createRef();\n\n  const initialValues = {\n    name: \"\",\n    bloodGroup: \"\",\n    phone: \"\",\n    gender: \"\",\n  };\n\n  const validationSchema = Yup.object({\n    name: Yup.string(\"Enter your hospital\"),\n    bloodGroup: Yup.string(\"ENter your bloodGroup\"),\n    gender: Yup.string(\"Select your gender\"),\n    phone: Yup.number(\"Enter your specialization\").typeError(\"Enter a current Number\"),\n  });\n  const { loading, error, data, refetch } = useQuery(getPatients);\n  const [fetchUser] = useLazyQuery(getPatients);\n  const [profiles, setProfiles] = useState([]);\n  const onSubmit = async (values) => {\n    const { name, gender, bloodGroup, phone } = values;\n    console.log(gender,'gggg')\n    if (!gender) return;\n\n    await refetch({\n      gender,\n    });\n    handleDialogClose();\n  };\n  const [pageInfo, setPageInfo] = useState([]);\n  useEffect(() => {\n    if (data) {\n      setPageInfo(data.profiles.pageInfo);\n      setProfiles(data.profiles.data);\n    }\n  }, [data]);\n  const { page, totalPages, hasNextPage, hasPrevPage, limit, totalDocs } = pageInfo;\n  const [rowsPerPage, setRowsPerPage] = useState(0);\n  const { selectedRows } = useSelector((state) => state.tables);\n\n  const { setSelectedRows } = useActions();\n\n  const [searchPatient, setSearchPatient] = useState(\"\");\n  const onChange = async (e) => {\n    setSearchPatient(e);\n    if (e == \" \") {\n      fetchUser();\n    } else refetch(e === \"\" ? null : { dociId: `HEALA-${e.toUpperCase()}` });\n  };\n\n  const fetchMoreFunc = (e, newPage) => {\n    refetch({ page: newPage });\n  };\n\n  const [isOpen, setIsOpen] = useState(false);\n  const handleDialogOpen = () => setIsOpen(true);\n  const handleDialogClose = () => setIsOpen(false);\n\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error.message} />;\n\n  return (\n    <>\n      <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\n        <Grid item container>\n          <Grid item className={classes.searchGrid}>\n            <Search\n              value={searchPatient}\n              onChange={(e) => onChange(e.target.value)}\n              placeholder=\"Type to search patients by Heala ID e.g 7NE6ELLO \"\n              height=\"5rem\"\n            />\n          </Grid>\n          <Grid item>\n            <FilterList title=\"Filter Patients\" width=\"15.2rem\" onClick={handleDialogOpen} />\n          </Grid>\n        </Grid>\n        {/* The Search and Filter ends here */}\n\n        <Grid item container height=\"100%\" direction=\"column\">\n          {profiles.length > 0 ? (\n            <EnhancedTable\n              headCells={patientsHeadCells}\n              rows={profiles}\n              paginationLabel=\"Patients per page\"\n              page={page}\n              limit={limit}\n              totalPages={totalPages}\n              totalDocs={totalDocs}\n              rowsPerPage={rowsPerPage}\n              setRowsPerPage={setRowsPerPage}\n              hasNextPage={hasNextPage}\n              hasPrevPage={hasPrevPage}\n              handleChangePage={fetchMoreFunc}\n              hasCheckbox={true}\n            >\n              {(rowsPerPage > 0\n                ? profiles.slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                : profiles\n              ).map((row, index) => {\n                const isItemSelected = isSelected(row._id, selectedRows);\n                const labelId = `enhanced-table-checkbox-${index}`;\n                const {\n                  dociId,\n                  firstName,\n                  lastName,\n                  plan,\n                  provider,\n                  image,\n                  consultations,\n                  _id,\n                  status,\n                } = row;\n                return (\n                  <TableRow\n                    hover\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={row._id}\n                    selected={isItemSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        onClick={() => handleSelectedRows(row._id, selectedRows, setSelectedRows)}\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          \"aria-labelledby\": labelId,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell\n                      id={labelId}\n                      scope=\"row\"\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ color: theme.palette.common.grey, textAlign: \"left\" }}\n                    >\n                      {dociId && dociId.split(\"-\")[1]}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      <div\n                        style={{\n                          height: \"100%\",\n                          display: \"flex\",\n                          alignItems: \"left\",\n                        }}\n                      >\n                        <span style={{ marginRight: \"1rem\" }}>\n                          <Avatar\n                            alt={`Display Photo of ${firstName}`}\n                            src={image ? image : displayPhoto}\n                            sx={{ width: 24, height: 24 }}\n                          />\n                        </span>\n                        <span style={{ fontSize: \"1.25rem\" }}>{`${firstName} ${lastName}`}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      {plan ? plan : \"No Plan\"}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      {provider ? provider : \"No Provider\"}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      {consultations ? consultations : 0}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      <Chip\n                        label={status ? status : \"No Status\"}\n                        className={classes.badge}\n                        style={{\n                          background:\n                            status == \"Active\"\n                              ? theme.palette.common.lightGreen\n                              : theme.palette.common.lightRed,\n                          color:\n                            status == \"Active\"\n                              ? theme.palette.common.green\n                              : theme.palette.common.red,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        variant=\"contained\"\n                        className={classes.button}\n                        component={Link}\n                        to={`patients/${_id}`}\n                        endIcon={<ArrowForwardIosIcon />}\n                        onClick={() => {\n                          setSelectedSubMenu(2);\n                          setSelectedPatientMenu(0);\n                        }}\n                      >\n                        View Profile\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n            </EnhancedTable>\n          ) : (\n            <NoData />\n          )}\n        </Grid>\n      </Grid>\n      <Modals isOpen={isOpen} title=\"Filter\" rowSpacing={5} handleClose={handleDialogClose}>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={onSubmit}\n          validationSchema={validationSchema}\n          validateOnChange={false}\n          validateOnMount\n          validateOnBlur\n        >\n          {({ isSubmitting, isValid, dirty }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid item container direction=\"column\">\n                <Grid item>\n\n                  <FormikControl\n                    control=\"select\"\n                    options={genderType}\n                    name=\"gender\"\n                    label=\"Filter by Gender\"\n                    placeholder=\"Filter by Gender\"\n                  />\n                  </Grid>\n                  <br></br>\n                  <br></br>\n                  <br></br>\n\n\n                  <Grid item>\n                    <CustomButton\n                      title=\"Apply Filter\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n    </>\n  );\n};\n\nPatients.propTypes = {\n  setSelectedSubMenu: PropTypes.func.isRequired,\n  setSelectedPatientMenu: PropTypes.func.isRequired,\n};\n\nexport default Patients;\n","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/PatientProfile.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/PatientAppointment.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Partners.js",["582","583","584","585"],"import React, { useState, useEffect } from \"react\";\nimport { Formik, Form } from \"formik\";\nimport NoData from \"components/layouts/NoData\";\nimport * as Yup from \"yup\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport { makeStyles } from \"@mui/styles\";\nimport Modals from \"components/Utilities/Modal\";\nimport Search from \"components/Utilities/Search\";\nimport FilterList from \"components/Utilities/FilterList\";\nimport CustomButton from \"components/Utilities/CustomButton\";\nimport DeletePartner from \"components/modals/DeleteOrDisable\";\nimport DeleteIcon from \"@mui/icons-material/Delete\";\nimport { useTheme } from \"@mui/material/styles\";\nimport EnhancedTable from \"components/layouts/EnhancedTable\";\nimport { useSelector } from \"react-redux\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { isSelected } from \"helpers/isSelected\";\nimport PersonAddAlt1Icon from \"@mui/icons-material/PersonAddAlt1\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { getPartners, getSingleProvider } from \"components/graphQL/useQuery\";\nimport { addPartner, addPartnerCategory } from \"components/graphQL/Mutation\";\n// import { timeConverter } from \"components/Utilities/Time\";\nimport { partnersHeadCells } from \"components/Utilities/tableHeaders\";\nimport Loader from \"components/Utilities/Loader\";\n\nimport { Button, Checkbox, TableCell, Avatar, TableRow, Grid } from \"@mui/material\";\nconst useStyles = makeStyles((theme) => ({\n  searchGrid: {\n    \"&.MuiGrid-root\": {\n      flex: 1,\n      marginRight: \"5rem\",\n    },\n  },\n  actionBtnGrid: {\n    \"&.MuiGrid-root\": {\n      marginRight: \"1.5rem\",\n    },\n  },\n  button: {\n    \"&.MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"0.5rem\",\n      maxWidth: \"7rem\",\n      fontSize: \".85rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"0.85rem\",\n      },\n\n      \"& .MuiButton-endIcon\": {\n        marginLeft: \".2rem\",\n        marginTop: \"-.2rem\",\n      },\n    },\n  },\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.25rem !important\",\n      height: \"2.7rem\",\n      borderRadius: \"1.3rem\",\n    },\n  },\n  tableBtn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      height: \"3rem\",\n      fontSize: \"1.25rem\",\n      borderRadius: \"2rem\",\n      boxShadow: \"none\",\n\n      \"&:hover\": {\n        \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n          color: \"#fff\",\n        },\n      },\n\n      \"&:active\": {\n        boxShadow: \"none\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \"1.5rem\",\n      },\n    },\n  },\n\n  redBtn: {\n    \"&.MuiButton-root\": {\n      background: theme.palette.common.lightRed,\n      color: theme.palette.common.red,\n\n      \"&:hover\": {\n        background: theme.palette.error.light,\n        color: \"#fff\",\n      },\n    },\n  },\n  FormLabel: {\n    \"&.MuiFormLabel-root\": {\n      ...theme.typography.FormLabel,\n    },\n  },\n  searchFilterBtn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      background: theme.palette.common.black,\n      width: \"100%\",\n    },\n  },\n  uploadBtn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      background: \"#f2f2f2\",\n      boxShadow: \"none\",\n      color: theme.palette.common.black,\n\n      \"&:hover\": {\n        background: \"#f2f3f3\",\n        boxShadow: \"none\",\n      },\n\n      \"&:active\": {\n        boxShadow: \"none\",\n      },\n    },\n  },\n}));\n\nconst Partners = () => {\n  const classes = useStyles();\n\n  const [addPartnerCat] = useMutation(addPartnerCategory);\n  const theme = useTheme();\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n    disabled: theme.palette.common.black,\n  };\n  const redButton = {\n    background: theme.palette.error.light,\n    hover: theme.palette.error.light,\n    active: theme.palette.error.dark,\n  };\n\n  const darkButtonType = {\n    background: theme.palette.primary.main,\n    hover: theme.palette.primary.light,\n    active: theme.palette.primary.dark,\n  };\n  const initialValues = {\n    Name: \"\",\n    date: \"\",\n    category: \"\",\n  };\n\n  const validationSchema = Yup.object({\n    Name: Yup.string(\"Select your Name\").required(\"Name is required\"),\n    cadre: Yup.string(\"Select your Cadre\").required(\"Cadre is required\"),\n    date: Yup.string(\"Date your hospital\").required(\"Date is required\"),\n    specialization: Yup.string(\"select your specialization\").required(\"specialization is required\"),\n  });\n  const initialValues1 = {\n    name: \"\",\n    email: \"\",\n    specialization: \"\",\n    image: null,\n  };\n  const initialValues2 = {\n    category: \"\",\n  };\n  const validationSchema2 = Yup.object({\n    category: Yup.string(\"select your Category\").required(\"Category is required\"),\n  });\n  const validationSchema1 = Yup.object({\n    name: Yup.string(\"Enter your name\").required(\"name is required\"),\n    image: Yup.string(\"Upload a single Image\").required(\"Image is required\"),\n    email: Yup.string().email(\"Enter a valid email\").required(\"Email is required\"),\n    specialization: Yup.string(\"select your Specialization\").required(\"Specialization is required\"),\n  });\n  const [addPartners] = useMutation(addPartner);\n\n  const onSubmit = (values) => {\n    console.log(values);\n  };\n  const onSubmit2 = async (values, onSubmitProps) => {\n    const { category } = values;\n\n    await addPartnerCat({\n      variables: {\n        name: category,\n      },\n    });\n    setAddPartnerCategory(false);\n    onSubmitProps.resetForm();\n  };\n  const onConfirm = async () => {\n    // try {\n    //   await disableUser({\n    //     variables: { id: hcpId },\n    //     refetchQueries: [{ query: getDoctorsProfile }],\n    //   });\n    //   history.push(\"/hcps\");\n    // } catch (error) {\n    //   console.log(error);\n    // }\n    // console.log(values);\n  };\n  const onSubmit1 = async (values, onSubmitProps) => {\n    const { name, email, specialization, image } = values;\n    await addPartners({\n      variables: {\n        name,\n        email,\n        category: specialization,\n        logoImageUrl: image,\n      },\n      refetchQueries: [{ query: getPartners }],\n    });\n    setOpenAddPartner(false);\n    onSubmitProps.resetForm();\n  };\n\n  const [searchPartner, setSearchPartner] = useState(\"\");\n  const [openFilterPartner, setOpenFilterPartner] = useState(false);\n  const [openAddPartner, setOpenAddPartner] = useState(false);\n  const [openDeletePartner, setOpenDeletePartner] = useState(false);\n  const [openAddPartnerCategory, setAddPartnerCategory] = useState(false);\n\n  const specializations = [\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\n  ];\n  const specializations5 = [\n    { key: \"Diagnostics\", value: \"Diagnostics\" },\n    { key: \"Pharmacy\", value: \"Pharmacy\" },\n  ];\n  const [categoryDatas, setCategoryDatas] = useState([]);\n  const { loading, error, data, refetch } = useQuery(getPartners);\n  const categoryData = useQuery(getSingleProvider);\n  const [partner, setPartners] = useState([]);\n  const onChange = async (e) => {\n    setSearchPartner(e);\n    if (e == \"\") {\n      refetch();\n    } else refetch({ dociId: `DOCI-${e.toUpperCase()}` });\n  };\n  useEffect(() => {\n    if (data) {\n      setPartners(data.getPartners.data);\n    }\n    try {\n      if (categoryData && categoryData.data) {\n        const value = categoryData.data.getPartnerCategories.data;\n        setCategoryDatas(\n          value.map((i) => {\n            return { key: i, value: i };\n          }),\n        );\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }, [data, categoryData]);\n\n  const { rowsPerPage, selectedRows, page } = useSelector((state) => state.tables);\n  const { setSelectedRows } = useActions();\n\n  if (error || categoryData.error)\n    return <NoData error={error.message || categoryData.error.message} />;\n  if (loading) return <Loader />;\n  return (\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\n      <Grid item container style={{ paddingBottom: \"5rem\" }}>\n        <Grid item className={classes.searchGrid} gap={2}>\n          <Search\n            value={searchPartner}\n            onChange={(e) => onChange(e.target.value)}\n            placeholder=\"Type to search Partner...\"\n            height=\"5rem\"\n          />\n        </Grid>\n        <Grid item className={classes.actionBtnGrid}>\n          <FilterList title=\"Filter Patners\" onClick={() => setOpenFilterPartner(true)} />\n        </Grid>\n        {/* <Grid item className={classes.actionBtnGrid}>\n          <CustomButton\n            endIcon={<PersonAddAlt1Icon />}\n            title=\"Add  Partner Category\"\n            type={redButton}\n            onClick={() => setAddPartnerCategory(true)}\n          />\n        </Grid> */}\n        <Grid item>\n          <CustomButton\n            endIcon={<PersonAddAlt1Icon />}\n            title=\"Add New Partner\"\n            type={darkButtonType}\n            onClick={() => setOpenAddPartner(true)}\n          />\n        </Grid>\n      </Grid>\n      <Grid item container height=\"100%\" direction=\"column\">\n        {partner.length > 0 ? (\n          <EnhancedTable\n            headCells={partnersHeadCells}\n            rows={partner}\n            page={page}\n            paginationLabel=\"Patients per page\"\n            hasCheckbox={true}\n          >\n            {partner\n              .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((row, index) => {\n                const isItemSelected = isSelected(row.id, selectedRows);\n\n                const labelId = `enhanced-table-checkbox-${index}`;\n\n                return (\n                  <TableRow\n                    hover\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={row._id}\n                    selected={isItemSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        onClick={() => handleSelectedRows(row.id, selectedRows, setSelectedRows)}\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          \"aria-labelledby\": labelId,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ maxWidth: \"20rem\" }}\n                    >\n                      <div\n                        style={{\n                          height: \"100%\",\n                          display: \"flex\",\n                          alignItems: \"left\",\n                        }}\n                      >\n                        <span style={{ marginRight: \"1rem\" }}>\n                          <Avatar\n                            alt={`Display Photo of ${row.name}`}\n                            src={row.logoImageUrl}\n                            sx={{ width: 24, height: 24 }}\n                          />\n                        </span>\n                        <span style={{ fontSize: \"1.25rem\" }}>{row.name}</span>\n                      </div>\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ color: theme.palette.common.grey, maxWidth: \"20rem\" }}\n                    >\n                      {row.category}\n                    </TableCell>\n                    <TableCell align=\"center\" className={classes.tableCell}>\n                      <Button\n                        variant=\"contained\"\n                        disableRipple\n                        className={`${classes.tableBtn} ${classes.redBtn}`}\n                        endIcon={<DeleteIcon color=\"error\" />}\n                        onClick={() => setOpenDeletePartner(true)}\n                      >\n                        Delete partner\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n          </EnhancedTable>\n        ) : (\n          <NoData />\n        )}\n      </Grid>\n      <Modals\n        isOpen={openFilterPartner}\n        title=\"Filter\"\n        rowSpacing={5}\n        handleClose={() => setOpenFilterPartner(false)}\n      >\n        <Formik\n          initialValues={initialValues}\n          onSubmit={onSubmit}\n          validationSchema={validationSchema}\n          validateOnChange={false}\n          validateOnMount\n        >\n          {({ isSubmitting, isValid, dirty }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid item container direction=\"column\" gap={3}>\n                  <Grid item marginBottom={3}>\n                    <Grid container spacing={2}>\n                      <Grid item md>\n                        <FormikControl\n                          control=\"input\"\n                          name=\"Name\"\n                          label=\"Name\"\n                          placeholder=\"Select name\"\n                        />\n                      </Grid>\n                      <Grid item md>\n                        <FormikControl\n                          control=\"select\"\n                          options={specializations}\n                          name=\"date\"\n                          label=\"Date\"\n                          placeholder=\"Choose Date\"\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid item container spacing={2} style={{ marginBottom: \"10rem\" }}>\n                  <Grid item md>\n                    <FormikControl\n                      control=\"select\"\n                      options={specializations}\n                      name=\"category\"\n                      label=\"Category\"\n                      placeholder=\"Select Category\"\n                    />\n                  </Grid>\n                  {/* Placeholder grid */}\n                  <Grid item md></Grid>\n                </Grid>\n                <Grid item container xs={12}>\n                  <CustomButton\n                    title=\"Apply Filter\"\n                    width=\"100%\"\n                    type={buttonType}\n                    isSubmitting={isSubmitting}\n                    disabled={!(dirty || isValid)}\n                  />\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n\n      {/* ADD NEW PARTER MODAL */}\n      <Modals\n        isOpen={openAddPartner}\n        title=\"Add Partners\"\n        rowSpacing={5}\n        handleClose={() => setOpenAddPartner(false)}\n      >\n        <Formik\n          initialValues={initialValues1}\n          onSubmit={onSubmit1}\n          validationSchema={validationSchema1}\n          validateOnChange={false}\n          validateOnMount\n        >\n          {({ isSubmitting, isValid, dirty, setFieldValue }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid container direction=\"column\" gap={4}>\n                  <Grid item container>\n                    <Grid item container direction=\"column\" gap={1}>\n                      <Grid item container>\n                        <Grid item container>\n                          <FormikControl\n                            control=\"input\"\n                            label=\"Name\"\n                            id=\"name\"\n                            name=\"name\"\n                            placeholder=\"Enter last name\"\n                          />\n                        </Grid>\n                      </Grid>\n                      <Grid item container>\n                        <Grid item container>\n                          <FormikControl\n                            control=\"input\"\n                            label=\"Email\"\n                            id=\"name\"\n                            name=\"email\"\n                            placeholder=\"Enter Email\"\n                          />\n                        </Grid>\n                      </Grid>\n                      <Grid item container>\n                        <Grid item container>\n                          <FormikControl\n                            control=\"select\"\n                            options={ [{ key: \"Diagnostics\", value: \"Diagnostics\" },\n                            { key: \"Pharmacy\", value: \"Pharmacy\" }]}\n                            name=\"specialization\"\n                            label=\"Category\"\n                            placeholder=\"Category\"\n                          />\n                        </Grid>\n                      </Grid>\n                      <Grid item container direction=\"column\" gap={2}>\n                        <Grid item container>\n                          <Grid container spacing={2}>\n                            <Grid item md>\n                              <FormikControl\n                                control=\"file\"\n                                name=\"image\"\n                                label=\"Company Logo\"\n                                setFieldValue={setFieldValue}\n                              />\n                            </Grid>\n                          </Grid>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item container>\n                    <CustomButton\n                      title=\"Add Partner\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n\n      {/* Add Partner Category */}\n      <Modals\n        isOpen={openAddPartnerCategory}\n        title=\"Add Partners Category\"\n        rowSpacing={5}\n        handleClose={() => setAddPartnerCategory(false)}\n      >\n        <Formik\n          initialValues={initialValues2}\n          onSubmit={onSubmit2}\n          validationSchema={validationSchema2}\n          validateOnChange={false}\n          validateOnMount\n        >\n          {({ isSubmitting, isValid, dirty }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid container direction=\"column\" gap={3}>\n                  <Grid item container>\n                    <Grid item container direction=\"column\" gap={1}>\n                      <Grid item container>\n                        <FormikControl\n                          control=\"select\"\n                          options={specializations5}\n                          name=\"category\"\n                          label=\"Category\"\n                          placeholder=\"Specialization\"\n                        />\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item container>\n                    <CustomButton\n                      title=\"Add Partner\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n      <DeletePartner\n        open={openDeletePartner}\n        setOpen={setOpenDeletePartner}\n        title=\"Delete Partner\"\n        btnValue=\"delete\"\n        onConfirm={onConfirm}\n        confirmationMsg=\"delete partner\"\n      />\n    </Grid>\n  );\n};\n\nexport default Partners;\n","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Chat.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Messages.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Medications.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/MedicalRecords.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Management.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Hcps.js",["586","587","588","589"],"import React, { useState, useEffect } from \"react\";\nimport { Formik, Form } from \"formik\";\nimport * as Yup from \"yup\";\nimport Loader from \"components/Utilities/Loader\";\nimport displayPhoto from \"assets/images/avatar.svg\";\nimport NoData from \"components/layouts/NoData\";\nimport FormikControl from \"components/validation/FormikControl\";\nimport PropTypes from \"prop-types\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport { makeStyles } from \"@mui/styles\";\nimport Modals from \"components/Utilities/Modal\";\nimport Search from \"components/Utilities/Search\";\nimport FilterList from \"components/Utilities/FilterList\";\nimport CustomButton from \"components/Utilities/CustomButton\";\nimport AddIcon from \"@mui/icons-material/Add\";\nimport { useTheme } from \"@mui/material/styles\";\nimport EnhancedTable from \"components/layouts/EnhancedTable\";\nimport { hcpsHeadCells } from \"components/Utilities/tableHeaders\";\nimport ArrowForwardIosIcon from \"@mui/icons-material/ArrowForwardIos\";\nimport { Link } from \"react-router-dom\";\nimport { useSelector } from \"react-redux\";\nimport { useActions } from \"components/hooks/useActions\";\nimport { handleSelectedRows } from \"helpers/selectedRows\";\nimport { isSelected } from \"helpers/isSelected\";\nimport { Grid, TableRow, TableCell, Button, Checkbox, Chip, Avatar } from \"@mui/material\";\nimport { getDoctorsProfile } from \"components/graphQL/useQuery\";\nimport { createDOctorProfile } from \"components/graphQL/Mutation\";\nimport { timeConverter } from \"components/Utilities/Time\";\n\n// const statusType = [\"Active\", \"Blocked\"];\n\nconst useStyles = makeStyles((theme) => ({\n  searchGrid: {\n    \"&.MuiGrid-root\": {\n      flex: 1,\n      marginRight: \"5rem\",\n    },\n  },\n  filterBtnGrid: {\n    \"&.MuiGrid-root\": {\n      marginRight: \"3rem\",\n    },\n  },\n  button: {\n    \"&.MuiButton-root\": {\n      background: \"#fff\",\n      color: theme.palette.common.grey,\n      textTransform: \"none\",\n      borderRadius: \"2rem\",\n      display: \"flex\",\n      alignItems: \"center\",\n      padding: \"0.5rem\",\n      maxWidth: \"12rem\",\n      fontSize: \"1rem\",\n\n      \"&:hover\": {\n        background: \"#fcfcfc\",\n      },\n\n      \"&:active\": {\n        background: \"#fafafa\",\n      },\n\n      \"& .MuiButton-endIcon>*:nth-of-type(1)\": {\n        fontSize: \".85rem\",\n      },\n\n      \"& .MuiButton-endIcon\": {\n        marginLeft: \".2rem\",\n        marginTop: \"-.2rem\",\n      },\n    },\n  },\n  badge: {\n    \"&.MuiChip-root\": {\n      fontSize: \"1.25rem !important\",\n      height: \"2.7rem\",\n      borderRadius: \"1.3rem\",\n    },\n  },\n\n  searchFilterBtn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      background: theme.palette.common.black,\n      width: \"100%\",\n    },\n  },\n  uploadBtn: {\n    \"&.MuiButton-root\": {\n      ...theme.typography.btn,\n      background: \"#f2f2f2\",\n      boxShadow: \"none\",\n      color: theme.palette.common.black,\n\n      \"&:hover\": {\n        background: \"#f2f3f3\",\n        boxShadow: \"none\",\n      },\n\n      \"&:active\": {\n        boxShadow: \"none\",\n      },\n    },\n  },\n}));\n\nconst Hcps = ({ setSelectedSubMenu, setSelectedHcpMenu }) => {\n  const classes = useStyles();\n  const theme = useTheme();\n  const [pageInfo, setPageInfo] = useState([]);\n  const [rowsPerPage, setRowsPerPage] = useState(0);\n  const cadre = [\n    { key: \"1\", value: \"1\" },\n    { key: \"2\", value: \"2\" },\n    { key: \"3\", value: \"3\" },\n    { key: \"4\", value: \"4\" },\n    { key: \"5\", value: \"5\" },\n  ];\n  const buttonType = {\n    background: theme.palette.common.black,\n    hover: theme.palette.primary.main,\n    active: theme.palette.primary.dark,\n  };\n  const { data, error, loading, refetch } = useQuery(getDoctorsProfile);\n\n  const fetchMoreFunc = (e, newPage) => {\n    refetch({ page: newPage });\n  };\n\n  const onChange = async (e) => {\n    setSearchHcp(e);\n    if (e == \"\") {\n      refetch();\n    } else refetch({ dociId: `HEALA-${e.toUpperCase()}` });\n  };\n  const [profiles, setProfiles] = useState(\"\");\n  useEffect(() => {\n    if (data) {\n      setProfiles(data.doctorProfiles.profile);\n      setPageInfo(data.doctorProfiles.pageInfo);\n    }\n  }, [data]);\n\n  const [searchHcp, setSearchHcp] = useState(\"\");\n  const [openHcpFilter, setOpenHcpFilter] = useState(false);\n  const [openAddHcp, setOpenAddHcp] = useState(false);\n\n  const initialValues1 = {\n    hospital: \"\",\n    specialization: \"\",\n    phone: \"\",\n    cadre: \"\",\n  };\n\n  const validationSchema1 = Yup.object({\n    hospital: Yup.string(\"Enter your hospital\"),\n    specialization: Yup.string(\"Enter your specialization\"),\n    phone: Yup.number(\"Enter a valid email\").typeError(\"Enter a current Number\"),\n    cadre: Yup.string(\"Enter your Cadre\"),\n  });\n  const onSubmit1 = async (values) => {\n    console.log(values);\n    const { hospital, specialization, phone, cadre } = values;\n    await refetch({\n      specialization,\n    });\n    setOpenHcpFilter(false);\n  };\n  const onSubmit = async (values) => {\n    const {\n      createdAt,\n      updatedAt,\n      firstName,\n      lastName,\n      gender,\n      phone,\n      email,\n      hospital,\n      dociId,\n      specialization,\n      dob,\n      cadre,\n      image,\n    } = values;\n    const correctDOB = timeConverter(dob);\n    await createDoc({\n      variables: {\n        dociId,\n        createdAt,\n        updatedAt,\n        firstName,\n        lastName,\n        gender,\n        phoneNumber: phone,\n        email,\n        hospital,\n        specialization,\n        dob: correctDOB,\n        cadre,\n        image,\n        providerId: \"61db6f8968b248001aec4fcb\",\n      },\n      refetchQueries: [{ query: getDoctorsProfile }],\n    });\n    setOpenAddHcp(false)\n\n  };\n  const specializations = [\n    { key: \"diagnostics\", value: \"diagnostics\" },\n    { key: \"pharmacy\", value: \"pharmacy\" },\n  ];\n\n  const gender = [\n    { key: \"Male\", value: \"Male\" },\n    { key: \"Female\", value: \"Female\" },\n  ];\n\n  const initialValues = {\n    firstName: \"\",\n    lastName: \"\",\n    specialization: \"\",\n    image: null,\n    cadre: \"\",\n    gender: \"\",\n    hospital: \"\",\n    phone: \"\",\n    dob: null,\n    dociId: \"\",\n  };\n  const validationSchema = Yup.object({\n    firstName: Yup.string(\"Enter your firstName\").required(\"firstName is required\"),\n    hospital: Yup.string(\"Enter your hosptial\").required(\"hospital is required\"),\n    dob: Yup.date(\"required\").typeError(\" Enter a valid DOB\").required(\" DOB required\"),\n    dociId: Yup.string(\"Enter dociId\").required(\"DociId required\"),\n    gender: Yup.string(\"select your Gender\").required(\"Select a gender\"),\n    phone: Yup.number(\"Enter your Phone Number\")\n      .typeError(\" Enter a valid phone number\")\n      .min(11, \"min value is  11 digits\")\n      .required(\"Phone number is required\"),\n    lastName: Yup.string(\"Enter your lastName\").required(\"LastName is required\"),\n    image: Yup.string(\"Upload a single Image\")\n      .typeError(\"Pick correct image\")\n      .required(\"Image is required\"),\n    specialization: Yup.string(\"select your Specialization\").required(\"Specialization is required\"),\n    cadre: Yup.string(\"select your Cadre\").required(\"Cadre is required\"),\n  });\n  const [createDoc] = useMutation(createDOctorProfile);\n\n  const { selectedRows } = useSelector((state) => state.tables);\n  const { page, totalPages, hasNextPage, hasPrevPage, limit, totalDocs } = pageInfo;\n  const { setSelectedRows } = useActions();\n  if (loading) return <Loader />;\n  if (error) return <NoData error={error.message} />;\n  return (\n    <Grid container direction=\"column\" gap={2} flexWrap=\"nowrap\" height=\"100%\">\n      <Grid item container>\n        <Grid item className={classes.searchGrid}>\n          <Search\n            value={searchHcp}\n            onChange={(e) => onChange(e.target.value)}\n            placeholder=\"Type to search Doctors by Heala ID e.g AJV9WVIP6M\"\n            height=\"5rem\"\n          />\n        </Grid>\n        <Grid item className={classes.filterBtnGrid}>\n          <FilterList onClick={() => setOpenHcpFilter(true)} title=\"Filter Doctors\" />\n        </Grid>\n        <Grid item>\n          <CustomButton\n            endIcon={<AddIcon />}\n            title=\"Add Doctor\"\n            type={buttonType}\n            onClick={() => setOpenAddHcp(true)}\n          />\n        </Grid>\n      </Grid>\n      <Grid item container height=\"100%\" direction=\"column\">\n        {profiles.length > 0 ? (\n          <EnhancedTable\n            headCells={hcpsHeadCells}\n            rows={profiles}\n            paginationLabel=\"Doctors per page\"\n            page={page}\n            limit={limit}\n            totalPages={totalPages}\n            totalDocs={totalDocs}\n            rowsPerPage={rowsPerPage}\n            setRowsPerPage={setRowsPerPage}\n            hasNextPage={hasNextPage}\n            hasPrevPage={hasPrevPage}\n            handleChangePage={fetchMoreFunc}\n            hasCheckbox={true}\n          >\n            {profiles\n              // .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n              .map((row, index) => {\n                const {\n                  _id,\n                  dociId,\n                  firstName,\n                  hospital,\n                  status,\n                  specialization,\n                  consultations,\n                  picture,\n                  lastName,\n                } = row;\n                const isItemSelected = isSelected(_id, selectedRows);\n                const labelId = `enhanced-table-checkbox-${index}`;\n                return (\n                  <TableRow\n                    hover\n                    role=\"checkbox\"\n                    aria-checked={isItemSelected}\n                    tabIndex={-1}\n                    key={_id}\n                    selected={isItemSelected}\n                  >\n                    <TableCell padding=\"checkbox\">\n                      <Checkbox\n                        onClick={() => handleSelectedRows(_id, selectedRows, setSelectedRows)}\n                        color=\"primary\"\n                        checked={isItemSelected}\n                        inputProps={{\n                          \"aria-labelledby\": labelId,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell\n                      id={labelId}\n                      scope=\"row\"\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ color: theme.palette.common.grey, minWidth: \"10rem\" }}\n                    >\n                      {dociId && dociId.split(\"-\")[1]}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      <div\n                        style={{\n                          height: \"100%\",\n                          display: \"flex\",\n                          alignItems: \"left\",\n                        }}\n                      >\n                        <span style={{ marginRight: \"1rem\" }}>\n                          <Avatar\n                            alt={`Display Photo of ${firstName}`}\n                            src={picture ? picture : displayPhoto}\n                            sx={{ width: 24, height: 24 }}\n                          />\n                        </span>\n                        <span style={{ fontSize: \"1.25rem\" }}>\n                          {firstName} {lastName}\n                        </span>\n                      </div>\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ color: theme.palette.common.grey }}\n                    >\n                      {specialization}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      {consultations ? consultations : 0}\n                    </TableCell>\n                    <TableCell\n                      align=\"left\"\n                      className={classes.tableCell}\n                      style={{ color: theme.palette.common.grey }}\n                    >\n                      {hospital ? hospital : \"No Hospital\"}\n                    </TableCell>\n                    <TableCell align=\"left\" className={classes.tableCell}>\n                      <Chip\n                        label={status ? status : \"No Status\"}\n                        className={classes.badge}\n                        style={{\n                          background:\n                            status === \"Active\"\n                              ? theme.palette.common.lightGreen\n                              : theme.palette.common.lightRed,\n                          color:\n                            status === \"Active\"\n                              ? theme.palette.common.green\n                              : theme.palette.common.red,\n                        }}\n                      />\n                    </TableCell>\n                    <TableCell>\n                      <Button\n                        variant=\"contained\"\n                        className={classes.button}\n                        component={Link}\n                        to={`hcps/${_id}`}\n                        endIcon={<ArrowForwardIosIcon />}\n                        onClick={() => {\n                          setSelectedSubMenu(3);\n                          setSelectedHcpMenu(0);\n                        }}\n                      >\n                        View Doctor\n                      </Button>\n                    </TableCell>\n                  </TableRow>\n                );\n              })}\n          </EnhancedTable>\n        ) : (\n          <NoData />\n        )}\n      </Grid>\n      {/* Filter Modal */}\n      <Modals\n        isOpen={openHcpFilter}\n        title=\"Filter\"\n        rowSpacing={5}\n        handleClose={() => setOpenHcpFilter(false)}\n      >\n        <Formik\n          initialValues={initialValues1}\n          onSubmit={onSubmit1}\n          validationSchema={validationSchema1}\n          validateOnChange={false}\n          validateOnMount\n        >\n          {({ isSubmitting, isValid, dirty }) => {\n            return (\n              <Form style={{ marginTop: \"3rem\" }}>\n                <Grid item container direction=\"column\" gap={1}>\n                  <Grid item container rowSpacing={3}>\n                    <Grid item container>\n                      <FormikControl\n                        control=\"select\"\n                        options={specializations}\n                        name=\"specialization\"\n                        label=\"Specialization\"\n                        placeholder=\"Select Specialization\"\n                      />\n                    </Grid>\n                  </Grid>\n                </Grid>\n                <Grid item marginTop={3}>\n                  <CustomButton\n                    title=\"Apply Filter\"\n                    width=\"100%\"\n                    type={buttonType}\n                    isSubmitting={isSubmitting}\n                    disabled={!(dirty || isValid)}\n                  />\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n      {/* ADD Doctor MODAL */}\n      <Modals\n        isOpen={openAddHcp}\n        title=\"Add Doctor\"\n        rowSpacing={5}\n        height=\"auto\"\n        handleClose={() => setOpenAddHcp(false)}\n      >\n        <Formik\n          initialValues={initialValues}\n          onSubmit={onSubmit}\n          validationSchema={validationSchema}\n          validateOnChange={false}\n          validateOnMount\n        >\n          {({ isSubmitting, dirty, isValid, setFieldValue, setValues }) => {\n            return (\n              <Form style={{ marginTop: \"1rem\" }}>\n                <Grid container direction=\"column\" gap={2}>\n                  <Grid item container direction=\"column\" gap={1}>\n                    <Grid item container>\n                      <Grid container spacing={2}>\n                        <Grid item md>\n                          <FormikControl\n                            control=\"input\"\n                            label=\"First Name\"\n                            id=\"firstName\"\n                            name=\"firstName\"\n                            placeholder=\"Enter first name\"\n                          />\n                        </Grid>\n                        <Grid item md>\n                          <FormikControl\n                            control=\"input\"\n                            label=\"Last Name\"\n                            id=\"lastName\"\n                            name=\"lastName\"\n                            placeholder=\"Enter last name\"\n                          />\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                    <Grid item container direction=\"column\" gap={2}>\n                      <Grid item container>\n                        <Grid container spacing={2}>\n                          <Grid item md>\n                            <FormikControl\n                              control=\"date\"\n                              name=\"dob\"\n                              label=\"DOB\"\n                              setFieldValue={setFieldValue}\n                              setValues={setValues}\n                            />\n                          </Grid>\n                          <Grid item md>\n                            <Grid container direction=\"column\">\n                              <FormikControl\n                                control=\"select\"\n                                options={specializations}\n                                name=\"specialization\"\n                                label=\"Specialization\"\n                                placeholder=\"Specialization\"\n                              />\n                            </Grid>\n                          </Grid>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item container direction=\"column\" gap={2}>\n                    <Grid item container>\n                      <Grid container spacing={2}>\n                        <Grid item md>\n                          <FormikControl\n                            control=\"select\"\n                            label=\"Gender\"\n                            id=\"gender\"\n                            name=\"gender\"\n                            options={gender}\n                            placeholder=\"Gender\"\n                          />\n                        </Grid>\n                        <Grid item md>\n                          <FormikControl\n                            control=\"input\"\n                            label=\"Phone Number\"\n                            id=\"phone\"\n                            name=\"phone\"\n                            placeholder=\"Enter last Phone number\"\n                          />\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                    <Grid item container direction=\"column\" gap={2}>\n                      <Grid item container>\n                        <Grid container spacing={2}>\n                          <Grid item md>\n                            <FormikControl\n                              control=\"input\"\n                              label=\"Hospital\"\n                              id=\"hospital\"\n                              name=\"hospital\"\n                              placeholder=\"Enter hospital Name\"\n                            />\n                          </Grid>\n                          <Grid item md>\n                            <Grid container direction=\"column\">\n                              <FormikControl\n                                control=\"select\"\n                                options={cadre}\n                                name=\"cadre\"\n                                label=\"Cadre\"\n                                placeholder=\"Select Cadre\"\n                              />\n                            </Grid>\n                          </Grid>\n                        </Grid>\n                      </Grid>\n                    </Grid>\n                  </Grid>\n                  <Grid item container spacing={2} alignItems=\"center\">\n                    <Grid item container md>\n                      <FormikControl\n                        control=\"file\"\n                        name=\"image\"\n                        label=\"Profile Pics\"\n                        setFieldValue={setFieldValue}\n                      />\n                    </Grid>\n                    <Grid item md>\n                      <FormikControl\n                        control=\"input\"\n                        label=\"Heala-ID\"\n                        id=\"dociId\"\n                        name=\"dociId\"\n                        placeholder=\"Enter Heala ID\"\n                      />\n                    </Grid>\n                  </Grid>\n                  <Grid item container>\n                    <CustomButton\n                      title=\"Add Doctor\"\n                      width=\"100%\"\n                      type={buttonType}\n                      isSubmitting={isSubmitting}\n                      disabled={!(dirty || isValid)}\n                    />\n                  </Grid>\n                </Grid>\n              </Form>\n            );\n          }}\n        </Formik>\n      </Modals>\n    </Grid>\n  );\n};\n\nHcps.propTypes = {\n  setSelectedSubMenu: PropTypes.func.isRequired,\n  setSelectedHcpMenu: PropTypes.func.isRequired,\n};\n\nexport default Hcps;\n","/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/HcpProfile.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/HcpEarnings.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/HcpPatients.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/HcpConsultations.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Payout.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/HCPChat.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/HcpAvailability.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/HcpCaseNote.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/HcpAppointments.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/HCP.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Financetable.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Finance.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Email.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/EditManagement.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Dashboard.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/CreateMessage.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Consultations.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/CreateEmail.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/CaseNotes.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Appointments.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/pages/Administrator.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/Search.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/Modal.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/LineChart.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/LinearProgress.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/FormSelect.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/FormInput.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/FilterList.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/DataGrid.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/CircularChart.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/CheckBox.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/Button.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/AvailabilityCard.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/modals/UserTypeModal.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/modals/ReferPatient.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/modals/SubscriptionModal.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/modals/PermissionModal.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/validation/FormikControl.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/bMI.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/modals/RoleModal.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/CircularProgress.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/modals/Filter.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/AvailabilityTable.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/DashboardChart.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/DataHeader.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/index.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/modals/ProviderModal.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/validation/DateTimePicker.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/validation/File.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/PageHero.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/LineGraph.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/EnhancedTableAction.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/layouts/Card.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/validation/Textarea.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/validation/Date.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/validation/Select.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/validation/Checkbox.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/validation/Input.js",[],"/home/codabae/Documents/Projects/workProjects/HEALA/DProject/src/components/Utilities/Texts.js",[],{"ruleId":"590","severity":1,"message":"591","line":54,"column":15,"nodeType":null,"messageId":"592","endLine":56,"endColumn":1,"fix":"593"},{"ruleId":"590","severity":1,"message":"594","line":77,"column":27,"nodeType":null,"messageId":"595","endLine":78,"endColumn":5,"fix":"596"},{"ruleId":"590","severity":1,"message":"597","line":588,"column":1,"nodeType":null,"messageId":"595","endLine":589,"endColumn":1,"fix":"598"},{"ruleId":"590","severity":1,"message":"599","line":602,"column":20,"nodeType":null,"messageId":"592","endLine":603,"endColumn":1,"fix":"600"},{"ruleId":"590","severity":1,"message":"601","line":123,"column":27,"nodeType":null,"messageId":"592","endLine":123,"endColumn":34,"fix":"602"},{"ruleId":"603","severity":1,"message":"604","line":115,"column":13,"nodeType":"605","messageId":"606","endLine":115,"endColumn":17},{"ruleId":"603","severity":1,"message":"607","line":115,"column":27,"nodeType":"605","messageId":"606","endLine":115,"endColumn":37},{"ruleId":"603","severity":1,"message":"608","line":115,"column":39,"nodeType":"605","messageId":"606","endLine":115,"endColumn":44},{"ruleId":"590","severity":1,"message":"609","line":116,"column":24,"nodeType":null,"messageId":"592","endLine":116,"endColumn":31,"fix":"610"},{"ruleId":"590","severity":1,"message":"611","line":322,"column":17,"nodeType":null,"messageId":"612","endLine":322,"endColumn":17,"fix":"613"},{"ruleId":"590","severity":1,"message":"614","line":323,"column":1,"nodeType":null,"messageId":"592","endLine":324,"endColumn":1,"fix":"615"},{"ruleId":"590","severity":1,"message":"611","line":325,"column":21,"nodeType":null,"messageId":"612","endLine":325,"endColumn":21,"fix":"616"},{"ruleId":"590","severity":1,"message":"611","line":326,"column":1,"nodeType":null,"messageId":"612","endLine":326,"endColumn":1,"fix":"617"},{"ruleId":"590","severity":1,"message":"611","line":327,"column":21,"nodeType":null,"messageId":"612","endLine":327,"endColumn":21,"fix":"618"},{"ruleId":"590","severity":1,"message":"611","line":328,"column":1,"nodeType":null,"messageId":"612","endLine":328,"endColumn":1,"fix":"619"},{"ruleId":"590","severity":1,"message":"611","line":329,"column":21,"nodeType":null,"messageId":"612","endLine":329,"endColumn":21,"fix":"620"},{"ruleId":"590","severity":1,"message":"611","line":330,"column":1,"nodeType":null,"messageId":"612","endLine":330,"endColumn":1,"fix":"621"},{"ruleId":"590","severity":1,"message":"597","line":334,"column":28,"nodeType":null,"messageId":"595","endLine":335,"endColumn":1,"fix":"622"},{"ruleId":"603","severity":1,"message":"623","line":154,"column":9,"nodeType":"605","messageId":"606","endLine":154,"endColumn":18},{"ruleId":"603","severity":1,"message":"624","line":252,"column":10,"nodeType":"605","messageId":"606","endLine":252,"endColumn":23},{"ruleId":"590","severity":1,"message":"625","line":513,"column":38,"nodeType":null,"messageId":"592","endLine":513,"endColumn":40,"fix":"626"},{"ruleId":"590","severity":1,"message":"627","line":514,"column":29,"nodeType":null,"messageId":"592","endLine":514,"endColumn":67,"fix":"628"},{"ruleId":"603","severity":1,"message":"629","line":164,"column":13,"nodeType":"605","messageId":"606","endLine":164,"endColumn":21},{"ruleId":"603","severity":1,"message":"608","line":164,"column":39,"nodeType":"605","messageId":"606","endLine":164,"endColumn":44},{"ruleId":"603","severity":1,"message":"630","line":164,"column":46,"nodeType":"605","messageId":"606","endLine":164,"endColumn":51},{"ruleId":"590","severity":1,"message":"631","line":206,"column":25,"nodeType":null,"messageId":"592","endLine":207,"endColumn":1,"fix":"632"},"prettier/prettier","Replace `⏎··⏎` with `,`","replace",{"range":"633","text":"634"},"Delete `⏎····`","delete",{"range":"635","text":"636"},"Delete `⏎`",{"range":"637","text":"636"},"Replace `$providerId⏎` with `·$providerId`",{"range":"638","text":"639"},"Replace `'docD')` with `·\"docD\");`",{"range":"640","text":"641"},"no-unused-vars","'name' is assigned a value but never used.","Identifier","unusedVar","'bloodGroup' is assigned a value but never used.","'phone' is assigned a value but never used.","Replace `'gggg')` with `·\"gggg\");`",{"range":"642","text":"643"},"Insert `··`","insert",{"range":"644","text":"645"},"Replace `⏎` with `··`",{"range":"646","text":"645"},{"range":"647","text":"645"},{"range":"648","text":"645"},{"range":"649","text":"645"},{"range":"650","text":"645"},{"range":"651","text":"645"},{"range":"652","text":"645"},{"range":"653","text":"636"},"'redButton' is assigned a value but never used.","'categoryDatas' is assigned a value but never used.","Replace `·[` with `[⏎······························`",{"range":"654","text":"655"},"Replace `{·key:·\"Pharmacy\",·value:·\"Pharmacy\"·}` with `··{·key:·\"Pharmacy\",·value:·\"Pharmacy\"·},⏎····························`",{"range":"656","text":"657"},"'hospital' is assigned a value but never used.","'cadre' is assigned a value but never used.","Replace `⏎` with `;`",{"range":"658","text":"659"},[924,928],",",[1409,1414],"",[10809,10810],[11144,11156]," $providerId",[3101,3108]," \"docD\");",[3385,3392]," \"gggg\");",[11045,11045],"  ",[11057,11058],[11111,11111],[11128,11128],[11189,11189],[11203,11203],[11268,11268],[11299,11299],[11429,11430],[16630,16632],"[\n                              ",[16706,16744],"  { key: \"Pharmacy\", value: \"Pharmacy\" },\n                            ",[5576,5577],";"]